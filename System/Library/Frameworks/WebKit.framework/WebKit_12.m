_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::resume(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34BE048;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::resume(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BE048;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::resume(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned __int8 *result;
  WTF::StringImpl *v6;

  v1 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(v1 + 608) & 0xFFFFFFFE) == 2)
    return (unsigned __int8 *)WebKit::NetworkDataTaskBlob::clearStream(*(WebCore::AsyncFileStream **)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return (unsigned __int8 *)WebKit::NetworkDataTaskBlob::clearStream(*(WebCore::AsyncFileStream **)(a1 + 8));
  v3 = *(_QWORD *)WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(v1 + 128));
  if (!v3 || (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v3, "get", 3uLL) & 1) == 0)
    return WebKit::NetworkDataTaskBlob::didFail(v1, 5);
  if (!*(_QWORD *)(v1 + 560))
    return WebKit::NetworkDataTaskBlob::didFail(v1, 1);
  WebCore::ResourceRequestBase::httpHeaderField();
  *(_BYTE *)(v1 + 612) = v6 != 0;
  if (v6 && (WebCore::parseRange() & 1) == 0)
    WebKit::NetworkDataTaskBlob::didFail(v1, 3);
  else
    WebKit::NetworkDataTaskBlob::getSizeForNext((WebKit::NetworkDataTaskBlob *)v1);
  result = (unsigned __int8 *)v6;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (unsigned __int8 *)WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

unint64_t WTF::Vector<long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::dispatchDidReceiveResponse(void)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34BE070;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::dispatchDidReceiveResponse(void)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BE070;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WebCore::AsyncFileStream *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::dispatchDidReceiveResponse(void)::$_0,void,WebCore::PolicyAction>::call(WebCore::AsyncFileStream *result, int *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebKit::Download *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  CFTypeRef cf;

  v2 = *((_QWORD *)result + 1);
  if ((*(_DWORD *)(v2 + 608) & 0xFFFFFFFE) == 2)
    return WebKit::NetworkDataTaskBlob::clearStream(*((WebCore::AsyncFileStream **)result + 1));
  if ((_DWORD)a2 == 1)
  {
    v7 = WTF::FileSystemImpl::openFile();
    *(_DWORD *)(v2 + 676) = v7;
    if (v7 == -1)
    {
      WebKit::cancelledError((WebKit *)(v2 + 128), (uint64_t)&v23);
      WebKit::NetworkDataTaskBlob::didFailDownload((WebKit::NetworkDataTaskBlob *)v2, (const WebCore::ResourceError *)&v23);
      v15 = cf;
      cf = 0;
      if (v15)
        CFRelease(v15);
      v16 = v25;
      v25 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      v22 = v24;
      v24 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v14);
        else
          *(_DWORD *)v22 -= 2;
      }
      result = v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WebCore::AsyncFileStream *)WTF::StringImpl::destroy(result, v14);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v8 = (uint64_t *)(*(_QWORD *)(v2 + 704) + 152);
      v9 = *(_QWORD *)(v2 + 16);
      if (v9)
        v10 = *(_QWORD *)(v9 + 8);
      else
        v10 = 0;
      v11 = *(WTF::StringImpl **)(v2 + 536);
      if (v11)
        *(_DWORD *)v11 += 2;
      v12 = (WebKit::Download *)WTF::fastMalloc((WTF *)0x180);
      v23 = (WTF::StringImpl *)WebKit::Download::Download((uint64_t)v12, v8, *(_QWORD *)(v2 + 40), v2, v10);
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v13);
        else
          *(_DWORD *)v11 -= 2;
      }
      WebKit::DownloadManager::dataTaskBecameDownloadTask(v8, *(_QWORD *)(v2 + 40), (const char ****)&v23);
      WebKit::Download::didCreateDestination(v12, (const WTF::String *)(v2 + 120));
      if (!(*(_DWORD *)(v2 + 588) >> 19))
      {
        v18 = *(unsigned int *)(v2 + 584);
        if (!(v18 >> 19))
        {
          v19 = v18 + (v18 >> 2);
          v20 = 0x7FFFFLL;
          if (v19 >= 0x80000)
            v20 = v19;
          if (v19 >= 0x10)
            v21 = v20 + 1;
          else
            v21 = 0x80000;
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)(v2 + 576), (WTF::FastMalloc *)v21);
        }
      }
      *(_DWORD *)(v2 + 588) = 0x80000;
      WebKit::NetworkDataTaskBlob::read((WTF::StringImpl *)v2, v17);
      result = v23;
      v23 = 0;
      if (result)
        return (WebCore::AsyncFileStream *)(*(uint64_t (**)(WebCore::AsyncFileStream *))(*(_QWORD *)result
                                                                                                 + 8))(result);
    }
  }
  else if (!(_DWORD)a2)
  {
    if (!(*(_DWORD *)(v2 + 588) >> 19))
    {
      v3 = *(unsigned int *)(v2 + 584);
      if (!(v3 >> 19))
      {
        v4 = v3 + (v3 >> 2);
        v5 = 0x7FFFFLL;
        if (v4 >= 0x80000)
          v5 = v4;
        if (v4 >= 0x10)
          v6 = v5 + 1;
        else
          v6 = 0x80000;
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)(v2 + 576), (WTF::FastMalloc *)v6);
      }
    }
    *(_DWORD *)(v2 + 588) = 0x80000;
    return WebKit::NetworkDataTaskBlob::read((WTF::StringImpl *)v2, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34BE098;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34BE098;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;
  WTF::StringImpl *v6;
  CFTypeRef v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  CFTypeRef v14;
  WTF::StringImpl *v15;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v16;
  WTF::StringImpl *v17;
  const WTF::String *v18[11];
  WTF::StringImpl *v19;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  CFTypeRef cf;

  v2 = a1[2];
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = a1[1];
    v4 = WebCore::ResourceRequest::nsURLRequest();
    MEMORY[0x19AEAEC20](&v21, v4);
    WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties((WebCore::ResourceRequest *)(v3 + 3008), (const WebCore::ResourceRequest *)&v21);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v21);
    if (WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequestBase *)(v3 + 3008)))
    {
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v18);
      WebKit::cancelledError((WebKit *)(v3 + 3008), (uint64_t)&v21);
      WebKit::NetworkLoad::didCompleteWithError((WebKit::NetworkLoad *)v3, (const WebCore::ResourceError *)&v21, v18);
      v7 = v24;
      v24 = 0;
      if (v7)
        CFRelease(v7);
      v8 = v23;
      v23 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v6);
        else
          *(_DWORD *)v8 -= 2;
      }
      v11 = v22;
      v22 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v6);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v21;
      v21 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v6);
        else
          *(_DWORD *)v12 -= 2;
      }
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v21);
      v13 = a1[3];
      a1[3] = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v21);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = cf;
      cf = 0;
      if (v14)
        CFRelease(v14);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v21);
      v16 = v20;
      v20 = 0;
      if (v16)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v16);
      v17 = v19;
      v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      return;
    }
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v21, (const WebCore::ResourceRequest *)(v3 + 3008));
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v21);
  }
  v9 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v21);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v6 = a1[1];
  v7 = v6 != 0;
  v8 = v6 - 1;
  if (!v7)
    v8 = 0;
  v20 = *a1;
  if (v8 >> 31)
    goto LABEL_13;
  v21 = v8;
  v19 = *a2;
  v9 = a3[1];
  v7 = v9 != 0;
  v10 = v9 - 1;
  if (!v7)
    v10 = 0;
  v17 = *a3;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1970DBE9CLL);
  }
  v18 = v10;
  v16 = *a4;
  v11 = a5[1];
  v7 = v11 != 0;
  v12 = v11 - 1;
  if (!v7)
    v12 = 0;
  v14 = *a5;
  if (v12 >> 31)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1970DBE7CLL);
  }
  v15 = v12;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v20, &v19, (uint64_t)&v17, &v16, (uint64_t)&v14, a6);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;
  _BOOL4 v22;

  v7 = *a2;
  if (*a2)
    v8 = *(_DWORD *)(v7 + 4);
  else
    v8 = 0;
  v9 = *a4;
  if (*a4)
    v10 = *(_DWORD *)(v9 + 4);
  else
    v10 = 0;
  v11 = *(_DWORD *)(a5 + 8);
  if ((v11 | v10) < 0)
    goto LABEL_30;
  v12 = *(_DWORD *)(a3 + 8);
  v13 = __OFADD__(v10, v11);
  v14 = v10 + v11;
  v15 = v13;
  if (v12 < 0 || v15)
    goto LABEL_30;
  v13 = __OFADD__(v12, v14);
  v16 = v12 + v14;
  v17 = v13;
  if (v8 < 0
    || v17
    || ((v18 = *(_DWORD *)(result + 8), v13 = __OFADD__(v8, v16), v19 = v8 + v16, !v13) ? (v20 = 0) : (v20 = 1),
        v18 < 0 || (v20 & 1) != 0 || (v13 = __OFADD__(v18, v19), v21 = (v18 + v19), v13)))
  {
LABEL_30:
    *a6 = 0;
  }
  else
  {
    v22 = (!v7 || (*(_BYTE *)(v7 + 16) & 4) != 0) && (!v9 || (*(_BYTE *)(v9 + 16) & 4) != 0);
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v21, v22, *(int8x16_t **)result, *(_QWORD *)(result + 8), v7, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v9, a6, *(int8x16_t **)a5, *(_QWORD *)(a5 + 8));
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, int8x16_t *a10, unsigned int a11)
{
  int v16;
  _DWORD *v19;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _DWORD *v27;

  v16 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v19 = v27;
        if (v27)
        {
          v25 = a9;
          v20 = v27 + 5;
          *v27 = 2;
          v19[1] = v16;
          *((_QWORD *)v19 + 1) = v19 + 5;
          v19[4] = 4;
          if (a4)
          {
            if (a4 == 1)
              *v20 = a3->i8[0];
            else
              memcpy(v19 + 5, a3, a4);
          }
          v21 = &v20[a4];
          v27 = (_DWORD *)a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v27, v21);
          v22 = (unint64_t)v27;
          if (v27)
            v22 = v27[1];
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v21[v22], a6->i8, a7, a8, a10, a11);
          a9 = v25;
        }
        goto LABEL_17;
      }
LABEL_13:
      v19 = 0;
      goto LABEL_17;
    }
LABEL_14:
    v19 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_17;
  }
  if (!(_DWORD)result)
    goto LABEL_14;
  if (result > 0x7FFFFFEF)
    goto LABEL_13;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v19 = v27;
  if (v27)
  {
    v24 = (char *)(v27 + 5);
    *v27 = 2;
    v19[1] = v16;
    *((_QWORD *)v19 + 1) = v19 + 5;
    v19[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v24, a3, a4, a5, a6, a7, a8, v23, a10, a11);
  }
LABEL_17:
  *a9 = v19;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRedirection(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::variant<WebCore::ResourceRequest,std::experimental::fundamentals_v3,std::experimental::fundamentals_v3::expected> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;

  *a1 = off_1E34BE0C0;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 27);
  v4 = (const void *)a1[57];
  a1[57] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v5 = (const void *)a1[26];
  a1[26] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRedirection(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::variant<WebCore::ResourceRequest,std::experimental::fundamentals_v3,std::experimental::fundamentals_v3::expected> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  const void *v5;
  void *v6;
  uint64_t v7;

  *a1 = off_1E34BE0C0;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 27);
  v4 = (const void *)a1[57];
  a1[57] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v5 = (const void *)a1[26];
  a1[26] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree((WTF *)a1, v6);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRedirection(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::variant<WebCore::ResourceRequest,std::experimental::fundamentals_v3,std::experimental::fundamentals_v3::expected> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[7];
  _QWORD *v6;

  v5[2] = a1 + 16;
  v5[3] = a1 + 216;
  v5[4] = a1 + 8;
  v5[5] = a1 + 16;
  v5[6] = a1 + 216;
  v5[0] = a1 + 8;
  v5[1] = a1 + 8;
  v2 = *(unsigned int *)(a2 + 656);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit18NetworkLoadChecker16checkRedirectionEON7WebCore15ResourceRequestESE_ONSC_16ResourceResponseEPNSC_27ContentSecurityPolicyClientEONS8_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_18RedirectionTripletENSC_13ResourceErrorEEEEEEEN3__0clINS_7variantIJSD_SN_SO_EEEEEDaOT_EUlRSO_E_JZZNSB_16checkRedirectionESE_SE_SG_SI_ST_ENSV_ISX_EESY_S10_EUlRSN_E_ZZNSB_16checkRedirectionESE_SE_SG_SI_ST_ENSV_ISX_EESY_S10_EUlRSD_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSD_SN_SO_EEEEEEDcSZ_DpT0_(v4);
  }
  else
  {
    v6 = v5;
    return ((uint64_t (*)(_QWORD **))off_1E34BE0D8[v2])(&v6);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit18NetworkLoadChecker16checkRedirectionEON7WebCore15ResourceRequestESE_ONSC_16ResourceResponseEPNSC_27ContentSecurityPolicyClientEONS8_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_18RedirectionTripletENSC_13ResourceErrorEEEEEEEN3__0clINS_7variantIJSD_SN_SO_EEEEEDaOT_EUlRSO_E_JZZNSB_16checkRedirectionESE_SE_SG_SI_ST_ENSV_ISX_EESY_S10_EUlRSN_E_ZZNSB_16checkRedirectionESE_SE_SG_SI_ST_ENSV_ISX_EESY_S10_EUlRSD_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSD_SN_SO_EEEEEEDcSZ_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  const void *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef v43;
  _BYTE v44[40];
  _QWORD v45[7];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  CFTypeRef v55;
  _BYTE v56[40];
  _QWORD v57[6];
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  CFTypeRef v70;
  _QWORD v71[10];
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[19];
  CFTypeRef cf;
  char v84;
  _BYTE v85[656];
  int v86;
  char v87;

  v3 = *a1;
  v5 = *(uint64_t **)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  WTF::URL::URL((uint64_t)v44, (uint64_t *)v4);
  WTF::URL::URL((uint64_t)v45, (uint64_t *)(v4 + 40));
  v45[5] = *(_QWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 88);
  *(_QWORD *)(v4 + 88) = 0;
  v46 = 0u;
  v7 = *(_QWORD *)(v4 + 96);
  *(_QWORD *)(v4 + 96) = 0;
  v45[6] = v6;
  *(_QWORD *)&v46 = v7;
  v8 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(v4 + 104) = 0;
  *((_QWORD *)&v46 + 1) = v8;
  v47 = 0u;
  v9 = *(_QWORD *)(v4 + 112);
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)&v47 = v9;
  v10 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 120) = 0;
  *((_QWORD *)&v47 + 1) = v10;
  v48 = 0u;
  v11 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)&v48 = v11;
  v12 = *(_QWORD *)(v4 + 136);
  *(_QWORD *)(v4 + 136) = 0;
  *((_QWORD *)&v48 + 1) = v12;
  LODWORD(v11) = *(_DWORD *)(v4 + 144);
  v50 = *(_BYTE *)(v4 + 148);
  v49 = v11;
  v13 = *(_OWORD *)(v4 + 152);
  *(_OWORD *)(v4 + 152) = 0u;
  v14 = *(_QWORD *)(v4 + 168);
  v15 = *(_QWORD *)(v4 + 176);
  *(_QWORD *)(v4 + 168) = 0;
  v54 = *(_BYTE *)(v4 + 184);
  v51 = v13;
  v52 = v14;
  v53 = v15;
  v16 = *(const void **)(v4 + 192);
  *(_QWORD *)(v4 + 192) = 0;
  v55 = v16;
  WTF::URL::URL((uint64_t)v56, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)v57, (uint64_t *)(a2 + 40));
  v57[5] = *(_QWORD *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 88) = 0u;
  v58 = v17;
  *(_QWORD *)&v17 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v59 = v17;
  v18 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v60 = v18;
  *(_QWORD *)&v17 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v61 = v17;
  v19 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v62 = v19;
  *(_QWORD *)&v17 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v63 = v17;
  LODWORD(v19) = *(_DWORD *)(a2 + 144);
  v65 = *(_BYTE *)(a2 + 148);
  v64 = v19;
  v20 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  v66 = v20;
  v69 = *(_BYTE *)(a2 + 184);
  v21 = *(_QWORD *)(a2 + 168);
  v22 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  v67 = v21;
  v68 = v22;
  v23 = *(const void **)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v70 = v23;
  v24 = *(_QWORD *)(v3 + 48);
  WTF::URL::URL((uint64_t)v71, (uint64_t *)v24);
  v25 = *(_QWORD *)(v24 + 40);
  *(_QWORD *)(v24 + 40) = 0;
  v71[5] = v25;
  v71[6] = *(_QWORD *)(v24 + 48);
  v26 = *(_QWORD *)(v24 + 56);
  *(_QWORD *)(v24 + 56) = 0;
  v71[7] = v26;
  v27 = *(_QWORD *)(v24 + 64);
  *(_QWORD *)(v24 + 64) = 0;
  v71[8] = v27;
  v28 = *(_QWORD *)(v24 + 72);
  *(_QWORD *)(v24 + 72) = 0;
  v71[9] = v28;
  v72 = 0u;
  v29 = *(_QWORD *)(v24 + 80);
  *(_QWORD *)(v24 + 80) = 0;
  *(_QWORD *)&v72 = v29;
  LODWORD(v29) = *(_DWORD *)(v24 + 88);
  *(_DWORD *)(v24 + 88) = 0;
  DWORD2(v72) = v29;
  LODWORD(v29) = *(_DWORD *)(v24 + 92);
  *(_DWORD *)(v24 + 92) = 0;
  HIDWORD(v72) = v29;
  v73 = 0u;
  v30 = *(_QWORD *)(v24 + 96);
  *(_QWORD *)(v24 + 96) = 0;
  *(_QWORD *)&v73 = v30;
  LODWORD(v30) = *(_DWORD *)(v24 + 104);
  *(_DWORD *)(v24 + 104) = 0;
  DWORD2(v73) = v30;
  LODWORD(v30) = *(_DWORD *)(v24 + 108);
  *(_DWORD *)(v24 + 108) = 0;
  HIDWORD(v73) = v30;
  v31 = *(_QWORD *)(v24 + 112);
  *(_QWORD *)(v24 + 112) = 0;
  v74 = v31;
  LOBYTE(v75) = 0;
  v76 = 0;
  if (*(_BYTE *)(v24 + 128))
  {
    v32 = *(_QWORD *)(v24 + 120);
    *(_QWORD *)(v24 + 120) = 0;
    v75 = v32;
    v76 = 1;
  }
  v33 = *(_OWORD *)(v24 + 136);
  v34 = *(_OWORD *)(v24 + 152);
  v79 = *(_OWORD *)(v24 + 168);
  v78 = v34;
  v77 = v33;
  v35 = *(_OWORD *)(v24 + 184);
  v36 = *(_OWORD *)(v24 + 200);
  v37 = *(_OWORD *)(v24 + 216);
  *(_DWORD *)&v82[15] = *(_DWORD *)(v24 + 231);
  *(_OWORD *)v82 = v37;
  v81 = v36;
  v80 = v35;
  v38 = *(const void **)(v24 + 240);
  *(_QWORD *)(v24 + 240) = 0;
  cf = v38;
  v84 = *(_BYTE *)(v24 + 248);
  WebKit::NetworkLoadChecker::RedirectionTriplet::RedirectionTriplet((uint64_t)v85, (uint64_t)v44);
  v86 = 0;
  v39 = *v5;
  *v5 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v39 + 16))(v39, v85);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (v86 != -1)
    ((void (*)(char *, _BYTE *))off_1E34BDF88[v86])(&v87, v85);
  v86 = -1;
  v41 = cf;
  cf = 0;
  if (v41)
    CFRelease(v41);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v71, v40);
  v42 = v70;
  v70 = 0;
  if (v42)
    CFRelease(v42);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v56);
  v43 = v55;
  v55 = 0;
  if (v43)
    CFRelease(v43);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v44);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit18NetworkLoadChecker16checkRedirectionEON7WebCore15ResourceRequestESE_ONSC_16ResourceResponseEPNSC_27ContentSecurityPolicyClientEONS8_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_18RedirectionTripletENSC_13ResourceErrorEEEEEEEN3__0clINS_7variantIJSD_SN_SO_EEEEEDaOT_EUlRSO_E_JZZNSB_16checkRedirectionESE_SE_SG_SI_ST_ENSV_ISX_EESY_S10_EUlRSN_E_ZZNSB_16checkRedirectionESE_SE_SG_SI_ST_ENSV_ISX_EESY_S10_EUlRSD_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSD_SN_SO_EEEEEEDcSZ_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  const void *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef v43;
  _BYTE v44[40];
  _QWORD v45[7];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  CFTypeRef v55;
  _BYTE v56[40];
  _QWORD v57[6];
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  CFTypeRef v70;
  _QWORD v71[10];
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[19];
  CFTypeRef cf;
  char v84;
  _BYTE v85[656];
  int v86;
  char v87;

  v3 = *a1;
  v5 = *(uint64_t **)(*a1 + 8);
  v4 = *(_QWORD *)(*a1 + 16);
  WTF::URL::URL((uint64_t)v44, (uint64_t *)v4);
  WTF::URL::URL((uint64_t)v45, (uint64_t *)(v4 + 40));
  v45[5] = *(_QWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 88);
  *(_QWORD *)(v4 + 88) = 0;
  v46 = 0u;
  v7 = *(_QWORD *)(v4 + 96);
  *(_QWORD *)(v4 + 96) = 0;
  v45[6] = v6;
  *(_QWORD *)&v46 = v7;
  v8 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(v4 + 104) = 0;
  *((_QWORD *)&v46 + 1) = v8;
  v47 = 0u;
  v9 = *(_QWORD *)(v4 + 112);
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)&v47 = v9;
  v10 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 120) = 0;
  *((_QWORD *)&v47 + 1) = v10;
  v48 = 0u;
  v11 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)&v48 = v11;
  v12 = *(_QWORD *)(v4 + 136);
  *(_QWORD *)(v4 + 136) = 0;
  *((_QWORD *)&v48 + 1) = v12;
  LODWORD(v11) = *(_DWORD *)(v4 + 144);
  v50 = *(_BYTE *)(v4 + 148);
  v49 = v11;
  v13 = *(_OWORD *)(v4 + 152);
  *(_OWORD *)(v4 + 152) = 0u;
  v14 = *(_QWORD *)(v4 + 168);
  v15 = *(_QWORD *)(v4 + 176);
  *(_QWORD *)(v4 + 168) = 0;
  v54 = *(_BYTE *)(v4 + 184);
  v51 = v13;
  v52 = v14;
  v53 = v15;
  v16 = *(const void **)(v4 + 192);
  *(_QWORD *)(v4 + 192) = 0;
  v55 = v16;
  WTF::URL::URL((uint64_t)v56, (uint64_t *)(a2 + 200));
  WTF::URL::URL((uint64_t)v57, (uint64_t *)(a2 + 240));
  v57[5] = *(_QWORD *)(a2 + 280);
  v17 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a2 + 288) = 0u;
  v58 = v17;
  *(_QWORD *)&v17 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  v59 = v17;
  v18 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;
  v60 = v18;
  *(_QWORD *)&v17 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  v61 = v17;
  v19 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 328) = 0;
  v62 = v19;
  *(_QWORD *)&v17 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  v63 = v17;
  LODWORD(v19) = *(_DWORD *)(a2 + 344);
  v65 = *(_BYTE *)(a2 + 348);
  v64 = v19;
  v20 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a2 + 352) = 0u;
  v66 = v20;
  v69 = *(_BYTE *)(a2 + 384);
  v21 = *(_QWORD *)(a2 + 368);
  v22 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 368) = 0;
  v67 = v21;
  v68 = v22;
  v23 = *(const void **)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  v70 = v23;
  v24 = *(_QWORD *)(v3 + 24);
  WTF::URL::URL((uint64_t)v71, (uint64_t *)v24);
  v25 = *(_QWORD *)(v24 + 40);
  *(_QWORD *)(v24 + 40) = 0;
  v71[5] = v25;
  v71[6] = *(_QWORD *)(v24 + 48);
  v26 = *(_QWORD *)(v24 + 56);
  *(_QWORD *)(v24 + 56) = 0;
  v71[7] = v26;
  v27 = *(_QWORD *)(v24 + 64);
  *(_QWORD *)(v24 + 64) = 0;
  v71[8] = v27;
  v28 = *(_QWORD *)(v24 + 72);
  *(_QWORD *)(v24 + 72) = 0;
  v71[9] = v28;
  v72 = 0u;
  v29 = *(_QWORD *)(v24 + 80);
  *(_QWORD *)(v24 + 80) = 0;
  *(_QWORD *)&v72 = v29;
  LODWORD(v29) = *(_DWORD *)(v24 + 88);
  *(_DWORD *)(v24 + 88) = 0;
  DWORD2(v72) = v29;
  LODWORD(v29) = *(_DWORD *)(v24 + 92);
  *(_DWORD *)(v24 + 92) = 0;
  HIDWORD(v72) = v29;
  v73 = 0u;
  v30 = *(_QWORD *)(v24 + 96);
  *(_QWORD *)(v24 + 96) = 0;
  *(_QWORD *)&v73 = v30;
  LODWORD(v30) = *(_DWORD *)(v24 + 104);
  *(_DWORD *)(v24 + 104) = 0;
  DWORD2(v73) = v30;
  LODWORD(v30) = *(_DWORD *)(v24 + 108);
  *(_DWORD *)(v24 + 108) = 0;
  HIDWORD(v73) = v30;
  v31 = *(_QWORD *)(v24 + 112);
  *(_QWORD *)(v24 + 112) = 0;
  v74 = v31;
  LOBYTE(v75) = 0;
  v76 = 0;
  if (*(_BYTE *)(v24 + 128))
  {
    v32 = *(_QWORD *)(v24 + 120);
    *(_QWORD *)(v24 + 120) = 0;
    v75 = v32;
    v76 = 1;
  }
  v33 = *(_OWORD *)(v24 + 136);
  v34 = *(_OWORD *)(v24 + 152);
  v79 = *(_OWORD *)(v24 + 168);
  v78 = v34;
  v77 = v33;
  v35 = *(_OWORD *)(v24 + 184);
  v36 = *(_OWORD *)(v24 + 200);
  v37 = *(_OWORD *)(v24 + 216);
  *(_DWORD *)&v82[15] = *(_DWORD *)(v24 + 231);
  *(_OWORD *)v82 = v37;
  v81 = v36;
  v80 = v35;
  v38 = *(const void **)(v24 + 240);
  *(_QWORD *)(v24 + 240) = 0;
  cf = v38;
  v84 = *(_BYTE *)(v24 + 248);
  WebKit::NetworkLoadChecker::RedirectionTriplet::RedirectionTriplet((uint64_t)v85, (uint64_t)v44);
  v86 = 0;
  v39 = *v5;
  *v5 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v39 + 16))(v39, v85);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (v86 != -1)
    ((void (*)(char *, _BYTE *))off_1E34BDF88[v86])(&v87, v85);
  v86 = -1;
  v41 = cf;
  cf = 0;
  if (v41)
    CFRelease(v41);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v71, v40);
  v42 = v70;
  v70 = 0;
  if (v42)
    CFRelease(v42);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v56);
  v43 = v55;
  v55 = 0;
  if (v43)
    CFRelease(v43);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v44);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit18NetworkLoadChecker16checkRedirectionEON7WebCore15ResourceRequestESE_ONSC_16ResourceResponseEPNSC_27ContentSecurityPolicyClientEONS8_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSB_18RedirectionTripletENSC_13ResourceErrorEEEEEEEN3__0clINS_7variantIJSD_SN_SO_EEEEEDaOT_EUlRSO_E_JZZNSB_16checkRedirectionESE_SE_SG_SI_ST_ENSV_ISX_EESY_S10_EUlRSN_E_ZZNSB_16checkRedirectionESE_SE_SG_SI_ST_ENSV_ISX_EESY_S10_EUlRSD_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSD_SN_SO_EEEEEEDcSZ_DpT0_(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14[2];
  __int128 v15;
  __int128 v16;
  WTF::StringImpl *v17;
  int v18;
  __int16 v19;
  CFTypeRef cf;
  char v21;
  _OWORD v22[3];
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  char v27;
  int v28;
  char v29;

  v3 = **a1;
  v4 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v14[0] = v4;
  WTF::URL::URL((uint64_t)&v14[1], (uint64_t *)(a2 + 8));
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v18 = *(_DWORD *)(a2 + 56);
  v19 = *(_WORD *)(a2 + 60);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v21 = *(_BYTE *)(a2 + 72);
  v7 = *(_OWORD *)v14;
  v14[1] = 0;
  v22[0] = v7;
  v22[1] = v15;
  v22[2] = v16;
  LODWORD(v15) = v15 & 0xFFFFFFFE;
  v17 = 0;
  v23 = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 56);
  v25 = *(_WORD *)(a2 + 60);
  v24 = v5;
  cf = 0;
  v26 = v6;
  v27 = v21;
  v28 = 1;
  v8 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 16))(v8, v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v28 != -1)
    ((void (*)(char *, _OWORD *))off_1E34BDF88[v28])(&v29, v22);
  v28 = -1;
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v14[1];
  v14[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRequest(WebCore::ResourceRequest &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebKit::NetworkLoadChecker::RedirectionTriplet> &&>::~CallableWrapper(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = off_1E34BE100;
  v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRequest(WebCore::ResourceRequest &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebKit::NetworkLoadChecker::RedirectionTriplet> &&>::~CallableWrapper(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = off_1E34BE100;
  v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRequest(WebCore::ResourceRequest &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebKit::NetworkLoadChecker::RedirectionTriplet> &&>::call(uint64_t a1, WebCore::ResourceRequestBase *this)
{
  int v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 v15;
  uint64_t v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  const void **v19;
  WebCore::EmptyOriginAccessPatterns *v20;
  uint64_t v21;
  char canRequest;
  const WTF::URL *v23;
  char isSameOrigin;
  WTF::URL *v25;
  const void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::URL *v32;
  const void *v33;
  WTF::StringImpl *v34;
  NSObject *v35;
  _BOOL8 v36;
  uint64_t v37;
  const URL *v38;
  const URL *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF **v48;
  const WTF::StringImpl **v49;
  const WTF::StringImpl *v50;
  WebCore::ResourceResponseBase *v51;
  const WTF::URL *v52;
  const WTF::URL *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  CFTypeRef v75;
  const void *v76;
  WTF::StringImpl *v77;
  CFTypeRef v78;
  CFTypeRef v79;
  CFTypeRef v80;
  WTF::StringImpl *v81;
  CFTypeRef v82;
  uint64_t v83;
  WTF::StringImpl *v84[2];
  __int128 v85;
  __int128 v86;
  WTF::StringImpl *v87;
  int v88;
  __int16 v89;
  CFTypeRef cf;
  char v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  CFTypeRef v105;
  _BYTE v106[40];
  _QWORD v107[6];
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  char v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  CFTypeRef v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE v139[19];
  CFTypeRef v140;
  char v141;
  WTF::StringImpl *v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _BYTE v160[19];
  CFTypeRef v161;
  char v162;
  WTF::StringImpl *v163;
  char v164;
  uint8_t buf[16];
  _OWORD v166[2];
  uint64_t v167;
  int v168;
  __int16 v169;
  uint64_t v170;
  char v171;
  unsigned int v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 52);
  if (v4)
  {
    if (v4 != 1)
    {
      v83 = std::__throw_bad_variant_access[abi:sn180100]();
      WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void,WebCore::ContentExtensions::ContentExtensionsBackend &>::~CallableWrapper(v83);
      return;
    }
    v5 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    *(_QWORD *)buf = v5;
    v6 = WTF::URL::URL((uint64_t)&buf[8], (uint64_t *)this + 1);
    v7 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    v167 = v7;
    v169 = *((_WORD *)this + 30);
    v168 = *((_DWORD *)this + 14);
    v8 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    v170 = v8;
    v171 = *((_BYTE *)this + 72);
    v172 = 2;
    v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, uint8_t *, double))(*(_QWORD *)v9 + 16))(v9, buf, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    goto LABEL_4;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
  {
    v84[0] = 0;
    v84[1] = 0;
    WTF::URL::invalidate((WTF::URL *)&v84[1]);
    v88 = 0;
    v89 = 3;
    v91 = 1;
    v15 = *(_OWORD *)v84;
    v84[0] = 0;
    v84[1] = 0;
    *(_OWORD *)buf = v15;
    v166[0] = v85;
    v166[1] = v86;
    LODWORD(v85) = v85 & 0xFFFFFFFE;
    v87 = 0;
    v167 = 0;
    v168 = 0;
    v169 = 3;
    cf = 0;
    v170 = 0;
    v171 = 1;
    v172 = 2;
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v172 != -1)
      (*(&off_1E34BDF98 + v172))((int)&v142, (WebCore::ResourceRequestBase *)buf);
    v172 = -1;
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
    v18 = v87;
    v87 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v14);
      else
        *(_DWORD *)v18 -= 2;
    }
    v28 = v84[1];
    v84[1] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v14);
      else
        *(_DWORD *)v28 -= 2;
    }
    v27 = v84[0];
    v84[0] = 0;
    if (!v27)
      return;
LABEL_40:
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    goto LABEL_42;
  }
  if (!**((_BYTE **)this + 25))
  {
    v19 = (const void **)(a1 + 16);
    if (!*(_BYTE *)(v11 + 1136))
    {
      v48 = (WTF **)WebCore::ResourceRequestBase::url(this);
      v49 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 24));
      if ((WTF::equal(*v48, *v49, v50) & 1) == 0)
      {
        v51 = (WebCore::ResourceResponseBase *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 24));
        v52 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
        WebCore::ResourceResponseBase::syntheticRedirectResponse(v51, v52, v53);
        WTF::URL::URL((uint64_t)v84, (uint64_t *)(a1 + 24));
        WTF::URL::URL((uint64_t)&v86 + 8, (uint64_t *)(a1 + 64));
        v92 = *(_QWORD *)(a1 + 104);
        v54 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)(a1 + 112) = 0u;
        v93 = v54;
        *(_QWORD *)&v54 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 128) = 0;
        v94 = v54;
        v55 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 136) = 0;
        v95 = v55;
        *(_QWORD *)&v54 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = 0;
        v96 = v54;
        v56 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 152) = 0;
        v97 = v56;
        *(_QWORD *)&v54 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)(a1 + 160) = 0;
        v98 = v54;
        LODWORD(v56) = *(_DWORD *)(a1 + 168);
        v100 = *(_BYTE *)(a1 + 172);
        v99 = v56;
        v57 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)(a1 + 176) = 0u;
        v101 = v57;
        v104 = *(_BYTE *)(a1 + 208);
        v58 = *(_QWORD *)(a1 + 192);
        v59 = *(_QWORD *)(a1 + 200);
        *(_QWORD *)(a1 + 192) = 0;
        v102 = v58;
        v103 = v59;
        v60 = *(const void **)(a1 + 216);
        *(_QWORD *)(a1 + 216) = 0;
        v105 = v60;
        WTF::URL::URL((uint64_t)v106, (uint64_t *)this);
        WTF::URL::URL((uint64_t)v107, (uint64_t *)this + 5);
        v107[5] = *((_QWORD *)this + 10);
        v61 = *(_OWORD *)((char *)this + 88);
        *(_OWORD *)((char *)this + 88) = 0u;
        v108 = v61;
        *(_QWORD *)&v61 = *((_QWORD *)this + 13);
        *((_QWORD *)this + 13) = 0;
        v109 = v61;
        v62 = *((_QWORD *)this + 14);
        *((_QWORD *)this + 14) = 0;
        v110 = v62;
        *(_QWORD *)&v61 = *((_QWORD *)this + 15);
        *((_QWORD *)this + 15) = 0;
        v111 = v61;
        v63 = *((_QWORD *)this + 16);
        *((_QWORD *)this + 16) = 0;
        v112 = v63;
        *(_QWORD *)&v61 = *((_QWORD *)this + 17);
        *((_QWORD *)this + 17) = 0;
        v113 = v61;
        LODWORD(v63) = *((_DWORD *)this + 36);
        v115 = *((_BYTE *)this + 148);
        v114 = v63;
        v64 = *(_OWORD *)((char *)this + 152);
        *(_OWORD *)((char *)this + 152) = 0u;
        v116 = v64;
        v119 = *((_BYTE *)this + 184);
        v65 = *((_QWORD *)this + 21);
        v66 = *((_QWORD *)this + 22);
        *((_QWORD *)this + 21) = 0;
        v117 = v65;
        v118 = v66;
        v67 = (const void *)*((_QWORD *)this + 24);
        *((_QWORD *)this + 24) = 0;
        v68 = (uint64_t)v142;
        v69 = v145;
        v142 = 0;
        v120 = v67;
        v121 = v68;
        v122 = v143;
        v123 = v144;
        LODWORD(v143) = v143 & 0xFFFFFFFE;
        v145 = 0;
        v124 = v69;
        v125 = v146;
        v70 = v147;
        v147 = 0u;
        v71 = v148;
        v148 = 0u;
        v126 = v70;
        v127 = v71;
        *(_QWORD *)&v70 = v149;
        v149 = 0;
        v128 = v70;
        v72 = v150;
        v150 = 0;
        v129 = v72;
        *(_QWORD *)&v70 = v151;
        v151 = 0;
        v130 = v70;
        v73 = v152;
        v152 = 0;
        v131 = v73;
        LOBYTE(v132) = 0;
        v133 = 0;
        if (v154)
        {
          v74 = v153;
          v153 = 0;
          v132 = v74;
          v133 = 1;
        }
        v137 = v158;
        v138 = v159;
        *(_OWORD *)v139 = *(_OWORD *)v160;
        *(_DWORD *)&v139[15] = *(_DWORD *)&v160[15];
        v134 = v155;
        v135 = v156;
        v136 = v157;
        v75 = v161;
        v161 = 0;
        v140 = v75;
        v141 = v162;
        WebKit::NetworkLoadChecker::RedirectionTriplet::RedirectionTriplet((uint64_t)buf, (uint64_t)v84);
        v172 = 1;
        v76 = *v19;
        *v19 = 0;
        (*(void (**)(const void *, uint8_t *))(*(_QWORD *)v76 + 16))(v76, buf);
        (*(void (**)(const void *))(*(_QWORD *)v76 + 8))(v76);
        if (v172 != -1)
          (*(&off_1E34BDF98 + v172))((int)&v163, (WebCore::ResourceRequestBase *)buf);
        v172 = -1;
        v78 = v140;
        v140 = 0;
        if (v78)
          CFRelease(v78);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v121, v77);
        v79 = v120;
        v120 = 0;
        if (v79)
          CFRelease(v79);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v106);
        v80 = v105;
        v105 = 0;
        if (v80)
          CFRelease(v80);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v84);
        v82 = v161;
        v161 = 0;
        if (v82)
          CFRelease(v82);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v142, v81);
        return;
      }
    }
    if (*(_BYTE *)(v11 + 18) == 1)
    {
      if (*(_BYTE *)(v11 + 448))
      {
        v20 = (WebCore::EmptyOriginAccessPatterns *)WebCore::ResourceRequestBase::url(this);
        v21 = *(_QWORD *)(v11 + 1152);
        if (!v21 || !*(_QWORD *)(v21 + 8))
          WebCore::EmptyOriginAccessPatterns::singleton(v20);
        canRequest = WebCore::SecurityOrigin::canRequest();
      }
      else
      {
        canRequest = 0;
      }
      *(_BYTE *)(v11 + 64) = canRequest;
    }
    if (*(_BYTE *)(v11 + 448))
    {
      v23 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
      isSameOrigin = WebKit::NetworkLoadChecker::isSameOrigin((WebKit::NetworkLoadChecker *)v11, v23, *(const WebCore::SecurityOrigin **)(v11 + 240));
    }
    else
    {
      isSameOrigin = 0;
    }
    *(_BYTE *)(v11 + 448) = isSameOrigin;
    v25 = (WTF::URL *)WebCore::ResourceRequestBase::url(this);
    if ((*(unsigned __int8 *)(v11 + 17) | 2) == 2
      || (v29 = *(_QWORD *)(v11 + 1144)) != 0
      && (v30 = WTF::URL::protocol(v25),
          !WebKit::NetworkSchemeRegistry::shouldTreatURLSchemeAsCORSEnabled(v29, v30, v31))
      || *(_BYTE *)(v11 + 448))
    {
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)buf, (uint64_t)this);
      v172 = 0;
      v26 = *v19;
      *v19 = 0;
      (*(void (**)(const void *, uint8_t *))(*(_QWORD *)v26 + 16))(v26, buf);
      (*(void (**)(const void *))(*(_QWORD *)v26 + 8))(v26);
LABEL_4:
      if (v172 != -1)
        (*(&off_1E34BDF98 + v172))((int)v84, (WebCore::ResourceRequestBase *)buf);
      return;
    }
    if (*(_BYTE *)(v11 + 17) != 1)
    {
      if (*(_QWORD *)(v11 + 464))
      {
        v35 = off_1ECE713E8;
        v36 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
        if (v36)
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v11;
          _os_log_impl(&dword_196BCC000, v35, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadChecker::checkRequest - Redirect requires CORS checks", buf, 0xCu);
        }
        *(_BYTE *)(v11 + 448) = 0;
        v37 = *(_QWORD *)(v11 + 1152);
        if (!v37 || !*(_QWORD *)(v37 + 8))
          WebCore::EmptyOriginAccessPatterns::singleton((WebCore::EmptyOriginAccessPatterns *)v36);
        if ((WebCore::SecurityOrigin::canRequest() & 1) == 0)
        {
          v38 = (const URL *)WebCore::ResourceRequestBase::url(this);
          v40 = WTF::protocolHostAndPortAreEqual((WTF *)(v11 + 472), v38, v39);
          if ((v40 & 1) == 0)
          {
            v41 = *(_QWORD *)(v11 + 240);
            if (!v41 || *(_DWORD *)(v41 + 32) != 1)
            {
              WebCore::SecurityOrigin::createOpaque((WebCore::SecurityOrigin *)v40);
              v43 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              v44 = *(_QWORD *)(v11 + 240);
              *(_QWORD *)(v11 + 240) = v43;
              if (v44)
              {
                WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v44, v42);
                v46 = *(_QWORD *)buf;
                *(_QWORD *)buf = 0;
                if (v46)
                  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v46, v45);
              }
            }
          }
        }
        WebCore::ResourceRequestBase::httpHeaderFields(this);
        if ((WebCore::HTTPHeaderMap::contains() & 1) == 0)
          WebCore::HTTPHeaderMap::remove();
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)buf, (WTF::ASCIILiteral *)(v11 + 128));
        WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v166, (WTF::ASCIILiteral *)(v11 + 144));
        WebCore::ResourceRequestBase::setHTTPHeaderFields();
        WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v166);
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)buf);
      }
      WebKit::NetworkLoadChecker::checkCORSRequest(v11, this, v19);
      return;
    }
    v32 = (WTF::URL *)WebCore::ResourceRequestBase::url(this);
    WTF::URL::stringCenterEllipsizedToLength(v32);
    WebCore::SecurityOrigin::toString(*(WebCore::SecurityOrigin **)(v11 + 240));
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Unsafe attempt to load URL ", 28, (uint64_t *)&v142, (uint64_t)" from origin ", 14, (uint64_t *)&v163, (uint64_t)". Domains, protocols and ports must match.\n", 44, v84);
    WebKit::NetworkLoadChecker::accessControlErrorForValidationHandler((uint64_t)buf, v11, (_DWORD *)v84[0]);
    v33 = *v19;
    *v19 = 0;
    (*(void (**)(const void *, uint8_t *))(*(_QWORD *)v33 + 16))(v33, buf);
    (*(void (**)(const void *))(*(_QWORD *)v33 + 8))(v33);
    if (v172 != -1)
      (*(&off_1E34BDF98 + v172))((int)&v164, (WebCore::ResourceRequestBase *)buf);
    v172 = -1;
    v34 = v84[0];
    v84[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v14);
      else
        *(_DWORD *)v34 -= 2;
    }
    v47 = v163;
    v163 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v14);
      else
        *(_DWORD *)v47 -= 2;
    }
    v27 = v142;
    v142 = 0;
    if (!v27)
      return;
    goto LABEL_40;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = *(WTF::StringImpl **)buf;
  WebKit::NetworkLoadChecker::accessControlErrorForValidationHandler((uint64_t)buf, v11, *(_DWORD **)buf);
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v172 != -1)
    (*(&off_1E34BDF98 + v172))((int)v84, (WebCore::ResourceRequestBase *)buf);
  v172 = -1;
  if (v12)
  {
    if (*(_DWORD *)v12 != 2)
    {
      *(_DWORD *)v12 -= 2;
      return;
    }
    v27 = v12;
LABEL_42:
    WTF::StringImpl::destroy(v27, v14);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void,WebCore::ContentExtensions::ContentExtensionsBackend &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34BE128;
  v2 = a1[28];
  a1[28] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 3));
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void,WebCore::ContentExtensions::ContentExtensionsBackend &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34BE128;
  v2 = a1[28];
  a1[28] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 3));
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void,WebCore::ContentExtensions::ContentExtensionsBackend &>::call(uint64_t a1, WebCore::ContentExtensions::ContentExtensionsBackend *a2)
{
  uint64_t v3;
  uint64_t v5;
  const WTF::URL *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  CFTypeRef v38;
  void *v39;
  void *v40;
  void *v41;
  WTF::StringImpl *result;
  __int128 v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  CFTypeRef v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49[2];
  __int128 v50;
  __int128 v51;
  WTF::StringImpl *v52;
  int v53;
  __int16 v54;
  CFTypeRef v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  CFTypeRef cf;
  int *v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  char v88;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 24));
    WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(a2, v6, (const WTF::URL *)(v5 + 344), (const WTF::URL *)(v5 + 384));
    LODWORD(v79) = v72;
    *((_QWORD *)&v79 + 1) = 0;
    LODWORD(v80) = 0;
    DWORD1(v80) = v74;
    if (v74)
    {
      if (v74 >= 0x5555556)
      {
        __break(0xC471u);
        goto LABEL_47;
      }
      LODWORD(v80) = 48 * v74 / 0x30;
      *((_QWORD *)&v79 + 1) = WTF::fastMalloc((WTF *)(48 * v74));
      v7 = v73 + 48 * v74;
      v8 = *((_QWORD *)&v79 + 1) + 24;
      v9 = v73 + 24;
      do
      {
        *(_BYTE *)(v8 - 24) = *(_BYTE *)(v9 - 24);
        WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8 - 16, (uint64_t *)(v9 - 16));
        WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, (uint64_t *)v9);
        *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
        v8 += 48;
        v10 = v9 + 24;
        v9 += 48;
      }
      while (v10 != v7);
    }
    *((_QWORD *)&v80 + 1) = 0;
    LODWORD(v81) = 0;
    DWORD1(v81) = v76;
    if (v76)
    {
      if (v76 >= 0x1AF286C)
      {
        __break(0xC471u);
        JUMPOUT(0x1970DDD6CLL);
      }
      LODWORD(v81) = 152 * v76 / 0x98;
      *((_QWORD *)&v80 + 1) = WTF::fastMalloc((WTF *)(152 * v76));
      v11 = v75 + 152 * v76;
      v12 = *((_QWORD *)&v80 + 1) + 104;
      v13 = v75 + 8;
      do
      {
        v14 = v13 - 8;
        *(_BYTE *)(v12 - 104) = *(_BYTE *)(v13 - 8);
        *(_BYTE *)(v12 - 96) = 0;
        *(_DWORD *)v12 = -1;
        v15 = *(unsigned int *)(v13 + 96);
        if ((_DWORD)v15 != -1)
        {
          ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1E34BE158[v15])(v49, v12 - 96, v13);
          *(_DWORD *)v12 = v15;
        }
        v16 = *(_DWORD **)(v13 + 104);
        if (v16)
          *v16 += 2;
        *(_QWORD *)(v12 + 8) = v16;
        v17 = *(_OWORD *)(v13 + 128);
        *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 112);
        *(_OWORD *)(v12 + 32) = v17;
        v12 += 152;
        v13 += 152;
      }
      while (v14 + 152 != v11);
    }
    v18 = v78;
    *((_QWORD *)&v81 + 1) = 0;
    LODWORD(v82) = 0;
    HIDWORD(v82) = v78;
    if (!v78)
      goto LABEL_22;
    if (!(v78 >> 27))
    {
      v19 = WTF::fastMalloc((WTF *)(32 * v78));
      LODWORD(v82) = v18;
      *((_QWORD *)&v81 + 1) = v19;
      if (v78)
      {
        v20 = v77 + 32 * v78;
        v21 = v19 + 16;
        v22 = v77 + 16;
        do
        {
          v24 = v22 - 16;
          v23 = *(_DWORD **)(v22 - 16);
          if (v23)
            *v23 += 2;
          v25 = v21 - 16;
          *(_QWORD *)(v21 - 16) = v23;
          v26 = *(_DWORD *)(v22 - 8);
          *(_BYTE *)(v25 + 12) = *(_BYTE *)(v22 - 4);
          *(_DWORD *)(v25 + 8) = v26;
          v21 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v21, v22) + 32;
          v22 += 32;
        }
        while (v24 + 32 != v20);
      }
LABEL_22:
      WebCore::ContentExtensions::applyResultsToRequest();
      WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81 + 8, v27);
      WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80 + 8, v28);
      WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79 + 8, v29);
      WTF::URL::URL((uint64_t)v49, (uint64_t *)(a1 + 24));
      WTF::URL::URL((uint64_t)&v51 + 8, (uint64_t *)(a1 + 64));
      v57 = *(_QWORD *)(a1 + 104);
      v30 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 112) = 0u;
      v58 = v30;
      *(_QWORD *)&v30 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 128) = 0;
      v59 = v30;
      v31 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = 0;
      v60 = v31;
      *(_QWORD *)&v30 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 144) = 0;
      v61 = v30;
      v32 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = 0;
      v62 = v32;
      *(_QWORD *)&v30 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = 0;
      v63 = v30;
      LODWORD(v32) = *(_DWORD *)(a1 + 168);
      v65 = *(_BYTE *)(a1 + 172);
      v64 = v32;
      v33 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 176) = 0u;
      v66 = v33;
      v69 = *(_BYTE *)(a1 + 208);
      v34 = *(_QWORD *)(a1 + 192);
      v35 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 192) = 0;
      v67 = v34;
      v68 = v35;
      v36 = *(const void **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = 0;
      cf = v36;
      v71 = &v72;
      std::__variant_detail::__alt<0ul,WebKit::NetworkLoadChecker::ContentExtensionResult>::__alt[abi:sn180100]<WebKit::NetworkLoadChecker::ContentExtensionResult>((uint64_t)&v79, (uint64_t)v49);
      v87 = 0;
      v37 = *(_QWORD *)(a1 + 224);
      *(_QWORD *)(a1 + 224) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v37 + 16))(v37, &v79);
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      if (v87 != -1)
        (*(&off_1E34BDFD8 + v87))((int)&v88, (WebCore::ResourceRequestBase *)&v79);
      v87 = -1;
      v38 = cf;
      cf = 0;
      if (v38)
        CFRelease(v38);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v49);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v77, v39);
      WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v40);
      return (WTF::StringImpl *)WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73, v41);
    }
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x1970DDD64);
  }
  v49[0] = 0;
  v49[1] = 0;
  WTF::URL::invalidate((WTF::URL *)&v49[1]);
  v53 = 0;
  v54 = 3;
  v56 = 1;
  v52 = 0;
  v84 = 3;
  v83 = 0;
  v55 = 0;
  v43 = *(_OWORD *)v49;
  v49[0] = 0;
  v49[1] = 0;
  v79 = v43;
  v80 = v50;
  LODWORD(v50) = v50 & 0xFFFFFFFE;
  v81 = v51;
  v82 = 0;
  v85 = 0;
  v86 = 1;
  v87 = 1;
  v44 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v44 + 16))(v44, &v79);
  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (v87 != -1)
    (*(&off_1E34BDFD8 + v87))((int)&v72, (WebCore::ResourceRequestBase *)&v79);
  v87 = -1;
  v46 = v55;
  v55 = 0;
  if (v46)
    CFRelease(v46);
  v47 = v52;
  v52 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v45);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = v49[1];
  v49[1] = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v45);
    else
      *(_DWORD *)v48 -= 2;
  }
  result = v49[0];
  v49[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0xAAAAAAB)
  {
    v5 = 24 * v3;
    v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = v6;
      v9 = *a2;
      v10 = 24 * v7;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 16) = -1;
        v11 = *(unsigned int *)(v9 + 16);
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1E34BE140[v11])(&v12, v8, v9);
          *(_DWORD *)(v8 + 16) = v11;
        }
        v8 += 24;
        v9 += 24;
        v10 -= 24;
      }
      while (v10);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  a2[1] = v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t result;
  _DWORD *v13;
  _DWORD *v14;
  char v15;

  v5 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v5 += 2;
  *(_QWORD *)a2 = v5;
  v6 = *(_DWORD **)(a3 + 8);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a2 + 8) = v6;
  v7 = *(_DWORD **)(a3 + 16);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a2 + 16) = v7;
  v8 = *(_DWORD **)(a3 + 24);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 24) = v8;
  v9 = *(_DWORD *)(a3 + 32);
  v10 = *(_WORD *)(a3 + 36);
  *(_BYTE *)(a2 + 40) = 0;
  *(_WORD *)(a2 + 36) = v10;
  *(_DWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 72) = -1;
  v11 = *(unsigned int *)(a3 + 72);
  if ((_DWORD)v11 != -1)
  {
    result = ((uint64_t (*)(char *))*(&off_1E34BE178 + v11))(&v15);
    *(_DWORD *)(a2 + 72) = v11;
  }
  v13 = *(_DWORD **)(a3 + 80);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(a2 + 80) = v13;
  v14 = *(_DWORD **)(a3 + 88);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(a2 + 88) = v14;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;

  v5 = *((unsigned int *)a3 + 3);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if (!(_DWORD)v5)
  {
LABEL_10:
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2 + 16, (uint64_t)(a3 + 2));
    return;
  }
  if (v5 < 0xAAAAAAB)
  {
    v6 = 24 * v5;
    v7 = WTF::fastMalloc((WTF *)(24 * v5));
    *(_DWORD *)(a2 + 8) = (v6 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a2 = v7;
    v8 = *((_DWORD *)a3 + 3);
    if (v8)
    {
      v9 = *a3;
      v10 = *a3 + 24 * v8;
      do
      {
        v11 = *(_DWORD **)v9;
        if (*(_QWORD *)v9)
          *v11 += 2;
        *(_QWORD *)v7 = v11;
        *(_BYTE *)(v7 + 8) = *(_BYTE *)(v9 + 8);
        v12 = *(_DWORD **)(v9 + 16);
        if (v12)
          *v12 += 2;
        *(_QWORD *)(v7 + 16) = v12;
        v9 += 24;
        v7 += 24;
      }
      while (v9 != v10);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
}

uint64_t WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::NetworkTransactionInformation::NetworkTransactionInformation(*(_QWORD *)a1 + 592 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 592 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6EB3E5)
    {
      __break(0xC471u);
      JUMPOUT(0x1970DE308);
    }
    v3 = *(WTF **)a1;
    v4 = (_QWORD *)(*(_QWORD *)a1 + 592 * *(unsigned int *)(a1 + 12));
    v5 = 592 * a2;
    v6 = WTF::fastMalloc((WTF *)(592 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x250;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::NetworkTransactionInformation>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::NetworkTransactionInformation>::move(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  WTF::StringImpl *v6;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v7;
  WTF::StringImpl *v8;
  const void *v9;
  const void *v10;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WebCore::NetworkTransactionInformation::NetworkTransactionInformation(a3, (uint64_t)v5);
      v7 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)v5[73];
      v5[73] = 0;
      if (v7)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v7);
      v8 = (WTF::StringImpl *)v5[69];
      v5[69] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v6);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = (const void *)v5[56];
      v5[56] = 0;
      if (v9)
        CFRelease(v9);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(v5 + 26), v6);
      v10 = (const void *)v5[25];
      v5[25] = 0;
      if (v10)
        CFRelease(v10);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v5 + 1));
      a3 += 592;
      v5 += 74;
    }
    while (v5 != a2);
  }
}

uint64_t WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t *v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(a2);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = result & v7;
    v12 = (uint64_t *)(v6 + 8 * (result & v7));
    v13 = (_QWORD *)*v12;
    if (*v12 == -1)
    {
      v9 = (uint64_t *)(v6 + 8 * v11);
      goto LABEL_10;
    }
    if (!v13)
      break;
    if (*v13 == *a2)
    {
      v23 = 0;
      goto LABEL_24;
    }
LABEL_10:
    result = i + v11;
  }
  if (v9)
  {
    *v9 = 0;
    --*(_DWORD *)(*a1 - 16);
    v12 = v9;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v14;
  *v12 = result;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 <= 2 * v19)
    {
LABEL_19:
      v12 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::expand(a1, (_QWORD **)v12);
      result = *v12;
    }
  }
  else if (3 * v20 <= 4 * v19)
  {
    goto LABEL_19;
  }
  v21 = a1[2];
  *(_QWORD *)(result + 8) = v21;
  *(_QWORD *)(result + 16) = 0;
  if (v21)
    v22 = (uint64_t *)(v21 + 16);
  else
    v22 = a1 + 1;
  *v22 = result;
  a1[2] = result;
  v13 = (_QWORD *)*v12;
  v23 = 1;
LABEL_24:
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

BOOL WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6;

  if (a3)
  {
    v6 = a3;
    WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(a1, &v6);
    WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete((uint64_t)a1, (WTF *)a3);
  }
  return a3 != 0;
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(uint64_t *a1, uint64_t **a2)
{
  uint64_t *result;
  uint64_t v4;

  result = (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>(a1, a2);
  v4 = *a1;
  if (*a1)
    v4 += 8 * *(unsigned int *)(v4 - 4);
  if ((uint64_t *)v4 != result)
    return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(a1, result);
  return result;
}

uint64_t WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(uint64_t a1, WTF *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v7;
  unsigned int v8;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (v2)
  {
    *(_QWORD *)(v2 + 16) = v3;
    v3 = *((_QWORD *)this + 2);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v3;
  }
  if (v3)
    v4 = (_QWORD *)(v3 + 8);
  else
    v4 = (_QWORD *)(a1 + 16);
  *v4 = v2;
  v5 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (!v5)
    return WTF::fastFree(this, this);
  do
  {
    v7 = __ldaxr(v5);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v5));
  if (v8)
    return WTF::fastFree(this, this);
  atomic_store(1u, v5);
  WTF::fastFree((WTF *)v5, this);
  return WTF::fastFree(this, this);
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD *v13;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_QWORD **)v6;
    do
    {
      if ((unint64_t)*v12 + 1 >= 2)
      {
        v13 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookupForReinsert(a1, v12);
        *v13 = *v12;
        if (v12 == a3)
          v11 = v13;
      }
      ++v12;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookupForReinsert(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(**a2 << 32) + **a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  _QWORD *v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = **a2;
  v5 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v3 & ((v7 >> 31) ^ v7);
  for (i = 1; ; ++i)
  {
    v10 = v8;
    v11 = *(_QWORD **)(v2 + 8 * v8);
    if (v11 != (_QWORD *)-1)
    {
      if (!v11)
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      if (*v11 == v4)
        break;
    }
    v8 = (v10 + i) & v3;
  }
  return v2 + 8 * v10;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::expand(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookup<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, a2);
  v4 = *a1;
  if (!result)
  {
    if (v4)
      return v4 + 8 * *(unsigned int *)(v4 - 4);
    else
      return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookup<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  _QWORD *v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD **)(v2 + 8 * v7);
    if (v10 != (_QWORD *)-1)
    {
      if (!v10)
        return 0;
      if (*v10 == *a2)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  return v2 + 8 * v9;
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (a3)
  {
    v3 = result;
    result = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)result, a2, a3);
    v4 = *(_DWORD *)(v3 + 28);
    v5 = *(_DWORD *)(v3 + 24) + 1;
    *(_DWORD *)(v3 + 24) = v5;
    if (v5 > v4)
      return WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(v3);
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  void *v6;
  const WTF::StringImpl *v7;
  int v8;
  unsigned int v9;
  WTF **v10;
  int v11;
  _QWORD *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PairHash<WTF::String,WTF::String>::hash((WTF::StringImpl **)a2);
  v8 = 0;
  do
  {
    v9 = v5 & v4;
    v10 = (WTF **)(a1 + 56 * (v5 & v4));
    v11 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v10, (uint64_t)v6, v7);
    v5 = ++v8 + v9;
  }
  while (!v11);
  v12 = (_QWORD *)(a1 + 56 * v9 + 24);
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)v12, v6);
  if (*v12)
    WTF::fastFree((WTF *)(*v12 - 16), v13);
  v14 = v10[1];
  v10[1] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *v10;
  *v10 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *v10 = v16;
  v17 = *(WTF **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10[1] = v17;
  v18 = a1 + 56 * v9;
  *(_DWORD *)(v18 + 16) = *(_DWORD *)(a2 + 16);
  *v12 = 0;
  v19 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *v12 = v19;
  v20 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(v18 + 32) = v20;
  v21 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v18 + 40) = v21;
  *(_QWORD *)(v18 + 48) = *(_QWORD *)(a2 + 48);
  return v18;
}

__int128 *WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::operator=(__int128 *a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v3 = a2[2];
  v4 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = *a1;
  *a1 = v4;
  v8 = v5;
  v6 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v3;
  v9 = v6;
  WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakListHashSet(&v8, a2);
  return a1;
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  result = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(a1, a2);
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    result = WTF::fastFree((WTF *)(v5 - 16), v4);
    LODWORD(v5) = 0;
    v6 = *(_QWORD *)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    if (v6)
    {
      LODWORD(v5) = *(_DWORD *)(v6 - 12);
      if (v5 > 0x7FFFFFFE)
        LODWORD(v5) = 0x7FFFFFFF;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  *(_DWORD *)(a1 + 28) = 2 * v5;
  return result;
}

_QWORD *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::random(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;

  v1 = (_QWORD *)*a1;
  if (!*a1)
    return 0;
  if (!*((_DWORD *)v1 - 3))
    return &v1[*((unsigned int *)v1 - 1)];
  do
  {
    while (1)
    {
      v3 = v1;
      v4 = WTF::weakRandomNumber<unsigned int>();
      v1 = (_QWORD *)*a1;
      if (*a1)
        break;
      if ((unint64_t)(*v3 + 1) >= 2)
        return v3;
    }
    v5 = *(_DWORD *)(v1 - 1) & v4;
  }
  while ((unint64_t)(v3[v5] + 1) < 2);
  v3 += v5;
  return v3;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = v6;
    do
    {
      if (*(_QWORD *)v14 != -1)
      {
        if (*(_QWORD *)v14)
        {
          v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, (uint64_t *)v14);
          std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)(v14 + 8), 0);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)(v14 + 8), 0);
        }
      }
      v14 += 16;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(a1 + 16 * v7));
  v8 = a1 + 16 * v7;
  std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)(v8 + 8), 0);
  *(_QWORD *)v8 = *a2;
  v9 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v8 + 8) = v9;
  return v8;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if (v2 == a2)
    return 0;
LABEL_3:
  if (v2 != a2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return 1;
}

uint64_t **WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (uint64_t **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2);
  v4 = *a1;
  if (!result)
  {
    if (v4)
      return v4 + 16 * *(unsigned int *)(v4 - 4);
    else
      return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2;
    v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*a2) & v3;
    v6 = *(_QWORD *)(v2 + 16 * v5);
    if (v6 == v4)
      return v2 + 16 * v5;
    v8 = 1;
    while (v6)
    {
      v5 = ((_DWORD)v5 + v8) & v3;
      v6 = *(_QWORD *)(v2 + 16 * v5);
      ++v8;
      if (v6 == v4)
        return v2 + 16 * v5;
    }
  }
  return 0;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v4 = *a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(v4);
  v8 = 0;
  do
  {
    v9 = v7 & v5;
    v7 = ++v8 + v9;
  }
  while (*(_QWORD *)(a1 + 16 * v9));
  v10 = (WTF::StringImpl **)(a1 + 16 * v9);
  std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100](v10 + 1, 0);
  v12 = *v10;
  *v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *a2;
  *a2 = 0;
  *v10 = v13;
  v14 = a2[1];
  a2[1] = 0;
  v10[1] = v14;
  return v10;
}

uint64_t WebCore::UserContentURLPattern::UserContentURLPattern(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)result = v2;
  v3 = *(_DWORD **)(a2 + 8);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(result + 8) = v3;
  v4 = *(_DWORD **)(a2 + 16);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(result + 16) = v4;
  *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
  return result;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::UserContentURLPattern const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = WebCore::UserContentURLPattern::UserContentURLPattern(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1970DF314);
    }
    v4 = *(WTF::StringImpl **)a1;
    v5 = (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::UserContentURLPattern>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::UserContentURLPattern>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  for (; result != a2; a3 += 32)
  {
    v5 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)a3 = v5;
    v6 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    *(_QWORD *)(a3 + 8) = v6;
    v7 = *((_QWORD *)result + 2);
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)(a3 + 16) = v7;
    *(_WORD *)(a3 + 24) = *((_WORD *)result + 12);
    WebCore::UserContentURLPattern::~UserContentURLPattern(result, a2);
    result = (WTF::StringImpl *)(v8 + 32);
  }
  return result;
}

void WebCore::UserContentURLPattern::~UserContentURLPattern(WebCore::UserContentURLPattern *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WebCore::UserContentURLPattern::matches<WTF::URL>(WebCore::UserContentURLPattern *a1, const WTF::URL *a2)
{
  if (!*((_BYTE *)a1 + 24)
    && WebCore::UserContentURLPattern::matchesScheme(a1, a2)
    && WebCore::UserContentURLPattern::matchesHost(a1, a2))
  {
    return WebCore::UserContentURLPattern::matchesPath(a1, a2);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::UserContentURLPattern::matchesHost(WebCore::UserContentURLPattern *this, const WTF::URL *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _QWORD v8[2];
  WTF::StringImpl *v9;

  v8[0] = WTF::URL::host(a2);
  v8[1] = v3;
  WTF::StringView::toStringWithoutCopying((uint64_t)v8, &v9);
  v5 = WebCore::UserContentURLPattern::matchesHost(this, (const WTF::String *)&v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

uint64_t WebCore::UserContentURLPattern::matchesPath(WebCore::UserContentURLPattern *this, const WTF::URL *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _QWORD v8[2];
  WTF::StringImpl *v9;

  v8[0] = WTF::URL::path(a2);
  v8[1] = v3;
  WTF::StringView::toStringWithoutCopying((uint64_t)v8, &v9);
  v5 = WebCore::UserContentURLPattern::matchesPath(this, (const WTF::String *)&v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

uint64_t WTF::StringView::toStringWithoutCopying@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(this + 12))
  {
    if (*(_DWORD *)(this + 8))
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_4;
    }
LABEL_8:
    v3 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(this + 8))
    goto LABEL_8;
  this = WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_4:
  v3 = v4;
LABEL_5:
  *a2 = v3;
  return this;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_0,void,BOOL>::call(unsigned __int8 *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  pid_t v4;
  uint64_t v5;
  WebKit::ProcessAssertion *v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v2 = *((_QWORD *)result + 1);
  v3 = *(_QWORD *)(v2 + 312);
  if ((a2 & 1) != 0)
  {
    if (!v3 || *(_BYTE *)(v3 + 48))
    {
      v4 = getpid();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5 = WTF::fastMalloc((WTF *)0xB0);
      v6 = (WebKit::ProcessAssertion *)WebKit::ProcessAssertion::ProcessAssertion(v5, v4, (_DWORD **)&v9, 5, MEMORY[0x1E0CBF738]);
      WebKit::ProcessAssertion::acquireSync(v6);
      v8 = *(_QWORD *)(v2 + 312);
      *(_QWORD *)(v2 + 312) = v5;
      if (v8)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v8 + 8), v7);
      result = (unsigned __int8 *)v9;
      v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 312) = 0;
    if (v3)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::AuthenticationManager>>(uint64_t a1, uint64_t *a2, WTF::ASCIILiteralHash *this, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIILiteralHash::hash(this, (const WTF::ASCIILiteral *)a2) & v9;
  v11 = (_QWORD *)(v8 + 24 * v10);
  result = *v11;
  if (*v11)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (result == -1)
      {
        v22 = v11;
      }
      else if (*(_QWORD *)this)
      {
        v26 = v22;
        result = strcmp((const char *)result, *(const char **)this);
        v22 = v26;
        if (!(_DWORD)result)
        {
LABEL_24:
          v24 = *a2;
          if (*a2)
            v25 = *(_DWORD *)(v24 - 4);
          else
            v25 = 0;
          v21 = 0;
          v20 = v24 + 24 * v25;
          goto LABEL_14;
        }
      }
      else if (!result)
      {
        goto LABEL_24;
      }
      v10 = (v10 + v23) & v9;
      v11 = (_QWORD *)(v8 + 24 * v10);
      result = *v11;
      ++v23;
    }
    while (*v11);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = v22;
    }
  }
  *(_OWORD *)v11 = *(_OWORD *)this;
  v13 = *a4;
  *a4 = 0;
  result = v11[2];
  v11[2] = v13;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v14 = *a2;
  if (*a2)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18)
      goto LABEL_13;
LABEL_32:
    result = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, (WTF::ASCIILiteralHash *)v11);
    v11 = (_QWORD *)result;
    v16 = *a2;
    if (*a2)
      LODWORD(v19) = *(_DWORD *)(v16 - 4);
    else
      LODWORD(v19) = 0;
    goto LABEL_13;
  }
  if (3 * v19 <= 4 * v18)
    goto LABEL_32;
LABEL_13:
  v20 = v16 + 24 * v19;
  v21 = 1;
LABEL_14:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1, WTF::ASCIILiteralHash *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIILiteralHash *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  WTF::ASCIILiteralHash *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::ASCIILiteralHash *)v6;
    do
    {
      if (*(_QWORD *)v14 != -1)
      {
        if (*(_QWORD *)v14)
        {
          v16 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::reinsert(*a1, v14);
          v17 = *((_QWORD *)v14 + 2);
          *((_QWORD *)v14 + 2) = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = *((_QWORD *)v14 + 2);
          *((_QWORD *)v14 + 2) = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      v14 = (WTF::ASCIILiteralHash *)((char *)v14 + 24);
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::reinsert(uint64_t a1, WTF::ASCIILiteralHash *this)
{
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::ASCIILiteralHash::hash(this, this);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v8 = (_QWORD *)(a1 + 24 * (v5 & v4));
    v5 = ++v6 + (v5 & v4);
  }
  while (*v8);
  v9 = a1 + 24 * v7;
  v12 = *(_QWORD *)(v9 + 16);
  v11 = (_QWORD *)(v9 + 16);
  v10 = v12;
  *v11 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_OWORD *)v8 = *(_OWORD *)this;
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  *v11 = v13;
  return v8;
}

uint64_t WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebCookieManager>>(uint64_t a1, uint64_t *a2, WTF::ASCIILiteralHash *this, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIILiteralHash::hash(this, (const WTF::ASCIILiteral *)a2) & v9;
  v11 = (_QWORD *)(v8 + 24 * v10);
  result = *v11;
  if (*v11)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (result == -1)
      {
        v22 = v11;
      }
      else if (*(_QWORD *)this)
      {
        v26 = v22;
        result = strcmp((const char *)result, *(const char **)this);
        v22 = v26;
        if (!(_DWORD)result)
        {
LABEL_25:
          v24 = *a2;
          if (*a2)
            v25 = *(_DWORD *)(v24 - 4);
          else
            v25 = 0;
          v21 = 0;
          v20 = v24 + 24 * v25;
          goto LABEL_13;
        }
      }
      else if (!result)
      {
        goto LABEL_25;
      }
      v10 = (v10 + v23) & v9;
      v11 = (_QWORD *)(v8 + 24 * v10);
      result = *v11;
      ++v23;
    }
    while (*v11);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = v22;
    }
  }
  *(_OWORD *)v11 = *(_OWORD *)this;
  v13 = *a4;
  *a4 = 0;
  result = v11[2];
  v11[2] = v13;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v14 = *a2;
  if (*a2)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18)
      goto LABEL_12;
LABEL_33:
    result = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, (WTF::ASCIILiteralHash *)v11);
    v11 = (_QWORD *)result;
    v16 = *a2;
    if (*a2)
      LODWORD(v19) = *(_DWORD *)(v16 - 4);
    else
      LODWORD(v19) = 0;
    goto LABEL_12;
  }
  if (3 * v19 <= 4 * v18)
    goto LABEL_33;
LABEL_12:
  v20 = v16 + 24 * v19;
  v21 = 1;
LABEL_13:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

uint64_t WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::LaunchServicesDatabaseObserver>>(uint64_t a1, uint64_t *a2, WTF::ASCIILiteralHash *this, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  const char *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIILiteralHash::hash(this, (const WTF::ASCIILiteral *)a2) & v9;
  v11 = (_QWORD *)(v8 + 24 * v10);
  result = *v11;
  if (*v11)
  {
    v28 = a1;
    v23 = 0;
    v24 = *(const char **)this;
    v25 = 1;
    do
    {
      if (result == -1)
      {
        v23 = v11;
      }
      else if (v24)
      {
        result = strcmp((const char *)result, v24);
        if (!(_DWORD)result)
        {
LABEL_30:
          v26 = *a2;
          if (*a2)
            v27 = *(_DWORD *)(v26 - 4);
          else
            v27 = 0;
          a1 = v28;
          v22 = 0;
          v21 = v26 + 24 * v27;
          goto LABEL_16;
        }
      }
      else if (!result)
      {
        goto LABEL_30;
      }
      v10 = (v10 + v25) & v9;
      v11 = (_QWORD *)(v8 + 24 * v10);
      result = *v11;
      ++v25;
    }
    while (*v11);
    a1 = v28;
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = v23;
    }
  }
  *(_OWORD *)v11 = *(_OWORD *)this;
  v13 = *a4;
  *a4 = 0;
  if (v13)
    v14 = v13 + 24;
  else
    v14 = 0;
  result = v11[2];
  v11[2] = v14;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_15;
LABEL_36:
    result = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a2, (WTF::ASCIILiteralHash *)v11);
    v11 = (_QWORD *)result;
    v17 = *a2;
    if (*a2)
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    else
      LODWORD(v20) = 0;
    goto LABEL_15;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_36;
LABEL_15:
  v21 = v17 + 24 * v20;
  v22 = 1;
LABEL_16:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34BE1C0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BE1C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_1,void,BOOL>::call(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v3 + 128));
      v5 = (_QWORD *)result;
      v7 = v6;
      v8 = *(_QWORD *)(v3 + 128);
      v9 = v8 ? v8 + 16 * *(unsigned int *)(v8 - 4) : 0;
      if (v9 != result)
      {
        do
        {
          v10 = *(_QWORD *)(v5[1] + 64);
          v11 = a2;
          result = IPC::Connection::send<Messages::NetworkProcessConnection::SetOnLineState>(v10, &v11, 0, 0, 0);
          while (1)
          {
            v5 += 2;
            if (v5 == v7)
              break;
            if ((unint64_t)(*v5 + 1) > 1)
              goto LABEL_12;
          }
          v5 = v7;
LABEL_12:
          ;
        }
        while (v5 != (_QWORD *)v9);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;

  if (*a1)
  {
    v2 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v2 = 0;
  }
  if (v2 != a2)
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _DWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (_DWORD *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  _DWORD *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, v14);
          v17 = (_DWORD *)v14[1];
          v14[1] = 0;
          if (v17)
          {
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[2];
          }
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = (_DWORD *)v14[1];
          v14[1] = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_19;
  }
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = (_QWORD *)(a1 + 16 * v9);
  v12 = (_DWORD *)v11[1];
  v11[1] = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  *v11 = *a2;
  v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*a1)
  {
    v2 = (WTF::StringImpl *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v2 = 0;
  }
  if (v2 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = (uint64_t *)*((_QWORD *)a2 + 2);
  if (result)
    result = (uint64_t *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t *result;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl **v15;
  uint64_t *v16;
  WTF::StringImpl **v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, (uint64_t)v14);
          v17 = (WTF::StringImpl **)v14[2];
          if (v17)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v10);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = (WTF::StringImpl **)v14[2];
          if (v15)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v10);
        }
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 32);
    do
    {
      *(v5 - 2) = 0;
      *((_BYTE *)v5 - 8) = 0;
      *v5 = 0;
      v5 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  WTF::StringImpl *v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  _QWORD *v13;
  WTF::StringImpl **v14;
  uint64_t v15;

  v4 = *(_QWORD *)a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)a2);
  v8 = 0;
  do
  {
    v9 = v6 & v5;
    v10 = (uint64_t *)(a1 + 24 * (v6 & v5));
    v6 = ++v8 + (v6 & v5);
  }
  while (*v10);
  v11 = a1 + 24 * v9;
  v14 = *(WTF::StringImpl ***)(v11 + 16);
  v13 = (_QWORD *)(v11 + 16);
  v12 = v14;
  if (v14)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v7);
    v4 = *(_QWORD *)a2;
  }
  *v10 = v4;
  *(_BYTE *)(a1 + 24 * v9 + 8) = *(_BYTE *)(a2 + 8);
  *v13 = 0;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *v13 = v15;
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::didClose(IPC::Connection &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 396) = 1;
  return WebKit::NetworkProcess::stopRunLoopIfNecessary(v1);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::didClose(IPC::Connection &)::$_1,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned __int8 *result;
  unsigned __int8 *v16;

  v4 = *(const void **)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = **(unsigned int ***)(a1 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E34BE238;
  *((_QWORD *)v8 + 1) = v6;
  v16 = v8;
  WebKit::NetworkProcess::platformFlushCookies(v5, v4, (uint64_t *)&v16);
  v9 = (uint64_t)v16;
  v16 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 800);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v10 + 16));
  v11 = **(unsigned int ***)(a1 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = off_1E34BE260;
  *((_QWORD *)v13 + 1) = v11;
  v16 = v13;
  WebKit::NetworkStorageManager::syncLocalStorage(v10, (uint64_t *)&v16);
  result = v16;
  if (v16)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 8))(v16);
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v14);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess8didCloseERN3IPC10ConnectionEENK3__1clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE238;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess8didCloseERN3IPC10ConnectionEENK3__1clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE238;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess8didCloseERN3IPC10ConnectionEENK3__1clINS2_14NetworkSessionEEEDaRT_EUlvE0_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE260;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess8didCloseERN3IPC10ConnectionEENK3__1clINS2_14NetworkSessionEEEDaRT_EUlvE0_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE260;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::lowMemoryHandler(WTF::Critical)::$_0,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::NetworkSession::lowMemoryHandler(a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::initializeNetworkProcess(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34BE2B0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::initializeNetworkProcess(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BE2B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::initializeNetworkProcess(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::call(uint64_t result, char a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(unsigned int **)(v2 + 8);
    if (v3)
    {
      v4 = v3 + 30;
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      result = WebKit::NetworkProcess::lowMemoryHandler((uint64_t)v3, a2);
      do
      {
        v6 = __ldaxr(v4);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v4));
      if (!v7)
      {
        atomic_store(1u, v3 + 30);
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[3 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v1];
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while (!*result || *result == -1)
    {
      result += 3;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  result = (uint64_t *)(v2 + 24 * v7);
  v9 = *result;
  if (*result != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v3;
      result = (uint64_t *)(v2 + 24 * v7);
      v9 = *result;
      ++v10;
      if (*result == *a2)
        return result;
    }
    return (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>(uint64_t a1, unint64_t a2)
{
  _DWORD **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = (_DWORD **)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, _DWORD **a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2;
      if (*a2)
        *v9 += 2;
      *(_QWORD *)(v7 + 8 * v8) = v9;
      ++a2;
      ++v8;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebKit::NetworkSession &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34BE300;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebKit::NetworkSession &>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34BE300;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  return WTF::fastFree(a1, v3);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *result;
  void *v5;

  v3 = *(unsigned __int8 ***)(a2 + 800);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 2);
  result = (unsigned __int8 *)WebKit::NetworkStorageManager::addAllowedSitesForConnection(v3, *(_QWORD *)(a1 + 8), a1 + 16);
  if (v3)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v3[2], v5);
  return result;
}

_QWORD *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = 1;
  do
  {
    v10 = v8;
    v11 = *(_QWORD *)(a1 + 16 * v8);
    v8 = (v8 + v9++) & v4;
  }
  while (v11);
  v12 = (_QWORD *)(a1 + 16 * v10);
  v13 = v12[1];
  v12[1] = 0;
  if (v13)
  {
    WebCore::NetworkStorageSession::operator delete(v13, 0x128uLL);
    v3 = *a2;
  }
  *v12 = v3;
  v14 = a2[1];
  a2[1] = 0;
  v12[1] = v14;
  return v12;
}

_QWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(_QWORD *result, uint64_t a2, char a3, unint64_t a4)
{
  _QWORD *v6;
  int v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  char v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;

  v6 = result;
  if (a2)
    v7 = *(_DWORD *)(a2 + 4);
  else
    v7 = 0;
  v8 = 0;
  v9 = a4;
  do
  {
    ++v8;
    v10 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v10);
  if (v8 < 0
    || ((v11 = __OFADD__(v8, 1), v12 = v8 + 1, !v11) ? (v13 = 0) : (v13 = 1),
        v7 < 0 || (v13 & 1) != 0 || (v14 = v7 + v12, __OFADD__(v7, v12))))
  {
    *result = 0;
  }
  else
  {
    v15 = !a2 || (*(_BYTE *)(a2 + 16) & 4) != 0;
    result = (_QWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((uint64_t)&v16, v14, v15, a2, a3, a4);
    *v6 = v16;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, char a5, unint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = (_QWORD *)result;
  if (a3)
  {
    if ((a2 & 0x80000000) == 0)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
      v11 = v12;
      if (v12)
      {
        *(_DWORD *)v12 = 2;
        *(_DWORD *)(v12 + 4) = a2;
        *(_QWORD *)(v12 + 8) = v12 + 20;
        *(_DWORD *)(v12 + 16) = 4;
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((char *)(v12 + 20), a4, a5, a6);
      }
      goto LABEL_5;
    }
LABEL_7:
    v11 = 0;
    goto LABEL_5;
  }
  if (a2 > 0x7FFFFFEF)
    goto LABEL_7;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v11 = v12;
  if (v12)
  {
    *(_DWORD *)v12 = 2;
    *(_DWORD *)(v12 + 4) = a2;
    *(_QWORD *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((char *)(v12 + 20), a4, a5, a6);
  }
LABEL_5:
  *v10 = v11;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(char *__dst, uint64_t a2, char a3, unint64_t a4)
{
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char *v11;
  uint64_t v13[5];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13[0] = a2;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v13, __dst);
  if (v13[0])
    v8 = *(unsigned int *)(v13[0] + 4);
  else
    v8 = 0;
  v9 = 0;
  *(_WORD *)&__dst[2 * v8] = a3;
  do
  {
    *((_BYTE *)&v13[4] + v9-- + 7) = (a4 % 0xA) | 0x30;
    v10 = a4 > 9;
    a4 /= 0xAuLL;
  }
  while (v10);
  if (v9 + 26 <= 25)
  {
    v11 = &__dst[2 * v8 + 2];
    do
    {
      *(_WORD *)v11 = *((unsigned __int8 *)&v14 + v9);
      v11 += 2;
    }
    while (!__CFADD__(v9++, 1));
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  int v9;
  uint64_t result;
  int v11;
  char v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  char v16;

  if (*a2)
    v8 = *(_DWORD *)(*a2 + 4);
  else
    v8 = 0;
  v9 = *(_DWORD *)(a3 + 8);
  result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_((uint64_t)a4, (uint64_t)&v16);
  if (((result | v9) & 0x80000000) != 0
    || ((v11 = v9 + result, !__OFADD__(v9, (_DWORD)result)) ? (v12 = 0) : (v12 = 1),
        v8 < 0 || (v12 & 1) != 0 || __OFADD__(v8, v11)))
  {
    *a1 = 0;
  }
  else
  {
    v13 = *a2;
    v14 = !*a2 || (*(_BYTE *)(v13 + 16) & 4) != 0;
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((uint64_t)&v15, v8 + v11, v14, v13, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), *a4, a4[1]);
    *a1 = v15;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, int8x16_t *a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (_QWORD *)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v15 = v16;
        if (v16)
        {
          *(_DWORD *)v16 = 2;
          *(_DWORD *)(v16 + 4) = a2;
          *(_QWORD *)(v16 + 8) = v16 + 20;
          *(_DWORD *)(v16 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((char *)(v16 + 20), a4, a5->i8, a6, a7, a8);
        }
        goto LABEL_6;
      }
LABEL_9:
      v15 = 0;
      goto LABEL_6;
    }
LABEL_10:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_10;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_9;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v15 = v16;
  if (v16)
  {
    *(_DWORD *)v16 = 2;
    *(_DWORD *)(v16 + 4) = a2;
    *(_QWORD *)(v16 + 8) = v16 + 20;
    *(_DWORD *)(v16 + 16) = 0;
    result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>((char *)(v16 + 20), a4, a5, a6, a7, a8);
  }
LABEL_6:
  *v14 = v15;
  return result;
}

uint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  uint64_t v24;
  _QWORD v25[2];
  char **v26;
  char *v27;
  int8x16x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;

  v24 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v24, __dst);
  v11 = v24;
  if (v24)
    v11 = *(unsigned int *)(v24 + 4);
  v12 = &__dst[2 * v11];
  v13 = &v12[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v14 = &v12[2 * (a4 & 0xFFFFFFC0)];
    v15 = 0uLL;
    do
    {
      v28.val[0] = *a3;
      v16 = a3[1];
      v29.val[0] = a3[2];
      v17 = a3[3];
      a3 += 4;
      v18 = v17;
      v29.val[1] = 0uLL;
      v30.val[0] = v16;
      v28.val[1] = 0uLL;
      v19 = v12;
      vst2q_s8(v19, v28);
      v19 += 32;
      v30.val[1] = 0uLL;
      vst2q_s8(v19, v30);
      v20 = v12 + 64;
      vst2q_s8(v20, v29);
      v21 = v12 + 96;
      vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
      v12 += 128;
    }
    while (v12 != v14);
    v12 = v14;
  }
  while (v12 != v13)
  {
    v22 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v12 = v22;
    v12 += 2;
  }
  v25[0] = a5;
  v25[1] = a6;
  v27 = v13;
  v26 = &v27;
  return _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)v25, &v26);
}

uint64_t _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_(uint64_t a1, char ***a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char v9[4];
  _BYTE v10[16];
  int v11;
  _BYTE v12[16];
  int v13;
  _BYTE v14[16];
  int v15;
  _BYTE v16[16];
  int v17;
  _BYTE v18[16];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  v19 = v3;
  WTF::Internal::appendHex();
  v17 = v4;
  WTF::Internal::appendHex();
  v15 = v5;
  WTF::Internal::appendHex();
  v13 = v6;
  memset(v9, 45, sizeof(v9));
  WTF::Internal::appendHex();
  v11 = v7;
  return _ZN3WTF18handleWithAdaptersIZNKS_17StringTypeAdapterINS_4UUIDEvE7writeToIDsEEvPT_EUlDpOT_E_JNS_15HexNumberBufferEcSB_cSB_cSB_cSB_EEEDcOS5_DpOT0_(a2, (uint64_t)v18, &v9[3], (uint64_t)v16, &v9[2], (uint64_t)v14, &v9[1], (uint64_t)v12, v9, (uint64_t)v10);
}

uint64_t _ZN3WTF18handleWithAdaptersIZNKS_17StringTypeAdapterINS_4UUIDEvE7writeToIDsEEvPT_EUlDpOT_E_JNS_15HexNumberBufferEcSB_cSB_cSB_cSB_EEEDcOS5_DpOT0_(char ***a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, uint64_t a8, char *a9, uint64_t a10)
{
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v13 = *a3;
  v14 = *a5;
  v15 = *a7;
  v16 = *a9;
  v17 = **a1;
  v23 = a2;
  WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>::writeTo<char16_t>((uint64_t)&v23, v17);
  v18 = &v17[2 * *(unsigned int *)(v23 + 16)];
  *(_WORD *)v18 = v13;
  v18 += 2;
  v24 = a4;
  WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>::writeTo<char16_t>((uint64_t)&v24, v18);
  v19 = &v18[2 * *(unsigned int *)(v24 + 16)];
  *(_WORD *)v19 = v14;
  v19 += 2;
  v25 = a6;
  WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>::writeTo<char16_t>((uint64_t)&v25, v19);
  v20 = &v19[2 * *(unsigned int *)(v25 + 16)];
  *(_WORD *)v20 = v15;
  v20 += 2;
  v26 = a8;
  WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>::writeTo<char16_t>((uint64_t)&v26, v20);
  v21 = &v20[2 * *(unsigned int *)(v26 + 16)];
  *(_WORD *)v21 = v16;
  v27 = a10;
  return WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>::writeTo<char16_t>((uint64_t)&v27, v21 + 2);
}

uint64_t WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>::writeTo<char16_t>(uint64_t result, char *a2)
{
  uint64_t v2;
  int8x16_t *v3;
  char *v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  int8x16x2_t v14;
  int8x16x2_t v15;
  int8x16x2_t v16;

  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  v3 = (int8x16_t *)(*(_QWORD *)result + 16 - v2);
  v4 = &a2[2 * v2];
  if (v2 >= 0x40)
  {
    v5 = &a2[2 * (v2 & 0xFFFFFFC0)];
    v6 = 0uLL;
    do
    {
      v14.val[0] = *v3;
      v7 = v3[1];
      v15.val[0] = v3[2];
      v8 = v3[3];
      v3 += 4;
      v9 = v8;
      v15.val[1] = 0uLL;
      v16.val[0] = v7;
      v14.val[1] = 0uLL;
      v10 = a2;
      vst2q_s8(v10, v14);
      v10 += 32;
      v16.val[1] = 0uLL;
      vst2q_s8(v10, v16);
      v11 = a2 + 64;
      vst2q_s8(v11, v15);
      v12 = a2 + 96;
      vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
      a2 += 128;
    }
    while (a2 != v5);
    a2 = v5;
  }
  while (a2 != v4)
  {
    v13 = v3->u8[0];
    v3 = (int8x16_t *)((char *)v3 + 1);
    *(_WORD *)a2 = v13;
    a2 += 2;
  }
  return result;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*a2);
  v7 = 0;
  do
  {
    v8 = v6 & v5;
    v6 = ++v7 + v8;
  }
  while (*(_QWORD *)(a1 + 16 * v8));
  v9 = (uint64_t *)(a1 + 16 * v8);
  v10 = v9[1];
  v9[1] = 0;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v4 = *a2;
  }
  *v9 = v4;
  v11 = a2[1];
  a2[1] = 0;
  v9[1] = v11;
  return v9;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v23 + 16), v8);
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::destroySession(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34BE350;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = v5 + 30;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::destroySession(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34BE350;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 30;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::destroySession(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 376);
  if (v4)
  {
    v5 = a1[3];
    v6 = *(_DWORD *)(v4 - 8);
    v7 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v4 + 8 * v10);
    if (v11 != v5)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v4 + 8 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      v13 = (uint64_t *)(v3 + 376);
      v14 = *(_QWORD *)(v4 + 8 * v10);
      *(_QWORD *)(v4 + 8 * v10) = -1;
      if (v14)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 16), a2);
      ++*(_DWORD *)(*v13 - 16);
      v15 = *v13;
      if (*v13)
        v16 = *(_DWORD *)(v15 - 12) - 1;
      else
        v16 = -1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *v13;
      if (*v13)
      {
        v20 = 6 * *(_DWORD *)(v17 - 12);
        v21 = *(_DWORD *)(v17 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::rehash((uint64_t *)(v3 + 376), v21 >> 1);
      }
    }
  }
  v18 = a1[4];
  a1[4] = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return WebKit::NetworkProcess::stopRunLoopIfNecessary(v3);
}

uint64_t *WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *a2 + ~(*a2 << 32);
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 8 * v7);
  if (v8 == *a2)
    return v2 + 8 * v7;
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 8 * v7);
    ++v9;
    if (v8 == *a2)
      return v2 + 8 * v7;
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

uint64_t WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2 + ~(*a2 << 32);
    v5 = 9
       * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v2 + 8 * v7);
    if (v8 == *a2)
      return v2 + 8 * v7;
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 8 * v7);
      ++v9;
      if (v8 == *a2)
        return v2 + 8 * v7;
    }
  }
  return 0;
}

WTF::StringImpl **WTF::Function<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **result;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  char v7;

  v2 = *a1;
  LOBYTE(v6) = 0;
  v7 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(WTF::StringImpl ***)a2;
    *(_QWORD *)a2 = 0;
    v6 = v3;
    v7 = 1;
  }
  result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v2 + 16))(v2, &v6);
  if (v7)
  {
    result = v6;
    if (v6)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BE378;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BE378;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>&&>::call(uint64_t a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **result;
  WTF::StringImpl **v5;

  v2 = *a2;
  *a2 = 0;
  v5 = v2;
  WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>::operator()((uint64_t *)(a1 + 8), &v5);
  result = v5;
  if (v5)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String)>,void,WTF::String&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BEFD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String)>,void,WTF::String&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BEFD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String)>,void,WTF::String&&>::call(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  v2 = *a2;
  *a2 = 0;
  v5 = v2;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()((uint64_t *)(a1 + 8), &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::ITPThirdPartyData>::destruct(WTF::StringImpl *result, void *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), a2);
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 3;
    }
    while (v3 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasLocalStorage(PAL::SessionID,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34BE3A0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasLocalStorage(PAL::SessionID,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34BE3A0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasLocalStorage(PAL::SessionID,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  const WebCore::SecurityOriginData *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const WebCore::SecurityOriginData *v12;
  int v13;
  unsigned int v14;

  v3 = *(const WebCore::SecurityOriginData **)a2;
  v12 = *(const WebCore::SecurityOriginData **)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = v5;
  v14 = v4;
  if (v4)
  {
    v6 = 48 * v4 - 48;
    do
    {
      v7 = WebCore::RegistrableDomain::matches((WebCore::RegistrableDomain *)(a1 + 8), v3);
      if ((v7 & 1) != 0)
        break;
      v3 = (const WebCore::SecurityOriginData *)((char *)v3 + 48);
      v8 = v6;
      v6 -= 48;
    }
    while (v8);
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
}

uint64_t WebCore::RegistrableDomain::matches(WebCore::RegistrableDomain *this, const WebCore::SecurityOriginData *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)WebCore::SecurityOriginData::host(a2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  return WebCore::RegistrableDomain::matches(this, v4, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setResourceLoadStatisticsLogTestingEvent(BOOL)::$_0,void,WebKit::NetworkSession &>::call(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34BE418;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)a1[2];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34BE418;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = a1[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 72);
      if (v3)
        return WebKit::WebResourceLoadStatisticsStore::setManagedDomains(v3, a1 + 2, (const WTF::StringImpl *)(a1 + 3));
    }
  }
  v5 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkSession &>::call(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(a2 + 97) = *(_BYTE *)(result + 8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34BE468;
  WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0::~$_0((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34BE468;
  WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0::~$_0((uint64_t)a1 + 16, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::call(uint64_t a1, const WebCore::ResourceError *a2)
{
  uint64_t v2;
  WebKit::NetworkSession *v4;
  WebKit::NetworkLoadScheduler *Scheduler;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = *(WebKit::NetworkSession **)(v2 + 8);
    if (v4)
    {
      Scheduler = WebKit::NetworkSession::networkLoadScheduler(v4);
      WebKit::NetworkLoadScheduler::finishedPreconnectForMainResource(Scheduler, (const WTF::URL *)(a1 + 24), (const WTF::String **)(a1 + 64), a2);
    }
  }
}

uint64_t *WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = *a2 + ~(*a2 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 8 * v20;
        goto LABEL_29;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_22:
      result = WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand(v4, v14);
      v14 = result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_22;
  }
  v26 = v21 + 8 * v24;
  v25 = 1;
LABEL_29:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  uint64_t v6;

  *a1 = off_1E34BE490;
  v3 = (WTF::StringImpl **)a1[6];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl **)a1[5];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)a1[4];
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34BE490;
  v3 = (WTF::StringImpl **)*((_QWORD *)a1 + 6);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl **)*((_QWORD *)a1 + 5);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)*((_QWORD *)a1 + 4);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree(a1, v6);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::fetchWebsiteData finished fetching data", v3, 2u);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_0,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> const&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BE4B8;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_0,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> const&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BE4B8;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_0,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::HashSet>,WTF::HashTraits<WTF::HashSet>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t *a2)
{
  WebCore::SecurityOriginData *v4;
  WebCore::SecurityOriginData *v5;
  WebCore::SecurityOriginData *v6;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::SecurityOriginData *v11[2];
  char v12;
  _BYTE v13[24];
  int v14;
  _BYTE v15[24];
  int v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  v5 = v4;
  v11[0] = v4;
  v11[1] = v6;
  if (*a2)
    v7 = (WebCore::SecurityOriginData *)(*a2 + 32 * *(unsigned int *)(*a2 - 4));
  else
    v7 = 0;
  if (v7 != v4)
  {
    do
    {
      v8 = *(_QWORD *)(a1 + 8);
      v13[0] = 0;
      v14 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v13, (uint64_t)v5);
      v15[0] = 0;
      v16 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v15, (uint64_t)v13);
      LODWORD(v17) = 0x4000;
      *((_QWORD *)&v17 + 1) = 0;
      v9 = *(_DWORD *)(v8 + 28);
      if (v9 == *(_DWORD *)(v8 + 24))
      {
        WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(v8 + 16, (unint64_t)v15);
      }
      else
      {
        v10 = *(_QWORD *)(v8 + 16) + 48 * v9;
        *(_BYTE *)v10 = 0;
        *(_DWORD *)(v10 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v10, (uint64_t)v15);
        *(_OWORD *)(v10 + 32) = v17;
        ++*(_DWORD *)(v8 + 28);
      }
      if (v16 != -1)
        ((void (*)(char *, _BYTE *))off_1E34BDF78[v16])(&v12, v15);
      v16 = -1;
      if (v14 != -1)
        ((void (*)(char *, _BYTE *))off_1E34BDF78[v14])(&v12, v13);
      v14 = -1;
      v11[0] = (WebCore::SecurityOriginData *)((char *)v11[0] + 32);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v11);
      v5 = v11[0];
    }
    while (v11[0] != v7);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_1,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BE4E0;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_1,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BE4E0;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_1,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = *a2;
  v15 = *a2;
  v3 = *((_DWORD *)a2 + 2);
  v4 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v16 = v3;
  v17 = v4;
  if (!(_DWORD)v4)
    return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v5 + 24);
  v6 = *(unsigned int *)(v5 + 28);
  v8 = v6 + v4;
  if (v6 + v4 <= v7
    || ((v9 = v7 + (v7 >> 2), v9 >= 0x10) ? (v10 = v9 + 1) : (v10 = 16),
        v10 <= v8 ? (v11 = v8) : (v11 = v10),
        result = WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v11), v6 = *(unsigned int *)(v5 + 28), v8 >= v6))
  {
    v13 = *(_QWORD *)(v5 + 16) + 48 * v6;
    v14 = v2 + 48 * v4;
    do
    {
      *(_BYTE *)v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v13, v2);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v2 + 32);
      v2 += 48;
      v13 += 48;
    }
    while (v2 != v14);
    *(_DWORD *)(v5 + 28) = v8;
    return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_2,void,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BE508;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_2,void,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BE508;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_2,void,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v4 = result;
    do
    {
      v5 = (uint64_t *)(*((_QWORD *)v4 + 1) + 48);
      v6 = v2 - 1;
      v7 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 8 * (v2 - 1));
      *(_QWORD *)(*(_QWORD *)a2 + 8 * (v2 - 1)) = 0;
      v10 = v7;
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(_QWORD *)a2 + 8 * (v2 - 1)), (WTF::StringImpl *)(*(_QWORD *)a2 + 8 * v2));
      *(_DWORD *)(a2 + 12) = v6;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v5, &v10, (uint64_t)&v9);
      result = v10;
      v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      v2 = *(unsigned int *)(a2 + 12);
    }
    while ((_DWORD)v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BE530;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BE530;
  WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;

  v2 = *a2;
  v15 = *a2;
  v3 = *((_DWORD *)a2 + 2);
  v4 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v16 = v3;
  v17 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  v7 = *(unsigned int *)(v5 + 28) + v4;
  if (v7 > v6)
  {
    v8 = v6 + (v6 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v7)
      v10 = *(unsigned int *)(v5 + 28) + v4;
    else
      v10 = v9;
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v10);
  }
  if ((_DWORD)v4)
  {
    v11 = v2 + 48 * v4;
    v12 = *(_DWORD *)(v5 + 28);
    do
    {
      v13 = *(_QWORD *)(v5 + 16) + 48 * v12;
      *(_BYTE *)v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v13, v2);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v2 + 32);
      v12 = *(_DWORD *)(v5 + 28) + 1;
      *(_DWORD *)(v5 + 28) = v12;
      v2 += 48;
    }
    while (v2 != v11);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BE558;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BE558;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteData finished deleting modified data", v3, 2u);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE580;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE580;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE5A8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE5A8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_3,void,unsigned int>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE5D0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_3,void,unsigned int>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE5D0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE5F8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE5F8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_5,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE620;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_5,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE620;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_6,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE648;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_6,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE648;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_7,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE670;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_7,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE670;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_8,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE698;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_8,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE698;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BE6C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BE6C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteDataForOrigin finished deleting data", v3, 2u);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE6E8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE6E8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WebKit::NetworkCache::Cache *WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(WebKit::NetworkCache::Cache *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::NetworkCache::Cache::~Cache(result, a2);
    return (WebKit::NetworkCache::Cache *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::NetworkCache::Key>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 72 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::NetworkCache::Key>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[2];
      v3[2] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = v3[1];
      v3[1] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 9;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebKit::NetworkCache::Cache *v7;
  char v9;

  *(_QWORD *)a1 = off_1E34BE710;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, a2);
  v4 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E34BDF78[v5])(&v9, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 16));
  v7 = *(WebKit::NetworkCache::Cache **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v7, v6);
  return a1;
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebKit::NetworkCache::Cache *v7;
  char v9;

  *(_QWORD *)a1 = off_1E34BE710;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, a2);
  v4 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E34BDF78[v5])(&v9, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 16));
  v7 = *(WebKit::NetworkCache::Cache **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v7, v6);
  return WTF::fastFree((WTF *)a1, v6);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::call(uint64_t a1, unint64_t *a2)
{
  WebCore::SecurityOriginData *v4;
  const WTF::URL *v5;
  uint64_t result;
  int v7;
  unint64_t v8;
  unsigned int v9;
  const WebKit::NetworkCache::Key **v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  char v15;
  uint64_t v16[3];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (*(_BYTE *)(a1 + 24))
      goto LABEL_6;
    v4 = (WebCore::SecurityOriginData *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(*a2 + 80));
    WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v4, v5);
    result = WebCore::operator==();
    v7 = result;
    if (v17 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E34BDF78[v17])(&v15, v16);
    if (v7)
    {
LABEL_6:
      v8 = *a2;
      v9 = *(_DWORD *)(a1 + 84);
      if (v9 == *(_DWORD *)(a1 + 80))
      {
        return WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::Key const&>(a1 + 72, v8);
      }
      else
      {
        result = WebKit::NetworkCache::Key::Key(*(_QWORD *)(a1 + 72) + 72 * v9, v8);
        ++*(_DWORD *)(a1 + 84);
      }
    }
  }
  else
  {
    v10 = (const WebKit::NetworkCache::Key **)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 8);
    v11 = *(unsigned int **)(a1 + 16);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 + 1, v11));
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E34BE738;
    v14[1] = v11;
    v16[0] = (uint64_t)v14;
    WebKit::NetworkCache::Cache::remove(v12, v10, v16);
    result = v16[0];
    if (v16[0])
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16[0] + 8))(v16[0]);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::Key const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebKit::NetworkCache::Key::Key(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x1970E3618);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12));
    v5 = 72 * a2;
    v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::NetworkCache::Key>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::NetworkCache::Key>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      v9 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v9;
      v10 = *((_OWORD *)v5 + 2);
      v11 = *((_OWORD *)v5 + 3);
      *(_QWORD *)(a3 + 64) = *((_QWORD *)v5 + 8);
      *(_OWORD *)(a3 + 32) = v10;
      *(_OWORD *)(a3 + 48) = v11;
      v12 = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 72);
      a3 += 72;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess26deleteWebsiteDataForOriginEN3PAL9SessionIDENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__2clIKNS2_12NetworkCache5Cache14TraversalEntryEEEDaPT_EUlvE_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE738;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess26deleteWebsiteDataForOriginEN3PAL9SessionIDENS_9OptionSetINS2_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEN3__2clIKNS2_12NetworkCache5Cache14TraversalEntryEEEDaPT_EUlvE_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE738;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE760;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE760;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE788;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigin(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE788;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BE7B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BE7B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteDataForOrigins finished deleting data", v3, 2u);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE7D8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE7D8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE800;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_3,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE800;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE828;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE828;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_5,void,unsigned int>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE850;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_5,void,unsigned int>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE850;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_6,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE878;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_6,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE878;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_7,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE8A0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_7,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE8A0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_8,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE8C8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_8,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE8C8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_9,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BE8F0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_9,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BE8F0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34BE918;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BE918;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;
  _QWORD *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  IPC::Encoder *result;
  IPC::Encoder *v15;
  WTF::StringImpl **v16;
  _QWORD *v17;

  v3 = a1;
  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 327;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v15 = (IPC::Encoder *)v5;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v15, 0, 0);
    a1 = (uint64_t)v15;
    v15 = 0;
    if (a1)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)a1, v6);
      a1 = WTF::fastFree(v7, v8);
    }
  }
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v9 = *(IPC::Encoder **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  v15 = v9;
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)&v16);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34BE940;
  v10[1] = v15;
  v11 = v16;
  v15 = 0;
  v16 = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::RunLoop::dispatch();
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  if (v16)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v12);
  result = v15;
  v15 = 0;
  if (result)
    return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _BYTE v13[24];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  *a2 = 0;
  if (*a1)
    v4 = *(_DWORD *)(*a1 - 12);
  else
    v4 = 0;
  result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(a2, v4);
  while (*a1 && *(_DWORD *)(*a1 - 12))
  {
    v8 = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, (uint64_t)v6, v7);
    v9 = *a1;
    if (*a1)
      v9 += 8 * *(unsigned int *)(v9 - 4);
    if ((WTF::StringImpl **)v9 == v8)
    {
      v14 = 0;
      goto LABEL_15;
    }
    v10 = *v8;
    *v8 = 0;
    v14 = v10;
    if (*a1)
    {
      v11 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
      if ((WTF::StringImpl **)v11 == v8)
        goto LABEL_15;
    }
    else
    {
      if (!v8)
        goto LABEL_15;
      v11 = 0;
    }
    if ((WTF::StringImpl **)v11 != v8)
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(a1, v8);
LABEL_15:
    WebCore::RegistrableDomain::isolatedCopy(&v15);
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(a2, &v15, (uint64_t)v13);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reserveInitialCapacity(_QWORD *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t result;

  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(a2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  result = WTF::fastZeroedMalloc((WTF *)(8 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (WTF::StringImpl **)WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *a1 = &off_1E34BE940;
  v3 = (WTF::StringImpl **)a1[2];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34BE940;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_1::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *a1 = &off_1E34BE968;
  v3 = (WTF::StringImpl **)a1[2];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34BE968;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::call(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v5[16];

  v2 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains finished deleting and restricting data", v5, 2u);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BE990;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_2,void>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BE990;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_3,void>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BE9B8;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_3,void>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BE9B8;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_4,void>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BE9E0;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_4,void>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BE9E0;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5,void,WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *a1 = off_1E34BEA08;
  v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 3));
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5,void,WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  void *v7;

  *a1 = off_1E34BEA08;
  v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 3));
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), v6);
  return WTF::fastFree((WTF *)a1, v7);
}

double WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5,void,WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&>::call(uint64_t a1, uint64_t *a2)
{
  WebCore::SecurityOriginData *v4;
  double result;
  WebCore::SecurityOriginData *v6;
  WebCore::SecurityOriginData *v7;
  WebCore::SecurityOriginData *v8;
  WebCore::RegistrableDomain *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  WebCore::RegistrableDomain *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebKit::NetworkSession *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const WTF::StringImpl **v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unsigned int *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  WTF::StringImpl *v33;
  WebCore::SecurityOriginData *v34[2];
  const WTF::StringImpl **v35[3];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  v6 = v4;
  v34[0] = v4;
  v34[1] = v7;
  if (*a2)
    v8 = (WebCore::SecurityOriginData *)(*a2 + 32 * *(unsigned int *)(*a2 - 4));
  else
    v8 = 0;
  if (v8 != v4)
  {
    do
    {
      v9 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host(v6);
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v9, &v33);
      v35[0] = &v33;
      v12 = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(a1 + 8, v35, v10);
      v13 = v33;
      v33 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (v12 != -1)
      {
        v14 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16);
        v15 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host(v6);
        WebCore::RegistrableDomain::uncheckedCreateFromHost(v15, &v33);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v14, &v33, (uint64_t)v35);
        v17 = v33;
        v33 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = *(_QWORD *)(a1 + 32);
        if (v18)
        {
          v19 = *(WebKit::NetworkSession **)(v18 + 8);
          if (v19)
          {
            WebKit::NetworkSession::ensureSWServer(v19);
            v20 = *(unsigned int **)(a1 + 24);
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 + 1, v20));
            v33 = (WTF::StringImpl *)v20;
            v22 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v22 = off_1E34BEA30;
            v23 = v33;
            v33 = 0;
            *(_QWORD *)(v22 + 8) = v23;
            v35[0] = (const WTF::StringImpl **)v22;
            WebCore::SWServer::clear();
            v24 = v35[0];
            v35[0] = 0;
            if (v24)
              (*((void (**)(const WTF::StringImpl **))*v24 + 1))(v24);
            WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v33);
            v25 = *(_QWORD *)(a1 + 32);
            if (v25)
              v25 = *(_QWORD *)(v25 + 8);
            v26 = v25 + 832;
            LOBYTE(v35[0]) = 0;
            v36 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v35, (uint64_t)v6);
            v27 = *(unsigned int **)(a1 + 24);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 + 1, v27));
            v32 = v27;
            v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v29 = off_1E34BEA58;
            v30 = v32;
            v32 = 0;
            v33 = v29;
            *((_QWORD *)v29 + 1) = v30;
            WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin(v26, (uint64_t)v35, (uint64_t *)&v33);
            v31 = v33;
            v33 = 0;
            if (v31)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
            WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v32);
            if (v36 != -1)
              ((void (*)(WTF::StringImpl **, const WTF::StringImpl ***))off_1E34BDF78[v36])(&v33, v35);
          }
        }
      }
      v34[0] = (WebCore::SecurityOriginData *)((char *)v34[0] + 32);
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v34);
      v6 = v34[0];
    }
    while (v34[0] != v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5::operator()(WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BEA30;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_5::operator()(WTF::CompletionHandler<WTF::HashSet::SecurityOriginData,WebCore::RegistrableDomain<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::DefaultHash<WebCore><WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &>,WTF::HashTraits<WebCore>> const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BEA30;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess49deleteAndRestrictWebsiteDataForRegistrableDomainsEN3PAL9SessionIDENS_9OptionSetINS2_15WebsiteDataTypeEEEONS2_50RegistrableDomainsToDeleteOrRestrictWebsiteDataForEbONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEN3__5clERKNSC_INSD_18SecurityOriginDataENSF_ISQ_EENSH_ISQ_EESJ_EEEUlOT_E_vJjEED1Ev(_QWORD *a1)
{
  *a1 = off_1E34BEA58;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess49deleteAndRestrictWebsiteDataForRegistrableDomainsEN3PAL9SessionIDENS_9OptionSetINS2_15WebsiteDataTypeEEEONS2_50RegistrableDomainsToDeleteOrRestrictWebsiteDataForEbONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEN3__5clERKNSC_INSD_18SecurityOriginDataENSF_ISQ_EENSH_ISQ_EESJ_EEEUlOT_E_vJjEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BEA58;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_6,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BEA80;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_6,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BEA80;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_6,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **result;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD v14[2];

  result = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v14[0] = result;
  v14[1] = v6;
  if (*a2)
    v7 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  else
    v7 = 0;
  if ((WTF::StringImpl **)v7 != result)
  {
    do
    {
      v8 = *result;
      if (*result)
        *(_DWORD *)v8 += 2;
      v13 = v8;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(*(_QWORD *)(a1 + 8) + 16), &v13, (uint64_t)&v12);
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, (uint64_t)v9, v10);
      result = (WTF::StringImpl **)v14[0];
    }
    while (v14[0] != v7);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_7,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BEAA8;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_7,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BEAA8;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_7,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **result;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD v14[2];

  result = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v14[0] = result;
  v14[1] = v6;
  if (*a2)
    v7 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  else
    v7 = 0;
  if ((WTF::StringImpl **)v7 != result)
  {
    do
    {
      v8 = *result;
      if (*result)
        *(_DWORD *)v8 += 2;
      v13 = v8;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(*(_QWORD *)(a1 + 8) + 16), &v13, (uint64_t)&v12);
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, (uint64_t)v9, v10);
      result = (WTF::StringImpl **)v14[0];
    }
    while (v14[0] != v7);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_8,void,WTF::HashTableTraits const&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BEAD0;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_8,void,WTF::HashTableTraits const&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BEAD0;
  WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::$_8,void,WTF::HashTableTraits const&>::call(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::ASCIICaseInsensitiveHash **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  _BYTE v11[24];
  _QWORD v12[2];

  result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v6 = (WTF::ASCIICaseInsensitiveHash **)result;
  v12[0] = result;
  v12[1] = v7;
  if (*a2)
    v8 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  else
    v8 = 0;
  if (v8 != result)
  {
    do
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(*(_QWORD *)(a1 + 8) + 16), v6, (uint64_t)v11);
      v12[0] += 8;
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v9, v10);
      v6 = (WTF::ASCIICaseInsensitiveHash **)v12[0];
    }
    while (v12[0] != v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BEAF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BEAF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl **result;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    if (v6)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
  }
  return result;
}

WTF::StringImpl **IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl **result;
  WTF::StringImpl **v4;

  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteCookiesForTesting(PAL::SessionID,WebCore::RegistrableDomain,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BEB20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteCookiesForTesting(PAL::SessionID,WebCore::RegistrableDomain,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BEB20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::deleteCookiesForTesting(PAL::SessionID,WebCore::RegistrableDomain,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34BEB48;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BEB48;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;
  _QWORD *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  IPC::Encoder *result;
  IPC::Encoder *v15;
  WTF::StringImpl **v16;
  _QWORD *v17;

  v3 = a1;
  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 328;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v15 = (IPC::Encoder *)v5;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v15, 0, 0);
    a1 = (uint64_t)v15;
    v15 = 0;
    if (a1)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)a1, v6);
      a1 = WTF::fastFree(v7, v8);
    }
  }
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v9 = *(IPC::Encoder **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  v15 = v9;
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)&v16);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34BEB70;
  v10[1] = v15;
  v11 = v16;
  v15 = 0;
  v16 = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::RunLoop::dispatch();
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  if (v16)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v12);
  result = v15;
  v15 = 0;
  if (result)
    return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *a1 = &off_1E34BEB70;
  v3 = (WTF::StringImpl **)a1[2];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34BEB70;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  uint64_t v6;

  *a1 = off_1E34BEB98;
  v3 = (WTF::StringImpl **)a1[6];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl **)a1[5];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)a1[4];
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34BEB98;
  v3 = (WTF::StringImpl **)*((_QWORD *)a1 + 6);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl **)*((_QWORD *)a1 + 5);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)*((_QWORD *)a1 + 4);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree(a1, v6);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebCore::RegistrableDomain *v2;
  WebCore::RegistrableDomain *v3;
  WebCore::RegistrableDomain *v4;
  WebCore::RegistrableDomain *v5;
  uint64_t v6;
  WebCore::RegistrableDomain *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebCore::RegistrableDomain *v10;
  WebCore::RegistrableDomain *v11;
  WebCore::RegistrableDomain *v12;
  WebCore::RegistrableDomain *v13;
  uint64_t v14;
  WebCore::RegistrableDomain *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::SecurityOriginData *v19;
  uint64_t v20;
  WebCore::RegistrableDomain *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **result;
  _BYTE v27[24];
  WTF::StringImpl *v28;
  WTF::StringImpl **v29;

  v29 = 0;
  v2 = (WebCore::RegistrableDomain *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 32));
  v3 = v2;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    v7 = (WebCore::RegistrableDomain *)(v6 + 8 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != v2)
  {
    do
    {
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v3, &v28);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v29, &v28, (uint64_t)v27);
      v9 = v28;
      v28 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      while (1)
      {
        v3 = (WebCore::RegistrableDomain *)((char *)v3 + 8);
        if (v3 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
          goto LABEL_12;
      }
      v3 = v5;
LABEL_12:
      ;
    }
    while (v3 != v7);
  }
  v10 = (WebCore::RegistrableDomain *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 40));
  v11 = v10;
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
    v15 = (WebCore::RegistrableDomain *)(v14 + 8 * *(unsigned int *)(v14 - 4));
  else
    v15 = 0;
  if (v15 != v10)
  {
    do
    {
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v11, &v28);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v29, &v28, (uint64_t)v27);
      v17 = v28;
      v28 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      while (1)
      {
        v11 = (WebCore::RegistrableDomain *)((char *)v11 + 8);
        if (v11 == v13)
          break;
        if ((unint64_t)(*(_QWORD *)v11 + 1) > 1)
          goto LABEL_24;
      }
      v11 = v13;
LABEL_24:
      ;
    }
    while (v11 != v15);
  }
  v18 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v18)
  {
    v19 = *(WebCore::SecurityOriginData **)(a1 + 16);
    v20 = 48 * v18;
    do
    {
      v21 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host(v19);
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v21, &v28);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v29, &v28, (uint64_t)v27);
      v23 = v28;
      v28 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      v19 = (WebCore::SecurityOriginData *)((char *)v19 + 48);
      v20 -= 48;
    }
    while (v20);
  }
  v24 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v24 + 16))(v24, &v29);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  result = v29;
  if (v29)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v25);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTableTraits> const&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BEBC0;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTableTraits> const&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BEBC0;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_1,void,WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t *a2)
{
  WebCore::SecurityOriginData *v4;
  WebCore::SecurityOriginData *v5;
  WebCore::SecurityOriginData *v6;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::SecurityOriginData *v11[2];
  char v12;
  _BYTE v13[24];
  int v14;
  _BYTE v15[24];
  int v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  v5 = v4;
  v11[0] = v4;
  v11[1] = v6;
  if (*a2)
    v7 = (WebCore::SecurityOriginData *)(*a2 + 32 * *(unsigned int *)(*a2 - 4));
  else
    v7 = 0;
  if (v7 != v4)
  {
    do
    {
      v8 = *(_QWORD *)(a1 + 8);
      v13[0] = 0;
      v14 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v13, (uint64_t)v5);
      v15[0] = 0;
      v16 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v15, (uint64_t)v13);
      LODWORD(v17) = 0x4000;
      *((_QWORD *)&v17 + 1) = 0;
      v9 = *(_DWORD *)(v8 + 28);
      if (v9 == *(_DWORD *)(v8 + 24))
      {
        WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(v8 + 16, (unint64_t)v15);
      }
      else
      {
        v10 = *(_QWORD *)(v8 + 16) + 48 * v9;
        *(_BYTE *)v10 = 0;
        *(_DWORD *)(v10 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v10, (uint64_t)v15);
        *(_OWORD *)(v10 + 32) = v17;
        ++*(_DWORD *)(v8 + 28);
      }
      if (v16 != -1)
        ((void (*)(char *, _BYTE *))off_1E34BDF78[v16])(&v12, v15);
      v16 = -1;
      if (v14 != -1)
        ((void (*)(char *, _BYTE *))off_1E34BDF78[v14])(&v12, v13);
      v14 = -1;
      v11[0] = (WebCore::SecurityOriginData *)((char *)v11[0] + 32);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v11);
      v5 = v11[0];
    }
    while (v11[0] != v7);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_2,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BEBE8;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_2,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BEBE8;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_2,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = *a2;
  v15 = *a2;
  v3 = *((_DWORD *)a2 + 2);
  v4 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v16 = v3;
  v17 = v4;
  if (!(_DWORD)v4)
    return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v5 + 24);
  v6 = *(unsigned int *)(v5 + 28);
  v8 = v6 + v4;
  if (v6 + v4 <= v7
    || ((v9 = v7 + (v7 >> 2), v9 >= 0x10) ? (v10 = v9 + 1) : (v10 = 16),
        v10 <= v8 ? (v11 = v8) : (v11 = v10),
        result = WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v11), v6 = *(unsigned int *)(v5 + 28), v8 >= v6))
  {
    v13 = *(_QWORD *)(v5 + 16) + 48 * v6;
    v14 = v2 + 48 * v4;
    do
    {
      *(_BYTE *)v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v13, v2);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v2 + 32);
      v2 += 48;
      v13 += 48;
    }
    while (v2 != v14);
    *(_DWORD *)(v5 + 28) = v8;
    return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BEC10;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34BEC10;
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_3,void,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;

  v2 = *a2;
  v15 = *a2;
  v3 = *((_DWORD *)a2 + 2);
  v4 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v16 = v3;
  v17 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  v7 = *(unsigned int *)(v5 + 28) + v4;
  if (v7 > v6)
  {
    v8 = v6 + (v6 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v7)
      v10 = *(unsigned int *)(v5 + 28) + v4;
    else
      v10 = v9;
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 16, v10);
  }
  if ((_DWORD)v4)
  {
    v11 = v2 + 48 * v4;
    v12 = *(_DWORD *)(v5 + 28);
    do
    {
      v13 = *(_QWORD *)(v5 + 16) + 48 * v12;
      *(_BYTE *)v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v13, v2);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v2 + 32);
      v12 = *(_DWORD *)(v5 + 28) + 1;
      *(_DWORD *)(v5 + 28) = v12;
      v2 += 48;
    }
    while (v2 != v11);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::DecideDestinationWithSuggestedFilename,WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0>(WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34BEC38;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 30;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::DecideDestinationWithSuggestedFilename,WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0>(WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34BEC38;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 30;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::DecideDestinationWithSuggestedFilename,WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0>(WebKit::NetworkProcess::findPendingDownloadLocation(WebKit::NetworkDataTask &,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&,WebCore::ResourceResponse const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(_QWORD *a1, uint64_t *a2)
{
  BOOL v2;
  uint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  const char **v11;
  const char **v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _QWORD *v20;
  uint64_t v21;
  const char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char **v31;
  const char **v32;
  BOOL v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  const char **v37;
  char v38;

  if (!a2 || !*a2)
  {
LABEL_14:
    v31 = 0;
    v18 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v31);
    return;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v35);
  if (!v36)
  {
    LOBYTE(v31) = 0;
    v34 = 0;
    goto LABEL_12;
  }
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v37);
  if (!v38)
  {
    v14 = 0;
    LOBYTE(v31) = 0;
    v34 = 0;
    goto LABEL_16;
  }
  v7 = a2[1];
  v6 = (WTF::StringImpl *)*a2;
  v8 = a2[2] - *a2;
  if (v7 <= v8)
  {
    v25 = 0;
    v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v26 = *a2;
        v25 = a2[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
    goto LABEL_34;
  }
  v9 = (unsigned __int8 *)v6 + v8;
  a2[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v25 = v7;
    v26 = 0;
LABEL_34:
    v7 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
        v6 = (WTF::StringImpl *)*a2;
        v7 = a2[1];
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
    }
LABEL_35:
    *a2 = 0;
    a2[1] = 0;
    v5 = a2[3];
    if (!v5)
      goto LABEL_36;
    goto LABEL_39;
  }
  v10 = *v9;
  if (v10 >= 2)
    goto LABEL_35;
  if (!v36)
  {
    __break(1u);
LABEL_39:
    if (v7)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v5 + 16))(v5, v6);
      v29 = a2[3];
      v6 = (WTF::StringImpl *)*a2;
      v30 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      if (v29)
      {
        if (v30)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v29 + 16))(v29, v6);
      }
    }
LABEL_36:
    v13 = 0;
    v14 = 0;
    LOBYTE(v31) = 0;
    v34 = 0;
    if (!v38)
      goto LABEL_16;
    goto LABEL_10;
  }
  v2 = v10 != 0;
  v11 = (const char **)v35;
  v35 = 0;
  v12 = v37;
  v37 = 0;
  v31 = v11;
  v32 = v12;
  v33 = v2;
  v13 = 1;
  v34 = 1;
LABEL_10:
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v37);
  v14 = v13;
LABEL_16:
  if (!v36 || (v19 = v35, v35 = 0, !v19))
  {
LABEL_20:
    if (v14)
      goto LABEL_21;
    goto LABEL_12;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v19, v6);
  if (!v14)
  {
LABEL_12:
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    std::__optional_destruct_base<std::tuple<WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31);
    goto LABEL_14;
  }
LABEL_21:
  if (v31 && *((_DWORD *)v31 + 1))
  {
    v20 = (_QWORD *)a1[4];
    v21 = a1[1];
    v22 = (const char **)v20[5];
    (*(void (**)(_QWORD *, const char ***, const char ***, BOOL))(*v20 + 48))(v20, &v31, &v32, v2);
    v23 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[4] + 40))(a1[4]) != 2
      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[4] + 40))(a1[4]) != 3)
    {
      v37 = v22;
      if (!WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v21 + 176), &v37))
      {
        v35 = (WTF::StringImpl *)v22;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>((uint64_t *)(v21 + 168), (uint64_t *)&v35, a1 + 4, (uint64_t)&v37);
      }
    }
  }
  else
  {
    v24 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  std::__optional_destruct_base<std::tuple<WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 24))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));
    v3 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

WebKit::NetworkCache::Cache *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setCacheModel(WebKit::CacheModel)::$_0,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  WebKit::NetworkCache::Cache *result;

  result = *(WebKit::NetworkCache::Cache **)(a2 + 608);
  if (result)
    return (WebKit::NetworkCache::Cache *)WebKit::NetworkCache::Cache::updateCapacity(result);
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WTF::String const&,WebCore::ShouldSample>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WTF::String const&,WebCore::ShouldSample>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[2]);
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34BEC88;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BEC88;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v6 = 134217984;
    v7 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcess::prepareToSuspend() Process is ready to suspend", (uint8_t *)&v6, 0xCu);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v6;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34BECB0;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = v2;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BECB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v7);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v6;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34BECD8;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = v2;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BECD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_3,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned __int8 *result;
  unsigned __int8 *v16;

  v4 = *(const void **)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = **(unsigned int ***)(a1 + 16);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = &off_1E34BED28;
  *((_QWORD *)v8 + 1) = v6;
  v16 = v8;
  WebKit::NetworkProcess::platformFlushCookies(v5, v4, (uint64_t *)&v16);
  v9 = (uint64_t)v16;
  v16 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 800);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v10 + 16));
  v11 = **(unsigned int ***)(a1 + 16);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = &off_1E34BED50;
  *((_QWORD *)v13 + 1) = v11;
  v16 = v13;
  WebKit::NetworkStorageManager::suspend(v10, (uint64_t *)&v16);
  result = v16;
  v16 = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v14);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16prepareToSuspendEbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEENK3__3clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v6;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34BED28;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = v2;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v6);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16prepareToSuspendEbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEENK3__3clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BED28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v7);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16prepareToSuspendEbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEENK3__3clINS2_14NetworkSessionEEEDaRT_EUlvE0_vJEED1Ev(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v6;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34BED50;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = v2;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v6);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16prepareToSuspendEbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEENK3__3clINS2_14NetworkSessionEEEDaRT_EUlvE0_vJEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BED50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v7);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v6;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34BED78;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = v2;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::prepareToSuspend(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BED78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processDidResume(BOOL)::$_0,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  void *v4;

  v2 = *(_QWORD *)(a2 + 800);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v2 + 16));
  result = (unsigned __int8 *)WebKit::NetworkStorageManager::resume(v2);
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), v4);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  void *v7;
  unsigned __int8 *result;
  unsigned __int8 *v9;

  v3 = *(_QWORD *)(a2 + 800);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v3 + 16));
  v4 = **(unsigned int ***)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E34BEDF0;
  *((_QWORD *)v6 + 1) = v4;
  v9 = v6;
  WebKit::NetworkStorageManager::syncLocalStorage(v3, (uint64_t *)&v9);
  result = v9;
  if (v9)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v9 + 8))(v9);
  if (v3)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), v7);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16syncLocalStorageEONS_17CompletionHandlerIFvvEEEENK3__0clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BEDF0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess16syncLocalStorageEONS_17CompletionHandlerIFvvEEEENK3__0clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BEDF0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::renameOriginInWebsiteData(PAL::SessionID,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BEE18;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::renameOriginInWebsiteData(PAL::SessionID,WebCore::SecurityOriginData &&,WebCore::SecurityOriginData &,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BEE18;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_0,void,unsigned int>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BEE40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_0,void,unsigned int>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BEE40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_0,void,unsigned int>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _BYTE v4[144];

  v4[0] = 0;
  v4[136] = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v1 + 16))(v1, 0, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1,void,BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  *(_QWORD *)a1 = &off_1E34BEE68;
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E34BDF78[v5])(&v11, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    v7 = v6 + 30;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1,void,BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  *(_QWORD *)this = &off_1E34BEE68;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E34BDF78[v5])(&v11, (char *)this + 32);
  *((_DWORD *)this + 14) = -1;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    v7 = v6 + 30;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1,void,BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 80)
    || (a2 & 1) != 0
    || (v6 = *(_QWORD *)(a1 + 8),
        v13 = *(_QWORD *)(a1 + 24),
        (v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 208), &v13)) == 0))
  {
    v11 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2, a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    v8 = v7 + 832;
    v12 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v9 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v9 = &off_1E34BEE90;
    *(_OWORD *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 24) = a2;
    v13 = v9;
    WebKit::NetworkNotificationManager::incrementSilentPushCount(v8, a1 + 32, &v13);
    result = v13;
    v13 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1::operator()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>)::{lambda(unsigned int)#1},void,unsigned int>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34BEE90;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1::operator()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>)::{lambda(unsigned int)#1},void,unsigned int>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34BEE90;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::processPushMessage(PAL::SessionID,WebKit::WebPushMessage &&,WebCore::PushPermissionState,WTF::CompletionHandler<void ()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload> &&)> &&)::$_1::operator()(BOOL,std::optional<WebKit::WebPushMessage &&::NotificationPayload>)::{lambda(unsigned int)#1},void,unsigned int>::call(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char *v9;
  void *v10;
  WTF *v11;
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
  {
    WTF::String::utf8();
    if (v11)
      v9 = (char *)v11 + 16;
    else
      v9 = 0;
    *(_DWORD *)buf = 136643075;
    v13 = v9;
    v14 = 1024;
    v15 = a2;
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Push message for scope %{sensitive}s not handled properly; new silent push count: %u",
      buf,
      0x12u);
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v10);
      else
        --*(_DWORD *)v11;
    }
  }
  v5 = *(unsigned __int8 *)(a1 + 24);
  buf[0] = 0;
  v16 = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v6 + 16))(v6, v5, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v7);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasPushSubscriptionForTesting(PAL::SessionID,WTF::URL &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,std::ExceptionData> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BEEB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasPushSubscriptionForTesting(PAL::SessionID,WTF::URL &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,std::ExceptionData> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BEEB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::hasPushSubscriptionForTesting(PAL::SessionID,WTF::URL &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,std::ExceptionData> &&>::call(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a2 + 96))
    v2 = 1;
  else
    v2 = *(_BYTE *)(a2 + 88) == 0;
  v3 = !v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34BEEE0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34BEEE0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 152) + 128))(*(_QWORD *)(v3 + 152));
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WTF::VectorCopier<false,WebCore::UserContentURLPattern>::uninitializedCopy<WebCore::UserContentURLPattern>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  while (result != a2)
  {
    v3 = *(_DWORD **)result;
    if (*(_QWORD *)result)
      *v3 += 2;
    *(_QWORD *)a3 = v3;
    v4 = *(_DWORD **)(result + 8);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(a3 + 8) = v4;
    v5 = *(_DWORD **)(result + 16);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a3 + 16) = v5;
    *(_WORD *)(a3 + 24) = *(_WORD *)(result + 24);
    result += 32;
    a3 += 32;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, v14);
          WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v14 + 1), v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v14 + 1), v10);
        }
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = (_QWORD *)(a1 + 24 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (*v10);
  v11 = a1 + 24 * v9;
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 + 8, a2);
  *v10 = *a2;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  v12 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v11 + 8) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(v11 + 16) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(v11 + 20) = v12;
  return v10;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3) & v9;
  v11 = (_QWORD *)(v8 + 24 * v10);
  v12 = *v11;
  v13 = *a3;
  if (*v11)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v12 == v13)
      {
        v23 = *a2;
        if (*a2)
          v24 = *(_DWORD *)(v23 - 4);
        else
          v24 = 0;
        *(_QWORD *)a1 = v11;
        *(_QWORD *)(a1 + 8) = v23 + 24 * v24;
        *(_BYTE *)(a1 + 16) = 0;
        return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v11 + 1), a4);
      }
      if (v12 == -1)
        v21 = v11;
      v10 = (v10 + v22) & v9;
      v11 = (_QWORD *)(v8 + 24 * v10);
      v12 = *v11;
      ++v22;
    }
    while (*v11);
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = *a3;
      v11 = v21;
    }
  }
  *v11 = v13;
  result = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v11 + 1), a4);
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_11;
LABEL_27:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v11);
    v11 = (_QWORD *)result;
    v17 = *a2;
    if (*a2)
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    else
      LODWORD(v20) = 0;
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_27;
LABEL_11:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v17 + 24 * v20;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BEF08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BEF08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void WebKit::NetworkProcessPlatformStrategies::createBlobRegistry(void)::EmptyBlobRegistry::blobType(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v1 += 2;
  *a1 = v1;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createBlobRegistry(void)::EmptyBlobRegistry::blobSize()
{
  return 0;
}

uint64_t WebCore::BlobRegistry::blobRegistryImpl(WebCore::BlobRegistry *this)
{
  return 0;
}

void WebKit::NetworkProcessPlatformStrategies::createBlobRegistry(void)::EmptyBlobRegistry::~EmptyBlobRegistry(WebCore::BlobRegistry *a1)
{
  WebCore::BlobRegistry::~BlobRegistry(a1);
  JUMPOUT(0x19AEB936CLL);
}

void sub_1970E7F10(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  _DWORD *v12;

  if (v12[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  else
    --v12[2];
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970E8410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1970E84A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1970E85B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10)
{
  if (a10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970E8638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, unsigned int a10, uint64_t a11, char a12)
{
  if (a12)
  {
    if (a9)
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(a9, (WTF::StringImpl *)a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1970E8928(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970E8AD0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970E8B78(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970E8DDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

NSUInteger dumpCALayer(WTF::TextStream *a1, CALayer *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  double v6;
  double v7;
  double v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  double v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  double v15;
  double v16;
  double v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  double v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  _BYTE *v28;
  WTF::StringImpl *v29;
  double v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  CACornerMask v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  NSUInteger result;
  NSArray *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  CALayer *v48;
  BOOL v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  WTF::StringImpl *v54;
  _DWORD *v55;
  char v56[128];
  char __s[16];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  WTF::StringImpl *v65[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD __src[8];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  -[CALayer bounds](a2, "bounds");
  WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, (uint64_t)" width: ", 9, (uint64_t)" height: ", 10, __src, 0x5Du);
  WTF::TextStream::dumpProperty<WTF::String>(a1);
  v5 = *(WTF::StringImpl **)&__src[0];
  *(_QWORD *)&__src[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  -[CALayer position](a2, "position");
  if (v6 != 0.0 || (-[CALayer position](a2, "position"), v7 != 0.0))
  {
    -[CALayer position](a2, "position");
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, 93, __src, v8, v8);
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    v10 = *(WTF::StringImpl **)&__src[0];
    *(_QWORD *)&__src[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  -[CALayer zPosition](a2, "zPosition");
  if (v11 != 0.0)
  {
    -[CALayer zPosition](a2, "zPosition");
    *(_QWORD *)&__src[0] = v12;
    WTF::tryMakeString<double>(v65);
    if (!v65[0])
    {
      __break(0xC471u);
      JUMPOUT(0x1970E94E4);
    }
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    v14 = v65[0];
    v65[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  -[CALayer anchorPoint](a2, "anchorPoint");
  if (v15 != 0.5 || (-[CALayer anchorPoint](a2, "anchorPoint"), v16 != 0.5))
  {
    -[CALayer anchorPoint](a2, "anchorPoint");
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, 93, __src, v17, v17);
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    v19 = *(WTF::StringImpl **)&__src[0];
    *(_QWORD *)&__src[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  -[CALayer anchorPointZ](a2, "anchorPointZ");
  if (v20 != 0.0)
  {
    -[CALayer anchorPointZ](a2, "anchorPointZ");
    *(_QWORD *)&__src[0] = v21;
    WTF::tryMakeString<double>(v65);
    if (!v65[0])
    {
      __break(0xC471u);
      JUMPOUT(0x1970E94ECLL);
    }
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    v23 = v65[0];
    v65[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  -[CALayer opacity](a2, "opacity");
  if (v24 != 1.0)
  {
    -[CALayer opacity](a2, "opacity");
    WTF::numberToString();
    v25 = strlen(__s);
    v26 = v25;
    HIDWORD(v64) = v25;
    if ((v25 & 0x80000000) == 0)
    {
      v69 = v61;
      v70 = v62;
      v71 = v63;
      v72 = v64;
      *(_OWORD *)v65 = *(_OWORD *)__s;
      v66 = v58;
      v67 = v59;
      v68 = v60;
      if (!v25)
      {
        v27 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
LABEL_36:
        WTF::TextStream::dumpProperty<WTF::String>(a1);
        v54 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v29);
          else
            *(_DWORD *)v27 -= 2;
        }
        goto LABEL_40;
      }
      WTF::tryFastCompactMalloc((WTF *)(v25 + 20));
      v27 = (WTF::StringImpl *)v55;
      if (v55)
      {
        v28 = v55 + 5;
        *v55 = 2;
        *((_DWORD *)v27 + 1) = v26;
        *((_QWORD *)v27 + 1) = (char *)v27 + 20;
        *((_DWORD *)v27 + 4) = 4;
        __src[4] = v69;
        __src[5] = v70;
        __src[6] = v71;
        __src[7] = v72;
        __src[0] = *(_OWORD *)v65;
        __src[1] = v66;
        __src[2] = v67;
        __src[3] = v68;
        if (HIDWORD(v72))
        {
          if (HIDWORD(v72) == 1)
            *v28 = __src[0];
          else
            memcpy(v28, __src, HIDWORD(v72));
        }
        goto LABEL_36;
      }
    }
    v54 = 0;
    __break(0xC471u);
    goto LABEL_78;
  }
LABEL_40:
  -[CALayer cornerRadius](a2, "cornerRadius");
  if (v30 == 0.0)
    goto LABEL_46;
  -[CALayer cornerRadius](a2, "cornerRadius");
  *(_QWORD *)&__src[0] = v31;
  WTF::tryMakeString<double>(v65);
  if (!v65[0])
  {
    __break(0xC471u);
LABEL_78:
    JUMPOUT(0x1970E94D4);
  }
  WTF::TextStream::dumpProperty<WTF::String>(a1);
  v33 = v65[0];
  v65[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
LABEL_46:
  if (-[CALayer maskedCorners](a2, "maskedCorners") == 15)
    goto LABEL_60;
  v34 = -[CALayer maskedCorners](a2, "maskedCorners");
  LODWORD(v35) = 0;
  v36 = v34;
  do
  {
    v35 = (v35 + 1);
    v37 = v36 > 9;
    v36 /= 0xAuLL;
  }
  while (v37);
  if ((v35 & 0x80000000) != 0)
    goto LABEL_74;
  if ((_DWORD)v35)
  {
    WTF::tryFastCompactMalloc((WTF *)(v35 + 20));
    v38 = *(_QWORD *)&__src[0];
    if (*(_QWORD *)&__src[0])
    {
      v39 = 0;
      v40 = (void *)(*(_QWORD *)&__src[0] + 20);
      **(_DWORD **)&__src[0] = 2;
      *(_DWORD *)(v38 + 4) = v35;
      *(_QWORD *)(v38 + 8) = v38 + 20;
      *(_DWORD *)(v38 + 16) = 4;
      do
      {
        *((_BYTE *)&__src[1] + v39-- + 8) = (v34 % 0xA) | 0x30;
        v37 = v34 > 9;
        v34 /= 0xAuLL;
      }
      while (v37);
      if (v39 + 26 <= 25)
        memcpy(v40, (char *)&__src[1] + v39 + 9, -v39);
      goto LABEL_56;
    }
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x1970E94DCLL);
  }
  v38 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_56:
  v65[0] = (WTF::StringImpl *)v38;
  WTF::TextStream::dumpProperty<WTF::String>(a1);
  v42 = v65[0];
  v65[0] = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
LABEL_60:
  result = -[NSArray count](-[CALayer sublayers](a2, "sublayers"), "count");
  if (result)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v44 = -[CALayer sublayers](a2, "sublayers");
    v45 = -[NSArray countByEnumeratingWithState:objects:count:](v44, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v51;
      do
      {
        for (i = 0; i != v45; ++i)
        {
          if (*(_QWORD *)v51 != v46)
            objc_enumerationMutation(v44);
          v48 = *(CALayer **)(*((_QWORD *)&v50 + 1) + 8 * i);
          WTF::TextStream::startGroup(a1);
          dumpCALayer(a1, v48, v49);
          WTF::TextStream::endGroup(a1);
        }
        v45 = -[NSArray countByEnumeratingWithState:objects:count:](v44, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
      }
      while (v45);
    }
    return WTF::TextStream::endGroup(a1);
  }
  return result;
}

void sub_1970E94F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF::StringImpl *a53)
{
  if (a53)
  {
    if (*(_DWORD *)a53 == 2)
      WTF::StringImpl::destroy(a53, a2);
    else
      *(_DWORD *)a53 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970E97C0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,char a22)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&a22, a2);
  _Unwind_Resume(a1);
}

void sub_1970E9B70(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_1970E9C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970E9D60(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  const void *v3;
  WTF *v4;
  WTF *v5;

  v5 = v4;
  WTF::fastFree(v5, a2);
  _Block_release(v3);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  _Unwind_Resume(a1);
}

void sub_1970E9E20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970EA088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970EA138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1970EA428(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EA494(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970EA5A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970EA660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970EA768(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EA894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  const void *v16;
  WTF::StringImpl *v18;

  _Block_release(v16);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v18);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, v18);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EA9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EAAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EABFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EACDC(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970EAE90(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EAF20(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EAFDC(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EB090(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EB190(_Unwind_Exception *a1)
{
  unsigned int *v1;
  const void *v2;

  _Block_release(v2);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1970EB244(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EB534(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl **a21)
{
  if (a21)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a21, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970EB660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v21;

  _Block_object_dispose(&a14, 8);
  if (a20)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a20, v21);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__6(uint64_t a1, void *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  return result;
}

void sub_1970EB85C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  _Unwind_Resume(a1);
}

void sub_1970EBB6C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1970EBD38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1970EBE88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970EBF30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970EBFD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970EC094(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_1970EC6C0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a45, a2);
  _Unwind_Resume(a1);
}

void sub_1970EC8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1970ECA90(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970ECBB8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970ED0CC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970ED2B4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970ED434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  const void *v12;

  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void sub_1970ED5B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1970ED6DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void sub_1970EDB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  const void *v18;

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  _Block_release(0);
  _Block_release(v18);
  _Unwind_Resume(a1);
}

void sub_1970EDDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  const void *v20;
  uint64_t v22;
  WTF::StringImpl *v23;

  v22 = a20;
  a20 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Block_release(0);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v23);
  _Block_release(v20);
  _Unwind_Resume(a1);
}

void sub_1970EDFDC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970EE2E0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  _Unwind_Resume(a1);
}

void sub_1970EE6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_1970EE898(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970EEA2C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EEB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14)
{
  void *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Block_release(0);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v15);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v16);
  v18 = a14;
  a14 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EECC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12)
{
  const void *v12;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  _Block_release(v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v14);
  v16 = a12;
  a12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EEDA0(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EEE98(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EEF70(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EF034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EF124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EF214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EF304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EF3C0(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EF44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970EF578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  const void *v16;
  WTF::StringImpl *v18;

  _Block_release(v16);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v18);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, v18);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EF6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  const void *v16;
  WTF::StringImpl *v18;

  _Block_release(v16);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v18);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, v18);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EF7B8(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EF844(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EF8F0(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970EFBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,int a27,char a28,uint64_t a29,uint64_t a30,int a31,WTF::StringImpl *a32)
{
  const void *v32;

  _Block_release(v32);
  if (a26 != -1)
    ((void (*)(char *, char *))off_1E34BF138[a26])(&a22, &a23);
  if (a31 != -1)
    ((void (*)(char *, char *))off_1E34BF138[a31])(&a23, &a28);
  _Unwind_Resume(a1);
}

void sub_1970EFD1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970EFE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  const void *v12;
  WTF::StringImpl *v14;

  _Block_release(v12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970EFF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void sub_1970F005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970F0100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970F01B4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970F0318(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970F041C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970F052C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1970F07EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a43)
    WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&a13, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970F0A1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a43)
    WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&a13, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970F0B10(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970F0BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970F0D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970F0EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970F1008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970F1168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970F1228(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970F1380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  const void *v11;
  const void *v12;
  WTF::StringImpl *v14;

  _Block_release(v12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Block_release(v11);
  _Unwind_Resume(a1);
}

void sub_1970F15C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  const void *v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  _Block_release(v27);
  if (a27 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E34BF138[a27])(&a9, v28);
  a27 = -1;
  if (a23 != -1)
    ((void (*)(uint64_t *, char *))off_1E34BF138[a23])(&a9, &a20);
  a23 = -1;
  v31 = a10;
  a10 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = a15;
  a15 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

uint64_t WebKit::toWebsiteDataType(WebKit *this, NSString *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeCookies")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 1;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeFetchCache")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 0x8000;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeDiskCache")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 2;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeMemoryCache")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 4;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeOfflineWebApplicationCache")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 8;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeSessionStorage")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 16;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeLocalStorage")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 32;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeWebSQLDatabases")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 64;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeIndexedDBDatabases")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 128;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeServiceWorkerRegistrations")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 0x4000;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeFileSystem")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 0x80000;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("_WKWebsiteDataTypeHSTSCache")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 512;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeMediaKeys")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 256;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeHashSalt")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 0x10000;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("WKWebsiteDataTypeSearchFieldRecentSearches")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 1024;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("_WKWebsiteDataTypeResourceLoadStatistics")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 4096;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("_WKWebsiteDataTypeCredentials")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 0x2000;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("_WKWebsiteDataTypeAdClickAttributions")) & 1) != 0)
  {
    v3 = 0x100000000;
    v4 = 0x20000;
  }
  else if ((-[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("_WKWebsiteDataTypePrivateClickMeasurements")) & 1) != 0)
  {
    v4 = 0x20000;
    v3 = 0x100000000;
  }
  else
  {
    v5 = -[WebKit isEqualToString:](this, "isEqualToString:", CFSTR("_WKWebsiteDataTypeAlternativeServices"));
    v3 = 0x100000000;
    if (!v5)
      v3 = 0;
    v4 = 0x40000;
  }
  return v4 | v3;
}

void sub_1970F1A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970F1ADC(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970F1BB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WindowFeatures::wantsPopup(WebCore::WindowFeatures *this)
{
  if (!*(_BYTE *)this
    && !*((_BYTE *)this + 8)
    && !*((_BYTE *)this + 16)
    && !*((_BYTE *)this + 24)
    && !*((_BYTE *)this + 32)
    && !*((_BYTE *)this + 37)
    && !*((_BYTE *)this + 39)
    && !*((_BYTE *)this + 41)
    && !*((_BYTE *)this + 43)
    && !*((_BYTE *)this + 45)
    && !*((_BYTE *)this + 47)
    && !*((_BYTE *)this + 49))
  {
    return 0;
  }
  if (*((_BYTE *)this + 37))
    return *((_BYTE *)this + 36) != 0;
  if ((*((_BYTE *)this + 45) && *((_BYTE *)this + 44) || *((_BYTE *)this + 43) && *((_BYTE *)this + 42))
    && *((_BYTE *)this + 39)
    && *((_BYTE *)this + 38)
    && (!*((_BYTE *)this + 49) || *((_BYTE *)this + 48))
    && *((_BYTE *)this + 47)
    && *((_BYTE *)this + 46)
    && *((_BYTE *)this + 41))
  {
    return *((_BYTE *)this + 40) == 0;
  }
  return 1;
}

uint64_t WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 96 * v4 - 15);
      v6 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_DWORD *)(a2 + 12);
    if (v6 != v7)
    {
      v8 = (_OWORD *)(*(_QWORD *)a1 + 96 * v6);
      v9 = (_OWORD *)(*(_QWORD *)a2 + 96 * v6);
      v10 = 96 * v7 - 96 * v6;
      do
      {
        v11 = v9[1];
        *v8 = *v9;
        v8[1] = v11;
        v12 = v9[2];
        v13 = v9[3];
        v14 = v9[5];
        v8[4] = v9[4];
        v8[5] = v14;
        v8[2] = v12;
        v8[3] = v13;
        v8 += 6;
        v9 += 6;
        v10 -= 96;
      }
      while (v10);
      v6 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v6;
  }
  return a1;
}

void sub_1970F261C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,WTF *a21,int a22)
{
  if (a19)
    WTF::fastFree(a19, a2);
  if (a21)
    WTF::fastFree(a21, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970F2930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  v2 = result;
  if (*(unsigned __int8 *)(result + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      v3 = *a2;
      *a2 = 0;
      v4 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      v5 = *((_BYTE *)a2 + 20);
      *((_BYTE *)a2 + 20) = 0;
      result = *(_QWORD *)result;
      *(_QWORD *)v2 = v3;
      v6 = a2[1];
      a2[1] = 0;
      v7 = (WTF::StringImpl *)*(unsigned int *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = v6;
      *(_DWORD *)(v2 + 16) = v4;
      *(_BYTE *)(v2 + 20) = v5;
      if (result)
        return WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)result, v7);
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    result = *(_QWORD *)result;
    if (*(_QWORD *)v2)
      result = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)result, (WTF::StringImpl *)*(unsigned int *)(v2 + 8));
    *(_BYTE *)(v2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 13) = 0;
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 16) = v8;
    LOBYTE(v8) = *((_BYTE *)a2 + 20);
    *((_BYTE *)a2 + 20) = 0;
    *(_BYTE *)(result + 20) = v8;
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

uint64_t WTF::TextStream::dumpProperty<WTF::String>(WTF::TextStream *a1)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a1);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unsigned __int8 a10)
{
  uint64_t result;
  uint64_t v12[2];
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  v12[0] = a7;
  v12[1] = a8;
  result = WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v15, v14, v13, v12, a9, &a10);
  if (!*a9)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X4>, uint64_t *a4@<X6>, _QWORD *a5@<X8>, unsigned __int8 *a6)
{
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29[124];
  int v30;
  char v31[124];
  int v32;
  char v33[124];
  int v34;
  char __s[124];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = a1[1];
  v8 = v7 != 0;
  v9 = v7 - 1;
  if (!v8)
    v9 = 0;
  v27 = *a1;
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1970F2EC4);
  }
  v28 = v9;
  WTF::numberToString();
  v36 = strlen(__s);
  v13 = a2[1];
  v8 = v13 != 0;
  v14 = v13 - 1;
  if (!v8)
    v14 = 0;
  v25 = *a2;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1970F2EE4);
  }
  v26 = v14;
  WTF::numberToString();
  v34 = strlen(v33);
  v15 = a3[1];
  v8 = v15 != 0;
  v16 = v15 - 1;
  if (!v8)
    v16 = 0;
  v23 = *a3;
  if (v16 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1970F2F04);
  }
  v24 = v16;
  WTF::numberToString();
  v32 = strlen(v31);
  v17 = a4[1];
  v8 = v17 != 0;
  v18 = v17 - 1;
  if (!v8)
    v18 = 0;
  v21 = *a4;
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1970F2F24);
  }
  v22 = v18;
  WTF::numberToString();
  v30 = strlen(v29);
  v20 = *a6;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v27, (uint64_t)__s, (uint64_t)&v25, (uint64_t)v33, (uint64_t)&v23, (uint64_t)v31, (uint64_t)&v21, (uint64_t)v29, a5, &v20);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unsigned __int8 *a10)
{
  uint64_t result;
  uint64_t v20;
  int8x16_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int8x16_t *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int8x16_t *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int8x16_t *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[4];
  unsigned int v51;
  __int128 v52[8];
  __int128 v53[8];
  __int128 v54[8];
  _OWORD v55[8];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(*(_DWORD *)(a1 + 8), *(_DWORD *)(a2 + 124), *(unsigned int *)(a3 + 8), *(_DWORD *)(a4 + 124), *(_DWORD *)(a5 + 8), *(_DWORD *)(a6 + 124), *(_DWORD *)(a7 + 8), *(_DWORD *)(a8 + 124), (uint64_t)v50, 1);
  if (v50[0])
  {
    v20 = 0;
  }
  else
  {
    v21 = *(int8x16_t **)a1;
    v22 = *(_QWORD *)(a1 + 8);
    v23 = *(_OWORD *)(a2 + 80);
    v55[4] = *(_OWORD *)(a2 + 64);
    v55[5] = v23;
    v24 = *(_OWORD *)(a2 + 112);
    v55[6] = *(_OWORD *)(a2 + 96);
    v55[7] = v24;
    v25 = *(_OWORD *)(a2 + 16);
    v55[0] = *(_OWORD *)a2;
    v55[1] = v25;
    v26 = *(_OWORD *)(a2 + 48);
    v55[2] = *(_OWORD *)(a2 + 32);
    v55[3] = v26;
    v27 = *(int8x16_t **)a3;
    v28 = *(_QWORD *)(a3 + 8);
    v29 = *(_OWORD *)(a4 + 112);
    v54[6] = *(_OWORD *)(a4 + 96);
    v54[7] = v29;
    v30 = *(_OWORD *)(a4 + 80);
    v54[4] = *(_OWORD *)(a4 + 64);
    v54[5] = v30;
    v31 = *(_OWORD *)(a4 + 48);
    v54[2] = *(_OWORD *)(a4 + 32);
    v54[3] = v31;
    v32 = *(_OWORD *)(a4 + 16);
    v54[0] = *(_OWORD *)a4;
    v54[1] = v32;
    v33 = *(int8x16_t **)a5;
    v34 = *(_QWORD *)(a5 + 8);
    v35 = *(_OWORD *)a6;
    v36 = *(_OWORD *)(a6 + 16);
    v37 = *(_OWORD *)(a6 + 48);
    v53[2] = *(_OWORD *)(a6 + 32);
    v53[3] = v37;
    v53[0] = v35;
    v53[1] = v36;
    v38 = *(_OWORD *)(a6 + 64);
    v39 = *(_OWORD *)(a6 + 80);
    v40 = *(_OWORD *)(a6 + 112);
    v53[6] = *(_OWORD *)(a6 + 96);
    v53[7] = v40;
    v53[4] = v38;
    v53[5] = v39;
    v41 = *(int8x16_t **)a7;
    v42 = *(_QWORD *)(a7 + 8);
    v43 = *(_OWORD *)a8;
    v44 = *(_OWORD *)(a8 + 16);
    v45 = *(_OWORD *)(a8 + 48);
    v52[2] = *(_OWORD *)(a8 + 32);
    v52[3] = v45;
    v52[0] = v43;
    v52[1] = v44;
    v46 = *(_OWORD *)(a8 + 64);
    v47 = *(_OWORD *)(a8 + 80);
    v48 = *(_OWORD *)(a8 + 112);
    v52[6] = *(_OWORD *)(a8 + 96);
    v52[7] = v48;
    v52[4] = v46;
    v52[5] = v47;
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v51, 1, v21, v22, v55, v27, v28, v54, &v49, v33, v34, v53, v41, v42, v52, *a10);
    v20 = v49;
  }
  *a9 = v20;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, _OWORD *a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, __int128 *a8@<X7>, _QWORD *a9@<X8>, int8x16_t *a10, uint64_t a11, __int128 *a12, int8x16_t *a13, uint64_t a14, __int128 *a15, unsigned __int8 a16)
{
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD *v67;
  uint64_t v76;
  __int128 v77[8];
  __int128 v78[8];
  __int128 v79[8];
  _OWORD v80[8];
  __int128 v81[8];
  __int128 v82[8];
  __int128 v83[8];
  _OWORD v84[8];
  uint64_t v85;

  v18 = result;
  v85 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        v67 = a9;
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v20 = v76;
        if (v76)
        {
          *(_DWORD *)v76 = 2;
          *(_DWORD *)(v76 + 4) = v18;
          *(_QWORD *)(v76 + 8) = v76 + 20;
          *(_DWORD *)(v76 + 16) = 4;
          v21 = a5[3];
          v84[2] = a5[2];
          v84[3] = v21;
          v22 = a5[5];
          v84[4] = a5[4];
          v84[5] = v22;
          v23 = a5[7];
          v84[6] = a5[6];
          v84[7] = v23;
          v24 = a5[1];
          v84[0] = *a5;
          v84[1] = v24;
          v25 = *a8;
          v26 = a8[1];
          v27 = a8[3];
          v83[2] = a8[2];
          v83[3] = v27;
          v83[0] = v25;
          v83[1] = v26;
          v28 = a8[4];
          v29 = a8[5];
          v30 = a8[7];
          v83[6] = a8[6];
          v83[7] = v30;
          v83[4] = v28;
          v83[5] = v29;
          v31 = *a12;
          v32 = a12[1];
          v33 = a12[3];
          v82[2] = a12[2];
          v82[3] = v33;
          v82[0] = v31;
          v82[1] = v32;
          v34 = a12[4];
          v35 = a12[5];
          v36 = a12[7];
          v82[6] = a12[6];
          v82[7] = v36;
          v82[4] = v34;
          v82[5] = v35;
          v37 = *a15;
          v38 = a15[1];
          v39 = a15[3];
          v81[2] = a15[2];
          v81[3] = v39;
          v81[0] = v37;
          v81[1] = v38;
          v40 = a15[4];
          v41 = a15[5];
          v42 = a15[7];
          v81[6] = a15[6];
          v81[7] = v42;
          v81[4] = v40;
          v81[5] = v41;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((_BYTE *)(v76 + 20), a3, a4, v84, a6, a7, v83, v19, a10, a11, v82, a13, a14, v81, a16);
        }
        a9 = v67;
        goto LABEL_14;
      }
LABEL_9:
      v20 = 0;
      goto LABEL_14;
    }
LABEL_10:
    v20 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_14;
  }
  if (!(_DWORD)result)
    goto LABEL_10;
  if (result > 0x7FFFFFEF)
    goto LABEL_9;
  v43 = a9;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v20 = v76;
  if (v76)
  {
    *(_DWORD *)v76 = 2;
    *(_DWORD *)(v76 + 4) = v18;
    *(_QWORD *)(v76 + 8) = v76 + 20;
    *(_DWORD *)(v76 + 16) = 0;
    v45 = a5[3];
    v80[2] = a5[2];
    v80[3] = v45;
    v46 = a5[5];
    v80[4] = a5[4];
    v80[5] = v46;
    v47 = a5[7];
    v80[6] = a5[6];
    v80[7] = v47;
    v48 = a5[1];
    v80[0] = *a5;
    v80[1] = v48;
    v49 = *a8;
    v50 = a8[1];
    v51 = a8[3];
    v79[2] = a8[2];
    v79[3] = v51;
    v79[0] = v49;
    v79[1] = v50;
    v52 = a8[4];
    v53 = a8[5];
    v54 = a8[7];
    v79[6] = a8[6];
    v79[7] = v54;
    v79[4] = v52;
    v79[5] = v53;
    v55 = *a12;
    v56 = a12[1];
    v57 = a12[3];
    v78[2] = a12[2];
    v78[3] = v57;
    v78[0] = v55;
    v78[1] = v56;
    v58 = a12[4];
    v59 = a12[5];
    v60 = a12[7];
    v78[6] = a12[6];
    v78[7] = v60;
    v78[4] = v58;
    v78[5] = v59;
    v61 = *a15;
    v62 = a15[1];
    v63 = a15[3];
    v77[2] = a15[2];
    v77[3] = v63;
    v77[0] = v61;
    v77[1] = v62;
    v64 = a15[4];
    v65 = a15[5];
    v66 = a15[7];
    v77[6] = a15[6];
    v77[7] = v66;
    v77[4] = v64;
    v77[5] = v65;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((char *)(v76 + 20), a3, a4, v80, a6, a7, v79, v44, a10, a11, v78, a13, a14, v77, a16);
  }
  a9 = v43;
LABEL_14:
  *a9 = v20;
  return result;
}

void sub_1970F339C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, _OWORD *a4, _BYTE *__src, unsigned int a6, __int128 *a7, int a8, _BYTE *a9, uint64_t a10, __int128 *a11, _BYTE *a12, uint64_t a13, __int128 *a14, uint64_t a15)
{
  _BYTE *v20;
  __int128 v21;
  _BYTE *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD __srca[7];
  size_t __n[2];
  _OWORD v59[7];
  size_t v60[2];
  _OWORD v61[7];
  size_t v62[2];
  _OWORD v63[7];
  __int128 v64;
  uint64_t v65;

  v20 = __dst;
  v65 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      __dst = memcpy(__dst, a2, a3);
  }
  v21 = a4[5];
  v22 = &v20[a3];
  __srca[4] = a4[4];
  __srca[5] = v21;
  v23 = a4[7];
  __srca[6] = a4[6];
  *(_OWORD *)__n = v23;
  v24 = a4[1];
  __srca[0] = *a4;
  __srca[1] = v24;
  v25 = a4[3];
  __srca[2] = a4[2];
  __srca[3] = v25;
  v51 = a7[2];
  v52 = a7[3];
  v49 = *a7;
  v50 = a7[1];
  v55 = a7[6];
  v56 = a7[7];
  v53 = a7[4];
  v54 = a7[5];
  v43 = a11[2];
  v44 = a11[3];
  v41 = *a11;
  v42 = a11[1];
  v47 = a11[6];
  v48 = a11[7];
  v45 = a11[4];
  v46 = a11[5];
  v35 = a14[2];
  v36 = a14[3];
  v33 = *a14;
  v34 = a14[1];
  v39 = a14[6];
  v40 = a14[7];
  v37 = a14[4];
  v38 = a14[5];
  v26 = HIDWORD(__n[1]);
  if (HIDWORD(__n[1]))
  {
    if (HIDWORD(__n[1]) == 1)
      *v22 = __srca[0];
    else
      __dst = memcpy(v22, __srca, HIDWORD(__n[1]));
  }
  v27 = &v22[v26];
  if (a6)
  {
    if (a6 == 1)
      *v27 = *__src;
    else
      __dst = memcpy(v27, __src, a6);
  }
  v28 = &v27[a6];
  v59[4] = v53;
  v59[5] = v54;
  v59[6] = v55;
  *(_OWORD *)v60 = v56;
  v59[0] = v49;
  v59[1] = v50;
  v59[2] = v51;
  v59[3] = v52;
  if (HIDWORD(v56))
  {
    if (HIDWORD(v56) == 1)
      *v28 = v59[0];
    else
      __dst = memcpy(v28, v59, HIDWORD(v56));
  }
  v29 = &v28[HIDWORD(v56)];
  if ((_DWORD)a10)
  {
    if ((_DWORD)a10 == 1)
      *v29 = *a9;
    else
      __dst = memcpy(v29, a9, a10);
  }
  v30 = &v29[a10];
  v61[4] = v45;
  v61[5] = v46;
  v61[6] = v47;
  *(_OWORD *)v62 = v48;
  v61[0] = v41;
  v61[1] = v42;
  v61[2] = v43;
  v61[3] = v44;
  if (HIDWORD(v48))
  {
    if (HIDWORD(v48) == 1)
      *v30 = v61[0];
    else
      __dst = memcpy(v30, v61, HIDWORD(v48));
  }
  v31 = &v30[HIDWORD(v48)];
  if ((_DWORD)a13)
  {
    if ((_DWORD)a13 == 1)
      *v31 = *a12;
    else
      __dst = memcpy(v31, a12, a13);
  }
  v32 = &v31[a13];
  v63[4] = v37;
  v63[5] = v38;
  v63[6] = v39;
  v64 = v40;
  v63[0] = v33;
  v63[1] = v34;
  v63[2] = v35;
  v63[3] = v36;
  if (HIDWORD(v40))
  {
    if (HIDWORD(v40) == 1)
      *v32 = v63[0];
    else
      __dst = memcpy(v32, v63, HIDWORD(v64));
  }
  v32[HIDWORD(v40)] = a15;
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int a3, _OWORD *a4, int8x16_t *a5, int a6, __int128 *a7, uint64_t a8, int8x16_t *a9, int a10, __int128 *a11, int8x16_t *a12, int a13, __int128 *a14, char a15)
{
  char *v15;
  char *v16;
  __int128 v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  int8x16_t *v31;
  __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  char *v41;
  __int128 v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;
  char *v50;
  char *v51;
  int8x16_t *v52;
  __int128 v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int16 v60;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[7];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _OWORD v128[8];
  __int128 v129[8];
  _OWORD v130[8];
  uint64_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;
  int8x16x2_t v138;
  int8x16x2_t v139;
  int8x16x2_t v140;
  int8x16x2_t v141;
  int8x16x2_t v142;
  int8x16x2_t v143;

  v131 = *MEMORY[0x1E0C80C00];
  v15 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v16 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v17 = 0uLL;
    do
    {
      v132.val[0] = *a2;
      v18 = a2[1];
      v136.val[0] = a2[2];
      v19 = a2[3];
      a2 += 4;
      v20 = v19;
      v136.val[1] = 0uLL;
      v140.val[0] = v18;
      v132.val[1] = 0uLL;
      v21 = a1;
      vst2q_s8(v21, v132);
      v21 += 32;
      v140.val[1] = 0uLL;
      vst2q_s8(v21, v140);
      v22 = a1 + 64;
      vst2q_s8(v22, v136);
      v23 = a1 + 96;
      vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
      a1 += 128;
    }
    while (a1 != v16);
    a1 = v16;
  }
  while (a1 != v15)
  {
    v24 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v24;
    a1 += 2;
  }
  v25 = a4[5];
  v86[4] = a4[4];
  v86[5] = v25;
  v26 = a4[7];
  v86[6] = a4[6];
  v87 = v26;
  v27 = a4[1];
  v86[0] = *a4;
  v86[1] = v27;
  v28 = a4[3];
  v86[2] = a4[2];
  v86[3] = v28;
  v80 = a7[2];
  v81 = a7[3];
  v78 = *a7;
  v79 = a7[1];
  v84 = a7[6];
  v85 = a7[7];
  v82 = a7[4];
  v83 = a7[5];
  v72 = a11[2];
  v73 = a11[3];
  v70 = *a11;
  v71 = a11[1];
  v76 = a11[6];
  v77 = a11[7];
  v74 = a11[4];
  v75 = a11[5];
  v64 = a14[2];
  v65 = a14[3];
  v62 = *a14;
  v63 = a14[1];
  v68 = a14[6];
  v69 = a14[7];
  v29 = &v15[2 * HIDWORD(v87)];
  v66 = a14[4];
  v67 = a14[5];
  if (HIDWORD(v87) < 0x40)
  {
    v31 = (int8x16_t *)v86;
  }
  else
  {
    v30 = &v15[2 * (HIDWORD(v87) & 0xFFFFFFC0)];
    v31 = (int8x16_t *)v86;
    v32 = 0uLL;
    do
    {
      v133.val[0] = *v31;
      v33 = v31[1];
      v137.val[0] = v31[2];
      v34 = v31[3];
      v31 += 4;
      v35 = v34;
      v137.val[1] = 0uLL;
      v141.val[0] = v33;
      v133.val[1] = 0uLL;
      v36 = v15;
      vst2q_s8(v36, v133);
      v36 += 32;
      v141.val[1] = 0uLL;
      vst2q_s8(v36, v141);
      v37 = v15 + 64;
      vst2q_s8(v37, v137);
      v38 = v15 + 96;
      vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
      v15 += 128;
    }
    while (v15 != v30);
    v15 = v30;
  }
  while (v15 != v29)
  {
    v39 = v31->u8[0];
    v31 = (int8x16_t *)((char *)v31 + 1);
    *(_WORD *)v15 = v39;
    v15 += 2;
  }
  v108 = v82;
  v109 = v83;
  v110 = v84;
  v111 = v85;
  v104 = v78;
  v105 = v79;
  v106 = v80;
  v107 = v81;
  v98 = v72;
  v99 = v73;
  v96 = v70;
  v97 = v71;
  v102 = v76;
  v103 = v77;
  v100 = v74;
  v101 = v75;
  v90 = v64;
  v91 = v65;
  v88 = v62;
  v89 = v63;
  v94 = v68;
  v95 = v69;
  v40 = &v29[2 * a6];
  v92 = v66;
  v93 = v67;
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v41 = &v29[2 * (a6 & 0xFFFFFFC0)];
    v42 = 0uLL;
    do
    {
      v134.val[0] = *a5;
      v43 = a5[1];
      v138.val[0] = a5[2];
      v44 = a5[3];
      a5 += 4;
      v45 = v44;
      v138.val[1] = 0uLL;
      v142.val[0] = v43;
      v134.val[1] = 0uLL;
      v46 = v29;
      vst2q_s8(v46, v134);
      v46 += 32;
      v142.val[1] = 0uLL;
      vst2q_s8(v46, v142);
      v47 = v29 + 64;
      vst2q_s8(v47, v138);
      v48 = v29 + 96;
      vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
      v29 += 128;
    }
    while (v29 != v41);
    v29 = v41;
  }
  while (v29 != v40)
  {
    v49 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v29 = v49;
    v29 += 2;
  }
  v128[4] = v108;
  v128[5] = v109;
  v128[6] = v110;
  v128[7] = v111;
  v128[0] = v104;
  v128[1] = v105;
  v128[2] = v106;
  v128[3] = v107;
  v123 = v99;
  v122 = v98;
  v121 = v97;
  v120 = v96;
  v127 = v103;
  v126 = v102;
  v125 = v101;
  v124 = v100;
  v114 = v90;
  v115 = v91;
  v112 = v88;
  v113 = v89;
  v118 = v94;
  v119 = v95;
  v50 = &v40[2 * HIDWORD(v111)];
  v116 = v92;
  v117 = v93;
  if (HIDWORD(v111) < 0x40)
  {
    v52 = (int8x16_t *)v128;
  }
  else
  {
    v51 = &v40[2 * (HIDWORD(v111) & 0xFFFFFFC0)];
    v52 = (int8x16_t *)v128;
    v53 = 0uLL;
    do
    {
      v135.val[0] = *v52;
      v54 = v52[1];
      v139.val[0] = v52[2];
      v55 = v52[3];
      v52 += 4;
      v56 = v55;
      v139.val[1] = 0uLL;
      v143.val[0] = v54;
      v135.val[1] = 0uLL;
      v57 = v40;
      vst2q_s8(v57, v135);
      v57 += 32;
      v143.val[1] = 0uLL;
      vst2q_s8(v57, v143);
      v58 = v40 + 64;
      vst2q_s8(v58, v139);
      v59 = v40 + 96;
      vst2q_s8(v59, *(int8x16x2_t *)(&v53 - 1));
      v40 += 128;
    }
    while (v40 != v51);
    v40 = v51;
  }
  while (v40 != v50)
  {
    v60 = v52->u8[0];
    v52 = (int8x16_t *)((char *)v52 + 1);
    *(_WORD *)v40 = v60;
    v40 += 2;
  }
  v130[4] = v124;
  v130[5] = v125;
  v130[6] = v126;
  v130[7] = v127;
  v130[0] = v120;
  v130[1] = v121;
  v130[2] = v122;
  v130[3] = v123;
  v129[3] = v115;
  v129[2] = v114;
  v129[1] = v113;
  v129[0] = v112;
  v129[7] = v119;
  v129[6] = v118;
  v129[5] = v117;
  v129[4] = v116;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(v50, a9, a10, v130, a12, a13, v129, a15);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, _OWORD *a4, int8x16_t *a5, int a6, __int128 *a7, char a8)
{
  char *v8;
  char *v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  int8x16_t *v24;
  __int128 v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  char *v43;
  char *v44;
  int8x16_t *v45;
  __int128 v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[7];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[8];
  uint64_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;
  int8x16x2_t v82;
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;

  v73 = *MEMORY[0x1E0C80C00];
  v8 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v9 = &result[2 * (a3 & 0xFFFFFFC0)];
    v10 = 0uLL;
    do
    {
      v74.val[0] = *a2;
      v11 = a2[1];
      v78.val[0] = a2[2];
      v12 = a2[3];
      a2 += 4;
      v13 = v12;
      v78.val[1] = 0uLL;
      v82.val[0] = v11;
      v74.val[1] = 0uLL;
      v14 = result;
      vst2q_s8(v14, v74);
      v14 += 32;
      v82.val[1] = 0uLL;
      vst2q_s8(v14, v82);
      v15 = result + 64;
      vst2q_s8(v15, v78);
      v16 = result + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      result += 128;
    }
    while (result != v9);
    result = v9;
  }
  while (result != v8)
  {
    v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v17;
    result += 2;
  }
  v18 = a4[5];
  v62[4] = a4[4];
  v62[5] = v18;
  v19 = a4[7];
  v62[6] = a4[6];
  v63 = v19;
  v20 = a4[1];
  v62[0] = *a4;
  v62[1] = v20;
  v21 = a4[3];
  v62[2] = a4[2];
  v62[3] = v21;
  v56 = a7[2];
  v57 = a7[3];
  v54 = *a7;
  v55 = a7[1];
  v60 = a7[6];
  v61 = a7[7];
  v22 = &v8[2 * HIDWORD(v63)];
  v58 = a7[4];
  v59 = a7[5];
  if (HIDWORD(v63) < 0x40)
  {
    v24 = (int8x16_t *)v62;
  }
  else
  {
    v23 = &v8[2 * (HIDWORD(v63) & 0xFFFFFFC0)];
    v24 = (int8x16_t *)v62;
    v25 = 0uLL;
    do
    {
      v75.val[0] = *v24;
      v26 = v24[1];
      v79.val[0] = v24[2];
      v27 = v24[3];
      v24 += 4;
      v28 = v27;
      v79.val[1] = 0uLL;
      v83.val[0] = v26;
      v75.val[1] = 0uLL;
      v29 = v8;
      vst2q_s8(v29, v75);
      v29 += 32;
      v83.val[1] = 0uLL;
      vst2q_s8(v29, v83);
      v30 = v8 + 64;
      vst2q_s8(v30, v79);
      v31 = v8 + 96;
      vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
      v8 += 128;
    }
    while (v8 != v23);
    v8 = v23;
  }
  while (v8 != v22)
  {
    v32 = v24->u8[0];
    v24 = (int8x16_t *)((char *)v24 + 1);
    *(_WORD *)v8 = v32;
    v8 += 2;
  }
  v68 = v58;
  v69 = v59;
  v70 = v60;
  v71 = v61;
  v64 = v54;
  v65 = v55;
  v33 = &v22[2 * a6];
  v66 = v56;
  v67 = v57;
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v34 = &v22[2 * (a6 & 0xFFFFFFC0)];
    v35 = 0uLL;
    do
    {
      v76.val[0] = *a5;
      v36 = a5[1];
      v80.val[0] = a5[2];
      v37 = a5[3];
      a5 += 4;
      v38 = v37;
      v80.val[1] = 0uLL;
      v84.val[0] = v36;
      v76.val[1] = 0uLL;
      v39 = v22;
      vst2q_s8(v39, v76);
      v39 += 32;
      v84.val[1] = 0uLL;
      vst2q_s8(v39, v84);
      v40 = v22 + 64;
      vst2q_s8(v40, v80);
      v41 = v22 + 96;
      vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
      v22 += 128;
    }
    while (v22 != v34);
    v22 = v34;
  }
  while (v22 != v33)
  {
    v42 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v22 = v42;
    v22 += 2;
  }
  v72[4] = v68;
  v72[5] = v69;
  v72[6] = v70;
  v72[7] = v71;
  v72[0] = v64;
  v72[1] = v65;
  v72[2] = v66;
  v72[3] = v67;
  v43 = &v33[2 * HIDWORD(v71)];
  if (HIDWORD(v71) < 0x40)
  {
    v45 = (int8x16_t *)v72;
  }
  else
  {
    v44 = &v33[2 * (HIDWORD(v71) & 0xFFFFFFC0)];
    v45 = (int8x16_t *)v72;
    v46 = 0uLL;
    do
    {
      v77.val[0] = *v45;
      v47 = v45[1];
      v81.val[0] = v45[2];
      v48 = v45[3];
      v45 += 4;
      v49 = v48;
      v81.val[1] = 0uLL;
      v85.val[0] = v47;
      v77.val[1] = 0uLL;
      v50 = v33;
      vst2q_s8(v50, v77);
      v50 += 32;
      v85.val[1] = 0uLL;
      vst2q_s8(v50, v85);
      v51 = v33 + 64;
      vst2q_s8(v51, v81);
      v52 = v33 + 96;
      vst2q_s8(v52, *(int8x16x2_t *)(&v46 - 1));
      v33 += 128;
    }
    while (v33 != v44);
    v33 = v44;
  }
  while (v33 != v43)
  {
    v53 = v45->u8[0];
    v45 = (int8x16_t *)((char *)v45 + 1);
    *(_WORD *)v33 = v53;
    v33 += 2;
  }
  *(_WORD *)v43 = a8;
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t result;
  char v10;
  double v11;
  double v12;
  uint64_t v13[2];
  uint64_t v14[2];

  v14[0] = a1;
  v14[1] = a2;
  v13[0] = a3;
  v13[1] = a4;
  v11 = a8;
  v12 = a7;
  v10 = a5;
  result = WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v14, v13, &v10, a6);
  if (!*a6)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, char *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v10;
  unint64_t v11;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18[124];
  int v19;
  char __s[124];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = v5 != 0;
  v7 = v5 - 1;
  if (!v6)
    v7 = 0;
  v16 = *a1;
  if (v7 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1970F3ED8);
  }
  v17 = v7;
  WTF::numberToString();
  v21 = strlen(__s);
  v10 = a2[1];
  v6 = v10 != 0;
  v11 = v10 - 1;
  if (!v6)
    v11 = 0;
  v14 = *a2;
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1970F3EF8);
  }
  v15 = v11;
  WTF::numberToString();
  v19 = strlen(v18);
  v13 = *a3;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v16, (uint64_t)__s, (uint64_t)&v14, (uint64_t)v18, &v13, a4);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, _QWORD *a6@<X8>)
{
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  int8x16_t *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int8x16_t *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32[8];
  __int128 v33[8];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a4 + 124);
  if (v7 < 0)
    goto LABEL_20;
  v8 = *(_DWORD *)(a3 + 8);
  v9 = v7 + 1;
  v10 = __OFADD__(v7, 1);
  if (v8 < 0 || v10)
    goto LABEL_20;
  v11 = *(_DWORD *)(a2 + 124);
  v12 = __OFADD__(v8, v9);
  v13 = v8 + v9;
  v14 = v12;
  if (v11 < 0
    || v14
    || ((v15 = result, v16 = *(_DWORD *)(result + 8), v12 = __OFADD__(v11, v13), v17 = v11 + v13, !v12)
      ? (v18 = 0)
      : (v18 = 1),
        v16 < 0 || (v18 & 1) != 0 || (result = (v16 + v17), __OFADD__(v16, v17))))
  {
LABEL_20:
    *a6 = 0;
  }
  else
  {
    v20 = *(int8x16_t **)v15;
    v19 = *(_QWORD *)(v15 + 8);
    v21 = *(_OWORD *)(a2 + 80);
    v33[4] = *(_OWORD *)(a2 + 64);
    v33[5] = v21;
    v22 = *(_OWORD *)(a2 + 112);
    v33[6] = *(_OWORD *)(a2 + 96);
    v33[7] = v22;
    v23 = *(_OWORD *)(a2 + 16);
    v33[0] = *(_OWORD *)a2;
    v33[1] = v23;
    v24 = *(_OWORD *)(a2 + 48);
    v33[2] = *(_OWORD *)(a2 + 32);
    v33[3] = v24;
    v25 = *(int8x16_t **)a3;
    v26 = *(_QWORD *)(a3 + 8);
    v27 = *(_OWORD *)(a4 + 112);
    v32[6] = *(_OWORD *)(a4 + 96);
    v32[7] = v27;
    v28 = *(_OWORD *)(a4 + 80);
    v32[4] = *(_OWORD *)(a4 + 64);
    v32[5] = v28;
    v29 = *(_OWORD *)(a4 + 48);
    v32[2] = *(_OWORD *)(a4 + 32);
    v32[3] = v29;
    v30 = *(_OWORD *)(a4 + 16);
    v32[0] = *(_OWORD *)a4;
    v32[1] = v30;
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(result, 1, v20, v19, v33, v25, v26, v32, &v31, *a5);
    *a6 = v31;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, __int128 *a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, __int128 *a8@<X7>, _QWORD *a9@<X8>, char a10)
{
  int v16;
  uint64_t v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45[8];
  _OWORD v46[8];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD __src[7];
  size_t __n[2];
  _OWORD v65[7];
  __int128 v66;
  uint64_t v67;

  v16 = result;
  v67 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v18 = *(_QWORD *)&v65[0];
        if (*(_QWORD *)&v65[0])
        {
          v19 = (_BYTE *)(*(_QWORD *)&v65[0] + 20);
          **(_DWORD **)&v65[0] = 2;
          *(_DWORD *)(v18 + 4) = v16;
          *(_QWORD *)(v18 + 8) = v18 + 20;
          *(_DWORD *)(v18 + 16) = 4;
          v20 = a5[5];
          v59 = a5[4];
          v60 = v20;
          v21 = a5[7];
          v61 = a5[6];
          v62 = v21;
          v22 = a5[1];
          v55 = *a5;
          v56 = v22;
          v23 = a5[3];
          v57 = a5[2];
          v58 = v23;
          v24 = *a8;
          v25 = a8[1];
          v26 = a8[3];
          v49 = a8[2];
          v50 = v26;
          v47 = v24;
          v48 = v25;
          v27 = a8[4];
          v28 = a8[5];
          v29 = a8[7];
          v53 = a8[6];
          v54 = v29;
          v51 = v27;
          v52 = v28;
          if (a4)
          {
            if (a4 == 1)
              *v19 = a3->i8[0];
            else
              result = (uint64_t)memcpy((void *)(v18 + 20), a3, a4);
          }
          v30 = &v19[a4];
          __src[4] = v59;
          __src[5] = v60;
          __src[6] = v61;
          *(_OWORD *)__n = v62;
          __src[0] = v55;
          __src[1] = v56;
          __src[2] = v57;
          __src[3] = v58;
          v31 = HIDWORD(v62);
          if (HIDWORD(v62))
          {
            if (HIDWORD(v62) == 1)
              *v30 = __src[0];
            else
              result = (uint64_t)memcpy(v30, __src, HIDWORD(v62));
          }
          v32 = &v30[v31];
          if (a7)
          {
            if (a7 == 1)
              *v32 = a6->i8[0];
            else
              result = (uint64_t)memcpy(v32, a6, a7);
          }
          v33 = &v32[a7];
          v65[4] = v51;
          v65[5] = v52;
          v65[6] = v53;
          v66 = v54;
          v65[0] = v47;
          v65[1] = v48;
          v65[2] = v49;
          v65[3] = v50;
          v34 = HIDWORD(v54);
          if (HIDWORD(v54))
          {
            if (HIDWORD(v54) == 1)
              *v33 = v65[0];
            else
              result = (uint64_t)memcpy(v33, v65, HIDWORD(v66));
          }
          v33[v34] = a10;
        }
        goto LABEL_24;
      }
LABEL_20:
      v18 = 0;
      goto LABEL_24;
    }
LABEL_21:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_24;
  }
  if (!(_DWORD)result)
    goto LABEL_21;
  if (result > 0x7FFFFFEF)
    goto LABEL_20;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v18 = *(_QWORD *)&v65[0];
  if (*(_QWORD *)&v65[0])
  {
    **(_DWORD **)&v65[0] = 2;
    *(_DWORD *)(v18 + 4) = v16;
    *(_QWORD *)(v18 + 8) = v18 + 20;
    *(_DWORD *)(v18 + 16) = 0;
    v35 = a5[3];
    v46[2] = a5[2];
    v46[3] = v35;
    v36 = a5[5];
    v46[4] = a5[4];
    v46[5] = v36;
    v37 = a5[7];
    v46[6] = a5[6];
    v46[7] = v37;
    v38 = a5[1];
    v46[0] = *a5;
    v46[1] = v38;
    v39 = *a8;
    v40 = a8[1];
    v41 = a8[3];
    v45[2] = a8[2];
    v45[3] = v41;
    v45[0] = v39;
    v45[1] = v40;
    v42 = a8[4];
    v43 = a8[5];
    v44 = a8[7];
    v45[6] = a8[6];
    v45[7] = v44;
    v45[4] = v42;
    v45[5] = v43;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((char *)(v18 + 20), a3, a4, v46, a6, a7, v45, a10);
  }
LABEL_24:
  *a9 = v18;
  return result;
}

void sub_1970F4308(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::tryMakeString<double>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char __s[16];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[8];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WTF::numberToString();
  result = strlen(__s);
  HIDWORD(v12) = result;
  if ((result & 0x80000000) != 0)
  {
    v3 = 0;
  }
  else
  {
    v13[4] = v9;
    v13[5] = v10;
    v13[6] = v11;
    v13[7] = v12;
    v13[0] = *(_OWORD *)__s;
    v13[1] = v6;
    v13[2] = v7;
    v13[3] = v8;
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<double,void>>(result, 1, v13, &v4);
    v3 = v4;
  }
  *a1 = v3;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<double,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  int8x16_t *v19;
  __int128 v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  uint64_t v28;
  _OWORD v29[7];
  __int128 v30;
  _OWORD __src[7];
  __int128 v32;
  uint64_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  v5 = result;
  v33 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v7 = v28;
        if (v28)
        {
          result = v28 + 20;
          *(_DWORD *)v28 = 2;
          *(_DWORD *)(v28 + 4) = v5;
          *(_QWORD *)(v28 + 8) = v28 + 20;
          *(_DWORD *)(v28 + 16) = 4;
          v8 = a3[5];
          __src[4] = a3[4];
          __src[5] = v8;
          v9 = a3[7];
          __src[6] = a3[6];
          v32 = v9;
          v10 = a3[1];
          __src[0] = *a3;
          __src[1] = v10;
          v11 = a3[3];
          __src[2] = a3[2];
          __src[3] = v11;
          if (HIDWORD(v32))
          {
            if (HIDWORD(v32) == 1)
              *(_BYTE *)result = __src[0];
            else
              result = (uint64_t)memcpy((void *)result, __src, HIDWORD(v32));
          }
        }
        goto LABEL_20;
      }
LABEL_10:
      v7 = 0;
      goto LABEL_20;
    }
LABEL_11:
    v7 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_20;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_10;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v7 = v28;
  if (v28)
  {
    v12 = (char *)(v28 + 20);
    *(_DWORD *)v28 = 2;
    *(_DWORD *)(v28 + 4) = v5;
    *(_QWORD *)(v28 + 8) = v28 + 20;
    *(_DWORD *)(v28 + 16) = 0;
    v13 = a3[3];
    v29[2] = a3[2];
    v29[3] = v13;
    v14 = a3[5];
    v29[4] = a3[4];
    v29[5] = v14;
    v15 = a3[7];
    v29[6] = a3[6];
    v30 = v15;
    v16 = a3[1];
    v29[0] = *a3;
    v29[1] = v16;
    v17 = v28 + 20 + 2 * HIDWORD(v30);
    if (HIDWORD(v30) < 0x40)
    {
      v19 = (int8x16_t *)v29;
    }
    else
    {
      v18 = &v12[2 * (HIDWORD(v30) & 0xFFFFFFC0)];
      v19 = (int8x16_t *)v29;
      v20 = 0uLL;
      do
      {
        v34.val[0] = *v19;
        v21 = v19[1];
        v35.val[0] = v19[2];
        v22 = v19[3];
        v19 += 4;
        v23 = v22;
        v35.val[1] = 0uLL;
        v36.val[0] = v21;
        v34.val[1] = 0uLL;
        v24 = v12;
        vst2q_s8(v24, v34);
        v24 += 32;
        v36.val[1] = 0uLL;
        vst2q_s8(v24, v36);
        v25 = v12 + 64;
        vst2q_s8(v25, v35);
        v26 = v12 + 96;
        vst2q_s8(v26, *(int8x16x2_t *)(&v20 - 1));
        v12 += 128;
      }
      while (v12 != v18);
      v12 = v18;
    }
    while (v12 != (char *)v17)
    {
      v27 = v19->u8[0];
      v19 = (int8x16_t *)((char *)v19 + 1);
      *(_WORD *)v12 = v27;
      v12 += 2;
    }
  }
LABEL_20:
  *a4 = v7;
  return result;
}

void std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int **v4;
  void *v5;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, (void *)a2);
    WTF::fastFree((WTF *)v4, v5);
  }
}

void sub_1970F4780(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::WebsiteDataRecord *WebKit::WebsiteDataRecord::WebsiteDataRecord(WebKit::WebsiteDataRecord *this, const WebKit::WebsiteDataRecord *a2)
{
  _DWORD *v4;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable((uint64_t *)this + 3, (_DWORD **)a2 + 3);
    *((_BYTE *)this + 32) = 1;
  }
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable((uint64_t *)this + 5, (uint64_t *)a2 + 5);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 6, (_QWORD **)a2 + 6);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 7, (_QWORD **)a2 + 7);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 8, (_QWORD **)a2 + 8);
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)this + 9, (uint64_t *)a2 + 9);
  return this;
}

void sub_1970F4868(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(v2 + 32) && *v3)
    WTF::fastFree((WTF *)(*v3 - 16), a2);
  v5 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable(uint64_t *a1, _DWORD **a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *(v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(v3 - 3));
      v7 = WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(a2);
      v10 = *a2;
      if (*a2)
        v10 += 4 * *(v10 - 1);
      while (v8 != v10)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = 0;
        v14 = *v8 + ~(*v8 << 15);
        v15 = (9 * (v14 ^ (v14 >> 10))) ^ ((9 * (v14 ^ (v14 >> 10))) >> 6);
        v16 = (v15 + ~(v15 << 11)) ^ ((v15 + ~(v15 << 11)) >> 16);
        do
        {
          v17 = v16 & v12;
          v16 = ++v13 + v17;
        }
        while (*(_DWORD *)(v11 + 16 * v17));
        *(_OWORD *)(v11 + 16 * v17) = *(_OWORD *)v8;
        while (1)
        {
          v8 += 4;
          if (v8 == v9)
            break;
          if ((*v8 + 1) > 1)
            goto LABEL_16;
        }
        v8 = v9;
LABEL_16:
        ;
      }
    }
  }
  return a1;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(_DWORD **a1)
{
  _DWORD *result;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *(result - 1);
  v3 = &result[4 * v2];
  if (!*(result - 3))
    return &result[4 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((*result + 1) <= 1)
    {
      result += 4;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x1970F4BF4);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12));
    v5 = 80 * a2;
    v6 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebsiteDataRecord>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebKit::WebsiteDataRecord>::move(WTF::StringImpl *a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v6;
  WebKit::WebsiteDataRecord *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (WTF::StringImpl *)((char *)a1 + v6);
      v8 = a3 + v6;
      v9 = *(_QWORD *)((char *)a1 + v6);
      *(_QWORD *)((char *)a1 + v6) = 0;
      *(_QWORD *)v8 = v9;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)((char *)a1 + v6 + 8);
      *(_BYTE *)(v8 + 16) = 0;
      *(_BYTE *)(v8 + 32) = 0;
      if (*((_BYTE *)a1 + v6 + 32))
      {
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
        *(_QWORD *)(v8 + 24) = 0;
        v10 = *((_QWORD *)v7 + 3);
        *((_QWORD *)v7 + 3) = 0;
        *(_QWORD *)(v8 + 24) = v10;
        *(_BYTE *)(v8 + 32) = 1;
      }
      *(_QWORD *)(v8 + 40) = 0;
      v11 = *((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = 0;
      *(_QWORD *)(v8 + 40) = v11;
      *(_QWORD *)(v8 + 48) = 0;
      v12 = *((_QWORD *)v7 + 6);
      *((_QWORD *)v7 + 6) = 0;
      *(_QWORD *)(v8 + 48) = v12;
      *(_QWORD *)(v8 + 56) = 0;
      v13 = *((_QWORD *)v7 + 7);
      *((_QWORD *)v7 + 7) = 0;
      *(_QWORD *)(v8 + 56) = v13;
      *(_QWORD *)(v8 + 64) = 0;
      v14 = *((_QWORD *)v7 + 8);
      *((_QWORD *)v7 + 8) = 0;
      *(_QWORD *)(v8 + 64) = v14;
      *(_QWORD *)(v8 + 72) = 0;
      v15 = *((_QWORD *)v7 + 9);
      *((_QWORD *)v7 + 9) = 0;
      *(_QWORD *)(v8 + 72) = v15;
      WebKit::WebsiteDataRecord::~WebsiteDataRecord(v7, a2);
      v6 += 80;
    }
    while ((WTF::StringImpl *)(v16 + 80) != a2);
  }
}

void WebKit::WebsiteDataRecord::~WebsiteDataRecord(WebKit::WebsiteDataRecord *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 9);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (v6)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  v7 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 5);
  if (v7)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v7, a2);
  if (*((_BYTE *)this + 32))
  {
    v8 = *((_QWORD *)this + 3);
    if (v8)
      WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

void WebsiteDataStoreClient::~WebsiteDataStoreClient(id *this)
{
  objc_destroyWeak(this + 2);
  objc_destroyWeak(this + 1);
}

{
  void *v2;

  objc_destroyWeak(this + 2);
  objc_destroyWeak(this + 1);
  WTF::fastFree((WTF *)this, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(BOOL)>,void,BOOL>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BF3D8;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(BOOL)>,void,BOOL>::~CallableWrapper(const void **a1)
{
  void *v2;

  *a1 = off_1E34BF3D8;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(BOOL)>,void,BOOL>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString *&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  MEMORY[0x19AEABCC8](*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12), *a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = *a2;
      v8 = *a2 + 16 * v6;
      do
      {
        v9 = *(_DWORD **)v7;
        if (*(_QWORD *)v7)
          *v9 += 2;
        *v5 = v9;
        v10 = *(_DWORD **)(v7 + 8);
        if (v10)
          *v10 += 2;
        v5[1] = v10;
        v7 += 16;
        v5 += 2;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::WebsiteDataRecord *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebKit::WebsiteDataRecord **)a1;
    v5 = 80 * v3;
    do
    {
      WebKit::WebsiteDataRecord::~WebsiteDataRecord(v4, a2);
      v4 = (WebKit::WebsiteDataRecord *)(v6 + 80);
      v5 -= 80;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1970F58EC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970F5C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v13;
  WTF::StringImpl *v14;

  CFRelease(*(CFTypeRef *)(v11 + 8));
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v13);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

void sub_1970F5EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  void *v14;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

void sub_1970F6424(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t API::ObjectImpl<(API::Object::Type)96>::type()
{
  return 96;
}

void WebsiteDataStoreClient::requestStorageSpace(uint64_t a1, WebCore::SecurityOriginData *a2, WebCore::SecurityOriginData *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  id *v13;
  WebKit::CompletionHandlerCallChecker *Weak;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  id v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29[5];
  WTF::StringImpl *v30;
  uint64_t v31;

  if (*(_BYTE *)(a1 + 24) && (v13 = (id *)(a1 + 16), objc_loadWeak((id *)(a1 + 16))))
  {
    Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak(v13);
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_requestStorageSpace_frameOrigin_quota_currentSize_spaceRequired_decisionHandler_, &v31);
    v15 = *a7;
    *a7 = 0;
    v16 = v31;
    v17 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v17 = MEMORY[0x1E0C809A0];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1}>(WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1})::{lambda(void *,unsigned long long)#1}::__invoke;
    v17[3] = &WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1}>(WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1})::descriptor;
    v17[4] = v15;
    v17[5] = v16;
    WebCore::SecurityOriginData::toString(a2);
    MEMORY[0x19AEABB0C](&v30, v29, 0);
    v19 = v29[0];
    v29[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    WebCore::SecurityOriginData::toString(a3);
    MEMORY[0x19AEABB0C](v29, &v28, 0);
    v22 = v28;
    v28 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = objc_loadWeak(v13);
    v24 = WTF::URL::operator NSURL *();
    objc_msgSend(v23, "requestStorageSpace:frameOrigin:quota:currentSize:spaceRequired:decisionHandler:", v24, WTF::URL::operator NSURL *(), a4, a5, a6, v17, v28);
    v26 = v29[0];
    v29[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v30;
    v30 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v25);
      else
        *(_DWORD *)v27 -= 2;
    }
    _Block_release(v17);
  }
  else
  {
    v20 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
}

void sub_1970F6A24(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  const void *v15;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Block_release(v15);
  _Unwind_Resume(a1);
}

void WebsiteDataStoreClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t *a2)
{
  id *v3;
  uint64_t v4;
  WebKit::CompletionHandlerCallChecker *Weak;
  uint64_t v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  CFTypeRef cf;

  if (*(_BYTE *)(a1 + 25) && (v3 = (id *)(a1 + 16), objc_loadWeak((id *)(a1 + 16))))
  {
    v4 = *(_QWORD *)(*a2 + 8);
    Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak(v3);
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v15);
    v6 = *a2;
    *a2 = 0;
    v7 = v15;
    v8 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v8 = MEMORY[0x1E0C809A0];
    v8[1] = 50331650;
    v8[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    v8[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::descriptor;
    v8[4] = v6;
    v8[5] = v7;
    objc_msgSend(objc_loadWeak(v3), "didReceiveAuthenticationChallenge:completionHandler:", v4, v8);
    _Block_release(v8);
  }
  else
  {
    v9 = *(_QWORD *)(*a2 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
    cf = 0;
    v11 = *(_QWORD *)(v9 + 16);
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = 0;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, 1, &v15);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = cf;
      cf = 0;
      if (v12)
        CFRelease(v12);
    }
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v15;
    v15 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
}

void sub_1970F6C7C(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  uint64_t v2;

  if (v1)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v1);
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  _Unwind_Resume(exception_object);
}

void WebsiteDataStoreClient::openWindowFromServiceWorker(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t *a4)
{
  id *v7;
  id *v8;
  WebKit::CompletionHandlerCallChecker *Weak;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  id v17;
  id v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[5];
  uint64_t v21;

  if (*(_BYTE *)(a1 + 26)
    && (v7 = (id *)(a1 + 16), objc_loadWeak((id *)(a1 + 16)))
    && (v8 = (id *)(a1 + 8), objc_loadWeak(v8)))
  {
    Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak(v7);
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_websiteDataStore_openWindow_fromServiceWorkerOrigin_completionHandler_, &v21);
    v10 = *a4;
    *a4 = 0;
    v11 = v21;
    v12 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1}>(WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1})::{lambda(void *,WKWebView *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1}>(WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1})::descriptor;
    v12[4] = v10;
    v12[5] = v11;
    WTF::URL::URL((uint64_t)v20, a2);
    v14 = WTF::URL::operator NSURL *();
    v15 = v20[0];
    v20[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    API::SecurityOrigin::create(v20);
    v17 = objc_loadWeak(v7);
    v18 = objc_loadWeak(v8);
    objc_msgSend(v17, "websiteDataStore:openWindow:fromServiceWorkerOrigin:completionHandler:", v18, v14, *((_QWORD *)v20[0] + 1), v12);
    v19 = v20[0];
    v20[0] = 0;
    if (v19)
      CFRelease(*((CFTypeRef *)v19 + 1));
    _Block_release(v12);
  }
  else
  {
    v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
}

void sub_1970F6E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  const void *v9;

  _Block_release(v9);
  _Unwind_Resume(a1);
}

void WebsiteDataStoreClient::reportServiceWorkerConsoleMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  id *v8;
  id WeakRetained;
  char v10;
  id Weak;
  id v12;
  const __CFString *v13;

  v8 = (id *)(a1 + 16);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  v10 = objc_opt_respondsToSelector();
  if (WeakRetained)
    CFRelease(WeakRetained);
  if ((v10 & 1) != 0)
  {
    Weak = objc_loadWeak(v8);
    v12 = objc_loadWeak((id *)(a1 + 8));
    if (*a6)
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E351F1B8;
    objc_msgSend(Weak, "websiteDataStore:reportServiceWorkerConsoleMessage:", v12, v13);
  }
}

void sub_1970F6FB8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebsiteDataStoreClient::showNotification(WebsiteDataStoreClient *this, const WebCore::NotificationData *a2)
{
  id *v4;
  uint64_t result;
  id *v6;
  _WKNotificationData *v7;
  id Weak;

  if (!*((_BYTE *)this + 27))
    return 0;
  v4 = (id *)((char *)this + 16);
  result = (uint64_t)objc_loadWeak((id *)this + 2);
  if (result)
  {
    v6 = (id *)((char *)this + 8);
    result = (uint64_t)objc_loadWeak(v6);
    if (result)
    {
      v7 = -[_WKNotificationData initWithCoreData:dataStore:]([_WKNotificationData alloc], "initWithCoreData:dataStore:", a2, objc_loadWeak(v6));
      Weak = objc_loadWeak(v4);
      objc_msgSend(Weak, "websiteDataStore:showNotification:", objc_loadWeak(v6), v7);
      if (v7)
        CFRelease(v7);
      return 1;
    }
  }
  return result;
}

void sub_1970F7088(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

id *WebsiteDataStoreClient::notificationPermissions@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  id *v3;
  id *v4;
  id *v5;
  id Weak;
  void *v7;
  id *v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  void *v12;
  const WTF::URL *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  NSObject *v23;
  WTF::StringImpl *v24;
  WTF **v25;
  int i;
  uint64_t v27;
  WTF **v28;
  WTF *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t *v38;
  WTF::StringImpl *v39;
  uint8_t buf[40];
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  _BYTE v47[24];
  int v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 28)
    || (v3 = this, v4 = this + 2, (this = (id *)objc_loadWeak(this + 2)) == 0)
    || (v5 = v3 + 1, (this = (id *)objc_loadWeak(v5)) == 0))
  {
    *a2 = 0;
    return this;
  }
  *a2 = 0;
  Weak = objc_loadWeak(v4);
  v7 = (void *)objc_msgSend(Weak, "notificationPermissionsForWebsiteDataStore:", objc_loadWeak(v5));
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  this = (id *)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
  v8 = this;
  if (!this)
    return this;
  v9 = *(_QWORD *)v43;
  v37 = *(_QWORD *)v43;
  v38 = a2;
  do
  {
    v10 = 0;
    do
    {
      if (*(_QWORD *)v43 != v9)
        objc_enumerationMutation(v7);
      v11 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v10);
      v12 = (void *)objc_msgSend(v7, "objectForKeyedSubscript:", v11);
      MEMORY[0x19AEABCC8](&v39, v11);
      MEMORY[0x19AEABB0C](buf, &v39, 0);
      WebCore::SecurityOriginData::fromURL((WebCore::SecurityOriginData *)buf, v13);
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)v47);
      if (v48 != -1)
        ((void (*)(char *, _BYTE *))off_1E34BF138[v48])(&v46, v47);
      v48 = -1;
      v15 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v39;
      v39 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (!v41 || !*((_DWORD *)v41 + 1))
      {
        v23 = qword_1ECE716B8;
        if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEFAULT, "[WKWebsiteDataStoreDelegate notificationPermissionsForWebsiteDataStore:] returned a URL string that could not be parsed into a security origin. Skipping.", buf, 2u);
        }
        goto LABEL_47;
      }
      v18 = objc_msgSend(v12, "BOOLValue");
      v19 = *a2;
      if (*a2
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v19 = *a2) != 0))
      {
        v20 = *(_DWORD *)(v19 - 8);
      }
      else
      {
        v20 = 0;
      }
      v21 = *((_DWORD *)v41 + 4);
      if (v21 >= 0x100)
        v22 = v21 >> 8;
      else
        v22 = WTF::StringImpl::hashSlowCase(v41);
      v25 = 0;
      for (i = 1; ; ++i)
      {
        v27 = v22 & v20;
        v28 = (WTF **)(v19 + 16 * v27);
        v29 = *v28;
        if (*v28 == (WTF *)-1)
        {
          v25 = (WTF **)(v19 + 16 * v27);
          goto LABEL_35;
        }
        if (!v29)
          break;
        if (WTF::equal(v29, v41, v17))
        {
          *(_BYTE *)(v19 + 16 * v27 + 8) = v18;
          v9 = v37;
          a2 = v38;
          goto LABEL_47;
        }
LABEL_35:
        v22 = i + v27;
      }
      a2 = v38;
      if (v25)
      {
        *v25 = 0;
        v25[1] = 0;
        --*(_DWORD *)(*v38 - 16);
        v28 = v25;
      }
      WTF::String::operator=(v28, (WTF::StringImpl *)&v41);
      v9 = v37;
      *((_BYTE *)v28 + 8) = v18;
      v30 = *v38;
      if (*v38)
        v31 = *(_DWORD *)(v30 - 12) + 1;
      else
        v31 = 1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *v38;
      if (*v38)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      v34 = (*(_DWORD *)(v32 - 16) + v33);
      v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
      {
        if (v35 <= 2 * v34)
LABEL_46:
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v38, v28);
      }
      else if (3 * v35 <= 4 * v34)
      {
        goto LABEL_46;
      }
LABEL_47:
      v36 = v41;
      v41 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v24);
        else
          *(_DWORD *)v36 -= 2;
      }
      v10 = (id *)((char *)v10 + 1);
    }
    while (v10 != v8);
    this = (id *)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
    v8 = this;
  }
  while (this);
  return this;
}

void sub_1970F7460(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35)
{
  WTF::StringImpl ***v35;

  if (*v35)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v35, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebsiteDataStoreClient::hasGetDisplayedNotifications(WebsiteDataStoreClient *this)
{
  return *((unsigned __int8 *)this + 31);
}

void WebsiteDataStoreClient::getDisplayedNotifications(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id *v5;
  id *v6;
  uint64_t v7;
  _QWORD *v8;
  id Weak;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[2];

  if (*(_BYTE *)(a1 + 31)
    && (v5 = (id *)(a1 + 16), objc_loadWeak((id *)(a1 + 16)))
    && (v6 = (id *)(a1 + 8), objc_loadWeak(v6)))
  {
    API::SecurityOrigin::create(v14);
    v7 = *a3;
    *a3 = 0;
    v8 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v8 = MEMORY[0x1E0C809A0];
    v8[1] = 50331650;
    v8[2] = WTF::BlockPtr<void ()(NSArray<NSDictionary *> *)>::fromCallable<WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1}>(WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1})::{lambda(void *,NSArray<NSDictionary *> *)#1}::__invoke;
    v8[3] = &WTF::BlockPtr<void ()(NSArray<NSDictionary *> *)>::fromCallable<WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1}>(WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1})::descriptor;
    v8[4] = v7;
    Weak = objc_loadWeak(v5);
    v10 = objc_loadWeak(v6);
    objc_msgSend(Weak, "websiteDataStore:getDisplayedNotificationsForWorkerOrigin:completionHandler:", v10, *(_QWORD *)(v14[0] + 8), v8);
    _Block_release(v8);
    v11 = v14[0];
    v14[0] = 0;
    if (v11)
      CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0;
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 16))(v12, v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v13);
  }
}

void sub_1970F7688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;

  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  _Unwind_Resume(exception_object);
}

void WebsiteDataStoreClient::workerUpdatedAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id *v7;
  id *v8;
  uint64_t v9;
  id Weak;
  id v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 29))
  {
    v7 = (id *)(a1 + 16);
    if (objc_loadWeak((id *)(a1 + 16)))
    {
      v8 = (id *)(a1 + 8);
      if (objc_loadWeak(v8))
      {
        API::SecurityOrigin::create(&v13);
        if (a4)
          v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a3);
        else
          v9 = 0;
        Weak = objc_loadWeak(v7);
        v11 = objc_loadWeak(v8);
        objc_msgSend(Weak, "websiteDataStore:workerOrigin:updatedAppBadge:", v11, *(_QWORD *)(v13 + 8), v9);
        v12 = v13;
        v13 = 0;
        if (v12)
          CFRelease(*(CFTypeRef *)(v12 + 8));
      }
    }
  }
}

void sub_1970F77C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

id *WebsiteDataStoreClient::navigationToNotificationActionURL(id *this, const WTF::URL *a2)
{
  id *v2;
  id *v3;
  id *v4;
  id Weak;
  id v6;

  if (*((_BYTE *)this + 30))
  {
    v2 = this;
    v3 = this + 2;
    this = (id *)objc_loadWeak(this + 2);
    if (this)
    {
      v4 = v2 + 1;
      this = (id *)objc_loadWeak(v4);
      if (this)
      {
        Weak = objc_loadWeak(v3);
        v6 = objc_loadWeak(v4);
        return (id *)objc_msgSend(Weak, "websiteDataStore:navigateToNotificationActionURL:", v6, WTF::URL::operator NSURL *());
      }
    }
  }
  return this;
}

void WebsiteDataStoreClient::requestBackgroundFetchPermission(uint64_t a1, WebCore::SecurityOriginData *a2, WebCore::SecurityOriginData *a3, uint64_t *a4)
{
  id *v7;
  WebKit::CompletionHandlerCallChecker *Weak;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  id v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[5];
  WTF::StringImpl *v24;
  uint64_t v25;

  if (*(_BYTE *)(a1 + 32))
  {
    v7 = (id *)(a1 + 16);
    Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak((id *)(a1 + 16));
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_requestBackgroundFetchPermission_frameOrigin_decisionHandler_, &v25);
    v9 = *a4;
    *a4 = 0;
    v10 = v25;
    v11 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v11 = MEMORY[0x1E0C809A0];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::descriptor;
    v11[4] = v9;
    v11[5] = v10;
    WebCore::SecurityOriginData::toString(a2);
    MEMORY[0x19AEABB0C](&v24, v23, 0);
    v13 = v23[0];
    v23[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    WebCore::SecurityOriginData::toString(a3);
    MEMORY[0x19AEABB0C](v23, &v22, 0);
    v16 = v22;
    v22 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = objc_loadWeak(v7);
    v18 = WTF::URL::operator NSURL *();
    objc_msgSend(v17, "requestBackgroundFetchPermission:frameOrigin:decisionHandler:", v18, WTF::URL::operator NSURL *(), v11, v22);
    v20 = v23[0];
    v23[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v24;
    v24 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    _Block_release(v11);
  }
  else
  {
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

void sub_1970F7A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t WebsiteDataStoreClient::notifyBackgroundFetchChange(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v4;
  id Weak;
  const __CFString *v6;

  if (*(_BYTE *)(result + 33))
  {
    if (a3 == 2)
      v4 = 2;
    else
      v4 = a3 == 1;
    Weak = objc_loadWeak((id *)(result + 16));
    if (*a2)
      v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    return objc_msgSend(Weak, "notifyBackgroundFetchChange:change:", v6, v4);
  }
  return result;
}

uint64_t WebsiteDataStoreClient::didAccessWindowProxyProperty(uint64_t result, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id Weak;
  id v12;
  const __CFString *v13;
  const __CFString *v14;

  if (*(_BYTE *)(result + 34))
  {
    v8 = result;
    v9 = 2;
    if (a4 != 2)
      v9 = 3;
    if (a4 == 4)
      v10 = 1;
    else
      v10 = v9;
    Weak = objc_loadWeak((id *)(result + 16));
    v12 = objc_loadWeak((id *)(v8 + 8));
    if (*a2)
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E351F1B8;
    if (*a3)
      v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v14 = &stru_1E351F1B8;
    return objc_msgSend(Weak, "websiteDataStore:domain:didOpenDomainViaWindowOpen:withProperty:directly:", v12, v13, v14, v10, a5);
  }
  return result;
}

uint64_t WebsiteDataStoreClient::didAllowPrivateTokenUsageByThirdPartyForTesting(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  id Weak;
  id v5;

  if (*(_BYTE *)(result + 35))
  {
    v3 = result;
    Weak = objc_loadWeak((id *)(result + 16));
    v5 = objc_loadWeak((id *)(v3 + 8));
    return objc_msgSend(Weak, "websiteDataStore:didAllowPrivateTokenUsageByThirdPartyForTesting:forResourceURL:", v5, a2, WTF::URL::operator NSURL *());
  }
  return result;
}

uint64_t WebsiteDataStoreClient::didExceedMemoryFootprintThreshold(uint64_t result, uint64_t a2, _QWORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  uint64_t v15;
  id Weak;
  id v17;
  const __CFString *v18;
  uint64_t v19;

  if (*(_BYTE *)(result + 36))
  {
    v15 = result;
    Weak = objc_loadWeak((id *)(result + 16));
    v17 = objc_loadWeak((id *)(v15 + 8));
    if (*a3)
      v18 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v18 = &stru_1E351F1B8;
    LOBYTE(v19) = a7;
    return objc_msgSend(Weak, "websiteDataStore:domain:didExceedMemoryFootprintThreshold:withPageCount:processLifetime:inForeground:wasPrivateRelayed:canSuspend:", v17, v18, a2, a4, a5, a6, a8, v19);
  }
  return result;
}

void WebsiteDataStoreClient::webCryptoMasterKey(uint64_t a1, uint64_t *a2)
{
  id *v3;
  WebKit::CompletionHandlerCallChecker *Weak;
  id v5;
  uint64_t v6;
  WTF *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  int v13;
  char v14;

  if (*(_BYTE *)(a1 + 37) && (v3 = (id *)(a1 + 16), objc_loadWeak((id *)(a1 + 16))))
  {
    Weak = (WebKit::CompletionHandlerCallChecker *)objc_loadWeak(v3);
    WebKit::CompletionHandlerCallChecker::create(Weak, (objc_object *)sel_webCryptoMasterKey_, (uint64_t *)&v12);
    v5 = objc_loadWeak(v3);
    v6 = *a2;
    *a2 = 0;
    v7 = v12;
    v8 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v8 = MEMORY[0x1E0C809A0];
    v8[1] = 50331650;
    v8[2] = WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1}>(WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1})::{lambda(void *,NSData *)#1}::__invoke;
    v8[3] = &WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1}>(WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1})::descriptor;
    v8[4] = v6;
    v8[5] = v7;
    objc_msgSend(v5, "webCryptoMasterKey:", v8);
    _Block_release(v8);
  }
  else
  {
    LOBYTE(v12) = 0;
    v14 = 0;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v9 + 16))(v9, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v14)
    {
      v11 = v12;
      if (v12)
      {
        v12 = 0;
        v13 = 0;
        WTF::fastFree(v11, v10);
      }
    }
  }
}

void sub_1970F7EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  const void *v13;
  const void *v14;

  v14 = v13;
  _Block_release(v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::NotificationData *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::NotificationData **)a1;
    v5 = 240 * v3;
    do
    {
      WebCore::NotificationData::~NotificationData(v4, a2);
      v4 = (WebCore::NotificationData *)(v6 + 240);
      v5 -= 240;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1}>(WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned long long)>::fromCallable<WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1}>(WebsiteDataStoreClient::requestStorageSpace(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(unsigned long long)#1})::{lambda(void *,unsigned long long)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_1970F8088(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WebsiteDataStoreClient::didReceiveAuthenticationChallenge(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WTF::StringImpl *result;
  NSURLSessionAuthChallengeDisposition v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef cf;

  result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
    v9 = WebKit::toAuthenticationChallengeDisposition(a2, v7);
    MEMORY[0x19AEAC4CC](&v14, a3);
    v11 = *(_QWORD *)(v8 + 16);
    if (v11)
    {
      *(_QWORD *)(v8 + 16) = 0;
      (*(void (**)(uint64_t, unint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, v9, &v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v12 = cf;
    cf = 0;
    if (v12)
      CFRelease(v12);
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1}>(WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1}>(WebsiteDataStoreClient::openWindowFromServiceWorker(WTF::String const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::{lambda(WKWebView *)#1})::{lambda(void *,WKWebView *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    if (a2)
    {
      objc_msgSend(a2, "_page");
      v5 = v7;
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

void sub_1970F82BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSArray<NSDictionary *> *)>::fromCallable<WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1}>(WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSArray<NSDictionary *> *)>::fromCallable<WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1}>(WebsiteDataStoreClient::getDisplayedNotifications(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(NSArray<NSDictionary *> *)#1})::{lambda(void *,NSArray<NSDictionary *> *)#1}::__invoke(uint64_t a1, void *a2)
{
  NSDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[240];
  char v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v19, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(a2);
        WebCore::NotificationData::fromDictionary(*(WebCore::NotificationData **)(*((_QWORD *)&v11 + 1) + 8 * i), v4);
        if (!v18)
        {
          __break(0xC471u);
          JUMPOUT(0x1970F848CLL);
        }
        if (HIDWORD(v16) == (_DWORD)v16)
        {
          WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData&>((uint64_t)&v15, (unint64_t)v17);
        }
        else
        {
          WebCore::NotificationData::NotificationData((WebCore::NotificationData *)(v15 + 240 * HIDWORD(v16)), (const WebCore::NotificationData *)v17);
          ++HIDWORD(v16);
        }
        if (v18)
          WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v17, v4);
      }
      v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v19, 16);
    }
    while (v5);
  }
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, &v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v9);
}

void sub_1970F8494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v11);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData&>(uint64_t a1, unint64_t a2)
{
  const WebCore::NotificationData *v3;

  v3 = (const WebCore::NotificationData *)WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::NotificationData::NotificationData((WebCore::NotificationData *)(*(_QWORD *)a1 + 240 * *(unsigned int *)(a1 + 12)), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

WebCore::NotificationData *WebCore::NotificationData::NotificationData(WebCore::NotificationData *this, const WebCore::NotificationData *a2)
{
  _DWORD *v4;
  __int128 v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  WTF *v17;
  void *v18;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 8) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 5) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 6) = v7;
  v8 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 7) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 8);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 8) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 9);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 9) = v10;
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  v11 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v11)
    *v11 += 2;
  *((_QWORD *)this + 11) = v11;
  v12 = (_DWORD *)*((_QWORD *)a2 + 12);
  if (v12)
    *v12 += 2;
  *((_QWORD *)this + 12) = v12;
  v13 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 104) = v13;
  v14 = *((_OWORD *)a2 + 9);
  v15 = *((_OWORD *)a2 + 10);
  v16 = *((_OWORD *)a2 + 12);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_OWORD *)this + 12) = v16;
  *((_OWORD *)this + 9) = v14;
  *((_OWORD *)this + 10) = v15;
  v17 = (WTF *)*((unsigned int *)a2 + 55);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 55) = (_DWORD)v17;
  if ((_DWORD)v17)
  {
    v18 = (void *)WTF::fastMalloc(v17);
    *((_DWORD *)this + 54) = (_DWORD)v17;
    *((_QWORD *)this + 26) = v18;
    memcpy(v18, *((const void **)a2 + 26), *((unsigned int *)a2 + 55));
  }
  *((_WORD *)this + 112) = *((_WORD *)a2 + 112);
  return this;
}

void sub_1970F8690(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = v2[12];
  v2[12] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v2[11];
  v2[11] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v2[9];
  v2[9] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v2[8];
  v2[8] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v2[7];
  v2[7] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v2[6];
  v2[6] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v2[5];
  v2[5] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *v2;
  *v2 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 240 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WebCore::NotificationData *v3;
  WebCore::NotificationData *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1111112)
    {
      __break(0xC471u);
      JUMPOUT(0x1970F890CLL);
    }
    v3 = *(WebCore::NotificationData **)a1;
    v4 = (WebCore::NotificationData *)(*(_QWORD *)a1 + 240 * *(unsigned int *)(a1 + 12));
    v5 = 240 * a2;
    v6 = WTF::fastMalloc((WTF *)(240 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0xF0;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::NotificationData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WebCore::NotificationData **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::NotificationData>::move(WebCore::NotificationData *a1, WebCore::NotificationData *a2, uint64_t a3)
{
  WebCore::NotificationData *v5;
  void *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WebCore::NotificationData::NotificationData(a3, (uint64_t)v5);
      WebCore::NotificationData::~NotificationData(v5, v6);
      a3 += 240;
      v5 = (WebCore::NotificationData *)((char *)v5 + 240);
    }
    while (v5 != a2);
  }
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebsiteDataStoreClient::requestBackgroundFetchPermission(WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_1970F8A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1}>(WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1}>(WebsiteDataStoreClient::webCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::{lambda(NSData *)#1})::{lambda(void *,NSData *)#1}::__invoke(uint64_t a1, void *a2)
{
  unint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  int v11;
  int v12;
  char v13;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    if (a2)
    {
      v5 = objc_msgSend(a2, "bytes");
      result = objc_msgSend(a2, "length");
      v6 = result;
      if (result)
      {
        if (HIDWORD(result))
        {
          __break(0xC471u);
          return result;
        }
        result = WTF::fastMalloc((WTF *)result);
        v7 = 0;
        do
        {
          *(_BYTE *)(result + v7) = *(_BYTE *)(v5 + v7);
          ++v7;
        }
        while (v6 != v7);
      }
      v10 = (WTF *)result;
      v11 = v6;
      v12 = v6;
      v13 = 1;
      v8 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v8 + 16))(v8, &v10);
    }
    else
    {
      LOBYTE(v10) = 0;
      v13 = 0;
      v8 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v8 + 16))(v8, &v10);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v13)
    {
      result = (unint64_t)v10;
      if (v10)
      {
        v10 = 0;
        v11 = 0;
        return WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

void sub_1970F8BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
  {
    if (a10)
      WTF::fastFree(a10, v15);
  }
  _Unwind_Resume(a1);
}

void sub_1970F8DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

void sub_1970F8FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

void sub_1970F9280(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970F9760(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1970F98B0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::BackgroundFetchState,WebKit::BackgroundFetchState,WebKit::BackgroundFetchState*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  if (result)
  {
    v3 = result;
    v4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(result, a2);
    WTF::URL::URL(v4 + 32, (uint64_t *)(a2 + 32));
    v5 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 72) = v5;
    v6 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(v3 + 80) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    *(_DWORD *)(v3 + 88) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    *(_DWORD *)(v3 + 92) = v6;
    v7 = *(_QWORD *)(a2 + 96);
    v8 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(v3 + 96) = v7;
    *(_QWORD *)(v3 + 104) = v8;
    v9 = *(_OWORD *)(a2 + 112);
    v10 = *(_OWORD *)(a2 + 128);
    *(_DWORD *)(v3 + 143) = *(_DWORD *)(a2 + 143);
    *(_OWORD *)(v3 + 112) = v9;
    *(_OWORD *)(v3 + 128) = v10;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1970F995C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34BF138[v15])(&a13, v13);
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(exception_object);
}

void sub_1970F9D2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970F9F40(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x2AAAAAB)
  {
    v5 = 96 * v3;
    v6 = (_OWORD *)WTF::fastMalloc((WTF *)(96 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)v2 = v6;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(_OWORD **)a2;
      v9 = 96 * v7;
      do
      {
        v10 = v8[1];
        *v6 = *v8;
        v6[1] = v10;
        v11 = v8[2];
        v12 = v8[3];
        v13 = v8[5];
        v6[4] = v8[4];
        v6[5] = v13;
        v6[2] = v11;
        v6[3] = v12;
        v6 += 6;
        v8 += 6;
        v9 -= 96;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void WebKit::NetworkResourceLoadMap::~NetworkResourceLoadMap(WebKit::NetworkResourceLoadMap *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  WebKit::NetworkResourceLoadMap::clear(this, a2);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(_QWORD *)this)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(*(_QWORD *)this, v3);
}

uint64_t WebKit::NetworkResourceLoadMap::clear(WebKit::NetworkResourceLoadMap *this, WTF::StringImpl *a2)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    *(_QWORD *)this = 0;
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(result, a2);
  }
  if (*((_BYTE *)this + 8))
  {
    *((_BYTE *)this + 8) = 0;
    result = *((_QWORD *)this + 2);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
  }
  return result;
}

uint64_t *WebKit::NetworkResourceLoadMap::add@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int hasUpload;
  uint64_t *result;
  uint64_t v9;

  v9 = a2;
  hasUpload = WebCore::ResourceRequestBase::hasUpload((WebCore::ResourceRequestBase *)(*a3 + 168));
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>((uint64_t *)a1, (WTF::StringImpl *)&v9, a3, a4);
  if (hasUpload && !*(_BYTE *)(a1 + 8))
  {
    *(_BYTE *)(a1 + 8) = 1;
    result = *(uint64_t **)(a1 + 16);
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, 1);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v30 = 0;
        else
          v30 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v26 = v8 + 16 * v30;
        goto LABEL_13;
      }
      if (v17 == -1)
        v28 = v16;
      v15 = (v15 + v29) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v29;
    }
    while (*v16);
    if (v28)
    {
      *v28 = 0;
      v28[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *(_QWORD *)a2;
      v16 = v28;
    }
  }
  *v16 = v11;
  v18 = *a3;
  *a3 = 0;
  v19 = v16[1];
  v16[1] = v18;
  if (v19)
    result = (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v19 + 8), a2);
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_12;
LABEL_22:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
    v16 = result;
    v22 = *v6;
    if (*v6)
      v25 = *(unsigned int *)(v22 - 4);
    else
      v25 = 0;
    goto LABEL_12;
  }
  if (3 * v25 <= 4 * v24)
    goto LABEL_22;
LABEL_12:
  v26 = v22 + 16 * v25;
  v27 = 1;
LABEL_13:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

BOOL WebKit::NetworkResourceLoadMap::remove(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v5;

  WebKit::NetworkResourceLoadMap::take(a1, a2, &v5);
  v3 = v5;
  if (v5)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), v2);
  return v3 != 0;
}

uint64_t WebKit::NetworkResourceLoadMap::take@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t v16;

  v16 = a2;
  v5 = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a1, &v16);
  result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::take((uint64_t *)a1, v5, &v15);
  v7 = v15;
  if (v15)
  {
    result = WebCore::ResourceRequestBase::hasUpload((WebCore::ResourceRequestBase *)(v15 + 168));
    if ((_DWORD)result)
    {
      v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin((_QWORD **)a1);
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v11 = *(unsigned int *)(v10 - 4);
        v12 = v10 + 16 * v11;
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
      v14[0] = a1;
      v14[1] = v8;
      v14[2] = v9;
      v14[3] = v12;
      v14[4] = v10 + 16 * v11;
      result = WTF::anyOf<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WebKit::NetworkResourceLoadMap::take(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0>(v14);
      if (*(unsigned __int8 *)(a1 + 8) != (_DWORD)result)
      {
        v13 = result;
        *(_BYTE *)(a1 + 8) = result;
        result = *(_QWORD *)(a1 + 16);
        if (result)
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v13);
      }
    }
    v7 = v15;
  }
  *a3 = v7;
  return result;
}

uint64_t WTF::anyOf<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WebKit::NetworkResourceLoadMap::take(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0>(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v1 = (_QWORD *)a1[1];
  v2 = (_QWORD *)a1[3];
  if (v1 == v2)
    return 0;
  v3 = (_QWORD *)a1[2];
  while (1)
  {
    result = WebCore::ResourceRequestBase::hasUpload((WebCore::ResourceRequestBase *)(v1[1] + 168));
    if ((result & 1) != 0)
      return 1;
    while (1)
    {
      v1 += 2;
      if (v1 == v3)
        break;
      if ((unint64_t)(*v1 + 1) > 1)
        goto LABEL_8;
    }
    v1 = v3;
LABEL_8:
    if (v1 == v2)
      return result;
  }
}

uint64_t WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, double a9, uint64_t *a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t *a14, char a15, char a16, char a17, uint64_t *a18, char a19, __int128 *a20,char a21,uint64_t *a22,char a23,char a24,char a25,int a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t *a37,uint64_t a38,uint64_t a39,char a40,char a41,char a42)
{
  uint64_t Parameters;
  int v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char ***v69;
  uint64_t v70;
  const char ***v71;
  const char ***v72;
  uint64_t v76[2];

  Parameters = WebKit::NetworkLoadParameters::NetworkLoadParameters(a1, a2);
  *(_QWORD *)(Parameters + 2952) = a3;
  *(_QWORD *)(Parameters + 2976) = 0;
  *(_QWORD *)(Parameters + 2968) = 0;
  *(_QWORD *)(Parameters + 2960) = 0;
  *(double *)(Parameters + 2984) = a9;
  v48 = *(_DWORD *)(a7 + 3);
  *(_DWORD *)(Parameters + 2992) = *(_DWORD *)a7;
  *(_DWORD *)(Parameters + 2995) = v48;
  v49 = *(_QWORD *)(a7 + 8);
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(Parameters + 3000) = v49;
  v50 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(Parameters + 3024) = *(_OWORD *)(a7 + 32);
  *(_OWORD *)(Parameters + 3008) = v50;
  *(_BYTE *)(Parameters + 3040) = 0;
  *(_BYTE *)(Parameters + 3064) = 0;
  if (*((_BYTE *)a8 + 24))
  {
    *(_QWORD *)(a1 + 3040) = 0;
    *(_QWORD *)(a1 + 3048) = 0;
    v51 = *a8;
    *a8 = 0;
    *(_QWORD *)(a1 + 3040) = v51;
    LODWORD(v51) = *((_DWORD *)a8 + 2);
    *((_DWORD *)a8 + 2) = 0;
    *(_DWORD *)(a1 + 3048) = v51;
    LODWORD(v51) = *((_DWORD *)a8 + 3);
    *((_DWORD *)a8 + 3) = 0;
    *(_DWORD *)(a1 + 3052) = v51;
    LODWORD(v51) = *((_DWORD *)a8 + 4);
    *(_BYTE *)(a1 + 3060) = *((_BYTE *)a8 + 20);
    *(_DWORD *)(a1 + 3056) = v51;
    *(_BYTE *)(a1 + 3064) = 1;
  }
  WTF::URL::URL(a1 + 3072, a10);
  WTF::URL::URL(a1 + 3112, a11);
  *(_WORD *)(a1 + 3152) = *(_WORD *)a12;
  v52 = *(_DWORD **)(a12 + 8);
  if (v52)
    *v52 += 2;
  *(_QWORD *)(a1 + 3160) = v52;
  v53 = *(_DWORD **)(a12 + 16);
  if (v53)
    *v53 += 2;
  *(_QWORD *)(a1 + 3168) = v53;
  *(_WORD *)(a1 + 3176) = *(_WORD *)a13;
  v54 = *(_DWORD **)(a13 + 8);
  if (v54)
    *v54 += 2;
  *(_QWORD *)(a1 + 3184) = v54;
  v55 = *(_DWORD **)(a13 + 16);
  if (v55)
    *v55 += 2;
  *(_QWORD *)(a1 + 3192) = v55;
  *(_OWORD *)(a1 + 3200) = 0u;
  v56 = *a14;
  *a14 = 0;
  *(_QWORD *)(a1 + 3200) = v56;
  LODWORD(v56) = *((_DWORD *)a14 + 2);
  *((_DWORD *)a14 + 2) = 0;
  *(_DWORD *)(a1 + 3208) = v56;
  LODWORD(v56) = *((_DWORD *)a14 + 3);
  *((_DWORD *)a14 + 3) = 0;
  *(_DWORD *)(a1 + 3212) = v56;
  *(_OWORD *)(a1 + 3216) = 0u;
  v57 = a14[2];
  a14[2] = 0;
  *(_QWORD *)(a1 + 3216) = v57;
  LODWORD(v57) = *((_DWORD *)a14 + 6);
  *((_DWORD *)a14 + 6) = 0;
  *(_DWORD *)(a1 + 3224) = v57;
  LODWORD(v57) = *((_DWORD *)a14 + 7);
  *((_DWORD *)a14 + 7) = 0;
  *(_DWORD *)(a1 + 3228) = v57;
  *(_BYTE *)(a1 + 3232) = a15;
  *(_BYTE *)(a1 + 3233) = a16;
  *(_BYTE *)(a1 + 3234) = a17;
  *(_OWORD *)(a1 + 3240) = 0u;
  v58 = *a18;
  *a18 = 0;
  *(_QWORD *)(a1 + 3240) = v58;
  LODWORD(v58) = *((_DWORD *)a18 + 2);
  *((_DWORD *)a18 + 2) = 0;
  *(_DWORD *)(a1 + 3248) = v58;
  LODWORD(v58) = *((_DWORD *)a18 + 3);
  *((_DWORD *)a18 + 3) = 0;
  *(_DWORD *)(a1 + 3252) = v58;
  *(_BYTE *)(a1 + 3256) = a19;
  v59 = *a20;
  *(_QWORD *)(a1 + 3280) = *((_QWORD *)a20 + 2);
  *(_OWORD *)(a1 + 3264) = v59;
  *(_BYTE *)(a1 + 3288) = a21;
  WTF::URL::URL(a1 + 3296, a22);
  *(_BYTE *)(a1 + 3336) = a23;
  *(_BYTE *)(a1 + 3337) = a24;
  *(_BYTE *)(a1 + 3338) = a25;
  *(_DWORD *)(a1 + 3340) = a26;
  WTF::URL::URL(a1 + 3344, a27);
  *(_WORD *)(a1 + 3384) = *(_WORD *)a28;
  v60 = *(_QWORD *)(a28 + 8);
  *(_QWORD *)(a28 + 8) = 0;
  *(_QWORD *)(a1 + 3392) = v60;
  v61 = *(_QWORD *)(a28 + 16);
  *(_QWORD *)(a28 + 16) = 0;
  *(_QWORD *)(a1 + 3400) = v61;
  *(_QWORD *)(a1 + 3408) = a29;
  *(_BYTE *)(a1 + 3424) = 0;
  *(_BYTE *)(a1 + 3648) = 0;
  if (*(_BYTE *)(a30 + 224))
  {
    std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester,WebCore::NavigationRequester*>(a1 + 3424, a30);
    *(_BYTE *)(a1 + 3648) = 1;
  }
  *(_BYTE *)(a1 + 3664) = a31;
  *(_QWORD *)(a1 + 3672) = a32;
  *(_QWORD *)(a1 + 3680) = a33;
  *(_BYTE *)(a1 + 3688) = a34;
  *(_QWORD *)(a1 + 3696) = a35;
  *(_QWORD *)(a1 + 3704) = a36;
  WTF::URL::URL(a1 + 3712, a37);
  *(_QWORD *)(a1 + 3752) = a38;
  *(_QWORD *)(a1 + 3760) = a39;
  *(_BYTE *)(a1 + 3768) = a40;
  *(_BYTE *)(a1 + 3769) = a41;
  *(_BYTE *)(a1 + 3770) = a42;
  if (*a4)
  {
    WebCore::ResourceRequestBase::setHTTPBody();
    if (!*(_BYTE *)(a5 + 16))
    {
      __break(0xC471u);
      goto LABEL_33;
    }
    v63 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v63)
    {
      v64 = *(uint64_t **)a5;
      v65 = 8 * v63;
      do
      {
        WebKit::SandboxExtension::create(v64, v76);
        v66 = v76[0];
        if (v76[0])
        {
          v67 = *(unsigned int *)(a1 + 2972);
          if ((_DWORD)v67 == *(_DWORD *)(a1 + 2968))
          {
            WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(a1 + 2960, (unint64_t)v76);
          }
          else
          {
            v68 = *(_QWORD *)(a1 + 2960);
            v76[0] = 0;
            *(_QWORD *)(v68 + 8 * v67) = v66;
            *(_DWORD *)(a1 + 2972) = v67 + 1;
          }
          v69 = (const char ***)v76[0];
          v76[0] = 0;
          if (v69)
            WTF::RefCounted<WebKit::SandboxExtension>::deref(v69);
        }
        ++v64;
        v65 -= 8;
      }
      while (v65);
    }
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 88));
  if (!WTF::URL::protocolIs())
    return a1;
  if (!*(_BYTE *)(a6 + 8))
  {
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x1970FA97CLL);
  }
  WebKit::SandboxExtension::create((uint64_t *)a6, v76);
  v70 = v76[0];
  v76[0] = 0;
  v71 = *(const char ****)(a1 + 2976);
  *(_QWORD *)(a1 + 2976) = v70;
  if (v71)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v71);
    v72 = (const char ***)v76[0];
    v76[0] = 0;
    if (v72)
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v72);
  }
  return a1;
}

unsigned int *WebKit::NetworkResourceLoader::bufferingTimerFired(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  WebCore::SharedBufferBuilder *v3;
  WebCore::ContentFilter *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unsigned int *v13;
  _QWORD *v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  unsigned int *v19;
  unsigned int *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  WebCore::SharedBuffer *v26;
  unsigned int *v27;
  WebCore::SharedBuffer *v28;
  IPC::Encoder *v29;

  v1 = *((_QWORD *)this + 517);
  if (v1 && *(_QWORD *)(v1 + 48))
  {
    v2 = this;
    v3 = (WebCore::SharedBufferBuilder *)(this + 1034);
    WebCore::SharedBufferBuilder::takeAsContiguous((WebCore::SharedBufferBuilder *)(this + 1034));
    v4 = (WebCore::ContentFilter *)*((_QWORD *)v2 + 599);
    if (!v4 || WebCore::ContentFilter::continueAfterDataReceived(v4, v28))
    {
      v25 = *((_QWORD *)v28 + 6);
      do
        v5 = __ldaxr((unsigned int *)v28);
      while (__stlxr(v5 + 1, (unsigned int *)v28));
      v26 = v28;
      v27 = 0;
      v6 = *((_QWORD *)v2 + 516);
      v7 = (*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 + 2) + 56))(v2 + 4);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 2667;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v29 = (IPC::Encoder *)v8;
      IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v8, (IPC::SharedBufferReference *)&v25);
      v9 = *(_QWORD *)(v8 + 544);
      v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
      v11 = v10 + 8;
      v12 = *(_QWORD *)(v8 + 552);
      if (v12 < v10 + 8)
      {
        v22 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v23 = v22;
          v22 *= 2;
        }
        while (v23 < v11);
        this = (unsigned int *)mmap(0, v23, 3, 4098, -1, 0);
        if (this == (unsigned int *)-1)
        {
          __break(0xC471u);
          return this;
        }
        v13 = this;
        memcpy(this, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
        v24 = *(void **)(v8 + 528);
        if (v24 != (void *)(v8 + 16))
          munmap(v24, *(_QWORD *)(v8 + 552));
        *(_QWORD *)(v8 + 528) = v13;
        *(_QWORD *)(v8 + 552) = v23;
        v9 = *(_QWORD *)(v8 + 544);
      }
      else
      {
        v13 = *(unsigned int **)(v8 + 528);
      }
      bzero((char *)v13 + v9, v10 - v9);
      *(_QWORD *)(v8 + 544) = v11;
      v14 = (_QWORD *)(*(_QWORD *)(v8 + 528) + v10);
      *(_QWORD *)(v8 + 536) = v14 + 1;
      *v14 = v6;
      (*(void (**)(unsigned int *, IPC::Encoder **, _QWORD))(*((_QWORD *)v2 + 2) + 32))(v2 + 4, &v29, 0);
      v16 = v29;
      v29 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v15);
        WTF::fastFree(v17, v18);
      }
      v19 = v27;
      v27 = 0;
      if (v19)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v19);
      v20 = (unsigned int *)v26;
      v26 = 0;
      if (v20)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v15);
    }
    WebCore::SharedBufferBuilder::empty(v3);
    *((_QWORD *)v2 + 516) = 0;
    this = (unsigned int *)v28;
    v28 = 0;
    if (this)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(this, v21);
  }
  return this;
}

WTF::StringImpl **WebKit::NetworkLoadChecker::setParentCrossOriginEmbedderPolicy(WebKit::NetworkLoadChecker *this, const WebCore::CrossOriginEmbedderPolicy *a2)
{
  *((_WORD *)this + 148) = *(_WORD *)a2;
  WTF::String::operator=((WTF::StringImpl **)this + 38, (const WebCore::CrossOriginEmbedderPolicy *)((char *)a2 + 8));
  return WTF::String::operator=((WTF::StringImpl **)this + 39, (const WebCore::CrossOriginEmbedderPolicy *)((char *)a2 + 16));
}

WTF::StringImpl **WebKit::NetworkLoadChecker::setCrossOriginEmbedderPolicy(WebKit::NetworkLoadChecker *this, const WebCore::CrossOriginEmbedderPolicy *a2)
{
  *((_WORD *)this + 160) = *(_WORD *)a2;
  WTF::String::operator=((WTF::StringImpl **)this + 41, (const WebCore::CrossOriginEmbedderPolicy *)((char *)a2 + 8));
  return WTF::String::operator=((WTF::StringImpl **)this + 42, (const WebCore::CrossOriginEmbedderPolicy *)((char *)a2 + 16));
}

void `non-virtual thunk to'WebKit::NetworkResourceLoader::~NetworkResourceLoader(WebKit::NetworkResourceLoader *this, WTF::StringImpl *a2)
{
  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 16), a2);
}

{
  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 24), a2);
}

{
  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 32), a2);
}

{
  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 48), a2);
}

{
  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

BOOL WebKit::NetworkResourceLoader::isSynchronous(WebKit::NetworkResourceLoader *this)
{
  return *((_QWORD *)this + 519) != 0;
}

void WebKit::NetworkResourceLoader::start(WebKit::NetworkResourceLoader *this)
{
  WebKit::NetworkResourceLoader::startRequest(this, (WebKit::NetworkResourceLoader *)((char *)this + 168));
}

unint64_t WebKit::NetworkResourceLoader::validateCacheEntryForMaxAgeCapValidation(WebKit::NetworkResourceLoader *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::NetworkStorageSession *v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (!*((_QWORD *)this + 535))
    goto LABEL_11;
  WebCore::ResourceResponseBase::httpHeaderField();
  WebCore::ResourceResponseBase::httpHeaderField();
  v8 = WTF::equal(v18, v17, v6);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v7);
    else
      *(_DWORD *)v17 -= 2;
  }
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebKit::NetworkCache::Storage::remove(*(WebKit::NetworkCache::Storage **)(*((_QWORD *)this + 532) + 8), *((const WebKit::NetworkCache::Key **)this + 535));
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 535, 0);
  v10 = 0;
  v11 = 0;
  if ((v8 & 1) == 0)
  {
LABEL_11:
    v12 = *((_QWORD *)this + 482);
    v13 = *(_QWORD *)(v12 + 72);
    v18 = *(WTF::StringImpl **)(v12 + 80);
    v14 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 216), &v18);
    if (v14)
    {
      v15 = WebCore::NetworkStorageSession::maxAgeCacheCap(v14, a2);
      v10 = v15 & 0xFFFFFFFFFFFFFF00;
      v11 = v15;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
  }
  return v11 | v10;
}

void WebKit::NetworkResourceLoader::dispatchWillSendRequestForCacheEntry(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  const void *v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  _QWORD *v20;
  CFTypeRef v21[24];
  CFTypeRef v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  _BOOL4 v34;
  __int16 v35;
  int v36;
  __int16 v37;
  _BOOL4 v38;
  CFTypeRef cf;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 88);
    v9 = *(_QWORD *)(a1 + 96);
    v10 = *(_QWORD *)(a1 + 3032);
    v11 = *(unsigned __int8 *)(a1 + 315) == 1;
    v12 = *(unsigned __int8 *)(a1 + 3072);
    v13 = *(_QWORD *)(a1 + 4152) != 0;
    *(_DWORD *)buf = 134219776;
    v24 = a1;
    v25 = 2048;
    v26 = v7;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v9;
    v31 = 2048;
    v32 = v10;
    v33 = 1024;
    v34 = v11;
    v35 = 1024;
    v36 = v12;
    v37 = 1024;
    v38 = v13;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::dispatchWillSendRequestForCacheEntry:", buf, 0x46u);
  }
  *(_BYTE *)(a1 + 4288) = 1;
  if (!*(_BYTE *)(*a3 + 552))
    __break(1u);
  WebCore::ResourceRequest::ResourceRequest(v21, (const WebCore::ResourceRequest *)(*a3 + 352));
  v14 = *a3;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (const WebCore::ResourceResponseBase *)(v14 + 80));
  v15 = *(const void **)(v14 + 320);
  cf = v15;
  if (v15)
    CFRetain(v15);
  v40 = *(_BYTE *)(v14 + 328);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = off_1E34C0488;
  v20 = v16;
  WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(a1, a2, v21, buf, 0, &v20);
  if (v20)
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v17);
  v19 = v22;
  v22 = 0;
  if (v19)
    CFRelease(v19);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v21);
}

uint64_t *WebKit::NetworkResourceLoader::didFailLoading(WebKit::NetworkResourceLoader *this, const WebCore::ResourceError *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  NSObject *log;
  WTF::StringImpl *v34[15];
  uint64_t *v35[4];
  _BYTE buf[24];
  _BYTE v37[18];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BOOL4 v45;
  __int16 v46;
  _BOOL4 v47;
  __int16 v48;
  _BOOL4 v49;
  __int16 v50;
  _BOOL4 v51;
  __int16 v52;
  _BOOL4 v53;
  __int16 v54;
  int v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
  {
    v5 = *((_QWORD *)this + 10);
    v6 = *((_QWORD *)this + 11);
    v7 = *((_QWORD *)this + 12);
    v8 = *((_QWORD *)this + 379);
    v9 = *((unsigned __int8 *)this + 315) == 1;
    v10 = *((unsigned __int8 *)this + 3072);
    log = v4;
    v11 = *((_QWORD *)this + 519) != 0;
    v12 = *((unsigned __int8 *)a2 + 60);
    v31 = v12 == 4;
    v32 = *((_QWORD *)this + 547) != 0;
    v13 = v12 == 3;
    v30 = v12 == 2;
    MEMORY[0x19AEB7BFC](a2);
    v14 = *((_DWORD *)a2 + 14);
    *(_DWORD *)buf = 134221056;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)v37 = v6;
    *(_WORD *)&v37[8] = 2048;
    *(_QWORD *)&v37[10] = v7;
    v38 = 2048;
    v39 = v8;
    v40 = 1024;
    v41 = v9;
    v42 = 1024;
    v43 = v10;
    v44 = 1024;
    v45 = v11;
    v46 = 1024;
    v47 = v32;
    v48 = 1024;
    v49 = v31;
    v50 = 1024;
    v51 = v13;
    v52 = 1024;
    v53 = v30;
    v54 = 1024;
    v55 = v14;
    _os_log_error_impl(&dword_196BCC000, log, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didFailLoading: (wasServiceWorkerLoad=%d, isTimeout=%d, isCancellation=%d, isAccessControl=%d, errorCode=%d)", buf, 0x64u);
  }
  if (*((_BYTE *)this + 4328))
    WebKit::NetworkConnectionToWebProcess::removeNetworkLoadInformation(*((_QWORD *)this + 482), *((_QWORD *)this + 379));
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 534, 0);
  v15 = *((_QWORD *)this + 519);
  if (v15)
  {
    WebCore::ResourceError::operator=(v15 + 464, (uint64_t)a2);
    v18 = (_QWORD *)*((_QWORD *)this + 519);
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf);
    WebKit::sendReplyToSynchronousRequest(v18, 0, (__int128 *)buf);
    WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf, v19);
  }
  else
  {
    v16 = *(_QWORD *)(*((_QWORD *)this + 482) + 64);
    if (v16)
    {
      if (*((_QWORD *)this + 547))
      {
        *(_QWORD *)buf = a2;
        IPC::Connection::send<Messages::WebResourceLoader::DidFailServiceWorkerLoad>(v16, (WebCore::ResourceError **)buf, *((_QWORD *)this + 379));
      }
      else
      {
        *(_QWORD *)buf = a2;
        IPC::Connection::send<Messages::WebResourceLoader::DidFailResourceLoad>(v16, (WebCore::ResourceError **)buf, *((_QWORD *)this + 379));
      }
    }
  }
  if (*((_BYTE *)this + 3336) || *((_BYTE *)this + 3848))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 482) + 72) + 32);
    WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)v34, (uint64_t)this);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
    v57 = 0;
    v58 = 0;
    v56 = v56 & 0xF1 | 4;
    v35[0] = (uint64_t *)((char *)this + 80);
    v35[1] = (uint64_t *)v34;
    v35[2] = (uint64_t *)buf;
    v35[3] = (uint64_t *)a2;
    IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidCompleteWithError>(v27, v35);
    WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)buf, v28);
    WebKit::ResourceLoadInfo::~ResourceLoadInfo((WebKit::ResourceLoadInfo *)v34, v29);
  }
  if (WebCore::ResourceError::blockedKnownTracker(a2))
  {
    MEMORY[0x19AEB7BFC](a2);
    v20 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v20)
      *v20 += 2;
    *(_QWORD *)buf = v20;
    v21 = *((_OWORD *)a2 + 2);
    *(_OWORD *)&buf[8] = *((_OWORD *)a2 + 1);
    *(_OWORD *)v37 = v21;
    WebCore::ResourceError::blockedTrackerHostName(a2);
    v23 = v34[0];
    if (!v34[0])
      goto LABEL_21;
    if (*((_DWORD *)v34[0] + 1))
    {
      WTF::URL::setHost();
      v23 = v34[0];
      v34[0] = 0;
      if (!v23)
        goto LABEL_21;
    }
    else
    {
      v34[0] = 0;
    }
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 482) + 72) + 32);
    v34[0] = (WebKit::NetworkResourceLoader *)((char *)this + 80);
    v34[1] = (WTF::StringImpl *)buf;
    IPC::Connection::send<Messages::NetworkProcessProxy::DidBlockLoadToKnownTracker>(v24, (uint64_t **)v34);
    v26 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  return WebKit::NetworkResourceLoader::cleanup((uint64_t)this, 2);
}

void IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidSendRequest>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  char *v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  WebKit::ResourceLoadInfo *v13;
  WTF::StringImpl *v14;
  IPC::Encoder *v15;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 341;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v15 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v4, a2[1]);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v4, (WebCore::ResourceRequest *)a2[2]);
  v6 = a2[3];
  v7 = *((unsigned __int8 *)v6 + 8);
  v8 = IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1);
  if (v7)
  {
    *v8 = 1;
    if (!*((_BYTE *)v6 + 8))
    {
      v13 = (WebKit::ResourceLoadInfo *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::ResourceLoadInfo::~ResourceLoadInfo(v13, v14);
      return;
    }
    IPC::ArgumentCoder<IPC::FormDataReference,void>::encode((IPC::Encoder *)v4, (_DWORD **)v6);
  }
  else
  {
    *v8 = 0;
  }
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 0, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
}

void WebKit::ResourceLoadInfo::~ResourceLoadInfo(WebKit::ResourceLoadInfo *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::DidAllowPrivateTokenUsageByThirdPartyForTesting>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 309;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[2]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::convertToDownload(uint64_t a1, uint64_t a2, WebCore::ResourceRequest *a3, WebCore::ResourceResponseBase *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int16 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  char v32;
  WTF::StringImpl *v33;
  _BYTE buf[12];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  _BOOL4 v44;
  __int16 v45;
  int v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  _BOOL4 v52;
  __int16 v53;
  _BOOL4 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 80);
    v10 = *(_QWORD *)(a1 + 88);
    v11 = *(_QWORD *)(a1 + 96);
    v12 = *(_QWORD *)(a1 + 3032);
    v13 = *(unsigned __int8 *)(a1 + 315) == 1;
    v14 = *(unsigned __int8 *)(a1 + 3072);
    v15 = *(_QWORD *)(a1 + 4152) != 0;
    v16 = *(_QWORD *)(a1 + 3864) != 0;
    v17 = *(_QWORD *)(a1 + 4320) != 0;
    *(_DWORD *)buf = 134220544;
    *(_QWORD *)&buf[4] = a1;
    v35 = 2048;
    v36 = v9;
    v37 = 2048;
    v38 = v10;
    v39 = 2048;
    v40 = v11;
    v41 = 2048;
    v42 = v12;
    v43 = 1024;
    v44 = v13;
    v45 = 1024;
    v46 = v14;
    v47 = 1024;
    v48 = v15;
    v49 = 2048;
    v50 = a2;
    v51 = 1024;
    v52 = v16;
    v53 = 1024;
    v54 = v17;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::convertToDownload: (downloadID=%llu, hasNetworkLoad=%d, hasResponseCompletionHandler=%d)", buf, 0x5Cu);
  }
  result = *(_QWORD *)(a1 + 4376);
  if (!result
    || (result = WebKit::ServiceWorkerFetchTask::convertToDownload(result, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 3856) + 72) + 152), a2, a3, a4), (result & 1) == 0))
  {
    v19 = *(_QWORD *)(a1 + 3864);
    if (v19)
    {
      if (*(_QWORD *)(a1 + 4320))
      {
        v20 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 3856) + 72) + 152);
        *(_QWORD *)(a1 + 3864) = 0;
        *(_QWORD *)buf = v19;
        std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3864), 0);
        WebKit::DownloadManager::convertNetworkLoadToDownload(v20, a2, (uint64_t *)buf, (uint64_t *)(a1 + 4320), a1 + 4160, a3, a4);
        result = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (result)
        {
          WebKit::NetworkLoad::~NetworkLoad((WebKit::NetworkLoad *)result, v21);
          return WTF::fastFree(v22, v23);
        }
      }
    }
    else
    {
      v24 = *(_QWORD *)(a1 + 3856);
      v25 = *(_QWORD *)(v24 + 80);
      v26 = (uint64_t *)(*(_QWORD *)(v24 + 72) + 152);
      v27 = *(_QWORD *)(a1 + 112);
      buf[0] = 0;
      if (v27)
      {
        LODWORD(v38) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v27 + 8);
        LOBYTE(v27) = 1;
      }
      LOBYTE(v39) = v27;
      v28 = *(_WORD *)(a1 + 3024);
      v33 = 0;
      LOBYTE(v31) = 0;
      v32 = 0;
      WebKit::DownloadManager::startDownload(v26, v25, a2, (CFTypeRef *)a3, (WebCore::SecurityOriginData *)buf, v28, (WTF::StringImpl *)&v33, 0, &v31, 0, 0, 0, 0);
      v30 = v33;
      v33 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
      if ((_BYTE)v39 && (_DWORD)v38 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34C0170[v38])(&v33, buf);
      return (uint64_t)WebKit::NetworkResourceLoader::abort((WebKit::NetworkResourceLoader *)a1);
    }
  }
  return result;
}

uint64_t *WebKit::NetworkResourceLoader::abort(WebKit::NetworkResourceLoader *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  WebKit::ServiceWorkerFetchTask *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  CFTypeRef v38;
  const void *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  _QWORD *v43;
  WTF::StringImpl *v44;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v45;
  WTF::StringImpl *v46;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  int v54;
  _BOOL4 v55;
  CFTypeRef v56;
  _BYTE v57[22];
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  __int128 v63;
  int v64;
  CFTypeRef cf;
  uint64_t v66;
  WTF::StringImpl *v67;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 10);
    v4 = *((_QWORD *)this + 11);
    v5 = *((_QWORD *)this + 12);
    v6 = *((_QWORD *)this + 379);
    v7 = *((unsigned __int8 *)this + 315) == 1;
    v8 = *((unsigned __int8 *)this + 3072);
    v9 = *((_QWORD *)this + 519) != 0;
    v10 = *((_QWORD *)this + 483) != 0;
    *(_DWORD *)v57 = 134220032;
    *(_QWORD *)&v57[4] = this;
    *(_WORD *)&v57[12] = 2048;
    *(_QWORD *)&v57[14] = v3;
    v58 = 2048;
    v59 = v4;
    v60 = 2048;
    v61 = v5;
    v62 = 2048;
    *(_QWORD *)&v63 = v6;
    WORD4(v63) = 1024;
    *(_DWORD *)((char *)&v63 + 10) = v7;
    HIWORD(v63) = 1024;
    v64 = v8;
    LOWORD(cf) = 1024;
    *(_DWORD *)((char *)&cf + 2) = v9;
    HIWORD(cf) = 1024;
    LODWORD(v66) = v10;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abort: (hasNetworkLoad=%d)", v57, 0x4Cu);
  }
  if (*((_BYTE *)this + 3078) && (*((_BYTE *)this + 4010) & 1) != 0 && !*((_BYTE *)this + 4329))
  {
    *((_BYTE *)this + 4329) = 1;
    v48 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v49 = *((_QWORD *)this + 10);
      v50 = *((_QWORD *)this + 11);
      v51 = *((_QWORD *)this + 12);
      v52 = *((_QWORD *)this + 379);
      v53 = *((unsigned __int8 *)this + 315) == 1;
      v54 = *((unsigned __int8 *)this + 3072);
      v55 = *((_QWORD *)this + 519) != 0;
      *(_DWORD *)v57 = 134219776;
      *(_QWORD *)&v57[4] = this;
      *(_WORD *)&v57[12] = 2048;
      *(_QWORD *)&v57[14] = v49;
      v58 = 2048;
      v59 = v50;
      v60 = 2048;
      v61 = v51;
      v62 = 2048;
      *(_QWORD *)&v63 = v52;
      WORD4(v63) = 1024;
      *(_DWORD *)((char *)&v63 + 10) = v53;
      HIWORD(v63) = 1024;
      v64 = v54;
      LOWORD(cf) = 1024;
      *(_DWORD *)((char *)&cf + 2) = v55;
      _os_log_impl(&dword_196BCC000, v48, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abort: Keeping network load alive due to keepalive option", v57, 0x46u);
    }
    return (uint64_t *)WebKit::NetworkConnectionToWebProcess::transferKeptAliveLoad(*((WebKit::NetworkConnectionToWebProcess **)this + 482), this);
  }
  else
  {
    v11 = (WebKit::ServiceWorkerFetchTask *)*((_QWORD *)this + 547);
    *((_QWORD *)this + 547) = 0;
    if (v11)
    {
      v12 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *((_QWORD *)this + 10);
        v14 = *((_QWORD *)this + 11);
        v15 = *((_QWORD *)this + 12);
        v16 = *((_QWORD *)this + 379);
        v17 = *((unsigned __int8 *)this + 315) == 1;
        v18 = *((unsigned __int8 *)this + 3072);
        v19 = *((_QWORD *)this + 519) != 0;
        v20 = *((_QWORD *)v11 + 5);
        *(_DWORD *)v57 = 134220032;
        *(_QWORD *)&v57[4] = this;
        *(_WORD *)&v57[12] = 2048;
        *(_QWORD *)&v57[14] = v13;
        v58 = 2048;
        v59 = v14;
        v60 = 2048;
        v61 = v15;
        v62 = 2048;
        *(_QWORD *)&v63 = v16;
        WORD4(v63) = 1024;
        *(_DWORD *)((char *)&v63 + 10) = v17;
        HIWORD(v63) = 1024;
        v64 = v18;
        LOWORD(cf) = 1024;
        *(_DWORD *)((char *)&cf + 2) = v19;
        HIWORD(cf) = 2048;
        v66 = v20;
        _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abort: Cancelling pending service worker fetch task (fetchIdentifier=%llu)", v57, 0x50u);
      }
      WebKit::ServiceWorkerFetchTask::cancelFromClient(v11);
      WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v11);
    }
    v21 = *((_QWORD *)this + 483);
    if (v21)
    {
      if (WebKit::NetworkResourceLoader::canUseCache(this, (const WebCore::ResourceRequest *)(v21 + 3008))
        && (*((_BYTE *)this + 4010) & 1) == 0)
      {
        WebKit::NetworkCache::Cache::remove(*((WebKit::NetworkCache::Storage ***)this + 532), (const WebCore::ResourceRequest *)(*((_QWORD *)this + 483) + 3008));
      }
      v22 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *((_QWORD *)this + 10);
        v24 = *((_QWORD *)this + 11);
        v25 = *((_QWORD *)this + 12);
        v26 = *((_QWORD *)this + 379);
        v27 = *((unsigned __int8 *)this + 315) == 1;
        v28 = *((unsigned __int8 *)this + 3072);
        v29 = *((_QWORD *)this + 519) != 0;
        *(_DWORD *)v57 = 134219776;
        *(_QWORD *)&v57[4] = this;
        *(_WORD *)&v57[12] = 2048;
        *(_QWORD *)&v57[14] = v23;
        v58 = 2048;
        v59 = v24;
        v60 = 2048;
        v61 = v25;
        v62 = 2048;
        *(_QWORD *)&v63 = v26;
        WORD4(v63) = 1024;
        *(_DWORD *)((char *)&v63 + 10) = v27;
        HIWORD(v63) = 1024;
        v64 = v28;
        LOWORD(cf) = 1024;
        *(_DWORD *)((char *)&cf + 2) = v29;
        _os_log_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abort: Cancelling network load", v57, 0x46u);
      }
      v30 = *(_QWORD *)(*((_QWORD *)this + 483) + 2992);
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
    }
    if (*((_QWORD *)this + 519))
    {
      *(_QWORD *)v57 = 0;
      *(_QWORD *)&v57[8] = 0;
      WTF::URL::invalidate((WTF::URL *)&v57[8]);
      HIDWORD(v63) = 0;
      LOWORD(v64) = 3;
      cf = 0;
      LOBYTE(v66) = 1;
      v32 = *((_QWORD *)this + 519);
      v33 = *(_QWORD *)v57;
      *(_QWORD *)((char *)&v63 + 4) = 0;
      *(_QWORD *)v57 = 0;
      v34 = *(WTF::StringImpl **)(v32 + 464);
      *(_QWORD *)(v32 + 464) = v33;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v31);
        else
          *(_DWORD *)v34 -= 2;
      }
      WTF::URL::operator=(v32 + 472, (WTF::StringImpl *)&v57[8]);
      v36 = *(_QWORD *)((char *)&v63 + 4);
      *(_QWORD *)((char *)&v63 + 4) = 0;
      v37 = *(WTF::StringImpl **)(v32 + 512);
      *(_QWORD *)(v32 + 512) = v36;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v35);
        else
          *(_DWORD *)v37 -= 2;
      }
      *(_DWORD *)(v32 + 520) = HIDWORD(v63);
      *(_WORD *)(v32 + 524) = v64;
      v38 = cf;
      cf = 0;
      v39 = *(const void **)(v32 + 528);
      *(_QWORD *)(v32 + 528) = v38;
      if (v39)
      {
        CFRelease(v39);
        v56 = cf;
        *(_BYTE *)(v32 + 536) = v66;
        cf = 0;
        if (v56)
          CFRelease(v56);
      }
      else
      {
        *(_BYTE *)(v32 + 536) = v66;
        cf = 0;
      }
      v40 = *(WTF::StringImpl **)((char *)&v63 + 4);
      *(_QWORD *)((char *)&v63 + 4) = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v35);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = *(WTF::StringImpl **)&v57[8];
      *(_QWORD *)&v57[8] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v35);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *(WTF::StringImpl **)v57;
      *(_QWORD *)v57 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v35);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = (_QWORD *)*((_QWORD *)this + 519);
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v57);
      WebKit::sendReplyToSynchronousRequest(v43, 0, (__int128 *)v57);
      v45 = v68;
      v68 = 0;
      if (v45)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v45);
      v46 = v67;
      v67 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v44);
        else
          *(_DWORD *)v46 -= 2;
      }
    }
    return WebKit::NetworkResourceLoader::cleanup((uint64_t)this, 3);
  }
}

_QWORD *WebKit::sendReplyToSynchronousRequest(_QWORD *result, WebCore::FragmentedSharedBuffer *this, __int128 *a3)
{
  uint64_t *v3;
  _QWORD *v5;
  void *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF::FastMalloc *v13;
  unsigned int *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v17;
  WTF::StringImpl *v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[256];
  size_t *v22;
  _QWORD *v23;
  uint64_t v24;

  v3 = result + 25;
  if (result[25])
  {
    v5 = result;
    v23 = 0;
    v24 = 0;
    if (this && *((_QWORD *)this + 6))
    {
      WebCore::FragmentedSharedBuffer::makeContiguous(this);
      result = (_QWORD *)WebCore::SharedBuffer::data((WebCore::SharedBuffer *)v22);
      v7 = v22[6];
      if (v7)
      {
        v8 = result;
        v9 = HIDWORD(v24);
        v10 = v7 + HIDWORD(v24);
        if (v10 > v24)
        {
          v11 = v24 + ((unint64_t)v24 >> 2);
          if (v11 >= 0x10)
            v12 = v11 + 1;
          else
            v12 = 16;
          if (v12 <= v10)
            v13 = (WTF::FastMalloc *)(v7 + HIDWORD(v24));
          else
            v13 = (WTF::FastMalloc *)v12;
          result = (_QWORD *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v23, v13);
          v9 = HIDWORD(v24);
        }
        if (v10 < v9)
        {
          __break(0xC471u);
          return result;
        }
        memcpy((char *)v23 + v9, v8, v7);
        HIDWORD(v24) = v10;
      }
      v14 = (unsigned int *)v22;
      v22 = 0;
      if (v14)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v6);
    }
    v15 = WTF::fastMalloc((WTF *)0x88);
    WTF::Box<WebCore::NetworkLoadMetrics>::Data::Data<WebCore::NetworkLoadMetrics const&>(v15, a3);
    v17 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)v5[40];
    v5[40] = v15;
    if (v17)
      WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v17, v16);
    WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v21, (const WebCore::ResourceResponse *)(v5 + 26));
    WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v3, (uint64_t)(v5 + 58), (uint64_t)v21, (uint64_t)&v23);
    WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v21, v18);
    v20 = v5[25];
    v5[25] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    result = v23;
    if (v23)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      return (_QWORD *)WTF::fastFree((WTF *)result, v19);
    }
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::transferToNewWebProcess(WebKit::NetworkResourceLoader *this, WebKit::NetworkConnectionToWebProcess *a2, const WebKit::NetworkResourceLoadParameters *a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  char v16;
  WTF::StringImpl *v17;
  IPC::Encoder *v19[17];
  char *v20;
  char v21;
  char v22;
  IPC::Encoder **v23;

  ++*((_DWORD *)a2 + 2);
  v6 = (_DWORD *)*((_QWORD *)this + 482);
  *((_QWORD *)this + 482) = a2;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  *((_QWORD *)this + 379) = *((_QWORD *)a3 + 369);
  *((_QWORD *)this + 10) = *(_QWORD *)a3;
  *((_QWORD *)this + 11) = *((_QWORD *)a3 + 1);
  *((_OWORD *)this + 6) = *((_OWORD *)a3 + 1);
  *((_OWORD *)this + 193) = *((_OWORD *)a3 + 188);
  *((_OWORD *)this + 194) = *((_OWORD *)a3 + 189);
  v7 = *((_QWORD *)this + 548);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8))
    {
      v8 = WebKit::NetworkConnectionToWebProcess::swConnection(a2);
      if (v8)
        WebKit::WebSWServerConnection::controlClient(v8, (uint64_t)this + 80, *(WebCore::SWServerRegistration **)(*((_QWORD *)this + 548) + 8), (WebKit::NetworkResourceLoader *)((char *)this + 168), *(_QWORD *)(*((_QWORD *)this + 482) + 256));
    }
  }
  if (*((double *)this + 549) != 0.0)
  {
    v9 = *((_QWORD *)this + 379);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 2672;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v19[0] = (IPC::Encoder *)v10;
    v11 = *((_QWORD *)this + 549);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*((_QWORD *)this + 2) + 32))((char *)this + 16, v19, 0);
    v13 = v19[0];
    v19[0] = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v14, v15);
    }
  }
  v16 = *((_BYTE *)this + 4904);
  WebKit::NetworkResourceLoader::computeResponseMetrics((WebKit::NetworkResourceLoader *)v19, this, (uint64_t)this + 3872);
  v20 = (char *)this + 3872;
  v21 = v16;
  v22 = 1;
  v23 = v19;
  IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResponse>((uint64_t)this + 16, (uint64_t)&v20);
  return std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v17);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResponse>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2669;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPage::AddConsoleMessage,WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2100;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t std::optional<WebCore::CrossOriginOpenerPolicyEnforcementResult>::operator=[abi:sn180100]<WebCore::CrossOriginOpenerPolicyEnforcementResult,void>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 80))
  {
    WTF::URL::operator=(a1, (WTF::StringImpl *)a2);
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v5;
    if (v6)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v4);
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 56));
    WTF::String::operator=((WTF::StringImpl **)(a1 + 64), (WTF::StringImpl *)(a2 + 64));
    v7 = *(_BYTE *)(a2 + 74);
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    *(_BYTE *)(a1 + 74) = v7;
  }
  else
  {
    WTF::URL::URL(a1, (uint64_t *)a2);
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 40) = v8;
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a1 + 56) = v9;
    v10 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 64) = v10;
    LOWORD(v10) = *(_WORD *)(a2 + 72);
    *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
    *(_WORD *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

uint64_t std::optional<WebCore::ResourceError>::optional[abi:sn180100]<WebCore::ResourceError,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  v5 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  v6 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 80) = 1;
  return a1;
}

uint64_t WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInWebProcessesForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2>(os_unfair_lock_s *a1, int **a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  uint64_t v17[2];
  IPC::Encoder *v18;

  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34C02A8;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 308;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = v9;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v8, (uint64_t)a2[1]);
  v10 = *(_QWORD *)a2[2];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v10;
  v11 = *(_QWORD *)a2[3];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v11;
  v17[0] = (uint64_t)v6;
  v17[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v18, v17, 0, 0);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::ReloadExecutionContextsForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15[2];
  IPC::Encoder *v16;

  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34C02D0;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 331;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v8, *(_QWORD *)a2);
  v9 = **(_QWORD **)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v8, *(uint64_t **)(a2 + 16));
  v15[0] = (uint64_t)v6;
  v15[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v16, v15, 0, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::didReceiveInformationalResponse(uint64_t a1, WebCore::ResourceResponseBase *this)
{
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  result = WebCore::ResourceResponseBase::httpStatusCode(this);
  if ((_DWORD)result == 103)
  {
    v5 = *(_QWORD *)(a1 + 4336);
    if (!v5)
    {
      v5 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v5 = &off_1E34BC470;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1 + 48);
      v6 = *(unsigned int **)(a1 + 56);
      if (v6)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
      }
      *(_QWORD *)(v5 + 8) = v6;
      *(_BYTE *)(v5 + 16) = 0;
      v8 = *(_QWORD *)(a1 + 4336);
      *(_QWORD *)(a1 + 4336) = v5;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        v5 = *(_QWORD *)(a1 + 4336);
      }
    }
    return WebKit::EarlyHintsResourceLoader::handleEarlyHintsResponse(v5, this);
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::addNetworkLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t Information;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x258);
  Information = WebCore::NetworkLoadInformation::NetworkLoadInformation((uint64_t)v6, a3);
  v10 = *(_QWORD *)(a1 + 144);
  v9 = (uint64_t *)(a1 + 144);
  v8 = v10;
  v27 = Information;
  if (v10
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v9, 0), (v8 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == a2)
      {
        v27 = 0;
        std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)&v27, v6);
        return;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v11;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v9 - 16);
      v16 = v18;
    }
  }
  *v16 = a2;
  v20 = (_QWORD *)v16[1];
  v16[1] = v27;
  if (v20)
    std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)(v16 + 1), v20);
  v21 = *v9;
  if (*v9)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 <= 0x400)
  {
    if (3 * v26 > 4 * v25)
      return;
LABEL_26:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v9, v16);
    return;
  }
  if (v26 <= 2 * v25)
    goto LABEL_26;
}

void WebCore::NetworkLoadInformation::~NetworkLoadInformation(WebCore::NetworkLoadInformation *this, void *a2)
{
  WTF::StringImpl *v3;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v4;
  WTF::StringImpl *v5;
  const void *v6;
  const void *v7;

  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 584, a2);
  v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v4)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (const void *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::NetworkLoadInformation *)((char *)this + 200), v3);
  v7 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

uint64_t WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"audio/", 6uLL))
      return 1;
    result = *a1;
    if (!*a1)
      return result;
    if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"video/", 6uLL))
    {
      return 1;
    }
    else
    {
      result = *a1;
      if (*a1)
        return WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, "application/octet-stream", 0x18uLL);
    }
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0x60);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = &off_1E34C02F8;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  WTF::URL::URL(v4 + 24, a2 + 2);
  v7 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(v4 + 64) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 16);
  *(_WORD *)(v4 + 76) = *((_WORD *)a2 + 34);
  *(_DWORD *)(v4 + 72) = v7;
  v8 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(v4 + 80) = v8;
  *(_BYTE *)(v4 + 88) = *((_BYTE *)a2 + 80);
  *a1 = v4;
  return a1;
}

uint64_t *WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2::~$_2(uint64_t *a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v3 = (const void *)a1[9];
  a1[9] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), a2);
  return a1;
}

WebCore::ResourceResponse *WebCore::ResourceResponse::ResourceResponse(WebCore::ResourceResponse *this, const WebCore::ResourceResponse *a2)
{
  const void *v4;

  WebCore::ResourceResponseBase::ResourceResponseBase(this, a2);
  v4 = (const void *)*((_QWORD *)a2 + 30);
  *((_QWORD *)this + 30) = v4;
  if (v4)
    CFRetain(v4);
  *((_BYTE *)this + 248) = *((_BYTE *)a2 + 248);
  return this;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied>(uint64_t a1, WebCore::ResourceResponseBase **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2673;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v5, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v5 = *a2;
  *a2 = 0;
  *v4 = &off_1E34C0320;
  v4[1] = v5;
  WTF::URL::URL((uint64_t)(v4 + 2), a2 + 1);
  *a1 = v4;
  return a1;
}

uint64_t *WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3::~$_3(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  v3 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v4 + 8), a2);
  return a1;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0x60);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = &off_1E34C0348;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  WTF::URL::URL(v4 + 24, a2 + 2);
  v7 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(v4 + 64) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 16);
  *(_WORD *)(v4 + 76) = *((_WORD *)a2 + 34);
  *(_DWORD *)(v4 + 72) = v7;
  v8 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(v4 + 80) = v8;
  *(_BYTE *)(v4 + 88) = *((_BYTE *)a2 + 80);
  *a1 = v4;
  return a1;
}

WebCore::TimerBase *WebKit::NetworkSession::addLoaderAwaitingWebProcessTransfer(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  WebCore::TimerBase *v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  WebCore::TimerBase *result;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;

  v4 = *(_QWORD *)(*a2 + 4400);
  v5 = (uint64_t *)(a1 + 504);
  v6 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)WebCore::TimerBase::TimerBase(v6) = off_1E34B3740;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E34C06D8;
  v7[1] = WebKit::NetworkSession::CachedNetworkResourceLoader::expirationTimerFired;
  v7[2] = 0;
  v7[3] = v6;
  *((_QWORD *)v6 + 6) = v7;
  v8 = *a2;
  *a2 = 0;
  *((_QWORD *)v6 + 7) = v8;
  WebCore::TimerBase::start();
  v10 = *(_QWORD *)(a1 + 504);
  if (v10
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5),
        (v10 = *v5) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v10 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v4)
        return (WebCore::TimerBase *)std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](v6, v9);
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v11;
      v16 = (_QWORD *)(v10 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      v16 = v18;
    }
  }
  result = (WebCore::TimerBase *)v16[1];
  *v16 = v4;
  v16[1] = v6;
  if (result)
    result = (WebCore::TimerBase *)std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](result, v9);
  v21 = *v5;
  if (*v5)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v5;
  if (*v5)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 <= 0x400)
  {
    if (3 * v26 > 4 * v25)
      return result;
    return (WebCore::TimerBase *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5);
  }
  if (v26 <= 2 * v25)
    return (WebCore::TimerBase *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5);
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  uint64_t v18[2];
  IPC::Encoder *v19;

  v5 = *a3;
  v6 = a3[1];
  a3[1] = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34C0398;
  v7[1] = v5;
  v7[2] = v6;
  v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 348;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v19 = (IPC::Encoder *)v9;
  v10 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v10;
  v11 = a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v11;
  LOBYTE(v11) = *((_BYTE *)a2 + 16);
  *IPC::Encoder::grow((IPC::Encoder *)v9, 1uLL, 1) = (char)v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2[3]);
  v12 = *a2[4];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v12;
  v18[0] = (uint64_t)v7;
  v18[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v19, v18, 0, 0);
  v14 = v18[0];
  v18[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *WebKit::NetworkConnectionToWebProcess::addNetworkLoadInformationMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _DWORD *v30;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *result;

  v6 = (uint64_t *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 144);
  if (v5
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 144), 0), (v5 = *v6) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (_QWORD *)(v5 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    *v12 = a2;
    v16 = WTF::fastMalloc((WTF *)0x258);
    bzero((void *)v16, 0x258uLL);
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v16);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v16 + 200));
    *(_QWORD *)(v16 + 440) = 0;
    *(_BYTE *)(v16 + 448) = 0;
    *(_BYTE *)(v16 + 338) = *(_BYTE *)(v16 + 338) & 0xF1 | 4;
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(v16 + 456));
    *(_OWORD *)(v16 + 584) = 0u;
    v17 = (_QWORD *)v12[1];
    v12[1] = v16;
    if (v17)
      std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)(v12 + 1), v17);
    v18 = *v6;
    if (*v6)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *v6;
    if (*v6)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_23;
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_23;
    }
    v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v12);
    goto LABEL_23;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != a2)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (_QWORD *)(v5 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v12 = v14;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  v24 = v12[1];
  v25 = *(_OWORD *)(a3 + 32);
  v26 = *(_OWORD *)(a3 + 48);
  v27 = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(v24 + 536) = *(_QWORD *)(a3 + 80);
  v28 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v24 + 456) = *(_OWORD *)a3;
  *(_OWORD *)(v24 + 472) = v28;
  *(_OWORD *)(v24 + 504) = v26;
  *(_OWORD *)(v24 + 520) = v27;
  *(_OWORD *)(v24 + 488) = v25;
  WTF::String::operator=((WTF::StringImpl **)(v24 + 544), (WTF::StringImpl *)(a3 + 88));
  v29 = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(v24 + 568) = *(_QWORD *)(a3 + 112);
  *(_OWORD *)(v24 + 552) = v29;
  v30 = *(_DWORD **)(a3 + 120);
  if (v30)
    ++*v30;
  result = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(v24 + 576);
  *(_QWORD *)(v24 + 576) = v30;
  if (result)
    return WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(result);
  return result;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::logCookieInformation(WebKit::NetworkResourceLoader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const WTF::String **PartyForCookies;
  uint64_t v6;
  const WTF::String **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  __int128 v11;
  char v12;
  __int16 v13;
  char v14;
  const WTF::String *v15;

  v2 = *((_QWORD *)this + 482);
  v3 = *(_QWORD *)(v2 + 72);
  v15 = *(const WTF::String **)(v2 + 80);
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 216), &v15);
  PartyForCookies = (const WTF::String **)WebCore::ResourceRequestBase::firstPartyForCookies((WebKit::NetworkResourceLoader *)((char *)this + 168));
  v6 = WebCore::SameSiteInfo::create();
  v13 = v6;
  v14 = BYTE2(v6);
  v7 = (const WTF::String **)WebCore::ResourceRequestBase::url((WebKit::NetworkResourceLoader *)((char *)this + 168));
  v8 = WebCore::ResourceRequestBase::httpReferrer((WebKit::NetworkResourceLoader *)((char *)this + 168));
  v11 = *((_OWORD *)this + 6);
  v12 = 1;
  WebKit::NetworkResourceLoader::logCookieInformation(v8, (uint64_t)"NetworkResourceLoader", 22, (uint64_t)this, v4, PartyForCookies, (unsigned __int8 *)&v13, v7, &v15, (uint64_t)&v11, *((WTF::String **)this + 11), 1, *((WTF::String **)this + 379), 1);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::ResourceLoadDidCompleteWithError>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 337;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v4, a2[1]);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v4, (WebCore::ResourceResponseBase *)a2[2]);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v4, (WebCore::ResourceError *)a2[3]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::removeNetworkLoadInformation(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 144);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 144), &v7);
  v5 = *(_QWORD *)(a1 + 144);
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      return;
  }
  else
  {
    if (!v4)
      return;
    v6 = 0;
  }
  if (v6 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
}

uint64_t WebCore::ResourceError::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  const void *v7;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 48), (WTF::StringImpl *)(a2 + 48));
  v5 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  if (v6)
    CFRetain(*(CFTypeRef *)(a2 + 64));
  v7 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  if (v7)
    CFRelease(v7);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t WebKit::NetworkResourceLoader::messageSenderConnection(WebKit::NetworkResourceLoader *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 482) + 64);
}

IPC::Encoder *IPC::Connection::send<Messages::WebResourceLoader::DidFailServiceWorkerLoad>(uint64_t a1, WebCore::ResourceError **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2665;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::messageSenderDestinationID(WebKit::NetworkResourceLoader *this)
{
  return *((_QWORD *)this + 379);
}

IPC::Encoder *IPC::Connection::send<Messages::WebResourceLoader::DidFailResourceLoad>(uint64_t a1, WebCore::ResourceError **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2664;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::DidBlockLoadToKnownTracker>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 310;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkResourceLoader::didBlockAuthenticationChallenge(WebKit::NetworkResourceLoader *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  _BYTE v18[12];
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  _BOOL4 v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BOOL4 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 10);
    v4 = *((_QWORD *)this + 11);
    v5 = *((_QWORD *)this + 12);
    v6 = *((_QWORD *)this + 379);
    v7 = *((unsigned __int8 *)this + 315) == 1;
    v8 = *((unsigned __int8 *)this + 3072);
    v9 = *((_QWORD *)this + 519) != 0;
    *(_DWORD *)v18 = 134219776;
    *(_QWORD *)&v18[4] = this;
    v19 = 2048;
    v20 = v3;
    v21 = 2048;
    v22 = v4;
    v23 = 2048;
    v24 = v5;
    v25 = 2048;
    v26 = v6;
    v27 = 1024;
    v28 = v7;
    v29 = 1024;
    v30 = v8;
    v31 = 1024;
    v32 = v9;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didBlockAuthenticationChallenge:", v18, 0x46u);
  }
  v11 = *((_QWORD *)this + 2);
  v10 = (char *)this + 16;
  v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 2663;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  *(_QWORD *)v18 = v13;
  (*(void (**)(char *, _BYTE *, _QWORD))(*(_QWORD *)v10 + 32))(v10, v18, 0);
  result = *(IPC::Encoder **)v18;
  *(_QWORD *)v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::didReceiveChallenge(WTF::StringImpl *this, const WebCore::AuthenticationChallenge *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12[7];
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  IPC::Encoder *v15;

  v3 = this;
  if (*((_BYTE *)this + 3336) || *((_BYTE *)this + 3848))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 482) + 72) + 32);
    WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)v12, (uint64_t)this);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 339;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v15 = (IPC::Encoder *)v5;
    v6 = *((_QWORD *)v3 + 10);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
    IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v5, v12);
    IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode((IPC::Encoder *)v5, a2);
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v15, 0, 0);
    v8 = v15;
    v15 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    this = v13;
    v13 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void WebKit::NetworkResourceLoader::willSendRedirectedRequest(uint64_t a1, WebCore::ResourceRequestBase *a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t *a5)
{
  WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(a1, a2, a3, a4, 0, a5);
}

void WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(uint64_t a1, WebCore::ResourceRequestBase *a2, WebCore::ResourceRequestBase *a3, uint64_t a4, char a5, uint64_t *a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  __int128 v23;
  WebCore::PrivateClickMeasurement *v24;
  const WTF::URL *v25;
  const WebCore::ResourceResponse *v26;
  uint64_t v27;
  CFTypeRef v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  const WTF::URL *PartyForCookies;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  int v41;
  unint64_t v42;
  char v43;
  char v44;
  WTF::StringImpl *v45;
  WebKit::NetworkCache::Entry *v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  _DWORD *v53;
  __int128 v54;
  WTF::StringImpl *v55;
  CFTypeRef v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  CFTypeRef v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF *v64;
  const URL *v65;
  const URL *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  CFTypeRef v71;
  WebKit::NetworkLoadChecker *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL4 v78;
  int v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92[10];
  char v93;
  WebKit::NetworkCache::Entry *v94;
  __int16 v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  WTF::StringImpl *v101;
  char v102;
  uint64_t v103[4];
  char v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  char v108;
  char v109;
  _BYTE buf[32];
  _BYTE v111[28];
  int v112;
  CFTypeRef v113;
  char v114;
  char v115;
  _DWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  char v119;
  int v120;
  char v121;
  uint64_t v122;
  CFTypeRef cf;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v12 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(_QWORD *)(a1 + 88);
    v15 = *(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 3032);
    v17 = *(unsigned __int8 *)(a1 + 315) == 1;
    v18 = *(unsigned __int8 *)(a1 + 3072);
    v19 = *(_QWORD *)(a1 + 4152) != 0;
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v14;
    *(_WORD *)v111 = 2048;
    *(_QWORD *)&v111[2] = v15;
    *(_WORD *)&v111[10] = 2048;
    *(_QWORD *)&v111[12] = v16;
    *(_WORD *)&v111[20] = 1024;
    *(_DWORD *)&v111[22] = v17;
    *(_WORD *)&v111[26] = 1024;
    v112 = v18;
    LOWORD(v113) = 1024;
    *(_DWORD *)((char *)&v113 + 2) = v19;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest:", buf, 0x46u);
  }
  ++*(_DWORD *)(a1 + 4144);
  WebCore::ResourceResponseBase::operator=(a1 + 4408, a4);
  v20 = *(_QWORD *)(a4 + 240);
  if (v20)
    CFRetain(*(CFTypeRef *)(a4 + 240));
  v21 = *(const void **)(a1 + 4648);
  *(_QWORD *)(a1 + 4648) = v20;
  if (v21)
    CFRelease(v21);
  *(_BYTE *)(a1 + 4656) = *(_BYTE *)(a4 + 248);
  if ((*(_BYTE *)(a1 + 4672) & 1) == 0)
  {
    v22 = WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a4);
    WTF::String::operator=((WTF::StringImpl **)(a1 + 4664), (WTF::StringImpl *)v22);
    v23 = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(a1 + 4672) = *(_OWORD *)(v22 + 8);
    *(_OWORD *)(a1 + 4688) = v23;
  }
  if (*(_QWORD *)(a1 + 4792) && (WebCore::ContentFilter::continueAfterWillSendRequest() & 1) == 0)
  {
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3864), 0);
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
    v27 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v27 + 16))(v27, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = cf;
    cf = 0;
    if (v28)
      CFRelease(v28);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  }
  else
  {
    LOBYTE(v95) = 0;
    v109 = 0;
    v24 = (WebCore::PrivateClickMeasurement *)WebCore::ResourceRequestBase::url(a3);
    WebCore::PrivateClickMeasurement::parseAttributionRequest(v24, v25);
    if (v120 == 1)
    {
      if (!*(_QWORD *)buf)
      {
        v41 = 1;
        goto LABEL_51;
      }
      if (*(_DWORD *)(*(_QWORD *)buf + 4))
        WebKit::NetworkResourceLoader::addConsoleMessage((_QWORD *)a1, 14, 2, (uint64_t)buf);
      goto LABEL_50;
    }
    if (!v120)
    {
      v95 = *(_WORD *)buf;
      v96 = buf[2];
      LOBYTE(v97) = 0;
      v98 = 0;
      if (buf[16])
      {
        v29 = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8])
          **(_DWORD **)&buf[8] += 2;
        v97 = v29;
        v98 = 1;
      }
      LOBYTE(v99) = 0;
      v100 = 0;
      if (v111[0])
      {
        v30 = *(_QWORD *)&buf[24];
        if (*(_QWORD *)&buf[24])
          **(_DWORD **)&buf[24] += 2;
        v99 = v30;
        v100 = 1;
      }
      LOBYTE(v101) = 0;
      v102 = 0;
      if (v111[16])
      {
        v31 = *(WTF::StringImpl **)&v111[8];
        if (*(_QWORD *)&v111[8])
          **(_DWORD **)&v111[8] += 2;
        v101 = v31;
        v102 = 1;
      }
      LOBYTE(v103[0]) = 0;
      v104 = 0;
      if (v115)
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>(v103, (uint64_t)&v111[24]);
        v104 = 1;
      }
      LOBYTE(v105) = 0;
      v108 = 0;
      if (v119)
      {
        v32 = v116;
        if (v116)
          *v116 += 2;
        v105 = v32;
        v33 = v117;
        if (v117)
          *v117 += 2;
        v106 = v33;
        v34 = v118;
        if (v118)
          *v118 += 2;
        v107 = v34;
        v108 = 1;
      }
      v109 = 1;
      PartyForCookies = (const WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(a2);
      WebCore::RegistrableDomain::RegistrableDomain(v92, PartyForCookies);
      if (!v109)
      {
        __break(1u);
        goto LABEL_129;
      }
      v37 = v92[0];
      if (v102)
      {
        v92[0] = 0;
        v38 = v101;
        v101 = v37;
        if (!v38)
          goto LABEL_50;
        v39 = *(_DWORD *)v38 - 2;
        if (*(_DWORD *)v38 != 2)
          goto LABEL_48;
        WTF::StringImpl::destroy(v38, v36);
        v38 = v92[0];
        v92[0] = 0;
        if (!v38)
          goto LABEL_50;
        v39 = *(_DWORD *)v38 - 2;
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v40);
        else
LABEL_48:
          *(_DWORD *)v38 = v39;
      }
      else
      {
        v101 = v92[0];
        v102 = 1;
      }
LABEL_50:
      v41 = v120;
      if (v120 == -1)
      {
LABEL_52:
        if ((a5 & 1) == 0)
        {
          v42 = WebKit::NetworkResourceLoader::validateCacheEntryForMaxAgeCapValidation((WebKit::NetworkResourceLoader *)a1, a2, (const WebCore::ResourceRequest *)a4, v26);
          v44 = v43;
          if (WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)a4) == 1
            && WebKit::NetworkResourceLoader::canUseCache((WebKit::NetworkResourceLoader *)a1, a2)
            && !*(_QWORD *)(a1 + 4280)
            && *(_DWORD *)(a1 + 4144) <= 5u)
          {
            WebKit::NetworkCache::Cache::storeRedirect(a2, (WebCore::ResourceRequest *)a4, *(WebKit::NetworkCache::Cache **)(a1 + 4256), a3, v42, v44, (uint64_t *)&v94);
            v46 = v94;
            v94 = 0;
            if (v46)
            {
              WebKit::NetworkCache::Entry::~Entry(v46, v45);
              WTF::fastFree(v47, v48);
            }
          }
        }
        if (*(_BYTE *)(a1 + 315) != 1
          || !WebKit::NetworkResourceLoader::shouldInterruptNavigationForCrossOriginEmbedderPolicy((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)a4))
        {
          WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)a4, v92);
          if (v93)
          {
            WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)v92);
            WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
            v59 = *a6;
            *a6 = 0;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v59 + 16))(v59, buf);
            (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
            v60 = cf;
            cf = 0;
            if (v60)
              CFRelease(v60);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
            std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v92, v61);
          }
          else
          {
            std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v92, v58);
            WebCore::ResourceRequestBase::httpHeaderField();
            if (*(_QWORD *)buf)
            {
              if (WTF::linkedOnOrAfterSDKWithBehavior())
              {
                v64 = (WTF *)WebCore::ResourceRequestBase::url(a2);
                v65 = (const URL *)WebCore::ResourceRequestBase::url(a3);
                if (WTF::protocolHostAndPortAreEqual(v64, v65, v66))
                  WebCore::ResourceRequestBase::setHTTPHeaderField();
              }
              v67 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, v63);
                else
                  *(_DWORD *)v67 -= 2;
              }
            }
            v72 = *(WebKit::NetworkLoadChecker **)(a1 + 4304);
            if (v72)
            {
              if (v109)
                *((_BYTE *)v72 + 528) = 1;
              WebKit::NetworkLoadChecker::storeRedirectionIfNeeded(v72, a2, (const WebCore::ResourceResponse *)a4);
              v73 = off_1ECE713E8;
              if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
              {
                v74 = *(_QWORD *)(a1 + 80);
                v75 = *(_QWORD *)(a1 + 88);
                v76 = *(_QWORD *)(a1 + 96);
                v77 = *(_QWORD *)(a1 + 3032);
                v78 = *(unsigned __int8 *)(a1 + 315) == 1;
                v79 = *(unsigned __int8 *)(a1 + 3072);
                v80 = *(_QWORD *)(a1 + 4152) != 0;
                *(_DWORD *)buf = 134219776;
                *(_QWORD *)&buf[4] = a1;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v74;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = v75;
                *(_WORD *)v111 = 2048;
                *(_QWORD *)&v111[2] = v76;
                *(_WORD *)&v111[10] = 2048;
                *(_QWORD *)&v111[12] = v77;
                *(_WORD *)&v111[20] = 1024;
                *(_DWORD *)&v111[22] = v78;
                *(_WORD *)&v111[26] = 1024;
                v112 = v79;
                LOWORD(v113) = 1024;
                *(_DWORD *)((char *)&v113 + 2) = v80;
                _os_log_impl(&dword_196BCC000, v73, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: Checking redirect using NetworkLoadChecker", buf, 0x46u);
              }
              ++*(_DWORD *)(a1 + 8);
              *(_QWORD *)buf = a1;
              *(_QWORD *)&buf[8] = a1;
              buf[16] = *(_BYTE *)(*(_QWORD *)(a1 + 4304) + 64);
              buf[24] = 0;
              v121 = 0;
              if (v109)
              {
                std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)&buf[24], (uint64_t)&v95);
                v121 = 1;
              }
              v81 = *a6;
              *a6 = 0;
              v122 = v81;
              v82 = *(_QWORD *)(a1 + 4304);
              v83 = a1 + 24;
              v84 = WTF::fastMalloc((WTF *)0xB0);
              *(_QWORD *)v84 = off_1E34C03E8;
              *(_QWORD *)(v84 + 8) = *(_QWORD *)buf;
              v85 = *(_QWORD *)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              *(_QWORD *)(v84 + 16) = v85;
              *(_BYTE *)(v84 + 24) = buf[16];
              *(_BYTE *)(v84 + 32) = 0;
              *(_BYTE *)(v84 + 160) = 0;
              if (v121)
              {
                std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v84 + 32, (uint64_t)&buf[24]);
                *(_BYTE *)(v84 + 160) = 1;
              }
              v86 = v122;
              v122 = 0;
              *(_QWORD *)(v84 + 168) = v86;
              v92[0] = (WTF::StringImpl *)v84;
              WebKit::NetworkLoadChecker::checkRedirection(v82, (uint64_t)a2, (uint64_t)a3, (WebCore::ResourceResponse *)a4, v83, v92);
              v88 = v92[0];
              v92[0] = 0;
              if (v88)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v88 + 8))(v88);
              v89 = v122;
              v122 = 0;
              if (v89)
                (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
              std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buf[24], v87);
              v90 = *(_QWORD *)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v90)
                WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v90 + 8), v62);
            }
            else
            {
              WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(a1, a2, a3, a4, (uint64_t)&v95, a6);
            }
          }
          goto LABEL_126;
        }
        v49 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
        if (v49)
        {
          if (v49 == 1)
          {
            v50 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v50 = *(WTF::StringImpl **)buf;
          }
LABEL_64:
          v51 = WebCore::ResourceRequestBase::url(a3);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v52 = *(WTF::StringImpl **)buf;
          if (v50)
            *(_DWORD *)v50 += 2;
          *(_QWORD *)buf = v50;
          v53 = *(_DWORD **)v51;
          if (*(_QWORD *)v51)
            *v53 += 2;
          *(_QWORD *)&buf[8] = v53;
          v54 = *(_OWORD *)(v51 + 24);
          *(_OWORD *)&buf[16] = *(_OWORD *)(v51 + 8);
          *(_OWORD *)v111 = v54;
          if (v52)
            *(_DWORD *)v52 += 2;
          *(_QWORD *)&v111[16] = v52;
          *(_DWORD *)&v111[24] = 0;
          LOWORD(v112) = 2;
          v113 = 0;
          v114 = 1;
          WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)buf);
          v56 = v113;
          v113 = 0;
          if (v56)
            CFRelease(v56);
          v57 = *(WTF::StringImpl **)&v111[16];
          *(_QWORD *)&v111[16] = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v55);
            else
              *(_DWORD *)v57 -= 2;
          }
          v68 = *(WTF::StringImpl **)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          if (v68)
          {
            if (*(_DWORD *)v68 == 2)
              WTF::StringImpl::destroy(v68, v55);
            else
              *(_DWORD *)v68 -= 2;
          }
          v69 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
            {
              WTF::StringImpl::destroy(v69, v55);
              if (!v52)
                goto LABEL_100;
LABEL_98:
              if (*(_DWORD *)v52 == 2)
              {
                WTF::StringImpl::destroy(v52, v55);
                if (!v50)
                  goto LABEL_106;
                goto LABEL_103;
              }
              *(_DWORD *)v52 -= 2;
LABEL_100:
              if (!v50)
                goto LABEL_106;
LABEL_103:
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v55);
              else
                *(_DWORD *)v50 -= 2;
LABEL_106:
              WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
              v70 = *a6;
              *a6 = 0;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 16))(v70, buf);
              (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
              v71 = cf;
              cf = 0;
              if (v71)
                CFRelease(v71);
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
LABEL_126:
              std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v95, v62);
              return;
            }
            *(_DWORD *)v69 -= 2;
          }
          if (!v52)
            goto LABEL_100;
          goto LABEL_98;
        }
LABEL_129:
        v50 = 0;
        goto LABEL_64;
      }
LABEL_51:
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34C0180[v41])(v92, buf);
      goto LABEL_52;
    }
    v91 = std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::NetworkResourceLoader::willSendServiceWorkerRedirectedRequest(v91);
  }
}

uint64_t WebKit::NetworkResourceLoader::willSendServiceWorkerRedirectedRequest(uint64_t a1, WebCore::ResourceRequestBase *a2, WebCore::ResourceRequestBase *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E34C03C0;
  v10 = v8;
  WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(a1, a2, a3, a4, 1, (uint64_t *)&v10);
  result = (uint64_t)v10;
  if (v10)
    return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

IPC::Encoder *WebKit::NetworkResourceLoader::addConsoleMessage(_QWORD *a1, char a2, char a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  IPC::Encoder *v18;

  v11 = a1[379];
  v12 = 1;
  v13 = a1 + 12;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = &v11;
  v5 = a1[11];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2100;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v18 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v6, (uint64_t)&v13);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(a1[2] + 32))(a1 + 2, &v18, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(uint64_t a1, WebCore *a2, WebCore::ResourceRequestBase *this, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _DWORD **v27;
  uint64_t v28;
  WebCore *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  const WTF::URL *v39;
  uint64_t PartyForCookies;
  WTF::StringImpl *v41;
  __int128 v42;
  WebCore::PrivateClickMeasurement *v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  const WTF::URL *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  const WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _DWORD *v68;
  __int128 v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  __int128 v84;
  WTF::StringImpl *v85;
  double v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  WTF *v100;
  void *v101;
  _QWORD *v102;
  IPC::Encoder *v103;
  WTF *v104;
  void *v105;
  CFTypeRef v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  __int128 v111;
  __int128 v112;
  WTF::StringImpl *v113;
  _QWORD *v114;
  WTF *v115[2];
  double v116[4];
  char v117[128];
  char v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  _BYTE buf[24];
  _BYTE v131[28];
  __int16 v132;
  _BYTE v133[10];
  __int16 v134;
  _BOOL4 v135;
  __int16 v136;
  __int128 v137;
  __int128 v138;
  char v139;
  __int128 v140;
  uint64_t v141;
  char v142;
  _DWORD *v143;
  __int128 v144;
  __int128 v145;
  WTF::StringImpl *v146;
  _BYTE v147[40];
  WTF::StringImpl *v148;
  CFTypeRef cf[2];
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  unsigned __int8 v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  WebCore::ResourceRequestBase::setIsAppInitiated(this);
  v12 = (WTF::StringImpl *)off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(_QWORD *)(a1 + 88);
    v15 = *(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 3032);
    v17 = *(unsigned __int8 *)(a1 + 315) == 1;
    v18 = *(unsigned __int8 *)(a1 + 3072);
    v19 = *(_QWORD *)(a1 + 4152) != 0;
    v20 = *(unsigned __int8 *)(a1 + 4329);
    v21 = *(unsigned __int8 *)(a5 + 128);
    *(_DWORD *)buf = 134220288;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)v131 = v14;
    *(_WORD *)&v131[8] = 2048;
    *(_QWORD *)&v131[10] = v15;
    *(_WORD *)&v131[18] = 2048;
    *(_QWORD *)&v131[20] = v16;
    v132 = 1024;
    *(_DWORD *)v133 = v17;
    *(_WORD *)&v133[4] = 1024;
    *(_DWORD *)&v133[6] = v18;
    v134 = 1024;
    v135 = v19;
    v136 = 1024;
    LODWORD(v137) = v20;
    WORD2(v137) = 1024;
    *(_DWORD *)((char *)&v137 + 6) = v21;
    _os_log_impl(&dword_196BCC000, (os_log_t)v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRedirectedRequest: (m_isKeptAlive=%d, hasAdClickConversion=%d)", buf, 0x52u);
  }
  if (*(_BYTE *)(a5 + 128))
  {
    v22 = *(_QWORD *)(a1 + 3856);
    v23 = *(_QWORD *)(v22 + 72);
    *(_QWORD *)buf = *(_QWORD *)(v22 + 80);
    v24 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 208), buf);
    if (v24)
    {
      v26 = v24;
      v27 = *(_DWORD ***)(a1 + 3864);
      if (v27)
        WebKit::NetworkLoad::attributedBundleIdentifier(v27, *(_QWORD *)(a1 + 80), &v108);
      else
        v108 = 0;
      v28 = *(unsigned __int8 *)(a5 + 128);
      if (*(_BYTE *)(a5 + 128))
      {
        v29 = (WebCore *)WebCore::ResourceRequestBase::url(a2);
        a2 = v29;
        v12 = v108;
        v108 = 0;
        v129 = v12;
        if (!v12 || !*((_DWORD *)v12 + 1))
        {
          WebCore::applicationBundleIdentifier(v29);
          v30 = *(WTF::StringImpl **)buf;
          v129 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
            {
              WTF::StringImpl::destroy(v12, v25);
              v31 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v25);
                else
                  *(_DWORD *)v31 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v12 -= 2;
            }
          }
          v12 = v30;
        }
        if (!*(_BYTE *)(v26 + 480))
        {
          v28 = *(_QWORD *)(v26 + 24);
          if ((v28 & 0x8000000000000000) == 0)
            goto LABEL_37;
          goto LABEL_112;
        }
        buf[0] = 0;
        v155 = 0;
        std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>((uint64_t)buf, v26 + 168);
        v155 = 1;
        if (!*(_BYTE *)(v26 + 480)
          || (WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(v26 + 168), v25), *(_BYTE *)(v26 + 480) = 0, (v28 = v155) != 0))
        {
          LOBYTE(v114) = buf[0];
          v32 = *(_OWORD *)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = 0;
          *(_OWORD *)v115 = v32;
          *(_OWORD *)v116 = *(_OWORD *)v131;
          *(_OWORD *)((char *)&v116[1] + 1) = *(_OWORD *)&v131[9];
          v117[0] = 0;
          v118 = 0;
          if ((_BYTE)v146)
          {
            std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v117, (uint64_t)&v133[2]);
            v118 = 1;
          }
          v119 = *(_OWORD *)v147;
          v120 = *(_OWORD *)&v147[16];
          LOBYTE(v121) = 0;
          v122 = 0;
          if ((_BYTE)v148)
          {
            v33 = *(_QWORD *)&v147[32];
            *(_QWORD *)&v147[32] = 0;
            v121 = v33;
            v122 = 1;
          }
          v34 = *(_OWORD *)cf;
          v35 = v150;
          *(_OWORD *)cf = 0u;
          v150 = 0u;
          v123 = v34;
          v124 = v35;
          LOBYTE(v125) = 0;
          v127 = 0;
          if (v153)
          {
            v36 = v151;
            v151 = 0uLL;
            v125 = v36;
            v37 = v152;
            v152 = 0;
            v126 = v37;
            v127 = 1;
          }
          v38 = v154;
          v154 = 0;
          v128 = v38;
          if (v155)
            WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v25);
          v39 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
          WebCore::RegistrableDomain::RegistrableDomain(&v113, v39);
          PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies(this);
          v41 = *(WTF::StringImpl **)PartyForCookies;
          if (*(_QWORD *)PartyForCookies)
            *(_DWORD *)v41 += 2;
          v110 = v41;
          v42 = *(_OWORD *)(PartyForCookies + 24);
          v111 = *(_OWORD *)(PartyForCookies + 8);
          v112 = v42;
          v43 = (WebCore::PrivateClickMeasurement *)WTF::WallTime::now((WTF::WallTime *)PartyForCookies);
          v45 = v44 - v116[0];
          WebCore::PrivateClickMeasurement::maxAge(v43);
          if (v45 > v46)
          {
            v48 = *(_QWORD *)(v26 + 24);
            v47 = *(_QWORD *)(v26 + 32);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WebKit::NetworkProcess::broadcastConsoleMessage(v47, v48, 14, 4, (uint64_t)buf);
            v50 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v49);
              else
                *(_DWORD *)v50 -= 2;
            }
            goto LABEL_79;
          }
          if ((WebCore::PrivateClickMeasurement::isNeitherSameSiteNorCrossSiteTriggeringEvent() & 1) == 0)
          {
            WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, (const WTF::URL *)&v110);
            v56 = WTF::equal(v115[1], *(const WTF::StringImpl **)buf, v55);
            v57 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (!v57)
              goto LABEL_44;
            if (*(_DWORD *)v57 != 2)
            {
              *(_DWORD *)v57 -= 2;
LABEL_44:
              if (!v56)
                goto LABEL_79;
LABEL_50:
              v58 = *(_QWORD *)(v26 + 152);
              *(_QWORD *)buf = v26;
              WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v26 + 8), v26);
              v59 = *(unsigned int **)(v26 + 8);
              if (v59)
              {
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 + 1, v59));
              }
              *(_QWORD *)&buf[8] = v59;
              *(_WORD *)&buf[16] = *(_WORD *)a5;
              buf[18] = *(_BYTE *)(a5 + 2);
              v131[0] = 0;
              v131[8] = 0;
              if (*(_BYTE *)(a5 + 16))
              {
                v61 = *(_QWORD *)(a5 + 8);
                *(_QWORD *)(a5 + 8) = 0;
                *(_QWORD *)v131 = v61;
                v131[8] = 1;
              }
              v131[16] = 0;
              v131[24] = 0;
              if (*(_BYTE *)(a5 + 32))
              {
                v62 = *(_QWORD *)(a5 + 24);
                *(_QWORD *)(a5 + 24) = 0;
                *(_QWORD *)&v131[16] = v62;
                v131[24] = 1;
              }
              v133[2] = 0;
              LOBYTE(v134) = 0;
              if (*(_BYTE *)(a5 + 48))
              {
                v63 = *(_QWORD *)(a5 + 40);
                *(_QWORD *)(a5 + 40) = 0;
                *(_QWORD *)&v133[2] = v63;
                LOBYTE(v134) = 1;
              }
              LOBYTE(v137) = 0;
              v139 = 0;
              if (*(_BYTE *)(a5 + 88))
              {
                v64 = *(_OWORD *)(a5 + 56);
                *(_OWORD *)(a5 + 56) = 0u;
                v137 = v64;
                v65 = *(_OWORD *)(a5 + 72);
                *(_OWORD *)(a5 + 72) = 0u;
                v138 = v65;
                v139 = 1;
              }
              LOBYTE(v140) = 0;
              v142 = 0;
              if (*(_BYTE *)(a5 + 120))
              {
                v66 = *(_OWORD *)(a5 + 96);
                *(_QWORD *)(a5 + 96) = 0;
                *(_QWORD *)(a5 + 104) = 0;
                v140 = v66;
                v67 = *(_QWORD *)(a5 + 112);
                *(_QWORD *)(a5 + 112) = 0;
                v141 = v67;
                v142 = 1;
              }
              v68 = *(_DWORD **)a2;
              if (*(_QWORD *)a2)
                *v68 += 2;
              v143 = v68;
              v69 = *(_OWORD *)((char *)a2 + 8);
              v145 = *(_OWORD *)((char *)a2 + 24);
              v144 = v69;
              v70 = v113;
              v113 = 0;
              v71 = v110;
              v110 = 0;
              v146 = v70;
              *(_QWORD *)v147 = v71;
              *(_OWORD *)&v147[8] = v111;
              *(_OWORD *)&v147[24] = v112;
              LODWORD(v111) = v111 & 0xFFFFFFFE;
              v72 = v129;
              v129 = 0;
              v148 = v72;
              v73 = WTF::fastMalloc((WTF *)0xF8);
              v74 = v73;
              *(_QWORD *)v73 = off_1E34C06B0;
              *(_QWORD *)(v73 + 8) = *(_QWORD *)buf;
              v75 = *(_QWORD *)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              *(_QWORD *)(v73 + 16) = v75;
              *(_WORD *)(v73 + 24) = *(_WORD *)&buf[16];
              *(_BYTE *)(v73 + 26) = buf[18];
              *(_BYTE *)(v73 + 32) = 0;
              *(_BYTE *)(v73 + 40) = 0;
              if (v131[8])
              {
                v76 = *(_QWORD *)v131;
                *(_QWORD *)v131 = 0;
                *(_QWORD *)(v73 + 32) = v76;
                *(_BYTE *)(v73 + 40) = 1;
              }
              *(_BYTE *)(v73 + 48) = 0;
              *(_BYTE *)(v73 + 56) = 0;
              if (v131[24])
              {
                v77 = *(_QWORD *)&v131[16];
                *(_QWORD *)&v131[16] = 0;
                *(_QWORD *)(v73 + 48) = v77;
                *(_BYTE *)(v73 + 56) = 1;
              }
              *(_BYTE *)(v73 + 64) = 0;
              *(_BYTE *)(v73 + 72) = 0;
              if ((_BYTE)v134)
              {
                v78 = *(_QWORD *)&v133[2];
                *(_QWORD *)&v133[2] = 0;
                *(_QWORD *)(v73 + 64) = v78;
                *(_BYTE *)(v73 + 72) = 1;
              }
              *(_BYTE *)(v73 + 80) = 0;
              *(_BYTE *)(v73 + 112) = 0;
              if (v139)
              {
                *(_QWORD *)(v73 + 80) = v137;
                v79 = *((_QWORD *)&v137 + 1);
                v137 = 0u;
                *(_QWORD *)(v73 + 88) = v79;
                *(_QWORD *)(v73 + 96) = v138;
                v80 = *((_QWORD *)&v138 + 1);
                v138 = 0u;
                *(_QWORD *)(v73 + 104) = v80;
                *(_BYTE *)(v73 + 112) = 1;
              }
              *(_BYTE *)(v73 + 120) = 0;
              *(_BYTE *)(v73 + 144) = 0;
              if (v142)
              {
                *(_QWORD *)(v73 + 120) = v140;
                v81 = *((_QWORD *)&v140 + 1);
                v140 = 0uLL;
                *(_QWORD *)(v73 + 128) = v81;
                v82 = v141;
                v141 = 0;
                *(_QWORD *)(v73 + 136) = v82;
                *(_BYTE *)(v73 + 144) = 1;
              }
              v83 = v143;
              if (v143)
                *v143 += 2;
              *(_QWORD *)(v73 + 152) = v83;
              v84 = v145;
              *(_OWORD *)(v73 + 160) = v144;
              *(_OWORD *)(v73 + 176) = v84;
              v85 = v146;
              v146 = 0;
              *(_QWORD *)(v73 + 192) = v85;
              v86 = WTF::URL::URL(v73 + 200, (uint64_t *)v147);
              v87 = v148;
              v148 = 0;
              *(_QWORD *)(v74 + 240) = v87;
              v109 = v74;
              (*(void (**)(uint64_t, _QWORD **, uint64_t *, double))(*(_QWORD *)v58 + 16))(v58, &v114, &v109, v86);
              v89 = v109;
              v109 = 0;
              if (v89)
                (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
              WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WebCore::PCM::AttributionTriggerData &&::String &&)::$_0::~$_0(buf, v88);
              v12 = 0;
              goto LABEL_79;
            }
            WTF::StringImpl::destroy(v57, v49);
            if (v56)
              goto LABEL_50;
          }
LABEL_79:
          v90 = v110;
          v110 = 0;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
              WTF::StringImpl::destroy(v90, v49);
            else
              *(_DWORD *)v90 -= 2;
          }
          v91 = v113;
          v113 = 0;
          if (v91)
          {
            if (*(_DWORD *)v91 == 2)
              WTF::StringImpl::destroy(v91, v49);
            else
              *(_DWORD *)v91 -= 2;
          }
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v114, v49);
          goto LABEL_88;
        }
      }
      __break(1u);
LABEL_112:
      if (v28 != -1)
      {
LABEL_88:
        v129 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v25);
          else
            *(_DWORD *)v12 -= 2;
        }
        v92 = v108;
        v108 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2)
            WTF::StringImpl::destroy(v92, v25);
          else
            *(_DWORD *)v92 -= 2;
        }
        goto LABEL_96;
      }
LABEL_37:
      v51 = *(_QWORD *)(v26 + 152);
      v52 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
      WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, v52);
      v53 = WebCore::ResourceRequestBase::firstPartyForCookies(this);
      (*(void (**)(uint64_t, uint64_t, WebCore *, _BYTE *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v51 + 24))(v51, a5, a2, buf, v53, &v129);
      v54 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v25);
        else
          *(_DWORD *)v54 -= 2;
      }
      v12 = v129;
      goto LABEL_88;
    }
  }
LABEL_96:
  if (*(_BYTE *)(a1 + 4329))
  {
    WebKit::NetworkResourceLoader::continueWillSendRequest(a1, this, 0, a6);
  }
  else
  {
    WebCore::ResourceRequestBase::httpBody(this);
    v93 = v113;
    v113 = 0;
    v129 = v93;
    WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)buf, a1, a4);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1 + 48);
    v94 = *(unsigned int **)(a1 + 56);
    if (v94)
    {
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 + 1, v94));
    }
    v96 = *a6;
    *a6 = 0;
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
    v98 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v98 = 2674;
    *(_QWORD *)(v98 + 8) = v97;
    *(_QWORD *)(v98 + 528) = v98 + 16;
    *(_QWORD *)(v98 + 536) = v98 + 16;
    *(_OWORD *)(v98 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v98 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v98);
    v110 = (WTF::StringImpl *)v98;
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v98, this);
    IPC::ArgumentCoder<IPC::FormDataReference,void>::encode((IPC::Encoder *)v98, (_DWORD **)&v129);
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v98, (WebCore::ResourceResponseBase *)buf);
    v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v99 = &off_1E34C0410;
    v99[1] = a1;
    v99[2] = v94;
    v99[3] = v96;
    v100 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v114 = v99;
    v115[0] = v100;
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD **, _QWORD))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16, &v110, &v114, 0);
    v102 = v114;
    v114 = 0;
    if (v102)
      (*(void (**)(_QWORD *))(*v102 + 8))(v102);
    v103 = v110;
    v110 = 0;
    if (v103)
    {
      IPC::Encoder::~Encoder(v103, v101);
      WTF::fastFree(v104, v105);
    }
    v106 = cf[0];
    cf[0] = 0;
    if (v106)
      CFRelease(v106);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (WTF::StringImpl *)v101);
    if (v129)
      WTF::RefCounted<WebCore::FormData>::deref(v129);
    v107 = v113;
    v113 = 0;
    if (v107)
      WTF::RefCounted<WebCore::FormData>::deref(v107);
  }
}

void WebKit::NetworkResourceLoader::continueWillSendRequest(uint64_t a1, const WebCore::ResourceRequest *a2, int a3, uint64_t *a4)
{
  _BYTE *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  _BOOL4 v17;
  WebCore::ResourceResponseBase *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  _BOOL4 v26;
  CFTypeRef v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  IPC::Encoder *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  int v52;
  _BOOL4 v53;
  uint64_t v54;
  IPC::Encoder *v55;
  WebKit::ServiceWorkerFetchTask *v56;
  uint64_t v57;
  CFTypeRef v58;
  IPC::Encoder *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  int v66;
  _BOOL4 v67;
  WebKit::ServiceWorkerFetchTask *v68;
  WebKit::NetworkLoad *v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  int v76;
  _BOOL4 v77;
  NSObject *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  _DWORD *v81;
  __int128 v82;
  WTF::StringImpl *v83;
  CFTypeRef v84;
  WTF::StringImpl *v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  int v92;
  _BOOL4 v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BOOL4 v99;
  int v100;
  _BOOL4 v101;
  uint64_t v102;
  WebCore::ResourceResponseBase *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  IPC::Encoder *v107;
  WTF *v108;
  void *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL4 v119;
  int v120;
  _BOOL4 v121;
  IPC::Encoder *v122;
  _BYTE buf[32];
  _BYTE v124[32];
  CFTypeRef v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  CFTypeRef cf;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v8 = (_BYTE *)(a1 + 4178);
  v9 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 80);
    v12 = *(_QWORD *)(a1 + 88);
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(_QWORD *)(a1 + 3032);
    v15 = *(unsigned __int8 *)(a1 + 315) == 1;
    v16 = *(unsigned __int8 *)(a1 + 3072);
    v17 = *(_QWORD *)(a1 + 4152) != 0;
    *(_DWORD *)buf = 134220032;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v12;
    *(_WORD *)v124 = 2048;
    *(_QWORD *)&v124[2] = v13;
    *(_WORD *)&v124[10] = 2048;
    *(_QWORD *)&v124[12] = v14;
    *(_WORD *)&v124[20] = 1024;
    *(_DWORD *)&v124[22] = v15;
    *(_WORD *)&v124[26] = 1024;
    *(_DWORD *)&v124[28] = v16;
    LOWORD(v125) = 1024;
    *(_DWORD *)((char *)&v125 + 2) = v17;
    HIWORD(v125) = 1024;
    LODWORD(v126) = a3;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: (isAllowedToAskUserForCredentials=%d)", buf, 0x4Cu);
  }
  v18 = *(WebCore::ResourceResponseBase **)(a1 + 4936);
  if (v18)
  {
    v19 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(a1 + 80);
      v21 = *(_QWORD *)(a1 + 88);
      v22 = *(_QWORD *)(a1 + 96);
      v23 = *(_QWORD *)(a1 + 3032);
      v24 = *(unsigned __int8 *)(a1 + 315) == 1;
      v25 = *(unsigned __int8 *)(a1 + 3072);
      v26 = *(_QWORD *)(a1 + 4152) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v20;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v21;
      *(_WORD *)v124 = 2048;
      *(_QWORD *)&v124[2] = v22;
      *(_WORD *)&v124[10] = 2048;
      *(_QWORD *)&v124[12] = v23;
      *(_WORD *)&v124[20] = 1024;
      *(_DWORD *)&v124[22] = v24;
      *(_WORD *)&v124[26] = 1024;
      *(_DWORD *)&v124[28] = v25;
      LOWORD(v125) = 1024;
      *(_DWORD *)((char *)&v125 + 2) = v26;
      _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: using stored redirect response", buf, 0x46u);
      v18 = *(WebCore::ResourceResponseBase **)(a1 + 4936);
    }
    *(_QWORD *)(a1 + 4936) = 0;
    WebCore::ResourceRequestBase::redirectedRequest();
    v8[134] = 1;
    WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(a1, a2, buf, v18, 0, a4);
    v27 = cf;
    cf = 0;
    if (v27)
      CFRelease(v27);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    std::default_delete<WebCore::ResourceResponse>::operator()[abi:sn180100](v18, v28);
    return;
  }
  v29 = *(_QWORD *)(a1 + 4376);
  if (v29 && *(_BYTE *)(a1 + 3073))
  {
    v30 = *(unsigned __int8 *)(a1 + 3072);
    if (v30 != 15 && v30 != 19)
      goto LABEL_16;
  }
  else if (*(_BYTE *)(a1 + 3073))
  {
    if (!v29)
      goto LABEL_39;
LABEL_16:
    v31 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v32 = *(_QWORD *)(a1 + 80);
      v33 = *(_QWORD *)(a1 + 88);
      v34 = *(_QWORD *)(a1 + 96);
      v35 = *(_QWORD *)(a1 + 3032);
      v36 = *(unsigned __int8 *)(a1 + 315) == 1;
      v37 = *(unsigned __int8 *)(a1 + 3072);
      v38 = *(_QWORD *)(a1 + 4152) != 0;
      v39 = *(_QWORD *)(v29 + 40);
      *(_DWORD *)buf = 134220032;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v32;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v33;
      *(_WORD *)v124 = 2048;
      *(_QWORD *)&v124[2] = v34;
      *(_WORD *)&v124[10] = 2048;
      *(_QWORD *)&v124[12] = v35;
      *(_WORD *)&v124[20] = 1024;
      *(_DWORD *)&v124[22] = v36;
      *(_WORD *)&v124[26] = 1024;
      *(_DWORD *)&v124[28] = v37;
      LOWORD(v125) = 1024;
      *(_DWORD *)((char *)&v125 + 2) = v38;
      HIWORD(v125) = 2048;
      v126 = v39;
      _os_log_impl(&dword_196BCC000, v31, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Continuing fetch task with redirect (fetchIdentifier=%llu)", buf, 0x50u);
      v29 = *(_QWORD *)(a1 + 4376);
    }
    WebKit::ServiceWorkerFetchTask::continueFetchTaskWith(v29, (uint64_t)a2);
    goto LABEL_19;
  }
  v42 = *(unsigned int **)(a1 + 4384);
  *(_QWORD *)(a1 + 4384) = 0;
  if (v42)
  {
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, v10);
    }
  }
  WebKit::NetworkResourceLoader::setWorkerStart(a1, 0.0);
  WebKit::NetworkConnectionToWebProcess::createFetchTask((uint64_t *)&v122, *(WebKit::NetworkConnectionToWebProcess **)(a1 + 3856), (WebKit::NetworkResourceLoader *)a1, a2);
  v45 = v122;
  if (v122)
  {
    v46 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v47 = *(_QWORD *)(a1 + 80);
      v48 = *(_QWORD *)(a1 + 88);
      v49 = *(_QWORD *)(a1 + 96);
      v50 = *(_QWORD *)(a1 + 3032);
      v51 = *(unsigned __int8 *)(a1 + 315) == 1;
      v52 = *(unsigned __int8 *)(a1 + 3072);
      v53 = *(_QWORD *)(a1 + 4152) != 0;
      v54 = *((_QWORD *)v45 + 5);
      *(_DWORD *)buf = 134220032;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v47;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v48;
      *(_WORD *)v124 = 2048;
      *(_QWORD *)&v124[2] = v49;
      *(_WORD *)&v124[10] = 2048;
      *(_QWORD *)&v124[12] = v50;
      *(_WORD *)&v124[20] = 1024;
      *(_DWORD *)&v124[22] = v51;
      *(_WORD *)&v124[26] = 1024;
      *(_DWORD *)&v124[28] = v52;
      LOWORD(v125) = 1024;
      *(_DWORD *)((char *)&v125 + 2) = v53;
      HIWORD(v125) = 2048;
      v126 = v54;
      _os_log_impl(&dword_196BCC000, v46, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Created a ServiceWorkerFetchTask to handle the redirect (fetchIdentifier=%llu)", buf, 0x50u);
    }
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3864), 0);
    v55 = v122;
    v122 = 0;
    v56 = *(WebKit::ServiceWorkerFetchTask **)(a1 + 4376);
    *(_QWORD *)(a1 + 4376) = v55;
    if (v56)
      WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v56);
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
    v57 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v57 + 16))(v57, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    v58 = cf;
    cf = 0;
    if (v58)
      CFRelease(v58);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    v59 = v122;
    v122 = 0;
    if (v59)
      WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v59);
    return;
  }
  v60 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v61 = *(_QWORD *)(a1 + 80);
    v62 = *(_QWORD *)(a1 + 88);
    v63 = *(_QWORD *)(a1 + 96);
    v64 = *(_QWORD *)(a1 + 3032);
    v65 = *(unsigned __int8 *)(a1 + 315) == 1;
    v66 = *(unsigned __int8 *)(a1 + 3072);
    v67 = *(_QWORD *)(a1 + 4152) != 0;
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v61;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v62;
    *(_WORD *)v124 = 2048;
    *(_QWORD *)&v124[2] = v63;
    *(_WORD *)&v124[10] = 2048;
    *(_QWORD *)&v124[12] = v64;
    *(_WORD *)&v124[20] = 1024;
    *(_DWORD *)&v124[22] = v65;
    *(_WORD *)&v124[26] = 1024;
    *(_DWORD *)&v124[28] = v66;
    LOWORD(v125) = 1024;
    *(_DWORD *)((char *)&v125 + 2) = v67;
    _os_log_impl(&dword_196BCC000, v60, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Navigation is not using service workers", buf, 0x46u);
  }
  v68 = *(WebKit::ServiceWorkerFetchTask **)(a1 + 4376);
  v8[134] = v68 != 0;
  *(_QWORD *)(a1 + 4376) = 0;
  if (!v68)
    goto LABEL_46;
  WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v68);
  v29 = *(_QWORD *)(a1 + 4376);
  if (v29)
    goto LABEL_16;
LABEL_39:
  if (v8[134])
  {
    v8[134] = 0;
    v69 = *(WebKit::NetworkLoad **)(a1 + 3864);
    if (v69)
      WebKit::NetworkLoad::updateRequestAfterRedirection(v69, a2);
    v70 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v71 = *(_QWORD *)(a1 + 80);
      v72 = *(_QWORD *)(a1 + 88);
      v73 = *(_QWORD *)(a1 + 96);
      v74 = *(_QWORD *)(a1 + 3032);
      v75 = *(unsigned __int8 *)(a1 + 315) == 1;
      v76 = *(unsigned __int8 *)(a1 + 3072);
      v77 = *(_QWORD *)(a1 + 4152) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v71;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v72;
      *(_WORD *)v124 = 2048;
      *(_QWORD *)&v124[2] = v73;
      *(_WORD *)&v124[10] = 2048;
      *(_QWORD *)&v124[12] = v74;
      *(_WORD *)&v124[20] = 1024;
      *(_DWORD *)&v124[22] = v75;
      *(_WORD *)&v124[26] = 1024;
      *(_DWORD *)&v124[28] = v76;
      LOWORD(v125) = 1024;
      *(_DWORD *)((char *)&v125 + 2) = v77;
      _os_log_impl(&dword_196BCC000, v70, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Restarting network load", buf, 0x46u);
    }
    WebKit::NetworkResourceLoader::restartNetworkLoad(a1, a2, a4);
    return;
  }
LABEL_46:
  if (*(_QWORD *)(a1 + 4304))
  {
    if ((*(_BYTE *)(WebCore::ResourceRequestBase::url(a2) + 8) & 2) == 0)
    {
      WebCore::ResourceRequestBase::url(a2);
      if ((WTF::URL::protocolIs() & 1) == 0)
      {
        if (*(_DWORD *)(a1 + 4144))
        {
          v78 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
          {
            v115 = *(_QWORD *)(a1 + 80);
            v116 = *(_QWORD *)(a1 + 88);
            v117 = *(_QWORD *)(a1 + 96);
            v118 = *(_QWORD *)(a1 + 3032);
            v119 = *(unsigned __int8 *)(a1 + 315) == 1;
            v120 = *(unsigned __int8 *)(a1 + 3072);
            v121 = *(_QWORD *)(a1 + 4152) != 0;
            *(_DWORD *)buf = 134219776;
            *(_QWORD *)&buf[4] = a1;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v115;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v116;
            *(_WORD *)v124 = 2048;
            *(_QWORD *)&v124[2] = v117;
            *(_WORD *)&v124[10] = 2048;
            *(_QWORD *)&v124[12] = v118;
            *(_WORD *)&v124[20] = 1024;
            *(_DWORD *)&v124[22] = v119;
            *(_WORD *)&v124[26] = 1024;
            *(_DWORD *)&v124[28] = v120;
            LOWORD(v125) = 1024;
            *(_DWORD *)((char *)&v125 + 2) = v121;
            _os_log_error_impl(&dword_196BCC000, v78, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Failing load because it redirected to a scheme that is not HTTP(S)", buf, 0x46u);
          }
          v79 = WebCore::ResourceRequestBase::url(a2);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v80 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          v81 = *(_DWORD **)v79;
          if (*(_QWORD *)v79)
            *v81 += 2;
          *(_QWORD *)&buf[8] = v81;
          v82 = *(_OWORD *)(v79 + 24);
          *(_OWORD *)&buf[16] = *(_OWORD *)(v79 + 8);
          *(_OWORD *)v124 = v82;
          if (v80)
            *(_DWORD *)v80 += 2;
          *(_QWORD *)&v124[16] = v80;
          *(_DWORD *)&v124[24] = 0;
          *(_WORD *)&v124[28] = 2;
          v125 = 0;
          LOBYTE(v126) = 1;
          WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)buf);
          v84 = v125;
          v125 = 0;
          if (v84)
            CFRelease(v84);
          v85 = *(WTF::StringImpl **)&v124[16];
          *(_QWORD *)&v124[16] = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v83);
            else
              *(_DWORD *)v85 -= 2;
          }
          v111 = *(WTF::StringImpl **)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          if (v111)
          {
            if (*(_DWORD *)v111 == 2)
              WTF::StringImpl::destroy(v111, v83);
            else
              *(_DWORD *)v111 -= 2;
          }
          v112 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v112)
          {
            if (*(_DWORD *)v112 == 2)
              WTF::StringImpl::destroy(v112, v83);
            else
              *(_DWORD *)v112 -= 2;
          }
          if (v80)
          {
            if (*(_DWORD *)v80 == 2)
              WTF::StringImpl::destroy(v80, v83);
            else
              *(_DWORD *)v80 -= 2;
          }
          goto LABEL_19;
        }
      }
    }
  }
  *v8 = a3;
  WebCore::ResourceRequestBase::cachePolicy((WebCore::ResourceRequestBase *)(a1 + 168));
  WebCore::ResourceRequestBase::setCachePolicy();
  WebCore::ResourceRequestBase::setCachePartition(a2, (const WTF::String *)(a1 + 328));
  if (v8[110])
  {
    v8[110] = 0;
    v86 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v87 = *(_QWORD *)(a1 + 80);
      v88 = *(_QWORD *)(a1 + 88);
      v89 = *(_QWORD *)(a1 + 96);
      v90 = *(_QWORD *)(a1 + 3032);
      v91 = *(unsigned __int8 *)(a1 + 315) == 1;
      v92 = *(unsigned __int8 *)(a1 + 3072);
      v93 = *(_QWORD *)(a1 + 4152) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v87;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v88;
      *(_WORD *)v124 = 2048;
      *(_QWORD *)&v124[2] = v89;
      *(_WORD *)&v124[10] = 2048;
      *(_QWORD *)&v124[12] = v90;
      *(_WORD *)&v124[20] = 1024;
      *(_DWORD *)&v124[22] = v91;
      *(_WORD *)&v124[26] = 1024;
      *(_DWORD *)&v124[28] = v92;
      LOWORD(v125) = 1024;
      *(_DWORD *)((char *)&v125 + 2) = v93;
      _os_log_impl(&dword_196BCC000, v86, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: m_isWaitingContinueWillSendRequestForCachedRedirect was set", buf, 0x46u);
    }
    if (!WebKit::NetworkResourceLoader::canUseCache((WebKit::NetworkResourceLoader *)a1, a2)
      || *(_QWORD *)(a1 + 4280)
      || *(_DWORD *)(a1 + 4144) > 5u)
    {
      WebKit::NetworkResourceLoader::startNetworkLoad(a1, (uint64_t)a2, 1);
    }
    else
    {
      WebKit::NetworkResourceLoader::retrieveCacheEntry((WebKit::NetworkResourceLoader *)a1, a2);
    }
    goto LABEL_19;
  }
  if (!*(_QWORD *)(a1 + 3864))
  {
LABEL_19:
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
    v40 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v40 + 16))(v40, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    v41 = cf;
    cf = 0;
    if (v41)
      CFRelease(v41);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    return;
  }
  v94 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v95 = *(_QWORD *)(a1 + 80);
    v96 = *(_QWORD *)(a1 + 88);
    v97 = *(_QWORD *)(a1 + 96);
    v98 = *(_QWORD *)(a1 + 3032);
    v99 = *(unsigned __int8 *)(a1 + 315) == 1;
    v100 = *(unsigned __int8 *)(a1 + 3072);
    v101 = *(_QWORD *)(a1 + 4152) != 0;
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v95;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v96;
    *(_WORD *)v124 = 2048;
    *(_QWORD *)&v124[2] = v97;
    *(_WORD *)&v124[10] = 2048;
    *(_QWORD *)&v124[12] = v98;
    *(_WORD *)&v124[20] = 1024;
    *(_DWORD *)&v124[22] = v99;
    *(_WORD *)&v124[26] = 1024;
    *(_DWORD *)&v124[28] = v100;
    LOWORD(v125) = 1024;
    *(_DWORD *)((char *)&v125 + 2) = v101;
    _os_log_impl(&dword_196BCC000, v94, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueWillSendRequest: Telling NetworkLoad to proceed with the redirect", buf, 0x46u);
  }
  if ((*(_BYTE *)(a1 + 3336) || *(_BYTE *)(a1 + 3848)) && (WebCore::ResourceRequestBase::isNull(a2) & 1) == 0)
  {
    v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3856) + 72) + 32);
    WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)buf, a1);
    v103 = (WebCore::ResourceResponseBase *)(a1 + 4408);
    v104 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v104 = 338;
    *(_QWORD *)(v104 + 8) = 0;
    *(_QWORD *)(v104 + 528) = v104 + 16;
    *(_QWORD *)(v104 + 536) = v104 + 16;
    *(_OWORD *)(v104 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v104 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v104);
    v122 = (IPC::Encoder *)v104;
    v105 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v104, 8uLL, 8) = v105;
    IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v104, buf);
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v104, v103);
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v104, a2);
    IPC::Connection::sendMessageImpl(v102, (uint64_t *)&v122, 0, 0);
    v107 = v122;
    v122 = 0;
    if (v107)
    {
      IPC::Encoder::~Encoder(v107, v106);
      WTF::fastFree(v108, v109);
    }
    v110 = v127;
    v127 = 0;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
        WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v106);
      else
        *(_DWORD *)v110 -= 2;
    }
    v113 = *(WTF::StringImpl **)&v124[24];
    *(_QWORD *)&v124[24] = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 2)
        WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v106);
      else
        *(_DWORD *)v113 -= 2;
    }
  }
  v114 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, const WebCore::ResourceRequest *))(*(_QWORD *)v114 + 16))(v114, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
}

uint64_t WebKit::NetworkResourceLoader::restartNetworkLoad(uint64_t a1, WebCore::ResourceRequestBase *a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef v26;
  uint64_t result;
  int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  _BOOL4 v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  _BOOL4 v45;
  CFTypeRef cf;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 88);
    v9 = *(_QWORD *)(a1 + 96);
    v10 = *(_QWORD *)(a1 + 3032);
    v11 = *(unsigned __int8 *)(a1 + 315) == 1;
    v12 = *(unsigned __int8 *)(a1 + 3072);
    v13 = *(_QWORD *)(a1 + 4152) != 0;
    v14 = *(_QWORD *)(a1 + 3864) != 0;
    v28 = 134220032;
    v29 = a1;
    v30 = 2048;
    v31 = v7;
    v32 = 2048;
    v33 = v8;
    v34 = 2048;
    v35 = v9;
    v36 = 2048;
    v37 = v10;
    v38 = 1024;
    v39 = v11;
    v40 = 1024;
    v41 = v12;
    v42 = 1024;
    v43 = v13;
    v44 = 1024;
    v45 = v14;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::restartNetworkLoad: (hasNetworkLoad=%d)", (uint8_t *)&v28, 0x4Cu);
  }
  v15 = *(_QWORD *)(a1 + 3864);
  if (v15)
  {
    v16 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(a1 + 80);
      v18 = *(_QWORD *)(a1 + 88);
      v19 = *(_QWORD *)(a1 + 96);
      v20 = *(_QWORD *)(a1 + 3032);
      v21 = *(unsigned __int8 *)(a1 + 315) == 1;
      v22 = *(unsigned __int8 *)(a1 + 3072);
      v23 = *(_QWORD *)(a1 + 4152) != 0;
      v28 = 134219776;
      v29 = a1;
      v30 = 2048;
      v31 = v17;
      v32 = 2048;
      v33 = v18;
      v34 = 2048;
      v35 = v19;
      v36 = 2048;
      v37 = v20;
      v38 = 1024;
      v39 = v21;
      v40 = 1024;
      v41 = v22;
      v42 = 1024;
      v43 = v23;
      _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::restartNetworkLoad: Cancelling existing network load so we can restart the load.", (uint8_t *)&v28, 0x46u);
      v15 = *(_QWORD *)(a1 + 3864);
    }
    v24 = *(_QWORD *)(v15 + 2992);
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 3864), 0);
  }
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v28);
  v25 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v25 + 16))(v25, &v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = cf;
  cf = 0;
  if (v26)
    CFRelease(v26);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v28);
  result = WebCore::ResourceRequestBase::isEmpty(a2);
  if ((result & 1) == 0)
    return WebKit::NetworkResourceLoader::startNetworkLoad(a1, (uint64_t)a2, 0);
  return result;
}

IPC::Encoder *WebKit::NetworkResourceLoader::setWorkerStart(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  *(double *)(a1 + 4392) = a2;
  v3 = *(_QWORD *)(a1 + 3032);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2672;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = *(_QWORD *)(a1 + 4392);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  v5 = *((_BYTE *)a2 + 20);
  *((_BYTE *)a2 + 20) = 0;
  v6 = *(WTF **)a1;
  *(_QWORD *)a1 = v3;
  v7 = a2[1];
  a2[1] = 0;
  v8 = (WTF::StringImpl *)*(unsigned int *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 20) = v5;
  if (v6)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v6, v8);
  return a1;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::sendResultForCacheEntry(std::unique_ptr<WebKit::NetworkCache::Entry>)::$_0::operator()(uint64_t a1)
{
  uint64_t v2;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v12;
  WTF::StringImpl *result;
  uint64_t v14[11];
  WTF::StringImpl *v15;
  char v16;
  __int128 v17;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v18;
  IPC::Encoder *v19;

  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v14);
  v16 |= 1u;
  if (*(_BYTE *)(a1 + 4328))
  {
    v2 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)v2 = 1;
    *(_BYTE *)(v2 + 4) = 3;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v2 + 40));
    *(_QWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    *(_BYTE *)(v2 + 96) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    v3 = v18;
    v18 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)v2;
    if (v3)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  }
  v17 = 0u;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2666;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v19 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode((IPC::Encoder *)v7, v14);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v19, 0);
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v10, v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v12);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::crossOriginAccessControlCheckEnabled(WebKit::NetworkResourceLoader *this)
{
  return *((unsigned __int8 *)this + 3368);
}

uint64_t `non-virtual thunk to'WebKit::NetworkResourceLoader::crossOriginAccessControlCheckEnabled(WebKit::NetworkResourceLoader *this)
{
  return *((unsigned __int8 *)this + 3336);
}

WTF::StringImpl *WebKit::NetworkResourceLoader::logCookieInformation(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, const WTF::String **a6, unsigned __int8 *a7, const WTF::String **a8, const WTF::String **a9, uint64_t a10, WTF::String *a11, uint64_t a12, WTF::String *a13, uint64_t a14)
{
  WTF::String *v18;
  int v19;
  WTF::StringImpl *result;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  const char *v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  NSObject *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  NSObject *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  NSObject *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  const char *v58;
  WTF *v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  NSObject *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  int v69;
  const char *v70;
  WTF *v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  NSObject *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  int v80;
  const char *v81;
  WTF *v82;
  WTF *v83;
  WTF *v84;
  WTF *v85;
  NSObject *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  NSObject *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  WTF *v100;
  WTF *v101;
  WTF *v102;
  WTF *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  WTF *v116;
  WTF *v117;
  WTF *v118;
  WTF *v119;
  WTF *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  uint8_t buf[4];
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  char *v132;
  __int16 v133;
  char *v134;
  __int16 v135;
  char *v136;
  __int16 v137;
  char *v138;
  __int16 v139;
  const char *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v114 = *(_OWORD *)a10;
  v115 = *(_QWORD *)(a10 + 16);
  if (WebCore::NetworkStorageSession::shouldBlockCookies())
  {
    v18 = *(WTF::String **)a10;
    v19 = *(unsigned __int8 *)(a10 + 16);
    WebKit::escapeForJSON(&v126, *a8);
    WebKit::escapeForJSON(&v125, *a6);
    if (v19)
      WTF::String::number(v18);
    else
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = a2;
    if ((_BYTE)a12)
      WTF::String::number(a11);
    else
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    if ((_BYTE)a14)
      WTF::String::number(a13);
    else
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::escapeForJSON(&v121, *a9);
    v23 = *(_QWORD *)(a5 + 16);
    if ((v23 & 0x8000000000000000) == 0 || v23 == -1)
    {
      v24 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v120)
          v25 = (char *)v120 + 16;
        else
          v25 = 0;
        WTF::String::utf8();
        if (v119)
          v26 = (char *)v119 + 16;
        else
          v26 = 0;
        WTF::String::utf8();
        if (v118)
          v27 = (char *)v118 + 16;
        else
          v27 = 0;
        WTF::String::utf8();
        if (v117)
          v28 = (char *)v117 + 16;
        else
          v28 = 0;
        WTF::String::utf8();
        if (v116)
          v29 = (char *)v116 + 16;
        else
          v29 = 0;
        *(_DWORD *)buf = 134219522;
        v128 = a4;
        v129 = 2080;
        v130 = v21;
        v131 = 2080;
        v132 = v25;
        v133 = 2080;
        v134 = v26;
        v135 = 2080;
        v136 = v27;
        v137 = 2080;
        v138 = v28;
        v139 = 2082;
        v140 = v29;
        _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s: { \"url\": \"%{public}s\",", buf, 0x48u);
        v30 = v116;
        v116 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1)
            WTF::fastFree(v30, v22);
          else
            --*(_DWORD *)v30;
        }
        v31 = v117;
        v117 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 1)
            WTF::fastFree(v31, v22);
          else
            --*(_DWORD *)v31;
        }
        v32 = v118;
        v118 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 1)
            WTF::fastFree(v32, v22);
          else
            --*(_DWORD *)v32;
        }
        v33 = v119;
        v119 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
            WTF::fastFree(v33, v22);
          else
            --*(_DWORD *)v33;
        }
        v34 = v120;
        v120 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 1)
            WTF::fastFree(v34, v22);
          else
            --*(_DWORD *)v34;
        }
        v23 = *(_QWORD *)(a5 + 16);
      }
      if ((v23 & 0x8000000000000000) == 0 || v23 == -1)
      {
        v35 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::utf8();
          if (v120)
            v36 = (char *)v120 + 16;
          else
            v36 = 0;
          WTF::String::utf8();
          if (v119)
            v37 = (char *)v119 + 16;
          else
            v37 = 0;
          WTF::String::utf8();
          if (v118)
            v38 = (char *)v118 + 16;
          else
            v38 = 0;
          WTF::String::utf8();
          if (v117)
            v39 = (char *)v117 + 16;
          else
            v39 = 0;
          *(_DWORD *)buf = 134219522;
          v128 = a4;
          v129 = 2080;
          v130 = v21;
          v131 = 2080;
          v132 = v36;
          v133 = 2080;
          v134 = v37;
          v135 = 2080;
          v136 = v38;
          v137 = 2080;
          v138 = v39;
          v139 = 2082;
          v140 = "BLOCKED";
          _os_log_impl(&dword_196BCC000, v35, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"partition\": \"%{public}s\",", buf, 0x48u);
          v40 = v117;
          v117 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 1)
              WTF::fastFree(v40, v22);
            else
              --*(_DWORD *)v40;
          }
          v41 = v118;
          v118 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1)
              WTF::fastFree(v41, v22);
            else
              --*(_DWORD *)v41;
          }
          v42 = v119;
          v119 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
              WTF::fastFree(v42, v22);
            else
              --*(_DWORD *)v42;
          }
          v43 = v120;
          v120 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 1)
              WTF::fastFree(v43, v22);
            else
              --*(_DWORD *)v43;
          }
          v23 = *(_QWORD *)(a5 + 16);
        }
        if ((v23 & 0x8000000000000000) == 0 || v23 == -1)
        {
          v44 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v120)
              v45 = (char *)v120 + 16;
            else
              v45 = 0;
            WTF::String::utf8();
            if (v119)
              v46 = (char *)v119 + 16;
            else
              v46 = 0;
            WTF::String::utf8();
            if (v118)
              v47 = (char *)v118 + 16;
            else
              v47 = 0;
            WTF::String::utf8();
            if (v117)
              v48 = (char *)v117 + 16;
            else
              v48 = 0;
            *(_DWORD *)buf = 134219522;
            v128 = a4;
            v129 = 2080;
            v130 = v21;
            v131 = 2080;
            v132 = v45;
            v133 = 2080;
            v134 = v46;
            v135 = 2080;
            v136 = v47;
            v137 = 2080;
            v138 = v48;
            v139 = 2082;
            v140 = "false";
            _os_log_impl(&dword_196BCC000, v44, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"hasStorageAccess\": %{public}s,", buf, 0x48u);
            v49 = v117;
            v117 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 1)
                WTF::fastFree(v49, v22);
              else
                --*(_DWORD *)v49;
            }
            v50 = v118;
            v118 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 1)
                WTF::fastFree(v50, v22);
              else
                --*(_DWORD *)v50;
            }
            v51 = v119;
            v119 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 1)
                WTF::fastFree(v51, v22);
              else
                --*(_DWORD *)v51;
            }
            v52 = v120;
            v120 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 1)
                WTF::fastFree(v52, v22);
              else
                --*(_DWORD *)v52;
            }
            v23 = *(_QWORD *)(a5 + 16);
          }
          if ((v23 & 0x8000000000000000) == 0 || v23 == -1)
          {
            v53 = off_1ECE713E8;
            if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
            {
              WTF::String::utf8();
              if (v120)
                v54 = (char *)v120 + 16;
              else
                v54 = 0;
              WTF::String::utf8();
              if (v119)
                v55 = (char *)v119 + 16;
              else
                v55 = 0;
              WTF::String::utf8();
              if (v118)
                v56 = (char *)v118 + 16;
              else
                v56 = 0;
              WTF::String::utf8();
              if (v117)
                v57 = (char *)v117 + 16;
              else
                v57 = 0;
              WTF::String::utf8();
              if (v116)
                v58 = (char *)v116 + 16;
              else
                v58 = 0;
              *(_DWORD *)buf = 134219522;
              v128 = a4;
              v129 = 2080;
              v130 = v21;
              v131 = 2080;
              v132 = v54;
              v133 = 2080;
              v134 = v55;
              v135 = 2080;
              v136 = v56;
              v137 = 2080;
              v138 = v57;
              v139 = 2082;
              v140 = v58;
              _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"referer\": \"%{public}s\",", buf, 0x48u);
              v59 = v116;
              v116 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 1)
                  WTF::fastFree(v59, v22);
                else
                  --*(_DWORD *)v59;
              }
              v60 = v117;
              v117 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 1)
                  WTF::fastFree(v60, v22);
                else
                  --*(_DWORD *)v60;
              }
              v61 = v118;
              v118 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 1)
                  WTF::fastFree(v61, v22);
                else
                  --*(_DWORD *)v61;
              }
              v62 = v119;
              v119 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 1)
                  WTF::fastFree(v62, v22);
                else
                  --*(_DWORD *)v62;
              }
              v63 = v120;
              v120 = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 1)
                  WTF::fastFree(v63, v22);
                else
                  --*(_DWORD *)v63;
              }
              v23 = *(_QWORD *)(a5 + 16);
            }
            if ((v23 & 0x8000000000000000) == 0 || v23 == -1)
            {
              v64 = off_1ECE713E8;
              if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
              {
                WTF::String::utf8();
                if (v120)
                  v65 = (char *)v120 + 16;
                else
                  v65 = 0;
                WTF::String::utf8();
                if (v119)
                  v66 = (char *)v119 + 16;
                else
                  v66 = 0;
                WTF::String::utf8();
                if (v118)
                  v67 = (char *)v118 + 16;
                else
                  v67 = 0;
                WTF::String::utf8();
                v68 = (char *)v117 + 16;
                v69 = *a7;
                v70 = "false";
                *(_DWORD *)buf = 134219522;
                if (!v117)
                  v68 = 0;
                v128 = a4;
                if (v69)
                  v70 = "true";
                v129 = 2080;
                v130 = v21;
                v131 = 2080;
                v132 = v65;
                v133 = 2080;
                v134 = v66;
                v135 = 2080;
                v136 = v67;
                v137 = 2080;
                v138 = v68;
                v139 = 2082;
                v140 = v70;
                _os_log_impl(&dword_196BCC000, v64, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"isSameSite\": \"%{public}s\",", buf, 0x48u);
                v71 = v117;
                v117 = 0;
                if (v71)
                {
                  if (*(_DWORD *)v71 == 1)
                    WTF::fastFree(v71, v22);
                  else
                    --*(_DWORD *)v71;
                }
                v72 = v118;
                v118 = 0;
                if (v72)
                {
                  if (*(_DWORD *)v72 == 1)
                    WTF::fastFree(v72, v22);
                  else
                    --*(_DWORD *)v72;
                }
                v73 = v119;
                v119 = 0;
                if (v73)
                {
                  if (*(_DWORD *)v73 == 1)
                    WTF::fastFree(v73, v22);
                  else
                    --*(_DWORD *)v73;
                }
                v74 = v120;
                v120 = 0;
                if (v74)
                {
                  if (*(_DWORD *)v74 == 1)
                    WTF::fastFree(v74, v22);
                  else
                    --*(_DWORD *)v74;
                }
                v23 = *(_QWORD *)(a5 + 16);
              }
              if ((v23 & 0x8000000000000000) == 0 || v23 == -1)
              {
                v75 = off_1ECE713E8;
                if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
                {
                  WTF::String::utf8();
                  if (v120)
                    v76 = (char *)v120 + 16;
                  else
                    v76 = 0;
                  WTF::String::utf8();
                  if (v119)
                    v77 = (char *)v119 + 16;
                  else
                    v77 = 0;
                  WTF::String::utf8();
                  if (v118)
                    v78 = (char *)v118 + 16;
                  else
                    v78 = 0;
                  WTF::String::utf8();
                  v79 = (char *)v117 + 16;
                  v80 = a7[1];
                  v81 = "false";
                  *(_DWORD *)buf = 134219522;
                  if (!v117)
                    v79 = 0;
                  v128 = a4;
                  if (v80)
                    v81 = "true";
                  v129 = 2080;
                  v130 = v21;
                  v131 = 2080;
                  v132 = v76;
                  v133 = 2080;
                  v134 = v77;
                  v135 = 2080;
                  v136 = v78;
                  v137 = 2080;
                  v138 = v79;
                  v139 = 2082;
                  v140 = v81;
                  _os_log_impl(&dword_196BCC000, v75, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"isTopSite\": \"%{public}s\",", buf, 0x48u);
                  v82 = v117;
                  v117 = 0;
                  if (v82)
                  {
                    if (*(_DWORD *)v82 == 1)
                      WTF::fastFree(v82, v22);
                    else
                      --*(_DWORD *)v82;
                  }
                  v83 = v118;
                  v118 = 0;
                  if (v83)
                  {
                    if (*(_DWORD *)v83 == 1)
                      WTF::fastFree(v83, v22);
                    else
                      --*(_DWORD *)v83;
                  }
                  v84 = v119;
                  v119 = 0;
                  if (v84)
                  {
                    if (*(_DWORD *)v84 == 1)
                      WTF::fastFree(v84, v22);
                    else
                      --*(_DWORD *)v84;
                  }
                  v85 = v120;
                  v120 = 0;
                  if (v85)
                  {
                    if (*(_DWORD *)v85 == 1)
                      WTF::fastFree(v85, v22);
                    else
                      --*(_DWORD *)v85;
                  }
                  v23 = *(_QWORD *)(a5 + 16);
                }
                if ((v23 & 0x8000000000000000) == 0 || v23 == -1)
                {
                  v86 = off_1ECE713E8;
                  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
                  {
                    WTF::String::utf8();
                    if (v120)
                      v87 = (char *)v120 + 16;
                    else
                      v87 = 0;
                    WTF::String::utf8();
                    if (v119)
                      v88 = (char *)v119 + 16;
                    else
                      v88 = 0;
                    WTF::String::utf8();
                    if (v118)
                      v89 = (char *)v118 + 16;
                    else
                      v89 = 0;
                    WTF::String::utf8();
                    if (v117)
                      v90 = (char *)v117 + 16;
                    else
                      v90 = 0;
                    *(_DWORD *)buf = 134219266;
                    v128 = a4;
                    v129 = 2080;
                    v130 = v21;
                    v131 = 2080;
                    v132 = v87;
                    v133 = 2080;
                    v134 = v88;
                    v135 = 2080;
                    v136 = v89;
                    v137 = 2080;
                    v138 = v90;
                    _os_log_impl(&dword_196BCC000, v86, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   \"cookies\": []", buf, 0x3Eu);
                    v91 = v117;
                    v117 = 0;
                    if (v91)
                    {
                      if (*(_DWORD *)v91 == 1)
                        WTF::fastFree(v91, v22);
                      else
                        --*(_DWORD *)v91;
                    }
                    v92 = v118;
                    v118 = 0;
                    if (v92)
                    {
                      if (*(_DWORD *)v92 == 1)
                        WTF::fastFree(v92, v22);
                      else
                        --*(_DWORD *)v92;
                    }
                    v93 = v119;
                    v119 = 0;
                    if (v93)
                    {
                      if (*(_DWORD *)v93 == 1)
                        WTF::fastFree(v93, v22);
                      else
                        --*(_DWORD *)v93;
                    }
                    v94 = v120;
                    v120 = 0;
                    if (v94)
                    {
                      if (*(_DWORD *)v94 == 1)
                        WTF::fastFree(v94, v22);
                      else
                        --*(_DWORD *)v94;
                    }
                    v23 = *(_QWORD *)(a5 + 16);
                  }
                  if ((v23 & 0x8000000000000000) == 0 || v23 == -1)
                  {
                    v95 = off_1ECE713E8;
                    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
                    {
                      WTF::String::utf8();
                      if (v120)
                        v96 = (char *)v120 + 16;
                      else
                        v96 = 0;
                      WTF::String::utf8();
                      if (v119)
                        v97 = (char *)v119 + 16;
                      else
                        v97 = 0;
                      WTF::String::utf8();
                      if (v118)
                        v98 = (char *)v118 + 16;
                      else
                        v98 = 0;
                      WTF::String::utf8();
                      if (v117)
                        v99 = (char *)v117 + 16;
                      else
                        v99 = 0;
                      *(_DWORD *)buf = 134219266;
                      v128 = a4;
                      v129 = 2080;
                      v130 = v21;
                      v131 = 2080;
                      v132 = v96;
                      v133 = 2080;
                      v134 = v97;
                      v135 = 2080;
                      v136 = v98;
                      v137 = 2080;
                      v138 = v99;
                      _os_log_impl(&dword_196BCC000, v95, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: BLOCKED cookie access for webPageID=%s, frameID=%s, resourceID=%s, firstParty=%s:   }", buf, 0x3Eu);
                      v100 = v117;
                      v117 = 0;
                      if (v100)
                      {
                        if (*(_DWORD *)v100 == 1)
                          WTF::fastFree(v100, v22);
                        else
                          --*(_DWORD *)v100;
                      }
                      v101 = v118;
                      v118 = 0;
                      if (v101)
                      {
                        if (*(_DWORD *)v101 == 1)
                          WTF::fastFree(v101, v22);
                        else
                          --*(_DWORD *)v101;
                      }
                      v102 = v119;
                      v119 = 0;
                      if (v102)
                      {
                        if (*(_DWORD *)v102 == 1)
                          WTF::fastFree(v102, v22);
                        else
                          --*(_DWORD *)v102;
                      }
                      v103 = v120;
                      v120 = 0;
                      if (v103)
                      {
                        if (*(_DWORD *)v103 == 1)
                          WTF::fastFree(v103, v22);
                        else
                          --*(_DWORD *)v103;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v104 = v121;
    v121 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v104 -= 2;
    }
    v105 = v122;
    v122 = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v105 -= 2;
    }
    v106 = v123;
    v123 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v106 -= 2;
    }
    v107 = v124;
    v124 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
        WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v107 -= 2;
    }
    v108 = v125;
    v125 = 0;
    if (v108)
    {
      if (*(_DWORD *)v108 == 2)
        WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v108 -= 2;
    }
    result = v126;
    v126 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v112 = *(_OWORD *)a10;
    v113 = *(_QWORD *)(a10 + 16);
    return (WTF::StringImpl *)WebKit::logCookieInformationInternal(a2, a3, a4, a5, (const WTF::URL *)a6, a7, a8, a9, &v112, a11, a12, a13, a14);
  }
  return result;
}

uint64_t WebKit::logCookieInformationInternal(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const WTF::URL *a5, _BYTE *a6, const WTF::String **a7, const WTF::String **a8, __int128 *a9, WTF::String *a10, uint64_t a11, WTF::String *a12, uint64_t a13)
{
  uint64_t v18;
  void *v19;
  unint64_t v20;
  int hasStorageAccess;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  char *v25;
  char *v26;
  char *v27;
  const char *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  NSObject *v33;
  char *v34;
  char *v35;
  char *v36;
  const char *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  char *v43;
  char *v44;
  char *v45;
  const char *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  NSObject *v50;
  char *v51;
  char *v52;
  char *v53;
  const char *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  NSObject *v59;
  char *v60;
  char *v61;
  char *v62;
  const char *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  NSObject *v67;
  char *v68;
  char *v69;
  char *v70;
  const char *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  NSObject *v75;
  char *v76;
  char *v77;
  char *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  char *v88;
  char *v89;
  char *v90;
  const char *v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  NSObject *v96;
  char *v97;
  char *v98;
  char *v99;
  const char *v100;
  WTF *v101;
  WTF *v102;
  WTF *v103;
  WTF *v104;
  NSObject *v105;
  char *v106;
  char *v107;
  char *v108;
  const char *v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  WTF *v113;
  NSObject *v114;
  char *v115;
  char *v116;
  char *v117;
  const char *v118;
  WTF *v119;
  WTF *v120;
  WTF *v121;
  WTF *v122;
  NSObject *v123;
  char *v124;
  char *v125;
  char *v126;
  const char *v127;
  WTF *v128;
  WTF *v129;
  WTF *v130;
  NSObject *v131;
  char *v132;
  char *v133;
  char *v134;
  const char *v135;
  WTF *v136;
  WTF *v137;
  WTF *v138;
  NSObject *v139;
  char *v140;
  char *v141;
  char *v142;
  const char *v143;
  WTF *v144;
  WTF *v145;
  WTF *v146;
  NSObject *v147;
  char *v148;
  char *v149;
  char *v150;
  const char *v151;
  WTF *v152;
  WTF *v153;
  WTF *v154;
  NSObject *v155;
  char *v156;
  char *v157;
  char *v158;
  const char *v159;
  WTF *v160;
  WTF *v161;
  WTF *v162;
  NSObject *v163;
  char *v164;
  char *v165;
  char *v166;
  const char *v167;
  WTF *v168;
  WTF *v169;
  WTF *v170;
  WTF *v171;
  NSObject *v172;
  char *v173;
  char *v174;
  char *v175;
  const char *v176;
  WTF *v177;
  WTF *v178;
  WTF *v179;
  WTF *v180;
  NSObject *v181;
  char *v182;
  char *v183;
  char *v184;
  const char *v185;
  WTF *v186;
  WTF *v187;
  WTF *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  NSObject *v196;
  char *v197;
  char *v198;
  char *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  uint64_t v210;
  int v211;
  WTF *v214;
  WTF *v215;
  WTF *v216;
  WTF *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  __int128 v223;
  char v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE buf[12];
  __int16 v237;
  uint64_t v238;
  __int16 v239;
  char *v240;
  __int16 v241;
  char *v242;
  __int16 v243;
  char *v244;
  __int16 v245;
  const char *v246;
  uint64_t v247;

  v18 = (uint64_t)a9;
  v247 = *MEMORY[0x1E0C80C00];
  v234 = 0;
  v235 = 0;
  v232 = *a9;
  v233 = *((_QWORD *)a9 + 2);
  if (!WebCore::NetworkStorageSession::getRawCookies())
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v234, v19);
  WebKit::escapeForJSON(&v231, *a7);
  WebKit::escapeForJSON(&v230, (const WTF::String *)*MEMORY[0x1E0CBF738]);
  WebKit::escapeForJSON(&v229, *a8);
  if (*((_BYTE *)a9 + 16))
    WTF::String::number(*(WTF::String **)a9);
  else
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = a11;
  if ((_BYTE)a11)
    WTF::String::number(a10);
  else
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((_BYTE)a13)
    WTF::String::number(a12);
  else
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  hasStorageAccess = 0;
  if (*((_BYTE *)a9 + 16) && (_BYTE)a11)
  {
    WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, (const WTF::URL *)a7);
    WebCore::RegistrableDomain::RegistrableDomain(&v225, a5);
    if (!*((_BYTE *)a9 + 16))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_665;
    }
    v223 = *a9;
    v224 = 1;
    hasStorageAccess = WebCore::NetworkStorageSession::hasStorageAccess();
    v22 = v225;
    v225 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  v18 = *(_QWORD *)(a4 + 16);
  a5 = (const WTF::URL *)&unk_1ECE71000;
  v20 = (unint64_t)&word_1978CF000;
  if (v18 < 0 && v18 != -1)
    goto LABEL_216;
  v24 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    if (v225)
      v25 = (char *)v225 + 16;
    else
      v25 = 0;
    WTF::String::utf8();
    if (v222)
      v26 = (char *)v222 + 16;
    else
      v26 = 0;
    WTF::String::utf8();
    if (v221)
      v27 = (char *)v221 + 16;
    else
      v27 = 0;
    WTF::String::utf8();
    if (v220)
      v28 = (char *)v220 + 16;
    else
      v28 = 0;
    *(_DWORD *)buf = 134219266;
    *(_QWORD *)&buf[4] = a3;
    v237 = 2080;
    v238 = a1;
    v239 = 2080;
    v240 = v25;
    v241 = 2080;
    v242 = v26;
    v243 = 2080;
    v244 = v27;
    v245 = 2082;
    v246 = v28;
    _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s: { \"url\": \"%{public}s\",", buf, 0x3Eu);
    v29 = v220;
    v220 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
        WTF::fastFree(v29, v19);
      else
        --*(_DWORD *)v29;
    }
    v30 = v221;
    v221 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v19);
      else
        --*(_DWORD *)v30;
    }
    v31 = v222;
    v222 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v19);
      else
        --*(_DWORD *)v31;
    }
    v32 = v225;
    v225 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v19);
      else
        --*(_DWORD *)v32;
    }
    v18 = *(_QWORD *)(a4 + 16);
  }
  if (v18 < 0 && v18 != -1)
    goto LABEL_216;
  v33 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    if (v225)
      v34 = (char *)v225 + 16;
    else
      v34 = 0;
    WTF::String::utf8();
    if (v222)
      v35 = (char *)v222 + 16;
    else
      v35 = 0;
    WTF::String::utf8();
    if (v221)
      v36 = (char *)v221 + 16;
    else
      v36 = 0;
    WTF::String::utf8();
    if (v220)
      v37 = (char *)v220 + 16;
    else
      v37 = 0;
    *(_DWORD *)buf = 134219266;
    *(_QWORD *)&buf[4] = a3;
    v237 = 2080;
    v238 = a1;
    v239 = 2080;
    v240 = v34;
    v241 = 2080;
    v242 = v35;
    v243 = 2080;
    v244 = v36;
    v245 = 2082;
    v246 = v37;
    _os_log_impl(&dword_196BCC000, v33, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"partition\": \"%{public}s\",", buf, 0x3Eu);
    v38 = v220;
    v220 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
        WTF::fastFree(v38, v19);
      else
        --*(_DWORD *)v38;
    }
    v39 = v221;
    v221 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v19);
      else
        --*(_DWORD *)v39;
    }
    v40 = v222;
    v222 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v19);
      else
        --*(_DWORD *)v40;
    }
    v41 = v225;
    v225 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::fastFree(v41, v19);
      else
        --*(_DWORD *)v41;
    }
    v18 = *(_QWORD *)(a4 + 16);
  }
  if ((v18 & 0x8000000000000000) == 0)
    goto LABEL_85;
LABEL_665:
  if (v18 == -1)
  {
LABEL_85:
    v42 = *((_QWORD *)a5 + 125);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      if (v225)
        v43 = (char *)v225 + 16;
      else
        v43 = 0;
      WTF::String::utf8();
      if (v222)
        v44 = (char *)v222 + 16;
      else
        v44 = 0;
      WTF::String::utf8();
      if (v221)
        v45 = (char *)v221 + 16;
      else
        v45 = 0;
      v46 = "true";
      if (!hasStorageAccess)
        v46 = "false";
      *(_DWORD *)buf = *(_QWORD *)(v20 + 144);
      *(_QWORD *)&buf[4] = a3;
      v237 = 2080;
      v238 = a1;
      v239 = 2080;
      v240 = v43;
      v241 = 2080;
      v242 = v44;
      v243 = 2080;
      v244 = v45;
      v245 = 2082;
      v246 = v46;
      _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"hasStorageAccess\": %{public}s,", buf, 0x3Eu);
      v47 = v221;
      v221 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 1)
          WTF::fastFree(v47, v19);
        else
          --*(_DWORD *)v47;
      }
      v48 = v222;
      v222 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1)
          WTF::fastFree(v48, v19);
        else
          --*(_DWORD *)v48;
      }
      v49 = v225;
      v225 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
          WTF::fastFree(v49, v19);
        else
          --*(_DWORD *)v49;
      }
      v18 = *(_QWORD *)(a4 + 16);
    }
    if ((v18 & 0x8000000000000000) == 0 || v18 == -1)
    {
      v50 = *((_QWORD *)a5 + 125);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v225)
          v51 = (char *)v225 + 16;
        else
          v51 = 0;
        WTF::String::utf8();
        if (v222)
          v52 = (char *)v222 + 16;
        else
          v52 = 0;
        WTF::String::utf8();
        if (v221)
          v53 = (char *)v221 + 16;
        else
          v53 = 0;
        WTF::String::utf8();
        if (v220)
          v54 = (char *)v220 + 16;
        else
          v54 = 0;
        *(_DWORD *)buf = *(_QWORD *)(v20 + 144);
        *(_QWORD *)&buf[4] = a3;
        v237 = 2080;
        v238 = a1;
        v239 = 2080;
        v240 = v51;
        v241 = 2080;
        v242 = v52;
        v243 = 2080;
        v244 = v53;
        v245 = 2082;
        v246 = v54;
        _os_log_impl(&dword_196BCC000, v50, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"referer\": \"%{public}s\",", buf, 0x3Eu);
        v55 = v220;
        v220 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 1)
            WTF::fastFree(v55, v19);
          else
            --*(_DWORD *)v55;
        }
        v56 = v221;
        v221 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 1)
            WTF::fastFree(v56, v19);
          else
            --*(_DWORD *)v56;
        }
        v57 = v222;
        v222 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 1)
            WTF::fastFree(v57, v19);
          else
            --*(_DWORD *)v57;
        }
        v58 = v225;
        v225 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 1)
            WTF::fastFree(v58, v19);
          else
            --*(_DWORD *)v58;
        }
        v18 = *(_QWORD *)(a4 + 16);
      }
      if ((v18 & 0x8000000000000000) == 0 || v18 == -1)
      {
        v59 = *((_QWORD *)a5 + 125);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::utf8();
          if (v225)
            v60 = (char *)v225 + 16;
          else
            v60 = 0;
          WTF::String::utf8();
          if (v222)
            v61 = (char *)v222 + 16;
          else
            v61 = 0;
          WTF::String::utf8();
          if (v221)
            v62 = (char *)v221 + 16;
          else
            v62 = 0;
          v63 = "true";
          if (!*a6)
            v63 = "false";
          *(_DWORD *)buf = *(_QWORD *)(v20 + 144);
          *(_QWORD *)&buf[4] = a3;
          v237 = 2080;
          v238 = a1;
          v239 = 2080;
          v240 = v60;
          v241 = 2080;
          v242 = v61;
          v243 = 2080;
          v244 = v62;
          v245 = 2082;
          v246 = v63;
          _os_log_impl(&dword_196BCC000, v59, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"isSameSite\": \"%{public}s\",", buf, 0x3Eu);
          v64 = v221;
          v221 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 1)
              WTF::fastFree(v64, v19);
            else
              --*(_DWORD *)v64;
          }
          v65 = v222;
          v222 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 1)
              WTF::fastFree(v65, v19);
            else
              --*(_DWORD *)v65;
          }
          v66 = v225;
          v225 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 1)
              WTF::fastFree(v66, v19);
            else
              --*(_DWORD *)v66;
          }
          v18 = *(_QWORD *)(a4 + 16);
        }
        if ((v18 & 0x8000000000000000) == 0 || v18 == -1)
        {
          v67 = *((_QWORD *)a5 + 125);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v225)
              v68 = (char *)v225 + 16;
            else
              v68 = 0;
            WTF::String::utf8();
            if (v222)
              v69 = (char *)v222 + 16;
            else
              v69 = 0;
            WTF::String::utf8();
            if (v221)
              v70 = (char *)v221 + 16;
            else
              v70 = 0;
            v71 = "true";
            if (!a6[1])
              v71 = "false";
            *(_DWORD *)buf = *(_QWORD *)(v20 + 144);
            *(_QWORD *)&buf[4] = a3;
            v237 = 2080;
            v238 = a1;
            v239 = 2080;
            v240 = v68;
            v241 = 2080;
            v242 = v69;
            v243 = 2080;
            v244 = v70;
            v245 = 2082;
            v246 = v71;
            _os_log_impl(&dword_196BCC000, v67, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"isTopSite\": \"%{public}s\",", buf, 0x3Eu);
            v72 = v221;
            v221 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 1)
                WTF::fastFree(v72, v19);
              else
                --*(_DWORD *)v72;
            }
            v73 = v222;
            v222 = 0;
            if (v73)
            {
              if (*(_DWORD *)v73 == 1)
                WTF::fastFree(v73, v19);
              else
                --*(_DWORD *)v73;
            }
            v74 = v225;
            v225 = 0;
            if (v74)
            {
              if (*(_DWORD *)v74 == 1)
                WTF::fastFree(v74, v19);
              else
                --*(_DWORD *)v74;
            }
            v18 = *(_QWORD *)(a4 + 16);
          }
          if ((v18 & 0x8000000000000000) == 0 || v18 == -1)
          {
            v75 = *((_QWORD *)a5 + 125);
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
            {
              WTF::String::utf8();
              if (v225)
                v76 = (char *)v225 + 16;
              else
                v76 = 0;
              WTF::String::utf8();
              if (v222)
                v77 = (char *)v222 + 16;
              else
                v77 = 0;
              WTF::String::utf8();
              if (v221)
                v78 = (char *)v221 + 16;
              else
                v78 = 0;
              *(_DWORD *)buf = 134219010;
              *(_QWORD *)&buf[4] = a3;
              v237 = 2080;
              v238 = a1;
              v239 = 2080;
              v240 = v76;
              v241 = 2080;
              v242 = v77;
              v243 = 2080;
              v244 = v78;
              _os_log_impl(&dword_196BCC000, v75, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   \"cookies\": [", buf, 0x34u);
              v79 = v221;
              v221 = 0;
              if (v79)
              {
                if (*(_DWORD *)v79 == 1)
                  WTF::fastFree(v79, v19);
                else
                  --*(_DWORD *)v79;
              }
              v80 = v222;
              v222 = 0;
              if (v80)
              {
                if (*(_DWORD *)v80 == 1)
                  WTF::fastFree(v80, v19);
                else
                  --*(_DWORD *)v80;
              }
              v81 = v225;
              v225 = 0;
              if (v81)
              {
                if (*(_DWORD *)v81 == 1)
                  WTF::fastFree(v81, v19);
                else
                  --*(_DWORD *)v81;
              }
            }
          }
        }
      }
    }
  }
LABEL_216:
  if (HIDWORD(v235))
  {
    v210 = v234 + 136 * HIDWORD(v235);
    v82 = v234 + 58;
    v83 = v20;
    v84 = HIDWORD(v235) - 1;
    v211 = *(_QWORD *)(v83 + 144);
    do
    {
      v85 = v82 - 58;
      WebKit::escapeForJSON(&v225, *(const WTF::String **)(v82 - 58));
      WebKit::escapeForJSON(&v222, *(const WTF::String **)(v82 - 50));
      WebKit::escapeForJSON(&v221, *(const WTF::String **)(v82 - 42));
      WebKit::escapeForJSON(&v220, *(const WTF::String **)(v82 - 34));
      WebKit::escapeForJSON(&v219, *(const WTF::String **)(v82 + 6));
      WebKit::escapeForJSON(&v218, *(const WTF::String **)(v82 + 14));
      v86 = *(_QWORD *)(a4 + 16);
      if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
      {
        v87 = *((_QWORD *)a5 + 125);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::utf8();
          if (v217)
            v88 = (char *)v217 + 16;
          else
            v88 = 0;
          WTF::String::utf8();
          if (v216)
            v89 = (char *)v216 + 16;
          else
            v89 = 0;
          WTF::String::utf8();
          if (v215)
            v90 = (char *)v215 + 16;
          else
            v90 = 0;
          WTF::String::utf8();
          if (v214)
            v91 = (char *)v214 + 16;
          else
            v91 = 0;
          *(_DWORD *)buf = v211;
          *(_QWORD *)&buf[4] = a3;
          v237 = 2080;
          v238 = a1;
          v239 = 2080;
          v240 = v88;
          v241 = 2080;
          v242 = v89;
          v243 = 2080;
          v244 = v90;
          v245 = 2082;
          v246 = v91;
          _os_log_impl(&dword_196BCC000, v87, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   { \"name\": \"%{public}s\",", buf, 0x3Eu);
          v92 = v214;
          v214 = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 1)
              WTF::fastFree(v92, v19);
            else
              --*(_DWORD *)v92;
          }
          v93 = v215;
          v215 = 0;
          a5 = (const WTF::URL *)&unk_1ECE71000;
          if (v93)
          {
            if (*(_DWORD *)v93 == 1)
              WTF::fastFree(v93, v19);
            else
              --*(_DWORD *)v93;
          }
          v94 = v216;
          v216 = 0;
          if (v94)
          {
            if (*(_DWORD *)v94 == 1)
              WTF::fastFree(v94, v19);
            else
              --*(_DWORD *)v94;
          }
          v95 = v217;
          v217 = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 1)
              WTF::fastFree(v95, v19);
            else
              --*(_DWORD *)v95;
          }
          v86 = *(_QWORD *)(a4 + 16);
        }
        if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
        {
          v96 = *((_QWORD *)a5 + 125);
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            if (v217)
              v97 = (char *)v217 + 16;
            else
              v97 = 0;
            WTF::String::utf8();
            if (v216)
              v98 = (char *)v216 + 16;
            else
              v98 = 0;
            WTF::String::utf8();
            if (v215)
              v99 = (char *)v215 + 16;
            else
              v99 = 0;
            WTF::String::utf8();
            if (v214)
              v100 = (char *)v214 + 16;
            else
              v100 = 0;
            *(_DWORD *)buf = v211;
            *(_QWORD *)&buf[4] = a3;
            v237 = 2080;
            v238 = a1;
            v239 = 2080;
            v240 = v97;
            v241 = 2080;
            v242 = v98;
            v243 = 2080;
            v244 = v99;
            v245 = 2082;
            v246 = v100;
            _os_log_impl(&dword_196BCC000, v96, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"value\": \"%{public}s\",", buf, 0x3Eu);
            v101 = v214;
            v214 = 0;
            if (v101)
            {
              if (*(_DWORD *)v101 == 1)
                WTF::fastFree(v101, v19);
              else
                --*(_DWORD *)v101;
            }
            v102 = v215;
            v215 = 0;
            a5 = (const WTF::URL *)&unk_1ECE71000;
            if (v102)
            {
              if (*(_DWORD *)v102 == 1)
                WTF::fastFree(v102, v19);
              else
                --*(_DWORD *)v102;
            }
            v103 = v216;
            v216 = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 1)
                WTF::fastFree(v103, v19);
              else
                --*(_DWORD *)v103;
            }
            v104 = v217;
            v217 = 0;
            if (v104)
            {
              if (*(_DWORD *)v104 == 1)
                WTF::fastFree(v104, v19);
              else
                --*(_DWORD *)v104;
            }
            v86 = *(_QWORD *)(a4 + 16);
          }
          if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
          {
            v105 = *((_QWORD *)a5 + 125);
            if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
            {
              WTF::String::utf8();
              if (v217)
                v106 = (char *)v217 + 16;
              else
                v106 = 0;
              WTF::String::utf8();
              if (v216)
                v107 = (char *)v216 + 16;
              else
                v107 = 0;
              WTF::String::utf8();
              if (v215)
                v108 = (char *)v215 + 16;
              else
                v108 = 0;
              WTF::String::utf8();
              if (v214)
                v109 = (char *)v214 + 16;
              else
                v109 = 0;
              *(_DWORD *)buf = v211;
              *(_QWORD *)&buf[4] = a3;
              v237 = 2080;
              v238 = a1;
              v239 = 2080;
              v240 = v106;
              v241 = 2080;
              v242 = v107;
              v243 = 2080;
              v244 = v108;
              v245 = 2082;
              v246 = v109;
              _os_log_impl(&dword_196BCC000, v105, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"domain\": \"%{public}s\",", buf, 0x3Eu);
              v110 = v214;
              v214 = 0;
              if (v110)
              {
                if (*(_DWORD *)v110 == 1)
                  WTF::fastFree(v110, v19);
                else
                  --*(_DWORD *)v110;
              }
              v111 = v215;
              v215 = 0;
              a5 = (const WTF::URL *)&unk_1ECE71000;
              if (v111)
              {
                if (*(_DWORD *)v111 == 1)
                  WTF::fastFree(v111, v19);
                else
                  --*(_DWORD *)v111;
              }
              v112 = v216;
              v216 = 0;
              if (v112)
              {
                if (*(_DWORD *)v112 == 1)
                  WTF::fastFree(v112, v19);
                else
                  --*(_DWORD *)v112;
              }
              v113 = v217;
              v217 = 0;
              if (v113)
              {
                if (*(_DWORD *)v113 == 1)
                  WTF::fastFree(v113, v19);
                else
                  --*(_DWORD *)v113;
              }
              v86 = *(_QWORD *)(a4 + 16);
            }
            if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
            {
              v114 = *((_QWORD *)a5 + 125);
              if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
              {
                WTF::String::utf8();
                if (v217)
                  v115 = (char *)v217 + 16;
                else
                  v115 = 0;
                WTF::String::utf8();
                if (v216)
                  v116 = (char *)v216 + 16;
                else
                  v116 = 0;
                WTF::String::utf8();
                if (v215)
                  v117 = (char *)v215 + 16;
                else
                  v117 = 0;
                WTF::String::utf8();
                if (v214)
                  v118 = (char *)v214 + 16;
                else
                  v118 = 0;
                *(_DWORD *)buf = v211;
                *(_QWORD *)&buf[4] = a3;
                v237 = 2080;
                v238 = a1;
                v239 = 2080;
                v240 = v115;
                v241 = 2080;
                v242 = v116;
                v243 = 2080;
                v244 = v117;
                v245 = 2082;
                v246 = v118;
                _os_log_impl(&dword_196BCC000, v114, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"path\": \"%{public}s\",", buf, 0x3Eu);
                v119 = v214;
                v214 = 0;
                if (v119)
                {
                  if (*(_DWORD *)v119 == 1)
                    WTF::fastFree(v119, v19);
                  else
                    --*(_DWORD *)v119;
                }
                v120 = v215;
                v215 = 0;
                a5 = (const WTF::URL *)&unk_1ECE71000;
                if (v120)
                {
                  if (*(_DWORD *)v120 == 1)
                    WTF::fastFree(v120, v19);
                  else
                    --*(_DWORD *)v120;
                }
                v121 = v216;
                v216 = 0;
                if (v121)
                {
                  if (*(_DWORD *)v121 == 1)
                    WTF::fastFree(v121, v19);
                  else
                    --*(_DWORD *)v121;
                }
                v122 = v217;
                v217 = 0;
                if (v122)
                {
                  if (*(_DWORD *)v122 == 1)
                    WTF::fastFree(v122, v19);
                  else
                    --*(_DWORD *)v122;
                }
                v86 = *(_QWORD *)(a4 + 16);
              }
              if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
              {
                v123 = *((_QWORD *)a5 + 125);
                if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
                {
                  WTF::String::utf8();
                  if (v217)
                    v124 = (char *)v217 + 16;
                  else
                    v124 = 0;
                  WTF::String::utf8();
                  if (v216)
                    v125 = (char *)v216 + 16;
                  else
                    v125 = 0;
                  WTF::String::utf8();
                  if (v215)
                    v126 = (char *)v215 + 16;
                  else
                    v126 = 0;
                  v127 = *(const char **)(v82 - 26);
                  *(_DWORD *)buf = v211;
                  *(_QWORD *)&buf[4] = a3;
                  v237 = 2080;
                  v238 = a1;
                  v239 = 2080;
                  v240 = v124;
                  v241 = 2080;
                  v242 = v125;
                  v243 = 2080;
                  v244 = v126;
                  v245 = 2048;
                  v246 = v127;
                  _os_log_impl(&dword_196BCC000, v123, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"created\": %f,", buf, 0x3Eu);
                  v128 = v215;
                  v215 = 0;
                  if (v128)
                  {
                    if (*(_DWORD *)v128 == 1)
                      WTF::fastFree(v128, v19);
                    else
                      --*(_DWORD *)v128;
                  }
                  v129 = v216;
                  v216 = 0;
                  if (v129)
                  {
                    if (*(_DWORD *)v129 == 1)
                      WTF::fastFree(v129, v19);
                    else
                      --*(_DWORD *)v129;
                  }
                  v130 = v217;
                  v217 = 0;
                  if (v130)
                  {
                    if (*(_DWORD *)v130 == 1)
                      WTF::fastFree(v130, v19);
                    else
                      --*(_DWORD *)v130;
                  }
                  v86 = *(_QWORD *)(a4 + 16);
                }
                if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
                {
                  v131 = *((_QWORD *)a5 + 125);
                  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
                  {
                    WTF::String::utf8();
                    if (v217)
                      v132 = (char *)v217 + 16;
                    else
                      v132 = 0;
                    WTF::String::utf8();
                    if (v216)
                      v133 = (char *)v216 + 16;
                    else
                      v133 = 0;
                    WTF::String::utf8();
                    if (v215)
                      v134 = (char *)v215 + 16;
                    else
                      v134 = 0;
                    if (*(_BYTE *)(v82 - 10))
                      v135 = *(const char **)(v82 - 18);
                    else
                      v135 = 0;
                    *(_DWORD *)buf = v211;
                    *(_QWORD *)&buf[4] = a3;
                    v237 = 2080;
                    v238 = a1;
                    v239 = 2080;
                    v240 = v132;
                    v241 = 2080;
                    v242 = v133;
                    v243 = 2080;
                    v244 = v134;
                    v245 = 2048;
                    v246 = v135;
                    _os_log_impl(&dword_196BCC000, v131, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"expires\": %f,", buf, 0x3Eu);
                    v136 = v215;
                    v215 = 0;
                    if (v136)
                    {
                      if (*(_DWORD *)v136 == 1)
                        WTF::fastFree(v136, v19);
                      else
                        --*(_DWORD *)v136;
                    }
                    v137 = v216;
                    v216 = 0;
                    if (v137)
                    {
                      if (*(_DWORD *)v137 == 1)
                        WTF::fastFree(v137, v19);
                      else
                        --*(_DWORD *)v137;
                    }
                    v138 = v217;
                    v217 = 0;
                    if (v138)
                    {
                      if (*(_DWORD *)v138 == 1)
                        WTF::fastFree(v138, v19);
                      else
                        --*(_DWORD *)v138;
                    }
                    v86 = *(_QWORD *)(a4 + 16);
                  }
                  if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
                  {
                    v139 = *((_QWORD *)a5 + 125);
                    if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                    {
                      WTF::String::utf8();
                      if (v217)
                        v140 = (char *)v217 + 16;
                      else
                        v140 = 0;
                      WTF::String::utf8();
                      if (v216)
                        v141 = (char *)v216 + 16;
                      else
                        v141 = 0;
                      WTF::String::utf8();
                      if (v215)
                        v142 = (char *)v215 + 16;
                      else
                        v142 = 0;
                      v143 = "true";
                      if (!*(_BYTE *)(v82 - 2))
                        v143 = "false";
                      *(_DWORD *)buf = v211;
                      *(_QWORD *)&buf[4] = a3;
                      v237 = 2080;
                      v238 = a1;
                      v239 = 2080;
                      v240 = v140;
                      v241 = 2080;
                      v242 = v141;
                      v243 = 2080;
                      v244 = v142;
                      v245 = 2082;
                      v246 = v143;
                      _os_log_impl(&dword_196BCC000, v139, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"httpOnly\": %{public}s,", buf, 0x3Eu);
                      v144 = v215;
                      v215 = 0;
                      if (v144)
                      {
                        if (*(_DWORD *)v144 == 1)
                          WTF::fastFree(v144, v19);
                        else
                          --*(_DWORD *)v144;
                      }
                      v145 = v216;
                      v216 = 0;
                      if (v145)
                      {
                        if (*(_DWORD *)v145 == 1)
                          WTF::fastFree(v145, v19);
                        else
                          --*(_DWORD *)v145;
                      }
                      v146 = v217;
                      v217 = 0;
                      if (v146)
                      {
                        if (*(_DWORD *)v146 == 1)
                          WTF::fastFree(v146, v19);
                        else
                          --*(_DWORD *)v146;
                      }
                      v86 = *(_QWORD *)(a4 + 16);
                    }
                    if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
                    {
                      v147 = *((_QWORD *)a5 + 125);
                      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
                      {
                        WTF::String::utf8();
                        if (v217)
                          v148 = (char *)v217 + 16;
                        else
                          v148 = 0;
                        WTF::String::utf8();
                        if (v216)
                          v149 = (char *)v216 + 16;
                        else
                          v149 = 0;
                        WTF::String::utf8();
                        if (v215)
                          v150 = (char *)v215 + 16;
                        else
                          v150 = 0;
                        v151 = "true";
                        if (!*(_BYTE *)(v82 - 1))
                          v151 = "false";
                        *(_DWORD *)buf = v211;
                        *(_QWORD *)&buf[4] = a3;
                        v237 = 2080;
                        v238 = a1;
                        v239 = 2080;
                        v240 = v148;
                        v241 = 2080;
                        v242 = v149;
                        v243 = 2080;
                        v244 = v150;
                        v245 = 2082;
                        v246 = v151;
                        _os_log_impl(&dword_196BCC000, v147, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"secure\": %{public}s,", buf, 0x3Eu);
                        v152 = v215;
                        v215 = 0;
                        if (v152)
                        {
                          if (*(_DWORD *)v152 == 1)
                            WTF::fastFree(v152, v19);
                          else
                            --*(_DWORD *)v152;
                        }
                        v153 = v216;
                        v216 = 0;
                        if (v153)
                        {
                          if (*(_DWORD *)v153 == 1)
                            WTF::fastFree(v153, v19);
                          else
                            --*(_DWORD *)v153;
                        }
                        v154 = v217;
                        v217 = 0;
                        if (v154)
                        {
                          if (*(_DWORD *)v154 == 1)
                            WTF::fastFree(v154, v19);
                          else
                            --*(_DWORD *)v154;
                        }
                        v86 = *(_QWORD *)(a4 + 16);
                      }
                      if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
                      {
                        v155 = *((_QWORD *)a5 + 125);
                        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                        {
                          WTF::String::utf8();
                          if (v217)
                            v156 = (char *)v217 + 16;
                          else
                            v156 = 0;
                          WTF::String::utf8();
                          if (v216)
                            v157 = (char *)v216 + 16;
                          else
                            v157 = 0;
                          WTF::String::utf8();
                          if (v215)
                            v158 = (char *)v215 + 16;
                          else
                            v158 = 0;
                          v159 = "true";
                          if (!*(_BYTE *)v82)
                            v159 = "false";
                          *(_DWORD *)buf = v211;
                          *(_QWORD *)&buf[4] = a3;
                          v237 = 2080;
                          v238 = a1;
                          v239 = 2080;
                          v240 = v156;
                          v241 = 2080;
                          v242 = v157;
                          v243 = 2080;
                          v244 = v158;
                          v245 = 2082;
                          v246 = v159;
                          _os_log_impl(&dword_196BCC000, v155, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"session\": %{public}s,", buf, 0x3Eu);
                          v160 = v215;
                          v215 = 0;
                          if (v160)
                          {
                            if (*(_DWORD *)v160 == 1)
                              WTF::fastFree(v160, v19);
                            else
                              --*(_DWORD *)v160;
                          }
                          v161 = v216;
                          v216 = 0;
                          if (v161)
                          {
                            if (*(_DWORD *)v161 == 1)
                              WTF::fastFree(v161, v19);
                            else
                              --*(_DWORD *)v161;
                          }
                          v162 = v217;
                          v217 = 0;
                          if (v162)
                          {
                            if (*(_DWORD *)v162 == 1)
                              WTF::fastFree(v162, v19);
                            else
                              --*(_DWORD *)v162;
                          }
                          v86 = *(_QWORD *)(a4 + 16);
                        }
                        if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
                        {
                          v163 = *((_QWORD *)a5 + 125);
                          if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
                          {
                            WTF::String::utf8();
                            if (v217)
                              v164 = (char *)v217 + 16;
                            else
                              v164 = 0;
                            WTF::String::utf8();
                            if (v216)
                              v165 = (char *)v216 + 16;
                            else
                              v165 = 0;
                            WTF::String::utf8();
                            if (v215)
                              v166 = (char *)v215 + 16;
                            else
                              v166 = 0;
                            WTF::String::utf8();
                            if (v214)
                              v167 = (char *)v214 + 16;
                            else
                              v167 = 0;
                            *(_DWORD *)buf = v211;
                            *(_QWORD *)&buf[4] = a3;
                            v237 = 2080;
                            v238 = a1;
                            v239 = 2080;
                            v240 = v164;
                            v241 = 2080;
                            v242 = v165;
                            v243 = 2080;
                            v244 = v166;
                            v245 = 2082;
                            v246 = v167;
                            _os_log_impl(&dword_196BCC000, v163, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"comment\": \"%{public}s\",", buf, 0x3Eu);
                            v168 = v214;
                            v214 = 0;
                            if (v168)
                            {
                              if (*(_DWORD *)v168 == 1)
                                WTF::fastFree(v168, v19);
                              else
                                --*(_DWORD *)v168;
                            }
                            v169 = v215;
                            v215 = 0;
                            a5 = (const WTF::URL *)&unk_1ECE71000;
                            if (v169)
                            {
                              if (*(_DWORD *)v169 == 1)
                                WTF::fastFree(v169, v19);
                              else
                                --*(_DWORD *)v169;
                            }
                            v170 = v216;
                            v216 = 0;
                            if (v170)
                            {
                              if (*(_DWORD *)v170 == 1)
                                WTF::fastFree(v170, v19);
                              else
                                --*(_DWORD *)v170;
                            }
                            v171 = v217;
                            v217 = 0;
                            if (v171)
                            {
                              if (*(_DWORD *)v171 == 1)
                                WTF::fastFree(v171, v19);
                              else
                                --*(_DWORD *)v171;
                            }
                            v86 = *(_QWORD *)(a4 + 16);
                          }
                          if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
                          {
                            v172 = *((_QWORD *)a5 + 125);
                            if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                            {
                              WTF::String::utf8();
                              if (v217)
                                v173 = (char *)v217 + 16;
                              else
                                v173 = 0;
                              WTF::String::utf8();
                              if (v216)
                                v174 = (char *)v216 + 16;
                              else
                                v174 = 0;
                              WTF::String::utf8();
                              if (v215)
                                v175 = (char *)v215 + 16;
                              else
                                v175 = 0;
                              WTF::String::utf8();
                              if (v214)
                                v176 = (char *)v214 + 16;
                              else
                                v176 = 0;
                              *(_DWORD *)buf = v211;
                              *(_QWORD *)&buf[4] = a3;
                              v237 = 2080;
                              v238 = a1;
                              v239 = 2080;
                              v240 = v173;
                              v241 = 2080;
                              v242 = v174;
                              v243 = 2080;
                              v244 = v175;
                              v245 = 2082;
                              v246 = v176;
                              _os_log_impl(&dword_196BCC000, v172, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:     \"commentURL\": \"%{public}s\"", buf, 0x3Eu);
                              v177 = v214;
                              v214 = 0;
                              if (v177)
                              {
                                if (*(_DWORD *)v177 == 1)
                                  WTF::fastFree(v177, v19);
                                else
                                  --*(_DWORD *)v177;
                              }
                              v178 = v215;
                              v215 = 0;
                              a5 = (const WTF::URL *)&unk_1ECE71000;
                              if (v178)
                              {
                                if (*(_DWORD *)v178 == 1)
                                  WTF::fastFree(v178, v19);
                                else
                                  --*(_DWORD *)v178;
                              }
                              v179 = v216;
                              v216 = 0;
                              if (v179)
                              {
                                if (*(_DWORD *)v179 == 1)
                                  WTF::fastFree(v179, v19);
                                else
                                  --*(_DWORD *)v179;
                              }
                              v180 = v217;
                              v217 = 0;
                              if (v180)
                              {
                                if (*(_DWORD *)v180 == 1)
                                  WTF::fastFree(v180, v19);
                                else
                                  --*(_DWORD *)v180;
                              }
                              v86 = *(_QWORD *)(a4 + 16);
                            }
                            if ((v86 & 0x8000000000000000) == 0 || v86 == -1)
                            {
                              v181 = *((_QWORD *)a5 + 125);
                              if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
                              {
                                WTF::String::utf8();
                                if (v217)
                                  v182 = (char *)v217 + 16;
                                else
                                  v182 = 0;
                                WTF::String::utf8();
                                if (v216)
                                  v183 = (char *)v216 + 16;
                                else
                                  v183 = 0;
                                WTF::String::utf8();
                                if (v215)
                                  v184 = (char *)v215 + 16;
                                else
                                  v184 = 0;
                                *(_DWORD *)buf = v211;
                                v185 = ",";
                                if (!v84)
                                  v185 = "";
                                *(_QWORD *)&buf[4] = a3;
                                v237 = 2080;
                                v238 = a1;
                                v239 = 2080;
                                v240 = v182;
                                v241 = 2080;
                                v242 = v183;
                                v243 = 2080;
                                v244 = v184;
                                v245 = 2082;
                                v246 = v185;
                                _os_log_impl(&dword_196BCC000, v181, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s:   }%{public}s", buf, 0x3Eu);
                                v186 = v215;
                                v215 = 0;
                                if (v186)
                                {
                                  if (*(_DWORD *)v186 == 1)
                                    WTF::fastFree(v186, v19);
                                  else
                                    --*(_DWORD *)v186;
                                }
                                v187 = v216;
                                v216 = 0;
                                if (v187)
                                {
                                  if (*(_DWORD *)v187 == 1)
                                    WTF::fastFree(v187, v19);
                                  else
                                    --*(_DWORD *)v187;
                                }
                                v188 = v217;
                                v217 = 0;
                                if (v188)
                                {
                                  if (*(_DWORD *)v188 == 1)
                                    WTF::fastFree(v188, v19);
                                  else
                                    --*(_DWORD *)v188;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v189 = v218;
      v218 = 0;
      if (v189)
      {
        if (*(_DWORD *)v189 == 2)
          WTF::StringImpl::destroy(v189, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v189 -= 2;
      }
      v190 = v219;
      v219 = 0;
      if (v190)
      {
        if (*(_DWORD *)v190 == 2)
          WTF::StringImpl::destroy(v190, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v190 -= 2;
      }
      v191 = v220;
      v220 = 0;
      if (v191)
      {
        if (*(_DWORD *)v191 == 2)
          WTF::StringImpl::destroy(v191, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v191 -= 2;
      }
      v192 = v221;
      v221 = 0;
      if (v192)
      {
        if (*(_DWORD *)v192 == 2)
          WTF::StringImpl::destroy(v192, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v192 -= 2;
      }
      v193 = v222;
      v222 = 0;
      if (v193)
      {
        if (*(_DWORD *)v193 == 2)
          WTF::StringImpl::destroy(v193, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v193 -= 2;
      }
      v194 = v225;
      v225 = 0;
      if (v194)
      {
        if (*(_DWORD *)v194 == 2)
          WTF::StringImpl::destroy(v194, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v194 -= 2;
      }
      v82 += 136;
      --v84;
    }
    while (v85 + 136 != v210);
  }
  v195 = *(_QWORD *)(a4 + 16);
  if ((v195 & 0x8000000000000000) == 0 || v195 == -1)
  {
    v196 = *((_QWORD *)a5 + 125);
    if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      if (v225)
        v197 = (char *)v225 + 16;
      else
        v197 = 0;
      WTF::String::utf8();
      if (v222)
        v198 = (char *)v222 + 16;
      else
        v198 = 0;
      WTF::String::utf8();
      if (v221)
        v199 = (char *)v221 + 16;
      else
        v199 = 0;
      *(_DWORD *)buf = 134219010;
      *(_QWORD *)&buf[4] = a3;
      v237 = 2080;
      v238 = a1;
      v239 = 2080;
      v240 = v197;
      v241 = 2080;
      v242 = v198;
      v243 = 2080;
      v244 = v199;
      _os_log_impl(&dword_196BCC000, v196, OS_LOG_TYPE_DEFAULT, "%p - %s::logCookieInformation: webPageID=%s, frameID=%s, resourceID=%s: ]}", buf, 0x34u);
      v200 = v221;
      v221 = 0;
      if (v200)
      {
        if (*(_DWORD *)v200 == 1)
          WTF::fastFree(v200, v19);
        else
          --*(_DWORD *)v200;
      }
      v201 = v222;
      v222 = 0;
      if (v201)
      {
        if (*(_DWORD *)v201 == 1)
          WTF::fastFree(v201, v19);
        else
          --*(_DWORD *)v201;
      }
      v202 = v225;
      v225 = 0;
      if (v202)
      {
        if (*(_DWORD *)v202 == 1)
          WTF::fastFree(v202, v19);
        else
          --*(_DWORD *)v202;
      }
    }
  }
  v203 = v226;
  v226 = 0;
  if (v203)
  {
    if (*(_DWORD *)v203 == 2)
      WTF::StringImpl::destroy(v203, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v203 -= 2;
  }
  v204 = v227;
  v227 = 0;
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
      WTF::StringImpl::destroy(v204, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v204 -= 2;
  }
  v205 = v228;
  v228 = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
      WTF::StringImpl::destroy(v205, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v205 -= 2;
  }
  v206 = v229;
  v229 = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
      WTF::StringImpl::destroy(v206, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v206 -= 2;
  }
  v207 = v230;
  v230 = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
      WTF::StringImpl::destroy(v207, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v207 -= 2;
  }
  v208 = v231;
  v231 = 0;
  if (v208)
  {
    if (*(_DWORD *)v208 == 2)
      WTF::StringImpl::destroy(v208, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v208 -= 2;
  }
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v234, v19);
}

IPC::Encoder *`non-virtual thunk to'WebKit::NetworkResourceLoader::addConsoleMessage(uint64_t a1, char a2, char a3, uint64_t a4)
{
  return WebKit::NetworkResourceLoader::addConsoleMessage((_QWORD *)(a1 - 24), a2, a3, a4);
}

IPC::Encoder *WebKit::NetworkResourceLoader::enqueueSecurityPolicyViolationEvent(_QWORD *a1, char *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v4 = a1 + 12;
  v5 = a1[11];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2196;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v6, v4);
  IPC::ArgumentCoder<WebCore::SecurityPolicyViolationEventInit,void>::encode((IPC::Encoder *)v6, a2);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(a1[2] + 32))(a1 + 2, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::NetworkResourceLoader::enqueueSecurityPolicyViolationEvent(uint64_t a1, char *a2)
{
  return WebKit::NetworkResourceLoader::enqueueSecurityPolicyViolationEvent((_QWORD *)(a1 - 24), a2);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebResourceLoader::ServiceWorkerDidNotHandle,WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2671;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle(WebKit::NetworkResourceLoader *this, WebKit::ServiceWorkerFetchTask *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  WebKit::ServiceWorkerFetchTask *v24;
  WebKit::NetworkLoad *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  int v32;
  _BOOL4 v33;
  _QWORD *v34;
  CFTypeRef v35;
  _BYTE v36[12];
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  _BOOL4 v46;
  __int16 v47;
  int v48;
  __int16 v49;
  _BOOL4 v50;
  uint8_t buf[4];
  WebKit::NetworkResourceLoader *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  _BOOL4 v62;
  __int16 v63;
  int v64;
  __int16 v65;
  _BOOL4 v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  CFTypeRef cf;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_QWORD *)this + 10);
    v5 = *((_QWORD *)this + 11);
    v7 = *((_QWORD *)this + 12);
    v8 = *((_QWORD *)this + 379);
    v9 = *((unsigned __int8 *)this + 315) == 1;
    v10 = *((unsigned __int8 *)this + 3072);
    v11 = *((_QWORD *)this + 519) != 0;
    if (a2)
      v12 = *((_QWORD *)a2 + 5);
    else
      v12 = 0;
    *(_DWORD *)buf = 134220032;
    v52 = this;
    v53 = 2048;
    v54 = v6;
    v55 = 2048;
    v56 = v5;
    v57 = 2048;
    v58 = v7;
    v59 = 2048;
    v60 = v8;
    v61 = 1024;
    v62 = v9;
    v63 = 1024;
    v64 = v10;
    v65 = 1024;
    v66 = v11;
    v67 = 2048;
    v68 = v12;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::serviceWorkerDidNotHandle: (fetchIdentifier=%llu)", buf, 0x50u);
  }
  if (*((WebKit::ServiceWorkerFetchTask **)this + 547) != a2)
  {
    __break(0xC471u);
    JUMPOUT(0x197103B24);
  }
  if (!WebKit::NetworkResourceLoader::abortIfServiceWorkersOnly(this))
  {
    v13 = *((_QWORD *)this + 547);
    if (v13)
    {
      WTF::URL::URL((uint64_t)buf, (uint64_t *)(v13 + 64));
      WTF::URL::URL((uint64_t)&v58 + 6, (uint64_t *)(v13 + 104));
      v14 = *(_QWORD *)(v13 + 144);
      v15 = *(_OWORD *)(v13 + 152);
      *(_OWORD *)(v13 + 152) = 0u;
      v70 = v15;
      *(_QWORD *)&v15 = *(_QWORD *)(v13 + 168);
      *(_QWORD *)(v13 + 168) = 0;
      v69 = v14;
      v71 = v15;
      v16 = *(_QWORD *)(v13 + 176);
      *(_QWORD *)(v13 + 176) = 0;
      v72 = v16;
      v17 = *(_QWORD *)(v13 + 184);
      *(_QWORD *)(v13 + 184) = 0;
      v73 = v17;
      v18 = *(_QWORD *)(v13 + 192);
      *(_QWORD *)(v13 + 192) = 0;
      v74 = v18;
      v19 = *(_QWORD *)(v13 + 200);
      *(_QWORD *)(v13 + 200) = 0;
      v75 = v19;
      LODWORD(v18) = *(_DWORD *)(v13 + 208);
      v77 = *(_BYTE *)(v13 + 212);
      v76 = v18;
      v20 = *(_OWORD *)(v13 + 216);
      *(_OWORD *)(v13 + 216) = 0u;
      v78 = v20;
      v21 = *(_QWORD *)(v13 + 232);
      v22 = *(_QWORD *)(v13 + 240);
      *(_QWORD *)(v13 + 232) = 0;
      v81 = *(_BYTE *)(v13 + 248);
      v79 = v21;
      v80 = v22;
      v23 = *(const void **)(v13 + 256);
      *(_QWORD *)(v13 + 256) = 0;
      cf = v23;
      v24 = (WebKit::ServiceWorkerFetchTask *)*((_QWORD *)this + 547);
      *((_QWORD *)this + 547) = 0;
      if (v24)
        WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v24);
      v25 = (WebKit::NetworkLoad *)*((_QWORD *)this + 483);
      if (v25)
        WebKit::NetworkLoad::updateRequestAfterRedirection(v25, (WebCore::ResourceRequest *)buf);
      v26 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v27 = *((_QWORD *)this + 10);
        v28 = *((_QWORD *)this + 11);
        v29 = *((_QWORD *)this + 12);
        v30 = *((_QWORD *)this + 379);
        v31 = *((unsigned __int8 *)this + 315) == 1;
        v32 = *((unsigned __int8 *)this + 3072);
        v33 = *((_QWORD *)this + 519) != 0;
        *(_DWORD *)v36 = 134219776;
        *(_QWORD *)&v36[4] = this;
        v37 = 2048;
        v38 = v27;
        v39 = 2048;
        v40 = v28;
        v41 = 2048;
        v42 = v29;
        v43 = 2048;
        v44 = v30;
        v45 = 1024;
        v46 = v31;
        v47 = 1024;
        v48 = v32;
        v49 = 1024;
        v50 = v33;
        _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::serviceWorkerDidNotHandle: Restarting network load for redirect", v36, 0x46u);
      }
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v34 = off_1E34C04B0;
      *(_QWORD *)v36 = v34;
      WebKit::NetworkResourceLoader::restartNetworkLoad((uint64_t)this, (WebCore::ResourceRequestBase *)buf, (uint64_t *)v36);
      if (*(_QWORD *)v36)
        (*(void (**)(_QWORD))(**(_QWORD **)v36 + 8))(*(_QWORD *)v36);
      v35 = cf;
      cf = 0;
      if (v35)
        CFRelease(v35);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    }
    else
    {
      WebKit::NetworkResourceLoader::startRequest(this, (WebKit::NetworkResourceLoader *)((char *)this + 168));
    }
  }
}

IPC::Encoder *WebKit::NetworkResourceLoader::notifyReportObservers(uint64_t a1, WebCore::Report **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v4 = a1 + 16;
  if (*(_BYTE *)(a1 + 315) == 1 && *(_BYTE *)(a1 + 3360))
  {
    v5 = (uint64_t *)(a1 + 3344);
    v6 = (uint64_t *)(a1 + 3352);
  }
  else
  {
    v5 = (uint64_t *)(a1 + 96);
    v6 = (uint64_t *)(a1 + 104);
  }
  v7 = *v6;
  v14[0] = *v5;
  v14[1] = v7;
  v8 = *(_QWORD *)(a1 + 88);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2286;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v15 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v9, v14);
  IPC::ArgumentCoder<WebCore::Report,void>::encode((IPC::Encoder *)v9, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 16) + 32))(v4, &v15, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::NetworkResourceLoader::notifyReportObservers(uint64_t a1, WebCore::Report **a2)
{
  return WebKit::NetworkResourceLoader::notifyReportObservers(a1 - 64, a2);
}

WTF *WebKit::NetworkResourceLoader::endpointURIForToken@<X0>(WebKit::NetworkResourceLoader *this@<X0>, WTF::StringImpl **a2@<X1>, WTF *a3@<X8>)
{
  return WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a3, (uint64_t)this + 4912, a2);
}

WTF *`non-virtual thunk to'WebKit::NetworkResourceLoader::endpointURIForToken@<X0>(WebKit::NetworkResourceLoader *this@<X0>, WTF::StringImpl **a2@<X1>, WTF *a3@<X8>)
{
  return WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a3, (uint64_t)this + 4848, a2);
}

uint64_t WebKit::NetworkResourceLoader::sendReportToEndpoints(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _DWORD **a5, char a6)
{
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  void *v36;
  _DWORD *v38;
  WTF::StringImpl *v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  IPC::Encoder *v45;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v42, a3);
  v40 = 0;
  v41 = 0;
  v11 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(WTF::StringImpl ***)a4;
    v13 = 8 * v11;
    do
    {
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)v39, a1 + 4912, v12);
      v15 = v39[0];
      if (v39[0] && *((_DWORD *)v39[0] + 1))
      {
        v16 = v44;
        if (v44 == v43)
        {
          v21 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, v44 + 1, (unint64_t)v39);
          v22 = v44;
          v23 = v44 + 1;
          v24 = v42;
          v25 = *v21;
          *v21 = 0;
          *(_QWORD *)(v24 + 8 * v22) = v25;
          v44 = v23;
        }
        else
        {
          v39[0] = 0;
          *(_QWORD *)(v42 + 8 * v44) = v15;
          v44 = v16 + 1;
        }
      }
      else
      {
        v17 = HIDWORD(v41);
        if (HIDWORD(v41) == (_DWORD)v41)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v40, (unint64_t)v12);
        }
        else
        {
          v18 = v40;
          v19 = *v12;
          if (*v12)
            *(_DWORD *)v19 += 2;
          *(_QWORD *)(v18 + 8 * v17) = v19;
          HIDWORD(v41) = v17 + 1;
        }
      }
      v20 = v39[0];
      v39[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v14);
        else
          *(_DWORD *)v20 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  if (*(_BYTE *)(a1 + 315) == 1 && *(_BYTE *)(a1 + 3360))
  {
    v26 = (WTF::StringImpl **)(a1 + 3344);
    v27 = (WTF::StringImpl **)(a1 + 3352);
  }
  else
  {
    v26 = (WTF::StringImpl **)(a1 + 96);
    v27 = (WTF::StringImpl **)(a1 + 104);
  }
  v28 = *v27;
  v39[0] = *v26;
  v39[1] = v28;
  v29 = *a5;
  *a5 = 0;
  v38 = v29;
  v30 = *(_QWORD *)(a1 + 88);
  v31 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v31 = 2363;
  *(_QWORD *)(v31 + 8) = v30;
  *(_QWORD *)(v31 + 528) = v31 + 16;
  *(_QWORD *)(v31 + 536) = v31 + 16;
  *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v31 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
  v45 = (IPC::Encoder *)v31;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v31, (uint64_t *)v39);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v31, (uint64_t)&v42);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v31, (uint64_t)&v40);
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode((IPC::Encoder *)v31, &v38);
  *IPC::Encoder::grow((IPC::Encoder *)v31, 1uLL, 1) = a6;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16, &v45, 0);
  v33 = v45;
  v45 = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v32);
    WTF::fastFree(v34, v35);
  }
  if (v29)
    WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)v29);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v32);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v36);
}

uint64_t `non-virtual thunk to'WebKit::NetworkResourceLoader::sendReportToEndpoints(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _DWORD **a5, char a6)
{
  return WebKit::NetworkResourceLoader::sendReportToEndpoints(a1 - 64, a2, a3, a4, a5, a6);
}

uint64_t WebKit::NetworkResourceLoader::serviceWorkerDidFinish(uint64_t this)
{
  WebCore::ContentFilter *v1;
  uint64_t v2;
  const WTF::URL *v3;

  v1 = *(WebCore::ContentFilter **)(this + 4792);
  if (v1)
  {
    v2 = this;
    v3 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(this + 168));
    WebCore::ContentFilter::continueAfterNotifyFinished(v1, v3);
    return WebCore::ContentFilter::stopFilteringMainResource(*(WebCore::ContentFilter **)(v2 + 4792));
  }
  return this;
}

unsigned int *WebKit::NetworkResourceLoader::dataReceivedThroughContentFilter(WebKit::NetworkResourceLoader *this, const WebCore::SharedBuffer *a2, uint64_t a3)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  unsigned int *v12;
  unsigned int *result;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  IPC::Encoder *v17;

  v4 = (char *)this + 16;
  v14 = *((_QWORD *)a2 + 6);
  do
    v5 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v5 + 1, (unsigned int *)a2));
  v15 = (unsigned int *)a2;
  v16 = 0;
  v6 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 56))((char *)this + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2667;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v7, (IPC::SharedBufferReference *)&v14);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v17, 0);
  v9 = v17;
  v17 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v10, v11);
  }
  v12 = v16;
  v16 = 0;
  if (v12)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v12);
  result = v15;
  v15 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v8);
  return result;
}

unsigned int *`non-virtual thunk to'WebKit::NetworkResourceLoader::dataReceivedThroughContentFilter(WebKit::NetworkResourceLoader *this, const WebCore::SharedBuffer *a2, uint64_t a3)
{
  return WebKit::NetworkResourceLoader::dataReceivedThroughContentFilter((WebKit::NetworkResourceLoader *)((char *)this - 48), a2, a3);
}

_QWORD *WebKit::NetworkResourceLoader::contentFilterDidBlock@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl *a3@<X2>, CFTypeRef *a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  _QWORD *result;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  WebKit::blockedByContentFilterError((WebKit *)(a1 + 168), (uint64_t)a4);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 4800), (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 4808), (WTF::StringImpl *)(a2 + 8));
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4816) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 4832) = v8;
  v9 = a1 + 4848;
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::__value_func[abi:sn180100]((uint64_t)v21, a2 + 48);
  if (v21 != (_QWORD *)(a1 + 4848))
  {
    v10 = v22;
    v11 = *(_QWORD *)(a1 + 4872);
    if (v22 == v21)
    {
      if (v11 == v9)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v21[0] + 24))(v21, v23);
        (*(void (**)(_QWORD *))(*v22 + 32))(v22);
        v22 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 4872) + 24))(*(_QWORD *)(a1 + 4872), v21);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 4872) + 32))(*(_QWORD *)(a1 + 4872));
        *(_QWORD *)(a1 + 4872) = 0;
        v22 = v21;
        (*(void (**)(_QWORD *, uint64_t))(v23[0] + 24))(v23, a1 + 4848);
        (*(void (**)(_QWORD *))(v23[0] + 32))(v23);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v21[0] + 24))(v21, a1 + 4848);
        (*(void (**)(_QWORD *))(*v22 + 32))(v22);
        v22 = *(_QWORD **)(a1 + 4872);
      }
      *(_QWORD *)(a1 + 4872) = v9;
    }
    else if (v11 == v9)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 4848) + 24))(a1 + 4848, v21);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 4872) + 32))(*(_QWORD *)(a1 + 4872));
      *(_QWORD *)(a1 + 4872) = v22;
      v22 = v21;
    }
    else
    {
      v22 = *(_QWORD **)(a1 + 4872);
      *(_QWORD *)(a1 + 4872) = v10;
    }
  }
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  v14 = *(_QWORD *)(a2 + 80);
  if (v14)
    CFRetain(*(CFTypeRef *)(a2 + 80));
  v15 = *(const void **)(a1 + 4880);
  *(_QWORD *)(a1 + 4880) = v14;
  if (v15)
    CFRelease(v15);
  *(_BYTE *)(a1 + 4888) = *(_BYTE *)(a2 + 88);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 4896), a3);
  if (WebCore::ContentFilterUnblockHandler::needsUIProcess((WebCore::ContentFilterUnblockHandler *)a2))
  {
    WebCore::ContentFilter::setBlockedError(*(WebCore::ContentFilter **)(a1 + 4792), a4);
    return (_QWORD *)WebCore::ContentFilter::handleProvisionalLoadFailure();
  }
  ++*(_DWORD *)(a1 + 8);
  v17 = operator new(0x18uLL);
  *v17 = &off_1E34C04D8;
  v17[1] = a1;
  v17[2] = a1;
  v20 = v17;
  WebCore::ContentFilterUnblockHandler::requestUnblockAsync();
  result = v20;
  if (v20 == v19)
  {
    v18 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

void WebCore::ContentFilter::setBlockedError(WebCore::ContentFilter *this, CFTypeRef *a2)
{
  __int128 v4;
  int v5;
  CFTypeRef v6;
  const void *v7;

  WTF::String::operator=((WTF::StringImpl **)this + 13, (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)this + 14, (WTF::StringImpl *)(a2 + 1));
  v4 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 120) = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 136) = v4;
  WTF::String::operator=((WTF::StringImpl **)this + 19, (WTF::StringImpl *)(a2 + 6));
  v5 = *((_DWORD *)a2 + 14);
  *((_WORD *)this + 82) = *((_WORD *)a2 + 30);
  *((_DWORD *)this + 40) = v5;
  v6 = a2[8];
  if (v6)
    CFRetain(a2[8]);
  v7 = (const void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v6;
  if (v7)
    CFRelease(v7);
  *((_BYTE *)this + 176) = *((_BYTE *)a2 + 72);
}

_QWORD *`non-virtual thunk to'WebKit::NetworkResourceLoader::contentFilterDidBlock@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl *a3@<X2>, CFTypeRef *a4@<X8>)
{
  return WebKit::NetworkResourceLoader::contentFilterDidBlock(a1 - 48, a2, a3, a4);
}

uint64_t WebKit::NetworkResourceLoader::cancelMainResourceLoadForContentFilter(uint64_t result)
{
  if (!*(_QWORD *)(result + 4792))
  {
    result = 2109;
    __break(0xC471u);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::NetworkResourceLoader::cancelMainResourceLoadForContentFilter(uint64_t result)
{
  if (!*(_QWORD *)(result + 4744))
  {
    result = 2109;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkResourceLoader::handleProvisionalLoadFailureFromContentFilter(WebKit::NetworkResourceLoader *this, const WTF::URL *a2, WebCore::FragmentedSharedBuffer **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const WTF::URL *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  WebCore::ResourceError *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;

  v6 = *((_QWORD *)this + 482);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(_QWORD *)(v6 + 256);
  v9 = (const WTF::URL *)WebCore::ContentFilter::blockedPageURL(this);
  WebCore::RegistrableDomain::RegistrableDomain(&v24, v9);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E34C0520;
  v23 = v10;
  WebKit::NetworkProcess::addAllowedFirstPartyForCookies(v7, v8, &v24, 0, (uint64_t *)&v23);
  v12 = (uint64_t)v23;
  v23 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v24;
  v24 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v15 = *((_QWORD *)this + 2);
  v14 = (uint64_t *)((char *)this + 16);
  v16 = (WebCore::ResourceError *)(v14[597] + 104);
  v17 = (*(uint64_t (**)(uint64_t *))(v15 + 56))(v14);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2662;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v24 = (WTF::StringImpl *)v18;
  IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::encode((IPC::Encoder *)v18, (uint64_t)(v14 + 598));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, v14 + 610);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v18, v16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::SubstituteData,void>::encode((IPC::Encoder *)v18, a3);
  (*(void (**)(uint64_t *, WTF::StringImpl **, _QWORD))(*v14 + 32))(v14, &v24, 0);
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::NetworkResourceLoader::handleProvisionalLoadFailureFromContentFilter(WebKit::NetworkResourceLoader *this, const WTF::URL *a2, WebCore::FragmentedSharedBuffer **a3)
{
  return WebKit::NetworkResourceLoader::handleProvisionalLoadFailureFromContentFilter((WebKit::NetworkResourceLoader *)((char *)this - 48), a2, a3);
}

void WebKit::NetworkResourceLoader::useRedirectionForCurrentNavigation(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  WebCore::ResourceResponseBase *v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BOOL4 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(_QWORD *)(a1 + 3032);
    v9 = *(unsigned __int8 *)(a1 + 315) == 1;
    v10 = *(unsigned __int8 *)(a1 + 3072);
    v11 = *(_QWORD *)(a1 + 4152) != 0;
    v30 = 134219776;
    v31 = a1;
    v32 = 2048;
    v33 = v5;
    v34 = 2048;
    v35 = v6;
    v36 = 2048;
    v37 = v7;
    v38 = 2048;
    v39 = v8;
    v40 = 1024;
    v41 = v9;
    v42 = 1024;
    v43 = v10;
    v44 = 1024;
    v45 = v11;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::useRedirectionForCurrentNavigation", (uint8_t *)&v30, 0x46u);
  }
  v12 = WTF::fastMalloc((WTF *)0x100);
  WTF::URL::URL(v12, (uint64_t *)a2);
  v15 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v13 + 40) = v15;
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v13 + 56) = v16;
  v17 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v13 + 64) = v17;
  v18 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 72) = v18;
  v19 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(v13 + 80) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v13 + 88) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(v13 + 92) = v19;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  v20 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(v13 + 96) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v13 + 104) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v13 + 108) = v20;
  v21 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(v13 + 112) = v21;
  *(_BYTE *)(v13 + 120) = 0;
  *(_BYTE *)(v13 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v22 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(v13 + 120) = v22;
    *(_BYTE *)(v13 + 128) = 1;
  }
  v23 = *(_OWORD *)(a2 + 136);
  v24 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v13 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v13 + 152) = v24;
  *(_OWORD *)(v13 + 136) = v23;
  v25 = *(_OWORD *)(a2 + 184);
  v26 = *(_OWORD *)(a2 + 200);
  v27 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(v13 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(v13 + 216) = v27;
  *(_OWORD *)(v13 + 200) = v26;
  *(_OWORD *)(v13 + 184) = v25;
  v28 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(v13 + 240) = v28;
  *(_BYTE *)(v13 + 248) = *(_BYTE *)(a2 + 248);
  v29 = *(WebCore::ResourceResponseBase **)(a1 + 4936);
  *(_QWORD *)(a1 + 4936) = v13;
  if (v29)
    std::default_delete<WebCore::ResourceResponse>::operator()[abi:sn180100](v29, v14);
}

uint64_t std::optional<WebKit::NetworkSession::ServiceWorkerInfo>::operator=[abi:sn180100]<WebKit::NetworkSession::ServiceWorkerInfo,void>(uint64_t a1, WTF::StringImpl *a2)
{
  char v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 16))
  {
    WTF::String::operator=((WTF::StringImpl **)a1, a2);
    v4 = *((_BYTE *)a2 + 8);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v5;
    v4 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void WebKit::NetworkSession::~NetworkSession(WebKit::NetworkSession *this)
{
  _QWORD *v2;
  WTF::StringImpl *v3;
  uint64_t *v4;
  uint64_t v5;
  WebKit::NetworkResourceLoader **v6;
  WebKit::NetworkResourceLoader **v7;
  uint64_t v8;
  WebKit::NetworkResourceLoader **v9;
  WebKit::NetworkResourceLoader **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int **v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int *v34;
  __n128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  WebKit::NetworkCache::Cache *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::TimerBase **v49;
  WebCore::TimerBase *v50;
  uint64_t *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl **v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unsigned __int8 **v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 **v62;
  unsigned __int8 *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  _QWORD *v72;
  char v73;
  char v74;

  *(_QWORD *)this = off_1E34BFEC0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34C0548;
  v72 = v2;
  WebKit::NetworkSession::destroyResourceLoadStatistics((uint64_t)this, (uint64_t *)&v72);
  if (v72)
    (*(void (**)(_QWORD *))(*v72 + 8))(v72);
  v4 = (uint64_t *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v4)
  {
    v5 = *((unsigned int *)v4 - 1);
    v6 = (WebKit::NetworkResourceLoader **)&v4[v5];
    if (*((_DWORD *)v4 - 3))
    {
      v7 = (WebKit::NetworkResourceLoader **)v4;
      if ((_DWORD)v5)
      {
        v8 = 8 * v5;
        v7 = (WebKit::NetworkResourceLoader **)v4;
        while ((unint64_t)*v7 + 1 <= 1)
        {
          ++v7;
          v8 -= 8;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v7 = (WebKit::NetworkResourceLoader **)&v4[v5];
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (WebKit::NetworkResourceLoader **)&v4[v5];
  if (v4)
  {
LABEL_10:
    v9 = (WebKit::NetworkResourceLoader **)&v4[*((unsigned int *)v4 - 1)];
    goto LABEL_15;
  }
  v9 = 0;
LABEL_15:
  while (v7 != v9)
  {
    v10 = v7 + 1;
    WebKit::NetworkResourceLoader::abort(*v7);
    v7 = v6;
    if (v10 != v6)
    {
      v7 = v10;
      while ((unint64_t)*v7 + 1 <= 1)
      {
        if (++v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  if (v4)
    WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::deallocateTable(v4, v3);
  *((_QWORD *)this + 104) = off_1E34C2920;
  v11 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 104) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 105, v3);
  v13 = *((_QWORD *)this + 103);
  if (v13)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v13, v12);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v15 + 16), v12);
  std::unique_ptr<WebKit::WebSharedWorkerServer>::reset[abi:sn180100]((WebKit::WebSharedWorkerServer **)this + 99, 0);
  v17 = (_DWORD *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = (_DWORD *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v18)
    WTF::RefCounted<WebCore::SWServer>::deref(v18);
  if (*((_BYTE *)this + 760))
  {
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 93);
    *((_QWORD *)this + 93) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v20 = *((_QWORD *)this + 92);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)(v20 + 16 * i) != -1)
        {
          v23 = v20 + 16 * i;
          v24 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              WTF::fastFree((WTF *)v24, v16);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v20 - 16), v16);
  }
  v27 = *((_QWORD *)this + 91);
  if (v27)
  {
    v28 = *(unsigned int *)(v27 - 4);
    if ((_DWORD)v28)
    {
      v29 = (uint64_t *)*((_QWORD *)this + 91);
      do
      {
        v30 = *v29;
        if (*v29 != -1)
        {
          *v29 = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v27 - 16), v16);
  }
  v31 = (unsigned int **)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v31)
  {
    v32 = v31[1];
    if (v32)
    {
      v33 = *(v32 - 1);
      if ((_DWORD)v33)
      {
        v34 = v32 + 8;
        do
        {
          v35.n128_f64[0] = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v34 - 8));
          if ((v36 & 1) == 0)
          {
            v37 = *((_QWORD *)v34 + 4);
            if (v37)
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v37, v16);
            v38 = v34[6];
            if ((_DWORD)v38 != -1)
              ((void (*)(char *, unsigned int *, __n128))off_1E34C0170[v38])(&v73, v34, v35);
            v34[6] = -1;
            v39 = *(v34 - 2);
            if ((_DWORD)v39 != -1)
              ((void (*)(char *, unsigned int *))off_1E34C0170[v39])(&v74, v34 - 8);
            *(v34 - 2) = -1;
          }
          v34 += 18;
          --v33;
        }
        while (v33);
      }
      WTF::fastFree((WTF *)(v32 - 4), v16);
    }
    v40 = *v31;
    *v31 = 0;
    if (v40)
    {
      v41 = v40 + 30;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v40 + 30);
        (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
      }
    }
    WTF::fastFree((WTF *)v31, v16);
  }
  MEMORY[0x19AEAF010]((char *)this + 624);
  std::unique_ptr<WebKit::NetworkLoadScheduler>::reset[abi:sn180100]((WebKit::NetworkLoadScheduler **)this + 77, 0);
  v45 = (WebKit::NetworkCache::Cache *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v45)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v45, v44);
  WebKit::PrefetchCache::~PrefetchCache((WebKit::NetworkSession *)((char *)this + 512));
  v47 = *((_QWORD *)this + 63);
  if (v47)
  {
    v48 = *(unsigned int *)(v47 - 4);
    if ((_DWORD)v48)
    {
      v49 = (WebCore::TimerBase **)(v47 + 8);
      do
      {
        if (*(v49 - 1) != (WebCore::TimerBase *)-1)
        {
          v50 = *v49;
          *v49 = 0;
          if (v50)
            std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](v50, v46);
        }
        v49 += 2;
        --v48;
      }
      while (v48);
    }
    WTF::fastFree((WTF *)(v47 - 16), v46);
  }
  v51 = (uint64_t *)*((_QWORD *)this + 62);
  if (v51)
    WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::deallocateTable(v51, v46);
  if (*((_BYTE *)this + 480))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::NetworkSession *)((char *)this + 168), v46);
  v52 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 128, v46);
  v54 = (WTF::StringImpl **)*((_QWORD *)this + 15);
  if (v54)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v54, v53);
  v55 = (WTF::StringImpl **)*((_QWORD *)this + 14);
  if (v55)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v55, v53);
  v56 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v53);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v53);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = (unsigned __int8 **)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v58)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v58);
  v59 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v53);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = *((_QWORD *)this + 5);
  if (v60)
  {
    v61 = *(unsigned int *)(v60 - 4);
    if ((_DWORD)v61)
    {
      v62 = (unsigned __int8 **)(v60 + 8);
      do
      {
        if (*(v62 - 1) != (unsigned __int8 *)-1)
        {
          v63 = *v62;
          *v62 = 0;
          if (v63)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v63, v53);
        }
        v62 += 2;
        --v61;
      }
      while (v61);
    }
    WTF::fastFree((WTF *)(v60 - 16), v53);
  }
  v64 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v64)
  {
    v65 = v64 + 30;
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v64 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 8))(v64);
    }
  }
  v68 = *((_QWORD *)this + 1);
  if (v68)
  {
    *(_QWORD *)(v68 + 8) = 0;
    v69 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v69)
    {
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        atomic_store(1u, v69);
        WTF::fastFree((WTF *)v69, v53);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  _DWORD *v1;
  void *v2;

  WebKit::NetworkSession::~NetworkSession(this);
  if (v1[4])
    bzero(v1, 0x360uLL);
  else
    WTF::fastFree((WTF *)v1, v2);
}

WTF::StringImpl *WebKit::NetworkSession::invalidateAndCancel(WebKit::NetworkSession *this, void *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v17;

  WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::values((uint64_t)this + 40, a2, (uint64_t)&v16);
  if (v17)
  {
    v4 = v16;
    v5 = 8 * v17;
    do
    {
      v6 = *(_QWORD *)v4;
      v4 = (WTF::StringImpl *)((char *)v4 + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  WTF::Vector<WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v3);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = *(unsigned int **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v7);
      }
    }
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 76);
  if (result)
  {
    v13 = (WTF::StringImpl *)*((_QWORD *)result + 9);
    if (v13)
      *(_DWORD *)v13 += 2;
    v16 = v13;
    *((_QWORD *)this + 76) = 0;
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(result, (WTF::StringImpl *)v7);
    WTF::FileSystemImpl::markPurgeable((WTF::FileSystemImpl *)&v16, v14);
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::NotifyResourceLoadStatisticsProcessed>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 326;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

WTF::StringImpl *WebKit::NetworkSession::deleteAndRestrictWebsiteDataForRegistrableDomains(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v17;

  v10 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD **)(a1 + 24);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 216), &v17))
  {
    v11 = *(unsigned int *)(a3 + 60);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(a3 + 48);
      v13 = 8 * v11;
      do
      {
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = off_1E34C0660;
        v17 = v14;
        WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict();
        v15 = v17;
        v17 = 0;
        if (v15)
          (*(void (**)(_QWORD *))(*v15 + 8))(v15);
        v12 += 8;
        v13 -= 8;
      }
      while (v13);
    }
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3 + 48, 0);
  return WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(*(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 24), a2, (unsigned int *)a3, a4, a5);
}

WTF::StringImpl *WebKit::NetworkSession::resetFirstPartyDNSData(WebKit::NetworkSession *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 15) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  return std::__optional_destruct_base<WebCore::RegistrableDomain,false>::reset[abi:sn180100]((WebKit::NetworkSession *)((char *)this + 128), a2);
}

uint64_t WebKit::NetworkSession::storePrivateClickMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 488))
  {
    *(_BYTE *)(a2 + 32) = 1;
    return std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>(a1 + 168, a2);
  }
  if (*(_BYTE *)(a2 + 32))
    return std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>(a1 + 168, a2);
  if (*(_BYTE *)(a2 + 48))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34C0688;
  v6 = (uint64_t)v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, a2, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 312))
  {
    WebCore::PrivateClickMeasurement::operator=(a1, a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>(a1, a2);
    *(_BYTE *)(a1 + 312) = 1;
  }
  return a1;
}

_QWORD *WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WebCore::PCM::AttributionTriggerData &&::String &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = (WTF::StringImpl *)a1[29];
  a1[29] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[24];
  a1[24] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[23];
  a1[23] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[18];
  a1[18] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 14), a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 9), v7);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 7), v8);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 5), v9);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 3), v10);
  v12 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
  }
  return a1;
}

void WebKit::NetworkSession::clearPrivateClickMeasurement(uint64_t a1)
{
  WTF::StringImpl *v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  if (*(_BYTE *)(a1 + 480))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 168), v2);
    *(_BYTE *)(a1 + 480) = 0;
  }
  *(_BYTE *)(a1 + 488) = 0;
}

WTF::StringImpl *WebKit::NetworkSession::setPrivateClickMeasurementAppBundleIDForTesting(WebCore *a1, uint64_t a2)
{
  const WTF::String *v4;
  uint64_t isRunningTest;
  void *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  WebCore::applicationBundleIdentifier(a1);
  isRunningTest = WebKit::isRunningTest((WebKit *)&v14, v4);
  if ((isRunningTest & 1) == 0)
  {
    if (v14 && *((_DWORD *)v14 + 1))
    {
      WTF::String::utf8();
      WTFLogAlways();
      isRunningTest = (uint64_t)v13;
      v13 = 0;
      if (isRunningTest)
      {
        if (*(_DWORD *)isRunningTest == 1)
          isRunningTest = WTF::fastFree((WTF *)isRunningTest, v6);
        else
          --*(_DWORD *)isRunningTest;
      }
    }
    else
    {
      isRunningTest = WTFLogAlways();
    }
  }
  WebCore::applicationBundleIdentifier((WebCore *)isRunningTest);
  v9 = WebKit::isRunningTest((WebKit *)&v13, v7);
  v10 = v13;
  v13 = 0;
  if (!v10)
  {
LABEL_12:
    if ((v9 & 1) != 0)
      goto LABEL_13;
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1971054C4);
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v10, v8);
  if ((v9 & 1) == 0)
    goto LABEL_17;
LABEL_13:
  (*(void (**)(_QWORD *, uint64_t))(**((_QWORD **)a1 + 19) + 136))(*((_QWORD **)a1 + 19), a2);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebKit::NetworkSession::removeKeptAliveLoad(WebKit::NetworkSession *this, WebKit::NetworkResourceLoader *a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  WebKit::NetworkResourceLoader *v7;

  v3 = (uint64_t *)((char *)this + 496);
  v7 = a2;
  result = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WebKit::NetworkResourceLoader const*>((uint64_t *)this + 62, &v7);
  v5 = *((_QWORD *)this + 62);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::remove(v3, (WTF::StringImpl *)result);
  return result;
}

_QWORD *WebKit::NetworkSession::CachedNetworkResourceLoader::expirationTimerFired(WebKit::NetworkSession::CachedNetworkResourceLoader *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = *(_QWORD *)(*((_QWORD *)this + 7) + 3856);
  v3 = *(_QWORD *)(v2 + 72);
  v5 = *(_QWORD *)(v2 + 80);
  result = (_QWORD *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 208), &v5);
  if (result)
    return WebKit::NetworkSession::removeLoaderWaitingWebProcessTransfer((uint64_t)result, *(_QWORD *)(*((_QWORD *)this + 7) + 4400));
  return result;
}

_QWORD *WebKit::NetworkSession::removeLoaderWaitingWebProcessTransfer(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *result;
  WebCore::TimerBase *v5;
  WebKit::NetworkResourceLoader *v6;
  WTF::StringImpl *v7;
  WebCore::TimerBase *v8;

  v2 = (uint64_t *)(a1 + 504);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 504), a2);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::take(&v8, v2, v3);
  v5 = v8;
  if (v8)
  {
    v6 = (WebKit::NetworkResourceLoader *)*((_QWORD *)v8 + 7);
    *((_QWORD *)v8 + 7) = 0;
    WebKit::NetworkResourceLoader::abort(v6);
    if (v6)
      WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v6 + 2, v7);
    return (_QWORD *)std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](v5, v7);
  }
  return result;
}

WebCore::TimerBase *WebKit::NetworkSession::takeLoaderAwaitingWebProcessTransfer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  WebCore::TimerBase *result;
  uint64_t v8;
  WebCore::TimerBase *v9;

  v4 = (uint64_t *)(a1 + 504);
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 504), a2);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::take(&v9, v4, v5);
  result = v9;
  if (v9)
  {
    v8 = *((_QWORD *)v9 + 7);
    *((_QWORD *)v9 + 7) = 0;
    result = (WebCore::TimerBase *)std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](result, v6);
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  return result;
}

void WebKit::NetworkSession::createWebSocketTask(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

IPC::Encoder *WebKit::NetworkSession::reportNetworkIssue(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 334;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a3);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerFetchTask&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v21 = *(unsigned int **)(a3 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)result));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
  }
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

uint64_t *WebKit::NetworkSession::removeNavigationPreloaderTask(WebKit::NetworkSession *this, WebKit::ServiceWorkerFetchTask *a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = (uint64_t *)((char *)this + 736);
  v7 = *((_QWORD *)a2 + 5);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 92, &v7);
  v5 = *((_QWORD *)this + 92);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

unsigned int **WebKit::NetworkSession::unregisterSWServerConnection(unsigned int **this, WebKit::WebSWServerConnection *a2)
{
  unsigned int *v2;

  v2 = this[96];
  if (v2)
  {
    this = (unsigned int **)*((_QWORD *)v2 + 17);
    if (this)
      return WebKit::WebSWOriginStore::unregisterSWServerConnection(this, a2);
  }
  return this;
}

uint64_t WebKit::NetworkSession::requestBackgroundFetchPermission(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t *v6[2];
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 24);
  v4 = *(os_unfair_lock_s **)(v3 + 32);
  v6[0] = &v7;
  v6[1] = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(v4, v6, a3, 0, 0);
}

_QWORD *WebKit::NetworkSession::softUpdate(uint64_t a1, uint64_t a2, char a3, const WebCore::ResourceRequest *a4, uint64_t *a5)
{
  uint64_t *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v10 = (uint64_t *)(a1 + 728);
  v11 = WTF::fastMalloc((WTF *)0x1B0);
  result = (_QWORD *)WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(v11, a1, a2, a3, a4, a5);
  v13 = *(_QWORD *)(a1 + 728);
  if (v13
    || (result = WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::expand(v10, 0), (v13 = *v10) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v13 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v11)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v14;
      v19 = (uint64_t *)(v13 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*v10 - 16);
      v19 = v21;
    }
  }
  *v19 = v11;
  v23 = *v10;
  if (*v10)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v10;
  if (*v10)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 <= 0x400)
  {
    if (3 * v28 > 4 * v27)
      return result;
    return WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::expand(v10, v19);
  }
  if (v28 <= 2 * v27)
    return WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::expand(v10, v19);
  return result;
}

IPC::Encoder *WebKit::NetworkSession::createContextConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  char v16[8];
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22[2];
  IPC::Encoder *v23;

  v21[0] = a3;
  v21[1] = a4;
  v6 = *(os_unfair_lock_s **)(*(_QWORD *)(a1 + 32) + 32);
  v16[0] = 1;
  v17 = a2;
  v18 = v21;
  v19 = a5;
  v20 = a1 + 24;
  v7 = *a6;
  *a6 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34C0700;
  v8[1] = v7;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 315;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v23 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v10, (uint64_t)v16);
  v22[0] = (uint64_t)v8;
  v22[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v23, v22, 0, 0);
  v12 = v22[0];
  v22[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkSession::appBoundDomains(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(a1 + 32) + 32);
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34C0728;
  v5[1] = v4;
  v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 316;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
  v14[0] = (uint64_t)v5;
  v14[1] = v6;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v15, v14, 0, 0);
  v10 = v14[0];
  v14[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::NetworkSession::addAllowedFirstPartyForCookies(uint64_t a1, uint64_t a2, uint64_t a3, char a4, WTF::ASCIICaseInsensitiveHash **a5)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  if (!a4
    || a3 == a2
    || (result = WebKit::NetworkProcess::allowsFirstPartyForCookies(*(_QWORD *)(a1 + 32), a3, a5), (_DWORD)result))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E34C0750;
    v11 = v10;
    WebKit::NetworkProcess::addAllowedFirstPartyForCookies(v9, a2, a5, 0, (uint64_t *)&v11);
    result = (uint64_t)v11;
    v11 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::NetworkSession::createBackgroundFetchRecordLoader@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v12 = *(_QWORD *)(a1 + 32);
  v13 = WTF::fastMalloc((WTF *)0xFD0);
  result = WebKit::BackgroundFetchLoad::BackgroundFetchLoad(v13, v12, *(_QWORD *)(a1 + 24), a2, a3, a4, a5);
  *a6 = result;
  return result;
}

uint64_t WebKit::NetworkSession::createBackgroundFetchStore@<X0>(WebKit::NetworkSession *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WebKit::NetworkSession::ensureBackgroundFetchStore(this);
  ++*(_DWORD *)(result + 8);
  *a2 = result;
  return result;
}

uint64_t WebKit::NetworkSession::ensureBackgroundFetchStore(WebKit::NetworkSession *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;

  result = *((_QWORD *)this + 97);
  if (!result)
  {
    v3 = *((_QWORD *)this + 100);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
    v4 = *(unsigned int **)(v3 + 8);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    v6 = WebKit::NetworkSession::ensureSWServer(this);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
    v7 = *(unsigned int **)(v6 + 8);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    result = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = off_1E34C46C0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v4;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = v7;
    v9 = (_DWORD *)*((_QWORD *)this + 97);
    *((_QWORD *)this + 97) = result;
    if (v9)
    {
      if (v9[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        return *((_QWORD *)this + 97);
      }
      else
      {
        --v9[2];
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkSocketChannel::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t **a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, int a13, unsigned __int16 a14, int a15, __int16 a16)
{
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t result;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  __int128 v34;
  uint64_t v35;

  v18 = *(_QWORD *)(a1 + 72);
  v19 = (unsigned int *)(v18 + 120);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)&v34 = a2;
  v21 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v18 + 208), &v34);
  v22 = (uint64_t *)WTF::fastMalloc((WTF *)0xA0);
  v34 = *(_OWORD *)a7;
  v35 = *(_QWORD *)(a7 + 16);
  result = WebKit::NetworkSocketChannel::NetworkSocketChannel((uint64_t)v22, a1, v21, a3, a4, a5, a6, &v34, a9, a10, a11, a12, v28, a14, 0, a16);
  if (v18)
  {
    do
    {
      v24 = __ldaxr(v19);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v19));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)(v18 + 120));
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  if (v22[6])
  {
    *a8 = v22;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::NetworkSocketChannel::didClose(v22, 0, (const WTF::String *)&v34);
    v27 = (WTF::StringImpl *)v34;
    *(_QWORD *)&v34 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    *a8 = 0;
    return (*(uint64_t (**)(uint64_t *))(*v22 + 8))(v22);
  }
  return result;
}

uint64_t *WebKit::NetworkSocketChannel::didClose(uint64_t *this, WTF::StringImpl *a2, const WTF::String *a3)
{
  __int16 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  _DWORD *v12;
  int v13;
  IPC::Encoder *v14;

  v4 = (__int16)a2;
  v5 = this;
  if ((this[12] & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((this[12] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v6 = (*(uint64_t (**)(uint64_t *))(*this + 56))(this);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2791;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v14 = (IPC::Encoder *)v7;
    *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 2uLL, 2) = v4;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a3);
    (*(void (**)(uint64_t *, IPC::Encoder **, _QWORD))(*v5 + 32))(v5, &v14, 0);
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
    return WebKit::NetworkSocketChannel::finishClosingIfPossible(v5);
  }
  else
  {
    v12 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v12 += 2;
    v13 = *((unsigned __int8 *)this + 144);
    *((_WORD *)this + 64) = (_WORD)a2;
    if (v13)
    {
      this = (uint64_t *)this[17];
      v5[17] = (uint64_t)v12;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
    }
    else
    {
      this[17] = (uint64_t)v12;
      *((_BYTE *)this + 144) = 1;
    }
  }
  return this;
}

uint64_t WebKit::NetworkSocketChannel::NetworkSocketChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, int a13, unsigned __int16 a14, int a15, __int16 a16)
{
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)a1 = off_1E34BFFE8;
  *(_QWORD *)(a1 + 8) = &unk_1E34C0040;
  *(_QWORD *)(a1 + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 56), a2 + 48);
  v22 = *(unsigned int **)(a2 + 56);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) = a6;
  if (a3)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
    v24 = *(unsigned int **)(a3 + 8);
    if (v24)
    {
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = off_1E34B3740;
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v26 = off_1E34C0778;
  v26[1] = WebKit::NetworkSocketChannel::sendDelayedError;
  v26[2] = 0;
  v26[3] = a1;
  *(_QWORD *)(a1 + 112) = v26;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a7;
  v27 = *(_QWORD *)(a1 + 40);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      v35 = *a8;
      v36 = *((_QWORD *)a8 + 2);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, _QWORD, __int16))(*(_QWORD *)v28 + 192))(&v37, v28, a7, &v35, a9, a10, a1, a4, a5, a11, a12, a14, a16);
      v29 = v37;
      v37 = 0;
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v29;
      if (v30)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        v31 = v37;
        v37 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        v29 = *(_QWORD *)(a1 + 48);
      }
      if (v29)
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), a7);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 56), "resume");
      }
    }
  }
  return a1;
}

uint64_t *WebKit::NetworkSocketChannel::sendDelayedError(WebKit::NetworkSocketChannel *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  v2 = (uint64_t *)((char *)this + 120);
  v3 = (*(uint64_t (**)(WebKit::NetworkSocketChannel *))(*(_QWORD *)this + 56))(this);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2795;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v15 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, v2);
  (*(void (**)(WebKit::NetworkSocketChannel *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v15, 0);
  result = (uint64_t *)v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (uint64_t *)WTF::fastFree(v7, v8);
  }
  if (*((_BYTE *)this + 144))
  {
    v9 = (*(uint64_t (**)(WebKit::NetworkSocketChannel *))(*(_QWORD *)this + 56))(this);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 2791;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v15 = (IPC::Encoder *)v10;
    LOWORD(v9) = *((_WORD *)this + 64);
    *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 2uLL, 2) = v9;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)this + 17);
    (*(void (**)(WebKit::NetworkSocketChannel *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v15, 0);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
    return WebKit::NetworkSocketChannel::finishClosingIfPossible((uint64_t *)this);
  }
  return result;
}

void WebKit::NetworkSocketChannel::~NetworkSocketChannel(WebKit::NetworkSocketChannel *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::SessionSet *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *(_QWORD *)this = off_1E34BFFE8;
  *((_QWORD *)this + 1) = &unk_1E34C0040;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *((_QWORD *)this + 5);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v3 + 120);
        if (v6)
        {
          v7 = *(WebKit::SessionSet **)(v6 + 8);
          if (v7)
          {
            ++*(_DWORD *)v7;
            (*(void (**)(uint64_t, WebKit::SessionSet *))(*(_QWORD *)v5 + 200))(v5, v7);
            WTF::RefCounted<WebKit::SessionSet>::deref(v7, v8);
            v3 = *((_QWORD *)this + 6);
          }
        }
      }
    }
    objc_msgSend(*(id *)(v3 + 56), "cancel");
  }
  if (*((_BYTE *)this + 144))
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  *((_QWORD *)this + 8) = off_1E34B3740;
  v11 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::TimerBase::~TimerBase((WebKit::NetworkSocketChannel *)((char *)this + 64));
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v12);
    }
  }
  v17 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v12);
    }
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v12);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkSocketChannel::~NetworkSocketChannel(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::NetworkSocketChannel::~NetworkSocketChannel(WebKit::NetworkSocketChannel *this, WTF::StringImpl *a2)
{
  WebKit::NetworkSocketChannel::~NetworkSocketChannel((WebKit::NetworkSocketChannel *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkSocketChannel::~NetworkSocketChannel((WebKit::NetworkSocketChannel *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

void WebKit::NetworkSocketChannel::sendString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebSocketTask::sendString(*(_QWORD *)(a1 + 48), a2, a3, a4);
}

void WebKit::NetworkSocketChannel::sendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebSocketTask::sendData(*(_QWORD *)(a1 + 48), a2, a3, a4);
}

uint64_t *WebKit::NetworkSocketChannel::finishClosingIfPossible(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;

  if (*((_DWORD *)this + 14))
  {
    *((_DWORD *)this + 14) = 2;
    v1 = *(_QWORD *)(this[3] + 8);
    if (v1)
      v2 = v1 - 48;
    else
      v2 = 0;
    ++*(_DWORD *)(v2 + 8);
    this = WebKit::NetworkConnectionToWebProcess::removeSocketChannel(v2, this[4]);
    if (v1)
    {
      if (*(_DWORD *)(v2 + 8) == 1)
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 48) + 8))(v1 - 48);
      else
        --*(_DWORD *)(v2 + 8);
    }
  }
  else
  {
    *((_DWORD *)this + 14) = 1;
  }
  return this;
}

IPC::Encoder *WebKit::NetworkSocketChannel::didConnect(WebKit::NetworkSocketChannel *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = (*(uint64_t (**)(WebKit::NetworkSocketChannel *))(*(_QWORD *)this + 56))(this);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2792;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a3);
  (*(void (**)(WebKit::NetworkSocketChannel *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkSocketChannel::didReceiveText(WebKit::NetworkSocketChannel *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(WebKit::NetworkSocketChannel *))(*(_QWORD *)this + 56))(this);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2796;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  (*(void (**)(WebKit::NetworkSocketChannel *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkSocketChannel::didReceiveBinaryData(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2793;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, a2, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::NetworkSocketChannel::didReceiveMessageError(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;

  v2 = WTF::String::operator=((WTF::StringImpl **)(a1 + 120), a2);
  WTF::cryptographicallyRandomUnitInterval((WTF *)v2);
  return WebCore::TimerBase::start();
}

IPC::Encoder *WebKit::NetworkSocketChannel::didSendHandshakeRequest(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2797;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkSocketChannel::didReceiveHandshakeResponse(uint64_t a1, WebCore::ResourceResponseBase *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  WebCore::ResourceResponseBase::sanitizeHTTPHeaderFields();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2794;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::NetworkSocketChannel::messageSenderConnection(WebKit::NetworkSocketChannel *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v1)
    v2 = v1 - 48;
  else
    v2 = 0;
  return *(_QWORD *)(v2 + 64);
}

void WebKit::PingLoad::timeoutTimerFired(WebKit::PingLoad *this)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint8_t buf[138];
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::timeoutTimerFired", buf, 0xCu);
  }
  v3 = *((_QWORD *)this + 485);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = *(_DWORD **)buf;
  v7[0] = 0;
  v5 = *(_DWORD **)(v3 + 160);
  if (v5)
    *v5 += 2;
  v7[1] = v5;
  v6 = *(_OWORD *)(v3 + 184);
  v8 = *(_OWORD *)(v3 + 168);
  v9 = v6;
  if (v4)
    *v4 += 2;
  v10 = v4;
  v11 = 0;
  v12 = 4;
  v13 = 0;
  v14 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  v17 = 0;
  v18 = 0;
  v16 = v16 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)v7, (const WebCore::ResourceResponse *)buf);
}

uint64_t sub_197106E44(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,CFTypeRef cf,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  WTF::StringImpl *v58;
  const void *v59;
  WTF::StringImpl *v60;
  uint64_t result;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  const void *v65;
  uint64_t v66;
  const void *v67;

  v59 = v67;
  v67 = 0;
  if (v59)
    CFRelease(v59);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v66, a2);
  if (v65)
    CFRelease(v65);
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v60);
    else
      *(_DWORD *)v64 -= 2;
  }
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v60);
    else
      *(_DWORD *)v63 -= 2;
  }
  result = (uint64_t)v62;
  if (!v62)
  {
LABEL_16:
    if (!v58)
      return result;
    goto LABEL_19;
  }
  if (*(_DWORD *)v62 != 2)
  {
    *(_DWORD *)v62 -= 2;
    goto LABEL_16;
  }
  result = WTF::StringImpl::destroy(v62, v60);
  if (!v58)
    return result;
LABEL_19:
  if (*(_DWORD *)v58 == 2)
    return WTF::StringImpl::destroy(v58, v60);
  *(_DWORD *)v58 -= 2;
  return result;
}

uint64_t WebKit::PingLoad::PingLoad(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  WebKit::NetworkLoadChecker *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  CFTypeRef v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v48;
  int v49;
  WTF::StringImpl *v50;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;
  CFTypeRef v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  CFTypeRef cf;

  *(_QWORD *)(a1 + 8) = 0;
  v7 = (unsigned int *)(a1 + 8);
  *(_QWORD *)a1 = off_1E34C0078;
  *(_QWORD *)(a1 + 16) = a2[10];
  v8 = (uint64_t *)(a1 + 32);
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(a1 + 32, a3);
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 3808) = v9;
  *(_QWORD *)(a1 + 3816) = 0;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 3824));
  *(_QWORD *)(a1 + 3824) = off_1E34B3740;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34C07A0;
  v10[1] = WebKit::PingLoad::timeoutTimerFired;
  v10[2] = 0;
  v10[3] = a1;
  *(_QWORD *)(a1 + 3872) = v10;
  v11 = a2[9];
  v12 = (_DWORD *)a2[35];
  LODWORD(v60) = *(_DWORD *)(a1 + 3024);
  *(_DWORD *)((char *)&v60 + 3) = *(_DWORD *)(a1 + 3027);
  v13 = *(WTF::StringImpl **)(a1 + 3032);
  if (v13)
    *(_DWORD *)v13 += 2;
  v61 = v13;
  v14 = *(_OWORD *)(a1 + 3056);
  v62 = *(_OWORD *)(a1 + 3040);
  v63 = v14;
  v15 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 120));
  v16 = *(WTF::StringImpl **)v15;
  if (*(_QWORD *)v15)
    *(_DWORD *)v16 += 2;
  v57 = v16;
  v17 = *(_OWORD *)(v15 + 24);
  v58 = *(_OWORD *)(v15 + 8);
  v59 = v17;
  v18 = *(WTF::StringImpl **)(a1 + 3328);
  if (v18)
    *(_DWORD *)v18 += 2;
  v54 = v18;
  v55 = *(_OWORD *)(a1 + 3336);
  v56 = *(_OWORD *)(a1 + 3352);
  v19 = *(unsigned int **)(a1 + 72);
  if (v19)
  {
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  v53 = (WTF *)v19;
  v21 = *(unsigned int **)(a1 + 64);
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v52 = (WTF *)v21;
  if (*(_DWORD *)(a1 + 3284))
  {
    v23 = **(unsigned int ***)(a1 + 3272);
    do
      v48 = __ldaxr(v23);
    while (__stlxr(v48 + 1, v23));
  }
  else
  {
    v23 = 0;
  }
  v51 = (WTF *)v23;
  WebCore::ResourceRequestBase::httpReferrer((WebCore::ResourceRequestBase *)(a1 + 120));
  v24 = WTF::fastMalloc((WTF *)0x490);
  *(_QWORD *)(a1 + 3880) = WebKit::NetworkLoadChecker::NetworkLoadChecker(v24, v11, 0, v12, (int *)&v60, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), (uint64_t *)(a1 + 3232), (uint64_t *)&v57, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, *(_BYTE *)(a1 + 3265), (uint64_t *)&v50, *(_BYTE *)(a1 + 2979), v49, *(_WORD *)(a1 + 2980), 0,
                             0,
                             1);
  v26 = v50;
  v50 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (v51)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v51, v25);
  if (v52)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v52, v25);
  if (v53)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v53, v25);
  v27 = v54;
  v54 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v57;
  v57 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v25);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v25);
    else
      *(_DWORD *)v61 -= 2;
  }
  WebKit::NetworkConnectionToWebProcess::resolveBlobReferences(a2, v8, a1 + 3888);
  v29 = *(unsigned int *)(a1 + 3900);
  if ((_DWORD)v29)
  {
    v30 = *(_QWORD **)(a1 + 3888);
    v31 = 8 * v29;
    do
    {
      if (*v30)
        (*(void (**)(_QWORD))(*(_QWORD *)*v30 + 16))(*v30);
      ++v30;
      v31 -= 8;
    }
    while (v31);
  }
  v32 = (unsigned int *)a2[9];
  v33 = v32 + 30;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  v35 = *(WebKit::NetworkLoadChecker **)(a1 + 3880);
  *((_BYTE *)v35 + 528) = 1;
  if (*(_BYTE *)(a1 + 3096))
  {
    std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>((uint64_t)v35 + 264, (uint64_t *)(a1 + 3072));
    v35 = *(WebKit::NetworkLoadChecker **)(a1 + 3880);
  }
  WebKit::NetworkLoadChecker::setParentCrossOriginEmbedderPolicy(v35, (const WebCore::CrossOriginEmbedderPolicy *)(a1 + 3184));
  WebKit::NetworkLoadChecker::setCrossOriginEmbedderPolicy(*(WebKit::NetworkLoadChecker **)(a1 + 3880), (const WebCore::CrossOriginEmbedderPolicy *)(a1 + 3208));
  v36 = *(_QWORD *)(a1 + 3880);
  v37 = *(_QWORD *)(a1 + 3784);
  v38 = *(_QWORD *)(a1 + 3792);
  WTF::URL::operator=(v36 + 344, (WTF::StringImpl *)(a1 + 3744));
  WTF::URL::operator=(v36 + 384, (WTF::StringImpl *)(a1 + 3144));
  *(_QWORD *)(v36 + 424) = v37;
  *(_BYTE *)(v36 + 432) = v38;
  WebCore::TimerBase::start();
  v39 = *(_QWORD *)(a1 + 3880);
  WebCore::ResourceRequest::ResourceRequest(&v60, (const WebCore::ResourceRequest *)(a1 + 120));
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7, a1);
  v40 = *(unsigned int **)(a1 + 8);
  if (v40)
  {
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
  }
  do
    v42 = __ldaxr(v33);
  while (__stlxr(v42 + 1, v33));
  v43 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v43 = &off_1E34C07C8;
  *((_QWORD *)v43 + 1) = a1;
  *((_QWORD *)v43 + 2) = v40;
  *((_QWORD *)v43 + 3) = v32;
  v57 = v43;
  WebKit::NetworkLoadChecker::check(v39, (WebCore::ResourceRequestBase *)&v60, 0, &v57);
  if (v57)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v57 + 8))(v57);
  v44 = cf;
  cf = 0;
  if (v44)
    CFRelease(v44);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v60);
  do
  {
    v45 = __ldaxr(v33);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v33));
  if (!v46)
  {
    atomic_store(1u, v32 + 30);
    (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
  }
  return a1;
}

void WebKit::PingLoad::~PingLoad(WebKit::PingLoad *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v3 = *((_QWORD *)this + 477);
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 477) + 16))(*((_QWORD *)this + 477));
  }
  v7 = *((unsigned int *)this + 975);
  if ((_DWORD)v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 486);
    v9 = 8 * v7;
    do
    {
      if (*v8)
        (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 3888, a2);
  std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100]((WebKit::NetworkLoadChecker **)this + 485, 0);
  *((_QWORD *)this + 478) = off_1E34B3740;
  v10 = *((_QWORD *)this + 484);
  *((_QWORD *)this + 484) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WebCore::TimerBase::~TimerBase((WebKit::PingLoad *)((char *)this + 3824));
  v12 = *((_QWORD *)this + 477);
  *((_QWORD *)this + 477) = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v12 + 8));
  v13 = *((_QWORD *)this + 476);
  *((_QWORD *)this + 476) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::PingLoad *)((char *)this + 32), v11);
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v14);
}

{
  WebKit::PingLoad::~PingLoad(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::PingLoad::didFinish(WebKit::PingLoad *this, const WebCore::ResourceError *a2, const WebCore::ResourceResponse *a3)
{
  uint64_t v4;
  void *v5;

  v4 = *((_QWORD *)this + 476);
  *((_QWORD *)this + 476) = 0;
  (*(void (**)(uint64_t, const WebCore::ResourceError *, const WebCore::ResourceResponse *))(*(_QWORD *)v4 + 16))(v4, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebKit::PingLoad::~PingLoad(this, v5);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::PingLoad::willPerformHTTPRedirection(uint64_t a1, WebCore::ResourceResponse *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  _BYTE v14[192];
  CFTypeRef cf;

  v8 = *(_QWORD *)(a1 + 3880);
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v14);
  v9 = *a4;
  *a4 = 0;
  v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v10 = &off_1E34C0808;
  *((_QWORD *)v10 + 1) = a1;
  *((_QWORD *)v10 + 2) = v9;
  v13 = v10;
  WebKit::NetworkLoadChecker::checkRedirection(v8, (uint64_t)v14, a3, a2, 0, &v13);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 8))(v11);
  v12 = cf;
  cf = 0;
  if (v12)
    CFRelease(v12);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v14);
}

WTF::StringImpl *WebKit::PingLoad::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26[2];
  __int128 v27;
  __int128 v28;
  WTF::StringImpl *v29;
  int v30;
  __int16 v31;
  CFTypeRef v32;
  char v33;
  __int128 buf;
  CFTypeRef cf;
  char v36;
  CFTypeRef v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::didReceiveChallenge", (uint8_t *)&buf, 0xCu);
  }
  if (*(_BYTE *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21) == 8)
  {
    v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 3880) + 80) + 192);
    *(_QWORD *)&buf = "AuthenticationManager";
    *((_QWORD *)&buf + 1) = 22;
    v10 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v9, (WTF::ASCIILiteralHash *)&buf);
    v11 = *(_QWORD *)(a1 + 64);
    if (v11)
      v12 = v11 + 8;
    else
      v12 = 0;
    return (WTF::StringImpl *)WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v10, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), v12, a2, a3, a4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    do
      v15 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v15 + 1, (unsigned int *)v14));
  }
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&buf);
  cf = 0;
  v16 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v16 + 16))(v16, 2, &buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  v19 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = (WTF::StringImpl *)buf;
  *(_QWORD *)&buf = 0;
  if (!result)
    goto LABEL_19;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_19:
    if (!v14)
      return result;
    goto LABEL_22;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
  if (!v14)
    return result;
LABEL_22:
  if (*(_QWORD *)(v14 + 8))
  {
    v20 = *(_QWORD *)(a1 + 3880);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = (WTF::StringImpl *)buf;
    v26[0] = 0;
    v22 = *(WTF::StringImpl **)(v20 + 160);
    if (v22)
      *(_DWORD *)v22 += 2;
    v26[1] = v22;
    v23 = *(_OWORD *)(v20 + 184);
    v27 = *(_OWORD *)(v20 + 168);
    v28 = v23;
    if (v21)
      *(_DWORD *)v21 += 2;
    v29 = v21;
    v30 = 0;
    v31 = 2;
    v32 = 0;
    v33 = 1;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&buf);
    v37 = 0;
    v38 = 0;
    v36 = v36 & 0xF1 | 4;
    WebKit::PingLoad::didFinish((WebKit::PingLoad *)a1, (const WebCore::ResourceError *)v26, (const WebCore::ResourceResponse *)&buf);
  }
  do
  {
    v24 = __ldaxr((unsigned int *)v14);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v14));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)v14);
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v14, v17);
  }
  return result;
}

uint64_t WebKit::PingLoad::didReceiveResponse(unsigned int *a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  NSObject *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE v17[36];
  _QWORD v18[3];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v17 = 134218240;
    *(_QWORD *)&v17[4] = a1;
    *(_WORD *)&v17[12] = 1024;
    *(_DWORD *)&v17[14] = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::didReceiveResponse - httpStatusCode=%d", v17, 0x12u);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 2, (uint64_t)a1);
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
    v11 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 2);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (*(_QWORD *)(v9 + 8))
    {
      *(_QWORD *)v17 = 0;
      *(_QWORD *)&v17[8] = 0;
      WTF::URL::invalidate((WTF::URL *)&v17[8]);
      v18[2] = 0;
      v18[0] = 0;
      *(_QWORD *)((char *)v18 + 6) = 0;
      v19 = 1;
      WebKit::PingLoad::didFinish((WebKit::PingLoad *)a1, (const WebCore::ResourceError *)v17, a2);
    }
    do
    {
      v14 = __ldaxr((unsigned int *)v9);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v9));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v9);
      return WTF::fastFree((WTF *)v9, v13);
    }
  }
  else
  {
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return result;
}

void WebKit::PingLoad::didReceiveData(WebKit::PingLoad *this, const WebCore::SharedBuffer *a2)
{
  NSObject *v3;
  int v4;
  WebKit::PingLoad *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 134217984;
    v5 = this;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::didReceiveData", (uint8_t *)&v4, 0xCu);
  }
}

void WebKit::PingLoad::didCompleteWithError(WebKit::PingLoad *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  int v12;
  WebKit::PingLoad *v13;
  __int16 v14;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)a2 + 60);
  v6 = off_1ECE713E8;
  v7 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (!v7)
      goto LABEL_7;
    MEMORY[0x19AEB7BFC](a2);
    v8 = *((_DWORD *)a2 + 14);
    v12 = 134218240;
    v13 = this;
    v14 = 1024;
    v15 = v8;
    v9 = "%p - PingLoad::didCompleteWithError, error_code=%d";
    v10 = v6;
    v11 = 18;
  }
  else
  {
    if (!v7)
      goto LABEL_7;
    v12 = 134217984;
    v13 = this;
    v9 = "%p - PingLoad::didComplete";
    v10 = v6;
    v11 = 12;
  }
  _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v12, v11);
LABEL_7:
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v12);
  v17 = 0;
  v18 = 0;
  v16 = v16 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, a2, (const WebCore::ResourceResponse *)&v12);
}

void sub_197107D88(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CFTypeRef cf,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  const void *v50;
  uint64_t v51;
  const void *v52;

  v50 = v52;
  v52 = 0;
  if (v50)
    CFRelease(v50);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v51, a2);
}

void WebKit::PingLoad::wasBlocked(WebKit::PingLoad *this)
{
  NSObject *v2;
  _BYTE v3[29];
  uint64_t v4;
  uint8_t v5[80];
  uint8_t buf[4];
  WebKit::PingLoad *v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v7 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::wasBlocked", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v3, (const WTF::URL *)(*((_QWORD *)this + 485) + 160), 0);
  v4 = 0;
  WebKit::blockedError((WebKit *)v3, (uint64_t)v5);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  v9 = 0;
  v10 = 0;
  v8 = v8 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)v5, (const WebCore::ResourceResponse *)buf);
}

void sub_197107EA8(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v2;
  WTF::StringImpl *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const void *v14;
  uint64_t v15;
  const void *v16;

  v2 = v16;
  v16 = 0;
  if (v2)
    CFRelease(v2);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v15, a2);
  v4 = v14;
  v14 = 0;
  if (v4)
    CFRelease(v4);
  v5 = v13;
  v13 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v9);
}

void WebKit::PingLoad::cannotShowURL(WebKit::PingLoad *this)
{
  NSObject *v2;
  _BYTE v3[29];
  uint64_t v4;
  uint8_t v5[80];
  uint8_t buf[4];
  WebKit::PingLoad *v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v7 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::cannotShowURL", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v3, (const WTF::URL *)(*((_QWORD *)this + 485) + 160), 0);
  v4 = 0;
  WebKit::cannotShowURLError((WebKit *)v3, (uint64_t)v5);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  v9 = 0;
  v10 = 0;
  v8 = v8 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)v5, (const WebCore::ResourceResponse *)buf);
}

void sub_19710805C(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v2;
  WTF::StringImpl *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const void *v14;
  uint64_t v15;
  const void *v16;

  v2 = v16;
  v16 = 0;
  if (v2)
    CFRelease(v2);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v15, a2);
  v4 = v14;
  v14 = 0;
  if (v4)
    CFRelease(v4);
  v5 = v13;
  v13 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v9);
}

void WebKit::PingLoad::wasBlockedByRestrictions(WebKit::PingLoad *this)
{
  NSObject *v2;
  _BYTE v3[29];
  uint64_t v4;
  uint8_t v5[80];
  uint8_t buf[4];
  WebKit::PingLoad *v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v7 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::wasBlockedByRestrictions", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v3, (const WTF::URL *)(*((_QWORD *)this + 485) + 160), 0);
  v4 = 0;
  WebKit::wasBlockedByRestrictionsError((WebKit *)v3, (uint64_t)v5);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  v9 = 0;
  v10 = 0;
  v8 = v8 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)v5, (const WebCore::ResourceResponse *)buf);
}

void sub_197108210(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v2;
  WTF::StringImpl *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const void *v14;
  uint64_t v15;
  const void *v16;

  v2 = v16;
  v16 = 0;
  if (v2)
    CFRelease(v2);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v15, a2);
  v4 = v14;
  v14 = 0;
  if (v4)
    CFRelease(v4);
  v5 = v13;
  v13 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v9);
}

void WebKit::PingLoad::wasBlockedByDisabledFTP(WebKit::PingLoad *this)
{
  NSObject *v2;
  _BYTE v3[29];
  uint64_t v4;
  uint8_t v5[80];
  uint8_t buf[4];
  WebKit::PingLoad *v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v7 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::wasBlockedByDisabledFTP", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v3, (const WTF::URL *)(*((_QWORD *)this + 485) + 160), 0);
  v4 = 0;
  WebKit::ftpDisabledError((WebKit *)v3, (uint64_t)v5);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  v9 = 0;
  v10 = 0;
  v8 = v8 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(this, (const WebCore::ResourceError *)v5, (const WebCore::ResourceResponse *)buf);
}

void sub_1971083C4(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v2;
  WTF::StringImpl *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const void *v14;
  uint64_t v15;
  const void *v16;

  v2 = v16;
  v16 = 0;
  if (v2)
    CFRelease(v2);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v15, a2);
  v4 = v14;
  v14 = 0;
  if (v4)
    CFRelease(v4);
  v5 = v13;
  v13 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v9);
}

uint64_t WebKit::PreconnectTask::willSendRedirectedRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::PreconnectTask::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void WebKit::PreconnectTask::didFailLoading(WebKit::PreconnectTask *this, const WebCore::ResourceError *a2)
{
  NSObject *v4;
  _BOOL8 v5;
  int v6;
  const WebCore::NetworkLoadMetrics *v7;
  int v8;
  WebKit::PreconnectTask *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  v5 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    MEMORY[0x19AEB7BFC](a2);
    v6 = *((_DWORD *)a2 + 14);
    v8 = 134218240;
    v9 = this;
    v10 = 1024;
    v11 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - PreconnectTask::didFailLoading, error_code=%d", (uint8_t *)&v8, 0x12u);
  }
  v7 = (const WebCore::NetworkLoadMetrics *)WebCore::NetworkLoadMetrics::emptyMetrics((WebCore::NetworkLoadMetrics *)v5);
  WebKit::PreconnectTask::didFinish(this, a2, v7);
}

uint64_t WebKit::NetworkResourceLoader::isAllowedToAskUserForCredentials(WebKit::NetworkResourceLoader *this)
{
  return *((unsigned __int8 *)this + 4178);
}

uint64_t WebKit::NetworkResourceLoader::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

_DWORD *WebKit::NetworkResourceLoader::deref(WebKit::NetworkResourceLoader *this, WTF::StringImpl *a2)
{
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)this + 2, a2);
}

uint64_t WebKit::NetworkResourceLoader::httpUserAgent(WebKit::NetworkResourceLoader *this)
{
  return WebCore::ResourceRequestBase::httpUserAgent((WebKit::NetworkResourceLoader *)((char *)this + 168));
}

uint64_t `non-virtual thunk to'WebKit::NetworkResourceLoader::httpUserAgent(WebKit::NetworkResourceLoader *this)
{
  return WebCore::ResourceRequestBase::httpUserAgent((WebKit::NetworkResourceLoader *)((char *)this + 104));
}

uint64_t WebKit::NetworkSession::shouldLogCookieInformation(WebKit::NetworkSession *this)
{
  return 0;
}

void WebKit::NetworkSession::hostNamesWithAlternativeServices(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebKit::NetworkSession::originsWithCredentials(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::NetworkSession::hasIsolatedSession()
{
  return 0;
}

uint64_t WebKit::NetworkSession::hasAppBoundSession(WebKit::NetworkSession *this)
{
  return 0;
}

uint64_t WebKit::NetworkSession::removeNetworkWebsiteData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::NetworkSession::countNonDefaultSessionSets(WebKit::NetworkSession *this)
{
  return 0;
}

uint64_t WebKit::NetworkSocketChannel::messageSenderDestinationID(WebKit::NetworkSocketChannel *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebKit::PreconnectTask::isSynchronous(WebKit::PreconnectTask *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebKit::NetworkResourceLoader::SynchronousLoadData::SynchronousLoadData(uint64_t a1, uint64_t *a2)
{
  WebCore::ResourceRequest *v4;
  uint64_t v5;

  v4 = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)a1);
  v5 = *a2;
  *a2 = 0;
  *((_QWORD *)v4 + 25) = v5;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceRequest *)((char *)v4 + 208));
  *(_QWORD *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 346) = *(_BYTE *)(a1 + 346) & 0xF1 | 4;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 472));
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 518) = 0;
  *(_BYTE *)(a1 + 536) = 1;
  return a1;
}

WTF::StringImpl **std::unique_ptr<WebKit::NetworkResourceLoader::SynchronousLoadData>::reset[abi:sn180100](WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  WTF *v10;
  void *v11;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (const void *)*((_QWORD *)v2 + 66);
    *((_QWORD *)v2 + 66) = 0;
    if (v3)
      CFRelease(v3);
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 64);
    *((_QWORD *)v2 + 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 59);
    *((_QWORD *)v2 + 59) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 58);
    *((_QWORD *)v2 + 58) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (const void *)*((_QWORD *)v2 + 56);
    *((_QWORD *)v2 + 56) = 0;
    if (v7)
      CFRelease(v7);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WTF::StringImpl *)((char *)v2 + 208), a2);
    v8 = *((_QWORD *)v2 + 25);
    *((_QWORD *)v2 + 25) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = (const void *)*((_QWORD *)v2 + 24);
    *((_QWORD *)v2 + 24) = 0;
    if (v9)
      CFRelease(v9);
    WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
    return (WTF::StringImpl **)WTF::fastFree(v10, v11);
  }
  return result;
}

WebCore::ResourceResponseBase *std::default_delete<WebCore::ResourceResponse>::operator()[abi:sn180100](WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v2;
  const void *v3;
  WTF *v4;
  void *v5;

  if (this)
  {
    v2 = this;
    v3 = (const void *)*((_QWORD *)this + 30);
    *((_QWORD *)v2 + 30) = 0;
    if (v3)
      CFRelease(v3);
    WebCore::ResourceResponseBase::~ResourceResponseBase(v2, a2);
    return (WebCore::ResourceResponseBase *)WTF::fastFree(v4, v5);
  }
  return this;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = (WTF::StringImpl **)((char *)this + 8);
    do
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *(v4 - 1);
      *(v4 - 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t std::unique_ptr<WebCore::ContentFilter>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = (WTF *)MEMORY[0x19AEADA8C]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v5)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

WebKit::NetworkCache::Entry *std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](WebKit::NetworkCache::Entry **a1, WTF::StringImpl *a2)
{
  WebKit::NetworkCache::Entry *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::Entry::~Entry(result, a2);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v4, v5);
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    WebCore::ShareableResource::~ShareableResource((WebCore::ShareableResource *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

WebKit::NetworkLoad *std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](WebKit::NetworkLoad **a1, WebKit::NetworkLoad *a2)
{
  WebKit::NetworkLoad *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkLoad::~NetworkLoad(result, a2);
    return (WebKit::NetworkLoad *)WTF::fastFree(v4, v5);
  }
  return result;
}

void std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100](uint64_t a1, _QWORD *a2)
{
  WebCore::ResourceRequestBase *v3;
  const void *v4;
  void *v5;
  unsigned int *v6;
  const void *v7;
  WTF *v8;
  void *v9;

  if (a2)
  {
    v3 = (WebCore::ResourceRequestBase *)(a2 + 34);
    v4 = (const void *)a2[58];
    a2[58] = 0;
    if (v4)
      CFRelease(v4);
    WebCore::ResourceRequestBase::~ResourceRequestBase(v3);
    v6 = (unsigned int *)a2[33];
    a2[33] = 0;
    if (v6)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v5);
    v7 = (const void *)a2[30];
    a2[30] = 0;
    if (v7)
      CFRelease(v7);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)a2, (WTF::StringImpl *)v5);
    WTF::fastFree(v8, v9);
  }
}

void WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  _BYTE v8[256];

  v6 = *a1;
  *a1 = 0;
  std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v8, a3);
  WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v6, a2, (uint64_t)v8, a4);
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v8, v7);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WTF::Box<WebCore::NetworkLoadMetrics>::Data::Data<WebCore::NetworkLoadMetrics const&>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _DWORD *v6;
  __int128 v7;
  _DWORD *v8;

  *(_DWORD *)result = 1;
  v2 = *a2;
  *(_OWORD *)(result + 24) = a2[1];
  *(_OWORD *)(result + 8) = v2;
  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  *(_QWORD *)(result + 88) = *((_QWORD *)a2 + 10);
  *(_OWORD *)(result + 72) = v5;
  *(_OWORD *)(result + 56) = v4;
  *(_OWORD *)(result + 40) = v3;
  v6 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(result + 96) = v6;
  v7 = a2[6];
  *(_QWORD *)(result + 120) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(result + 104) = v7;
  v8 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v8)
    ++*v8;
  *(_QWORD *)(result + 128) = v8;
  return result;
}

void WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v7;
  WTF::StringImpl *v8;
  _BYTE v9[256];

  v7 = std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v9, a3);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, __n128))(*(_QWORD *)a1 + 16))(a1, a2, v9, a4, v7);
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v9, v8);
}

uint64_t std::make_unique[abi:sn180100]<WebCore::ContentSecurityPolicy,WTF::URL,decltype(nullptr),WebKit::NetworkResourceLoader *>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0xF0);
  if (*a3)
    v7 = *a3 + 64;
  else
    v7 = 0;
  result = MEMORY[0x19AEB0E58](v6, a2, 0, v7);
  *a1 = result;
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester const&,WebCore::NavigationRequester*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    *(_QWORD *)result = v4;
    v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 8) = v5;
    v6 = *(unsigned int **)(a2 + 40);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *(_QWORD *)(result + 40) = v6;
    v8 = *(unsigned int **)(a2 + 48);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *(_QWORD *)(result + 48) = v8;
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result + 56, (uint64_t *)(a2 + 56));
    v10 = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(v3 + 76) = *(_BYTE *)(a2 + 76);
    *(_DWORD *)(v3 + 72) = v10;
    *(_WORD *)(v3 + 80) = *(_WORD *)(a2 + 80);
    v11 = *(_DWORD **)(a2 + 88);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(v3 + 88) = v11;
    v12 = *(_DWORD **)(a2 + 96);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(v3 + 96) = v12;
    *(_WORD *)(v3 + 104) = *(_WORD *)(a2 + 104);
    v13 = *(_DWORD **)(a2 + 112);
    if (v13)
      *v13 += 2;
    *(_QWORD *)(v3 + 112) = v13;
    v14 = *(_DWORD **)(a2 + 120);
    if (v14)
      *v14 += 2;
    *(_QWORD *)(v3 + 120) = v14;
    *(_BYTE *)(v3 + 128) = *(_BYTE *)(a2 + 128);
    *(_OWORD *)(v3 + 136) = *(_OWORD *)(a2 + 136);
    v15 = *(_OWORD *)(a2 + 152);
    v16 = *(_OWORD *)(a2 + 168);
    v17 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(v3 + 196) = *(_OWORD *)(a2 + 196);
    *(_OWORD *)(v3 + 184) = v17;
    *(_OWORD *)(v3 + 168) = v16;
    *(_OWORD *)(v3 + 152) = v15;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void std::__optional_storage_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (*(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      WTF::URL::operator=(a1, (WTF::StringImpl *)a2);
      v5 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      v6 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v5;
      if (v6)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v4);
      *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 56));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 64), (WTF::StringImpl *)(a2 + 64));
      v7 = *(_BYTE *)(a2 + 74);
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      *(_BYTE *)(a1 + 74) = v7;
    }
  }
  else if (*(_BYTE *)(a1 + 80))
  {
    v8 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    v12 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v13)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v13, (WTF::StringImpl *)a2);
    v14 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
  else
  {
    WTF::URL::URL(a1, (uint64_t *)a2);
    v9 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 40) = v9;
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a1 + 56) = v10;
    v11 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 64) = v11;
    LOWORD(v11) = *(_WORD *)(a2 + 72);
    *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
    *(_WORD *)(a1 + 72) = v11;
    *(_BYTE *)(a1 + 80) = 1;
  }
}

uint64_t WebCore::NetworkLoadInformation::NetworkLoadInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  v12 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v12;
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 192) = v13;
  WTF::URL::URL(a1 + 200, (uint64_t *)(a2 + 200));
  v14 = *(_QWORD *)(a2 + 240);
  v15 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v14;
  *(_QWORD *)(a1 + 248) = v15;
  v16 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a1 + 256) = v16;
  v17 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 264) = v17;
  v18 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = v18;
  v19 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 280) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a2 + 288) = 0;
  *(_DWORD *)(a1 + 288) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a2 + 292) = 0;
  *(_DWORD *)(a1 + 292) = v19;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  v20 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a1 + 296) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = 0;
  *(_DWORD *)(a1 + 304) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a2 + 308) = 0;
  *(_DWORD *)(a1 + 308) = v20;
  v21 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a1 + 312) = v21;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  if (*(_BYTE *)(a2 + 328))
  {
    v22 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a1 + 320) = v22;
    *(_BYTE *)(a1 + 328) = 1;
  }
  v23 = *(_OWORD *)(a2 + 336);
  v24 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v24;
  *(_OWORD *)(a1 + 336) = v23;
  v25 = *(_OWORD *)(a2 + 384);
  v26 = *(_OWORD *)(a2 + 400);
  v27 = *(_OWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 431) = *(_DWORD *)(a2 + 431);
  *(_OWORD *)(a1 + 400) = v26;
  *(_OWORD *)(a1 + 416) = v27;
  *(_OWORD *)(a1 + 384) = v25;
  v28 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = 0;
  *(_QWORD *)(a1 + 440) = v28;
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  v29 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v29;
  v30 = *(_OWORD *)(a2 + 488);
  v31 = *(_OWORD *)(a2 + 504);
  v32 = *(_OWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 504) = v31;
  *(_OWORD *)(a1 + 520) = v32;
  *(_OWORD *)(a1 + 488) = v30;
  v33 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  *(_QWORD *)(a1 + 544) = v33;
  v34 = *(_OWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = v34;
  v35 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a2 + 576) = 0;
  *(_QWORD *)(a1 + 576) = v35;
  *(_OWORD *)(a1 + 584) = 0u;
  v36 = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a2 + 584) = 0;
  *(_QWORD *)(a1 + 584) = v36;
  LODWORD(v36) = *(_DWORD *)(a2 + 592);
  *(_DWORD *)(a2 + 592) = 0;
  *(_DWORD *)(a1 + 592) = v36;
  LODWORD(v36) = *(_DWORD *)(a2 + 596);
  *(_DWORD *)(a2 + 596) = 0;
  *(_DWORD *)(a1 + 596) = v36;
  return a1;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

WTF::StringImpl **std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*((_BYTE *)a1 + 8))
      return WTF::String::operator=(a1, a2);
  }
  else if (*((_BYTE *)a1 + 8))
  {
    return (WTF::StringImpl **)std::__optional_destruct_base<WebCore::RegistrableDomain,false>::reset[abi:sn180100]((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v2 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v2 += 2;
    *a1 = v2;
    *((_BYTE *)a1 + 8) = 1;
  }
  return a1;
}

void std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationUnlinkableToken,false> const&>(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  const void *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const void *v9;

  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v4 = *(CFTypeRef *)a2;
      if (*(_QWORD *)a2)
        CFRetain(*(CFTypeRef *)a2);
      v5 = *(const void **)a1;
      *(_QWORD *)a1 = v4;
      if (v5)
        CFRelease(v5);
      v6 = *(_QWORD *)(a2 + 8);
      if (v6)
        CFRetain(*(CFTypeRef *)(a2 + 8));
      v7 = *(const void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      if (v7)
        CFRelease(v7);
      v8 = *(_QWORD *)(a2 + 16);
      if (v8)
        CFRetain(*(CFTypeRef *)(a2 + 16));
      v9 = *(const void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v8;
      if (v9)
        CFRelease(v9);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 24), (WTF::StringImpl *)(a2 + 24));
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 32) = 1;
  }
}

WTF::StringImpl **std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationSecretToken,false> const&>(WTF::StringImpl **result, unsigned __int8 *a2)
{
  WTF::StringImpl **v3;

  v3 = result;
  if (*((unsigned __int8 *)result + 24) == a2[24])
  {
    if (*((_BYTE *)result + 24))
    {
      WTF::String::operator=(result, (WTF::StringImpl *)a2);
      WTF::String::operator=(v3 + 1, (WTF::StringImpl *)(a2 + 8));
      return WTF::String::operator=(v3 + 2, (WTF::StringImpl *)(a2 + 16));
    }
  }
  else if (*((_BYTE *)result + 24))
  {
    return (WTF::StringImpl **)std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::reset[abi:sn180100]((uint64_t)result, (WTF::StringImpl *)a2);
  }
  else
  {
    result = (WTF::StringImpl **)std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>(result, (uint64_t)a2);
    *((_BYTE *)v3 + 24) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22AttributionTriggerDataEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 96, a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 56, v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 40, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 24, v5);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 8, v6);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22AttributionTriggerDataEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WebKit::escapeForJSON(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = this;
  if (a2 && (this = (WTF::StringImpl **)WTF::StringImpl::replace(), v4))
  {
    this = (WTF::StringImpl **)WTF::StringImpl::replace();
    *v2 = v4;
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl **)WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  else
  {
    *v2 = 0;
  }
  return this;
}

uint64_t std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::__value_func[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::PrivateClickMeasurementManager,WTF::UniqueRef<WebKit::PCM::ClientImpl>,WTF::String const&>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v6 = WTF::fastMalloc((WTF *)0x160);
  v7 = *a2;
  *a2 = 0;
  v9 = v7;
  *a1 = WebKit::PrivateClickMeasurementManager::PrivateClickMeasurementManager(v6, &v9, a3);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  WTF *v4;
  void *v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v4 = (WTF *)*(unsigned int *)(a2 + 12);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = (_DWORD)v4;
    if ((_DWORD)v4)
    {
      v5 = (void *)WTF::fastMalloc(v4);
      *(_DWORD *)(a1 + 8) = (_DWORD)v4;
      *(_QWORD *)a1 = v5;
      memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::deallocateTable(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), a2);
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

WebKit::WebSharedWorkerServer *std::unique_ptr<WebKit::WebSharedWorkerServer>::reset[abi:sn180100](WebKit::WebSharedWorkerServer **a1, WTF::StringImpl *a2)
{
  WebKit::WebSharedWorkerServer *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebSharedWorkerServer::~WebSharedWorkerServer(result, a2);
    return (WebKit::WebSharedWorkerServer *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::NetworkLoadScheduler *std::unique_ptr<WebKit::NetworkLoadScheduler>::reset[abi:sn180100](WebKit::NetworkLoadScheduler **a1, WTF::StringImpl *a2)
{
  WebKit::NetworkLoadScheduler *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkLoadScheduler::~NetworkLoadScheduler(result, a2);
    return (WebKit::NetworkLoadScheduler *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
          {
            WTF::StringImpl::destroy(v6, a2);
            v5 = *v4;
          }
          else
          {
            *(_DWORD *)v6 -= 2;
          }
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WebCore::PrivateClickMeasurement::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void *v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(a2 + 16));
  v4 = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = v4;
  std::__optional_storage_base<WebCore::PCM::AttributionTriggerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::AttributionTriggerData,false>>((WTF::StringImpl **)(a1 + 56), a2 + 56);
  v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v5;
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((WTF::StringImpl **)(a1 + 224), (WTF::StringImpl *)(a2 + 224));
  v6 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v7 = *(const void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v6;
  if (v7)
    CFRelease(v7);
  v8 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  v9 = *(const void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v8;
  if (v9)
    CFRelease(v9);
  v10 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  v11 = *(const void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v10;
  if (v11)
    CFRelease(v11);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 264), (WTF::StringImpl *)(a2 + 264));
  std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>((WTF::StringImpl **)(a1 + 272), (unsigned __int8 *)(a2 + 272));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 304), (WTF::StringImpl *)(a2 + 304));
  return a1;
}

{
  __int128 v4;
  _WORD *v5;
  WTF::StringImpl *v6;
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(a2 + 16));
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = (_WORD *)(a1 + 56);
  v6 = (WTF::StringImpl *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*(_BYTE *)(a1 + 184))
    {
      v7 = *(_WORD *)v6;
      *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
      *v5 = v7;
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>((WTF::StringImpl **)(a1 + 64), (WTF::StringImpl *)(a2 + 64));
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>((WTF::StringImpl **)(a1 + 80), (WTF::StringImpl *)(a2 + 80));
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>((WTF::StringImpl **)(a1 + 96), (WTF::StringImpl *)(a2 + 96));
      std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationUnlinkableToken,false> const&>(a1 + 112, a2 + 112);
      std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PCM::DestinationSecretToken,false> const&>((WTF::StringImpl **)(a1 + 152), (unsigned __int8 *)(a2 + 152));
    }
  }
  else if (*(_BYTE *)(a1 + 184))
  {
    std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::reset[abi:sn180100]((uint64_t)v5, v6);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData const&,WebCore::PCM::AttributionTriggerData*>((uint64_t)v5, (uint64_t)v6);
    *(_BYTE *)(a1 + 184) = 1;
  }
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::RegistrableDomain,false> const&>((WTF::StringImpl **)(a1 + 224), (WTF::StringImpl *)(a2 + 224));
  v9 = *(_QWORD *)(a2 + 240);
  if (v9)
    CFRetain(*(CFTypeRef *)(a2 + 240));
  v10 = *(const void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v9;
  if (v10)
    CFRelease(v10);
  v11 = *(_QWORD *)(a2 + 248);
  if (v11)
    CFRetain(*(CFTypeRef *)(a2 + 248));
  v12 = *(const void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v11;
  if (v12)
    CFRelease(v12);
  v13 = *(_QWORD *)(a2 + 256);
  if (v13)
    CFRetain(*(CFTypeRef *)(a2 + 256));
  v14 = *(const void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v13;
  if (v14)
    CFRelease(v14);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 264), (WTF::StringImpl *)(a2 + 264));
  v15 = (WTF::StringImpl **)(a1 + 272);
  v16 = (WTF::StringImpl *)(a2 + 272);
  if (*(unsigned __int8 *)(a1 + 296) == *(unsigned __int8 *)(a2 + 296))
  {
    if (*(_BYTE *)(a1 + 296))
    {
      WTF::String::operator=(v15, v16);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 280), (WTF::StringImpl *)(a2 + 280));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 288), (WTF::StringImpl *)(a2 + 288));
    }
  }
  else if (*(_BYTE *)(a1 + 296))
  {
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::reset[abi:sn180100]((uint64_t)v15, v16);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>(v15, (uint64_t)v16);
    *(_BYTE *)(a1 + 296) = 1;
  }
  WTF::String::operator=((WTF::StringImpl **)(a1 + 304), (WTF::StringImpl *)(a2 + 304));
  return a1;
}

WTF::StringImpl **std::__optional_storage_base<WebCore::PCM::AttributionTriggerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::AttributionTriggerData,false>>(WTF::StringImpl **result, uint64_t a2)
{
  WTF::StringImpl **v3;
  __int16 v4;

  v3 = result;
  if (*((unsigned __int8 *)result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (*((_BYTE *)result + 128))
    {
      v4 = *(_WORD *)a2;
      *((_BYTE *)result + 2) = *(_BYTE *)(a2 + 2);
      *(_WORD *)result = v4;
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(result + 1, (WTF::StringImpl *)(a2 + 8));
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(v3 + 3, (WTF::StringImpl *)(a2 + 24));
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(v3 + 5, (WTF::StringImpl *)(a2 + 40));
      std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>((uint64_t)(v3 + 7), (uint64_t *)(a2 + 56));
      return std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>(v3 + 12, (unsigned __int8 *)(a2 + 96));
    }
  }
  else if (*((_BYTE *)result + 128))
  {
    return (WTF::StringImpl **)std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::reset[abi:sn180100]((uint64_t)result, (WTF::StringImpl *)a2);
  }
  else
  {
    result = (WTF::StringImpl **)std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)result, a2);
    *((_BYTE *)v3 + 128) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(result + 128))
  {
    v2 = result;
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](result + 96, a2);
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100](v2 + 56, v3);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2 + 40, v4);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2 + 24, v5);
    result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2 + 8, v6);
    *(_BYTE *)(v2 + 128) = 0;
  }
  return result;
}

uint64_t std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](WebCore::TimerBase *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  *(_QWORD *)this = off_1E34B3740;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase(this);
  return WTF::fastFree(v5, v6);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != -1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(v15 + 16 * v22);
          v25 = v24[1];
          v24[1] = 0;
          if (v25)
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v25 + 8), v10);
          *v24 = *v13;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v24[1] = v27;
          v28 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v28 + 8), v10);
          if (v13 == a3)
            v12 = v24;
        }
      }
      else
      {
        v29 = v13[1];
        v13[1] = 0;
        if (v29)
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v29 + 8), v10);
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = *result;
  if (*result)
    v4 = (WTF::StringImpl *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v4 = 0;
  if (v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    *((_QWORD *)a2 + 1) = 0;
    v3 = *result;
  }
  *a3 = v5;
  if (v3)
  {
    v6 = (WTF::StringImpl *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v6 = 0;
  }
  if (v6 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, a2);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = result;
  v3 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = -1;
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
    result = (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkResourceLoader::*&)(void),WebKit::NetworkResourceLoader*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WebKit::ServiceWorkerFetchTask *WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(WebKit::ServiceWorkerFetchTask *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::ServiceWorkerFetchTask::~ServiceWorkerFetchTask(result);
    return (WebKit::ServiceWorkerFetchTask *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::startRequest(WebCore::ResourceRequest const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C01C8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::startRequest(WebCore::ResourceRequest const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C01C8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::startRequest(WebCore::ResourceRequest const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(result + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v5[0] = *(_QWORD *)(result + 8);
    v5[1] = v5[0];
    v5[2] = v5[0];
    v3 = *(unsigned int *)(a2 + 656);
    if ((_DWORD)v3 == -1)
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINS_7variantIJSD_NSA_18NetworkLoadChecker18RedirectionTripletENSC_13ResourceErrorEEEEEEDaOT_EUlRSL_E_JZZNSB_12startRequestESF_ENKSH_ISM_EESN_SP_EUlRSK_E_ZZNSB_12startRequestESF_ENKSH_ISM_EESN_SP_EUlRSD_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSD_SK_SL_EEEEEEDcSO_DpT0_(v4);
    }
    else
    {
      v6 = v5;
      return ((uint64_t (*)(_QWORD **))off_1E34C01E0[v3])(&v6);
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINS_7variantIJSD_NSA_18NetworkLoadChecker18RedirectionTripletENSC_13ResourceErrorEEEEEEDaOT_EUlRSL_E_JZZNSB_12startRequestESF_ENKSH_ISM_EESN_SP_EUlRSK_E_ZZNSB_12startRequestESF_ENKSH_ISM_EESN_SP_EUlRSD_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSD_SK_SL_EEEEEEDcSO_DpT0_(uint64_t a1, const WebCore::ResourceRequest *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _BOOL4 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(v3 + 80);
    v6 = *(_QWORD *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 96);
    v8 = *(_QWORD *)(v3 + 3032);
    v9 = *(unsigned __int8 *)(v3 + 315) == 1;
    v10 = *(unsigned __int8 *)(v3 + 3072);
    v11 = *(_QWORD *)(v3 + 4152) != 0;
    v13 = 134219776;
    v14 = v3;
    v15 = 2048;
    v16 = v5;
    v17 = 2048;
    v18 = v6;
    v19 = 2048;
    v20 = v7;
    v21 = 2048;
    v22 = v8;
    v23 = 1024;
    v24 = v9;
    v25 = 1024;
    v26 = v10;
    v27 = 1024;
    v28 = v11;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::start: NetworkLoadChecker::check is done", (uint8_t *)&v13, 0x46u);
  }
  if (WebKit::NetworkResourceLoader::canUseCache((WebKit::NetworkResourceLoader *)v3, a2))
    return WebKit::NetworkResourceLoader::retrieveCacheEntry((WebKit::NetworkResourceLoader *)v3, a2);
  else
    return (_DWORD *)WebKit::NetworkResourceLoader::startNetworkLoad(v3, (uint64_t)a2, 1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINS_7variantIJSD_NSA_18NetworkLoadChecker18RedirectionTripletENSC_13ResourceErrorEEEEEEDaOT_EUlRSL_E_JZZNSB_12startRequestESF_ENKSH_ISM_EESN_SP_EUlRSK_E_ZZNSB_12startRequestESF_ENKSH_ISM_EESN_SP_EUlRSD_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSD_SK_SL_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _BOOL4 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(v3 + 80);
    v6 = *(_QWORD *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 96);
    v8 = *(_QWORD *)(v3 + 3032);
    v9 = *(unsigned __int8 *)(v3 + 315) == 1;
    v10 = *(unsigned __int8 *)(v3 + 3072);
    v11 = *(_QWORD *)(v3 + 4152) != 0;
    *(_DWORD *)v14 = 134219776;
    *(_QWORD *)&v14[4] = v3;
    v15 = 2048;
    v16 = v5;
    v17 = 2048;
    v18 = v6;
    v19 = 2048;
    v20 = v7;
    v21 = 2048;
    v22 = v8;
    v23 = 1024;
    v24 = v9;
    v25 = 1024;
    v26 = v10;
    v27 = 1024;
    v28 = v11;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::start: NetworkLoadChecker::check returned a synthetic redirect", v14, 0x46u);
  }
  *(_BYTE *)(v3 + 4288) = 1;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E34C0208;
  *(_QWORD *)v14 = v12;
  WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(v3, (WebCore::ResourceRequestBase *)a2, (WebCore::ResourceRequestBase *)(a2 + 200), a2 + 400, 0, (uint64_t *)v14);
  result = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v14 + 8))(*(_QWORD *)v14);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINS_7variantIJSD_NSA_18NetworkLoadChecker18RedirectionTripletENSC_13ResourceErrorEEEEEEDaOT_EUlRSL_E_JZZNSB_12startRequestESF_ENKSH_ISM_EESN_SP_EUlRSK_E_ZZNSB_12startRequestESF_ENKSH_ISM_EESN_SP_EUlRSD_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSD_SK_SL_EEEEEEDcSO_DpT0_(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  void *v15;
  int v16;
  WTF *v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BOOL4 v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BOOL4 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  v4 = off_1ECE713E8;
  result = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 96);
    v9 = *(_QWORD *)(v3 + 3032);
    v10 = *(unsigned __int8 *)(v3 + 315) == 1;
    v16 = *(unsigned __int8 *)(v3 + 3072);
    v11 = *(_QWORD *)(v3 + 4152) != 0;
    MEMORY[0x19AEB7BFC](a2);
    WTF::String::utf8();
    v12 = v17 ? (uint64_t)v17 + 16 : 0;
    MEMORY[0x19AEB7BFC](a2);
    v13 = *(_DWORD *)(a2 + 56);
    v14 = *(unsigned __int8 *)(a2 + 60) == 3;
    *(_DWORD *)buf = 134220546;
    v19 = v3;
    v20 = 2048;
    v21 = v6;
    v22 = 2048;
    v23 = v7;
    v24 = 2048;
    v25 = v8;
    v26 = 2048;
    v27 = v9;
    v28 = 1024;
    v29 = v10;
    v30 = 1024;
    v31 = v16;
    v32 = 1024;
    v33 = v11;
    v34 = 2082;
    v35 = v12;
    v36 = 1024;
    v37 = v13;
    v38 = 1024;
    v39 = v14;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::start: NetworkLoadChecker::check returned an error (error.domain=%{public}s, error.code=%d, isCancellation=%d)", buf, 0x5Cu);
    result = (uint64_t)v17;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        result = WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)(a2 + 60) != 3)
    return (uint64_t)WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)v3, (const WebCore::ResourceError *)a2);
  return result;
}

void _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21NetworkResourceLoader12startRequestERKN7WebCore15ResourceRequestEENK3__0clINSt3__17variantIJS5_NS2_18NetworkLoadChecker18RedirectionTripletENS4_13ResourceErrorEEEEEEDaOT_ENKUlRSD_E_clESJ_EUlSH_E_vJOS5_EE4callESM_(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _BYTE v10[40];
  _QWORD v11[6];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  WTF::URL::URL((uint64_t)v10, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)v11, (uint64_t *)(a2 + 40));
  v11[5] = *(_QWORD *)(a2 + 80);
  v3 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 88) = 0u;
  v12 = v3;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v13 = v3;
  v4 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v14 = v4;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v15 = v3;
  v5 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v16 = v5;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v17 = v3;
  LODWORD(v5) = *(_DWORD *)(a2 + 144);
  v19 = *(_BYTE *)(a2 + 148);
  v18 = v5;
  v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  v20 = v6;
  v23 = *(_BYTE *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 168);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  v21 = v7;
  v22 = v8;
  v9 = *(const void **)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v24 = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v10);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::retrieveCacheEntry(WebCore::ResourceRequest const&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::~CallableWrapper(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C0230;
  v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::retrieveCacheEntry(WebCore::ResourceRequest const&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::~CallableWrapper(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C0230;
  v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::retrieveCacheEntry(WebCore::ResourceRequest const&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::call(_QWORD *a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebKit::NetworkCache::Entry *v3;
  uint64_t v4;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  double v29;
  WTF *v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  int v38;
  _BOOL4 v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  int v46;
  _BOOL4 v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  int v54;
  _BOOL4 v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v61;
  int v62;
  _BOOL4 v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL4 v69;
  int v70;
  _BOOL4 v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  int v78;
  _BOOL4 v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  int v86;
  _BOOL4 v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL4 v93;
  int v94;
  _BOOL4 v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BOOL4 v101;
  int v102;
  _BOOL4 v103;
  int v104;
  double v105;
  WebKit::NetworkCache::Entry *v106;
  uint8_t buf[4];
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  _BOOL4 v118;
  __int16 v119;
  int v120;
  __int16 v121;
  _BOOL4 v122;
  __int16 v123;
  double v124;
  __int16 v125;
  uint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v3 = *(WebKit::NetworkCache::Entry **)a2;
  *(_QWORD *)a2 = 0;
  v106 = v3;
  v4 = a1[2];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v7 = *(double *)a3;
    v6 = *(double *)(a3 + 8);
    v8 = *(_DWORD *)(a3 + 16);
    v9 = *(double *)(a3 + 24);
    v10 = *(double *)(a3 + 32);
    v11 = *(double *)(a3 + 40);
    v12 = *(double *)(a3 + 48);
    v13 = *(double *)(a3 + 64);
    v105 = *(double *)(a3 + 56);
    v14 = *(double *)(a3 + 72);
    v15 = *(_QWORD *)(a3 + 80);
    v16 = *(_QWORD *)(a3 + 88);
    v17 = *(unsigned __int8 *)(a3 + 96);
    v18 = *(unsigned __int8 *)(a3 + 97);
    v104 = *(unsigned __int8 *)(a3 + 98);
    v19 = *(unsigned __int8 *)(a3 + 104);
    v20 = a1[1];
    v21 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(_QWORD *)(v20 + 80);
      v23 = *(_QWORD *)(v20 + 88);
      v24 = *(_QWORD *)(v20 + 96);
      v25 = *(_QWORD *)(v20 + 3032);
      v26 = *(unsigned __int8 *)(v20 + 315) == 1;
      v27 = *(unsigned __int8 *)(v20 + 3072);
      v28 = *(_QWORD *)(v20 + 4152) != 0;
      *(_DWORD *)buf = 134220032;
      v108 = v20;
      v109 = 2048;
      v110 = v22;
      v111 = 2048;
      v112 = v23;
      v113 = 2048;
      v114 = v24;
      v115 = 2048;
      v116 = v25;
      v117 = 1024;
      v118 = v26;
      v119 = 1024;
      v120 = v27;
      v121 = 1024;
      v122 = v28;
      v123 = 1024;
      LODWORD(v124) = v3 != 0;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntry: Done checking the HTTP disk cache (foundCachedEntry=%d)", buf, 0x4Cu);
    }
    v29 = v6 - v7;
    if (v29 >= 1.0)
    {
      v32 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v33 = *(_QWORD *)(v20 + 80);
        v34 = *(_QWORD *)(v20 + 88);
        v35 = *(_QWORD *)(v20 + 96);
        v36 = *(_QWORD *)(v20 + 3032);
        v37 = *(unsigned __int8 *)(v20 + 315) == 1;
        v38 = *(unsigned __int8 *)(v20 + 3072);
        v39 = *(_QWORD *)(v20 + 4152) != 0;
        *(_DWORD *)buf = 134220288;
        v108 = v20;
        v109 = 2048;
        v110 = v33;
        v111 = 2048;
        v112 = v34;
        v113 = 2048;
        v114 = v35;
        v115 = 2048;
        v116 = v36;
        v117 = 1024;
        v118 = v37;
        v119 = 1024;
        v120 = v38;
        v121 = 1024;
        v122 = v39;
        v123 = 2048;
        v124 = v29 * 1000.0;
        v125 = 1024;
        LODWORD(v126) = v8;
        _os_log_impl(&dword_196BCC000, v32, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Took %.0fms, priority %d", buf, 0x56u);
      }
      if (v19)
      {
        v40 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          v41 = *(_QWORD *)(v20 + 80);
          v42 = *(_QWORD *)(v20 + 88);
          v43 = *(_QWORD *)(v20 + 96);
          v44 = *(_QWORD *)(v20 + 3032);
          v45 = *(unsigned __int8 *)(v20 + 315) == 1;
          v46 = *(unsigned __int8 *)(v20 + 3072);
          v47 = *(_QWORD *)(v20 + 4152) != 0;
          *(_DWORD *)buf = 134219776;
          v108 = v20;
          v109 = 2048;
          v110 = v41;
          v111 = 2048;
          v112 = v42;
          v113 = 2048;
          v114 = v43;
          v115 = 2048;
          v116 = v44;
          v117 = 1024;
          v118 = v45;
          v119 = 1024;
          v120 = v46;
          v121 = 1024;
          v122 = v47;
          _os_log_impl(&dword_196BCC000, v40, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Was speculative load", buf, 0x46u);
        }
      }
      if (v9 != 0.0)
      {
        v48 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          v49 = *(_QWORD *)(v20 + 80);
          v50 = *(_QWORD *)(v20 + 88);
          v51 = *(_QWORD *)(v20 + 96);
          v52 = *(_QWORD *)(v20 + 3032);
          v53 = *(unsigned __int8 *)(v20 + 315) == 1;
          v54 = *(unsigned __int8 *)(v20 + 3072);
          v55 = *(_QWORD *)(v20 + 4152) != 0;
          *(_DWORD *)buf = 134220032;
          v108 = v20;
          v109 = 2048;
          v110 = v49;
          v111 = 2048;
          v112 = v50;
          v113 = 2048;
          v114 = v51;
          v115 = 2048;
          v116 = v52;
          v117 = 1024;
          v118 = v53;
          v119 = 1024;
          v120 = v54;
          v121 = 1024;
          v122 = v55;
          v123 = 2048;
          v124 = (v14 - v9) * 1000.0;
          _os_log_impl(&dword_196BCC000, v48, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Storage retrieve time %.0fms", buf, 0x50u);
        }
        if (v10 != 0.0)
        {
          v56 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v57 = *(_QWORD *)(v20 + 80);
            v58 = *(_QWORD *)(v20 + 88);
            v59 = *(_QWORD *)(v20 + 96);
            v60 = *(_QWORD *)(v20 + 3032);
            v61 = *(unsigned __int8 *)(v20 + 315) == 1;
            v62 = *(unsigned __int8 *)(v20 + 3072);
            v63 = *(_QWORD *)(v20 + 4152) != 0;
            *(_DWORD *)buf = 134220288;
            v108 = v20;
            v109 = 2048;
            v110 = v57;
            v111 = 2048;
            v112 = v58;
            v113 = 2048;
            v114 = v59;
            v115 = 2048;
            v116 = v60;
            v117 = 1024;
            v118 = v61;
            v119 = 1024;
            v120 = v62;
            v121 = 1024;
            v122 = v63;
            v123 = 2048;
            v124 = (v10 - v9) * 1000.0;
            v125 = 2048;
            v126 = v16 - v15;
            _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Dispatch delay %.0fms, dispatched %lu resources first", buf, 0x5Au);
          }
        }
        if (v11 != 0.0)
        {
          v64 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v65 = *(_QWORD *)(v20 + 80);
            v66 = *(_QWORD *)(v20 + 88);
            v67 = *(_QWORD *)(v20 + 96);
            v68 = *(_QWORD *)(v20 + 3032);
            v69 = *(unsigned __int8 *)(v20 + 315) == 1;
            v70 = *(unsigned __int8 *)(v20 + 3072);
            v71 = *(_QWORD *)(v20 + 4152) != 0;
            *(_DWORD *)buf = 134220032;
            v108 = v20;
            v109 = 2048;
            v110 = v65;
            v111 = 2048;
            v112 = v66;
            v113 = 2048;
            v114 = v67;
            v115 = 2048;
            v116 = v68;
            v117 = 1024;
            v118 = v69;
            v119 = 1024;
            v120 = v70;
            v121 = 1024;
            v122 = v71;
            v123 = 2048;
            v124 = (v12 - v11) * 1000.0;
            _os_log_impl(&dword_196BCC000, v64, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Record I/O time %.0fms", buf, 0x50u);
          }
        }
        if (v105 != 0.0)
        {
          v72 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v73 = *(_QWORD *)(v20 + 80);
            v74 = *(_QWORD *)(v20 + 88);
            v75 = *(_QWORD *)(v20 + 96);
            v76 = *(_QWORD *)(v20 + 3032);
            v77 = *(unsigned __int8 *)(v20 + 315) == 1;
            v78 = *(unsigned __int8 *)(v20 + 3072);
            v79 = *(_QWORD *)(v20 + 4152) != 0;
            *(_DWORD *)buf = 134220032;
            v108 = v20;
            v109 = 2048;
            v110 = v73;
            v111 = 2048;
            v112 = v74;
            v113 = 2048;
            v114 = v75;
            v115 = 2048;
            v116 = v76;
            v117 = 1024;
            v118 = v77;
            v119 = 1024;
            v120 = v78;
            v121 = 1024;
            v122 = v79;
            v123 = 2048;
            v124 = (v13 - v105) * 1000.0;
            _os_log_impl(&dword_196BCC000, v72, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Blob I/O time %.0fms", buf, 0x50u);
          }
        }
        if (v17)
        {
          v80 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v81 = *(_QWORD *)(v20 + 80);
            v82 = *(_QWORD *)(v20 + 88);
            v83 = *(_QWORD *)(v20 + 96);
            v84 = *(_QWORD *)(v20 + 3032);
            v85 = *(unsigned __int8 *)(v20 + 315) == 1;
            v86 = *(unsigned __int8 *)(v20 + 3072);
            v87 = *(_QWORD *)(v20 + 4152) != 0;
            *(_DWORD *)buf = 134219776;
            v108 = v20;
            v109 = 2048;
            v110 = v81;
            v111 = 2048;
            v112 = v82;
            v113 = 2048;
            v114 = v83;
            v115 = 2048;
            v116 = v84;
            v117 = 1024;
            v118 = v85;
            v119 = 1024;
            v120 = v86;
            v121 = 1024;
            v122 = v87;
            _os_log_impl(&dword_196BCC000, v80, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Synchronization was in progress", buf, 0x46u);
          }
        }
        if (v18)
        {
          v88 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v89 = *(_QWORD *)(v20 + 80);
            v90 = *(_QWORD *)(v20 + 88);
            v91 = *(_QWORD *)(v20 + 96);
            v92 = *(_QWORD *)(v20 + 3032);
            v93 = *(unsigned __int8 *)(v20 + 315) == 1;
            v94 = *(unsigned __int8 *)(v20 + 3072);
            v95 = *(_QWORD *)(v20 + 4152) != 0;
            *(_DWORD *)buf = 134219776;
            v108 = v20;
            v109 = 2048;
            v110 = v89;
            v111 = 2048;
            v112 = v90;
            v113 = 2048;
            v114 = v91;
            v115 = 2048;
            v116 = v92;
            v117 = 1024;
            v118 = v93;
            v119 = 1024;
            v120 = v94;
            v121 = 1024;
            v122 = v95;
            _os_log_impl(&dword_196BCC000, v88, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Shrink was in progress", buf, 0x46u);
          }
        }
        if (v104)
        {
          v96 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v97 = *(_QWORD *)(v20 + 80);
            v98 = *(_QWORD *)(v20 + 88);
            v99 = *(_QWORD *)(v20 + 96);
            v100 = *(_QWORD *)(v20 + 3032);
            v101 = *(unsigned __int8 *)(v20 + 315) == 1;
            v102 = *(unsigned __int8 *)(v20 + 3072);
            v103 = *(_QWORD *)(v20 + 4152) != 0;
            *(_DWORD *)buf = 134219776;
            v108 = v20;
            v109 = 2048;
            v110 = v97;
            v111 = 2048;
            v112 = v98;
            v113 = 2048;
            v114 = v99;
            v115 = 2048;
            v116 = v100;
            v117 = 1024;
            v118 = v101;
            v119 = 1024;
            v120 = v102;
            v121 = 1024;
            v122 = v103;
            _os_log_impl(&dword_196BCC000, v96, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::logSlowCacheRetrieveIfNeeded: Retrieve was canceled", buf, 0x46u);
          }
        }
      }
    }
    if (!v3)
    {
      WebKit::NetworkResourceLoader::startNetworkLoad(v20, (uint64_t)(a1 + 3), 1);
      return;
    }
    WebKit::NetworkResourceLoader::retrieveCacheEntryInternal(v20, (uint64_t *)&v106, (WebCore::ResourceRequestBase *)(a1 + 3));
    v3 = v106;
  }
  if (v3)
  {
    WebKit::NetworkCache::Entry::~Entry(v3, a2);
    WTF::fastFree(v30, v31);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C0258;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C0258;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  _BOOL4 v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BOOL4 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = a1[2];
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = a1[1];
    v4 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(v3 + 80);
      v6 = *(_QWORD *)(v3 + 88);
      v7 = *(_QWORD *)(v3 + 96);
      v8 = *(_QWORD *)(v3 + 3032);
      v9 = *(unsigned __int8 *)(v3 + 315) == 1;
      v10 = *(unsigned __int8 *)(v3 + 3072);
      v11 = *(_QWORD *)(v3 + 4152) != 0;
      v15 = 134219776;
      v16 = v3;
      v17 = 2048;
      v18 = v5;
      v19 = 2048;
      v20 = v6;
      v21 = 2048;
      v22 = v7;
      v23 = 2048;
      v24 = v8;
      v25 = 1024;
      v26 = v9;
      v27 = 1024;
      v28 = v10;
      v29 = 1024;
      v30 = v11;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::processClearSiteDataHeader: END", (uint8_t *)&v15, 0x46u);
    }
    v12 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    v14 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C0280;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34C0280;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInWebProcessesForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2>(WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C02A8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DeleteWebsiteDataInWebProcessesForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2>(WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34C02A8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::ReloadExecutionContextsForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3>(WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C02D0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::ReloadExecutionContextsForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3>(WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34C02D0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  *a1 = &off_1E34C02F8;
  v3 = (const void *)a1[10];
  a1[10] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E34C02F8;
  v3 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 8);
  if (result[483])
    return WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)result, (const WebCore::ResourceError *)(a1 + 16));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34C0320;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C0320;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>::call(WTF::StringImpl *result)
{
  WebKit::NetworkResourceLoader *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  WTF::StringImpl *v17;
  int v18;
  __int16 v19;
  CFTypeRef cf;
  char v21;

  v1 = (WebKit::NetworkResourceLoader *)*((_QWORD *)result + 1);
  if (*((_QWORD *)v1 + 483))
  {
    v2 = result;
    v3 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
    if (v3)
    {
      if (v3 == 1)
      {
        v4 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v5 = v13;
        goto LABEL_5;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v13;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5 = v13;
      if (v13)
      {
LABEL_5:
        v6 = 0;
        *(_DWORD *)v4 += 2;
        goto LABEL_6;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = 0;
      v5 = v13;
    }
    v6 = 1;
LABEL_6:
    v13 = v4;
    v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    if (v7)
      *(_DWORD *)v7 += 2;
    v14 = v7;
    v8 = *(_OWORD *)((char *)v2 + 40);
    v15 = *(_OWORD *)((char *)v2 + 24);
    v16 = v8;
    if (v5)
      *(_DWORD *)v5 += 2;
    v17 = v5;
    v18 = 0;
    v19 = 2;
    cf = 0;
    v21 = 1;
    WebKit::NetworkResourceLoader::didFailLoading(v1, (const WebCore::ResourceError *)&v13);
    v10 = cf;
    cf = 0;
    if (v10)
      CFRelease(v10);
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        if (!v5)
          goto LABEL_28;
LABEL_26:
        if (*(_DWORD *)v5 == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v9);
          if ((v6 & 1) != 0)
            return result;
          goto LABEL_31;
        }
        *(_DWORD *)v5 -= 2;
LABEL_28:
        if ((v6 & 1) != 0)
          return result;
LABEL_31:
        if (*(_DWORD *)v4 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v9);
        *(_DWORD *)v4 -= 2;
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5)
      goto LABEL_28;
    goto LABEL_26;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  *a1 = &off_1E34C0348;
  v3 = (const void *)a1[10];
  a1[10] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E34C0348;
  v3 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>::call(uint64_t a1)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 8);
  if (result[483])
    return WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)result, (const WebCore::ResourceError *)(a1 + 16));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_5,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = &off_1E34C0370;
  v3 = a1[19];
  a1[19] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[16];
  a1[16] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[11];
  a1[11] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v6 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_5,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34C0370;
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v6 + 8), a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_5,void>::call(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  WTF::StringImpl *v4;
  CFTypeRef v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  CFTypeRef v14;
  const void *v15;
  uint64_t v16;
  void *v17;
  CFTypeRef v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  _BOOL4 v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  int v53;
  _BOOL4 v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  int v68;
  _BOOL4 v69;
  _BYTE v70[240];
  CFTypeRef v71;
  char v72;
  _BYTE buf[12];
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  _BOOL4 v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  _BOOL4 v89;
  CFTypeRef cf;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (const WebCore::ResourceResponseBase *)(v2 + 3872));
  v3 = *(const void **)(v2 + 4112);
  cf = v3;
  if (v3)
    CFRetain(v3);
  v91 = *(_BYTE *)(v2 + 4120);
  WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)v70, v2, (uint64_t)buf);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v4);
  v6 = *(_QWORD *)(v2 + 4152);
  if (v6)
  {
    v7 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(v2 + 80);
      v9 = *(_QWORD *)(v2 + 88);
      v10 = *(_QWORD *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 3032);
      v12 = *(unsigned __int8 *)(v2 + 315) == 1;
      v13 = *(unsigned __int8 *)(v2 + 3072);
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = v2;
      v74 = 2048;
      v75 = v8;
      v76 = 2048;
      v77 = v9;
      v78 = 2048;
      v79 = v10;
      v80 = 2048;
      v81 = v11;
      v82 = 1024;
      v83 = v12;
      v84 = 1024;
      v85 = v13;
      v86 = 1024;
      v87 = 1;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Using response for synchronous load", buf, 0x46u);
      v6 = *(_QWORD *)(v2 + 4152);
    }
    WebCore::ResourceResponseBase::operator=(v6 + 208, (uint64_t)v70);
    v14 = v71;
    v71 = 0;
    v15 = *(const void **)(v6 + 448);
    *(_QWORD *)(v6 + 448) = v14;
    if (v15)
      CFRelease(v15);
    *(_BYTE *)(v6 + 456) = v72;
LABEL_11:
    v16 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    goto LABEL_13;
  }
  if (WebKit::NetworkResourceLoader::isCrossOriginPrefetch((WebKit::NetworkResourceLoader *)v2))
  {
    v19 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(v2 + 80);
      v21 = *(_QWORD *)(v2 + 88);
      v22 = *(_QWORD *)(v2 + 96);
      v23 = *(_QWORD *)(v2 + 3032);
      v24 = *(unsigned __int8 *)(v2 + 315) == 1;
      v25 = *(unsigned __int8 *)(v2 + 3072);
      v26 = *(_QWORD *)(v2 + 4152) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = v2;
      v74 = 2048;
      v75 = v20;
      v76 = 2048;
      v77 = v21;
      v78 = 2048;
      v79 = v22;
      v80 = 2048;
      v81 = v23;
      v82 = 1024;
      v83 = v24;
      v84 = 1024;
      v85 = v25;
      v86 = 1024;
      v87 = v26;
      _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Using response for cross-origin prefetch", buf, 0x46u);
    }
    WebCore::ResourceResponseBase::httpHeaderField();
    if (!*(_QWORD *)buf)
      goto LABEL_11;
    v28 = WTF::StringImpl::find();
    v29 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v27);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (v28 == -1)
      goto LABEL_11;
    v55 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v56 = *(_QWORD *)(v2 + 80);
      v57 = *(_QWORD *)(v2 + 88);
      v58 = *(_QWORD *)(v2 + 96);
      v59 = *(_QWORD *)(v2 + 3032);
      v60 = *(unsigned __int8 *)(v2 + 315) == 1;
      v61 = *(unsigned __int8 *)(v2 + 3072);
      v62 = *(_QWORD *)(v2 + 4152) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = v2;
      v74 = 2048;
      v75 = v56;
      v76 = 2048;
      v77 = v57;
      v78 = 2048;
      v79 = v58;
      v80 = 2048;
      v81 = v59;
      v82 = 1024;
      v83 = v60;
      v84 = 1024;
      v85 = v61;
      v86 = 1024;
      v87 = v62;
      _os_log_impl(&dword_196BCC000, v55, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Canceling cross-origin prefetch for Vary: Cookie", buf, 0x46u);
    }
    WebKit::NetworkResourceLoader::abort((WebKit::NetworkResourceLoader *)v2);
LABEL_40:
    v16 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 2);
    goto LABEL_12;
  }
  v30 = *(unsigned __int8 *)(v2 + 315);
  v31 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *(_QWORD *)(v2 + 80);
    v33 = *(_QWORD *)(v2 + 88);
    v34 = *(_QWORD *)(v2 + 96);
    v35 = *(_QWORD *)(v2 + 3032);
    v36 = *(unsigned __int8 *)(v2 + 3072);
    v37 = *(_QWORD *)(v2 + 4152) != 0;
    *(_DWORD *)buf = 134220032;
    *(_QWORD *)&buf[4] = v2;
    v74 = 2048;
    v75 = v32;
    v76 = 2048;
    v77 = v33;
    v78 = 2048;
    v79 = v34;
    v80 = 2048;
    v81 = v35;
    v82 = 1024;
    v83 = v30 == 1;
    v84 = 1024;
    v85 = v36;
    v86 = 1024;
    v87 = v37;
    v88 = 1024;
    v89 = v83;
    _os_log_impl(&dword_196BCC000, v31, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Sending WebResourceLoader::DidReceiveResponse IPC (willWaitForContinueDidReceiveResponse=%d)", buf, 0x4Cu);
  }
  WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup((WebCore::ResourceResponse *)v2, (WebCore::ResourceResponseBase *)v70, *(_BYTE *)(a1 + 24), v30 == 1);
  if (*(_BYTE *)(v2 + 3336) || *(_BYTE *)(v2 + 3848))
  {
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 3856) + 72) + 32);
    v39 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v39 = 340;
    *(_QWORD *)(v39 + 8) = 0;
    *(_QWORD *)(v39 + 528) = v39 + 16;
    *(_QWORD *)(v39 + 536) = v39 + 16;
    *(_OWORD *)(v39 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v39 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v39);
    *(_QWORD *)buf = v39;
    v40 = *(_QWORD *)(v2 + 80);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v39, 8uLL, 8) = v40;
    IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::encode((IPC::Encoder *)v39, (_QWORD *)(a1 + 32));
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v39, (WebCore::ResourceResponseBase *)v70);
    IPC::Connection::sendMessageImpl(v38, (uint64_t *)buf, 0, 0);
    v41 = *(IPC::Encoder **)buf;
    *(_QWORD *)buf = 0;
    if (v41)
    {
      IPC::Encoder::~Encoder(v41, v17);
      WTF::fastFree(v42, v43);
    }
  }
  if (v30 != 1)
  {
    v45 = *(unsigned __int8 *)(v2 + 4329);
    v46 = off_1ECE713E8;
    v47 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
    if (!v45)
    {
      if (v47)
      {
        v63 = *(_QWORD *)(v2 + 80);
        v64 = *(_QWORD *)(v2 + 88);
        v65 = *(_QWORD *)(v2 + 96);
        v66 = *(_QWORD *)(v2 + 3032);
        v67 = *(unsigned __int8 *)(v2 + 315) == 1;
        v68 = *(unsigned __int8 *)(v2 + 3072);
        v69 = *(_QWORD *)(v2 + 4152) != 0;
        *(_DWORD *)buf = 134219776;
        *(_QWORD *)&buf[4] = v2;
        v74 = 2048;
        v75 = v63;
        v76 = 2048;
        v77 = v64;
        v78 = 2048;
        v79 = v65;
        v80 = 2048;
        v81 = v66;
        v82 = 1024;
        v83 = v67;
        v84 = 1024;
        v85 = v68;
        v86 = 1024;
        v87 = v69;
        _os_log_impl(&dword_196BCC000, v46, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Using response", buf, 0x46u);
      }
      goto LABEL_11;
    }
    if (v47)
    {
      v48 = *(_QWORD *)(v2 + 80);
      v49 = *(_QWORD *)(v2 + 88);
      v50 = *(_QWORD *)(v2 + 96);
      v51 = *(_QWORD *)(v2 + 3032);
      v52 = *(unsigned __int8 *)(v2 + 315) == 1;
      v53 = *(unsigned __int8 *)(v2 + 3072);
      v54 = *(_QWORD *)(v2 + 4152) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = v2;
      v74 = 2048;
      v75 = v48;
      v76 = 2048;
      v77 = v49;
      v78 = 2048;
      v79 = v50;
      v80 = 2048;
      v81 = v51;
      v82 = 1024;
      v83 = v52;
      v84 = 1024;
      v85 = v53;
      v86 = 1024;
      v87 = v54;
      _os_log_impl(&dword_196BCC000, v46, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Ignoring response because of keepalive option", buf, 0x46u);
    }
    goto LABEL_40;
  }
  v44 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  v16 = *(_QWORD *)(v2 + 4320);
  *(_QWORD *)(v2 + 4320) = v44;
  if (v16)
    goto LABEL_12;
LABEL_13:
  v18 = v71;
  v71 = 0;
  if (v18)
    CFRelease(v18);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v70, (WTF::StringImpl *)v17);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C0398;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C0398;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result;
  if (!a2
    || !*a2
    || (result = (_QWORD *)IPC::Decoder::decode<std::tuple<BOOL>>(a2), (unsigned __int16)result < 0x100u)
    || !(_BYTE)result)
  {
    v3 = v2[2];
    if (v3)
    {
      result = *(_QWORD **)(v3 + 8);
      if (result)
        return WebKit::NetworkSession::removeLoaderWaitingWebProcessTransfer((uint64_t)result, v2[1]);
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::willSendServiceWorkerRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _BYTE v10[40];
  _QWORD v11[6];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  WTF::URL::URL((uint64_t)v10, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)v11, (uint64_t *)(a2 + 40));
  v11[5] = *(_QWORD *)(a2 + 80);
  v3 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 88) = 0u;
  v12 = v3;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v13 = v3;
  v4 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v14 = v4;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v15 = v3;
  v5 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v16 = v5;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v17 = v3;
  LODWORD(v5) = *(_DWORD *)(a2 + 144);
  v19 = *(_BYTE *)(a2 + 148);
  v18 = v5;
  v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  v20 = v6;
  v23 = *(_BYTE *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 168);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  v21 = v7;
  v22 = v8;
  v9 = *(const void **)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v24 = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v10);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebKit::NetworkResourceLoader::IsFromServiceWorker,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = off_1E34C03E8;
  v3 = a1[21];
  a1[21] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), a2);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebKit::NetworkResourceLoader::IsFromServiceWorker,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34C03E8;
  v3 = *((_QWORD *)a1 + 21);
  *((_QWORD *)a1 + 21) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, a2);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v5 + 8), v4);
  return WTF::fastFree(a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::willSendRedirectedRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebKit::NetworkResourceLoader::IsFromServiceWorker,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  _BOOL4 v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  IPC::Encoder *v55;
  WTF *v56;
  void *v57;
  WTF::StringImpl *v58;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  CFTypeRef v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  int v68;
  _BOOL4 v69;
  IPC::Encoder *v70;
  _BYTE buf[22];
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  _BOOL4 v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  WTF::StringImpl *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v88;
  CFTypeRef cf;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 656);
  if (!v5)
  {
    v14 = *(_QWORD *)(v4 + 3864);
    if (v14)
    {
      v15 = *(_QWORD *)(v4 + 4304);
      if (v15)
      {
        if (*(_BYTE *)(v15 + 1160))
        {
          v16 = *(_QWORD *)(v14 + 2992);
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16);
        }
      }
    }
    v17 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(v4 + 80);
      v19 = *(_QWORD *)(v4 + 88);
      v20 = *(_QWORD *)(v4 + 96);
      v21 = *(_QWORD *)(v4 + 3032);
      v22 = *(unsigned __int8 *)(v4 + 315) == 1;
      v23 = *(unsigned __int8 *)(v4 + 3072);
      v24 = *(_QWORD *)(v4 + 4152) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v18;
      v72 = 2048;
      v73 = v19;
      v74 = 2048;
      v75 = v20;
      v76 = 2048;
      v77 = v21;
      v78 = 1024;
      v79 = v22;
      v80 = 1024;
      v81 = v23;
      v82 = 1024;
      v83 = v24;
      _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: NetworkLoadChecker::checkRedirection is done", buf, 0x46u);
    }
    if (*(_BYTE *)(v4 + 3076) == 2)
    {
      if (!*(_DWORD *)(a2 + 656))
      {
        v25 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *(_QWORD *)(v4 + 80);
          v27 = *(_QWORD *)(v4 + 88);
          v28 = *(_QWORD *)(v4 + 96);
          v29 = *(_QWORD *)(v4 + 3032);
          v30 = *(unsigned __int8 *)(v4 + 315) == 1;
          v31 = *(unsigned __int8 *)(v4 + 3072);
          v32 = *(_QWORD *)(v4 + 4152) != 0;
          *(_DWORD *)buf = 134219776;
          *(_QWORD *)&buf[4] = v4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v26;
          v72 = 2048;
          v73 = v27;
          v74 = 2048;
          v75 = v28;
          v76 = 2048;
          v77 = v29;
          v78 = 1024;
          v79 = v30;
          v80 = 1024;
          v81 = v31;
          v82 = 1024;
          v83 = v32;
          _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didFinishWithRedirectResponse:", buf, 0x46u);
        }
        WebCore::ResourceResponseBase::setType();
        if ((WebKit::NetworkResourceLoader::isCrossOriginPrefetch((WebKit::NetworkResourceLoader *)v4) & 1) != 0)
        {
          v33 = *(_QWORD *)(v4 + 3856);
          v34 = *(_QWORD *)(v33 + 72);
          *(_QWORD *)buf = *(_QWORD *)(v33 + 80);
          v35 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v34 + 208), buf);
          if (v35)
          {
            v36 = v35 + 512;
            v37 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
            WebKit::PrefetchCache::storeRedirect(v36, v37, a2 + 400, (WebCore::ResourceRequestBase *)(a2 + 200));
          }
        }
        else
        {
          v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v40 = off_1E34C0438;
          *(_QWORD *)buf = v40;
          WebKit::NetworkResourceLoader::didReceiveResponse(v4, a2 + 400, 0, (unsigned int ***)buf);
          if (*(_QWORD *)buf)
            (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
        }
        WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf);
        v85 |= 1u;
        v86 = 0;
        v87 = 0;
        v41 = *(_QWORD *)(v4 + 4376);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 280);
          if (v42)
            v43 = *(_QWORD *)(v42 + 3528);
          else
            v43 = 0;
          *(_QWORD *)&buf[8] = v43;
        }
        v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 16) + 56))(v4 + 16);
        v53 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v53 = 2666;
        *(_QWORD *)(v53 + 8) = v52;
        *(_QWORD *)(v53 + 528) = v53 + 16;
        *(_QWORD *)(v53 + 536) = v53 + 16;
        *(_OWORD *)(v53 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v53 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v53);
        v70 = (IPC::Encoder *)v53;
        IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode((IPC::Encoder *)v53, (uint64_t *)buf);
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v4 + 16) + 32))(v4 + 16, &v70, 0);
        v55 = v70;
        v70 = 0;
        if (v55)
        {
          IPC::Encoder::~Encoder(v55, v54);
          WTF::fastFree(v56, v57);
        }
        WebKit::NetworkResourceLoader::cleanup(v4, 1);
        v59 = v88;
        v88 = 0;
        if (v59)
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v59);
        v60 = v84;
        v84 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v58);
          else
            *(_DWORD *)v60 -= 2;
        }
        goto LABEL_48;
      }
    }
    else
    {
      v38 = *(unsigned __int8 *)(a1 + 24);
      v39 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 4304) + 64);
      if (*(_QWORD *)(v4 + 4152))
      {
        if (v38 == v39)
        {
          if (!*(_DWORD *)(a2 + 656))
          {
            WebKit::NetworkResourceLoader::continueWillSendRequest(v4, (const WebCore::ResourceRequest *)(a2 + 200), 0, (uint64_t *)(a1 + 168));
            return;
          }
        }
        else
        {
          v44 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v46 = *(_QWORD *)(v4 + 80);
            v47 = *(_QWORD *)(v4 + 88);
            v48 = *(_QWORD *)(v4 + 96);
            v49 = *(_QWORD *)(v4 + 3032);
            v50 = *(unsigned __int8 *)(v4 + 315) == 1;
            v51 = *(unsigned __int8 *)(v4 + 3072);
            *(_DWORD *)buf = 134219776;
            *(_QWORD *)&buf[4] = v4;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v46;
            v72 = 2048;
            v73 = v47;
            v74 = 2048;
            v75 = v48;
            v76 = 2048;
            v77 = v49;
            v78 = 1024;
            v79 = v50;
            v80 = 1024;
            v81 = v51;
            v82 = 1024;
            v83 = 1;
            _os_log_impl(&dword_196BCC000, v44, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: Restarting network load due to credential policy change for synchronous load", buf, 0x46u);
          }
          if (!*(_DWORD *)(a2 + 656))
          {
            WebKit::NetworkResourceLoader::restartNetworkLoad(v4, (WebCore::ResourceRequestBase *)(a2 + 200), (uint64_t *)(a1 + 168));
            return;
          }
        }
      }
      else
      {
        *(_BYTE *)(v4 + 4312) = v38 != v39;
        if (!*(_DWORD *)(a2 + 656))
        {
          WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(v4, (WebCore *)a2, (WebCore::ResourceRequestBase *)(a2 + 200), a2 + 400, a1 + 32, (uint64_t *)(a1 + 168));
          return;
        }
      }
    }
    goto LABEL_52;
  }
  if (v5 != 1)
    goto LABEL_52;
  v6 = off_1ECE713E8;
  if (*(_BYTE *)(a2 + 60) == 3)
  {
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(v4 + 80);
      v8 = *(_QWORD *)(v4 + 88);
      v9 = *(_QWORD *)(v4 + 96);
      v10 = *(_QWORD *)(v4 + 3032);
      v11 = *(unsigned __int8 *)(v4 + 315) == 1;
      v12 = *(unsigned __int8 *)(v4 + 3072);
      v13 = *(_QWORD *)(v4 + 4152) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v7;
      v72 = 2048;
      v73 = v8;
      v74 = 2048;
      v75 = v9;
      v76 = 2048;
      v77 = v10;
      v78 = 1024;
      v79 = v11;
      v80 = 1024;
      v81 = v12;
      v82 = 1024;
      v83 = v13;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: NetworkLoadChecker::checkRedirection returned with a cancellation", buf, 0x46u);
    }
    goto LABEL_48;
  }
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
  {
    v63 = *(_QWORD *)(v4 + 80);
    v64 = *(_QWORD *)(v4 + 88);
    v65 = *(_QWORD *)(v4 + 96);
    v66 = *(_QWORD *)(v4 + 3032);
    v67 = *(unsigned __int8 *)(v4 + 315) == 1;
    v68 = *(unsigned __int8 *)(v4 + 3072);
    v69 = *(_QWORD *)(v4 + 4152) != 0;
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v63;
    v72 = 2048;
    v73 = v64;
    v74 = 2048;
    v75 = v65;
    v76 = 2048;
    v77 = v66;
    v78 = 1024;
    v79 = v67;
    v80 = 1024;
    v81 = v68;
    v82 = 1024;
    v83 = v69;
    _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::willSendRedirectedRequest: NetworkLoadChecker::checkRedirection returned an error", buf, 0x46u);
    if (*(_DWORD *)(a2 + 656) != 1)
LABEL_52:
      std::__throw_bad_variant_access[abi:sn180100]();
  }
  WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)v4, (const WebCore::ResourceError *)a2);
LABEL_48:
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
  v61 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v61 + 16))(v61, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = cf;
  cf = 0;
  if (v62)
    CFRelease(v62);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
}

_QWORD *WTF::Detail::CallableWrapper<std::optional<WebCore::PCM::AttributionTriggerData><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C0410;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::PCM::AttributionTriggerData><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C0410;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<std::optional<WebCore::PCM::AttributionTriggerData><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &>::call(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[200];
  BOOL v24;
  char v25;
  _BYTE v26[192];
  CFTypeRef cf;
  char v28;

  v2 = a1 + 1;
  if (!a2 || !*a2)
  {
    IPC::Connection::cancelReply<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(a1 + 1);
    return;
  }
  IPC::Decoder::decode<WebCore::ResourceRequest>(a2, (uint64_t)v26);
  v5 = v28;
  if (!v28)
    goto LABEL_13;
  v6 = a2[1];
  v7 = *a2;
  v8 = a2[2] - *a2;
  if (v6 <= v8)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_10;
  }
  v9 = (unsigned __int8 *)(v7 + v8);
  a2[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v12 = v6;
    v13 = 0;
LABEL_10:
    v6 = 0;
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v7 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
    goto LABEL_11;
  }
  v10 = *v9;
  if (v10 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v7);
    v5 = 0;
LABEL_13:
    v23[0] = 0;
    goto LABEL_14;
  }
  v11 = v10 != 0;
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v23, (uint64_t)v26);
  v24 = v11;
  v5 = 1;
LABEL_14:
  v25 = v5;
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v26);
  if (v25
    || (v20 = *a2, v21 = a2[1], *a2 = 0, a2[1] = 0, (v22 = a2[3]) != 0)
    && v21
    && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20), v25))
  {
    v17 = a1[2];
    if (v17 && *(_QWORD *)(v17 + 8))
    {
      WebKit::NetworkResourceLoader::continueWillSendRequest(a1[1], (const WebCore::ResourceRequest *)v23, v24, a1 + 3);
    }
    else
    {
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v26);
      v18 = a1[3];
      a1[3] = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 16))(v18, v26);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = cf;
      cf = 0;
      if (v19)
        CFRelease(v19);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v26);
    }
    std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v23);
  }
  else
  {
    std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v23);
    IPC::Connection::cancelReply<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(v2);
  }
}

void IPC::Connection::cancelReply<Messages::WebResourceLoader::WillSendRequest,WebKit::NetworkResourceLoader::continueWillSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,std::optional<WebCore::PCM::AttributionTriggerData> &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef v5;
  _BYTE v6[192];
  CFTypeRef cf;
  _BYTE v8[192];
  CFTypeRef v9;

  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v6);
  v2 = a1[1];
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    WebKit::NetworkResourceLoader::continueWillSendRequest(*a1, (const WebCore::ResourceRequest *)v6, 0, a1 + 2);
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v8);
    v3 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v9;
    v9 = 0;
    if (v4)
      CFRelease(v4);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v8);
  }
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v6);
}

WebCore::ResourceRequestBase *std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest,BOOL>,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceRequestBase *this)
{
  const void *v2;

  if (*((_BYTE *)this + 208))
  {
    v2 = (const void *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v2)
      CFRelease(v2);
    WebCore::ResourceRequestBase::~ResourceRequestBase(this);
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::tryStoreAsCacheEntry(void)::$_0,void,WebKit::NetworkCache::MappedBody &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34C0460;
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::tryStoreAsCacheEntry(void)::$_0,void,WebKit::NetworkCache::MappedBody &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C0460;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::tryStoreAsCacheEntry(void)::$_0,void,WebKit::NetworkCache::MappedBody &&>::call(IPC::Encoder *result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  if (*(_BYTE *)(a2 + 32))
  {
    v2 = a2 + 8;
    v3 = (_QWORD *)*((_QWORD *)result + 1);
    v4 = v3[2];
    v3 += 2;
    v5 = (*(uint64_t (**)(_QWORD *))(v4 + 56))(v3);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 293;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v10 = (IPC::Encoder *)v6;
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v6, (WebCore::ResourceRequest *)(v3 + 19));
    IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::encode((IPC::Encoder *)v6, v2);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v3 + 32))(v3, &v10, 0);
    result = v10;
    v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::dispatchWillSendRequestForCacheEntry(WebCore::ResourceRequest &&,std::unique_ptr<WebKit::NetworkCache::Entry,WebCore::ResourceRequest &&::default_delete<WebKit::NetworkCache>> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _BYTE v10[40];
  _QWORD v11[6];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  WTF::URL::URL((uint64_t)v10, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)v11, (uint64_t *)(a2 + 40));
  v11[5] = *(_QWORD *)(a2 + 80);
  v3 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 88) = 0u;
  v12 = v3;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v13 = v3;
  v4 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v14 = v4;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v15 = v3;
  v5 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v16 = v5;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v17 = v3;
  LODWORD(v5) = *(_DWORD *)(a2 + 144);
  v19 = *(_BYTE *)(a2 + 148);
  v18 = v5;
  v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  v20 = v6;
  v23 = *(_BYTE *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 168);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  v21 = v7;
  v22 = v8;
  v9 = *(const void **)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v24 = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v10);
}

_DWORD *WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  _DWORD **v3;
  uint64_t v4;

  v1 = result;
  v2 = result[3];
  if ((_DWORD)v2)
  {
    v3 = *(_DWORD ***)result;
    v4 = 8 * v2;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  v1[3] = 0;
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle(WebKit::ServiceWorkerFetchTask *)::$_0,void,WebCore::ResourceRequest &&>::call(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _BYTE v10[40];
  _QWORD v11[6];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  WTF::URL::URL((uint64_t)v10, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)v11, (uint64_t *)(a2 + 40));
  v11[5] = *(_QWORD *)(a2 + 80);
  v3 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 88) = 0u;
  v12 = v3;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v13 = v3;
  v4 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v14 = v4;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v15 = v3;
  v5 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v16 = v5;
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v17 = v3;
  LODWORD(v5) = *(_DWORD *)(a2 + 144);
  v19 = *(_BYTE *)(a2 + 148);
  v18 = v5;
  v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  v20 = v6;
  v23 = *(_BYTE *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 168);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  v21 = v7;
  v22 = v8;
  v9 = *(const void **)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v24 = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v10);
}

WTF *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(WTF *result, uint64_t a2, WTF::StringImpl **a3)
{
  _QWORD *v3;
  _DWORD *v4;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v3 = result;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_DWORD *)(a2 + 8);
    v8 = v7 - 1;
    v9 = *(_DWORD *)(a2 + 16);
    v10 = *((_DWORD *)*a3 + 4);
    if (v10 >= 0x100)
    {
      v11 = v10 >> 8;
    }
    else
    {
      v11 = WTF::StringImpl::hashSlowCase(*a3);
      v4 = *(_DWORD **)a2;
    }
    v12 = (v11 ^ v9) & v8;
    v13 = (uint64_t)&v4[4 * v12];
    result = *(WTF **)v13;
    if (*(_QWORD *)v13)
    {
      v14 = -1;
      do
      {
        v15 = *((_DWORD *)result + 4);
        result = v15 >= 0x100 ? (WTF *)(v15 >> 8) : (WTF *)WTF::StringImpl::hashSlowCase(result);
        if (++v14 > ((v12 + v7 - ((result ^ v9) & v8)) & v8))
          break;
        if ((_DWORD)result == v11)
        {
          result = (WTF *)WTF::equal(*(WTF **)v13, *a3, (const WTF::StringImpl *)a3);
          if ((result & 1) != 0)
          {
            v4 = *(_DWORD **)(v13 + 8);
            if (v4)
              *v4 += 2;
            goto LABEL_15;
          }
        }
        v12 = (v12 + 1) & v8;
        v13 = *(_QWORD *)a2 + 16 * v12;
        result = *(WTF **)v13;
      }
      while (*(_QWORD *)v13);
    }
    v4 = 0;
  }
LABEL_15:
  *v3 = v4;
  return result;
}

_QWORD *std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = &off_1E34C04D8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  return a1;
}

void std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  *a1 = &off_1E34C04D8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v2 + 8), a2);
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *result = &off_1E34C04D8;
  result[1] = v3;
  ++*(_DWORD *)(v4 + 8);
  result[2] = v4;
  return result;
}

uint64_t std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E34C04D8;
  a2[1] = v2;
  v3 = *(_QWORD *)(result + 16);
  ++*(_DWORD *)(v3 + 8);
  a2[2] = v3;
  return result;
}

_DWORD *std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::destroy(_DWORD *result, WTF::StringImpl *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
    return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v2 + 8), a2);
  return result;
}

void std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::destroy_deallocate(_QWORD *__p, WTF::StringImpl *a2)
{
  uint64_t v3;

  v3 = __p[2];
  __p[2] = 0;
  if (v3)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v3 + 8), a2);
  operator delete(__p);
}

void std::__function::__func<WebKit::NetworkResourceLoader::contentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  WTF *v4;
  const void *v5;
  CFTypeRef v6;
  const WTF::URL *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::RefCountedBase *v13;
  WTF::RefCountedBase *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  CFTypeRef v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::RefCountedBase *v30;
  uint64_t v31;
  char v32;
  CFTypeRef v33;
  _BYTE v34[152];
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::RefCountedBase *v37;
  uint64_t v38;
  char v39;
  CFTypeRef cf;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  WebCore::ContentFilterUnblockHandler::setUnblockedAfterRequest((WebCore::ContentFilterUnblockHandler *)(v3 + 4800));
  v4 = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v34);
  if (*(_BYTE *)(v3 + 4176) | v2)
  {
    WebCore::ResourceRequestBase::operator=((uint64_t)v34, v3 + 168);
    v5 = *(const void **)(v3 + 360);
    if (v5)
      CFRetain(*(CFTypeRef *)(v3 + 360));
    v6 = cf;
    cf = v5;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    v7 = (const WTF::URL *)WTF::aboutBlankURL(v4);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v24, v7, 0);
    v33 = 0;
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v34, (uint64_t)&v24);
    v9 = v28;
    v28 = 0;
    v10 = v35;
    v35 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v29;
    v29 = 0;
    v12 = v36;
    v36 = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v30;
    v30 = 0;
    v14 = v37;
    v37 = v13;
    if (v14)
      WTF::RefCounted<WebCore::FormData>::deref(v14);
    v38 = v31;
    v39 = v32;
    v15 = v33;
    v33 = 0;
    v16 = cf;
    cf = v15;
    if (v16)
    {
      CFRelease(v16);
      v23 = v33;
      v33 = 0;
      if (v23)
        CFRelease(v23);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v24);
  }
  WebKit::blockedByContentFilterError((WebKit *)v34, (uint64_t)&v24);
  WebCore::ContentFilter::setBlockedError(*(WebCore::ContentFilter **)(v3 + 4792), (CFTypeRef *)&v24);
  WebCore::ContentFilter::handleProvisionalLoadFailure();
  v18 = v27;
  v27 = 0;
  if (v18)
    CFRelease(v18);
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v24;
  v24 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v17);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = cf;
  cf = 0;
  if (v22)
    CFRelease(v22);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v34);
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  int i;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = WTF::StringViewHashTranslator::hash(*a2, a2[1]);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = (uint64_t *)(v2 + 8 * (v5 & v4));
      if (!*v8)
        break;
      if (*v8 != -1 && WTF::StringViewHashTranslator::equal(v8, (unsigned __int8 *)*a2, a2[1]))
        return 1;
      ++i;
    }
  }
  return 0;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEABB3C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 == 1)
  {
    if (!__stlxr(0, v1))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
LABEL_8:
  if (!v4)
  {
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = off_1E34C0858;
    *(_QWORD *)(v8 + 8) = v1;
    *(_QWORD *)(v8 + 16) = v6;
    *(_BYTE *)(v8 + 24) = v5;
    v10 = (unsigned __int8 *)v8;
    WTF::ensureOnMainThread();
    result = v10;
    if (v10)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

WebKit::ResourceLoadStatisticsStore **WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  WebKit::ResourceLoadStatisticsStore **result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(WebKit::ResourceLoadStatisticsStore ***)(a1 + 16);
  if (result)
  {
    WebKit::WebResourceLoadStatisticsStore::~WebResourceLoadStatisticsStore(result);
    result = (WebKit::ResourceLoadStatisticsStore **)WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return (WebKit::ResourceLoadStatisticsStore **)WTF::fastFree(v4, a2);
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::values@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  WTF::ThreadSafeWeakPtrControlBlock *v35;
  void *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = (unsigned __int8 *)(result + 16);
  if (__ldaxr((unsigned __int8 *)(result + 16)))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEABB3C](result + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v44 = 0;
  v45 = 0;
  if (*(_QWORD *)v3 && (v7 = *(unsigned int *)(*(_QWORD *)v3 - 12), (_DWORD)v7))
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v45) = v7;
    v44 = (uint64_t)v8;
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)v3 && *(_DWORD *)(v9 - 12))
    {
      v10 = *(unsigned int *)(v9 - 4);
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        v12 = *(_QWORD *)v3;
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 += 16;
          v11 -= 16;
          if (!v11)
            goto LABEL_34;
        }
      }
      else
      {
        v12 = *(_QWORD *)v3;
      }
      v14 = v9 + 16 * v10;
      if (v14 == v12)
      {
LABEL_34:
        v13 = 0;
        LODWORD(v15) = 0;
      }
      else
      {
        v13 = 0;
        LODWORD(v15) = 0;
        a2 = *(void **)v12;
LABEL_21:
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v12 + 8), (uint64_t)a2, &v47);
        v16 = v47;
        if (v47)
        {
          v46 = v47;
          v47 = 0;
          if ((_DWORD)v15 == (_DWORD)v45)
          {
            v17 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, v15 + 1, (unint64_t)&v46);
            v15 = HIDWORD(v45);
            v8 = (WTF *)v44;
            v18 = *v17;
            *v17 = 0;
            *((_QWORD *)v8 + v15) = v18;
          }
          else
          {
            v46 = 0;
            *((_QWORD *)v8 + v15) = v16;
          }
          LODWORD(v15) = v15 + 1;
          HIDWORD(v45) = v15;
          v19 = v46;
          v46 = 0;
          if (v19)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v19 + 8));
          v20 = v47;
          v47 = 0;
          if (v20)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v20 + 8));
        }
        else
        {
          v13 = 1;
        }
        while (1)
        {
          v12 += 16;
          if (v12 == v14)
            break;
          a2 = *(void **)v12;
          if ((unint64_t)(*(_QWORD *)v12 + 1) > 1)
          {
            if (v12 != v14)
              goto LABEL_21;
            break;
          }
        }
        LODWORD(v7) = v45;
      }
      if (v7 <= v15)
        goto LABEL_39;
      if ((_DWORD)v15)
      {
        LODWORD(v45) = v15;
        v44 = WTF::fastRealloc(v8, (void *)(8 * v15));
        goto LABEL_39;
      }
      if (!v8)
        goto LABEL_39;
    }
    else
    {
      v13 = 0;
    }
    v44 = 0;
    LODWORD(v45) = 0;
    WTF::fastFree(v8, a2);
  }
  else
  {
    v13 = 0;
  }
LABEL_39:
  v21 = *(unsigned int *)(a3 + 12);
  v22 = *(WTF **)a3;
  if ((_DWORD)v21)
  {
    v23 = 8 * v21;
    v24 = *(WTF **)a3;
    do
    {
      v25 = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (v25)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v25 + 8));
      v24 = (WTF *)((char *)v24 + 8);
      v23 -= 8;
    }
    while (v23);
  }
  if (v22)
    WTF::fastFree(v22, a2);
  *(_QWORD *)a3 = v44;
  v26 = v45;
  v44 = 0;
  v45 = 0;
  *(_QWORD *)(a3 + 8) = v26;
  result = WTF::Vector<WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, a2);
  v27 = *(_QWORD *)v3;
  if (!v13)
    goto LABEL_68;
  if (!v27)
    goto LABEL_79;
  v28 = *(_DWORD *)(v27 - 4);
  if (!v28)
  {
LABEL_67:
    *(_DWORD *)(v3 + 8) = 0;
    goto LABEL_69;
  }
  v29 = 0;
  v30 = v28 - 1;
  do
  {
    v31 = v30;
    v32 = (_QWORD *)(v27 + 16 * v30);
    if ((unint64_t)(*v32 + 1) >= 2)
    {
      v33 = v27 + 16 * v30;
      v35 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v33 + 8);
      v34 = (uint64_t *)(v33 + 8);
      result = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v35);
      if ((_DWORD)result)
      {
        *v32 = -1;
        result = *v34;
        *v34 = 0;
        if (result)
          result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, v36);
        ++v29;
      }
    }
    --v30;
  }
  while (v31);
  v27 = *(_QWORD *)v3;
  if (v29)
  {
    *(_DWORD *)(v27 - 16) += v29;
    v37 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    *(_DWORD *)(v37 - 12) = v38 - v29;
    v27 = *(_QWORD *)v3;
  }
  if (!v27)
  {
LABEL_79:
    v41 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    goto LABEL_70;
  }
  v39 = *(_DWORD *)(v27 - 4);
  if (v39 < 9 || 6 * *(_DWORD *)(v27 - 12) >= v39)
    goto LABEL_67;
  result = WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::shrinkToBestSize((uint64_t *)v3);
  v27 = *(_QWORD *)v3;
LABEL_68:
  *(_DWORD *)(v3 + 8) = 0;
  if (v27)
  {
LABEL_69:
    v41 = *(_DWORD *)(v27 - 12);
    v42 = 0x7FFFFFFF;
    if (v41 >= 0x7FFFFFFF)
      goto LABEL_71;
    goto LABEL_70;
  }
  v41 = 0;
LABEL_70:
  v42 = v41;
LABEL_71:
  *(_DWORD *)(v3 + 12) = 2 * v42;
  v43 = __ldxr(v5);
  if (v43 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_14;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_14:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_7:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::rehash(a1, v8);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v6 + 8));
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

__n128 WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __n128 result;

  v4 = *(WTF::StringImpl **)a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(v4);
  v8 = 0;
  do
  {
    v9 = v7 & v5;
    v7 = ++v8 + v9;
  }
  while (*(_QWORD *)(a1 + 32 * v9));
  v10 = a1 + 32 * v9;
  *(_QWORD *)v10 = 0;
  v11 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)v10 = v11;
  result = *(__n128 *)(a2 + 8);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 24);
  *(__n128 *)(v10 + 8) = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34C06B0;
  WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WebCore::PCM::AttributionTriggerData &&::String &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WTF::String &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C06B0;
  WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WebCore::PCM::AttributionTriggerData &&::String &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkSession::handlePrivateClickMeasurementConversion(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::ResourceRequest const&,WTF::String &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(result + 8) + 152)
                                                                                            + 24))(*(_QWORD *)(*(_QWORD *)(result + 8) + 152), result + 24, result + 152, result + 192, result + 200, result + 240);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::add@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *(_QWORD *)a2;
  v11 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *(_QWORD *)a2;
      v17 = v9;
    }
    *(_QWORD *)a2 = 0;
    v19 = *v17;
    *v17 = v10;
    if (v19)
      result = (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v19 + 8), a2);
    v20 = *v4;
    if (*v4)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v25 = *v4;
    if (*v4)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_27:
        result = WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::expand(v4, v17);
        v17 = result;
        v25 = *v4;
        if (*v4)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_27;
    }
    v24 = v25 + 8 * v28;
    v23 = 1;
    goto LABEL_32;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v6 - 4);
  v23 = 0;
  v24 = v6 + 8 * v22;
LABEL_32:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v26 + 8), v10);
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::remove(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v3 = result;
  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v4)
    result = (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v4 + 8), a2);
  *(_QWORD *)a2 = -1;
  ++*(_DWORD *)(*v3 - 16);
  v5 = *v3;
  if (*v3)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *v3;
  if (*v3)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::rehash(v3, v9 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WebKit::NetworkResourceLoader const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      if (v10 == *a2)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  return v2 + 8 * v9;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkSession::CachedNetworkResourceLoader::*&)(void),WebKit::NetworkSession::CachedNetworkResourceLoader*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::TimerBase *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  WebCore::TimerBase *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (WebCore::TimerBase *)v23[1];
          v23[1] = 0;
          if (v24)
            std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](v24, v8);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(WebCore::TimerBase **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          std::default_delete<WebKit::NetworkSession::CachedNetworkResourceLoader>::operator()[abi:sn180100](v13, v8);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(WebCore::TimerBase **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::take(_QWORD *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *a2;
  if (*a2)
    v3 += 16 * *(unsigned int *)(v3 - 4);
  if ((_QWORD *)v3 == a3)
  {
    *result = 0;
    return result;
  }
  v4 = a3[1];
  a3[1] = 0;
  *result = v4;
  if (*a2)
  {
    v5 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
    if ((_QWORD *)v5 == a3)
      return result;
  }
  else
  {
    if (!a3)
      return result;
    v5 = 0;
  }
  if ((_QWORD *)v5 != a3)
  {
    *a3 = -1;
    a3[1] = 0;
    ++*(_DWORD *)(*a2 - 16);
    v6 = *a2;
    v7 = *a2 ? *(_DWORD *)(v6 - 12) - 1 : -1;
    *(_DWORD *)(v6 - 12) = v7;
    v8 = *a2;
    if (*a2)
    {
      v9 = 6 * *(_DWORD *)(v8 - 12);
      v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9)
        return (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a2, v10 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(_QWORD *)(a1 + 16 * v6);
  if (v7 == a2)
    return a1 + 16 * v6;
  v8 = 1;
  while (v7)
  {
    v6 = ((_DWORD)v6 + v8) & v2;
    v7 = *(_QWORD *)(a1 + 16 * v6);
    ++v8;
    if (v7 == a2)
      return a1 + 16 * v6;
  }
  return a1 + 16 * *(unsigned int *)(a1 - 4);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (uint64_t *)(v19 + 16 * v26);
          v29 = (unsigned int *)v28[1];
          v28[1] = 0;
          if (v29)
          {
            do
            {
              v33 = __ldaxr(v29);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v29));
            if (!v34)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, v10);
            }
          }
          *v28 = *v13;
          v30 = v6 + 16 * v11;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          v28[1] = v31;
          v32 = *(unsigned int **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
          {
            do
            {
              v35 = __ldaxr(v32);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v32));
            if (!v36)
            {
              atomic_store(1u, v32);
              WTF::fastFree((WTF *)v32, v10);
            }
          }
          if (v13 == a3)
            v12 = v28;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v11;

  v2 = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v2)
  {
    do
    {
      v5 = __ldaxr(v2);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v2));
    if (!v6)
    {
      atomic_store(1u, v2);
      v11 = result;
      WTF::fastFree((WTF *)v2, a2);
      result = v11;
    }
  }
  ++*(_DWORD *)(*result - 16);
  v3 = *result;
  if (*result)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v7 = *result;
  if (*result)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v9 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2 + ~(*a2 << 32);
    v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == *a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
        return *(_QWORD *)(v10 + 8);
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(v2 + 16 * v7);
        ++v9;
        if (v8 == *a2)
          goto LABEL_6;
      }
    }
  }
  return 0;
}

_QWORD *WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v14 = (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::lookupForReinsert(a1, v13);
          v15 = *v14;
          *v14 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          v16 = *v13;
          *v13 = 0;
          *v14 = v16;
          v17 = *v13;
          *v13 = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (v13 == a3)
            v11 = v14;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C0700;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C0700;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSession::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2 && *a2)
    IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

char *IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, *(_QWORD *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(a1, *(_QWORD *)(a2 + 24));
  v5 = **(_QWORD **)(a2 + 32);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C0728;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C0728;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetAppBoundDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>>(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl **result;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInUIProcessForRegistrableDomains,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    if (v6)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkSocketChannel::*&)(void),WebKit::NetworkSocketChannel*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::PingLoad::*&)(void),WebKit::PingLoad*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PingLoad::initialize(WebKit::NetworkProcess &)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34C07C8;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 30;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PingLoad::initialize(WebKit::NetworkProcess &)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E34C07C8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 30;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PingLoad::initialize(WebKit::NetworkProcess &)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(result + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v5[0] = *(_QWORD *)(result + 8);
    v5[1] = v5[0];
    v5[2] = result + 24;
    v3 = *(unsigned int *)(a2 + 656);
    if ((_DWORD)v3 == -1)
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit8PingLoad10initializeERNSA_14NetworkProcessEENK3__0clINS_7variantIJN7WebCore15ResourceRequestENSA_18NetworkLoadChecker18RedirectionTripletENSH_13ResourceErrorEEEEEEDaOT_EUlRSL_E_JZZNSB_10initializeESD_ENKSF_ISM_EESN_SP_EUlRSK_E_ZZNSB_10initializeESD_ENKSF_ISM_EESN_SP_EUlRSI_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSI_SK_SL_EEEEEEDcSO_DpT0_(v4);
    }
    else
    {
      v6 = v5;
      return ((uint64_t (*)(_QWORD **))off_1E34C07E0[v3])(&v6);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit8PingLoad10initializeERNSA_14NetworkProcessEENK3__0clINS_7variantIJN7WebCore15ResourceRequestENSA_18NetworkLoadChecker18RedirectionTripletENSH_13ResourceErrorEEEEEEDaOT_EUlRSL_E_JZZNSB_10initializeESD_ENKSF_ISM_EESN_SP_EUlRSK_E_ZZNSB_10initializeESD_ENKSF_ISM_EESN_SP_EUlRSI_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSI_SK_SL_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  WebKit::NetworkSession *v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  const void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int **v31;
  uint64_t v32;
  unsigned int **v33;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int v36;
  __int128 v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  __int128 v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::RefCountedBase *v49;
  WTF::RefCountedBase *v50;
  const void *v51;
  CFTypeRef v52;
  WebKit::NetworkDataTaskCocoa *v53;
  WebKit::NetworkDataTaskCocoa *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  _OWORD v57[2];
  unsigned int *v58;
  unsigned int *v59;
  __int128 v60;
  _BYTE v61[21];
  CFTypeRef v62[19];
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::RefCountedBase *v65;
  uint64_t v66;
  char v67;
  CFTypeRef cf;
  _DWORD v69[4];
  char v70[2560];
  char v71;
  char v72;
  _BYTE v73[24];
  uint64_t v74;
  char v75;
  const void *v76;
  char v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  __int128 v81;
  _DWORD *v82;
  uint64_t v83;
  _DWORD v84[2];
  _DWORD *v85;
  __int128 v86;
  __int128 v87;
  char v88[16];
  int v89;
  char v90;
  char v91;
  _DWORD *v92;
  __int128 v93;
  __int128 v94;
  _DWORD *v95;
  __int128 v96;
  __int128 v97;
  __int16 v98;
  _DWORD *v99;
  _DWORD *v100;
  __int16 v101;
  _DWORD *v102;
  _DWORD *v103;
  uint64_t v104;
  _WORD v105[9];
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  _DWORD *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  _DWORD *v115;
  __int128 v116;
  __int128 v117;
  __int16 v118;
  _DWORD *v119;
  _DWORD *v120;
  uint64_t v121;
  char v122[224];
  char v123;
  __int128 v124;
  _OWORD v125[2];
  _DWORD *v126;
  __int128 v127;
  __int128 v128;
  _OWORD v129[2];
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v4 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  v5 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v57[0]) = 134217984;
    *(_QWORD *)((char *)v57 + 4) = v3;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - PingLoad::startNetworkLoad", (uint8_t *)v57, 0xCu);
  }
  *(_QWORD *)&v57[0] = *(_QWORD *)(v3 + 16);
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 208), v57);
  if (v6)
  {
    v7 = (WebKit::NetworkSession *)v6;
    v8 = *(_OWORD *)(v3 + 48);
    v57[0] = *(_OWORD *)(v3 + 32);
    v57[1] = v8;
    v9 = *(unsigned int **)(v3 + 64);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v58 = v9;
    v11 = *(unsigned int **)(v3 + 72);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v59 = v11;
    v13 = *(_OWORD *)(v3 + 80);
    v14 = *(_OWORD *)(v3 + 96);
    *(_QWORD *)&v61[13] = *(_QWORD *)(v3 + 109);
    v60 = v13;
    *(_OWORD *)v61 = v14;
    WebCore::ResourceRequest::ResourceRequest(v62, (const WebCore::ResourceRequest *)(v3 + 120));
    *(_DWORD *)((char *)v69 + 3) = *(_DWORD *)(v3 + 323);
    v69[0] = *(_DWORD *)(v3 + 320);
    v70[0] = 0;
    v71 = 0;
    if (*(_BYTE *)(v3 + 2896))
    {
      WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)v70, (const WebKit::NavigationActionData *)(v3 + 336));
      v71 = 1;
    }
    v72 = *(_BYTE *)(v3 + 2912);
    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v73, v3 + 2920);
    v73[16] = *(_BYTE *)(v3 + 2936);
    LOBYTE(v74) = 0;
    v77 = 0;
    if (*(_BYTE *)(v3 + 2968))
    {
      v74 = *(_QWORD *)(v3 + 2944);
      v75 = *(_BYTE *)(v3 + 2952);
      v15 = *(const void **)(v3 + 2960);
      v76 = v15;
      if (v15)
        CFRetain(v15);
      v77 = 1;
    }
    v78 = *(_DWORD *)(v3 + 2976);
    v79 = *(_WORD *)(v3 + 2980);
    v80 = *(_QWORD *)(v3 + 2984);
    v16 = *(unsigned int *)(v3 + 3004);
    v81 = 0u;
    HIDWORD(v81) = v16;
    if ((_DWORD)v16)
    {
      if (v16 >> 29)
        goto LABEL_74;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
      DWORD2(v81) = v16;
      *(_QWORD *)&v81 = v17;
      v18 = *(unsigned int *)(v3 + 3004);
      if ((_DWORD)v18)
      {
        v19 = *(_DWORD ***)(v3 + 2992);
        v20 = 8 * v18;
        do
        {
          v21 = *v19;
          if (*v19)
            ++*v21;
          *v17++ = v21;
          ++v19;
          v20 -= 8;
        }
        while (v20);
      }
    }
    v22 = *(_DWORD **)(v3 + 3008);
    if (v22)
      ++*v22;
    v82 = v22;
    v83 = *(_QWORD *)(v3 + 3016);
    *(_DWORD *)((char *)v84 + 3) = *(_DWORD *)(v3 + 3027);
    v84[0] = *(_DWORD *)(v3 + 3024);
    v23 = *(_DWORD **)(v3 + 3032);
    if (v23)
      *v23 += 2;
    v85 = v23;
    v86 = *(_OWORD *)(v3 + 3040);
    v87 = *(_OWORD *)(v3 + 3056);
    v88[0] = 0;
    v91 = 0;
    if (*(_BYTE *)(v3 + 3096))
    {
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v88, (uint64_t *)(v3 + 3072));
      v89 = *(_DWORD *)(v3 + 3088);
      v90 = *(_BYTE *)(v3 + 3092);
      v91 = 1;
    }
    v24 = *(_DWORD **)(v3 + 3104);
    if (v24)
      *v24 += 2;
    v92 = v24;
    v93 = *(_OWORD *)(v3 + 3112);
    v94 = *(_OWORD *)(v3 + 3128);
    v25 = *(_DWORD **)(v3 + 3144);
    if (v25)
      *v25 += 2;
    v95 = v25;
    v96 = *(_OWORD *)(v3 + 3152);
    v97 = *(_OWORD *)(v3 + 3168);
    v98 = *(_WORD *)(v3 + 3184);
    v26 = *(_DWORD **)(v3 + 3192);
    if (v26)
      *v26 += 2;
    v99 = v26;
    v27 = *(_DWORD **)(v3 + 3200);
    if (v27)
      *v27 += 2;
    v100 = v27;
    v101 = *(_WORD *)(v3 + 3208);
    v28 = *(_DWORD **)(v3 + 3216);
    if (v28)
      *v28 += 2;
    v102 = v28;
    v29 = *(_DWORD **)(v3 + 3224);
    if (v29)
      *v29 += 2;
    v103 = v29;
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v104, (WTF::ASCIILiteral *)(v3 + 3232));
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v105, (WTF::ASCIILiteral *)(v3 + 3248));
    v105[8] = *(_WORD *)(v3 + 3264);
    v106 = *(_BYTE *)(v3 + 3266);
    v30 = *(unsigned int *)(v3 + 3284);
    v107 = 0u;
    HIDWORD(v107) = v30;
    if (!(_DWORD)v30)
      goto LABEL_46;
    if (!(v30 >> 29))
    {
      v31 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v30));
      DWORD2(v107) = v30;
      *(_QWORD *)&v107 = v31;
      v32 = *(unsigned int *)(v3 + 3284);
      if ((_DWORD)v32)
      {
        v33 = *(unsigned int ***)(v3 + 3272);
        v34 = &v33[v32];
        do
        {
          v35 = *v33;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 + 1, v35));
          *v31++ = v35;
          ++v33;
        }
        while (v33 != v34);
      }
LABEL_46:
      v37 = *(_OWORD *)(v3 + 3304);
      v108 = *(_OWORD *)(v3 + 3288);
      v109 = v37;
      v110 = *(_BYTE *)(v3 + 3320);
      v38 = *(_DWORD **)(v3 + 3328);
      if (v38)
        *v38 += 2;
      v111 = v38;
      v112 = *(_OWORD *)(v3 + 3336);
      v113 = *(_OWORD *)(v3 + 3352);
      v114 = *(_QWORD *)(v3 + 3368);
      v39 = *(_DWORD **)(v3 + 3376);
      if (v39)
        *v39 += 2;
      v115 = v39;
      v116 = *(_OWORD *)(v3 + 3384);
      v117 = *(_OWORD *)(v3 + 3400);
      v118 = *(_WORD *)(v3 + 3416);
      v40 = *(_DWORD **)(v3 + 3424);
      if (v40)
        *v40 += 2;
      v119 = v40;
      v41 = *(_DWORD **)(v3 + 3432);
      if (v41)
        *v41 += 2;
      v120 = v41;
      v121 = *(_QWORD *)(v3 + 3440);
      v122[0] = 0;
      v123 = 0;
      if (*(_BYTE *)(v3 + 3680))
      {
        std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester const&,WebCore::NavigationRequester*>((uint64_t)v122, v3 + 3456);
        v123 = 1;
      }
      v42 = *(_OWORD *)(v3 + 3696);
      *(_OWORD *)((char *)v125 + 9) = *(_OWORD *)(v3 + 3721);
      v124 = v42;
      v125[0] = *(_OWORD *)(v3 + 3712);
      v43 = *(_DWORD **)(v3 + 3744);
      if (v43)
        *v43 += 2;
      v126 = v43;
      v127 = *(_OWORD *)(v3 + 3752);
      v128 = *(_OWORD *)(v3 + 3768);
      v129[0] = *(_OWORD *)(v3 + 3784);
      *(_DWORD *)((char *)v129 + 15) = *(_DWORD *)(v3 + 3799);
      WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v62, a2);
      v45 = *(WTF::StringImpl **)(a2 + 152);
      *(_QWORD *)(a2 + 152) = 0;
      v46 = v63;
      v63 = v45;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v44);
        else
          *(_DWORD *)v46 -= 2;
      }
      v47 = *(WTF::StringImpl **)(a2 + 160);
      *(_QWORD *)(a2 + 160) = 0;
      v48 = v64;
      v64 = v47;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v44);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = *(WTF::RefCountedBase **)(a2 + 168);
      *(_QWORD *)(a2 + 168) = 0;
      v50 = v65;
      v65 = v49;
      if (v50)
        WTF::RefCounted<WebCore::FormData>::deref(v50);
      v66 = *(_QWORD *)(a2 + 176);
      v67 = *(_BYTE *)(a2 + 184);
      v51 = *(const void **)(a2 + 192);
      *(_QWORD *)(a2 + 192) = 0;
      v52 = cf;
      cf = v51;
      if (v52)
        CFRelease(v52);
      v53 = (WebKit::NetworkDataTaskCocoa *)WTF::fastMalloc((WTF *)0x318);
      v54 = WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(v53, v7, (WebKit::NetworkDataTaskClient *)v3, (const WebKit::NetworkLoadParameters *)v57);
      v55 = *(_QWORD *)(v3 + 3816);
      *(_QWORD *)(v3 + 3816) = v54;
      if (v55)
      {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v55 + 8));
        v54 = *(WebKit::NetworkDataTaskCocoa **)(v3 + 3816);
      }
      (*(void (**)(WebKit::NetworkDataTaskCocoa *))(*(_QWORD *)v54 + 24))(v54);
      WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v57, v56);
      return;
    }
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x19710F708);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit8PingLoad10initializeERNSA_14NetworkProcessEENK3__0clINS_7variantIJN7WebCore15ResourceRequestENSA_18NetworkLoadChecker18RedirectionTripletENSH_13ResourceErrorEEEEEEDaOT_EUlRSL_E_JZZNSB_10initializeESD_ENKSF_ISM_EESN_SP_EUlRSK_E_ZZNSB_10initializeESD_ENKSF_ISM_EESN_SP_EUlRSI_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSI_SK_SL_EEEEEEDcSO_DpT0_(WebKit::PingLoad ***a1, const WebCore::ResourceError *a2)
{
  WebKit::PingLoad *v3;
  _BYTE v4[138];
  char v5;
  uint64_t v6;
  char v7;

  v3 = **a1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v4);
  v6 = 0;
  v7 = 0;
  v5 = v5 & 0xF1 | 4;
  WebKit::PingLoad::didFinish(v3, a2, (const WebCore::ResourceResponse *)v4);
}

void sub_19710F768(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CFTypeRef cf,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  const void *v46;
  uint64_t v47;
  const void *v48;

  v46 = v48;
  v48 = 0;
  if (v46)
    CFRelease(v46);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v47, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PingLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C0808;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PingLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C0808;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::PingLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t a1, uint64_t a2)
{
  WebKit::PingLoad *v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  uint64_t v20;
  CFTypeRef v21;
  WTF::StringImpl *v22[2];
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  int v26;
  __int16 v27;
  CFTypeRef v28;
  char v29;
  _BYTE v30[40];
  _QWORD v31[6];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  CFTypeRef cf;
  _QWORD v45[17];
  char v46;
  CFTypeRef v47;
  char v48;

  v4 = *(WebKit::PingLoad **)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 656);
  if (v5)
  {
    if (v5 == 1)
    {
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v45);
      v47 = 0;
      v48 = 0;
      v46 = v46 & 0xF1 | 4;
      WebKit::PingLoad::didFinish(v4, (const WebCore::ResourceError *)a2, (const WebCore::ResourceResponse *)v45);
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x19710FBD4);
  }
  WTF::URL::URL((uint64_t)v30, (uint64_t *)(a2 + 200));
  WTF::URL::URL((uint64_t)v31, (uint64_t *)(a2 + 240));
  v6 = *(_QWORD *)(a2 + 280);
  v7 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a2 + 288) = 0u;
  v32 = v7;
  *(_QWORD *)&v7 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  v31[5] = v6;
  v33 = v7;
  v8 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;
  v34 = v8;
  v9 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  v35 = v9;
  v10 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 328) = 0;
  v36 = v10;
  v11 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  v37 = v11;
  LODWORD(v10) = *(_DWORD *)(a2 + 344);
  v39 = *(_BYTE *)(a2 + 348);
  v38 = v10;
  v12 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a2 + 352) = 0u;
  v40 = v12;
  v13 = *(_QWORD *)(a2 + 368);
  v14 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 368) = 0;
  v43 = *(_BYTE *)(a2 + 384);
  v41 = v13;
  v42 = v14;
  v15 = *(const void **)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  cf = v15;
  if ((*(_BYTE *)(WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v30) + 8) & 2) == 0)
  {
    v16 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v30);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17 = (WTF::StringImpl *)v45[0];
    v22[0] = 0;
    v18 = *(WTF::StringImpl **)v16;
    if (*(_QWORD *)v16)
      *(_DWORD *)v18 += 2;
    v22[1] = v18;
    v19 = *(_OWORD *)(v16 + 8);
    v24 = *(_OWORD *)(v16 + 24);
    v23 = v19;
    if (v17)
      *(_DWORD *)v17 += 2;
    v25 = v17;
    v26 = 0;
    v27 = 2;
    v28 = 0;
    v29 = 1;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v45);
    v47 = 0;
    v48 = 0;
    v46 = v46 & 0xF1 | 4;
    WebKit::PingLoad::didFinish(v4, (const WebCore::ResourceError *)v22, (const WebCore::ResourceResponse *)v45);
  }
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 16))(v20, v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v30);
}

void WTF::Detail::CallableWrapper<WebKit::PreconnectTask::PreconnectTask(WebKit::NetworkSession &,WebKit::NetworkLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::NetworkLoadMetrics const&)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::PreconnectTask *v1;
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  __int128 v5;
  _QWORD v6[16];
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  char v14;

  v1 = *(WebKit::PreconnectTask **)(a1 + 8);
  v2 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((_QWORD *)v1 + 1) + 120));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (_DWORD *)v6[0];
  v7[0] = 0;
  v4 = *(_DWORD **)v2;
  if (*(_QWORD *)v2)
    *v4 += 2;
  v7[1] = v4;
  v5 = *(_OWORD *)(v2 + 24);
  v8 = *(_OWORD *)(v2 + 8);
  v9 = v5;
  if (v3)
    *v3 += 2;
  v10 = v3;
  v11 = 0;
  v12 = 4;
  v13 = 0;
  v14 = 1;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v6);
  WebKit::PreconnectTask::didFinish(v1, (const WebCore::ResourceError *)v7, (const WebCore::NetworkLoadMetrics *)v6);
}

WTF::StringImpl *sub_19710FC88(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  WTF::StringImpl *v40;
  uint64_t v41;
  const void *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *result;
  WTF::StringImpl *v46;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v47;

  if (v47)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v47);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, a2);
    else
      *(_DWORD *)v46 -= 2;
  }
  v42 = *(const void **)(v41 - 48);
  *(_QWORD *)(v41 - 48) = 0;
  if (v42)
    CFRelease(v42);
  v43 = *(WTF::StringImpl **)(v41 - 64);
  *(_QWORD *)(v41 - 64) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, a2);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = *(WTF::StringImpl **)(v41 - 104);
  *(_QWORD *)(v41 - 104) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  result = *(WTF::StringImpl **)(v41 - 112);
  *(_QWORD *)(v41 - 112) = 0;
  if (!result)
  {
LABEL_20:
    if (!v40)
      return result;
    goto LABEL_23;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_20;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
  if (!v40)
    return result;
LABEL_23:
  if (*(_DWORD *)v40 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v40, a2);
  *(_DWORD *)v40 -= 2;
  return result;
}

void sub_1971100A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1971104A8(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197110770(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  const void *v54;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  CFRelease(v54);
  _Unwind_Resume(a1);
}

void sub_197111050(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF::StringImpl *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,WTF::StringImpl *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,WTF::StringImpl *a63)
{
  WTF::StringImpl *a68;
  WTF::StringImpl *a69;
  WTF::StringImpl *a70;
  WTF::StringImpl *a71;
  void *v72;
  void *v73;
  void *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;

  WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a14, a2);
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a12, v72);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, v73);
  if ((a41 & 0x8000000000000) != 0)
  {
    v78 = (unsigned int *)(a41 & 0xFFFFFFFFFFFFLL);
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v78);
      WTF::fastFree((WTF *)v78, v74);
    }
  }
  if ((a40 & 0x8000000000000) != 0)
  {
    v75 = (unsigned int *)(a40 & 0xFFFFFFFFFFFFLL);
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
    {
      atomic_store(1u, v75);
      WTF::fastFree((WTF *)v75, v74);
    }
  }
  if (a35)
  {
    if (*(_DWORD *)a35 == 2)
      WTF::StringImpl::destroy(a35, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a35 -= 2;
  }
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a30 -= 2;
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a48)
  {
    if (*(_DWORD *)a48 == 2)
      WTF::StringImpl::destroy(a48, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a48 -= 2;
  }
  if (a53)
  {
    if (*(_DWORD *)a53 == 2)
      WTF::StringImpl::destroy(a53, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a53 -= 2;
  }
  if (a58)
  {
    if (*(_DWORD *)a58 == 2)
      WTF::StringImpl::destroy(a58, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a58 -= 2;
  }
  if (a63)
  {
    if (*(_DWORD *)a63 == 2)
      WTF::StringImpl::destroy(a63, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a63 -= 2;
  }
  if (a68)
  {
    if (*(_DWORD *)a68 == 2)
      WTF::StringImpl::destroy(a68, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a68 -= 2;
  }
  if (a69)
  {
    if (*(_DWORD *)a69 == 2)
      WTF::StringImpl::destroy(a69, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a69 -= 2;
  }
  if (a70)
  {
    if (*(_DWORD *)a70 == 2)
      WTF::StringImpl::destroy(a70, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a70 -= 2;
  }
  if (a71)
  {
    if (*(_DWORD *)a71 == 2)
      WTF::StringImpl::destroy(a71, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)a71 -= 2;
  }
  _Unwind_Resume(a1);
}

unint64_t WTF::makeVector<WebCore::ApplicationManifest::Icon>(uint64_t a1, void *a2)
{
  unint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  WTF::StringImpl *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25[5];
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  WTF::StringImpl *v36[5];
  _BYTE v37[16];
  WTF::StringImpl *v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = objc_msgSend(a2, "count");
  if (result)
  {
    if (result >= 0x38E38E4)
    {
      __break(0xC471u);
      return result;
    }
    v4 = 72 * result;
    v5 = WTF::fastMalloc((WTF *)(72 * result));
    *(_DWORD *)(a1 + 8) = v4 / 0x48;
    *(_QWORD *)a1 = v5;
  }
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v32, v44, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v33 != v7)
          objc_enumerationMutation(a2);
        v9 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        objc_opt_class();
        if (((v9 != 0) & objc_opt_isKindOfClass()) != 0)
        {
          MEMORY[0x19AEABB18](v36, objc_msgSend(v9, "src"));
          WTF::makeVector<WTF::String>((void *)objc_msgSend(v9, "sizes"), (uint64_t)v37);
          MEMORY[0x19AEABCC8](&v38, objc_msgSend(v9, "type"));
          v11 = (void *)objc_msgSend(v9, "purposes");
          v40 = 0u;
          v41 = 0u;
          v42 = 0u;
          v43 = 0u;
          v12 = 0;
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
          if (v13)
          {
            v14 = *(_QWORD *)v41;
            do
            {
              for (j = 0; j != v13; ++j)
              {
                if (*(_QWORD *)v41 != v14)
                  objc_enumerationMutation(v11);
                v12 |= objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * j), "integerValue");
              }
              v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
            }
            while (v13);
          }
          v39 = v12;
          std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplicationManifest::Icon>((uint64_t)v25, (uint64_t)v36);
          v17 = v38;
          v38 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v16);
            else
              *(_DWORD *)v17 -= 2;
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v16);
          v18 = v36[0];
          v36[0] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v10);
            else
              *(_DWORD *)v18 -= 2;
          }
          if (v31)
          {
            v19 = *(_DWORD *)(a1 + 12);
            if (v19 == *(_DWORD *)(a1 + 8))
            {
              WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Icon>(a1, (unint64_t)v25);
            }
            else
            {
              v20 = *(_QWORD *)a1;
              WTF::URL::URL(*(_QWORD *)a1 + 72 * v19, v25);
              v21 = v20 + 72 * v19;
              *(_QWORD *)(v21 + 40) = 0;
              *(_QWORD *)(v21 + 48) = 0;
              v22 = v26;
              v26 = 0;
              *(_QWORD *)(v21 + 40) = v22;
              LODWORD(v22) = v27;
              v27 = 0;
              *(_DWORD *)(v21 + 48) = v22;
              LODWORD(v22) = v28;
              v28 = 0;
              *(_DWORD *)(v21 + 52) = v22;
              v23 = v29;
              v29 = 0;
              *(_QWORD *)(v21 + 56) = v23;
              *(_BYTE *)(v21 + 64) = v30;
              ++*(_DWORD *)(a1 + 12);
            }
          }
        }
        else
        {
          LOBYTE(v25[0]) = 0;
          v31 = 0;
        }
        std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v10);
      }
      v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v32, v44, 16);
    }
    while (v6);
  }
  return (unint64_t)WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a1, *(unsigned int *)(a1 + 12));
}

void sub_1971117B0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,WTF::StringImpl *a39)
{
  uint64_t v39;

  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v39, a2);
  _Unwind_Resume(a1);
}

void sub_197111BB4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20)
{
  if (a14)
    CFRelease(a14[1]);
  WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&a20, a2);
  _Unwind_Resume(a1);
}

void sub_197111D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_197111D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_197111E90(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197111F44(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197112004(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1971123FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197112498(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19711251C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1971125A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_197112898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_197112948(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1971129F4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197112ADC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197112C68(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_197112CE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_197112D68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19711301C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int8x16_t *v10;
  int v11;
  uint64_t v12;
  int8x16_t *v13;
  int v14;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v13 = *(int8x16_t **)a2;
  if (v6 >> 31)
    goto LABEL_8;
  v14 = v6;
  v12 = *a3;
  v7 = *(_QWORD *)(a4 + 8);
  v5 = v7 != 0;
  v8 = v7 - 1;
  if (!v5)
    v8 = 0;
  v10 = *(int8x16_t **)a4;
  if (v8 >> 31)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1971131F8);
  }
  v11 = v8;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, &v13, &v12, &v10);
}

WTF::StringBuilder *WTF::StringBuilder::toString@<X0>(WTF::StringBuilder *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  WTF::StringBuilder *v4;

  v3 = *(_DWORD **)this;
  if (*(_QWORD *)this
    || (v4 = this,
        WTF::StringBuilder::shrinkToFit(this),
        this = (WTF::StringBuilder *)WTF::StringBuilder::reifyString(v4),
        (v3 = *(_DWORD **)v4) != 0))
  {
    *v3 += 2;
  }
  *a2 = v3;
  return this;
}

double WebKit::OperatingDate::secondsSinceEpoch(WebKit::OperatingDate *this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  _BOOL4 v7;
  double v8;
  _BOOL4 v9;

  v1 = *((_DWORD *)this + 1);
  v2 = v1 / 12 + *(_DWORD *)this;
  v3 = v1 % 12;
  v4 = v2 + (v3 >> 31);
  HIDWORD(v6) = -1030792151 * v4 + 85899344;
  LODWORD(v6) = HIDWORD(v6);
  v5 = v6 >> 4;
  LODWORD(v6) = HIDWORD(v6);
  v7 = (v6 >> 2) > 0x28F5C28;
  if (v5 < 0xA3D70B)
    v7 = 1;
  v8 = (double)v4;
  v9 = (v4 & 3) == 0 && v7;
  return (floor(floor((v8 + -1.0) / 400.0)+ -4.0+ floor((v8 + -1.0) * 0.25)+ -492.0+ (v8 + -1970.0) * 365.0- (floor((v8 + -1.0) / 100.0)+ -19.0))+ (double)(*((_DWORD *)this + 2)+ *(_DWORD *)(MEMORY[0x1E0CBF748] + 48 * v9 + 4 * (v3 + (v3 < 0 ? 0xC : 0)))- 1))* 86400.0;
}

size_t WTF::StringLiterals::operator"" _str@<X0>(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  size_t result;
  uint64_t v4;
  uint64_t v5;

  result = strlen(a1);
  if (result == -1)
  {
    *a2 = 0;
  }
  else
  {
    if (result)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v5;
    }
    else
    {
      v4 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    *a2 = v4;
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::ResourceLoadStatisticsStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ResourceLoadStatisticsStore>(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;

  if (++dword_1ECE72970 > dword_1ECE72974)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit27ResourceLoadStatisticsStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(a1, a2);
    dword_1ECE72970 = 0;
    v4 = qword_1ECE72968;
    if (qword_1ECE72968)
    {
      v4 = *(_DWORD *)(qword_1ECE72968 - 12);
      if (v4 > 0x7FFFFFFE)
        v4 = 0x7FFFFFFF;
    }
    dword_1ECE72974 = 2 * v4;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 24, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 12);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  v14 = (WTF *)v5;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&qword_1ECE72968, &v14, a1);
  result = (unsigned int *)v14;
  v14 = 0;
  if (result)
  {
    do
    {
      v12 = __ldaxr(result);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, result));
    if (!v13)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  if (v5)
  {
    do
    {
      v10 = __ldaxr(v5);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v5));
    if (!v11)
    {
      atomic_store(1u, v5);
      return (unsigned int *)WTF::fastFree((WTF *)v5, v8);
    }
  }
  return result;
}

void WebKit::ResourceLoadStatisticsStore::~ResourceLoadStatisticsStore(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::WorkQueue *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v2 = (*(uint64_t (**)(WebKit::ResourceLoadStatisticsStore *))(*(_QWORD *)this + 16))(this);
  if (*((_QWORD *)this + 3))
    v2 = WebCore::SQLiteDatabase::close((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
  if (byte_1ECE7295A == 1)
  {
    v5 = dword_1ECE72970;
    v4 = dword_1ECE72974;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    *(_QWORD *)&dword_1ECE72970 = 0;
    qword_1ECE72968 = 0;
    byte_1ECE7295A = 1;
  }
  dword_1ECE72970 = v5 + 1;
  if (v5 + 1 > v4)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit27ResourceLoadStatisticsStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(v2, v3);
    dword_1ECE72970 = 0;
    v6 = qword_1ECE72968;
    if (qword_1ECE72968)
    {
      v6 = *(_DWORD *)(qword_1ECE72968 - 12);
      if (v6 > 0x7FFFFFFE)
        v6 = 0x7FFFFFFF;
    }
    dword_1ECE72974 = 2 * v6;
  }
  v7 = *((_QWORD *)this + 12);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    v21 = *((_QWORD *)this + 12);
    v8 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1ECE72968, &v21);
    v3 = v8;
    if (qword_1ECE72968)
    {
      v9 = qword_1ECE72968 + 8 * *(unsigned int *)(qword_1ECE72968 - 4);
      if ((unsigned int **)v9 == v8)
        goto LABEL_19;
    }
    else
    {
      if (!v8)
        goto LABEL_19;
      v9 = 0;
    }
    if ((unsigned int **)v9 != v8)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&qword_1ECE72968, v8);
  }
LABEL_19:
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 624, v3);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 77, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 76, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 75, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 74, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 73, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 72, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 71, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 70, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 69, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 68, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 67, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 66, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 65, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 64, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 63, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 62, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 61, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 60, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 59, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 58, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 57, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 56, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 55, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 54, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 53, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 52, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 51, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 50, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 49, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 48, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 47, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 46, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 45, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 44, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 43, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 42, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 41, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 40, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100]((WebCore::SQLiteStatement **)this + 39, 0);
  v11 = (WTF::StringImpl **)*((_QWORD *)this + 38);
  if (v11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v10);
  v12 = (WTF::StringImpl **)*((_QWORD *)this + 37);
  if (v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v10);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v10);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v10);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::WorkQueue *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v16)
    WTF::WorkQueue::deref(v16);
  v17 = *((_QWORD *)this + 12);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (unsigned int *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 12) = 0;
  }
  WebKit::DatabaseUtilities::~DatabaseUtilities(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::ResourceLoadStatisticsStore::~ResourceLoadStatisticsStore(this);
  WTF::fastFree(v1, v2);
}

WTF::StringImpl *WebKit::domainsToString(WebKit *this, uint64_t **a2)
{
  uint64_t v4;
  int64x2_t v5;
  uint64_t *v6;
  int64x2_t v7;
  uint64_t v8;
  int32x2_t v9;
  int64x2_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t *v13;
  int64x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int64x2_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  int64x2_t v21;
  uint64_t v22;
  int32x2_t v23;
  int64x2_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  const char *v34;
  uint64_t v35;
  int8x16_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  char v40;

  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 1;
  v4 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v4)
  {
    v5 = vdupq_n_s64(3uLL);
    v6 = *a2;
    v5.i64[0] = (uint64_t)", ";
    v31 = (int8x16_t)v5;
    v7 = vdupq_n_s64(1uLL);
    v8 = 8 * v4;
    v7.i64[0] = (uint64_t)"";
    v28 = (int8x16_t)v7;
    do
    {
      v9 = vdup_n_s32(v39 == 0);
      v10.i64[0] = v9.u32[0];
      v10.i64[1] = v9.u32[1];
      v36 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v10, 0x3FuLL)), v28, v31);
      v34 = "(all data)";
      v35 = 11;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v37, (uint64_t)&v36, v6++, (uint64_t)&v34);
      v8 -= 8;
    }
    while (v8);
  }
  v11 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v11)
  {
    v12 = vdupq_n_s64(3uLL);
    v13 = a2[2];
    v12.i64[0] = (uint64_t)", ";
    v32 = (int8x16_t)v12;
    v14 = vdupq_n_s64(1uLL);
    v15 = 8 * v11;
    v14.i64[0] = (uint64_t)"";
    v29 = (int8x16_t)v14;
    do
    {
      v16 = vdup_n_s32(v39 == 0);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      v36 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v17, 0x3FuLL)), v29, v32);
      v34 = "(all but HttpOnly cookies)";
      v35 = 27;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v37, (uint64_t)&v36, v13++, (uint64_t)&v34);
      v15 -= 8;
    }
    while (v15);
  }
  v18 = *((unsigned int *)a2 + 11);
  if ((_DWORD)v18)
  {
    v19 = vdupq_n_s64(3uLL);
    v20 = a2[4];
    v19.i64[0] = (uint64_t)", ";
    v33 = (int8x16_t)v19;
    v21 = vdupq_n_s64(1uLL);
    v22 = 8 * v18;
    v21.i64[0] = (uint64_t)"";
    v30 = (int8x16_t)v21;
    do
    {
      v23 = vdup_n_s32(v39 == 0);
      v24.i64[0] = v23.u32[0];
      v24.i64[1] = v23.u32[1];
      v36 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v24, 0x3FuLL)), v30, v33);
      v34 = "(all but cookies)";
      v35 = 18;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v37, (uint64_t)&v36, v20++, (uint64_t)&v34);
      v22 -= 8;
    }
    while (v22);
  }
  v25 = v37;
  if (v37
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v37),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v37),
        (v25 = v37) != 0))
  {
    *(_DWORD *)v25 += 2;
  }
  *(_QWORD *)this = v25;
  v26 = v38;
  v38 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(uint64_t a1, char a2, char a3, uint64_t a4)
{
  WTF::RunLoop *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  __int16 v16;
  WTF::StringImpl *v17[2];
  uint64_t v18;

  v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  result = WTF::RunLoop::isCurrent(v8);
  if ((result & 1) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        return (uint64_t)WebKit::NetworkProcess::broadcastConsoleMessage(*(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 24), a2, a3, a4);
    }
  }
  else
  {
    WTF::RunLoop::main((WTF::RunLoop *)result);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 96), a1);
    v12 = *(unsigned int **)(a1 + 96);
    if (v12)
    {
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    v15 = (WTF *)v12;
    LOBYTE(v16) = a2;
    HIBYTE(v16) = a3;
    WTF::String::isolatedCopy();
    v17[1] = (WTF::StringImpl *)a1;
    v14 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v14 = &off_1E34C10B0;
    *(_QWORD *)(v14 + 8) = v15;
    *(_WORD *)(v14 + 16) = v16;
    *(_OWORD *)(v14 + 24) = *(_OWORD *)v17;
    v18 = v14;
    WTF::RunLoop::dispatch();
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    return 0;
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = WTF::fastMalloc((WTF *)0x70);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = off_1E34C0D40;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(v4 + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(v4 + 40) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(v4 + 44) = v7;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v8 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(v4 + 48) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(v4 + 56) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(v4 + 60) = v8;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  v9 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(v4 + 64) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_DWORD *)(v4 + 72) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = 0;
  *(_DWORD *)(v4 + 76) = v9;
  v10 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(v4 + 80) = v10;
  v11 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(v4 + 88) = v11;
  *(_BYTE *)(v4 + 96) = *((_BYTE *)a2 + 88);
  v12 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(v4 + 104) = v12;
  *a1 = v4;
  return a1;
}

uint64_t WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  WTF::WorkQueue *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 **v11;

  v3 = *(WTF::WorkQueue **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    WTF::WorkQueue::deref(v3);
  v4 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, v8);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, v9);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v10);
  v11 = *(unsigned __int8 ***)a1;
  *(_QWORD *)a1 = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v11);
  return a1;
}

uint64_t WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(uint64_t a1, uint64_t *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  WTF::WorkQueue *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 96), a1);
  v4 = *(unsigned int **)(a1 + 96);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(_BYTE *)(a1 + 224);
  v8 = *(WTF::WorkQueue **)(a1 + 112);
  WTF::WorkQueue::ref(v8);
  v9 = *(unsigned __int8 ***)(a1 + 104);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v9);
  v10 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v10 = &off_1E34C0E08;
  *(_QWORD *)(v10 + 8) = v4;
  *(_QWORD *)(v10 + 16) = v6;
  *(_BYTE *)(v10 + 24) = v7;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = v9;
  v12 = v10;
  WTF::RunLoop::dispatch();
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned __int8 **v4;

  v3 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned __int8 ***)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return a1;
}

uint64_t WebKit::ResourceLoadStatisticsStore::debugLogDomainsInBatches(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _DWORD **v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD **v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t i;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  NSObject *v40;
  char *v41;
  WTF *v42;
  void *v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  NSObject *v49;
  _BOOL4 v50;
  WTF::StringImpl *v51;
  char *v52;
  void *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF *v57;
  _DWORD *v58;
  unsigned int v59;
  NSObject *v60;
  char *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v66;
  WTF *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t *v71;
  uint64_t v72;
  _BYTE buf[12];
  __int16 v74;
  _BYTE v75[10];
  __int16 v76;
  char *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v71 = 0;
  v72 = 0;
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(_DWORD ***)a2;
    if (v4 <= 0x10)
      v6 = 16;
    else
      v6 = *(unsigned int *)(a2 + 12);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v71, v6);
    if (v4 < HIDWORD(v72))
    {
      __break(0xC471u);
      JUMPOUT(0x19711473CLL);
    }
    v7 = v71;
    v8 = HIDWORD(v72);
    v9 = 8 * v4;
    do
    {
      v10 = *v5;
      if (*v5)
        *v10 += 2;
      v7[v8] = (uint64_t)v10;
      ++v5;
      ++v8;
      v9 -= 8;
    }
    while (v9);
    HIDWORD(v72) = v4;
  }
  else
  {
    v7 = 0;
  }
  v11 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v11)
  {
    v12 = *(_DWORD ***)(a2 + 16);
    v13 = v11 + v4;
    if (v11 + v4 > v72)
    {
      v14 = v72 + ((unint64_t)v72 >> 2);
      if (v14 >= 0x10)
        v15 = v14 + 1;
      else
        v15 = 16;
      if (v15 <= v13)
        v16 = v11 + v4;
      else
        v16 = v15;
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v71, v16);
      v4 = HIDWORD(v72);
      if (v13 < HIDWORD(v72))
      {
        __break(0xC471u);
LABEL_117:
        JUMPOUT(0x197114734);
      }
      v7 = v71;
    }
    v17 = v4;
    v18 = 8 * v11;
    do
    {
      v19 = *v12;
      if (*v12)
        *v19 += 2;
      v7[v17] = (uint64_t)v19;
      ++v12;
      ++v17;
      v18 -= 8;
    }
    while (v18);
    HIDWORD(v72) = v13;
    LODWORD(v4) = v13;
  }
  if (!(_DWORD)v4)
    return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v7);
  WebKit::domainsToString(&v70, v7, v4);
  v20 = v70;
  if (v70)
  {
    v21 = *((_DWORD *)v70 + 1);
    if (v21 < 0)
      goto LABEL_114;
  }
  else
  {
    v21 = 0;
  }
  v22 = __OFADD__(v21, 2);
  v23 = v21 + 2;
  if (v22)
    goto LABEL_114;
  v22 = __OFADD__(v23, 6);
  v24 = v23 + 6;
  if (v22)
    goto LABEL_114;
  v22 = __OFADD__(v24, 41);
  v25 = v24 + 41;
  if (v22)
    goto LABEL_114;
  v26 = (v25 + 6);
  if (__OFADD__(v25, 6))
    goto LABEL_114;
  if (!v70 || (*((_BYTE *)v70 + 16) & 4) != 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(v26 + 20));
    v27 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      *(_OWORD *)(*(_QWORD *)buf + 26) = *(_OWORD *)"Applying cross-site tracking restrictions";
      *(_DWORD *)v27 = 2;
      *(_DWORD *)(v27 + 4) = v26;
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_QWORD *)(v27 + 16) = 0x5054495B00000004;
      *(_WORD *)(v27 + 24) = 8285;
      qmemcpy((void *)(v27 + 42), "ite tracking restrictions to: [", 31);
      *(_QWORD *)buf = v20;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)buf, (char *)(v27 + 73));
      v36 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
        v36 = *(unsigned int *)(*(_QWORD *)buf + 4);
      *(_WORD *)(v27 + 73 + v36) = 11869;
      goto LABEL_51;
    }
    goto LABEL_114;
  }
  if (v26 > 0x7FFFFFEF
    || (WTF::tryFastCompactMalloc((WTF *)(2 * (v25 + 6) + 20)), (v27 = *(_QWORD *)buf) == 0))
  {
LABEL_114:
    __break(0xC471u);
    goto LABEL_117;
  }
  **(_DWORD **)buf = 2;
  *(_DWORD *)(v27 + 4) = v26;
  *(_QWORD *)(v27 + 8) = v27 + 20;
  *(_DWORD *)(v27 + 16) = 0;
  v28 = "[ITP] ";
  for (i = 20; i != 32; i += 2)
  {
    v30 = *(unsigned __int8 *)v28++;
    *(_WORD *)(v27 + i) = v30;
  }
  v31 = "Applying cross-site tracking restrictions";
  do
  {
    v32 = *(unsigned __int8 *)v31++;
    *(_WORD *)(v27 + i) = v32;
    i += 2;
  }
  while (i != 114);
  v33 = " to: [";
  do
  {
    v34 = *(unsigned __int8 *)v33++;
    *(_WORD *)(v27 + i) = v34;
    i += 2;
  }
  while (i != 126);
  *(_QWORD *)buf = v20;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)buf, (char *)(v27 + 126));
  v35 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
    v35 = *(unsigned int *)(*(_QWORD *)buf + 4);
  *(_DWORD *)(v27 + 126 + 2 * v35) = 3014749;
LABEL_51:
  *(_QWORD *)buf = v27;
  WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(a1, 13, 4, (uint64_t)buf);
  v38 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v37);
    else
      *(_DWORD *)v38 -= 2;
  }
  v70 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v37);
    else
      *(_DWORD *)v20 -= 2;
  }
  v39 = HIDWORD(v72);
  if (HIDWORD(v72) > 0x32)
  {
    v68 = 50;
    v67 = (WTF *)WTF::fastMalloc((WTF *)0x190);
    v44 = vcvtps_u32_f32((float)HIDWORD(v72) / 50.0);
    if (HIDWORD(v72))
    {
      v45 = v71;
      v46 = 8 * HIDWORD(v72);
      v47 = 1;
      do
      {
        v48 = HIDWORD(v68);
        if (HIDWORD(v68) == 50)
        {
          v49 = qword_1ECE71140;
          v50 = os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO);
          v51 = v67;
          if (v50)
          {
            WebKit::domainsToString(&v66, (uint64_t *)v67, 0x32u);
            WTF::String::utf8();
            if (v69)
              v52 = (char *)v69 + 16;
            else
              v52 = 0;
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "Applying cross-site tracking restrictions";
            v74 = 1024;
            *(_DWORD *)v75 = v47;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v44;
            v76 = 2082;
            v77 = v52;
            _os_log_impl(&dword_196BCC000, v49, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: %{public}s to (%d of %u): %{public}s.", buf, 0x22u);
            v54 = v69;
            v69 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 1)
                WTF::fastFree(v54, v53);
              else
                --*(_DWORD *)v54;
            }
            v56 = v66;
            v66 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v53);
              else
                *(_DWORD *)v56 -= 2;
            }
            v55 = HIDWORD(v68);
            v51 = v67;
          }
          else
          {
            v55 = 50;
          }
          WTF::VectorDestructor<true,WTF::String>::destruct(v51, (WTF::StringImpl *)((char *)v51 + 8 * v55));
          v48 = 0;
          HIDWORD(v68) = 0;
          ++v47;
        }
        if (v48 == (_DWORD)v68)
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v67, (unint64_t)v45);
        }
        else
        {
          v57 = v67;
          v58 = (_DWORD *)*v45;
          if (*v45)
            *v58 += 2;
          *((_QWORD *)v57 + v48) = v58;
          HIDWORD(v68) = v48 + 1;
        }
        ++v45;
        v46 -= 8;
      }
      while (v46);
    }
    else
    {
      v47 = 1;
    }
    v59 = HIDWORD(v68);
    if (HIDWORD(v68))
    {
      v60 = qword_1ECE71140;
      if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
      {
        WebKit::domainsToString(&v66, (uint64_t *)v67, v59);
        WTF::String::utf8();
        if (v69)
          v61 = (char *)v69 + 16;
        else
          v61 = 0;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "Applying cross-site tracking restrictions";
        v74 = 1024;
        *(_DWORD *)v75 = v47;
        *(_WORD *)&v75[4] = 1024;
        *(_DWORD *)&v75[6] = v44;
        v76 = 2082;
        v77 = v61;
        _os_log_impl(&dword_196BCC000, v60, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: %{public}s to (%d of %u): %{public}s.", buf, 0x22u);
        v62 = v69;
        v69 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 1)
            WTF::fastFree(v62, v43);
          else
            --*(_DWORD *)v62;
        }
        v64 = v66;
        v66 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v43);
          else
            *(_DWORD *)v64 -= 2;
        }
      }
    }
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v43);
  }
  else
  {
    v40 = qword_1ECE71140;
    if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
    {
      WebKit::domainsToString(&v69, v71, v39);
      WTF::String::utf8();
      if (v67)
        v41 = (char *)v67 + 16;
      else
        v41 = 0;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "Applying cross-site tracking restrictions";
      v74 = 2082;
      *(_QWORD *)v75 = v41;
      _os_log_impl(&dword_196BCC000, v40, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: %{public}s to: %{public}s.", buf, 0x16u);
      v42 = v67;
      v67 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
          WTF::fastFree(v42, v7);
        else
          --*(_DWORD *)v42;
      }
      v63 = v69;
      v69 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v63 -= 2;
      }
    }
  }
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v7);
}

WTF::StringImpl *WebKit::domainsToString(WTF::StringImpl **a1, uint64_t *a2, unsigned int a3)
{
  int64x2_t v5;
  uint64_t v6;
  int64x2_t v7;
  int32x2_t v8;
  int64x2_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  if (a3)
  {
    v5 = vdupq_n_s64(3uLL);
    v6 = 8 * a3;
    v5.i64[0] = (uint64_t)", ";
    v14 = (int8x16_t)v5;
    v7 = vdupq_n_s64(1uLL);
    v7.i64[0] = (uint64_t)"";
    v13 = (int8x16_t)v7;
    do
    {
      v8 = vdup_n_s32(v18 == 0);
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      v15 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v9, 0x3FuLL)), v13, v14);
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>((WTF::StringBuilder *)&v16, (uint64_t)&v15, a2++);
      v6 -= 8;
    }
    while (v6);
    result = v16;
    if (v16)
      goto LABEL_6;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16);
  result = v16;
  if (v16)
LABEL_6:
    *(_DWORD *)result += 2;
  *a1 = result;
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      result = v16;
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::shouldExemptFromWebsiteDataDeletion(WebKit::ResourceLoadStatisticsStore *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v7;

  if (!*a2 || !*((_DWORD *)*a2 + 1) || (MEMORY[0x19AEABBCC]() & 1) != 0)
    return 0;
  WebKit::ResourceLoadStatisticsStore::domainsExemptFromWebsiteDataDeletion((WebKit::ResourceLoadStatisticsStore *)&v7, (uint64_t)this);
  v4 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)&v7, a2);
  if (v7)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v5);
  return v4;
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainsExemptFromWebsiteDataDeletion(WebKit::ResourceLoadStatisticsStore *this, uint64_t a2)
{
  uint64_t v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::ASCIICaseInsensitiveHash **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t result;
  _BYTE v14[24];
  _QWORD v15[2];

  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)this, (uint64_t *)(a2 + 296));
  v6 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a2 + 304), v4, v5);
  v8 = (WTF::ASCIICaseInsensitiveHash **)v6;
  v9 = *(_QWORD *)(a2 + 304);
  if (v9)
    v10 = v9 + 8 * *(unsigned int *)(v9 - 4);
  else
    v10 = 0;
  v15[0] = v6;
  for (v15[1] = v7; v15[0] != v10; v8 = (WTF::ASCIICaseInsensitiveHash **)v15[0])
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)this, v8, (uint64_t)v14);
    v15[0] += 8;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v15, v11, v12);
  }
  result = *(_QWORD *)(a2 + 288);
  if (result && *(_DWORD *)(result + 4))
  {
    result = MEMORY[0x19AEABBCC]();
    if ((result & 1) == 0)
      return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)this, (WTF::ASCIICaseInsensitiveHash **)(a2 + 288), (uint64_t)v14);
  }
  return result;
}

void WebKit::ResourceLoadStatisticsStore::deleteTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  const char *v8;
  uint64_t i;
  __int16 v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  int Error;
  uint64_t ErrorMsg;
  _BYTE v16[16];
  unsigned int v17;
  _BYTE buf[22];
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x80000000) != 0)
    goto LABEL_21;
  v4 = (a3 + 11);
  if (__OFADD__((_DWORD)a3, 11))
    goto LABEL_21;
  if ((a3 & 0xFF00000000) != 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(v4 + 20));
    v7 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      **(_DWORD **)buf = 2;
      *(_DWORD *)(v7 + 4) = v4;
      *(_QWORD *)(v7 + 20) = *(_QWORD *)"DROP TABLE ";
      *(_QWORD *)(v7 + 8) = v7 + 20;
      *(_DWORD *)(v7 + 16) = 4;
      *(_DWORD *)(v7 + 27) = 541412418;
      *(_QWORD *)buf = a2;
      *(_QWORD *)&buf[8] = a3;
      WTF::StringView::getCharacters<unsigned char>(buf, (char *)(v7 + 31));
      goto LABEL_11;
    }
LABEL_21:
    __break(0xC471u);
    return;
  }
  if (v4 > 0x7FFFFFEF)
    goto LABEL_21;
  WTF::tryFastCompactMalloc((WTF *)(2 * v4 + 20));
  v7 = *(_QWORD *)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_21;
  **(_DWORD **)buf = 2;
  *(_DWORD *)(v7 + 4) = v4;
  *(_QWORD *)(v7 + 8) = v7 + 20;
  *(_DWORD *)(v7 + 16) = 0;
  v8 = "DROP TABLE ";
  for (i = 20; i != 42; i += 2)
  {
    v10 = *(unsigned __int8 *)v8++;
    *(_WORD *)(v7 + i) = v10;
  }
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = a3;
  WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(buf, (char *)(v7 + 42));
LABEL_11:
  WebCore::SQLiteDatabase::prepareStatementSlow();
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v11);
  else
    *(_DWORD *)v7 -= 2;
  if (v17 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v16) != 101)
  {
    v12 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1 + 648);
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v13;
      v19 = 1024;
      v20 = Error;
      v21 = 2081;
      v22 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::deleteTable: failed to step statement", buf, 0x26u);
    }
  }
  if (v17 != -1)
    (*(&off_1E34C0CF8 + v17))((int)buf, (WebCore::SQLiteStatement *)v16);
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x30);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = off_1E34C10D8;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(v4 + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(v4 + 40) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(v4 + 44) = v7;
  *a1 = v4;
  return a1;
}

unsigned __int8 ***WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0::~$_0(unsigned __int8 ***a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned __int8 **v4;

  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), v3);
  v4 = *a1;
  *a1 = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return a1;
}

WebCore::SQLiteStatement *WebKit::ResourceLoadStatisticsStore::destroyStatements(WebCore::SQLiteStatement **this)
{
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 39, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 40, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 41, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 44, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 45, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 46, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 48, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 49, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 47, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 50, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 51, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 52, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 57, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 53, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 54, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 55, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 56, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 58, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 60, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 42, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 43, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 61, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 62, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 63, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 64, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 65, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 66, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 67, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 68, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 69, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 70, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 71, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 72, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 73, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 74, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 75, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 76, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 77, 0);
  return std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 59, 0);
}

uint64_t WebKit::ResourceLoadStatisticsStore::insertObservedDomain(WebCore::SQLiteStatement **this, const WebCore::ResourceLoadStatistics *a2)
{
  WebCore::SQLiteStatement *v4;
  NSObject *v5;
  uint64_t v6;
  WebCore::SQLiteStatement *v7;
  NSObject *v8;
  WebCore::SQLiteStatement *v10;
  int Error;
  uint64_t ErrorMsg;
  const char *v13;
  WebCore::SQLiteStatement *v14;
  int v15;
  uint64_t v16;
  WebCore::SQLiteStatement *v17;
  uint8_t buf[4];
  WebCore::SQLiteStatement **v19;
  __int16 v20;
  WebCore::SQLiteStatement *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID(this, a2) >> 32))
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 40, (uint64_t)"insertObservedDomain", (WebCore::SQLiteStatementAutoResetScope *)&v17);
    if (!v17
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::bindDouble(v17, *((double *)a2 + 1))
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindDouble(v17, *((double *)a2 + 3))
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17)
      || WebCore::SQLiteStatement::bindInt(v17))
    {
      goto LABEL_20;
    }
    v4 = v17;
    if (!*((_BYTE *)a2 + 80))
      WebCore::SQLiteStatement::bindDouble(v17, 0.0);
    if (WebCore::SQLiteStatement::bindInt(v4))
    {
LABEL_20:
      v8 = qword_1ECE71758;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      v10 = this[81];
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218755;
      v19 = this;
      v20 = 2048;
      v21 = v10;
      v22 = 1024;
      v23 = Error;
      v24 = 2081;
      v25 = ErrorMsg;
      v13 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertObservedDomain: fa"
            "iled to bind parameters";
    }
    else
    {
      if (WebCore::SQLiteStatement::step(v17) == 101)
      {
        v6 = 1;
        goto LABEL_22;
      }
      v8 = qword_1ECE71758;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
LABEL_21:
        v6 = 0;
LABEL_22:
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v17);
        return v6;
      }
      v14 = this[81];
      v15 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
      v16 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218755;
      v19 = this;
      v20 = 2048;
      v21 = v14;
      v22 = 1024;
      v23 = v15;
      v24 = 2081;
      v25 = v16;
      v13 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertObservedDomain: fa"
            "iled to step statement";
    }
    _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, v13, buf, 0x26u);
    goto LABEL_21;
  }
  v5 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    v7 = this[81];
    *(_DWORD *)buf = 134218240;
    v19 = this;
    v20 = 2048;
    v21 = v7;
    _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::insertObservedDomain: failed to find domain", buf, 0x16u);
  }
  return 0;
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainID(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v8;
  WebCore::SQLiteStatement *v9;
  int v10;
  uint64_t v11;
  const char *v12;
  WebCore::SQLiteStatement *v13;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v16;
  uint8_t buf[4];
  WebCore::SQLiteStatement **v18;
  __int16 v19;
  WebCore::SQLiteStatement *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 41, (uint64_t)"domainID", (WebCore::SQLiteStatementAutoResetScope *)&v16);
  if (!v16 || WebCore::SQLiteStatement::bindText())
  {
    v3 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      goto LABEL_4;
    v13 = this[81];
    Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
    *(_DWORD *)buf = 134218755;
    v18 = this;
    v19 = 2048;
    v20 = v13;
    v21 = 1024;
    v22 = Error;
    v23 = 2081;
    v24 = ErrorMsg;
    v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::domainID: failed to bind parameter";
LABEL_11:
    _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, v12, buf, 0x26u);
    goto LABEL_4;
  }
  if (WebCore::SQLiteStatement::step(v16) == 100)
  {
    v8 = WebCore::SQLiteStatement::columnInt(v16);
    v6 = v8 & 0xFFFFFF00;
    v5 = v8;
    v4 = 0x100000000;
    goto LABEL_5;
  }
  v3 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    v9 = this[81];
    v10 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
    v11 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
    *(_DWORD *)buf = 134218755;
    v18 = this;
    v19 = 2048;
    v20 = v9;
    v21 = 1024;
    v22 = v10;
    v23 = 2081;
    v24 = v11;
    v12 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::domainID: failed to step statement";
    goto LABEL_11;
  }
LABEL_4:
  v4 = 0;
  v5 = 0;
  v6 = 0;
LABEL_5:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v16);
  return v4 | v6 | v5;
}

BOOL WebKit::ResourceLoadStatisticsStore::relationshipExists(uint64_t a1, WebCore::SQLiteStatement **a2, uint64_t a3)
{
  _BOOL8 result;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int Error;
  __int16 v14;
  uint64_t ErrorMsg;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0xFF00000000) == 0)
    return 0;
  if (*a2
    && !WebCore::SQLiteStatement::bindInt(*a2)
    && !WebCore::SQLiteStatement::bindText()
    && WebCore::SQLiteStatement::step(*a2) == 100)
  {
    return WebCore::SQLiteStatement::columnInt(*a2) != 0;
  }
  v6 = qword_1ECE71758;
  result = os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v7 = *(_QWORD *)(a1 + 648);
    v8 = 134218755;
    v9 = a1;
    v10 = 2048;
    v11 = v7;
    v12 = 1024;
    Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
    v14 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::relationshipExists: failed to step statement", (uint8_t *)&v8, 0x26u);
    return 0;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(uint64_t a1, const WebCore::RegistrableDomain *a2, uint64_t a3)
{
  NSObject *v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned int v9;
  int v11;
  _DWORD *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  int Error;
  uint64_t ErrorMsg;
  uint64_t v19;
  WebKit::ResourceLoadStatisticsStore *v20;
  const WebCore::ResourceLoadStatistics *v21;
  _BYTE v22[12];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  _BYTE buf[22];
  __int16 v28;
  _BYTE v29[14];
  __int16 v30;
  __int128 v31;
  _BYTE v32[25];
  __int128 v33;
  _BYTE v34[26];
  __int128 v35;
  _BYTE v36[29];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 328), (uint64_t)"ensureResourceStatisticsForRegistrableDomain", (WebCore::SQLiteStatementAutoResetScope *)v22);
  if (!*(_QWORD *)v22 || WebCore::SQLiteStatement::bindText())
  {
    v6 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 648);
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134219011;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v16;
      v28 = 1024;
      *(_DWORD *)v29 = Error;
      *(_WORD *)&v29[4] = 2081;
      *(_QWORD *)&v29[6] = ErrorMsg;
      v30 = 2082;
      *(_QWORD *)&v31 = a3;
      _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain: reason %{public}s, failed to bind parameter", buf, 0x30u);
    }
    v7 = 0;
    v8 = 0;
    goto LABEL_6;
  }
  if (WebCore::SQLiteStatement::step(*(WebCore::SQLiteStatement **)v22) == 100)
  {
    v11 = WebCore::SQLiteStatement::columnInt(*(WebCore::SQLiteStatement **)v22);
    v7 = v11;
    v8 = v11 & 0xFFFFFF00;
LABEL_6:
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v22);
    v9 = 0;
    return v9 | ((unint64_t)(v8 & 0xFFFFFF00 | v7) << 32);
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v22);
  v12 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v12 += 2;
  *(_QWORD *)buf = v12;
  *(_QWORD *)&buf[8] = 0;
  buf[16] = 0;
  *(_QWORD *)v29 = 0xBFF0000000000000;
  v29[8] = 0;
  v31 = 0u;
  memset(v32, 0, sizeof(v32));
  v33 = 0u;
  memset(v34, 0, sizeof(v34));
  v35 = 0u;
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v38 = 0;
  if ((WebKit::ResourceLoadStatisticsStore::insertObservedDomain((WebCore::SQLiteStatement **)a1, (const WebCore::ResourceLoadStatistics *)buf) & 1) == 0)
  {
    v15 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(a1 + 648);
      *(_DWORD *)v22 = 134218498;
      *(_QWORD *)&v22[4] = a1;
      v23 = 2048;
      v24 = v19;
      v25 = 2082;
      v26 = a3;
      _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain: reason %{public}s, failed to insert observed domain", v22, 0x20u);
    }
    v9 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_18;
  }
  v13 = WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a1, a2);
  if (HIDWORD(v13))
  {
    v7 = v13;
    v8 = v13 & 0xFFFFFF00;
    v9 = 1;
LABEL_18:
    WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)buf, v14);
    return v9 | ((unint64_t)(v8 & 0xFFFFFF00 | v7) << 32);
  }
  v20 = (WebKit::ResourceLoadStatisticsStore *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebKit::ResourceLoadStatisticsStore::insertDomainRelationships(v20, v21);
}

void WebKit::ResourceLoadStatisticsStore::insertDomainRelationships(WebKit::ResourceLoadStatisticsStore *this, const WebCore::ResourceLoadStatistics *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)&v26);
  if ((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)this, a2) >> 32)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 5);
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v5);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 6);
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v7);
      else
        *(_DWORD *)v6 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 7);
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v9);
      else
        *(_DWORD *)v8 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 8);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v11);
      else
        *(_DWORD *)v10 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 12);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 13);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 14);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 15);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 9);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = (WTF::StringImpl *)v28;
    v25 = v28;
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)this, &v25, (uint64_t *)a2 + 11);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v23);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  v24 = v26;
  if (v27)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
  }
  else if (!v26)
  {
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
}

void WebKit::ResourceLoadStatisticsStore::setUserInteraction(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 376), (uint64_t)"setUserInteraction", (WebCore::SQLiteStatementAutoResetScope *)&v8);
  if (!v8
    || WebCore::SQLiteStatement::bindInt(v8)
    || WebCore::SQLiteStatement::bindDouble(v8, a2)
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(v8) != 101)
  {
    v4 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 648);
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218755;
      v10 = a1;
      v11 = 2048;
      v12 = v5;
      v13 = 1024;
      v14 = Error;
      v15 = 2081;
      v16 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setUserInteraction: failed to step statement", buf, 0x26u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v8);
}

void WebKit::ResourceLoadStatisticsStore::setGrandfathered(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  char v4;
  NSObject *v5;
  uint64_t v6;
  WebCore::SQLiteStatement *v7;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v10;
  uint64_t v11;
  char v12;
  uint8_t buf[4];
  WebCore::SQLiteStatement **v14;
  __int16 v15;
  WebCore::SQLiteStatement *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)&v11);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)this, a2, (uint64_t)"setGrandfathered");
  if (v4)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 56, (uint64_t)"setGrandfathered", (WebCore::SQLiteStatementAutoResetScope *)&v10);
    if (!v10
      || WebCore::SQLiteStatement::bindInt(v10)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(v10) != 101)
    {
      v5 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v7 = this[81];
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
        *(_DWORD *)buf = 134218755;
        v14 = this;
        v15 = 2048;
        v16 = v7;
        v17 = 1024;
        v18 = Error;
        v19 = 2081;
        v20 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setGrandfathered: failed to step statement", buf, 0x26u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v10);
  }
  v6 = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  else if (!v11)
  {
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void WebKit::ResourceLoadStatisticsStore::setPrevalentResource(WebKit::ResourceLoadStatisticsStore *this, const WebCore::RegistrableDomain *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (*((_BYTE *)this + 226)
    || *((_BYTE *)this + 707)
    || (MEMORY[0x19AEABBCC](*(_QWORD *)a2, "localhost", 9) & 1) == 0)
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)&v6);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)this, a2, (uint64_t)"setPrevalentResource");
    if (v4)
      WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)this, a2, 2);
    v5 = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
    else if (!v6)
    {
      return;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

void WebKit::ResourceLoadStatisticsStore::setVeryPrevalentResource(WebKit::ResourceLoadStatisticsStore *this, const WebCore::RegistrableDomain *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (*((_BYTE *)this + 226)
    || *((_BYTE *)this + 707)
    || (MEMORY[0x19AEABBCC](*(_QWORD *)a2, "localhost", 9) & 1) == 0)
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)&v6);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)this, a2, (uint64_t)"setVeryPrevalentResource");
    if (v4)
      WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)this, a2, 4);
    v5 = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
    else if (!v6)
    {
      return;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

void WebKit::ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval(uint64_t a1, const WebCore::RegistrableDomain *a2)
{
  char v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v10;
  uint64_t v11;
  char v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)&v11);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(a1, a2, (uint64_t)"setIsScheduledForAllScriptWrittenStorageRemoval");
  if (v4)
  {
    WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 464), (uint64_t)"setIsScheduledForAllScriptWrittenStorageRemoval", (WebCore::SQLiteStatementAutoResetScope *)&v10);
    if (!v10
      || WebCore::SQLiteStatement::bindInt(v10)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(v10) != 101)
    {
      v5 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v7 = *(_QWORD *)(a1 + 648);
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
        *(_DWORD *)buf = 134218755;
        v14 = a1;
        v15 = 2048;
        v16 = v7;
        v17 = 1024;
        v18 = Error;
        v19 = 2081;
        v20 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval: failed to step statement", buf, 0x26u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v10);
  }
  v6 = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  else if (!v11)
  {
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void WebKit::ResourceLoadStatisticsStore::mergeStatistic(WebCore::SQLiteStatement **this, const WebCore::ResourceLoadStatistics *a2)
{
  WebCore::SQLiteStatement *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  int v14;
  double v15;
  double v16;
  WebKit::ResourceLoadStatisticsStore *v17;
  NSObject *v18;
  uint64_t v19;
  WebCore::SQLiteStatement *v20;
  int Error;
  uint64_t ErrorMsg;
  NSObject *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WebCore::SQLiteStatement *v26;
  int v27;
  uint64_t v28;
  WebCore::SQLiteStatement *v29;
  uint64_t v30;
  char v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  char v34;
  WebCore::SQLiteStatement *v35;
  uint8_t buf[4];
  WebCore::SQLiteStatement **v37;
  __int16 v38;
  WebCore::SQLiteStatement *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)&v30);
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 64, (uint64_t)"mergeStatistic", (WebCore::SQLiteStatementAutoResetScope *)&v29);
  if (!v29
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(v29) != 100)
  {
    v18 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v20 = this[81];
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218755;
      v37 = this;
      v38 = 2048;
      v39 = v20;
      v40 = 1024;
      v41 = Error;
      v42 = 2081;
      v43 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v18, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::mergeStatistic: failed to step statement", buf, 0x26u);
    }
    goto LABEL_13;
  }
  v4 = v29;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)&v33);
  WebCore::SQLiteStatement::columnText(v4);
  WebCore::SQLiteStatement::columnDouble(v4);
  v6 = v5;
  WebCore::SQLiteStatement::columnDouble(v4);
  v8 = v7;
  v9 = WebCore::SQLiteStatement::columnInt(v4);
  v10 = WebCore::SQLiteStatement::columnInt(v4);
  v11 = WebCore::SQLiteStatement::columnInt(v4);
  v12 = WebCore::SQLiteStatement::columnInt(v4);
  v14 = WebCore::SQLiteStatement::columnInt(v4);
  v15 = *((double *)a2 + 1);
  if (v6 < v15)
    WebKit::ResourceLoadStatisticsStore::updateLastSeen((uint64_t)this, v15);
  v16 = *((double *)a2 + 3);
  if (*((_BYTE *)a2 + 16))
  {
    if (v8 >= v16)
      v16 = v8;
    v17 = (WebKit::ResourceLoadStatisticsStore *)this;
    goto LABEL_10;
  }
  if (v16 == 0.0)
  {
    v16 = 0.0;
    v17 = (WebKit::ResourceLoadStatisticsStore *)this;
LABEL_10:
    WebKit::ResourceLoadStatisticsStore::setUserInteraction((uint64_t)v17, v16);
  }
  if (*((_BYTE *)a2 + 32) && !v9)
    WebKit::ResourceLoadStatisticsStore::setGrandfathered(this, a2);
  if (*((_BYTE *)a2 + 128) && !v10)
    WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebKit::ResourceLoadStatisticsStore *)this, a2);
  if (*((_BYTE *)a2 + 129) && !v11)
    WebKit::ResourceLoadStatisticsStore::setVeryPrevalentResource((WebKit::ResourceLoadStatisticsStore *)this, a2);
  if (*((_DWORD *)a2 + 33) > v12)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 49, (uint64_t)"updateDataRecordsRemoved", (WebCore::SQLiteStatementAutoResetScope *)&v35);
    if (!v35
      || WebCore::SQLiteStatement::bindInt(v35)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(v35) != 101)
    {
      v23 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v26 = this[81];
        v27 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
        v28 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
        *(_DWORD *)buf = 134218755;
        v37 = this;
        v38 = 2048;
        v39 = v26;
        v40 = 1024;
        v41 = v27;
        v42 = 2081;
        v43 = v28;
        _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateDataRecordsRemoved: failed to step statement", buf, 0x26u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v35);
  }
  if (*((_BYTE *)a2 + 80) && !v14)
    WebKit::ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval((uint64_t)this, a2);
  v24 = v32;
  v32 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v13);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v33;
  if (v34)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
  }
  else if (!v33)
  {
    goto LABEL_13;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
LABEL_13:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v29);
  v19 = v30;
  if (v31)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
  }
  else if (!v30)
  {
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
}

void WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID(WebCore::SQLiteStatement **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  NSObject *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::SQLiteStatement *v8;
  int Error;
  uint64_t ErrorMsg;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::SQLiteStatement *v13;
  _BYTE buf[12];
  __int16 v15;
  WebCore::SQLiteStatement *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v4 += 2;
  *a2 = v4;
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 66, (uint64_t)"getDomainStringFromDomainID", (WebCore::SQLiteStatementAutoResetScope *)&v13);
  if (v13 && !WebCore::SQLiteStatement::bindInt(v13))
  {
    if (WebCore::SQLiteStatement::step(v13) == 100)
    {
      WebCore::SQLiteStatement::columnText(this[66]);
      v7 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      *a2 = v7;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
        {
          WTF::StringImpl::destroy(v4, v6);
          v12 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  else
  {
    v5 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v8 = this[81];
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = this;
      v15 = 2048;
      v16 = v8;
      v17 = 1024;
      v18 = Error;
      v19 = 2081;
      v20 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::getDomainStringFromDomainID: failed to bind parameter", buf, 0x26u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v13);
}

void WebKit::ResourceLoadStatisticsStore::aggregatedThirdPartyData(WebKit::ResourceLoadStatisticsStore *this, uint64_t a2)
{
  WebCore::SQLiteDatabase *v4;
  NSObject *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  const WTF::StringImpl *v30;
  double v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  BOOL *v38;
  _DWORD *v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  double v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  _BYTE v57[16];
  unsigned int v58;
  WTF::StringImpl *v59;
  BOOL v60;
  double v61;
  WTF::StringImpl *v62;
  WebCore::SQLiteStatement *v63;
  WebCore::SQLiteStatement *v64;
  _BYTE buf[12];
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int Error;
  __int16 v70;
  uint64_t ErrorMsg;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = (WebCore::SQLiteDatabase *)(a2 + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (v58 || WebCore::SQLiteStatement::bindText() || WebCore::SQLiteStatement::bindText())
  {
    v5 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a2 + 648);
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = a2;
      v66 = 2048;
      v67 = v6;
      v68 = 1024;
      Error = WebCore::SQLiteDatabase::lastError(v4);
      v70 = 2081;
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v4);
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::aggregatedThirdPartyData: failed to bind parameters", buf, 0x26u);
    }
  }
  else
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v57) == 100)
    {
      if (v58)
        goto LABEL_86;
      if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v57))
      {
        if (v58)
          goto LABEL_86;
        WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v57);
        WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID((WebCore::SQLiteStatement **)a2, (WTF::StringImpl **)buf);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString((WTF::StringImpl **)buf, &v56);
        v8 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v7);
          else
            *(_DWORD *)v8 -= 2;
        }
        v9 = v56;
        if (v56)
          *(_DWORD *)v56 += 2;
        v53 = v9;
        WebKit::DatabaseUtilities::scopedStatement(a2, (WebCore::SQLiteStatement **)(a2 + 536), (uint64_t)"getThirdPartyDataForSpecificFirstPartyDomains", (WebCore::SQLiteStatementAutoResetScope *)&v63);
        if (!v63
          || WebCore::SQLiteStatement::bindInt(v63)
          || WebCore::SQLiteStatement::bindInt(v63)
          || WebCore::SQLiteStatement::bindInt(v63))
        {
          v10 = qword_1ECE71758;
          if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
          {
            v19 = *(_QWORD *)(a2 + 648);
            v20 = WebCore::SQLiteDatabase::lastError(v4);
            v21 = WebCore::SQLiteDatabase::lastErrorMsg(v4);
            *(_DWORD *)buf = 134218755;
            *(_QWORD *)&buf[4] = a2;
            v66 = 2048;
            v67 = v19;
            v68 = 1024;
            Error = v20;
            v70 = 2081;
            ErrorMsg = v21;
            _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::getThirdPartyDataForSpecificFirstPartyDomains: failed to bind parameters", buf, 0x26u);
          }
          v54 = 0;
          v55 = 0;
        }
        else
        {
          v54 = 0;
          v55 = 0;
          while (WebCore::SQLiteStatement::step(v63) == 100)
          {
            WebCore::SQLiteStatement::columnInt(*(WebCore::SQLiteStatement **)(a2 + 536));
            WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID((WebCore::SQLiteStatement **)a2, (WTF::StringImpl **)buf);
            WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString((WTF::StringImpl **)buf, &v62);
            v23 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v22);
              else
                *(_DWORD *)v23 -= 2;
            }
            v24 = v62;
            if (v62)
              *(_DWORD *)v62 += 2;
            v59 = v24;
            WebKit::DatabaseUtilities::scopedStatement(a2, (WebCore::SQLiteStatement **)(a2 + 544), (uint64_t)"hasStorageAccess", (WebCore::SQLiteStatementAutoResetScope *)buf);
            v25 = WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)&v56);
            v26 = WebKit::ResourceLoadStatisticsStore::relationshipExists(a2, (WebCore::SQLiteStatement **)buf, v25);
            WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)buf);
            v60 = v26;
            v27 = WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)&v56);
            v28 = WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)&v62);
            v31 = -1.0;
            if (HIDWORD(v27) && HIDWORD(v28))
            {
              WebKit::DatabaseUtilities::scopedStatement(a2, (WebCore::SQLiteStatement **)(a2 + 552), (uint64_t)"getMostRecentlyUpdatedTimestamp", (WebCore::SQLiteStatementAutoResetScope *)&v64);
              if (!v64
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64)
                || WebCore::SQLiteStatement::bindInt(v64))
              {
                v32 = qword_1ECE71758;
                if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
                {
                  v49 = *(_QWORD *)(a2 + 648);
                  v50 = WebCore::SQLiteDatabase::lastError(v4);
                  v51 = WebCore::SQLiteDatabase::lastErrorMsg(v4);
                  *(_DWORD *)buf = 134218755;
                  *(_QWORD *)&buf[4] = a2;
                  v66 = 2048;
                  v67 = v49;
                  v68 = 1024;
                  Error = v50;
                  v70 = 2081;
                  ErrorMsg = v51;
                  _os_log_error_impl(&dword_196BCC000, v32, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::getMostRecentlyUpdatedTimestamp: failed to step statement", buf, 0x26u);
                }
              }
              else if (WebCore::SQLiteStatement::step(v64) == 100)
              {
                WebCore::SQLiteStatement::columnDouble(v64);
                v31 = v52;
              }
              WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v64);
            }
            v61 = v31;
            if (HIDWORD(v55))
            {
              v33 = 0;
              v34 = 0;
              while (1)
              {
                v35 = v54;
                if (WTF::equal(*(WTF **)(v54 + v33), v59, v30))
                {
                  if (*(_BYTE *)(v35 + v33 + 8) == v60)
                    break;
                }
                ++v34;
                v36 = HIDWORD(v55);
                v33 += 24;
                if (v34 >= HIDWORD(v55))
                  goto LABEL_68;
              }
            }
            else
            {
              v36 = 0;
LABEL_68:
              if (v36 == v55)
              {
                v37 = (_QWORD *)WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, v36 + 1, (unint64_t)&v59);
                v40 = (_DWORD *)*v37;
                v38 = (BOOL *)(v37 + 1);
                v39 = v40;
                v41 = HIDWORD(v55);
                v42 = v54;
                if (v40)
                  *v39 += 2;
                v43 = (_QWORD *)(v42 + 24 * v41);
                *v43 = v39;
                v44 = v43 + 1;
              }
              else
              {
                v45 = v54;
                v46 = v59;
                if (v59)
                  *(_DWORD *)v59 += 2;
                *(_QWORD *)(v45 + 24 * v36) = v46;
                v44 = (_OWORD *)(v45 + 24 * v36 + 8);
                v38 = &v60;
              }
              *v44 = *(_OWORD *)v38;
              ++HIDWORD(v55);
            }
            v47 = v59;
            v59 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v29);
              else
                *(_DWORD *)v47 -= 2;
            }
            v48 = v62;
            v62 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
                WTF::StringImpl::destroy(v48, v29);
              else
                *(_DWORD *)v48 -= 2;
            }
          }
        }
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v63);
        v12 = *((_DWORD *)this + 3);
        if (v12 == *((_DWORD *)this + 2))
        {
          WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ITPThirdPartyData>((uint64_t)this, (unint64_t)&v53);
        }
        else
        {
          v13 = *(_QWORD *)this + 24 * v12;
          v14 = v53;
          v53 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)v13 = v14;
          v15 = v54;
          v54 = 0;
          *(_QWORD *)(v13 + 8) = v15;
          LODWORD(v15) = v55;
          LODWORD(v55) = 0;
          *(_DWORD *)(v13 + 16) = v15;
          LODWORD(v15) = HIDWORD(v55);
          HIDWORD(v55) = 0;
          *(_DWORD *)(v13 + 20) = v15;
          ++*((_DWORD *)this + 3);
        }
        WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v11);
        v17 = v53;
        v53 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = v56;
        v56 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v16);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
      if (v58)
LABEL_86:
        std::__throw_bad_variant_access[abi:sn180100]();
    }
  }
  if (v58 != -1)
    (*(&off_1E34C0CF8 + v58))((int)buf, (WebCore::SQLiteStatement *)v57);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  char v7;
  uint64_t v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7 = a4;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char>(v8, a3, &v7, a5);
  if (!*a5)
    __break(0xC471u);
  return result;
}

WTF::StringImpl *WebKit::buildList<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::StringImpl **a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  const char *v11;
  unsigned int v12;
  int v13;
  size_t v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  _WORD *v24;
  const char *v25;
  __int16 v26;
  _WORD *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  WTF::StringImpl *v37;
  _QWORD v38[2];
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  char v42;
  uint64_t v43;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 1;
  v5 = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v38[0] = v5;
  v38[1] = v6;
  if (*a2)
    v7 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  else
    v7 = 0;
  if ((uint64_t *)v7 != v5)
  {
    do
    {
      v8 = v41;
      v9 = v41 != 0;
      v10 = *v5;
      if (v41)
        v11 = ", ";
      else
        v11 = "";
      if (v10)
      {
        v12 = *(_DWORD *)(v10 + 4);
        if (v12 >= 0xFFFFFFFE)
          v13 = -1;
        else
          v13 = v12 + 2;
      }
      else
      {
        v13 = 2;
      }
      v14 = 2 * (v41 != 0);
      v15 = __CFADD__(v13, 2 * v9);
      v16 = v13 + 2 * v9;
      if (v15)
        v16 = -1;
      v15 = __CFADD__(v16, v41);
      v17 = v16 + v41;
      if (v15)
        v18 = 0xFFFFFFFFLL;
      else
        v18 = v17;
      v19 = v40;
      if ((v40 || (v19 = v39) != 0) && (*((_BYTE *)v19 + 16) & 4) == 0 || v10 && (*(_BYTE *)(v10 + 16) & 4) == 0)
      {
        v20 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v39);
        if (v20)
        {
          if (v8)
          {
            v23 = 2 * v14;
            v24 = (_WORD *)v20;
            v25 = ", ";
            do
            {
              v26 = *(unsigned __int8 *)v25++;
              *v24++ = v26;
              v23 -= 2;
            }
            while (v23);
          }
          v27 = (_WORD *)(v20 + 2 * v14);
          *v27 = 34;
          v28 = (char *)(v27 + 1);
          v43 = v10;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v43, v28);
          v29 = v43;
          if (v43)
            v29 = *(unsigned int *)(v43 + 4);
          *(_WORD *)&v28[2 * v29] = 34;
        }
      }
      else
      {
        v30 = (char *)MEMORY[0x19AEAB398](&v39, v18);
        if (v30)
        {
          v31 = v30;
          if ((_DWORD)v14)
            memcpy(v30, v11, v14);
          v32 = &v31[v14];
          *v32 = 34;
          v33 = v32 + 1;
          v43 = v10;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v43, v33);
          v34 = v43;
          if (v43)
            v34 = *(unsigned int *)(v43 + 4);
          v33[v34] = 34;
        }
      }
      v38[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v38, v21, v22);
      v5 = (uint64_t *)v38[0];
    }
    while (v38[0] != v7);
    result = v39;
    if (v39)
      goto LABEL_41;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v39);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v39);
  result = v39;
  if (v39)
LABEL_41:
    *(_DWORD *)result += 2;
  *a1 = result;
  v37 = v40;
  v40 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::destroy(v37, v35);
      result = v39;
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v35);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t NonPrevalentDomainsThatRedirectedToThisDomain;
  NSObject *v6;
  uint64_t v7;
  WebCore::SQLiteDatabase *v9;
  NSObject *v10;
  unsigned int v12;
  NSObject *v13;
  uint64_t *v14;
  BOOL v15;
  WTF *v16;
  WTF **v17;
  uint64_t v18;
  int Error;
  uint64_t ErrorMsg;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _BYTE v24[16];
  unsigned int v25;
  _BYTE v26[16];
  unsigned int v27;
  WTF **v28;
  WTF *v29;
  uint64_t v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  NonPrevalentDomainsThatRedirectedToThisDomain = a4;
  v39 = *MEMORY[0x1E0C80C00];
  if (a4 < 0x32)
  {
    v29 = 0;
    v30 = 0;
    v28 = &v29;
    v9 = (WebCore::SQLiteDatabase *)(a1 + 16);
    WebCore::SQLiteDatabase::prepareStatement();
    if (v27 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v26))
    {
      v10 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v18 = *(_QWORD *)(a1 + 648);
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
        *(_DWORD *)buf = 134218755;
        v32 = a1;
        v33 = 2048;
        v34 = v18;
        v35 = 1024;
        v36 = Error;
        v37 = 2081;
        v38 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain: failed to bind parameter for findSubresources", buf, 0x26u);
      }
      NonPrevalentDomainsThatRedirectedToThisDomain = 0;
    }
    else
    {
      if (!v27)
      {
        NonPrevalentDomainsThatRedirectedToThisDomain = (NonPrevalentDomainsThatRedirectedToThisDomain + 1);
        do
        {
          if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v26) != 100)
            goto LABEL_21;
          if (v27)
            break;
          v12 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v26);
          *(_DWORD *)buf = v12;
          if ((std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(a3, v12, buf) & 1) != 0)
          {
            *(_DWORD *)buf = v12;
            std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v28, v12, buf);
          }
        }
        while (!v27);
      }
LABEL_20:
      while (1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
        WebCore::SQLiteDatabase::prepareStatement();
        if (v25 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v24))
          break;
        while (!v25)
        {
          if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v24) != 100)
          {
            v14 = (uint64_t *)v28;
            if (v30)
              v15 = v28 == &v29;
            else
              v15 = 1;
            if (!v15)
            {
              do
              {
                NonPrevalentDomainsThatRedirectedToThisDomain = WebKit::ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain(a1, *((unsigned int *)v14 + 7), a3, NonPrevalentDomainsThatRedirectedToThisDomain);
                v16 = (WTF *)v14[1];
                if (v16)
                {
                  do
                  {
                    v17 = (WTF **)v16;
                    v16 = *(WTF **)v16;
                  }
                  while (v16);
                }
                else
                {
                  do
                  {
                    v17 = (WTF **)v14[2];
                    v15 = *v17 == (WTF *)v14;
                    v14 = (uint64_t *)v17;
                  }
                  while (!v15);
                }
                v14 = (uint64_t *)v17;
              }
              while (v17 != &v29);
            }
            goto LABEL_26;
          }
          if (v25)
            goto LABEL_20;
          v9 = (WebCore::SQLiteDatabase *)WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v24);
          *(_DWORD *)buf = (_DWORD)v9;
          if ((std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(a3, v9, buf) & 1) != 0)
          {
            *(_DWORD *)buf = (_DWORD)v9;
            std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v28, v9, buf);
          }
        }
      }
      v13 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v21 = *(_QWORD *)(a1 + 648);
        v22 = WebCore::SQLiteDatabase::lastError(v9);
        v23 = WebCore::SQLiteDatabase::lastErrorMsg(v9);
        *(_DWORD *)buf = 134218755;
        v32 = a1;
        v33 = 2048;
        v34 = v21;
        v35 = 1024;
        v36 = v22;
        v37 = 2081;
        v38 = v23;
        _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain: failed to bind parameter for findTopFrames", buf, 0x26u);
      }
      NonPrevalentDomainsThatRedirectedToThisDomain = 0;
LABEL_26:
      if (v25 != -1)
        (*(&off_1E34C0CF8 + v25))((int)buf, (WebCore::SQLiteStatement *)v24);
    }
    if (v27 != -1)
      (*(&off_1E34C0CF8 + v27))((int)buf, (WebCore::SQLiteStatement *)v26);
    std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(v29);
  }
  else
  {
    v6 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 648);
      *(_DWORD *)buf = 134218496;
      v32 = a1;
      v33 = 2048;
      v34 = v7;
      v35 = 1024;
      v36 = 50;
      _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain: hit %u recursive calls in redirect backtrace", buf, 0x1Cu);
    }
  }
  return NonPrevalentDomainsThatRedirectedToThisDomain;
}

uint64_t WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::add<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>(uint64_t result, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = v8 + 40 * v14;
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(_DWORD *)(v8 - 4);
        v27 = 0;
        v26 = v8 + 40 * v28;
        goto LABEL_24;
      }
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = v8 + 40 * v14;
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15);
    if (v17)
    {
      *(_DWORD *)v17 = 0;
      *(_OWORD *)(v17 + 8) = 0u;
      *(_OWORD *)(v17 + 24) = 0u;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  result = (uint64_t)WTF::String::operator=((WTF::StringImpl **)(v15 + 8), (WTF::StringImpl *)a4);
  v19 = *(_OWORD *)(a4 + 8);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(a4 + 24);
  *(_OWORD *)(v15 + 16) = v19;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_18:
      result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, (int *)v15);
      v15 = result;
      v22 = *a2;
      if (*a2)
        LODWORD(v25) = *(_DWORD *)(v22 - 4);
      else
        LODWORD(v25) = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_18;
  }
  v26 = v22 + 40 * v25;
  v27 = 1;
LABEL_24:
  *(_QWORD *)v7 = v15;
  *(_QWORD *)(v7 + 8) = v26;
  *(_BYTE *)(v7 + 16) = v27;
  return result;
}

void WebKit::ResourceLoadStatisticsStore::setPrevalentResource(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2, int a3)
{
  unint64_t v6;
  NSObject *v7;
  WebCore::SQLiteStatement *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  WebCore::SQLiteStatement *v14;
  int Error;
  uint64_t ErrorMsg;
  NSObject *v17;
  WebCore::SQLiteStatement *v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  WebCore::SQLiteStatement *v23;
  int v24;
  uint64_t v25;
  WTF **v26;
  WTF *v27[2];
  WebCore::SQLiteStatement *v28;
  WebCore::SQLiteStatement *v29;
  uint64_t v30;
  char v31;
  WTF::StringImpl *v32;
  _BYTE v33[16];
  unsigned int v34;
  _BYTE buf[12];
  __int16 v36;
  WebCore::SQLiteStatement *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 226)
    || *((_BYTE *)this + 707)
    || (MEMORY[0x19AEABBCC](*(_QWORD *)a2, "localhost", 9) & 1) == 0)
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)&v30);
    v6 = WebKit::ResourceLoadStatisticsStore::domainID(this, a2);
    if (HIDWORD(v6))
    {
      v9 = v6;
      WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 50, (uint64_t)"setPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v29);
      if (!v29
        || WebCore::SQLiteStatement::bindInt(v29)
        || WebCore::SQLiteStatement::bindText()
        || WebCore::SQLiteStatement::step(v29) != 101)
      {
        v12 = qword_1ECE71758;
        if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
        {
          v14 = this[81];
          Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
          ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
          *(_DWORD *)buf = 134218755;
          *(_QWORD *)&buf[4] = this;
          v36 = 2048;
          v37 = v14;
          v38 = 1024;
          v39 = Error;
          v40 = 2081;
          v41 = ErrorMsg;
          _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setPrevalentResource: failed at to step scopedUpdatePrevalentResourceStatement", buf, 0x26u);
        }
      }
      else
      {
        WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 52, (uint64_t)"setPrevalentResource updateVeryPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v28);
        if (a3 == 4
          && (!v28
           || WebCore::SQLiteStatement::bindInt(v28)
           || WebCore::SQLiteStatement::bindText()
           || WebCore::SQLiteStatement::step(v28) != 101))
        {
          v17 = qword_1ECE71758;
          if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
          {
            v18 = this[81];
            v19 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
            v20 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
            *(_DWORD *)buf = 134218755;
            *(_QWORD *)&buf[4] = this;
            v36 = 2048;
            v37 = v18;
            v38 = 1024;
            v39 = v19;
            v40 = 2081;
            v41 = v20;
            _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setPrevalentResource: failed at to step scopedUpdateVeryPrevalentResourceStatement", buf, 0x26u);
          }
        }
        else
        {
          v27[0] = 0;
          v27[1] = 0;
          v26 = v27;
          WebKit::ResourceLoadStatisticsStore::recursivelyFindNonPrevalentDomainsThatRedirectedToThisDomain((uint64_t)this, v9, (uint64_t **)&v26, 0);
          WebKit::buildList<std::set<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>>(&v32, &v26);
          WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET isPrevalent = 1 WHERE domainID IN (", 63, (uint64_t *)&v32, 41, buf);
          WebCore::SQLiteDatabase::prepareStatementSlow();
          v11 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v21 = v32;
          v32 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v10);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (v34 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v33) != 101)
          {
            v22 = qword_1ECE71758;
            if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
            {
              v23 = this[81];
              v24 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
              v25 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
              *(_DWORD *)buf = 134218755;
              *(_QWORD *)&buf[4] = this;
              v36 = 2048;
              v37 = v23;
              v38 = 1024;
              v39 = v24;
              v40 = 2081;
              v41 = v25;
              _os_log_error_impl(&dword_196BCC000, v22, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setDomainsAsPrevalent: failed to step statement", buf, 0x26u);
            }
          }
          if (v34 != -1)
            (*(&off_1E34C0CF8 + v34))((int)buf, (WebCore::SQLiteStatement *)v33);
          std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(v27[0]);
        }
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v28);
      }
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v29);
    }
    else
    {
      v7 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v8 = this[81];
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = this;
        v36 = 2048;
        v37 = v8;
        _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::setPrevalentResource: failed to find domain", buf, 0x16u);
      }
    }
    v13 = v30;
    if (v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
    }
    else if (!v30)
    {
      return;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

WTF::StringImpl *WebKit::ResourceLoadStatisticsStore::cookieAccess(uint64_t a1, uint64_t a2, const WebCore::RegistrableDomain *a3, int a4)
{
  WebCore::SQLiteDatabase *v7;
  NSObject *v8;
  uint64_t v9;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  const WTF::StringImpl **v17;
  __int128 *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t *v22;
  _BYTE v23[16];
  unsigned int v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int Error;
  __int16 v31;
  uint64_t ErrorMsg;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = (WebCore::SQLiteDatabase *)(a1 + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (v24 || WebCore::SQLiteStatement::bindText())
  {
    v8 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 648);
      *(_DWORD *)buf = 134218755;
      v26 = a1;
      v27 = 2048;
      v28 = v14;
      v29 = 1024;
      Error = WebCore::SQLiteDatabase::lastError(v7);
      v31 = 2081;
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v7);
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::cookieAccess: failed to bind parameter", buf, 0x26u);
    }
    v9 = 0;
    goto LABEL_6;
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v23) == 100)
  {
    if (v24 || (v11 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v23), v24))
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    v12 = v11 != 0;
    v13 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v23) != 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (!*(_BYTE *)(a1 + 704))
    goto LABEL_17;
  if (*(_BYTE *)(a1 + 704) == 3)
  {
    if (((WebKit::ResourceLoadStatisticsStore::hasHadUserInteraction(a1, a3) ^ 1 | v12) & 1) != 0)
      goto LABEL_17;
LABEL_21:
    v9 = 1;
    goto LABEL_6;
  }
  if (!v12)
    goto LABEL_21;
LABEL_17:
  if (a4 | v13)
    v9 = 2;
  else
    v9 = 0;
LABEL_6:
  if (v24 != -1)
    (*(&off_1E34C0CF8 + v24))((int)buf, (WebCore::SQLiteStatement *)v23);
  return (WTF::StringImpl *)v9;
}

WTF::StringImpl *WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(uint64_t a1, WTF **a2, const WTF::StringImpl **a3, __int128 *a4, uint64_t a5, int a6, char a7, uint64_t *a8)
{
  WTF::RunLoop *v14;
  uint64_t v15;
  WTF::StringImpl *result;
  WTF::WallTime *v17;
  double v18;
  double v19;
  WTF::StringImpl *v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  unsigned __int8 **v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v14 = (WTF::RunLoop *)WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
  if ((_DWORD)v14)
  {
    v15 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, 1);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (a6)
  {
    v17 = (WTF::WallTime *)WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)&v32);
    v18 = *(double *)(a1 + 640);
    WTF::WallTime::now(v17);
    WebKit::ResourceLoadStatisticsStore::setUserInteraction(a1, v18 + v19);
    v20 = v32;
    if ((_BYTE)v33)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 16))(v32);
LABEL_7:
      v14 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
      goto LABEL_8;
    }
    if (v32)
      goto LABEL_7;
  }
LABEL_8:
  WTF::RunLoop::main(v14);
  WebCore::RegistrableDomain::isolatedCopy(&v32);
  WebCore::RegistrableDomain::isolatedCopy(&v33);
  v34 = *a4;
  LOBYTE(v35) = *((_BYTE *)a4 + 16);
  *((_QWORD *)&v35 + 1) = a5;
  v21 = *(unsigned __int8 ***)(a1 + 104);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v21);
  v36 = v21;
  v37 = a7;
  v22 = *a8;
  *a8 = 0;
  v38 = v22;
  v23 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v23 = &off_1E34C12B8;
  *(_QWORD *)(v23 + 8) = v32;
  v24 = v33;
  v32 = 0;
  v33 = 0;
  *(_QWORD *)(v23 + 16) = v24;
  v25 = v34;
  *(_OWORD *)(v23 + 40) = v35;
  *(_OWORD *)(v23 + 24) = v25;
  *(_QWORD *)(v23 + 56) = v36;
  *(_BYTE *)(v23 + 64) = v37;
  v26 = v38;
  v36 = 0;
  v38 = 0;
  v39 = v23;
  *(_QWORD *)(v23 + 72) = v26;
  WTF::RunLoop::dispatch();
  v28 = v39;
  v39 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = v38;
  v38 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = v36;
  v36 = 0;
  if (v30)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v30);
  v31 = v33;
  v33 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v27);
    else
      *(_DWORD *)v31 -= 2;
  }
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::~$_1(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  WTF::WorkQueue *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned __int8 ***)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  v5 = *(WTF::WorkQueue **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    WTF::WorkQueue::deref(v5);
  v6 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

BOOL WebKit::ResourceLoadStatisticsStore::isPrevalentResource(WebKit::ResourceLoadStatisticsStore *this, const WebCore::RegistrableDomain **a2)
{
  _BOOL8 v4;
  WebCore::SQLiteStatement *v6;

  if (!*((_BYTE *)this + 226) && !*((_BYTE *)this + 707) && (MEMORY[0x19AEABBCC](*a2, "localhost", 9) & 1) != 0)
    return 0;
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, (WebCore::SQLiteStatement **)this + 51, (uint64_t)"isPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v6);
  v4 = WebKit::ResourceLoadStatisticsStore::predicateValueForDomain(this, &v6, *a2) != 0;
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v6);
  return v4;
}

uint64_t WebKit::ResourceLoadStatisticsStore::hasHadUserInteraction(uint64_t a1, const WebCore::RegistrableDomain *a2)
{
  uint64_t v4;
  double v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v13;
  uint64_t v14;
  char v15;
  _BYTE buf[12];
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)&v14);
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 440), (uint64_t)"hasHadUserInteraction", (WebCore::SQLiteStatementAutoResetScope *)&v13);
  if (v13
    && !WebCore::SQLiteStatement::bindText()
    && WebCore::SQLiteStatement::step(v13) == 100)
  {
    if (WebCore::SQLiteStatement::columnInt(v13))
    {
      v4 = 1;
      WebCore::SQLiteStatement::columnDouble(v13);
      if (!WebKit::ResourceLoadStatisticsStore::hasStatisticsExpired(a1, 0, v5))
        goto LABEL_11;
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E34C1330;
      *(_QWORD *)buf = v6;
      WebKit::ResourceLoadStatisticsStore::clearUserInteraction((_QWORD *)a1, a2, (uint64_t *)buf);
      if (*(_QWORD *)buf)
        (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    }
  }
  else
  {
    v7 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 648);
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = a1;
      v17 = 2048;
      v18 = v10;
      v19 = 1024;
      v20 = Error;
      v21 = 2081;
      v22 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::hasHadUserInteraction: failed to step statement", buf, 0x26u);
    }
  }
  v4 = 0;
LABEL_11:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v13);
  v8 = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_14:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return v4;
  }
  if (v14)
    goto LABEL_14;
  return v4;
}

uint64_t WebKit::ResourceLoadStatisticsStore::clearUserInteraction(_QWORD *a1, const WebCore::RegistrableDomain *a2, uint64_t *a3)
{
  char v6;
  uint64_t result;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int Error;
  uint64_t ErrorMsg;
  uint64_t v15;
  int v16;
  double v17;
  _BYTE v18[16];
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint8_t buf[4];
  _QWORD *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)&v20);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)a1, a2, (uint64_t)"clearUserInteraction");
  if (v6)
  {
    WebKit::ResourceLoadStatisticsStore::setUserInteraction((uint64_t)a1, 0.0);
    WebCore::SQLiteDatabase::prepareStatement();
    if (v19 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v18))
      goto LABEL_7;
    if (v19)
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::ResourceLoadStatisticsStore::hasStatisticsExpired(v15, v16, v17);
    }
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v18) != 101)
    {
LABEL_7:
      v8 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v12 = a1[81];
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 2));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 2));
        *(_DWORD *)buf = 134218755;
        v23 = a1;
        v24 = 2048;
        v25 = v12;
        v26 = 1024;
        v27 = Error;
        v28 = 2081;
        v29 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::clearUserInteraction: failed to step statement", buf, 0x26u);
      }
      v9 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    else
    {
      result = WebKit::ResourceLoadStatisticsStore::updateCookieBlocking((uint64_t)a1, a3);
    }
    if (v19 != -1)
      result = (*(&off_1E34C0CF8 + v19))((int)buf, (WebCore::SQLiteStatement *)v18);
  }
  else
  {
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  }
  else if (!v20)
  {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::ResourceLoadStatisticsStore::hasStatisticsExpired(uint64_t a1, int a2, double a3)
{
  uint64_t result;
  WebKit::OperatingDate *v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  unint64_t v14;
  int v15;

  result = 1;
  switch(a2)
  {
    case 0:
      if (!*(_BYTE *)(a1 + 672))
        goto LABEL_7;
      v6 = (WebKit::OperatingDate *)(a1 + 660);
      goto LABEL_6;
    case 1:
      if (!*(_BYTE *)(a1 + 688))
        goto LABEL_7;
      v6 = (WebKit::OperatingDate *)(a1 + 676);
LABEL_6:
      v14 = WebKit::OperatingDate::fromWallTime((WTF *)1, a3);
      v15 = v7;
      v8 = WebKit::OperatingDate::secondsSinceEpoch((WebKit::OperatingDate *)&v14);
      if (v8 >= WebKit::OperatingDate::secondsSinceEpoch(v6))
        goto LABEL_7;
      return 1;
    case 2:
      v11 = *(double *)(a1 + 640);
      WTF::WallTime::now((WTF::WallTime *)1);
      return v11 + v12 > a3 + 3600.0;
    case 3:
      return result;
    default:
LABEL_7:
      if (!*(_BYTE *)(a1 + 160))
        return 0;
      v9 = *(double *)(a1 + 640);
      WTF::WallTime::now((WTF::WallTime *)result);
      if (*(_BYTE *)(a1 + 160))
      {
        return v9 + v10 > a3 + *(double *)(a1 + 152);
      }
      else
      {
        v13 = std::__throw_bad_optional_access[abi:sn180100]();
        return WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(v13);
      }
  }
}

void WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WebCore::SQLiteStatement *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  WebCore::SQLiteStatement **v24;
  const char *v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::WallTime *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  NSObject *v40;
  uint64_t v41;
  const char *v42;
  int Error;
  uint64_t ErrorMsg;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t i;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  char *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  WTF::WallTime *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  double v85;
  unsigned __int8 v86;
  WTF::StringImpl *v87;
  double v88;
  __int16 v89;
  int v90;
  int v91;
  BOOL v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  int v112;
  int v113;
  WTF::StringImpl *v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  char *v123;
  WTF::StringImpl *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t *v142;
  uint64_t *v143;
  WebCore::SQLiteDatabase *v144;
  WebCore::SQLiteDatabase *v145;
  WebCore::SQLiteDatabase *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  char *v151;
  int v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  unsigned int v155;
  char v156;
  uint64_t *v157;
  uint64_t v158;
  WebCore::SQLiteStatement *v159;
  WTF::StringImpl *v160;
  char *v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE buf[22];
  __int16 v167;
  int v168;
  __int16 v169;
  uint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 710))
  {
    WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 520), (uint64_t)"dumpResourceLoadStatistics", (WebCore::SQLiteStatementAutoResetScope *)&v159);
    v12 = v159;
    if (v159)
    {
      v157 = 0;
      v158 = 0;
      while (WebCore::SQLiteStatement::step(v12) == 100)
      {
        WebCore::SQLiteStatement::columnText(v159);
        LODWORD(v14) = HIDWORD(v158);
        if (HIDWORD(v158) == (_DWORD)v158)
        {
          v17 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v157, HIDWORD(v158) + 1, (unint64_t)buf);
          v14 = HIDWORD(v158);
          v18 = (uint64_t)v157;
          v19 = *v17;
          *v17 = 0;
          *(_QWORD *)(v18 + 8 * v14) = v19;
        }
        else
        {
          v15 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          v157[HIDWORD(v158)] = v15;
        }
        HIDWORD(v158) = v14 + 1;
        v16 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v13);
          else
            *(_DWORD *)v16 -= 2;
        }
        v12 = v159;
      }
      v143 = a2;
      *(_QWORD *)buf = WTF::codePointCompareLessThan;
      v20 = 126 - 2 * __clz(HIDWORD(v158));
      if (HIDWORD(v158))
        v21 = v20;
      else
        v21 = 0;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>((uint64_t)v157, (WTF::StringImpl **)&v157[HIDWORD(v158)], (uint64_t (**)(uint64_t *, uint64_t *))buf, v21, 1);
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v156 = 1;
      WTF::StringBuilder::append();
      if (HIDWORD(v158))
      {
        v22 = v157;
        v23 = &v157[HIDWORD(v158)];
        v24 = (WebCore::SQLiteStatement **)(a1 + 512);
        v145 = (WebCore::SQLiteDatabase *)(a1 + 16);
        v25 = "Registrable domain: ";
        v142 = v23;
        do
        {
          WebKit::DatabaseUtilities::scopedStatement(a1, v24, (uint64_t)"resourceToString", (WebCore::SQLiteStatementAutoResetScope *)&v147);
          if (v147
            && !WebCore::SQLiteStatement::bindText()
            && WebCore::SQLiteStatement::step(v147) == 100)
          {
            *(_QWORD *)buf = v25;
            *(_QWORD *)&buf[8] = 21;
            LOBYTE(v163) = 10;
            WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>((WTF::StringBuilder *)&v153, (uint64_t *)buf, v22, (char *)&v163);
            v26 = WebCore::SQLiteStatement::columnInt(*v24) != 0;
            WebKit::appendBoolean((WTF::StringBuilder *)&v153, (int8x16_t *)"hadUserInteraction", 19, v26);
            buf[0] = 10;
            if (!v154 || (v27 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v28 = *((_DWORD *)v154 + 4);
              v29 = *((_QWORD *)v154 + 1);
              ++v155;
              if ((v28 & 4) != 0)
                *(_BYTE *)(v29 + v27) = 10;
              else
                *(_WORD *)(v29 + 2 * v27) = 10;
            }
            WTF::StringBuilder::append();
            v30 = (WTF::WallTime *)WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)(a1 + 512));
            WTF::WallTime::now(v30);
            WTF::StringBuilder::append();
            buf[0] = 10;
            if (!v154 || (v31 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v32 = *((_DWORD *)v154 + 4);
              v33 = *((_QWORD *)v154 + 1);
              ++v155;
              if ((v32 & 4) != 0)
                *(_BYTE *)(v33 + v31) = 10;
              else
                *(_WORD *)(v33 + 2 * v31) = 10;
            }
            v34 = WebCore::SQLiteStatement::columnInt(*v24) != 0;
            WebKit::appendBoolean((WTF::StringBuilder *)&v153, (int8x16_t *)"grandfathered", 14, v34);
            buf[0] = 10;
            if (!v154 || (v35 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v36 = *((_DWORD *)v154 + 4);
              v37 = *((_QWORD *)v154 + 1);
              ++v155;
              if ((v36 & 4) != 0)
                *(_BYTE *)(v37 + v35) = 10;
              else
                *(_WORD *)(v37 + 2 * v35) = 10;
            }
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "StorageAccessUnderTopFrameDomains", 34, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameUniqueRedirectsTo", 26, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement", 56, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameUniqueRedirectsFrom", 28, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameLinkDecorationsFrom", 28, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "TopFrameLoadedThirdPartyScripts", 32, (WebCore::RegistrableDomain *)v22);
            WebCore::SQLiteStatement::columnInt(*(WebCore::SQLiteStatement **)(a1 + 512));
            *(_QWORD *)buf = "    DataRemovalFrequency: ";
            *(_QWORD *)&buf[8] = 27;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            LOBYTE(v161) = 10;
            WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>((WTF::StringBuilder *)&v153, (uint64_t *)buf, (uint64_t *)&v163, (char *)&v161);
            v39 = v163;
            v163 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, v38);
              else
                *(_DWORD *)v39 -= 2;
            }
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "SubframeUnderTopFrameDomains", 29, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "SubresourceUnderTopFrameDomains", 32, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "SubresourceUniqueRedirectsTo", 29, (WebCore::RegistrableDomain *)v22);
            WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(a1, (WTF::StringBuilder *)&v153, "SubresourceUniqueRedirectsFrom", 31, (WebCore::RegistrableDomain *)v22);
            v45 = WebCore::SQLiteStatement::columnInt(*(WebCore::SQLiteStatement **)(a1 + 512)) != 0;
            WebKit::appendBoolean((WTF::StringBuilder *)&v153, (int8x16_t *)"isPrevalentResource", 20, v45);
            buf[0] = 10;
            if (!v154 || (v46 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v47 = *((_DWORD *)v154 + 4);
              v48 = *((_QWORD *)v154 + 1);
              ++v155;
              if ((v47 & 4) != 0)
                *(_BYTE *)(v48 + v46) = 10;
              else
                *(_WORD *)(v48 + 2 * v46) = 10;
            }
            v49 = WebCore::SQLiteStatement::columnInt(*v24) != 0;
            WebKit::appendBoolean((WTF::StringBuilder *)&v153, (int8x16_t *)"isVeryPrevalentResource", 24, v49);
            buf[0] = 10;
            if (!v154 || (v50 = v155, v155 >= *((_DWORD *)v154 + 1)) || v153)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v51 = *((_DWORD *)v154 + 4);
              v52 = *((_QWORD *)v154 + 1);
              ++v155;
              if ((v51 & 4) != 0)
                *(_BYTE *)(v52 + v50) = 10;
              else
                *(_WORD *)(v52 + 2 * v50) = 10;
            }
            v53 = WebCore::SQLiteStatement::columnInt(*v24);
            v54 = v53;
            if ((v53 & 0x80000000) != 0)
            {
              v58 = -v53;
              v55 = 1;
              do
              {
                ++v55;
                v59 = v58 >= 0xA;
                v58 /= 0xAu;
              }
              while (v59);
            }
            else
            {
              v55 = 0;
              v56 = v53;
              do
              {
                ++v55;
                v57 = v56 > 9;
                v56 /= 0xAu;
              }
              while (v57);
            }
            if (v55 >= 0xFFFFFFE8)
              v60 = -1;
            else
              v60 = v55 + 24;
            if (__CFADD__(v60, v155))
              v61 = 0xFFFFFFFFLL;
            else
              v61 = v60 + v155;
            v62 = v154;
            if ((v154 || (v62 = v153) != 0) && (*((_BYTE *)v62 + 16) & 4) == 0)
            {
              v63 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v153);
              if (v63)
              {
                for (i = 0; i != 24; ++i)
                  *(_WORD *)(v63 + 2 * i) = aDatarecordsrem_0[i];
                *(_DWORD *)buf = v54;
                WTF::StringTypeAdapter<int,void>::writeTo<char16_t>((unsigned int *)buf, (_WORD *)(v63 + 48));
              }
            }
            else
            {
              v65 = MEMORY[0x19AEAB398](&v153, v61);
              if (v65)
              {
                qmemcpy((void *)v65, "    dataRecordsRemoved: ", 24);
                *(_DWORD *)buf = v54;
                WTF::StringTypeAdapter<int,void>::writeTo<unsigned char>((unsigned int *)buf, (void *)(v65 + 24));
              }
            }
            buf[0] = 10;
            if (v154 && ((v66 = v155, v155 < *((_DWORD *)v154 + 1)) ? (v67 = v153 == 0) : (v67 = 0), v67))
            {
              v68 = *((_DWORD *)v154 + 4);
              v69 = *((_QWORD *)v154 + 1);
              ++v155;
              if ((v68 & 4) != 0)
                *(_BYTE *)(v69 + v66) = 10;
              else
                *(_WORD *)(v69 + 2 * v66) = 10;
            }
            else
            {
              WTF::StringBuilder::append();
            }
          }
          else
          {
            v40 = qword_1ECE71758;
            if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
            {
              v41 = *(_QWORD *)(a1 + 648);
              v42 = v25;
              Error = WebCore::SQLiteDatabase::lastError(v145);
              ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v145);
              *(_DWORD *)buf = 134218755;
              *(_QWORD *)&buf[4] = a1;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v41;
              v23 = v142;
              v24 = (WebCore::SQLiteStatement **)(a1 + 512);
              v167 = 1024;
              v168 = Error;
              v25 = v42;
              v169 = 2081;
              v170 = ErrorMsg;
              _os_log_error_impl(&dword_196BCC000, v40, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::resourceToString: failed to step statement", buf, 0x26u);
            }
          }
          WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v147);
          ++v22;
        }
        while (v22 != v23);
      }
      WebKit::ResourceLoadStatisticsStore::aggregatedThirdPartyData((WebKit::ResourceLoadStatisticsStore *)&v151, a1);
      if (v152)
      {
        WTF::StringBuilder::append();
        if (v152)
        {
          v70 = v151;
          v144 = (WebCore::SQLiteDatabase *)&v151[24 * v152];
          while (1)
          {
            v71 = *(WTF::StringImpl **)v70;
            if (*(_QWORD *)v70)
              *(_DWORD *)v71 += 2;
            v147 = v71;
            v72 = *((unsigned int *)v70 + 5);
            v148 = 0;
            v149 = 0;
            v150 = v72;
            if ((_DWORD)v72)
            {
              if (v72 >= 0xAAAAAAB)
              {
LABEL_247:
                __break(0xC471u);
                JUMPOUT(0x197119D00);
              }
              v73 = 24 * v72;
              v74 = WTF::fastMalloc((WTF *)(24 * v72));
              v149 = (v73 & 0xFFFFFFF8) / 0x18;
              v148 = v74;
              v75 = *((_DWORD *)v70 + 5);
              if (v75)
              {
                v76 = *((_QWORD *)v70 + 1);
                v77 = v76 + 24 * v75;
                do
                {
                  v78 = *(_DWORD **)v76;
                  if (*(_QWORD *)v76)
                    *v78 += 2;
                  *(_QWORD *)v74 = v78;
                  *(_OWORD *)(v74 + 8) = *(_OWORD *)(v76 + 8);
                  v76 += 24;
                  v74 += 24;
                }
                while (v76 != v77);
              }
            }
            v146 = (WebCore::SQLiteDatabase *)v70;
            memset(buf, 0, 20);
            buf[20] = 1;
            v163 = (WTF::StringImpl *)"Third Party Registrable Domain: ";
            v164 = 33;
            v161 = "\n    {";
            v162 = 7;
            v79 = (WTF::WallTime *)WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)buf, (uint64_t)&v163, (uint64_t *)&v147, (uint64_t)&v161);
            if (v150)
              break;
LABEL_184:
            LOBYTE(v163) = 125;
            if (!*(_QWORD *)&buf[8]
              || (v116 = *(unsigned int *)&buf[16], *(_DWORD *)&buf[16] >= *(_DWORD *)(*(_QWORD *)&buf[8] + 4))
              || *(_QWORD *)buf)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v117 = *(_DWORD *)(*(_QWORD *)&buf[8] + 16);
              v118 = *(_QWORD *)(*(_QWORD *)&buf[8] + 8);
              ++*(_DWORD *)&buf[16];
              if ((v117 & 4) != 0)
                *(_BYTE *)(v118 + v116) = 125;
              else
                *(_WORD *)(v118 + 2 * v116) = 125;
            }
            v119 = *(WTF::StringImpl **)buf;
            if (*(_QWORD *)buf
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)buf),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)buf),
                  (v119 = *(WTF::StringImpl **)buf) != 0))
            {
              *(_DWORD *)v119 += 2;
            }
            v120 = *(WTF::StringImpl **)&buf[8];
            *(_QWORD *)&buf[8] = 0;
            if (v120)
            {
              if (*(_DWORD *)v120 == 2)
                WTF::StringImpl::destroy(v120, v80);
              else
                *(_DWORD *)v120 -= 2;
            }
            v121 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v121)
            {
              if (*(_DWORD *)v121 == 2)
                WTF::StringImpl::destroy(v121, v80);
              else
                *(_DWORD *)v121 -= 2;
            }
            v122 = v154;
            if ((v154 || (v122 = v153) != 0) && (*((_BYTE *)v122 + 16) & 4) == 0
              || v119 && (*((_BYTE *)v119 + 16) & 4) == 0)
            {
              v123 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v153);
              if (v123)
              {
                v125 = v123;
                *(_QWORD *)buf = v119;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)buf, v123);
                v126 = *(_QWORD *)buf;
                if (*(_QWORD *)buf)
                  v126 = *(unsigned int *)(*(_QWORD *)buf + 4);
                *(_WORD *)&v125[2 * v126] = 10;
              }
            }
            else
            {
              v127 = (char *)MEMORY[0x19AEAB398](&v153);
              if (v127)
              {
                v128 = v127;
                *(_QWORD *)buf = v119;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)buf, v127);
                v129 = *(_QWORD *)buf;
                if (*(_QWORD *)buf)
                  v129 = *(unsigned int *)(*(_QWORD *)buf + 4);
                v128[v129] = 10;
              }
            }
            if (v119)
            {
              if (*(_DWORD *)v119 == 2)
                WTF::StringImpl::destroy(v119, v124);
              else
                *(_DWORD *)v119 -= 2;
            }
            WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v148, v124);
            v131 = v147;
            v147 = 0;
            if (v131)
            {
              if (*(_DWORD *)v131 == 2)
                WTF::StringImpl::destroy(v131, v130);
              else
                *(_DWORD *)v131 -= 2;
            }
            v70 = (char *)v146 + 24;
            if ((WebCore::SQLiteDatabase *)((char *)v146 + 24) == v144)
              goto LABEL_226;
          }
          v81 = v148;
          v82 = v148 + 24 * v150;
          while (1)
          {
            v83 = *(_QWORD *)v81;
            if (*(_QWORD *)v81)
            {
              *(_DWORD *)v83 += 2;
              v84 = *(unsigned __int8 *)(v81 + 8);
              v85 = *(double *)(v81 + 16);
              v163 = (WTF::StringImpl *)"{ ";
              v164 = 3;
              if (v84)
                v86 = 49;
              else
                v86 = 48;
              *(_DWORD *)v83 += 4;
            }
            else
            {
              v115 = *(unsigned __int8 *)(v81 + 8);
              v85 = *(double *)(v81 + 16);
              v163 = (WTF::StringImpl *)"{ ";
              v164 = 3;
              if (v115)
                v86 = 49;
              else
                v86 = 48;
            }
            WTF::WallTime::now(v79);
            if (v88 - v85 >= 86400.0)
              v89 = 48;
            else
              v89 = 49;
            if (v83)
            {
              v90 = *(_DWORD *)(v83 + 4);
              if (v90 < 0)
                goto LABEL_247;
            }
            else
            {
              v90 = 0;
            }
            if (__OFADD__(v90, 24))
              goto LABEL_247;
            if (__OFADD__(v90 + 24, 22))
              goto LABEL_247;
            if (__OFADD__(v90 + 46, 1))
              goto LABEL_247;
            v91 = v90 + 49;
            if (__OFADD__(v90 + 47, 2))
              goto LABEL_247;
            v92 = __OFADD__(v90, v91);
            v93 = v90 + v91;
            if (v92)
              goto LABEL_247;
            v94 = (v93 + 38);
            if (__OFADD__(v93, 38))
              goto LABEL_247;
            if (!v83 || (*(_BYTE *)(v83 + 16) & 4) != 0)
              break;
            if (v93 != -38)
            {
              if (v94 > 0x7FFFFFEF)
                goto LABEL_247;
              WTF::tryFastCompactMalloc((WTF *)(2 * v94 + 20));
              v95 = (uint64_t)v161;
              if (!v161)
                goto LABEL_247;
              *(_DWORD *)v161 = 2;
              *(_DWORD *)(v95 + 4) = v94;
              *(_QWORD *)(v95 + 8) = v95 + 20;
              *(_DWORD *)(v95 + 16) = 0;
              v96 = 20;
              v97 = "Has been granted storage access under ";
              do
              {
                v98 = *(unsigned __int8 *)v97++;
                *(_WORD *)(v95 + v96) = v98;
                v96 += 2;
              }
              while (v96 != 96);
              v165 = v83;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v165, (char *)(v95 + 96));
              if (v165)
                v99 = *(unsigned int *)(v165 + 4);
              else
                v99 = 0;
              v100 = 0;
              v101 = v95 + 96 + 2 * v99;
              *(_DWORD *)v101 = 2097210;
              *(_WORD *)(v101 + 4) = v86;
              do
              {
                *(_WORD *)(v95 + 2 * v99 + 102 + 2 * v100) = aHasBeenSeenUnd[v100];
                ++v100;
              }
              while (v100 != 22);
              v102 = v101 + 50;
              v161 = (char *)v83;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v161, (char *)(v101 + 50));
              if (v161)
                v103 = *((unsigned int *)v161 + 1);
              else
                v103 = 0;
              v104 = 0;
              v105 = v102 + 2 * v103;
              v106 = v95 + 2 * v99 + 2 * v103 + 146;
              do
              {
                *(_WORD *)(v106 + 2 * v104) = aInTheLast24Hou[v104];
                ++v104;
              }
              while (v104 != 23);
              *(_WORD *)(v105 + 46) = v89;
              goto LABEL_158;
            }
            v114 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            v160 = v114;
LABEL_159:
            v112 = *(_DWORD *)v83 - 2;
            if (*(_DWORD *)v83 == 2)
            {
              WTF::StringImpl::destroy((WTF::StringImpl *)v83, v87);
              v112 = *(_DWORD *)v83;
            }
            else
            {
              *(_DWORD *)v83 = v112;
            }
            v113 = v112 - 2;
            if (v113)
              *(_DWORD *)v83 = v113;
            else
              WTF::StringImpl::destroy((WTF::StringImpl *)v83, v87);
LABEL_165:
            v161 = " },";
            v162 = 4;
            WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)buf, (uint64_t)&v163, (uint64_t *)&v160, (uint64_t)&v161);
            v79 = v160;
            v160 = 0;
            if (!v79)
              goto LABEL_168;
            if (*(_DWORD *)v79 != 2)
            {
              *(_DWORD *)v79 -= 2;
LABEL_168:
              if (v83)
                goto LABEL_171;
              goto LABEL_174;
            }
            v79 = (WTF::WallTime *)WTF::StringImpl::destroy(v79, v80);
            if (v83)
            {
LABEL_171:
              if (*(_DWORD *)v83 == 2)
                v79 = (WTF::WallTime *)WTF::StringImpl::destroy((WTF::StringImpl *)v83, v80);
              else
                *(_DWORD *)v83 -= 2;
            }
LABEL_174:
            v81 += 24;
            if (v81 == v82)
              goto LABEL_184;
          }
          if (v93 == -38)
          {
            v95 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
          }
          else
          {
            if ((v94 & 0x80000000) != 0)
              goto LABEL_247;
            WTF::tryFastCompactMalloc((WTF *)(v94 + 20));
            v95 = (uint64_t)v161;
            if (!v161)
              goto LABEL_247;
            *(_DWORD *)v161 = 2;
            *(_DWORD *)(v95 + 4) = v94;
            *(_QWORD *)(v95 + 8) = v95 + 20;
            *(_DWORD *)(v95 + 16) = 4;
            qmemcpy((void *)(v95 + 20), "Has been granted storage access under ", 38);
            v165 = v83;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v165, (char *)(v95 + 58));
            v107 = v165;
            if (v165)
              v107 = *(unsigned int *)(v165 + 4);
            v108 = v95 + 58 + v107;
            *(_WORD *)v108 = 8250;
            *(_BYTE *)(v108 + 2) = v86;
            qmemcpy((void *)(v108 + 3), "; Has been seen under ", 22);
            v109 = v108 + 25;
            v161 = (char *)v83;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v161, (char *)(v108 + 25));
            v110 = v161;
            if (v161)
              v110 = (char *)*((unsigned int *)v161 + 1);
            v111 = &v110[v109];
            qmemcpy(v111, " in the last 24 hours: ", 23);
            v111[23] = v89;
          }
LABEL_158:
          v160 = (WTF::StringImpl *)v95;
          if (!v83)
            goto LABEL_165;
          goto LABEL_159;
        }
      }
LABEL_226:
      v132 = v153;
      if (v153
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v153),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v153),
            (v132 = v153) != 0))
      {
        *(_DWORD *)v132 += 2;
      }
      *(_QWORD *)buf = v132;
      v133 = *v143;
      *v143 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v133 + 16))(v133, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
      v135 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v135)
      {
        if (*(_DWORD *)v135 == 2)
          WTF::StringImpl::destroy(v135, v134);
        else
          *(_DWORD *)v135 -= 2;
      }
      WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v134);
      v140 = v154;
      v154 = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 2)
          WTF::StringImpl::destroy(v140, v139);
        else
          *(_DWORD *)v140 -= 2;
      }
      v141 = v153;
      v153 = 0;
      if (v141)
      {
        if (*(_DWORD *)v141 == 2)
          WTF::StringImpl::destroy(v141, v139);
        else
          *(_DWORD *)v141 -= 2;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v157, v139);
    }
    else
    {
      *(_QWORD *)buf = 0;
      v136 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v136 + 16))(v136, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
      v138 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v138)
      {
        if (*(_DWORD *)v138 == 2)
          WTF::StringImpl::destroy(v138, v137);
        else
          *(_DWORD *)v138 -= 2;
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v159);
    return;
  }
  v4 = *a2;
  *a2 = 0;
  v5 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 632))
  {
    v6 = a1 + 624;
    v7 = v5 + (v5 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v5 + 1)
      v9 = v5 + 1;
    else
      v9 = v8;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v6, v9);
    v5 = *(unsigned int *)(a1 + 636);
  }
  v10 = *(_QWORD *)(a1 + 624);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34C1358;
  v11[1] = a1;
  v11[2] = v4;
  *(_QWORD *)(v10 + 8 * v5) = v11;
  ++*(_DWORD *)(a1 + 636);
}

uint64_t WTF::codePointCompareLessThan(WTF **this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  return WTF::codePointCompare(*this, *a2, a3) >> 31;
}

uint64_t WebKit::ResourceLoadStatisticsStore::predicateValueForDomain(WebKit::ResourceLoadStatisticsStore *this, WebCore::SQLiteStatement **a2, const WebCore::RegistrableDomain *a3)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  WebKit::ResourceLoadStatisticsStore *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int Error;
  __int16 v14;
  uint64_t ErrorMsg;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a2
    && !WebCore::SQLiteStatement::bindText()
    && WebCore::SQLiteStatement::step(*a2) == 100)
  {
    return WebCore::SQLiteStatement::columnInt(*a2);
  }
  v6 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    v7 = *((_QWORD *)this + 81);
    v8 = 134218755;
    v9 = this;
    v10 = 2048;
    v11 = v7;
    v12 = 1024;
    Error = WebCore::SQLiteDatabase::lastError((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
    v14 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::ResourceLoadStatisticsStore *)((char *)this + 16));
    _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::predicateValueForDomain: failed to step statement", (uint8_t *)&v8, 0x26u);
  }
  return 0;
}

void WebKit::RegistrableDomainsToBlockCookiesFor::~RegistrableDomainsToBlockCookiesFor(WebKit::RegistrableDomainsToBlockCookiesFor *this, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = *((_QWORD *)this + 6);
  if (v3)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, v4);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this, v5);
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = off_1E34C13D0;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  v7 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(v4 + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(v4 + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(v4 + 36) = v7;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  v8 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(v4 + 40) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = 0;
  *(_DWORD *)(v4 + 48) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = 0;
  *(_DWORD *)(v4 + 52) = v8;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  v9 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(v4 + 56) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(v4 + 64) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(v4 + 68) = v9;
  *(_QWORD *)(v4 + 72) = 0;
  v10 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(v4 + 72) = v10;
  v11 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(v4 + 80) = v11;
  *a1 = v4;
  return a1;
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 48, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, v6);
  v8 = *(unsigned __int8 ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v8);
  v9 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v7);
    }
  }
  return a1;
}

WTF::StringImpl *WebKit::buildList<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::StringImpl **a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v5;
  int8x16_t *v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      if (v14)
        v6 = (int8x16_t *)", ";
      else
        v6 = (int8x16_t *)"";
      if (v14)
        v7 = 3;
      else
        v7 = 1;
      v8 = *a2++;
      WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned int>((WTF::StringBuilder *)&v12, v6, v7, v8);
      v5 -= 4;
    }
    while (v5);
    result = v12;
    if (v12)
      goto LABEL_12;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12);
  result = v12;
  if (v12)
LABEL_12:
    *(_DWORD *)result += 2;
  *a1 = result;
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      result = v12;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebKit::ResourceLoadStatisticsStore::hasHadUnexpiredRecentUserInteraction(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v8;

  if (!*(_BYTE *)(a2 + 32))
    return 0;
  if ((WebKit::ResourceLoadStatisticsStore::hasStatisticsExpired((uint64_t)a1, a3, *(double *)(a2 + 16)) & 1) != 0)
  {
    if (!a3)
    {
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E34C1448;
      v8 = v6;
      WebKit::ResourceLoadStatisticsStore::clearUserInteraction(a1, (const WebCore::RegistrableDomain *)(a2 + 8), (uint64_t *)&v8);
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
    return 0;
  }
  return *(_BYTE *)(a2 + 32) != 0;
}

BOOL WebKit::ResourceLoadStatisticsStore::shouldRemoveAllWebsiteDataFor(WebKit::ResourceLoadStatisticsStore *a1, uint64_t a2, int a3)
{
  _BOOL8 result;
  _BOOL4 hasHadUnexpiredRecentUserInteraction;
  BOOL v8;

  result = WebKit::ResourceLoadStatisticsStore::isPrevalentResource(a1, (const WebCore::RegistrableDomain **)(a2 + 8));
  if (result)
  {
    hasHadUnexpiredRecentUserInteraction = WebKit::ResourceLoadStatisticsStore::hasHadUnexpiredRecentUserInteraction(a1, a2, 0);
    v8 = hasHadUnexpiredRecentUserInteraction;
    result = !hasHadUnexpiredRecentUserInteraction;
    if (!v8)
    {
      if (a3)
        return *(_BYTE *)(a2 + 33) == 0;
    }
  }
  return result;
}

BOOL WebKit::ResourceLoadStatisticsStore::shouldRemoveAllButCookiesFor(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  int v4;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;

  v3 = *(unsigned __int8 *)(a1 + 706);
  v4 = *(unsigned __int8 *)(a2 + 34);
  v6 = v3 == 1 && v4 == 0;
  if (*(_BYTE *)(a2 + 33))
    v7 = a3;
  else
    v7 = 0;
  v8 = v4 == 1;
  if (v3 == 3)
    v9 = 3;
  else
    v9 = 0;
  v10 = v3 >= 2;
  if (v3 == 2)
    v11 = 2;
  else
    v11 = v9;
  if (v10)
    v12 = v11;
  else
    v12 = v8;
  return ((v6 | v7) & 1) == 0
      && !WebKit::ResourceLoadStatisticsStore::hasHadUnexpiredRecentUserInteraction((_QWORD *)a1, a2, v12);
}

uint64_t WebKit::ResourceLoadStatisticsStore::shouldEnforceSameSiteStrictFor(uint64_t a1, uint64_t a2, int a3)
{
  const WebCore::RegistrableDomain *v4;
  uint64_t v5;
  char v6;
  NSObject *v7;
  uint64_t v9;
  uint64_t v10;
  int Error;
  uint64_t ErrorMsg;
  uint64_t v13;
  _BYTE v14[16];
  unsigned int v15;
  uint64_t v16;
  char v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 705)
    || a3 && *(_BYTE *)(a2 + 33)
    || *(_QWORD *)(a1 + 216) >= (unint64_t)*(unsigned int *)(a2 + 36))
  {
    return 0;
  }
  v4 = (const WebCore::RegistrableDomain *)(a2 + 8);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E34C1470;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)&v16);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(a1, v4, (uint64_t)"clearTopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement");
  if (!v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    goto LABEL_16;
  }
  WebCore::SQLiteDatabase::prepareStatement();
  if (v15 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v14))
    goto LABEL_10;
  if (!v15)
  {
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v14) == 101)
    {
LABEL_12:
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (v15 != -1)
        (*(&off_1E34C0CF8 + v15))((int)buf, (WebCore::SQLiteStatement *)v14);
LABEL_16:
      v9 = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      }
      else if (!v16)
      {
        return 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return 1;
    }
LABEL_10:
    v7 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 648);
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218755;
      v19 = a1;
      v20 = 2048;
      v21 = v10;
      v22 = 1024;
      v23 = Error;
      v24 = 2081;
      v25 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::clearTopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement: failed to step statement", buf, 0x26u);
    }
    goto LABEL_12;
  }
  v13 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(v13);
}

void WebKit::ResourceLoadStatisticsStore::appendSubStatisticList(uint64_t a1, WTF::StringBuilder *a2, const char *a3, uint64_t a4, WebCore::RegistrableDomain *a5)
{
  int8x16_t *v7;
  unint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  uint64_t v29;
  int Error;
  uint64_t ErrorMsg;
  _DWORD *v32;
  _BYTE *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringBuilder *v38;
  uint64_t *v39;
  uint64_t *v40;
  char *v41;
  WTF::StringImpl *v42;
  _BYTE v43[16];
  unsigned int v44;
  char v45;
  _BYTE buf[22];
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;

  v7 = (int8x16_t *)a3;
  v51 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if ("StorageAccessUnderTopFrameDomains")
    {
      if (!"TopFrameUniqueRedirectsTo")
        goto LABEL_25;
      if ("TopFrameUniqueRedirectsFrom")
      {
        if ("TopFrameLinkDecorationsFrom")
        {
          if ("TopFrameLoadedThirdPartyScripts")
          {
            if ("SubframeUnderTopFrameDomains")
            {
              if ("SubresourceUnderTopFrameDomains")
              {
                if ("SubresourceUniqueRedirectsTo")
                {
                  if ("SubresourceUniqueRedirectsFrom")
                  {
LABEL_11:
                    v10 = 1;
                    goto LABEL_26;
                  }
                  goto LABEL_21;
                }
                goto LABEL_22;
              }
              goto LABEL_57;
            }
LABEL_56:
            v10 = 85;
            goto LABEL_26;
          }
          goto LABEL_57;
        }
LABEL_25:
        v10 = 74;
        goto LABEL_26;
      }
LABEL_24:
      v10 = 78;
      goto LABEL_26;
    }
LABEL_22:
    v10 = 82;
    goto LABEL_26;
  }
  if (!strcmp(a3, "StorageAccessUnderTopFrameDomains"))
    goto LABEL_22;
  if (!strcmp(v7->i8, "TopFrameUniqueRedirectsTo"))
    goto LABEL_25;
  if (!strcmp(v7->i8, "TopFrameUniqueRedirectsFrom"))
    goto LABEL_24;
  if (!strcmp(v7->i8, "TopFrameLinkDecorationsFrom"))
    goto LABEL_25;
  if (strcmp(v7->i8, "TopFrameLoadedThirdPartyScripts"))
  {
    if (!strcmp(v7->i8, "SubframeUnderTopFrameDomains"))
      goto LABEL_56;
    if (strcmp(v7->i8, "SubresourceUnderTopFrameDomains"))
    {
      if (strcmp(v7->i8, "SubresourceUniqueRedirectsTo"))
      {
        if (strcmp(v7->i8, "SubresourceUniqueRedirectsFrom"))
          goto LABEL_11;
LABEL_21:
        v10 = 86;
        goto LABEL_26;
      }
      goto LABEL_22;
    }
  }
LABEL_57:
  v10 = 91;
LABEL_26:
  if (v10 < 2)
    return;
  WebCore::SQLiteDatabase::prepareStatement();
  if (v44)
    goto LABEL_33;
  WebCore::RegistrableDomain::uncheckedCreateFromHost(a5, (WTF::StringImpl **)buf);
  if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a1, (const WebCore::RegistrableDomain *)buf) >> 32))
  {
    v38 = (WTF::StringBuilder *)std::__throw_bad_optional_access[abi:sn180100]();
    WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>(v38, v39, v40, v41);
    return;
  }
  v12 = WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v43);
  v13 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (!v13)
  {
LABEL_32:
    if (v12)
      goto LABEL_33;
    goto LABEL_39;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_32;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v12)
  {
LABEL_33:
    v14 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v29 = *(_QWORD *)(a1 + 648);
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v29;
      v47 = 1024;
      v48 = Error;
      v49 = 2081;
      v50 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::appendSubStatisticList: failed to bind parameter", buf, 0x26u);
    }
    goto LABEL_35;
  }
LABEL_39:
  if (v44)
    goto LABEL_74;
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v43) == 100)
  {
    if (a4)
      v15 = a4 - 1;
    else
      v15 = 0;
    if (v15 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19711AAF8);
    }
    v16 = *((_QWORD *)a2 + 1);
    if ((v16 || (v16 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v16 + 16) & 4) == 0)
    {
      v17 = (_QWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a2);
      if (v17)
      {
        *v17 = 0x20002000200020;
        v18 = (char *)(v17 + 1);
        v19 = &v18[2 * v15];
        if ((v15 & 0xFFFFFFC0) != 0)
        {
          v20 = &v18[2 * (v15 & 0xFFFFFFC0)];
          v21 = 0uLL;
          do
          {
            v52.val[0] = *v7;
            v22 = v7[1];
            v53.val[0] = v7[2];
            v23 = v7[3];
            v7 += 4;
            v24 = v23;
            v53.val[1] = 0uLL;
            v54.val[0] = v22;
            v52.val[1] = 0uLL;
            v25 = v18;
            vst2q_s8(v25, v52);
            v25 += 32;
            v54.val[1] = 0uLL;
            vst2q_s8(v25, v54);
            v26 = v18 + 64;
            vst2q_s8(v26, v53);
            v27 = v18 + 96;
            vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
            v18 += 128;
          }
          while (v18 != v20);
          v18 = v20;
        }
        while (v18 != v19)
        {
          v28 = v7->u8[0];
          v7 = (int8x16_t *)((char *)v7 + 1);
          *(_WORD *)v18 = v28;
          v18 += 2;
        }
        *(_DWORD *)v19 = 655418;
      }
    }
    else
    {
      v32 = (_DWORD *)MEMORY[0x19AEAB398](a2);
      if (v32)
      {
        *v32 = 538976288;
        v33 = v32 + 1;
        if ((_DWORD)v15)
        {
          if ((_DWORD)v15 == 1)
            *v33 = v7->i8[0];
          else
            memcpy(v32 + 1, v7, v15);
        }
        *(_WORD *)&v33[v15] = 2618;
      }
    }
    if (!v44)
    {
      WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v43);
      WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID((WebCore::SQLiteStatement **)a1, &v42);
      *(_QWORD *)buf = "        ";
      *(_QWORD *)&buf[8] = 9;
      v45 = 10;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>(a2, (uint64_t *)buf, (uint64_t *)&v42, &v45);
      if (!v44)
      {
        while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v43) == 100)
        {
          if (!v44)
          {
            WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v43);
            WebKit::ResourceLoadStatisticsStore::getDomainStringFromDomainID((WebCore::SQLiteStatement **)a1, (WTF::StringImpl **)buf);
            v36 = v42;
            v42 = *(WTF::StringImpl **)buf;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v35);
              else
                *(_DWORD *)v36 -= 2;
            }
            *(_QWORD *)buf = "        ";
            *(_QWORD *)&buf[8] = 9;
            v45 = 10;
            WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>(a2, (uint64_t *)buf, (uint64_t *)&v42, &v45);
            if (!v44)
              continue;
          }
          goto LABEL_74;
        }
        goto LABEL_75;
      }
    }
LABEL_74:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_75:
    v37 = v42;
    v42 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v34);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
LABEL_35:
  if (v44 != -1)
    (*(&off_1E34C0CF8 + v44))((int)buf, (WebCore::SQLiteStatement *)v43);
}

uint64_t WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>(WTF::StringBuilder *a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = a2[1];
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v10 = *a2;
  if (v6 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v11 = v6;
    v9 = *a3;
    v8 = *a4;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(a1, (uint64_t)&v10, &v9, &v8);
  }
  return result;
}

_QWORD *WebKit::appendBoolean(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, int a4)
{
  size_t v4;
  const char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD *result;
  _DWORD *v10;
  _QWORD *v11;
  __int128 v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;
  _WORD *v20;
  uint64_t v21;
  __int16 v22;
  _BYTE *v23;
  int8x16x2_t v24;
  int8x16x2_t v25;
  int8x16x2_t v26;

  if (a3)
    v4 = a3 - 1;
  else
    v4 = 0;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19711AD30);
  }
  if (a4)
    v6 = "Yes";
  else
    v6 = "No";
  if (a4)
    v7 = 3;
  else
    v7 = 2;
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    result = (_QWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      *result++ = 0x20002000200020;
      v10 = (_DWORD *)((char *)result + 2 * v4);
      if ((v4 & 0xFFFFFFC0) != 0)
      {
        v11 = (_QWORD *)((char *)result + 2 * (v4 & 0xFFFFFFC0));
        v12 = 0uLL;
        do
        {
          v24.val[0] = *a2;
          v13 = a2[1];
          v25.val[0] = a2[2];
          v14 = a2[3];
          a2 += 4;
          v15 = v14;
          v25.val[1] = 0uLL;
          v26.val[0] = v13;
          v24.val[1] = 0uLL;
          v16 = (char *)result;
          vst2q_s8(v16, v24);
          v16 += 32;
          v26.val[1] = 0uLL;
          vst2q_s8(v16, v26);
          v17 = (char *)(result + 8);
          vst2q_s8(v17, v25);
          v18 = (char *)(result + 12);
          vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
          result += 16;
        }
        while (result != v11);
        result = v11;
      }
      while (result != (_QWORD *)v10)
      {
        v19 = a2->u8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        *(_WORD *)result = v19;
        result = (_QWORD *)((char *)result + 2);
      }
      *v10 = 2097210;
      v20 = v10 + 1;
      v21 = 2 * v7;
      do
      {
        v22 = *(unsigned __int8 *)v6++;
        *v20++ = v22;
        v21 -= 2;
      }
      while (v21);
    }
  }
  else
  {
    result = (_QWORD *)MEMORY[0x19AEAB398]();
    if (result)
    {
      *(_DWORD *)result = 538976288;
      v23 = (char *)result + 4;
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
          *v23 = a2->i8[0];
        else
          memcpy((char *)result + 4, a2, v4);
      }
      *(_WORD *)&v23[v4] = 8250;
      return memcpy(&v23[v4 + 2], v6, v7);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setNotifyPagesWhenDataRecordsWereScanned(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = &off_1E34C1498;
    *(_QWORD *)(v8 + 8) = a1;
    *(_BYTE *)(v8 + 16) = a2;
    *(_QWORD *)(v8 + 24) = v7;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v9 = v8;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = &off_1E34C0D18;
      v10[1] = a1;
      v10[2] = v9;
      v11 = v10;
      WTF::SuspendableWorkQueue::dispatch();
      result = (uint64_t)v11;
      if (v11)
        return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = &off_1E34C14C0;
    *(_QWORD *)(v8 + 8) = a1;
    *(_BYTE *)(v8 + 16) = a2;
    *(_QWORD *)(v8 + 24) = v7;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v9 = v8;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = &off_1E34C0D18;
      v10[1] = a1;
      v10[2] = v9;
      v11 = v10;
      WTF::SuspendableWorkQueue::dispatch();
      result = (uint64_t)v11;
      if (v11)
        return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v5 = *a3;
  *a3 = 0;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34C14E8;
  *(_QWORD *)(v6 + 8) = a1;
  *(_BYTE *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::performDailyTasks(unsigned __int8 **this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34C1B50;
  v2[1] = this;
  if (*((_BYTE *)this + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v3 = v2;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v4 = &off_1E34C0D18;
    v4[1] = this;
    v4[2] = v3;
    v6 = (uint64_t)v4;
    WTF::SuspendableWorkQueue::dispatch();
    result = v6;
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

void WebKit::WebResourceLoadStatisticsStore::~WebResourceLoadStatisticsStore(WebKit::ResourceLoadStatisticsStore **this)
{
  WTF::RunLoop *v2;
  WTF::StringImpl *v3;
  WebKit::ResourceLoadStatisticsStore *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WebKit::ResourceLoadStatisticsStore *v11;
  void *v12;
  WTF::WorkQueue *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v2 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19711B238);
  }
  if (this[3])
  {
    __break(0xC471u);
    JUMPOUT(0x19711B258);
  }
  v4 = this[13];
  if (v4)
  {
    v5 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)((char *)v4 + 16);
      do
      {
        if (*(v6 - 1) != (WTF::StringImpl *)-1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v3);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WebKit::ResourceLoadStatisticsStore *)((char *)v4 - 16), v3);
  }
  v8 = (uint64_t)this[11];
  if (v8)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v8, v3);
  v9 = (WTF::StringImpl **)this[10];
  if (v9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v3);
  v10 = (WTF::StringImpl **)this[9];
  if (v10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v3);
  this[4] = (WebKit::ResourceLoadStatisticsStore *)off_1E34ABE00;
  v11 = this[7];
  this[7] = 0;
  if (v11)
    (*(void (**)(WebKit::ResourceLoadStatisticsStore *))(*(_QWORD *)v11 + 8))(v11);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(this + 4));
  std::unique_ptr<WebKit::ResourceLoadStatisticsStore>::reset[abi:sn180100](this + 3, 0);
  v13 = this[2];
  this[2] = 0;
  if (v13)
    WTF::WorkQueue::deref(v13);
  v14 = (unsigned int *)this[1];
  this[1] = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v12);
    }
  }
}

uint64_t WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::RunLoop *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34C1560;
  v4[1] = v3;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v4;
  v7 = (unsigned int *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  do
    v10 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v10 + 1, (unsigned int *)v6));
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E34C1588;
  v11[1] = v6;
  v15 = v11;
  WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(a1, (uint64_t *)&v15);
  result = (uint64_t)v15;
  if (v15)
    result = (*(uint64_t (**)(_QWORD *))(*v15 + 8))(v15);
  do
  {
    v13 = __ldaxr((unsigned int *)v6);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v6));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)v6);
    v15 = (_QWORD *)v6;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v15);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(WTF::RunLoop *a1, uint64_t *a2)
{
  WTF::RunLoop *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = (WTF::RunLoop *)WTF::RunLoop::main(a1);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0)
    goto LABEL_8;
  if (*((_BYTE *)a1 + 64))
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
  v7 = *a2;
  *a2 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E34C15B0;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = v7;
  if (*((_BYTE *)a1 + 64))
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x19711B48CLL);
  }
  v9 = v8;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34C0D18;
  v10[1] = a1;
  v10[2] = v9;
  v11 = v10;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(unsigned __int8 ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::NetworkStorageSession *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  if (*(_BYTE *)(a1 + 64))
  {
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 32);
        v16 = *(_QWORD **)(v9 + 24);
        v11 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 216), &v16);
        if (v11)
          WebCore::NetworkStorageSession::setTrackingPreventionDebugLoggingEnabled(v11);
      }
    }
    v12 = *a3;
    *a3 = 0;
    v13 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v13 = &off_1E34C1650;
    *(_QWORD *)(v13 + 8) = a1;
    *(_BYTE *)(v13 + 16) = a2;
    *(_QWORD *)(v13 + 24) = v12;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v14 = v13;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v15 = &off_1E34C0D18;
      v15[1] = a1;
      v15[2] = v14;
      v16 = v15;
      WTF::SuspendableWorkQueue::dispatch();
      result = (uint64_t)v16;
      v16 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD *v18;

  if (*(_BYTE *)(a1 + 64))
  {
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    WebCore::RegistrableDomain::isolatedCopy(&v16);
    v7 = *a3;
    *a3 = 0;
    v17 = v7;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v8 = &off_1E34C1678;
    v8[1] = a1;
    v8[2] = v16;
    v9 = v17;
    v16 = 0;
    v17 = 0;
    v8[3] = v9;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v10 = v8;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = &off_1E34C0D18;
      v11[1] = a1;
      v11[2] = v10;
      v18 = v11;
      WTF::SuspendableWorkQueue::dispatch();
      v13 = v18;
      v18 = 0;
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      v14 = v17;
      v17 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      result = (uint64_t)v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C16A0;
  v4[1] = a1;
  v4[2] = v3;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C0D18;
    v6[1] = a1;
    v6[2] = v5;
    v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v8;
    if (v8)
      return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C16C8;
  v4[1] = a1;
  v4[2] = v3;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C0D18;
    v6[1] = a1;
    v6[2] = v5;
    v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v8;
    if (v8)
      return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  v4 = *(unsigned __int8 ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return a1;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t hasStorageAccess;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  _QWORD *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32[2];
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  WTF::StringImpl *v39;
  _QWORD *v40;

  if (*(_BYTE *)(a1 + 64))
  {
    v38 = *a4;
    v39 = (WTF::StringImpl *)*((_QWORD *)a4 + 2);
    v10 = *(_QWORD *)(a1 + 8);
    if (v10
      && (v11 = *(_QWORD *)(v10 + 8)) != 0
      && (v12 = *(_QWORD *)(v11 + 32),
          v32[0] = *(WTF::StringImpl **)(v11 + 24),
          WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 216), v32)))
    {
      *(_OWORD *)v32 = v38;
      v33 = v39;
      hasStorageAccess = WebCore::NetworkStorageSession::hasStorageAccess();
      v14 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, hasStorageAccess);
    }
    else
    {
      v14 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 8);
    if (v16
      && (v17 = *(_QWORD *)(v16 + 8)) != 0
      && (v18 = *(_QWORD *)(v17 + 32),
          v32[0] = *(WTF::StringImpl **)(v17 + 24),
          WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v18 + 216), v32)))
    {
      canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction();
    }
    else
    {
      canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = 0;
    }
    v32[0] = (WTF::StringImpl *)a1;
    WebCore::RegistrableDomain::isolatedCopy(&v32[1]);
    WebCore::RegistrableDomain::isolatedCopy(&v33);
    v34 = *a4;
    LOBYTE(v35) = *((_BYTE *)a4 + 16);
    *((_QWORD *)&v35 + 1) = a5;
    v36 = canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
    v20 = *a6;
    *a6 = 0;
    v37 = v20;
    v21 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v21 = &off_1E34C1790;
    *(WTF::StringImpl **)(v21 + 8) = v32[0];
    *(WTF::StringImpl **)(v21 + 16) = v32[1];
    v22 = v33;
    v32[1] = 0;
    v33 = 0;
    *(_QWORD *)(v21 + 24) = v22;
    v23 = v34;
    v24 = v35;
    *(_BYTE *)(v21 + 64) = v36;
    *(_OWORD *)(v21 + 32) = v23;
    *(_OWORD *)(v21 + 48) = v24;
    v25 = v37;
    v37 = 0;
    *(_QWORD *)(v21 + 72) = v25;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v26 = v21;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v27 = &off_1E34C0D18;
      v27[1] = a1;
      v27[2] = v26;
      v40 = v27;
      WTF::SuspendableWorkQueue::dispatch();
      v29 = v40;
      v40 = 0;
      if (v29)
        (*(void (**)(_QWORD *))(*v29 + 8))(v29);
      v30 = v37;
      v37 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      v31 = v33;
      v33 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v28);
        else
          *(_DWORD *)v31 -= 2;
      }
      result = (uint64_t)v32[1];
      v32[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v28);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, const WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, char a8, uint64_t *a9)
{
  const WTF::StringImpl *v17;
  WTF::ASCIICaseInsensitiveHash *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
  void *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  const WTF::StringImpl *v32;
  WTF::ASCIICaseInsensitiveHash *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t result;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unsigned __int8 **v60;
  os_unfair_lock_s *v61;
  _BYTE v62[24];
  _BYTE v63[26];
  _BYTE v64[32];
  __int128 v65;
  __int128 v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  __int128 v73;
  WTF::StringImpl *v74[2];
  __int128 v75;
  __int128 v76;
  char v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  __int16 v87;
  char v88;
  const WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  _QWORD *v92;

  if (WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3))
  {
    v87 = 1;
    v88 = a8;
    v17 = *a3;
    *a3 = 0;
    v18 = *a2;
    *a2 = 0;
    v89 = v17;
    v90 = v18;
    WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(a9, (uint64_t)&v87);
    v20 = v90;
    v90 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    result = (uint64_t)v89;
    v89 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    LOBYTE(v83) = 0;
    v86 = 0;
    v21 = *(_QWORD *)(a1 + 8);
    if (v21
      && (v22 = *(_QWORD *)(v21 + 8)) != 0
      && (v23 = *(_QWORD *)(v22 + 32),
          *(_QWORD *)v62 = *(_QWORD *)(v22 + 24),
          WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 216), v62)))
    {
      canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction();
      WebCore::NetworkStorageSession::storageAccessQuirkForDomainPair();
      std::__optional_storage_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OrganizationStorageAccessPromptQuirk,false>>((WTF *)&v83, (WTF::StringImpl *)v62);
      std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v25);
    }
    else
    {
      canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = 0;
    }
    if (*(_BYTE *)(a1 + 64))
    {
      *(_QWORD *)&v73 = a4;
      *((_QWORD *)&v73 + 1) = a5;
      v92 = a7;
      v26 = *(_QWORD *)(a1 + 8);
      if (v26
        && *(_QWORD *)(v26 + 8)
        && ((canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction | WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 72), a2)) & 1) != 0)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
        v27 = *a2;
        if (*a2)
          *(_DWORD *)v27 += 2;
        v28 = *a3;
        if (*a3)
          *(_DWORD *)v28 += 2;
        *(_OWORD *)v62 = v73;
        v29 = *a9;
        *a9 = 0;
        v30 = WTF::fastMalloc((WTF *)0x50);
        *(_QWORD *)v30 = &off_1E34C1920;
        *(_QWORD *)(v30 + 8) = a1;
        *(_QWORD *)(v30 + 16) = a1;
        if (v27)
          *(_DWORD *)v27 += 2;
        *(_QWORD *)(v30 + 24) = v27;
        if (v28)
          *(_DWORD *)v28 += 2;
        *(_QWORD *)(v30 + 32) = v28;
        *(_OWORD *)(v30 + 40) = *(_OWORD *)v62;
        *(_QWORD *)(v30 + 56) = a6;
        *(_BYTE *)(v30 + 64) = a8;
        *(_QWORD *)(v30 + 72) = v29;
        v91 = v30;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v31);
          else
            *(_DWORD *)v28 -= 2;
        }
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v31);
          else
            *(_DWORD *)v27 -= 2;
        }
        v61 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 32) + 32);
        *(_QWORD *)v62 = &v92;
        *(_QWORD *)&v62[8] = &v73;
        *(_QWORD *)&v62[16] = a2;
        *(_QWORD *)v63 = a3;
        *(_QWORD *)&v63[8] = &v83;
        IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(v61, (uint64_t)v62, &v91);
        if (v91)
          (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
      }
      else
      {
        *(_WORD *)v62 = 0;
        v62[2] = a8;
        v32 = *a3;
        if (*a3)
          *(_DWORD *)v32 += 2;
        *(_QWORD *)&v62[8] = v32;
        v33 = *a2;
        if (*a2)
          *(_DWORD *)v33 += 2;
        *(_QWORD *)&v62[16] = v33;
        WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(a9, (uint64_t)v62);
        v35 = *(WTF::StringImpl **)&v62[16];
        *(_QWORD *)&v62[16] = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v34);
          else
            *(_DWORD *)v35 -= 2;
        }
        v58 = *(WTF::StringImpl **)&v62[8];
        *(_QWORD *)&v62[8] = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v34);
          else
            *(_DWORD *)v58 -= 2;
        }
      }
    }
    else
    {
      *(_QWORD *)&v73 = a1;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      *((_QWORD *)&v73 + 1) = a1;
      WebCore::RegistrableDomain::isolatedCopy(v74);
      WebCore::RegistrableDomain::isolatedCopy(&v74[1]);
      *(_QWORD *)&v75 = a4;
      *((_QWORD *)&v75 + 1) = a5;
      *(_QWORD *)&v76 = a6;
      *((_QWORD *)&v76 + 1) = a7;
      v77 = a8;
      LOBYTE(v78) = 0;
      v81 = 0;
      if (v86)
      {
        v36 = v83;
        v83 = 0uLL;
        v78 = v36;
        v79 = v84;
        *(_QWORD *)&v36 = v85;
        v84 = 0;
        v85 = 0;
        v80 = v36;
        v81 = 1;
      }
      v37 = *a9;
      *a9 = 0;
      v82 = v37;
      *(_QWORD *)v62 = a1;
      WebCore::RegistrableDomain::isolatedCopy((WTF::StringImpl **)&v62[8]);
      WebCore::RegistrableDomain::isolatedCopy((WTF::StringImpl **)&v62[16]);
      *(_OWORD *)v64 = v73;
      *(_OWORD *)&v64[16] = *(_OWORD *)v74;
      v65 = v75;
      *(_QWORD *)v63 = a4;
      *(_QWORD *)&v63[8] = a5;
      *(_QWORD *)&v63[16] = a6;
      v63[24] = a8;
      v63[25] = canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
      *((_QWORD *)&v73 + 1) = 0;
      v74[0] = 0;
      v74[1] = 0;
      v66 = v76;
      v67 = v77;
      LOBYTE(v68) = 0;
      v71 = 0;
      if (v81)
      {
        v38 = v78;
        v78 = 0uLL;
        v68 = v38;
        v69 = v79;
        *(_QWORD *)&v38 = v80;
        v79 = 0;
        v80 = 0;
        v70 = v38;
        v71 = 1;
      }
      v39 = v82;
      v82 = 0;
      v72 = v39;
      v40 = WTF::fastMalloc((WTF *)0xB8);
      v41 = v40;
      *(_QWORD *)v40 = off_1E34C1858;
      *(_QWORD *)(v40 + 8) = *(_QWORD *)v62;
      *(_QWORD *)(v40 + 16) = *(_QWORD *)&v62[8];
      v42 = *(_QWORD *)&v62[16];
      *(_OWORD *)&v62[8] = 0u;
      *(_QWORD *)(v40 + 24) = v42;
      v43 = *(_OWORD *)v63;
      *(_OWORD *)(v40 + 42) = *(_OWORD *)&v63[10];
      *(_OWORD *)(v40 + 32) = v43;
      *(_OWORD *)(v40 + 64) = *(_OWORD *)v64;
      v44 = *(_QWORD *)&v64[16];
      *(_OWORD *)&v64[8] = 0u;
      *(_QWORD *)(v40 + 80) = v44;
      v45 = *(_QWORD *)&v64[24];
      *(_QWORD *)&v64[24] = 0;
      *(_QWORD *)(v40 + 88) = v45;
      v46 = v65;
      v47 = v66;
      *(_BYTE *)(v40 + 128) = v67;
      *(_OWORD *)(v40 + 96) = v46;
      *(_OWORD *)(v40 + 112) = v47;
      *(_BYTE *)(v40 + 136) = 0;
      *(_BYTE *)(v40 + 168) = 0;
      if (v71)
      {
        *(_QWORD *)(v40 + 136) = v68;
        v48 = *((_QWORD *)&v68 + 1);
        v68 = 0uLL;
        *(_QWORD *)(v40 + 144) = v48;
        *(_QWORD *)(v40 + 152) = v69;
        v49 = v70;
        v69 = 0;
        v70 = 0;
        *(_QWORD *)(v40 + 160) = v49;
        *(_BYTE *)(v40 + 168) = 1;
      }
      v50 = v72;
      v72 = 0;
      *(_QWORD *)(v40 + 176) = v50;
      if (*(_BYTE *)(a1 + 64))
      {
        result = 200;
        __break(0xC471u);
        return result;
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v51 = &off_1E34C0D18;
      v51[1] = a1;
      v51[2] = v41;
      v92 = v51;
      WTF::SuspendableWorkQueue::dispatch();
      v53 = v92;
      v92 = 0;
      if (v53)
        (*(void (**)(_QWORD *))(*v53 + 8))(v53);
      WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::~$_1(v62, v52);
      v55 = v82;
      v82 = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78, v54);
      v56 = v74[1];
      v74[1] = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v34);
        else
          *(_DWORD *)v56 -= 2;
      }
      v59 = v74[0];
      v74[0] = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v34);
        else
          *(_DWORD *)v59 -= 2;
      }
      v60 = (unsigned __int8 **)*((_QWORD *)&v73 + 1);
      *((_QWORD *)&v73 + 1) = 0;
      if (v60)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v60);
    }
    return std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v83, v34);
  }
  return result;
}

_QWORD *WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::~$_1(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = a1[21];
  a1[21] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 16), a2);
  v5 = (WTF::StringImpl *)a1[10];
  a1[10] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned __int8 **)a1[8];
  a1[8] = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v7);
  v8 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v4);
    else
      *(_DWORD *)v9 -= 2;
  }
  return a1;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  id v17;
  uint64_t v18[2];
  IPC::Encoder *v19;

  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34C1830;
  v6[1] = v5;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 336;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 24));
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(unsigned __int8 *)(v9 + 32);
  v11 = IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1);
  if (v10)
  {
    *v11 = 1;
    if (!*(_BYTE *)(v9 + 32))
    {
      v17 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(v17);
    }
    IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::encode((IPC::Encoder *)v8, (uint64_t *)v9);
  }
  else
  {
    *v11 = 0;
  }
  v18[0] = (uint64_t)v6;
  v18[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v19, v18, 0, 0);
  v13 = v18[0];
  v18[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  if (*(_BYTE *)(a1 + 64))
    return WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpenerEphemeral(a1);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9
    && (v10 = *(_QWORD *)(v9 + 8)) != 0
    && (v11 = *(_QWORD *)(v10 + 32),
        v18 = *(_QWORD **)(v10 + 24),
        WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 216), &v18)))
  {
    canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction();
  }
  else
  {
    canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = 0;
  }
  v13 = *a2;
  *a2 = 0;
  v14 = *a4;
  *a4 = 0;
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v15 = &off_1E34C1948;
  *(_QWORD *)(v15 + 8) = a1;
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)(v15 + 32) = v14;
  *(_BYTE *)(v15 + 40) = canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v16 = v15;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v17 = &off_1E34C0D18;
    v17[1] = a1;
    v17[2] = v16;
    v18 = v17;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpenerEphemeral(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 32);
      v4 = *(_QWORD *)(v2 + 24);
      result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 216), &v4);
      if (result)
        return WebCore::NetworkStorageSession::grantStorageAccess();
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, WTF::StringImpl *this)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  const WTF::StringImpl *v8;
  int i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  v17 = a2;
  v18 = a3;
  if (this)
    *(_DWORD *)this += 2;
  v19 = this;
  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
  {
    v15 = 1;
    goto LABEL_25;
  }
  v6 = *(_DWORD *)(v5 - 8);
  v7 = WTF::PairHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>::hash((uint64_t)&v17);
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v6;
    v11 = v5 + 48 * (v7 & v6);
    v12 = *(_QWORD *)(v11 + 8);
    if (*(_OWORD *)v11 == 0)
      break;
LABEL_8:
    if (v12 != -1)
    {
      v13 = *(WTF::StringImpl **)v11 == v17 && v12 == v18;
      if (v13 && (WTF::equalIgnoringASCIICase(*(WTF **)(v11 + 16), v19, v8) & 1) != 0)
      {
        v14 = *(_QWORD *)(a1 + 104);
        if (!v14)
          goto LABEL_20;
        goto LABEL_31;
      }
    }
    ++i;
  }
  if ((WTF::equal(*(WTF **)(v11 + 16), 0, v8) & 1) == 0)
  {
    v12 = *(_QWORD *)(v11 + 8);
    goto LABEL_8;
  }
  v14 = *(_QWORD *)(a1 + 104);
  if (!v14)
    goto LABEL_17;
  v11 = v14 + 48 * *(unsigned int *)(v14 - 4);
LABEL_31:
  v14 += 48 * *(unsigned int *)(v14 - 4);
LABEL_20:
  if (v14 == v11)
  {
LABEL_17:
    v15 = 1;
    goto LABEL_24;
  }
  if (*(double *)(v11 + 32) < *(double *)(v11 + 40))
    v15 = 1;
  else
    v15 = 2;
LABEL_24:
  this = v19;
LABEL_25:
  v19 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      WTF::StringImpl::destroy(this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  return v15;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  WTF::StringImpl **v17;
  _QWORD *v18;

  if (!*(_BYTE *)(a1 + 64) && *a2 && *(_DWORD *)(*a2 - 12))
  {
    WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t)a2, a3, (uint64_t *)&v17);
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 32);
        v18 = *(_QWORD **)(v8 + 24);
        if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 216), &v18))
        {
          WebCore::NetworkStorageSession::setAppBoundDomains();
          WebCore::NetworkStorageSession::setThirdPartyCookieBlockingMode();
        }
      }
    }
    v10 = v17;
    v17 = 0;
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v12 = &off_1E34C1B00;
    v12[1] = a1;
    v12[2] = v10;
    v12[3] = v11;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v13 = v12;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = &off_1E34C0D18;
      v14[1] = a1;
      v14[2] = v13;
      v18 = v14;
      WTF::SuspendableWorkQueue::dispatch();
      v16 = v18;
      v18 = 0;
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      result = (uint64_t)v17;
      if (v17)
        return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v15);
    }
  }
  else
  {
    v4 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setManagedDomains(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  WTF::StringImpl **v17;
  _QWORD *v18;

  if (!*(_BYTE *)(a1 + 64) && *a2 && *(_DWORD *)(*a2 - 12))
  {
    WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t)a2, a3, (uint64_t *)&v17);
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 32);
        v18 = *(_QWORD **)(v8 + 24);
        if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 216), &v18))
        {
          WebCore::NetworkStorageSession::setManagedDomains();
          WebCore::NetworkStorageSession::setThirdPartyCookieBlockingMode();
        }
      }
    }
    v10 = v17;
    v17 = 0;
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v12 = &off_1E34C1B28;
    v12[1] = a1;
    v12[2] = v10;
    v12[3] = v11;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v13 = v12;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = &off_1E34C0D18;
      v14[1] = a1;
      v14[2] = v13;
      v18 = v14;
      WTF::SuspendableWorkQueue::dispatch();
      v16 = v18;
      v18 = 0;
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      result = (uint64_t)v17;
      if (v17)
        return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v15);
    }
  }
  else
  {
    v4 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::logUserInteraction(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD *v18;

  if (*(_BYTE *)(a1 + 64))
  {
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(a1 + 72), a2, (uint64_t)&v15);
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v15 = a1;
    WebCore::RegistrableDomain::isolatedCopy(&v16);
    v7 = *a3;
    *a3 = 0;
    v17 = v7;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v8 = &off_1E34C1BA0;
    v8[1] = v15;
    v8[2] = v16;
    v9 = v17;
    v16 = 0;
    v17 = 0;
    v8[3] = v9;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v10 = v8;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = &off_1E34C0D18;
      v11[1] = a1;
      v11[2] = v10;
      v18 = v11;
      WTF::SuspendableWorkQueue::dispatch();
      v13 = v18;
      v18 = 0;
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      v14 = v17;
      v17 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      result = (uint64_t)v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;

  WebCore::RegistrableDomain::isolatedCopy(&v20);
  WebCore::RegistrableDomain::isolatedCopy(&v21);
  v22 = a4;
  v8 = *a5;
  *a5 = 0;
  v23 = v8;
  v9 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v9 = &off_1E34C1BF0;
  *(_QWORD *)(v9 + 8) = a1;
  *(_QWORD *)(v9 + 16) = v20;
  v10 = v21;
  v20 = 0;
  v21 = 0;
  *(_QWORD *)(v9 + 24) = v10;
  *(_BYTE *)(v9 + 32) = v22;
  v11 = v23;
  v23 = 0;
  *(_QWORD *)(v9 + 40) = v11;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v12 = v9;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = &off_1E34C0D18;
    v13[1] = a1;
    v13[2] = v12;
    v24 = v13;
    WTF::SuspendableWorkQueue::dispatch();
    v15 = v24;
    v24 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    v16 = v23;
    v23 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = (uint64_t)v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;

  if (*(_BYTE *)(a1 + 64))
    return WebKit::WebResourceLoadStatisticsStore::clearUserInteractionEphemeral(a1, a2, a3);
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  v6 = *a3;
  *a3 = 0;
  v16 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34C1C18;
  v7[1] = a1;
  v7[2] = v15;
  v8 = v16;
  v15 = 0;
  v16 = 0;
  v7[3] = v8;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v9 = v7;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34C0D18;
    v10[1] = a1;
    v10[2] = v9;
    v17 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v13 = v16;
    v16 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::clearUserInteractionEphemeral(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t *a3)
{
  uint64_t *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;

  v5 = (uint64_t *)(a1 + 72);
  v6 = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 72), a2);
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = (WTF::StringImpl **)(v7 + 8 * *(unsigned int *)(v7 - 4));
    if (v8 == v6)
      goto LABEL_5;
  }
  else
  {
    if (!v6)
      goto LABEL_5;
    v8 = 0;
  }
  if (v8 != v6)
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(v5, v6);
LABEL_5:
  v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v5 = *a2;
  *a2 = 0;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34C1C68;
  *(_QWORD *)(v6 + 8) = a1;
  *(double *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD *v19;

  if (*(_BYTE *)(a1 + 64))
  {
    v5 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 72), a2);
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    WebCore::RegistrableDomain::isolatedCopy(&v17);
    v8 = *a3;
    *a3 = 0;
    v18 = v8;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v9 = &off_1E34C1C90;
    v9[1] = a1;
    v9[2] = v17;
    v10 = v18;
    v17 = 0;
    v18 = 0;
    v9[3] = v10;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v11 = v9;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = &off_1E34C0D18;
      v12[1] = a1;
      v12[2] = v11;
      v19 = v12;
      WTF::SuspendableWorkQueue::dispatch();
      v14 = v19;
      v19 = 0;
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
      v15 = v18;
      v18 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      result = (uint64_t)v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setLastSeen(uint64_t a1, double a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  WTF::StringImpl *v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;

  WebCore::RegistrableDomain::isolatedCopy(&v17);
  v18 = a2;
  v7 = *a4;
  *a4 = 0;
  v19 = v7;
  v8 = (double *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = &off_1E34C1CE0;
  *((_QWORD *)v8 + 1) = a1;
  *((_QWORD *)v8 + 2) = v17;
  v8[3] = v18;
  v9 = v19;
  v17 = 0;
  v19 = 0;
  *((_QWORD *)v8 + 4) = v9;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v10 = v8;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = &off_1E34C0D18;
    v11[1] = a1;
    v11[2] = v10;
    v20 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    v13 = v20;
    v20 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v14 = v19;
    v19 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    result = (uint64_t)v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, int a11, uint64_t *a12)
{
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t result;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;

  WebCore::RegistrableDomain::isolatedCopy(&v33);
  WebCore::RegistrableDomain::isolatedCopy(&v34);
  WebCore::RegistrableDomain::isolatedCopy(&v35);
  *(double *)&v36 = a2;
  BYTE8(v36) = a7;
  *(double *)&v37 = a3;
  BYTE8(v37) = a8;
  BYTE9(v37) = a9;
  BYTE10(v37) = a10;
  HIDWORD(v37) = a11;
  v19 = *a12;
  *a12 = 0;
  v38 = v19;
  v20 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v20 = &off_1E34C1D08;
  *(_QWORD *)(v20 + 8) = a1;
  *(_QWORD *)(v20 + 16) = v33;
  v21 = v34;
  v33 = 0;
  v34 = 0;
  *(_QWORD *)(v20 + 24) = v21;
  *(_QWORD *)(v20 + 32) = v35;
  v22 = v37;
  *(_OWORD *)(v20 + 40) = v36;
  *(_OWORD *)(v20 + 56) = v22;
  v23 = v38;
  v35 = 0;
  v38 = 0;
  *(_QWORD *)(v20 + 72) = v23;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v24 = v20;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v25 = &off_1E34C0D18;
    v25[1] = a1;
    v25[2] = v24;
    v39 = v25;
    WTF::SuspendableWorkQueue::dispatch();
    v27 = v39;
    v39 = 0;
    if (v27)
      (*(void (**)(_QWORD *))(*v27 + 8))(v27);
    v28 = v38;
    v38 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v35;
    v35 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v26);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v34;
    v34 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v26);
      else
        *(_DWORD *)v30 -= 2;
    }
    result = (uint64_t)v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;

  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = *a4;
  *a4 = 0;
  v20 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E34C1D30;
  v7[1] = a1;
  v7[2] = v18;
  v8 = v19;
  v18 = 0;
  v19 = 0;
  v7[3] = v8;
  v9 = v20;
  v20 = 0;
  v7[4] = v9;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v10 = v7;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = &off_1E34C0D18;
    v11[1] = a1;
    v11[2] = v10;
    v21 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    v13 = v21;
    v21 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v14 = v20;
    v20 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;

  WebCore::RegistrableDomain::isolatedCopy(&v15);
  v5 = *a3;
  *a3 = 0;
  v16 = v5;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C1D80;
  v6[1] = a1;
  v6[2] = v15;
  v7 = v16;
  v15 = 0;
  v16 = 0;
  v6[3] = v7;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v8 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E34C0D18;
    v9[1] = a1;
    v9[2] = v8;
    v17 = v9;
    WTF::SuspendableWorkQueue::dispatch();
    v11 = v17;
    v17 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v12 = v16;
    v16 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;

  WebCore::RegistrableDomain::isolatedCopy(&v15);
  v5 = *a3;
  *a3 = 0;
  v16 = v5;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C1DA8;
  v6[1] = a1;
  v6[2] = v15;
  v7 = v16;
  v15 = 0;
  v16 = 0;
  v6[3] = v7;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v8 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E34C0D18;
    v9[1] = a1;
    v9[2] = v8;
    v17 = v9;
    WTF::SuspendableWorkQueue::dispatch();
    v11 = v17;
    v17 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v12 = v16;
    v16 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  uint64_t v14;
  WTF::StringImpl *v15;
  _QWORD *v16;

  v4 = *a3;
  *a3 = 0;
  v14 = v4;
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34C1DD0;
  v5[1] = a1;
  v5[2] = v14;
  v6 = v15;
  v15 = 0;
  v5[3] = v6;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v5;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v16 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    v10 = v16;
    v16 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C1DF8;
  v4[1] = a1;
  v4[2] = v3;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C0D18;
    v6[1] = a1;
    v6[2] = v5;
    v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v8;
    if (v8)
      return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD *v18;

  if (*(_BYTE *)(a1 + 64))
  {
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    WebCore::RegistrableDomain::isolatedCopy(&v16);
    v7 = *a3;
    *a3 = 0;
    v17 = v7;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v8 = &off_1E34C1E70;
    v8[1] = a1;
    v8[2] = v16;
    v9 = v17;
    v16 = 0;
    v17 = 0;
    v8[3] = v9;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v10 = v8;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = &off_1E34C0D18;
      v11[1] = a1;
      v11[2] = v10;
      v18 = v11;
      WTF::SuspendableWorkQueue::dispatch();
      v13 = v18;
      v18 = 0;
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      v14 = v17;
      v17 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      result = (uint64_t)v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;

  WebCore::RegistrableDomain::isolatedCopy(&v15);
  v5 = *a3;
  *a3 = 0;
  v16 = v5;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C1EC0;
  v6[1] = a1;
  v6[2] = v15;
  v7 = v16;
  v15 = 0;
  v16 = 0;
  v6[3] = v7;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v8 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E34C0D18;
    v9[1] = a1;
    v9[2] = v8;
    v17 = v9;
    WTF::SuspendableWorkQueue::dispatch();
    v11 = v17;
    v17 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v12 = v16;
    v16 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;

  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = *a4;
  *a4 = 0;
  v20 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E34C1F10;
  v7[1] = a1;
  v7[2] = v18;
  v8 = v19;
  v18 = 0;
  v19 = 0;
  v7[3] = v8;
  v9 = v20;
  v20 = 0;
  v7[4] = v9;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v10 = v7;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = &off_1E34C0D18;
    v11[1] = a1;
    v11[2] = v10;
    v21 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    v13 = v21;
    v21 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v14 = v20;
    v20 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;

  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = *a4;
  *a4 = 0;
  v20 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E34C1F60;
  v7[1] = a1;
  v7[2] = v18;
  v8 = v19;
  v18 = 0;
  v19 = 0;
  v7[3] = v8;
  v9 = v20;
  v20 = 0;
  v7[4] = v9;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v10 = v7;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = &off_1E34C0D18;
    v11[1] = a1;
    v11[2] = v10;
    v21 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    v13 = v21;
    v21 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v14 = v20;
    v20 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;

  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = *a4;
  *a4 = 0;
  v20 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E34C1FB0;
  v7[1] = a1;
  v7[2] = v18;
  v8 = v19;
  v18 = 0;
  v19 = 0;
  v7[3] = v8;
  v9 = v20;
  v20 = 0;
  v7[4] = v9;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v10 = v7;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = &off_1E34C0D18;
    v11[1] = a1;
    v11[2] = v10;
    v21 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    v13 = v21;
    v21 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v14 = v20;
    v20 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;

  WebCore::RegistrableDomain::isolatedCopy(&v15);
  v5 = *a3;
  *a3 = 0;
  v16 = v5;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C2000;
  v6[1] = a1;
  v6[2] = v15;
  v7 = v16;
  v15 = 0;
  v16 = 0;
  v6[3] = v7;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v8 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E34C0D18;
    v9[1] = a1;
    v9[2] = v8;
    v17 = v9;
    WTF::SuspendableWorkQueue::dispatch();
    v11 = v17;
    v17 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v12 = v16;
    v16 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setGrandfathered(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  WTF::StringImpl *v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;

  WebCore::RegistrableDomain::isolatedCopy(&v17);
  v18 = a3;
  v7 = *a4;
  *a4 = 0;
  v19 = v7;
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = &off_1E34C2028;
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 16) = v17;
  *(_BYTE *)(v8 + 24) = v18;
  v9 = v19;
  v17 = 0;
  v19 = 0;
  *(_QWORD *)(v8 + 32) = v9;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v10 = v8;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = &off_1E34C0D18;
    v11[1] = a1;
    v11[2] = v10;
    v20 = v11;
    WTF::SuspendableWorkQueue::dispatch();
    v13 = v20;
    v20 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v14 = v19;
    v19 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    result = (uint64_t)v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::isGrandfathered(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  uint64_t v14;
  WTF::StringImpl *v15;
  _QWORD *v16;

  v4 = *a3;
  *a3 = 0;
  v14 = v4;
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34C2050;
  v5[1] = a1;
  v5[2] = v14;
  v6 = v15;
  v15 = 0;
  v5[3] = v6;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v5;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v16 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    v10 = v16;
    v16 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;

  v5 = *a4;
  *a4 = 0;
  v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34C20A0;
  v6[1] = a1;
  v6[2] = v17;
  v7 = v18;
  v18 = 0;
  v6[3] = v7;
  v8 = v19;
  v19 = 0;
  v6[4] = v8;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34C0D18;
    v10[1] = a1;
    v10[2] = v9;
    v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    v12 = v20;
    v20 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;

  v5 = *a4;
  *a4 = 0;
  v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34C20C8;
  v6[1] = a1;
  v6[2] = v17;
  v7 = v18;
  v18 = 0;
  v6[3] = v7;
  v8 = v19;
  v19 = 0;
  v6[4] = v8;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34C0D18;
    v10[1] = a1;
    v10[2] = v9;
    v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    v12 = v20;
    v20 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;

  v5 = *a4;
  *a4 = 0;
  v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34C20F0;
  v6[1] = a1;
  v6[2] = v17;
  v7 = v18;
  v18 = 0;
  v6[3] = v7;
  v8 = v19;
  v19 = 0;
  v6[4] = v8;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34C0D18;
    v10[1] = a1;
    v10[2] = v9;
    v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    v12 = v20;
    v20 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;

  v5 = *a4;
  *a4 = 0;
  v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34C2118;
  v6[1] = a1;
  v6[2] = v17;
  v7 = v18;
  v18 = 0;
  v6[3] = v7;
  v8 = v19;
  v19 = 0;
  v6[4] = v8;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34C0D18;
    v10[1] = a1;
    v10[2] = v9;
    v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    v12 = v20;
    v20 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;

  v5 = *a4;
  *a4 = 0;
  v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34C2140;
  v6[1] = a1;
  v6[2] = v17;
  v7 = v18;
  v18 = 0;
  v6[3] = v7;
  v8 = v19;
  v19 = 0;
  v6[4] = v8;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34C0D18;
    v10[1] = a1;
    v10[2] = v9;
    v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    v12 = v20;
    v20 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;

  v5 = *a4;
  *a4 = 0;
  v17 = v5;
  WebCore::RegistrableDomain::isolatedCopy(&v18);
  WebCore::RegistrableDomain::isolatedCopy(&v19);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34C2168;
  v6[1] = a1;
  v6[2] = v17;
  v7 = v18;
  v18 = 0;
  v6[3] = v7;
  v8 = v19;
  v19 = 0;
  v6[4] = v8;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v9 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34C0D18;
    v10[1] = a1;
    v10[2] = v9;
    v20 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    v12 = v20;
    v20 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C2190;
  v4[1] = a1;
  v4[2] = v3;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C0D18;
    v6[1] = a1;
    v6[2] = v5;
    v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v8;
    if (v8)
      return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(uint64_t a1, char a2, WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  if (*(_BYTE *)(a1 + 64))
    return WebKit::WebResourceLoadStatisticsStore::clearInMemoryEphemeral(a1, a3);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
  v7 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = &off_1E34C21E0;
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = v7;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v9 = v8;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34C0D18;
    v10[1] = a1;
    v10[2] = v9;
    v11 = v10;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v11;
    if (v11)
      return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::clearInMemoryEphemeral(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v4;
  uint64_t v5;
  WebCore::NetworkStorageSession *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(WTF::StringImpl ***)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 32);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
  v6 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 216), &v9);
  if (v6)
    WebCore::NetworkStorageSession::removeAllStorageAccess(v6);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v5 = *a3;
  *a3 = 0;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34C2280;
  *(_QWORD *)(v6 + 8) = a1;
  *(_DWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v5 = *a2;
  *a2 = 0;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34C22D0;
  *(_QWORD *)(v6 + 8) = a1;
  *(double *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v5 = *a2;
  *a2 = 0;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34C22F8;
  *(_QWORD *)(v6 + 8) = a1;
  *(double *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v5 = *a2;
  *a2 = 0;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34C2320;
  *(_QWORD *)(v6 + 8) = a1;
  *(double *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::ASCIICaseInsensitiveHash **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  int v20;
  IPC::Encoder *v21;
  void *v22;
  const WTF::StringImpl *v23;
  WTF::ASCIICaseInsensitiveHash **v24;
  IPC::Encoder *v25;
  uint64_t v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  IPC::Encoder *v33;
  const WTF::StringImpl *v34;
  const WTF::StringImpl *v35;
  IPC::Encoder *v36;
  IPC::Encoder *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  const WTF::StringImpl *v46;
  const WTF::StringImpl *v47;
  _QWORD *v48;
  int v49;
  void *v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  int v63;
  IPC::Encoder *v64;
  uint64_t v65;
  IPC::Encoder *v66;
  const WTF::StringImpl *v67;
  WTF::ASCIICaseInsensitiveHash **v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  const WTF::StringImpl *v73;
  int v74;
  IPC::Encoder *v75;
  unint64_t v76;
  WTF **v77;
  const WTF::StringImpl **v78;
  unint64_t v79;
  const WTF::StringImpl **v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_unfair_lock_s *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  IPC::Encoder *v89;
  IPC::Encoder *v90;
  WTF *v91;
  void *v92;
  uint64_t v93;
  _QWORD *v95;
  IPC::Encoder *v97;
  __int128 v98;
  WTF::StringImpl *v99[2];
  WTF::StringImpl **v100;
  uint64_t v101;
  IPC::Encoder *v102;
  uint64_t v103;
  WTF::StringImpl *v104;

  v3 = a1[1];
  if (!v3)
    goto LABEL_132;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_132;
  v95 = a3;
  v6 = *(_QWORD *)(v4 + 32);
  v102 = *(IPC::Encoder **)(v4 + 24);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 216), &v102))
  {
    WebCore::NetworkStorageSession::setPrevalentDomainsToBlockAndDeleteCookiesFor();
    WebCore::NetworkStorageSession::setPrevalentDomainsToBlockButKeepCookiesFor();
    WebCore::NetworkStorageSession::setDomainsWithUserInteractionAsFirstParty();
  }
  v100 = 0;
  v9 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = *(WTF::ASCIICaseInsensitiveHash ***)(a2 + 32);
    do
    {
      if ((byte_1ECE72959 & 1) == 0)
      {
        v101 = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v104, v99);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&v101, v99, (uint64_t)&v102);
        v13 = v99[0];
        v99[0] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = v104;
        v104 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v104, v99);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&v101, v99, (uint64_t)&v102);
        v16 = v99[0];
        v99[0] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = v104;
        v104 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v15);
          else
            *(_DWORD *)v17 -= 2;
        }
        qword_1ECE72960 = v101;
        byte_1ECE72959 = 1;
      }
      if (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(&qword_1ECE72960, v11))WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v100, v11, (uint64_t)&v102);
      ++v11;
      v10 -= 8;
    }
    while (v10);
  }
  v19 = (WTF::StringImpl ***)(a1 + 10);
  v18 = a1[10];
  if (v18)
    LODWORD(v18) = *(_DWORD *)(v18 - 12);
  v20 = (int)v100;
  if (v100)
    v20 = *((_DWORD *)v100 - 3);
  if ((_DWORD)v18 != v20)
  {
LABEL_40:
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=(v19, (uint64_t *)&v100);
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 32) + 32);
    v29 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v29 = 343;
    *(_QWORD *)(v29 + 8) = 0;
    *(_QWORD *)(v29 + 528) = v29 + 16;
    *(_QWORD *)(v29 + 536) = v29 + 16;
    *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v29 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
    v102 = (IPC::Encoder *)v29;
    IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v29, (uint64_t *)&v100);
    IPC::Connection::sendMessageImpl(v28, (uint64_t *)&v102, 0, 0);
    v30 = v102;
    v102 = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v22);
      WTF::fastFree(v31, v32);
    }
    goto LABEL_42;
  }
  v21 = (IPC::Encoder *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)&v100, v7, v8);
  v24 = (WTF::ASCIICaseInsensitiveHash **)v21;
  v102 = v21;
  v103 = (uint64_t)v22;
  if (v100)
    v25 = (IPC::Encoder *)&v100[*((unsigned int *)v100 - 1)];
  else
    v25 = 0;
  if (v25 != v21)
  {
    while (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)v19, v24))
    {
      v102 = (IPC::Encoder *)((char *)v102 + 8);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v102, v26, v27);
      v24 = (WTF::ASCIICaseInsensitiveHash **)v102;
      if (v102 == v25)
        goto LABEL_42;
    }
    goto LABEL_40;
  }
LABEL_42:
  v101 = 0;
  v33 = (IPC::Encoder *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a2 + 48), (uint64_t)v22, v23);
  v36 = v33;
  v37 = 0;
  v102 = v33;
  v103 = (uint64_t)v34;
  v38 = *(_QWORD *)(a2 + 48);
  if (v38)
    v37 = (IPC::Encoder *)(v38 + 24 * *(unsigned int *)(v38 - 4));
  if (v37 == v33)
    goto LABEL_82;
  v97 = v37;
  do
  {
    v39 = *((unsigned int *)v36 + 5);
    if (!(_DWORD)v39)
      goto LABEL_81;
    v40 = (_QWORD *)*((_QWORD *)v36 + 1);
    v41 = &v40[v39];
    do
    {
      if (!WebCore::NetworkStorageSession::loginDomainMatchesRequestingDomain())
        goto LABEL_76;
      v99[0] = 0;
      v99[1] = 0;
      v42 = v101;
      if (v101
        || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(&v101, 0), (v42 = v101) != 0))
      {
        v43 = *(_DWORD *)(v42 - 8);
      }
      else
      {
        v43 = 0;
      }
      v44 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v36, v34) & v43;
      v45 = v42 + 24 * v44;
      if ((WTF::equal(*(WTF **)v45, 0, v46) & 1) == 0)
      {
        v48 = 0;
        v49 = 1;
        do
        {
          if (*(_QWORD *)v45 == -1)
          {
            v48 = (_QWORD *)v45;
          }
          else if ((WTF::equalIgnoringASCIICase(*(WTF **)v45, *(const WTF::StringImpl **)v36, v47) & 1) != 0)
          {
            goto LABEL_70;
          }
          v44 = (v44 + v49) & v43;
          v45 = v42 + 24 * v44;
          ++v49;
        }
        while (!WTF::equal(*(WTF **)v45, 0, v47));
        if (v48)
        {
          v48[1] = 0;
          v48[2] = 0;
          *v48 = 0;
          --*(_DWORD *)(v101 - 16);
          v45 = (uint64_t)v48;
        }
      }
      WTF::String::operator=((WTF::StringImpl **)v45, v36);
      WTF::GenericHashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v45 + 8, v99);
      if (v101)
        v51 = *(_DWORD *)(v101 - 12) + 1;
      else
        v51 = 1;
      *(_DWORD *)(v101 - 12) = v51;
      if (v101)
        v52 = *(_DWORD *)(v101 - 12);
      else
        v52 = 0;
      v53 = (*(_DWORD *)(v101 - 16) + v52);
      v54 = *(unsigned int *)(v101 - 4);
      if (v54 > 0x400)
      {
        if (v54 > 2 * v53)
          goto LABEL_70;
LABEL_69:
        v45 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(&v101, (WTF::StringImpl **)v45);
        goto LABEL_70;
      }
      if (3 * v54 <= 4 * v53)
        goto LABEL_69;
LABEL_70:
      v55 = (uint64_t *)(v45 + 8);
      v56 = *(unsigned int *)(v45 + 20);
      if ((_DWORD)v56 == *(_DWORD *)(v45 + 16))
      {
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v55, (unint64_t)v40);
      }
      else
      {
        v57 = *v55;
        v58 = (_DWORD *)*v40;
        if (*v40)
          *v58 += 2;
        *(_QWORD *)(v57 + 8 * v56) = v58;
        *(_DWORD *)(v45 + 20) = v56 + 1;
      }
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v99, v50);
LABEL_76:
      ++v40;
    }
    while (v40 != v41);
    v36 = v102;
    v37 = v97;
LABEL_81:
    v102 = (IPC::Encoder *)((char *)v36 + 24);
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v102, (uint64_t)v34, v35);
    v36 = v102;
  }
  while (v102 != v37);
LABEL_82:
  v59 = (WTF::StringImpl *)a1;
  v60 = a1[11];
  if (v60)
    v61 = *(_DWORD *)(v60 - 12);
  else
    v61 = 0;
  v62 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(WTF::String const&)::constantValues;
  if (v101)
    v63 = *(_DWORD *)(v101 - 12);
  else
    v63 = 0;
  if (v61 != v63)
    goto LABEL_117;
  if (v60)
  {
    v64 = (IPC::Encoder *)(v60 + 24 * *(unsigned int *)(v60 - 4));
    if (v101)
      goto LABEL_93;
LABEL_91:
    v65 = 0;
  }
  else
  {
    v64 = 0;
    if (!v101)
      goto LABEL_91;
LABEL_93:
    v65 = v101 + 24 * *(unsigned int *)(v101 - 4);
  }
  v66 = (IPC::Encoder *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1 + 11, (uint64_t)v34, v35);
  v102 = v66;
  v103 = (uint64_t)v34;
  if (v64 == v66)
    goto LABEL_127;
  v68 = (WTF::ASCIICaseInsensitiveHash **)v66;
  while (2)
  {
    v69 = v101;
    if (!v101)
    {
LABEL_103:
      v72 = 0;
      goto LABEL_105;
    }
    v70 = *(_DWORD *)(v101 - 8);
    v71 = WTF::ASCIICaseInsensitiveHash::hash(*v68, v34) & v70;
    v72 = v69 + 24 * v71;
    if ((WTF::equal(*(WTF **)v72, 0, v73) & 1) != 0)
    {
LABEL_102:
      if (v101)
      {
        v72 = v101 + 24 * *(unsigned int *)(v101 - 4);
        goto LABEL_105;
      }
      goto LABEL_103;
    }
    v74 = 1;
    while (*(_QWORD *)v72 == -1 || (WTF::equalIgnoringASCIICase(*(WTF **)v72, *v68, v67) & 1) == 0)
    {
      v71 = (v71 + v74) & v70;
      v72 = v69 + 24 * v71;
      ++v74;
      if (WTF::equal(*(WTF **)v72, 0, v67))
        goto LABEL_102;
    }
LABEL_105:
    if (v65 != v72)
    {
      v75 = v102;
      v76 = *((unsigned int *)v102 + 5);
      if ((_DWORD)v76 == *(_DWORD *)(v72 + 20))
      {
        if ((_DWORD)v76)
        {
          v77 = (WTF **)*((_QWORD *)v102 + 1);
          v78 = *(const WTF::StringImpl ***)(v72 + 8);
          if (!WTF::equal(*v77, *v78, v67))
            break;
          v79 = 0;
          v80 = v78 + 1;
          while (v76 - 1 != v79)
          {
            v81 = WTF::equal(v77[v79 + 1], v80[v79], v67);
            ++v79;
            if ((v81 & 1) == 0)
            {
              if (v79 < v76)
                goto LABEL_116;
              break;
            }
          }
          v75 = v102;
        }
        v102 = (IPC::Encoder *)((char *)v75 + 24);
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v102, (uint64_t)v34, v67);
        v68 = (WTF::ASCIICaseInsensitiveHash **)v102;
        if (v102 == v64)
          goto LABEL_127;
        continue;
      }
    }
    break;
  }
LABEL_116:
  v59 = (WTF::StringImpl *)a1;
  v62 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(WTF::String const&)::constantValues;
LABEL_117:
  v82 = *((_QWORD *)v59 + 1);
  if (v82)
  {
    v83 = *(_QWORD *)(v82 + 8);
    if (v83)
    {
      v84 = *(_QWORD *)(v83 + 32);
      v102 = *(IPC::Encoder **)(v83 + 24);
      if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v84 + 216), &v102))
      {
        WebCore::NetworkStorageSession::setDomainsWithCrossPageStorageAccess();
      }
      v85 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v59 + 1) + 8) + 32) + 32);
      v99[0] = v59;
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v99[1], &v101);
      v98 = *(_OWORD *)v99;
      v99[1] = 0;
      v86 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v86 = &off_1E34C2348;
      *(_OWORD *)(v86 + 8) = v98;
      v87 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v88 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v88 = 342;
      *(_QWORD *)(v88 + 8) = 0;
      *(_QWORD *)(v88 + 528) = v88 + 16;
      *(_QWORD *)(v88 + 536) = v88 + 16;
      *(_OWORD *)(v88 + 544) = *((_OWORD *)v62 + 45);
      *(_OWORD *)(v88 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v88);
      v104 = (WTF::StringImpl *)v88;
      IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>((IPC::Encoder *)v88, &v101);
      v102 = (IPC::Encoder *)v86;
      v103 = v87;
      IPC::Connection::sendMessageWithAsyncReply(v85, &v104, (uint64_t *)&v102, 0, 0);
      v89 = v102;
      v102 = 0;
      if (v89)
        (*(void (**)(IPC::Encoder *))(*(_QWORD *)v89 + 8))(v89);
      v90 = v104;
      v104 = 0;
      if (v90)
      {
        IPC::Encoder::~Encoder(v90, v34);
        WTF::fastFree(v91, v92);
      }
      if (v99[1])
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)v99[1], v34);
    }
  }
LABEL_127:
  if (v101)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v101, v34);
  if (v100)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v100, v34);
  a3 = v95;
LABEL_132:
  v93 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C2370;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C2398;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::NetworkStorageSession *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::NetworkStorageSession *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 32);
        v18 = *(_QWORD **)(v7 + 24);
        v9 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 216), &v18);
        if (v9)
          WebCore::NetworkStorageSession::resetAppBoundDomains(v9);
      }
      v10 = *(_QWORD *)(a1 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 32);
          v18 = *(_QWORD **)(v11 + 24);
          v13 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 216), &v18);
          if (v13)
            WebCore::NetworkStorageSession::resetManagedDomains(v13);
        }
      }
    }
    v14 = *a2;
    *a2 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = &off_1E34C23C0;
    v15[1] = a1;
    v15[2] = v14;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v16 = v15;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v17 = &off_1E34C0D18;
      v17[1] = a1;
      v17[2] = v16;
      v18 = v17;
      WTF::SuspendableWorkQueue::dispatch();
      result = (uint64_t)v18;
      v18 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::LogTestingEvent>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 322;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C23E8;
  v6[1] = a1;
  v6[2] = v4;
  v6[3] = v5;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v7 = v6;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C0D18;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::registrableDomains(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[2];

  if (*(_BYTE *)(a1 + 64))
  {
    v10[0] = 0;
    v10[1] = 0;
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v3);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E34C2410;
    v7[1] = a1;
    v7[2] = v6;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v8 = v7;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v9 = &off_1E34C0D18;
      v9[1] = a1;
      v9[2] = v8;
      v10[0] = v9;
      WTF::SuspendableWorkQueue::dispatch();
      result = v10[0];
      v10[0] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  WTF::StringImpl *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  WTF::StringImpl **v9;
  char v10;
  _QWORD *v11;

  if (*(_BYTE *)(a1 + 64))
  {
    LOBYTE(v9) = 0;
    v10 = 0;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(a2, (uint64_t)&v9);
    if (v10)
    {
      result = (uint64_t)v9;
      if (v9)
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v3);
    }
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C2460;
    v6[1] = a1;
    v6[2] = v5;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v7 = v6;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = &off_1E34C0D18;
      v8[1] = a1;
      v8[2] = v7;
      v11 = v8;
      WTF::SuspendableWorkQueue::dispatch();
      result = (uint64_t)v11;
      v11 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl **v10;

  if (*(_BYTE *)(a1 + 64))
  {
    v10 = 0;
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v2 + 16))(v2, &v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (uint64_t)v10;
    if (v10)
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v3);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E34C24B0;
    v7[1] = a1;
    v7[2] = v6;
    if (*(_BYTE *)(a1 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v8 = v7;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
      v9 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v9 = &off_1E34C0D18;
      *(_QWORD *)(v9 + 8) = a1;
      *(_QWORD *)(v9 + 16) = v8;
      v10 = (WTF::StringImpl **)v9;
      WTF::SuspendableWorkQueue::dispatch();
      result = (uint64_t)v10;
      v10 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C2500;
  v4[1] = a1;
  v4[2] = v3;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C0D18;
    v6[1] = a1;
    v6[2] = v5;
    v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v8;
    if (v8)
      return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(uint64_t a1, uint64_t a2, int a3, char a4, char a5, char a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  WTF::StringImpl *v23;
  _BYTE v24[7];
  uint64_t v25;
  _QWORD *v26;

  WebCore::RegistrableDomain::isolatedCopy(&v23);
  *(_DWORD *)v24 = a3;
  v24[4] = a4;
  v24[5] = a5;
  v24[6] = a6;
  v13 = *a7;
  *a7 = 0;
  v25 = v13;
  v14 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v14 = &off_1E34C2578;
  *(_QWORD *)(v14 + 8) = a1;
  *(_QWORD *)(v14 + 16) = v23;
  *(_DWORD *)(v14 + 27) = *(_DWORD *)&v24[3];
  *(_DWORD *)(v14 + 24) = *(_DWORD *)v24;
  v15 = v25;
  v23 = 0;
  v25 = 0;
  *(_QWORD *)(v14 + 32) = v15;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v16 = v14;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v17 = &off_1E34C0D18;
    v17[1] = a1;
    v17[2] = v16;
    v26 = v17;
    WTF::SuspendableWorkQueue::dispatch();
    v19 = v26;
    v26 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    v20 = v25;
    v25 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    result = (uint64_t)v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebResourceLoadStatisticsStore::recordFrameLoadForStorageAccess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  const WTF::StringImpl *v18;
  _OWORD *v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl *result;
  __int128 v33;
  WTF::StringImpl *v34;

  WTF::WallTime::now((WTF::WallTime *)a1);
  v11 = v10;
  *(_QWORD *)&v33 = a3;
  *((_QWORD *)&v33 + 1) = a4;
  v12 = *a5;
  if (*a5)
    *(_DWORD *)v12 += 2;
  v34 = v12;
  v15 = a1[13];
  v13 = a1 + 13;
  v14 = v15;
  if (v15
    || (WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::expand(v13, 0), (v14 = *v13) != 0))
  {
    v16 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = WTF::PairHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>::hash((uint64_t)&v33);
  v19 = 0;
  for (i = 1; ; ++i)
  {
    v21 = v17 & v16;
    v22 = v14 + 48 * (v17 & v16);
    v23 = *(_QWORD *)(v22 + 8);
    if (*(_OWORD *)v22 != 0)
      goto LABEL_10;
    if ((WTF::equal(*(WTF **)(v22 + 16), 0, v18) & 1) != 0)
      break;
    v23 = *(_QWORD *)(v22 + 8);
LABEL_10:
    if (v23 == -1)
    {
      v19 = (_OWORD *)(v14 + 48 * v21);
    }
    else
    {
      v24 = *(_QWORD *)v22 == (_QWORD)v33 && v23 == *((_QWORD *)&v33 + 1);
      if (v24 && (WTF::equalIgnoringASCIICase(*(WTF **)(v22 + 16), v34, v18) & 1) != 0)
        goto LABEL_29;
    }
    v17 = i + v21;
  }
  if (v19)
  {
    *v19 = 0u;
    v19[1] = 0u;
    v19[2] = xmmword_1978CF7C0;
    --*(_DWORD *)(*v13 - 16);
    v22 = (uint64_t)v19;
  }
  *(_OWORD *)v22 = v33;
  WTF::String::operator=((WTF::StringImpl **)(v22 + 16), (WTF::StringImpl *)&v34);
  *(_QWORD *)(v22 + 24) = a2;
  *(_QWORD *)(v22 + 32) = 0x7FF8000000000000;
  *(_QWORD *)(v22 + 40) = v11;
  v26 = *v13;
  if (*v13)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *v13;
  if (*v13)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
LABEL_28:
      v22 = WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::expand(v13, v22);
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
LABEL_29:
  *(_QWORD *)(v22 + 40) = v11;
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebResourceLoadStatisticsStore::clearFrameLoadRecordsForStorageAccess(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v3 = (uint64_t *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 104);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 4);
    if (v5)
    {
      v8 = 0;
      v9 = v5 - 1;
      do
      {
        v10 = v9;
        v11 = (WTF::StringImpl **)(v4 + 48 * v9);
        if (!WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::isEmptyOrDeletedBucket((uint64_t)v11, (uint64_t)a2, a3)&& *v11 == a2&& v11[1] == a3)
        {
          WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>(v4 + 48 * v9, a2);
          ++v8;
        }
        --v9;
      }
      while (v10);
      v13 = *v3;
      if (v8)
      {
        *(_DWORD *)(v13 - 16) += v8;
        v14 = *v3;
        if (*v3)
          v15 = *(_DWORD *)(v14 - 12);
        else
          v15 = 0;
        *(_DWORD *)(v14 - 12) = v15 - v8;
        v13 = *v3;
      }
      if (v13)
      {
        v16 = *(_DWORD *)(v13 - 4);
        v17 = 6 * *(_DWORD *)(v13 - 12);
        if (v16 >= 9 && v17 < v16)
          WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::shrinkToBestSize(v3);
      }
    }
  }
}

{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  v3 = (uint64_t *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 104);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 4);
    if (v5)
    {
      v7 = 0;
      v8 = v5 - 1;
      do
      {
        v9 = v8;
        if (!WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::isEmptyOrDeletedBucket(v4 + 48 * v8, (uint64_t)a2, a3)&& *(WTF::StringImpl **)(v4 + 48 * v8 + 24) == a2)
        {
          WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>(v4 + 48 * v8, a2);
          ++v7;
        }
        --v8;
      }
      while (v9);
      v10 = *v3;
      if (v7)
      {
        *(_DWORD *)(v10 - 16) += v7;
        v11 = *v3;
        if (*v3)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v7;
        v10 = *v3;
      }
      if (v10)
      {
        v13 = *(_DWORD *)(v10 - 4);
        v14 = 6 * *(_DWORD *)(v10 - 12);
        if (v13 >= 9 && v14 < v13)
          WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::shrinkToBestSize(v3);
      }
    }
  }
}

void WebKit::WebCookieManager::~WebCookieManager(WebKit::WebCookieManager *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34C0BD8;
  *((_QWORD *)this + 1) = &unk_1E34C0C10;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebCookieManager::~WebCookieManager(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebCookieManager::~WebCookieManager(WebKit::WebCookieManager *this, void *a2)
{
  WebKit::WebCookieManager::~WebCookieManager((WebKit::WebCookieManager *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebCookieManager::~WebCookieManager((WebKit::WebCookieManager *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebCookieManager::protectedProcess@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
  v3 = (unsigned int *)(v2 + 120);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *a2 = v2;
  return this;
}

WTF::StringImpl **WebKit::WebCookieManager::getHostnamesWithCookies(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **result;
  uint64_t v15[2];
  WTF::StringImpl **v16;

  v16 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v5 = (unsigned int *)(v4 + 120);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v15[0] = a2;
  v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 216), v15);
  v8 = v7;
  if (!v4)
    goto LABEL_6;
  do
  {
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (v10)
  {
LABEL_6:
    if (!v7)
      goto LABEL_8;
    goto LABEL_7;
  }
  atomic_store(1u, (unsigned int *)(v4 + 120));
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v8)
LABEL_7:
    WebCore::NetworkStorageSession::getHostnamesWithCookies();
LABEL_8:
  v15[0] = 0;
  v15[1] = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(v15, (uint64_t **)&v16);
  v11 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 16))(v11, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v12);
  result = v16;
  if (v16)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v13);
  return result;
}

uint64_t WebKit::WebCookieManager::deleteCookiesForHostnames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v6 = (unsigned int *)(v5 + 120);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v14 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 216), &v14);
  v9 = v8;
  if (!v5)
    goto LABEL_6;
  do
  {
    v10 = __ldaxr(v6);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v6));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)(v5 + 120));
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v9)
      return WebCore::NetworkStorageSession::deleteCookiesForHostnames();
  }
  else
  {
LABEL_6:
    if (v8)
      return WebCore::NetworkStorageSession::deleteCookiesForHostnames();
  }
  v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WebKit::WebCookieManager::deleteAllCookies(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v5 = (unsigned int *)(v4 + 120);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v13 = a2;
  v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 216), &v13);
  v8 = v7;
  if (!v4)
    goto LABEL_6;
  do
  {
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)(v4 + 120));
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v8)
      return WebCore::NetworkStorageSession::deleteAllCookies();
  }
  else
  {
LABEL_6:
    if (v7)
      return WebCore::NetworkStorageSession::deleteAllCookies();
  }
  v12 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t WebKit::WebCookieManager::deleteCookie(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v6 = (unsigned int *)(v5 + 120);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v14 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 216), &v14);
  v9 = v8;
  if (!v5)
    goto LABEL_6;
  do
  {
    v10 = __ldaxr(v6);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v6));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)(v5 + 120));
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v9)
      return WebCore::NetworkStorageSession::deleteCookie();
  }
  else
  {
LABEL_6:
    if (v8)
      return WebCore::NetworkStorageSession::deleteCookie();
  }
  v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WebKit::WebCookieManager::deleteAllCookiesModifiedSince(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v5 = (unsigned int *)(v4 + 120);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v13 = a2;
  v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 216), &v13);
  v8 = v7;
  if (!v4)
    goto LABEL_6;
  do
  {
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)(v4 + 120));
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v8)
      return WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince();
  }
  else
  {
LABEL_6:
    if (v7)
      return WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince();
  }
  v12 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t WebKit::WebCookieManager::getAllCookies(uint64_t a1, WTF *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::NetworkStorageSession *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v5 = (unsigned int *)(v4 + 120);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v20 = a2;
  v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 216), &v20);
  v8 = (WebCore::NetworkStorageSession *)v7;
  if (!v4)
    goto LABEL_6;
  do
  {
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)(v4 + 120));
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (!v8)
      goto LABEL_13;
  }
  else
  {
LABEL_6:
    if (!v7)
      goto LABEL_13;
  }
  WebCore::NetworkStorageSession::getAllCookies(v8);
  v12 = v22;
  if (HIDWORD(v23))
  {
    v13 = 136 * HIDWORD(v23);
    v14 = v22;
    do
    {
      WebCore::Cookie::~Cookie(v14, v11);
      v14 = (WTF *)(v15 + 136);
      v13 -= 136;
    }
    while (v13);
  }
  if (v12)
    WTF::fastFree(v12, v11);
  v22 = v20;
  v16 = v21;
  v20 = 0;
  v21 = 0;
  v23 = v16;
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v11);
LABEL_13:
  v17 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v17 + 16))(v17, &v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v18);
}

uint64_t WebKit::WebCookieManager::getCookies(uint64_t a1, WTF *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  WebCore::NetworkStorageSession *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v7 = (unsigned int *)(v6 + 120);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v22 = a2;
  v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 216), &v22);
  v10 = (WebCore::NetworkStorageSession *)v9;
  if (!v6)
    goto LABEL_6;
  do
  {
    v11 = __ldaxr(v7);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v7));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)(v6 + 120));
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (!v10)
      goto LABEL_13;
  }
  else
  {
LABEL_6:
    if (!v9)
      goto LABEL_13;
  }
  WebCore::NetworkStorageSession::getCookies(v10, a3);
  v14 = v24;
  if (HIDWORD(v25))
  {
    v15 = 136 * HIDWORD(v25);
    v16 = v24;
    do
    {
      WebCore::Cookie::~Cookie(v16, v13);
      v16 = (WTF *)(v17 + 136);
      v15 -= 136;
    }
    while (v15);
  }
  if (v14)
    WTF::fastFree(v14, v13);
  v24 = v22;
  v18 = v23;
  v22 = 0;
  v23 = 0;
  v25 = v18;
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v13);
LABEL_13:
  v19 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v19 + 16))(v19, &v24);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v20);
}

uint64_t WebKit::WebCookieManager::setCookies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v8 = (unsigned int *)(v7 + 120);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v16 = a2;
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 216), &v16);
  v11 = v10;
  if (v7)
  {
    do
    {
      v12 = __ldaxr(v8);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v8));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)(v7 + 120));
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if (!v11)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  if (v10)
LABEL_7:
    WebCore::NetworkStorageSession::setCookies();
LABEL_8:
  v14 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

uint64_t WebKit::WebCookieManager::startObservingCookieChanges(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v5 = (unsigned int *)(v4 + 120);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v12 = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 216), &v12);
  v8 = result;
  if (v4)
  {
    do
    {
      v9 = __ldaxr(v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v5));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)(v4 + 120));
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  if (v8)
  {
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34C25A0;
    v11[1] = a1;
    v11[2] = a2;
    v12 = v11;
    WebCore::startObservingCookieChanges();
    result = (uint64_t)v12;
    v12 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebCookieManager::stopObservingCookieChanges(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  WebCore::NetworkStorageSession *v6;
  WebCore *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v3 = (unsigned int *)(v2 + 120);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v10 = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v2 + 216), &v10);
  v7 = (WebCore *)result;
  if (v2)
  {
    do
    {
      v8 = __ldaxr(v3);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v3));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)(v2 + 120));
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  if (v7)
    return WebCore::stopObservingCookieChanges(v7, v6);
  return result;
}

uint64_t WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint8_t buf[4];
  int v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v18 = a3;
    LOWORD(v19) = 2048;
    *(_QWORD *)((char *)&v19 + 2) = a2;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "WebCookieManager::setHTTPCookieAcceptPolicy set policy %d for session %llu", buf, 0x12u);
  }
  buf[0] = a3;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v10 = (unsigned int *)(v9 + 120);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *a4;
  *a4 = 0;
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v13 = &off_1E34C25C8;
  *(_BYTE *)(v13 + 8) = buf[0];
  *(_QWORD *)(v13 + 16) = v9;
  *(_QWORD *)(v13 + 24) = v12;
  v19 = 0uLL;
  v16 = v13;
  WebKit::WebCookieManager::platformSetHTTPCookieAcceptPolicy(a1, a2, a3, &v16);
  v14 = v16;
  v16 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)buf);
}

uint64_t WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    v4 = v3 + 30;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WebKit::WebCookieManager::getHTTPCookieAcceptPolicy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::NetworkStorageSession *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v5 = (unsigned int *)(v4 + 120);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v14 = a2;
  v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 216), &v14);
  v8 = (WebCore::NetworkStorageSession *)v7;
  if (v4)
  {
    do
    {
      v9 = __ldaxr(v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v5));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)(v4 + 120));
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      if (v8)
        goto LABEL_7;
LABEL_9:
      v12 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 1);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  if (!v7)
    goto LABEL_9;
LABEL_7:
  v11 = WebCore::NetworkStorageSession::cookieAcceptPolicy(v8);
  v12 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t WebKit::LegacyCustomProtocolManager::addCustomProtocol(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v8;
  uint64_t IdentifierInternal;

  v4 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 40);
LABEL_5:
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocol>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocol>>,WTF::HashTableTraits>::add<WTF::RetainPtr<WKCustomProtocol>>((uint64_t *)(a1 + 32), &IdentifierInternal, a2, (uint64_t)&v8);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      return IdentifierInternal;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return IdentifierInternal;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<WKCustomProtocol>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<WKCustomProtocol>>,WTF::HashTableTraits>::add<WTF::RetainPtr<WKCustomProtocol>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  v21 = (const void *)v16[1];
  v16[1] = v20;
  if (v21)
    CFRelease(v21);
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v25 = *a1;
  if (*a1)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_24:
      v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v16);
      v25 = *a1;
      if (*a1)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_24;
  }
  v30 = v25 + 16 * v28;
  v29 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
}

void WebKit::LegacyCustomProtocolManager::removeCustomProtocol(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;

  v9 = a2;
  v3 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 40);
LABEL_5:
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v9);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == v5)
      goto LABEL_12;
  }
  else
  {
    if (!v5)
      goto LABEL_12;
    v7 = 0;
  }
  if (v7 != v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(a1 + 32), v5);
LABEL_12:
  v8 = __ldxr(v3);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v3))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
}

IPC::Encoder *WebKit::LegacyCustomProtocolManager::startLoading(uint64_t a1, uint64_t a2, WebCore::ResourceRequest *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  IPC::Encoder *v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v6 = (unsigned int *)(v5 + 120);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 56))(v5 + 16);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 98;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v9, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v5 + 16) + 32))(v5 + 16, &v16, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    result = (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  do
  {
    v14 = __ldaxr(v6);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v6));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)(v5 + 120));
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

IPC::Encoder *WebKit::LegacyCustomProtocolManager::stopLoading(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v4 = (unsigned int *)(v3 + 120);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 99;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v3 + 16) + 32))(v3 + 16, &v13, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  do
  {
    v11 = __ldaxr(v4);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v4));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)(v3 + 120));
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

uint64_t WebKit::Download::Download(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = off_1E34C0CB8;
  *(_QWORD *)(a1 + 24) = a3;
  v8 = *a2;
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 96))(*a2);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a4 + 8));
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a5 + 24);
  *(_WORD *)(a1 + 96) = 0;
  WebKit::DownloadMonitor::DownloadMonitor((WebKit::DownloadMonitor *)(a1 + 104), (WebKit::Download *)a1);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a5 + 712);
  *(_QWORD *)(a1 + 376) = 0;
  (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 48))(**(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t WebKit::Download::Download(uint64_t a1, _QWORD *a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = off_1E34C0CB8;
  *(_QWORD *)(a1 + 24) = a3;
  v8 = *a2;
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 96))(*a2);
  *(_QWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = a4;
  if (a4)
    CFRetain(a4);
  v9 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  *(_WORD *)(a1 + 96) = 0;
  WebKit::DownloadMonitor::DownloadMonitor((WebKit::DownloadMonitor *)(a1 + 104), (WebKit::Download *)a1);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a5 + 712);
  *(_QWORD *)(a1 + 376) = 0;
  (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 48))(**(_QWORD **)(a1 + 16));
  return a1;
}

void WebKit::Download::~Download(WebKit::Download *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  const char ***v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  *(_QWORD *)this = off_1E34C0CB8;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
    objc_msgSend(v2, "unpublish");
  (*(void (**)(_QWORD))(***((_QWORD ***)this + 2) + 56))(**((_QWORD **)this + 2));
  v3 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 38) = off_1E34B3740;
  v4 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebKit::Download *)((char *)this + 304));
  v6 = (WTF *)*((_QWORD *)this + 16);
  if ((WebKit::Download *)((char *)this + 144) != v6 && v6)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v6, v5);
  }
  v7 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
  v10 = (const char ***)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v10);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v5);
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 104))(v12);
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v11);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::Download::~Download(this);
  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::Download::cancel(uint64_t a1, uint64_t *a2, char a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *result;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;

  if ((WTF::isMainRunLoop((WTF *)a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1971220D8);
  }
  *(_BYTE *)(a1 + 97) = a3;
  v18 = a1;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *a2;
  *a2 = 0;
  v19 = (WTF *)v6;
  v20 = v8;
  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0::operator()(&v18);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v13 = v18;
    *v12 = &off_1E34C25F0;
    v12[1] = v13;
    v19 = 0;
    v12[2] = v6;
    v12[3] = v8;
    v17 = v12;
    WebKit::Download::platformCancelNetworkLoad(a1, (uint64_t *)&v17);
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    v20 = 0;
  }
  result = (unsigned int *)v19;
  v19 = 0;
  if (result)
  {
    do
    {
      v15 = __ldaxr(result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, result));
    if (!v16)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v10);
    }
  }
  return result;
}

uint64_t WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = a1[1];
  if (v5 && *(_QWORD *)(v5 + 8) && *(_BYTE *)(v2 + 97))
  {
    v6 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(v2 + 24);
      v10 = 134218240;
      v11 = v2;
      v12 = 2048;
      v13 = v7;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - Download::didCancel: (id = %llu)", (uint8_t *)&v10, 0x16u);
    }
    v8 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 16) - 1;
      *(_QWORD *)(v8 + 16) = v9;
      if (!v9)
      {
        *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) = 0;
        sandbox_extension_release();
      }
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v8);
    }
    return WebKit::DownloadMap::remove((uint64_t *)(*(_QWORD *)(v2 + 16) + 24), *(_QWORD *)(v2 + 24));
  }
  return result;
}

IPC::Encoder *WebKit::Download::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *this, uint64_t *a3)
{
  WebCore::ProtectionSpaceBase *v6;
  WebCore::Credential *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace(this);
  if (!WebCore::ProtectionSpaceBase::isPasswordBased(v6)
    || (v7 = (WebCore::Credential *)WebCore::AuthenticationChallengeBase::proposedCredential(this),
        (WebCore::Credential::isEmpty(v7) & 1) != 0)
    || WebCore::AuthenticationChallengeBase::previousFailureCount(this))
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32));
    return WebKit::AuthenticationManager::didReceiveAuthenticationChallenge(v8, a1, this, a3);
  }
  else
  {
    v10 = WebCore::AuthenticationChallengeBase::proposedCredential(this);
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 16))(v11, 0, v10);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

IPC::Encoder *WebKit::Download::didCreateDestination(WebKit::Download *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(WebKit::Download *))(*(_QWORD *)this + 56))(this);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 9;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  (*(void (**)(WebKit::Download *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::Download::didReceiveData(WebKit::Download *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _BYTE v16[12];
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 96))
  {
    v8 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_QWORD *)this + 3);
      *(_DWORD *)v16 = 134218496;
      *(_QWORD *)&v16[4] = this;
      v17 = 2048;
      v18 = v9;
      v19 = 2048;
      v20 = a4;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - Download::didReceiveData: Started receiving data (id = %llu, expected length = %llu)", v16, 0x20u);
    }
    *((_BYTE *)this + 96) = 1;
  }
  WebKit::DownloadMonitor::downloadReceivedBytes((WebKit::Download *)((char *)this + 104), a2);
  v10 = (*(uint64_t (**)(WebKit::Download *))(*(_QWORD *)this + 56))(this);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 13;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  *(_QWORD *)v16 = v11;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = a4;
  (*(void (**)(WebKit::Download *, _BYTE *, _QWORD))(*(_QWORD *)this + 32))(this, v16, 0);
  result = *(IPC::Encoder **)v16;
  *(_QWORD *)v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

BOOL WebKit::Download::didFinish(WebKit::Download *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[12];
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 3);
    *(_DWORD *)v13 = 134218240;
    *(_QWORD *)&v13[4] = this;
    v14 = 2048;
    v15 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - Download::didFinish: (id = %llu)", v13, 0x16u);
  }
  v4 = (*(uint64_t (**)(WebKit::Download *))(*(_QWORD *)this + 56))(this);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 11;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  *(_QWORD *)v13 = v5;
  (*(void (**)(WebKit::Download *, _BYTE *, _QWORD))(*(_QWORD *)this + 32))(this, v13, 0);
  v7 = *(IPC::Encoder **)v13;
  *(_QWORD *)v13 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v6);
    WTF::fastFree(v8, v9);
  }
  v10 = *((_QWORD *)this + 7);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16) - 1;
    *(_QWORD *)(v10 + 16) = v11;
    if (v11)
    {
      *((_QWORD *)this + 7) = 0;
      goto LABEL_8;
    }
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) = 0;
    sandbox_extension_release();
    v10 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v10)
LABEL_8:
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v10);
  }
  return WebKit::DownloadMap::remove((uint64_t *)(*((_QWORD *)this + 2) + 24), *((_QWORD *)this + 3));
}

BOOL WebKit::Download::didFail(_BOOL8 result, uint64_t a2, const void *a3, size_t a4)
{
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[12];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  _BOOL4 v26;
  __int16 v27;
  _BOOL4 v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(result + 97))
  {
    v7 = (_QWORD *)result;
    v8 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = v7[3];
      v10 = *(unsigned __int8 *)(a2 + 60);
      v11 = v10 == 4;
      v12 = v10 == 3;
      MEMORY[0x19AEB7BFC](a2);
      v13 = *(_DWORD *)(a2 + 56);
      *(_DWORD *)v22 = 134219008;
      *(_QWORD *)&v22[4] = v7;
      v23 = 2048;
      v24 = v9;
      v25 = 1024;
      v26 = v11;
      v27 = 1024;
      v28 = v12;
      v29 = 1024;
      v30 = v13;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - Download::didFail: (id = %llu, isTimeout = %d, isCancellation = %d, errCode = %d)", v22, 0x28u);
    }
    v14 = (*(uint64_t (**)(_QWORD *))(*v7 + 56))(v7);
    v15 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v15 = 10;
    *(_QWORD *)(v15 + 8) = v14;
    *(_QWORD *)(v15 + 528) = v15 + 16;
    *(_QWORD *)(v15 + 536) = v15 + 16;
    *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v15 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
    *(_QWORD *)v22 = v15;
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v15, (WebCore::ResourceError *)a2);
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v15, a3, a4);
    (*(void (**)(_QWORD *, _BYTE *, _QWORD))(*v7 + 32))(v7, v22, 0);
    v17 = *(IPC::Encoder **)v22;
    *(_QWORD *)v22 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v16);
      WTF::fastFree(v18, v19);
    }
    v20 = v7[7];
    if (!v20)
      return WebKit::DownloadMap::remove((uint64_t *)(v7[2] + 24), v7[3]);
    v21 = *(_QWORD *)(v20 + 16) - 1;
    *(_QWORD *)(v20 + 16) = v21;
    if (v21)
    {
      v7[7] = 0;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8) = 0;
      sandbox_extension_release();
      v20 = v7[7];
      v7[7] = 0;
      if (!v20)
        return WebKit::DownloadMap::remove((uint64_t *)(v7[2] + 24), v7[3]);
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v20);
    return WebKit::DownloadMap::remove((uint64_t *)(v7[2] + 24), v7[3]);
  }
  return result;
}

uint64_t WebKit::Download::messageSenderConnection(WebKit::Download *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 2) + 64))(**((_QWORD **)this + 2));
}

uint64_t WebKit::Download::messageSenderDestinationID(WebKit::Download *this)
{
  return *((_QWORD *)this + 3);
}

WTF *WebKit::DownloadManager::startDownload(uint64_t *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, WebCore::SecurityOriginData *a5, __int16 a6, WTF::StringImpl *a7, char a8, __int128 *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  WTF *result;
  WebKit::NetworkSession *v21;
  CFTypeRef v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  WTF *v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  uint64_t v30;
  BOOL v31;
  unsigned __int8 **v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  CFTypeRef v37;
  CFTypeRef v38;
  WTF::StringImpl *v39;
  WTF *v40;
  WTF *v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[8];
  uint64_t v49;
  __int128 v50;
  WTF *v51;
  WTF *v52;
  _BYTE v53[192];
  CFTypeRef v54;
  BOOL v55;
  char v56;
  _BYTE v57[2584];
  WTF *v58;
  uint64_t v59;
  CFTypeRef cf;
  char v61;
  __int16 v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v47 = a3;
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 88))(*a1);
  if (!result)
    return result;
  v21 = result;
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v48);
  if (*((_BYTE *)a9 + 16))
    v50 = *a9;
  if (a11)
    v49 = a10;
  WebCore::ResourceRequestBase::operator=((uint64_t)v53, (uint64_t)a4);
  v22 = a4[24];
  if (v22)
    CFRetain(a4[24]);
  v23 = v54;
  v54 = v22;
  if (v23)
    CFRelease(v23);
  v56 = 1;
  v62 = a6;
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a4);
  if (WTF::URL::protocolIs())
  {
    if (*((_BYTE *)a5 + 32))
    {
      WebCore::SecurityOriginData::securityOrigin(a5);
      if (v44)
      {
        do
          v25 = __ldaxr(v44);
        while (__stlxr(v25 + 1, v44));
      }
      v26 = v51;
      v51 = (WTF *)v44;
      if (v26)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v26, v24);
      v27 = (WTF *)v44;
      v44 = 0;
      if (!v27)
        goto LABEL_17;
    }
    else
    {
      v27 = v51;
      v51 = 0;
      if (!v27)
      {
LABEL_17:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 88))(*a1, a2);
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a4);
        WebCore::BlobRegistryImpl::filesInBlob();
        if (HIDWORD(v59))
        {
          v41 = v58;
          v42 = 8 * HIDWORD(v59);
          do
          {
            v43 = *(_DWORD **)v41;
            *(_QWORD *)v41 = 0;
            if (v43)
            {
              if (v43[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
              else
                --v43[2];
            }
            v41 = (WTF *)((char *)v41 + 8);
            v42 -= 8;
          }
          while (v42);
        }
        v29 = v58;
        if (v58)
        {
          v58 = 0;
          LODWORD(v59) = 0;
          WTF::fastFree(v29, v28);
        }
        v58 = (WTF *)v44;
        v30 = v45;
        v44 = 0;
        v45 = 0;
        v59 = v30;
        WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v28);
        goto LABEL_21;
      }
    }
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v27, v24);
    goto LABEL_17;
  }
LABEL_21:
  v31 = (a2 & 0x8000000000000000) == 0 || a2 == -1;
  v55 = v31;
  v32 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 72))(*a1);
  v33 = WTF::fastMalloc((WTF *)0x70);
  v46 = WebKit::PendingDownload::PendingDownload(v33, v32, (uint64_t)v48, v47, v21, a7, a8, v34, a12, a13);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::PendingDownload>>(a1 + 1, &v47, &v46, (uint64_t)&v44);
  v36 = v46;
  v46 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (v61)
  {
    v37 = cf;
    cf = 0;
    if (v37)
      CFRelease(v37);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v35);
  if (v57[2560])
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v57);
  v38 = v54;
  v54 = 0;
  if (v38)
    CFRelease(v38);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v53);
  v40 = v52;
  v52 = 0;
  if (v40)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v40, v39);
  result = v51;
  v51 = 0;
  if (result)
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v39);
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::PendingDownload>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

void WebKit::DownloadManager::dataTaskBecameDownloadTask(uint64_t *a1, uint64_t a2, const char ****a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[3];
  uint64_t v12;

  v12 = a2;
  v5 = a1 + 1;
  v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 1, &v12);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::take(v5, v6, v11);
  v7 = v11[0];
  if (v11[0])
  {
    if ((*(_BYTE *)(v11[0] + 72) & 1) != 0)
    {
      WebKit::Download::publishProgress(*a3, v11[0] + 64, (uint64_t *)(v11[0] + 104));
      v7 = v11[0];
      v11[0] = 0;
      if (!v7)
        goto LABEL_6;
    }
    else
    {
      v11[0] = 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
LABEL_6:
  v8 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 2, &v12);
  v9 = a1[2];
  if (v9)
  {
    v10 = (_QWORD *)(v9 + 16 * *(unsigned int *)(v9 - 4));
    if (v10 == v8)
      goto LABEL_13;
  }
  else
  {
    if (!v8)
      goto LABEL_13;
    v10 = 0;
  }
  if (v10 != v8)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1 + 2, v8);
LABEL_13:
  WebKit::DownloadMap::add(a1 + 3, v12, (uint64_t *)a3, (uint64_t)v11);
}

uint64_t WebKit::DownloadManager::convertNetworkLoadToDownload(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, WebCore::ResourceRequest *a6, WebCore::ResourceResponseBase *a7)
{
  uint64_t *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t result;
  char v16[24];
  uint64_t v17;
  uint64_t v18;

  v18 = a2;
  v12 = a1 + 1;
  v13 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 72))(*a1);
  v14 = WTF::fastMalloc((WTF *)0x70);
  v17 = WebKit::PendingDownload::PendingDownload(v14, v13, a3, a4, a2, a6, a7);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::PendingDownload>>(v12, &v18, &v17, (uint64_t)v16);
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::DownloadManager::resumeDownload(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t *a7, int a8)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  CFTypeRef v25;
  WTF::StringImpl *v26;
  _BYTE v27[192];
  CFTypeRef cf;
  uint64_t v29;
  IPC::Encoder *v30;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 88))(*a1);
  if (result)
  {
    v16 = result;
    v17 = WTF::fastMalloc((WTF *)0x180);
    v29 = WebKit::Download::Download(v17, a1, a3, 0, v16);
    WebKit::Download::resume(v29, a4, a5, a6, a7);
    if (a8)
    {
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v27);
      v26 = 0;
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
      v19 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v19 = 14;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(v19 + 528) = v19 + 16;
      *(_QWORD *)(v19 + 536) = v19 + 16;
      *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v19 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
      v30 = (IPC::Encoder *)v19;
      IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v19, (WebCore::ResourceRequest *)v27);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, (uint64_t *)&v26);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v17 + 32))(v17, &v30, 0);
      v21 = v30;
      v30 = 0;
      if (v21)
      {
        IPC::Encoder::~Encoder(v21, v20);
        WTF::fastFree(v22, v23);
      }
      v24 = v26;
      v26 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = cf;
      cf = 0;
      if (v25)
        CFRelease(v25);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v27);
    }
    WebKit::DownloadMap::add(a1 + 3, a3, &v29, (uint64_t)v27);
    result = v29;
    v29 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unsigned int *WebKit::DownloadManager::cancelDownload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *result;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;

  v10 = a2;
  v11 = (unsigned int *)a2;
  v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v11);
  if (v5)
    return WebKit::Download::cancel(v5, a3, 1);
  v7 = (uint64_t *)(a1 + 8);
  v8 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v7, &v10);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::take(v7, v8, &v11);
  if (v11)
  {
    WebKit::PendingDownload::cancel((uint64_t)v11, a3);
    result = v11;
    v11 = 0;
    if (result)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

const char ***WebKit::DownloadManager::publishDownloadProgress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  const char ***v7;
  const char ***result;
  const char ***v9;
  __int128 v10;
  const char **v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a2;
  v13 = a2;
  v7 = (const char ***)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v13);
  if (v7)
    return WebKit::Download::publishProgress(v7, a3, a4);
  result = (const char ***)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 8), &v12);
  if (result)
  {
    v9 = result;
    WTF::String::operator=((WTF::StringImpl **)result + 8, (WTF::StringImpl *)a3);
    v10 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v9 + 9) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v9 + 11) = v10;
    v11 = (const char **)*a4;
    *a4 = 0;
    return (const char ***)std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](v9 + 13, v11);
  }
  return result;
}

_QWORD *WebKit::DownloadManager::applicationDidEnterBackground(WebKit::DownloadManager *this)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 3);
  v3 = result;
  v5 = v4;
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != result)
  {
    do
    {
      result = (_QWORD *)WebKit::DownloadMonitor::applicationDidEnterBackground((WebKit::DownloadMonitor *)(v3[1] + 104));
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

void WebKit::DownloadManager::applicationWillEnterForeground(WebKit::DownloadManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 3);
  v3 = v2;
  v5 = v4;
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != v2)
  {
    do
    {
      WebKit::DownloadMonitor::applicationWillEnterForeground((WebKit::DownloadMonitor *)(v3[1] + 104));
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
}

void WebKit::LegacyCustomProtocolManager::~LegacyCustomProtocolManager(WebKit::LegacyCustomProtocolManager *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E34C0C48;
  *((_QWORD *)this + 1) = &unk_1E34C0C80;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF::StringImpl **v3;
  uint64_t v4;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E34C0C48;
  *((_QWORD *)this + 1) = &unk_1E34C0C80;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v7 = __ldaxr(v5);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v5));
    if (!v8)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
  WTF::fastFree(this, v6);
}

void `non-virtual thunk to'WebKit::LegacyCustomProtocolManager::~LegacyCustomProtocolManager(WebKit::LegacyCustomProtocolManager *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *((_QWORD *)this - 1) = off_1E34C0C48;
  *(_QWORD *)this = &unk_1E34C0C80;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 5);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  unsigned int *v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;

  *((_QWORD *)this - 1) = off_1E34C0C48;
  v3 = (WebKit::LegacyCustomProtocolManager *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E34C0C80;
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 5);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, a2);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v8 = __ldaxr(v6);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v6));
    if (!v9)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(v3, v7);
}

WTF::StringImpl *WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::isolatedCopy(uint64_t a1, uint64_t a2)
{
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)a1, a2);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 16), a2 + 16);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 32), a2 + 32);
  return WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 48), a2 + 48);
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;

  v3 = result;
  v4 = *(WTF::StringImpl ***)a2;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = &v4[v5];
    while (1)
    {
      WebCore::RegistrableDomain::isolatedCopy(&v12);
      v8 = v12;
      v12 = 0;
      result = *v4;
      *v4 = v8;
      if (result)
      {
        v9 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result != 2)
          goto LABEL_7;
        WTF::StringImpl::destroy(result, v7);
        result = v12;
        v12 = 0;
        if (result)
          break;
      }
LABEL_8:
      if (++v4 >= v6)
      {
        v4 = *(WTF::StringImpl ***)a2;
        LODWORD(v5) = *(_DWORD *)(a2 + 12);
        goto LABEL_11;
      }
    }
    v9 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      goto LABEL_8;
    }
LABEL_7:
    *(_DWORD *)result = v9;
    goto LABEL_8;
  }
LABEL_11:
  *(_QWORD *)v3 = v4;
  v11 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_DWORD *)v3 + 2) = v11;
  *((_DWORD *)v3 + 3) = v5;
  return result;
}

uint64_t WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl *v18[2];
  _QWORD v19[2];

  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)a1, a2);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 2), a2 + 16);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)(a1 + 4), a2 + 32);
  v4 = (uint64_t *)(a2 + 48);
  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a2 + 48), v5, v6);
  v19[0] = result;
  v19[1] = v8;
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
    v10 = v9 + 24 * *(unsigned int *)(v9 - 4);
  else
    v10 = 0;
  if (v10 != result)
  {
    do
    {
      WebCore::RegistrableDomain::isolatedCopy(v18);
      v12 = v18[0];
      v18[0] = 0;
      v13 = *(WTF::StringImpl **)v19[0];
      *(_QWORD *)v19[0] = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v18[0];
      v18[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)v18, v19[0] + 8);
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v19[0] + 8, v18);
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v15);
      v19[0] += 24;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v19, v16, v17);
      result = v19[0];
    }
    while (v19[0] != v10);
    v9 = *v4;
  }
  *v4 = 0;
  a1[6] = v9;
  return result;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v4));
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  int8x16_t *v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = v3 != 0;
  v5 = v3 - 1;
  if (!v4)
    v5 = 0;
  v8 = *(int8x16_t **)a2;
  if (v5 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v9 = v5;
    v7 = *a3;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, &v8, &v7);
  }
  return result;
}

uint64_t *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  int8x16_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  uint64_t *v21;
  int8x16_t *v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t *v25;
  uint64_t v26;
  int8x16x2_t v27;
  int8x16x2_t v28;
  int8x16x2_t v29;

  v5 = *a3;
  v6 = *((_QWORD *)a1 + 1);
  if ((v6 || (v6 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0 || v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    result = (uint64_t *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v8 = *a2;
      v9 = *a3;
      v10 = (char *)result + 2 * a2[1];
      v11 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v11)
      {
        v12 = (uint64_t *)((char *)result + 2 * v11);
        v13 = 0uLL;
        do
        {
          v27.val[0] = *v8;
          v14 = v8[1];
          v28.val[0] = v8[2];
          v15 = v8[3];
          v8 += 4;
          v16 = v15;
          v28.val[1] = 0uLL;
          v29.val[0] = v14;
          v27.val[1] = 0uLL;
          v17 = (char *)result;
          vst2q_s8(v17, v27);
          v17 += 32;
          v29.val[1] = 0uLL;
          vst2q_s8(v17, v29);
          v18 = (char *)(result + 8);
          vst2q_s8(v18, v28);
          v19 = (char *)(result + 12);
          vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
          result += 16;
        }
        while (result != v12);
        result = v12;
      }
      while (result != (uint64_t *)v10)
      {
        v20 = v8->u8[0];
        v8 = (int8x16_t *)((char *)v8 + 1);
        *(_WORD *)result = v20;
        result = (uint64_t *)((char *)result + 2);
      }
      v26 = v9;
      return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v26, v10);
    }
  }
  else
  {
    result = (uint64_t *)MEMORY[0x19AEAB398]();
    if (result)
    {
      v21 = result;
      v22 = a2[1];
      v23 = v22;
      v24 = *a3;
      if ((_DWORD)v22)
      {
        v25 = *a2;
        if ((_DWORD)v22 == 1)
          *(_BYTE *)result = v25->i8[0];
        else
          memcpy(result, v25, a2[1]);
      }
      v26 = v24;
      return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v26, (char *)v21 + v23);
    }
  }
  return result;
}

_BYTE *WTF::StringView::getCharacters<unsigned char>(_BYTE *result, char *__dst)
{
  char *v2;
  size_t v3;
  char *v4;
  char *v5;
  unsigned __int128 v6;
  char v7;

  v2 = *(char **)result;
  v3 = *((unsigned int *)result + 2);
  if (result[12])
  {
    if ((_DWORD)v3)
    {
      if ((_DWORD)v3 == 1)
        *__dst = *v2;
      else
        return memcpy(__dst, v2, v3);
    }
  }
  else
  {
    v4 = &__dst[v3];
    if (v3 >= 0x10)
    {
      v5 = &__dst[v3 & 0xFFFFFFF0];
      do
      {
        v6 = (unsigned __int128)vld2q_s8(v2);
        v2 += 32;
        *(_OWORD *)__dst = v6;
        __dst += 16;
      }
      while (__dst != v5);
      __dst = v5;
    }
    while (__dst != v4)
    {
      v7 = *v2;
      v2 += 2;
      *__dst++ = v7;
    }
  }
  return result;
}

void WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  _BYTE v9[312];

  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 12);
  if (v5)
  {
    v7 = v4 + 312 * v5;
    do
    {
      WebCore::PrivateClickMeasurement::isolatedCopy();
      WebCore::PrivateClickMeasurement::operator=(v4, (uint64_t)v9);
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v9, v8);
      v4 += 312;
    }
    while (v4 < v7);
    v4 = *(_QWORD *)a1;
    v5 = *(_DWORD *)(a1 + 12);
  }
  *(_QWORD *)a2 = v4;
  v6 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v5;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)(a1 + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 5;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(uint64_t result, WTF::StringImpl **a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  BOOL v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = (uint64_t *)(a2 - 1);
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = ((char *)a2 - (char *)v10) >> 3;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)((uint64_t *)a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v10, v10 + 1, (uint64_t *)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v10, v10 + 1, v10 + 2, (uint64_t *)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v10, v10 + 1, v10 + 2, v10 + 3, (uint64_t *)a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((WTF::StringImpl *)v10, a2, (uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((WTF::StringImpl *)v10, a2, (uint64_t (**)(WTF::StringImpl **, char *))a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(&v10[v14 >> 1], v10, (uint64_t *)a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v10, &v10[v14 >> 1], (uint64_t *)a2 - 1, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v10 + 1, v16 - 1, (uint64_t *)a2 - 2, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v10 + 2, &v10[v15 + 1], (uint64_t *)a2 - 3, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(v10 - 1, v10) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>((WTF::StringImpl **)v10, a2, (uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))a3);
            v10 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = (uint64_t *)std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>((WTF::StringImpl **)v10, (WTF::StringImpl *)a2, (WTF::StringImpl *)a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v18 + 1, (uint64_t *)a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = (WTF::StringImpl **)v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != (uint64_t *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,WTF::String*>((WTF::StringImpl **)v10, (char *)a2, (WTF::StringImpl *)a2, (uint64_t (**)(WTF::StringImpl *, WTF::StringImpl **))a3);
        return result;
    }
  }
}

WTF::StringImpl *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, WTF::StringImpl **a2, uint64_t (**a3)(WTF::StringImpl **, WTF::StringImpl **))
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[9];

  if (result != (WTF::StringImpl *)a2)
  {
    v17[7] = v3;
    v17[8] = v4;
    v6 = (WTF::StringImpl **)result;
    v7 = (WTF::StringImpl **)((char *)result + 8);
    if ((WTF::StringImpl **)((char *)result + 8) != a2)
    {
      v9 = 0;
      v10 = (WTF::StringImpl **)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (WTF::StringImpl *)(*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v12 = *v10;
          *v10 = 0;
          v17[0] = v12;
          v13 = v9;
          while (1)
          {
            WTF::String::operator=((WTF::StringImpl **)((char *)v6 + v13 + 8), (WTF::StringImpl *)((char *)v6 + v13));
            if (!v13)
              break;
            v13 -= 8;
            if (((*a3)(v17, (WTF::StringImpl **)((char *)v6 + v13)) & 1) == 0)
            {
              v15 = (WTF::StringImpl **)((char *)v6 + v13 + 8);
              goto LABEL_10;
            }
          }
          v15 = v6;
LABEL_10:
          v16 = v17[0];
          v17[0] = 0;
          result = *v15;
          *v15 = v16;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              WTF::StringImpl::destroy(result, v14);
            else
              *(_DWORD *)result -= 2;
            result = v17[0];
            v17[0] = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
        v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

WTF::StringImpl *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, WTF::StringImpl **a2, uint64_t (**a3)(WTF::StringImpl **, char *))
{
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  if (result != (WTF::StringImpl *)a2)
  {
    v4 = result;
    v5 = (WTF::StringImpl **)((char *)result + 8);
    if ((WTF::StringImpl **)((char *)result + 8) != a2)
    {
      v7 = 0;
      v8 = (WTF::StringImpl **)((char *)result - 8);
      v9 = -1;
      v10 = 1;
      do
      {
        v11 = (char *)v4 + 8 * v7;
        v7 = v10;
        result = (WTF::StringImpl *)(*a3)(v5, v11);
        if ((_DWORD)result)
        {
          v12 = *v5;
          *v5 = 0;
          v20 = v12;
          v13 = v9;
          v14 = v8;
          do
          {
            result = (WTF::StringImpl *)WTF::String::operator=(v14 + 2, (WTF::StringImpl *)(v14 + 1));
            if (!v13)
            {
              __break(1u);
              return result;
            }
            v15 = (*a3)(&v20, (char *)v14--);
            ++v13;
          }
          while ((v15 & 1) != 0);
          v17 = v20;
          v20 = 0;
          result = v14[2];
          v14[2] = v17;
          if (!result)
            goto LABEL_13;
          v18 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result != 2)
            goto LABEL_12;
          WTF::StringImpl::destroy(result, v16);
          result = v20;
          v20 = 0;
          if (!result)
            goto LABEL_13;
          v18 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
          else
LABEL_12:
            *(_DWORD *)result = v18;
        }
LABEL_13:
        v10 = v7 + 1;
        v5 = (WTF::StringImpl **)((char *)v4 + 8 * v7 + 8);
        ++v8;
        --v9;
      }
      while (v5 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(a3, a2))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

WTF::StringImpl **std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(WTF::StringImpl **a1, WTF::StringImpl **a2, uint64_t (**a3)(WTF::StringImpl **, WTF::StringImpl **))
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;

  v6 = *a1;
  *a1 = 0;
  v17 = v6;
  v7 = (*a3)(&v17, a2 - 1);
  if ((v7 & 1) != 0)
  {
    v9 = a1;
    while (1)
    {
      if (++v9 == a2)
        goto LABEL_25;
      v7 = (*a3)(&v17, v9);
      if ((v7 & 1) != 0)
        goto LABEL_9;
    }
  }
  v10 = a1 + 1;
  do
  {
    v9 = v10;
    if (v10 >= a2)
      break;
    v7 = (*a3)(&v17, v10);
    v10 = v9 + 1;
  }
  while (!(_DWORD)v7);
LABEL_9:
  v11 = a2;
  if (v9 < a2)
  {
    v11 = a2;
    while (v11 != a1)
    {
      v7 = (*a3)(&v17, --v11);
      if ((v7 & 1) == 0)
        goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_19:
  if (v9 < v11)
  {
    v12 = *v9;
    *v9 = *v11;
    *v11 = v12;
    while (++v9 != a2)
    {
      v7 = (*a3)(&v17, v9);
      if ((_DWORD)v7)
      {
        while (v11 != a1)
        {
          v7 = (*a3)(&v17, --v11);
          if ((v7 & 1) == 0)
            goto LABEL_19;
        }
        break;
      }
    }
LABEL_25:
    __break(1u);
LABEL_26:
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v8);
    goto LABEL_27;
  }
  v13 = (uint64_t *)(v9 - 1);
  if (v9 - 1 != a1)
    WTF::String::operator=(a1, (WTF::StringImpl *)(v9 - 1));
  v14 = v17;
  v17 = 0;
  v7 = *v13;
  *v13 = (uint64_t)v14;
  if (v7)
  {
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_27:
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v9;
}

WTF::StringImpl *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;

  v6 = 0;
  v7 = *a1;
  *a1 = 0;
  v17 = v7;
  do
  {
    v8 = (uint64_t)&a1[v6 + 1];
    if ((WTF::StringImpl *)v8 == a2)
      goto LABEL_27;
    v8 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))a3)(v8, &v17);
    ++v6;
  }
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  if (v6 != 1)
  {
    v10 = (WTF::StringImpl **)a2;
    while (v10 != a1)
    {
      v8 = (*(uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))a3)(--v10, &v17);
      if ((_DWORD)v8)
        goto LABEL_12;
    }
    goto LABEL_27;
  }
  v10 = (WTF::StringImpl **)a2;
  do
  {
    if (v9 >= v10)
      break;
    v8 = (*(uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))a3)(--v10, &v17);
  }
  while ((v8 & 1) == 0);
LABEL_12:
  if (v9 < v10)
  {
    v11 = v9;
    v12 = v10;
LABEL_14:
    v13 = *v11;
    *v11 = *v12;
    *v12 = v13;
    while (++v11 != (WTF::StringImpl **)a2)
    {
      v8 = (*(uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))a3)(v11, &v17);
      if ((v8 & 1) == 0)
      {
        while (v12 != a1)
        {
          v8 = (*(uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))a3)(--v12, &v17);
          if ((_DWORD)v8)
          {
            if (v11 < v12)
              goto LABEL_14;
            a3 = (WTF::StringImpl *)(v11 - 1);
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_27:
    __break(1u);
LABEL_28:
    WTF::StringImpl::destroy((WTF::StringImpl *)v8, a2);
    goto LABEL_29;
  }
  a3 = (WTF::StringImpl *)(v9 - 1);
LABEL_22:
  if (a3 != (WTF::StringImpl *)a1)
    WTF::String::operator=(a1, a3);
  v14 = v17;
  v17 = 0;
  v8 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v14;
  if (v8)
  {
    if (*(_DWORD *)v8 != 2)
    {
      *(_DWORD *)v8 -= 2;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_29:
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  return a3;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, a3);
      v11 = (WTF::StringImpl **)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v11, v10))
    {
      v14 = *v11;
      *v11 = 0;
      v22 = v14;
      v15 = v12;
      while (1)
      {
        WTF::String::operator=((WTF::StringImpl **)((char *)a1 + v15 + 24), (WTF::StringImpl *)((char *)a1 + v15 + 16));
        if (v15 == -16)
          break;
        v17 = (*a3)((uint64_t *)&v22, (uint64_t *)((char *)a1 + v15 + 8));
        v15 -= 8;
        if ((v17 & 1) == 0)
        {
          v18 = (WTF::StringImpl **)((char *)a1 + v15 + 24);
          goto LABEL_12;
        }
      }
      v18 = (WTF::StringImpl **)a1;
LABEL_12:
      v19 = v22;
      v22 = 0;
      v20 = *v18;
      *v18 = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v16);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v16);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (++v13 == 8)
        return v11 + 1 == (WTF::StringImpl **)a2;
    }
    v10 = (uint64_t *)v11;
    v12 += 8;
    if (++v11 == (WTF::StringImpl **)a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,WTF::String*>(WTF::StringImpl **a1, char *a2, WTF::StringImpl *a3, uint64_t (**a4)(WTF::StringImpl *, WTF::StringImpl **))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  if (a1 != (WTF::StringImpl **)a2)
  {
    v8 = a2 - (char *)a1;
    v9 = (a2 - (char *)a1) >> 3;
    if (a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = (WTF::StringImpl *)a2;
    if (a2 != (char *)a3)
    {
      v14 = (WTF::StringImpl *)a2;
      do
      {
        if ((*a4)(v14, a1))
        {
          v15 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((uint64_t)a1, a4, v9, a1);
        }
        v14 = (WTF::StringImpl *)((char *)v14 + 8);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = (WTF::StringImpl *)(a2 - 8);
      do
      {
        v18 = *a1;
        *a1 = 0;
        v19 = (WTF::StringImpl **)std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, (unsigned int (**)(uint64_t, uint64_t))a4, v16);
        v21 = v19;
        if (v17 == (WTF::StringImpl *)v19)
        {
          v24 = *v19;
          *v21 = v18;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v20);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        else
        {
          WTF::String::operator=(v19, v17);
          v23 = *(WTF::StringImpl **)v17;
          *(_QWORD *)v17 = v18;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((WTF::StringImpl *)a1, (uint64_t)(v21 + 1), (uint64_t (**)(WTF::StringImpl *, uint64_t))a4, v21 + 1 - a1);
        }
        v17 = (WTF::StringImpl *)((char *)v17 - 8);
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(uint64_t result, uint64_t (**a2)(WTF::StringImpl *, WTF::StringImpl **), uint64_t a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v23[11] = v4;
    v23[12] = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v12 = ((uint64_t)a4 - result) >> 2;
      v13 = v12 + 1;
      v14 = (WTF::StringImpl *)(result + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, (WTF::StringImpl **)v14 + 1))
      {
        v14 = (WTF::StringImpl *)((char *)v14 + 8);
        v13 = v15;
      }
      result = (*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v16 = *v7;
        *v7 = 0;
        v23[0] = v16;
        do
        {
          v17 = (WTF::StringImpl **)v14;
          WTF::String::operator=(v7, v14);
          if (v9 < v13)
            break;
          v19 = (2 * v13) | 1;
          v14 = (WTF::StringImpl *)(v8 + 8 * v19);
          v20 = 2 * v13 + 2;
          if (v20 < a3 && (*a2)((WTF::StringImpl *)(v8 + 8 * v19), (WTF::StringImpl **)v14 + 1))
          {
            v14 = (WTF::StringImpl *)((char *)v14 + 8);
            v19 = v20;
          }
          v7 = v17;
          v13 = v19;
        }
        while (!(*a2)(v14, v23));
        v21 = v23[0];
        v23[0] = 0;
        v22 = *v17;
        *v17 = v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v18);
          else
            *(_DWORD *)v22 -= 2;
        }
        result = (uint64_t)v23[0];
        v23[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl **a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (WTF::StringImpl *)&a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)((uint64_t)&a1[v6 + 1], (uint64_t)&a1[v6 + 2]))
    {
      v9 = (WTF::StringImpl *)((char *)v9 + 8);
      v10 = v11;
    }
    WTF::String::operator=(a1, v9);
    a1 = (WTF::StringImpl **)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

WTF::StringImpl *std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(WTF::StringImpl *result, uint64_t a2, uint64_t (**a3)(WTF::StringImpl *, uint64_t), uint64_t a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[9];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v18[7] = v4;
    v18[8] = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = (WTF::StringImpl *)((char *)result + 8 * (v6 >> 1));
    v11 = (WTF::StringImpl **)(a2 - 8);
    result = (WTF::StringImpl *)(*a3)(v10, a2 - 8);
    if ((_DWORD)result)
    {
      v12 = *v11;
      *v11 = 0;
      v18[0] = v12;
      do
      {
        v13 = (WTF::StringImpl **)v10;
        WTF::String::operator=(v11, v10);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (WTF::StringImpl *)((char *)v8 + 8 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, (uint64_t)v18) & 1) != 0);
      v15 = v18[0];
      v18[0] = 0;
      result = *v13;
      *v13 = v15;
      if (result)
      {
        v16 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
        {
          WTF::StringImpl::destroy(result, v14);
          result = v18[0];
          v18[0] = 0;
          if (!result)
            return result;
          v16 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        }
        *(_DWORD *)result = v16;
      }
    }
  }
  return result;
}

uint64_t WTF::codePointCompare(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned __int16 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  if (!this)
  {
    if (!a2)
      return 0;
    if (*((_DWORD *)a2 + 1))
      return 0xFFFFFFFFLL;
    return 0;
  }
  if (!a2)
    return *((_DWORD *)this + 1) != 0;
  v3 = *((_DWORD *)a2 + 4);
  v4 = *((_DWORD *)this + 1);
  v5 = *((_DWORD *)a2 + 1);
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  if ((*((_BYTE *)this + 16) & 4) == 0)
  {
    if ((v3 & 4) != 0)
    {
      if ((_DWORD)v6)
      {
        v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v18 = (unsigned __int16 *)*((_QWORD *)this + 1);
        while (1)
        {
          v19 = *v18;
          v20 = *v17;
          v11 = v19 > v20;
          if (v19 != v20)
            goto LABEL_40;
          ++v18;
          ++v17;
          if (!--v6)
            goto LABEL_34;
        }
      }
    }
    else if ((_DWORD)v6)
    {
      v7 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
      v8 = (unsigned __int16 *)*((_QWORD *)this + 1);
      while (1)
      {
        v9 = *v8;
        v10 = *v7;
        v11 = v9 > v10;
        if (v9 != v10)
          break;
        ++v8;
        ++v7;
        if (!--v6)
          goto LABEL_34;
      }
LABEL_40:
      if (v11)
        return 1;
      else
        return 0xFFFFFFFFLL;
    }
    goto LABEL_34;
  }
  if ((v3 & 4) != 0)
  {
    if ((_DWORD)v6)
    {
      v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v22 = (unsigned __int8 *)*((_QWORD *)this + 1);
      while (1)
      {
        v23 = *v22;
        v24 = *v21;
        v11 = v23 > v24;
        if (v23 != v24)
          goto LABEL_40;
        ++v22;
        ++v21;
        if (!--v6)
          goto LABEL_34;
      }
    }
    goto LABEL_34;
  }
  if (!(_DWORD)v6)
  {
LABEL_34:
    if (v5 < v4)
      v25 = 1;
    else
      v25 = -1;
    if (v4 == v5)
      return 0;
    else
      return v25;
  }
  v13 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
  while (1)
  {
    v15 = *v14;
    v16 = *v13;
    if (v16 != v15)
      break;
    ++v14;
    ++v13;
    if (!--v6)
      goto LABEL_34;
  }
  if (v16 < v15)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t *WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::ASCIICaseInsensitiveHash **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  const WTF::StringImpl *v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  _QWORD v24[2];

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(_DWORD *)(v3 - 12));
      v7 = WTF::fastZeroedMalloc((WTF *)(24 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v10 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, v8, v9);
      v12 = (WTF::ASCIICaseInsensitiveHash **)v10;
      v24[0] = v10;
      v24[1] = v11;
      v13 = *a2 ? *a2 + 24 * *(unsigned int *)(*a2 - 4) : 0;
      if (v13 != v10)
      {
        do
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::ASCIICaseInsensitiveHash::hash(*v12, v11);
          v18 = 0;
          do
          {
            v19 = v16 & v15;
            v20 = WTF::equal(*(WTF **)(v14 + 24 * (v16 & v15)), 0, v17);
            v16 = ++v18 + v19;
          }
          while (!v20);
          WTF::String::operator=((WTF::StringImpl **)(v14 + 24 * v19), (WTF::StringImpl *)v12);
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v14 + 24 * v19 + 8, (uint64_t)(v12 + 1));
          v24[0] += 24;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v24, v21, v22);
          v12 = (WTF::ASCIICaseInsensitiveHash **)v24[0];
        }
        while (v24[0] != v13);
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (a2 != a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    v6 = *(WTF::StringImpl **)a2;
    v7 = *(WTF::StringImpl ***)a1;
    if ((_DWORD)v4)
    {
      v8 = 8 * v4;
      do
      {
        WTF::String::operator=(v7, v6);
        v6 = (WTF::StringImpl *)((char *)v6 + 8);
        ++v7;
        v8 -= 8;
      }
      while (v8);
      v6 = *(WTF::StringImpl **)a2;
      v9 = *(_DWORD *)(a1 + 12);
      v7 = *(WTF::StringImpl ***)a1;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(unsigned int *)(a2 + 12);
    if (v9 != (_DWORD)v10)
    {
      v11 = &v7[v9];
      v12 = (WTF::StringImpl **)((char *)v6 + 8 * v9);
      v13 = 8 * v10 - 8 * v9;
      do
      {
        v14 = *v12;
        if (*v12)
          *(_DWORD *)v14 += 2;
        *v11++ = v14;
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    *(_DWORD *)(a1 + 12) = v10;
  }
  return a1;
}

WebKit::ResourceLoadStatisticsStore *std::unique_ptr<WebKit::ResourceLoadStatisticsStore>::reset[abi:sn180100](WebKit::ResourceLoadStatisticsStore **a1, WebKit::ResourceLoadStatisticsStore *a2)
{
  WebKit::ResourceLoadStatisticsStore *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ResourceLoadStatisticsStore::~ResourceLoadStatisticsStore(result);
    return (WebKit::ResourceLoadStatisticsStore *)WTF::fastFree(v4, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::postTask(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C0D18;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

WTF *std::__optional_storage_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OrganizationStorageAccessPromptQuirk,false>>(WTF *result, WTF::StringImpl *a2)
{
  WTF *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  if (*((unsigned __int8 *)result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*((_BYTE *)result + 32))
    {
      WTF::String::operator=((WTF::StringImpl **)result, a2);
      v5 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v6 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = v5;
      if (v6)
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v6, v4);
      v7 = *((_DWORD *)v3 + 7);
      if (v7)
        WTF::VectorDestructor<true,WTF::URL>::destruct(*((WTF::StringImpl **)v3 + 2), (WTF::StringImpl *)(*((_QWORD *)v3 + 2) + 40 * v7));
      return WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v3 + 16, (_DWORD *)a2 + 4);
    }
  }
  else if (*((_BYTE *)result + 32))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result + 16, a2);
    v9 = *((_QWORD *)v3 + 1);
    if (v9)
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v9, v8);
    result = *(WTF **)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)result -= 2;
    }
    *((_BYTE *)v3 + 32) = 0;
  }
  else
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v10;
    *((_QWORD *)result + 1) = 0;
    v11 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 1) = v11;
    v12 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)result + 2) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = 0;
    *((_DWORD *)result + 6) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = 0;
    *((_DWORD *)result + 7) = v12;
    *((_BYTE *)result + 32) = 1;
  }
  return result;
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD v14[2];

  *a4 = 0;
  result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, a2, a3);
  v14[0] = result;
  v14[1] = v7;
  if (*a1)
    v8 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  else
    v8 = 0;
  if (v8 != result)
  {
    do
    {
      WebCore::RegistrableDomain::isolatedCopy(&v13);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(a4, &v13, (uint64_t)&v12);
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, (uint64_t)v9, v10);
      result = v14[0];
    }
    while (v14[0] != v8);
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3, int8x16_t **a4)
{
  uint64_t v7;
  uint64_t v8;
  char *result;
  int8x16_t *v10;
  int8x16_t *v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  char *v38;
  int8x16_t *v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  size_t v43;
  int8x16_t *v44;
  uint64_t v45;
  uint64_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;

  v7 = *a3;
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0 || v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v10 = *a2;
      v11 = a2[1];
      v12 = *a3;
      v13 = *a4;
      v14 = *((unsigned int *)a4 + 2);
      v15 = &result[2 * v11];
      v16 = v11 & 0xFFFFFFC0;
      if (v16)
      {
        v17 = &result[2 * v16];
        v18 = 0uLL;
        do
        {
          v47.val[0] = *v10;
          v19 = v10[1];
          v49.val[0] = v10[2];
          v20 = v10[3];
          v10 += 4;
          v21 = v20;
          v49.val[1] = 0uLL;
          v51.val[0] = v19;
          v47.val[1] = 0uLL;
          v22 = result;
          vst2q_s8(v22, v47);
          v22 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v22, v51);
          v23 = result + 64;
          vst2q_s8(v23, v49);
          v24 = result + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
          result += 128;
        }
        while (result != v17);
        result = v17;
      }
      while (result != v15)
      {
        v25 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)result = v25;
        result += 2;
      }
      v46 = v12;
      result = (char *)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v46, v15);
      v26 = v46;
      if (v46)
        v26 = *(unsigned int *)(v46 + 4);
      v27 = &v15[2 * v26];
      v28 = &v27[2 * v14];
      if ((v14 & 0xFFFFFFC0) != 0)
      {
        v29 = &v27[2 * (v14 & 0xFFFFFFC0)];
        v30 = 0uLL;
        do
        {
          v48.val[0] = *v13;
          v31 = v13[1];
          v50.val[0] = v13[2];
          v32 = v13[3];
          v13 += 4;
          v33 = v32;
          v50.val[1] = 0uLL;
          v52.val[0] = v31;
          v48.val[1] = 0uLL;
          v34 = v27;
          vst2q_s8(v34, v48);
          v34 += 32;
          v52.val[1] = 0uLL;
          vst2q_s8(v34, v52);
          v35 = v27 + 64;
          vst2q_s8(v35, v50);
          v36 = v27 + 96;
          vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
          v27 += 128;
        }
        while (v27 != v29);
        v27 = v29;
      }
      while (v27 != v28)
      {
        v37 = v13->u8[0];
        v13 = (int8x16_t *)((char *)v13 + 1);
        *(_WORD *)v27 = v37;
        v27 += 2;
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEAB398]();
    if (result)
    {
      v38 = result;
      v39 = a2[1];
      v40 = v39;
      v41 = *a3;
      v42 = *a4;
      v43 = *((unsigned int *)a4 + 2);
      if ((_DWORD)v39)
      {
        v44 = *a2;
        if ((_DWORD)v39 == 1)
          *result = v44->i8[0];
        else
          memcpy(result, v44, a2[1]);
      }
      v46 = v41;
      result = (char *)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v46, &v38[v40]);
      v45 = v46;
      if (v46)
        v45 = *(unsigned int *)(v46 + 4);
      if ((_DWORD)v43)
      {
        result = &v38[v40 + v45];
        if ((_DWORD)v43 == 1)
          *result = v42->i8[0];
        else
          return (char *)memcpy(result, v42, v43);
      }
    }
  }
  return result;
}

void _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit27ResourceLoadStatisticsStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t a1, void *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int **v6;
  uint64_t v8;
  int v9;
  unsigned int v10;

  v2 = qword_1ECE72968;
  if (qword_1ECE72968)
  {
    v3 = *(_DWORD *)(qword_1ECE72968 - 4);
    if (v3)
    {
      v4 = 0;
      v5 = v3 - 1;
      do
      {
        v6 = (unsigned int **)(v2 + 8 * v5);
        if ((unint64_t)*v6 + 1 >= 2 && !*((_QWORD *)*v6 + 1))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v6, a2);
          ++v4;
        }
      }
      while ((unint64_t)v5--);
      v8 = qword_1ECE72968;
      if (v4)
      {
        *(_DWORD *)(qword_1ECE72968 - 16) += v4;
        if (qword_1ECE72968)
          v9 = *(_DWORD *)(qword_1ECE72968 - 12);
        else
          v9 = 0;
        *(_DWORD *)(qword_1ECE72968 - 12) = v9 - v4;
        v8 = qword_1ECE72968;
      }
      if (v8)
      {
        v10 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v10 && v10 >= 9)
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1ECE72968);
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34C0D40;
  WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C0D40;
  WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  WTF::WorkQueue *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **result;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;

  v2 = *(_QWORD *)(a1 + 8);
  {
    v3 = WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes;
  }
  else
  {
    v3 = 574905;
    WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes = 574905;
  }
  v4 = *(unsigned __int8 *)(a1 + 96);
  v5 = *(WTF::WorkQueue **)(a1 + 104);
  v11 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  WTF::WorkQueue::ref(v5);
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34C0D68;
  *(_OWORD *)(v6 + 8) = v11;
  *(_QWORD *)(v6 + 24) = v5;
  v12 = (WTF::StringImpl **)v6;
  v7 = *(_QWORD *)(v2 + 8);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    WebKit::NetworkSession::deleteAndRestrictWebsiteDataForRegistrableDomains(v8, v3, a1 + 16, v4 != 0, (uint64_t *)&v12);
    result = v12;
    v12 = 0;
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
  }
  else
  {
    v13 = 0;
    WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(v6, (uint64_t *)&v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = v13;
    if (v13)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v10);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF::WorkQueue *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *a1 = &off_1E34C0D68;
  v3 = (WTF::WorkQueue *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::WorkQueue::deref(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF::WorkQueue *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E34C0D68;
  v3 = (WTF::WorkQueue *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::WorkQueue::deref(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];
  _QWORD *v15;

  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)v14);
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)&v14[8] = v3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34C0D90;
  v4[1] = *(_QWORD *)v14;
  v5 = *(_QWORD *)&v14[8];
  *(_OWORD *)v14 = 0u;
  v4[2] = v5;
  v6 = *(_QWORD *)&v14[16];
  *(_QWORD *)&v14[16] = 0;
  v15 = v4;
  v4[3] = v6;
  WTF::SuspendableWorkQueue::dispatch();
  v8 = v15;
  v15 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  v9 = *(unsigned int **)&v14[16];
  *(_QWORD *)&v14[16] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v7);
    }
  }
  v12 = *(_QWORD *)&v14[8];
  *(_QWORD *)&v14[8] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v14, (WTF::StringImpl *)v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl **v7;

  *a1 = &off_1E34C0D90;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (WTF::StringImpl **)a1[1];
  if (v7)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, (WTF::StringImpl *)a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl **v7;

  *(_QWORD *)this = &off_1E34C0D90;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (WTF::StringImpl **)*((_QWORD *)this + 1);
  if (v7)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, (WTF::StringImpl *)a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::call(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int Error;
  uint64_t ErrorMsg;
  NSObject *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint8_t v28[16];
  unsigned int v29;
  _BYTE buf[12];
  _BYTE v31[10];
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a1[3];
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    WebKit::buildList<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(&v27, a1 + 1, a3);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET dataRecordsRemoved = dataRecordsRemoved + 1 WHERE registrableDomain IN (", 100, (uint64_t *)&v27, 41, buf);
    WebCore::SQLiteDatabase::prepareStatementSlow();
    v7 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v10 = v27;
    v27 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v6);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v29 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v28) != 101)
    {
      v11 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v21 = *(_QWORD *)(v5 + 648);
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v5 + 16));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v5 + 16));
        *(_DWORD *)buf = 134218755;
        *(_QWORD *)&buf[4] = v5;
        *(_WORD *)v31 = 2048;
        *(_QWORD *)&v31[2] = v21;
        v32 = 1024;
        v33 = Error;
        v34 = 2081;
        v35 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::incrementRecordsDeletedCountForDomains: failed to step statement", buf, 0x26u);
      }
    }
    if (v29 != -1)
      (*(&off_1E34C0CF8 + v29))((int)buf, (WebCore::SQLiteStatement *)v28);
    v12 = *(_QWORD *)(a1[3] + 8);
    *(_BYTE *)(v12 + 710) = 0;
    v13 = *(uint64_t **)(v12 + 624);
    *(_QWORD *)(v12 + 624) = 0;
    *(_QWORD *)buf = v13;
    v14 = *(_DWORD *)(v12 + 632);
    v15 = *(unsigned int *)(v12 + 636);
    *(_QWORD *)(v12 + 632) = 0;
    *(_DWORD *)&buf[8] = v14;
    *(_DWORD *)v31 = v15;
    v16 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if ((_DWORD)v15)
    {
      v18 = 8 * v15;
      do
      {
        v19 = *v13;
        *v13++ = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v18 -= 8;
      }
      while (v18);
    }
    v20 = *(_QWORD *)(a1[3] + 8);
    if (*(_BYTE *)(v20 + 708))
    {
      v24 = qword_1ECE71140;
      if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Done removing data records.", v28, 2u);
        v25 = a1[3];
        if (v25)
          v20 = *(_QWORD *)(v25 + 8);
        else
          v20 = 0;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v20, 13, 4, (uint64_t)v28);
      v26 = *(WTF::StringImpl **)v28;
      *(_QWORD *)v28 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v17);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v17);
  }
  else
  {
    v8 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C0DB8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C0DB8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0,void>::call(WTF::RunLoop *result)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  unsigned __int8 **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v1 = *((_QWORD *)result + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *((_QWORD *)result + 1);
    WebKit::ResourceLoadStatisticsStore::pruneStatisticsIfNeeded((WebCore::SQLiteStatement **)v2);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::ResourceLoadStatisticsStore::logTestingEvent((WTF::RunLoop *)v2);
    result = v6;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        result = (WTF::RunLoop *)WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    if (*(_BYTE *)(v2 + 224))
    {
      WTF::RunLoop::main(result);
      v4 = *(unsigned __int8 ***)(v2 + 104);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4);
      v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v5 = &off_1E34C0DE0;
      *((_QWORD *)v5 + 1) = v4;
      v7 = v5;
      WTF::RunLoop::dispatch();
      result = v7;
      if (v7)
        return (WTF::RunLoop *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;

  v2 = (unsigned __int8 **)a1[1];
  *a1 = &off_1E34C0DE0;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;

  v3 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C0DE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 32);
      v4 = 0;
      return IPC::Connection::send<Messages::NetworkProcessProxy::NotifyResourceLoadStatisticsProcessed>(v3, (uint64_t)&v4, 0, 0, 0);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 **v3;
  WTF::WorkQueue *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34C0E08;
  v3 = (unsigned __int8 **)a1[5];
  a1[5] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  v4 = (WTF::WorkQueue *)a1[4];
  a1[4] = 0;
  if (v4)
    WTF::WorkQueue::deref(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;
  WTF::WorkQueue *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34C0E08;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  v4 = (WTF::WorkQueue *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    WTF::WorkQueue::deref(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  WTF::WorkQueue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **result;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;

  v1 = *(_QWORD *)(a1 + 40);
  {
    v2 = WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes;
  }
  else
  {
    v2 = 574905;
    WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes = 574905;
  }
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(WTF::WorkQueue **)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  WTF::WorkQueue::ref(v4);
  v5 = WTF::fastMalloc((WTF *)0x20);
  v6 = v5;
  *(_QWORD *)v5 = &off_1E34C0E30;
  *(_OWORD *)(v5 + 8) = v11;
  *(_QWORD *)(v5 + 24) = v4;
  v12 = (WTF::StringImpl **)v5;
  v7 = *(_QWORD *)(v1 + 8);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    WebKit::NetworkProcess::registrableDomainsWithWebsiteData(*(_QWORD *)(v8 + 32), *(WTF::StringImpl ***)(v8 + 24), v2, v3 != 0, (uint64_t *)&v12);
    result = v12;
    v12 = 0;
    if (result)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
  }
  else
  {
    v13 = 0;
    WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(v5, (uint64_t *)&v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = v13;
    if (v13)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v10);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF::WorkQueue *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34C0E30;
  v3 = (WTF::WorkQueue *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::WorkQueue::deref(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF::WorkQueue *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C0E30;
  v3 = (WTF::WorkQueue *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::WorkQueue::deref(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1},void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2)
{
  WTF *v3;
  uint64_t v4;
  _QWORD *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  uint64_t v10;
  WTF *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v12 = v3;
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)&v13);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v14 = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34C0E58;
  v5[1] = v12;
  v6 = v13;
  v13 = 0;
  v5[2] = v6;
  v7 = v14;
  v14 = 0;
  v15 = v5;
  v5[3] = v7;
  WTF::SuspendableWorkQueue::dispatch();
  v9 = v15;
  v15 = 0;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v8);
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34C0E58;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)a1[2];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C0E58;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)#1}::operator()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  const WebCore::RegistrableDomain *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  WTF::RunLoop *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int Error;
  uint64_t ErrorMsg;
  WTF::StringImpl *v31;
  _BYTE v32[16];
  unsigned int v33;
  uint64_t v34;
  char v35;
  _BYTE buf[22];
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v1 = (_QWORD *)a1;
  v41 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v17 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v5 = (_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v3, (uint64_t)&v34);
    v8 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(v1 + 2, v6, v7);
    v10 = (const WebCore::RegistrableDomain *)v8;
    *(_QWORD *)buf = v8;
    *(_QWORD *)&buf[8] = v11;
    if (*v5)
      v12 = *v5 + 8 * *(unsigned int *)(*v5 - 4);
    else
      v12 = 0;
    if (v12 != v8)
    {
      do
      {
        WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, v10, (uint64_t)"grandfatherDataForDomains");
        *(_QWORD *)buf += 8;
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)buf, v13, v14);
        v10 = *(const WebCore::RegistrableDomain **)buf;
      }
      while (*(_QWORD *)buf != v12);
    }
    WebKit::buildList<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(&v31, v1 + 2, v9);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET grandfathered = 1 WHERE registrableDomain IN (", 74, (uint64_t *)&v31, 41, buf);
    WebCore::SQLiteDatabase::prepareStatementSlow();
    v16 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v19 = v31;
    v31 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (v33 || (a1 = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v32), (_DWORD)a1 != 101))
    {
      v20 = qword_1ECE71758;
      a1 = os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR);
      if ((_DWORD)a1)
      {
        v28 = *(_QWORD *)(v3 + 648);
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v3 + 16));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 16));
        *(_DWORD *)buf = 134218755;
        *(_QWORD *)&buf[4] = v3;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v28;
        v37 = 1024;
        v38 = Error;
        v39 = 2081;
        v40 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::grandfatherDataForDomains: failed to step statement", buf, 0x26u);
      }
    }
    if (v33 != -1)
      a1 = (*(&off_1E34C0CF8 + v33))((int)buf, (WebCore::SQLiteStatement *)v32);
    v21 = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
    }
    else if (!v34)
    {
LABEL_28:
      v3 = *(_QWORD *)(v1[1] + 8);
      goto LABEL_29;
    }
    a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    goto LABEL_28;
  }
LABEL_29:
  v22 = *(double *)(v3 + 640);
  WTF::WallTime::now((WTF::WallTime *)a1);
  *(double *)(*(_QWORD *)(v1[1] + 8) + 232) = *(double *)(*(_QWORD *)(v1[1] + 8) + 176) + v22 + v23;
  v24 = v1[3];
  v1[3] = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v1[1];
  if (v25)
    v26 = *(WTF::RunLoop **)(v25 + 8);
  else
    v26 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::ResourceLoadStatisticsStore::logTestingEvent(v26);
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::scheduleStatisticsProcessingRequestIfNecessary(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C0EA8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::scheduleStatisticsProcessingRequestIfNecessary(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C0EA8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::ResourceLoadStatisticsStore *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::scheduleStatisticsProcessingRequestIfNecessary(void)::$_0,void>::call(WebKit::ResourceLoadStatisticsStore *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *((_QWORD *)result + 1);
      if (*(_BYTE *)(v2 + 272))
      {
        if (*(_QWORD *)(v2 + 264) == *((_QWORD *)result + 3))
        {
          v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v3 = off_1E34C0ED0;
          v4 = v3;
          WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(v2, (uint64_t *)&v4);
          if (v4)
            (*(void (**)(_QWORD *))(*v4 + 8))(v4);
          return WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords((WebKit::ResourceLoadStatisticsStore *)v2);
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;

  v2 = (unsigned __int8 **)a1[1];
  *a1 = &off_1E34C0EF8;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;

  v3 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C0EF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCacheMaxAgeCap(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34C0F20;
  v4 = v2;
  WebKit::WebResourceLoadStatisticsStore::setCacheMaxAgeCap(*(_QWORD *)(v1 + 8), (uint64_t *)&v4);
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;

  v2 = (unsigned __int8 **)a1[1];
  *a1 = &off_1E34C0F48;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;

  v3 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C0F48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateClientSideCookiesAgeCap(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 32);
      v4 = *(_QWORD *)(v2 + 24);
      result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 216), &v4);
      if (result)
        return WebCore::NetworkStorageSession::setAgeCapForClientSideCookies();
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned __int8 **v7;

  *a1 = off_1E34C0F70;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[8];
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), v6);
  v7 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 **v8;

  *(_QWORD *)a1 = off_1E34C0F70;
  v3 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)a1 + 8);
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 48, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, v6);
  v8 = (unsigned __int8 **)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v8)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v8);
  return WTF::fastFree(a1, v7);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  unsigned __int8 **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v2 = *(unsigned __int8 ***)(a1 + 8);
  v3 = a1 + 16;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2);
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E34C0F98;
  v5[1] = v2;
  v5[2] = v4;
  v7 = v5;
  WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(v2, v3, &v7);
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C0F98;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C0F98;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E34C0FC0;
  v2[1] = v1;
  v4 = v2;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C0FC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C0FC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlockingForDomains(WebKit::RegistrableDomainsToBlockCookiesFor &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned __int8 **v4;

  *a1 = &off_1E34C0FE8;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C0FE8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebResourceLoadStatisticsStore::logTestingEvent(*(IPC::Encoder **)(*(_QWORD *)(a1 + 8) + 8), (const WTF::String *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C1010;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C1010;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::NetworkStorageSession *v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C1038;
  v4[1] = v2;
  v4[2] = v3;
  v5 = *(_QWORD *)(v2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 32);
      v10 = *(_QWORD *)(v6 + 24);
      v8 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 216), &v10);
      if (v8)
        WebCore::NetworkStorageSession::removeAllStorageAccess(v8);
    }
  }
  (*(void (**)(_QWORD *))(*v4 + 16))(v4);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C1038;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C1038;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E34C1060;
  v2[1] = v1;
  v4 = v2;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1060;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1060;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::removeAllStorageAccess(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C10B0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C10B0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(*(_QWORD *)(result + 32), *(_BYTE *)(result + 16), *(_BYTE *)(result + 17), result + 24);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::allocateTable(a2);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(_BYTE *)(a1 + 20) = 0;
  v29 = v4;
  if ((_DWORD)v4)
  {
    v11 = 0;
    v28 = v5;
    do
    {
      v12 = (WTF::StringImpl **)((char *)v5 + 32 * v11);
      v13 = *v12;
      if (*v12)
      {
        v14 = *(_DWORD *)(a1 + 8);
        v15 = *(_DWORD *)(a1 + 16);
        v16 = *((_DWORD *)v13 + 4);
        if (v16 >= 0x100)
          v17 = v16 >> 8;
        else
          v17 = WTF::StringImpl::hashSlowCase(v13);
        v18 = v14 - 1;
        v19 = (v17 ^ v15) & (v14 - 1);
        v20 = (WTF::StringImpl **)(*(_QWORD *)a1 + 32 * v19);
        v21 = *v20;
        if (*v20)
        {
          v22 = 0;
          do
          {
            v23 = *((_DWORD *)v21 + 4);
            if (v23 >= 0x100)
              v24 = v23 >> 8;
            else
              v24 = WTF::StringImpl::hashSlowCase(v21);
            v25 = (v19 + v14 - ((v24 ^ v15) & v18)) & v18;
            if (v22 > v25)
            {
              std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>((uint64_t)v12, v20);
              v22 = v25;
            }
            v19 = ((_DWORD)v19 + 1) & v18;
            ++v22;
            v20 = (WTF::StringImpl **)(*(_QWORD *)a1 + 32 * v19);
            v21 = *v20;
          }
          while (*v20);
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>(v20, (uint64_t)v12);
        v5 = v28;
      }
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v12 + 2), v7);
      v26 = v12[1];
      v12[1] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v7);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = *v12;
      *v12 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v7);
        else
          *(_DWORD *)v27 -= 2;
      }
      ++v11;
    }
    while (v11 != v29);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  char v16;

  v4 = *(WTF::StringImpl **)a1;
  v5 = (WTF::StringImpl **)(a1 + 8);
  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  LOBYTE(v15) = 0;
  v16 = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    v7 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v15 = v7;
    v16 = 1;
  }
  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  v8 = a2 + 1;
  WTF::String::operator=(v5, (WTF::StringImpl *)(a2 + 1));
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a1 + 16, (uint64_t)(a2 + 2));
  v10 = *a2;
  *a2 = v4;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *v8;
  *v8 = v6;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)(a2 + 2), (uint64_t)&v15);
  if (v16)
  {
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return 0;
}

_BYTE *WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(_BYTE *result, char *__dst)
{
  int8x16_t *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  int8x16x2_t v14;
  int8x16x2_t v15;
  int8x16x2_t v16;

  v2 = *(int8x16_t **)result;
  v3 = *((unsigned int *)result + 2);
  if (result[12])
  {
    v4 = &__dst[2 * v3];
    if (v3 >= 0x40)
    {
      v5 = &__dst[2 * (v3 & 0xFFFFFFC0)];
      v6 = 0uLL;
      do
      {
        v14.val[0] = *v2;
        v7 = v2[1];
        v15.val[0] = v2[2];
        v8 = v2[3];
        v2 += 4;
        v9 = v8;
        v15.val[1] = 0uLL;
        v16.val[0] = v7;
        v14.val[1] = 0uLL;
        v10 = __dst;
        vst2q_s8(v10, v14);
        v10 += 32;
        v16.val[1] = 0uLL;
        vst2q_s8(v10, v16);
        v11 = __dst + 64;
        vst2q_s8(v11, v15);
        v12 = __dst + 96;
        vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
        __dst += 128;
      }
      while (__dst != v5);
      __dst = v5;
    }
    while (__dst != v4)
    {
      v13 = v2->u8[0];
      v2 = (int8x16_t *)((char *)v2 + 1);
      *(_WORD *)__dst = v13;
      __dst += 2;
    }
  }
  else if ((_DWORD)v3)
  {
    if ((_DWORD)v3 == 1)
      *(_WORD *)__dst = v2->i16[0];
    else
      return memcpy(__dst, v2, 2 * v3);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF *v4;
  WebCore::PrivateClickMeasurement *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v6 = *(WebCore::PrivateClickMeasurement **)a1;
    v7 = 312 * v3;
    do
    {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(v6, a2);
      v6 = (WebCore::PrivateClickMeasurement *)(v8 + 312);
      v7 -= 312;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PrivateClickMeasurement>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 312 * v4;
  *(_BYTE *)v6 = *(_BYTE *)v3;
  v7 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v6 + 8) = v7;
  v8 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v6 + 16) = v8;
  v9 = *(_OWORD *)(v3 + 24);
  v10 = *(_OWORD *)(v3 + 33);
  *(_BYTE *)(v6 + 56) = 0;
  v11 = v6 + 56;
  *(_OWORD *)(v11 - 23) = v10;
  *(_OWORD *)(v11 - 32) = v9;
  *(_BYTE *)(v11 + 128) = 0;
  v12 = (_BYTE *)(v11 + 128);
  if (*(_BYTE *)(v3 + 184))
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v11, v3 + 56);
    *v12 = 1;
  }
  v13 = v5 + 312 * v4;
  v14 = *(_OWORD *)(v3 + 192);
  v15 = *(_OWORD *)(v3 + 208);
  *(_BYTE *)(v13 + 224) = 0;
  v16 = v13 + 224;
  *(_OWORD *)(v16 - 32) = v14;
  *(_OWORD *)(v16 - 16) = v15;
  *(_BYTE *)(v16 + 8) = 0;
  if (*(_BYTE *)(v3 + 232))
  {
    v17 = *(_QWORD *)(v3 + 224);
    *(_QWORD *)(v3 + 224) = 0;
    *(_QWORD *)v16 = v17;
    *(_BYTE *)(v16 + 8) = 1;
  }
  v18 = v5 + 312 * v4;
  v19 = *(_QWORD *)(v3 + 240);
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v18 + 240) = v19;
  v20 = *(_QWORD *)(v3 + 248);
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v18 + 248) = v20;
  v21 = *(_QWORD *)(v3 + 256);
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v18 + 256) = v21;
  v22 = *(_QWORD *)(v3 + 264);
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v18 + 264) = v22;
  *(_BYTE *)(v18 + 272) = 0;
  *(_BYTE *)(v18 + 296) = 0;
  if (*(_BYTE *)(v3 + 296))
  {
    v23 = *(_QWORD *)(v3 + 272);
    *(_QWORD *)(v3 + 272) = 0;
    *(_QWORD *)(v18 + 272) = v23;
    v24 = v5 + 312 * v4;
    v25 = *(_QWORD *)(v3 + 280);
    *(_QWORD *)(v3 + 280) = 0;
    *(_QWORD *)(v24 + 280) = v25;
    v26 = *(_QWORD *)(v3 + 288);
    *(_QWORD *)(v3 + 288) = 0;
    *(_QWORD *)(v24 + 288) = v26;
    *(_BYTE *)(v18 + 296) = 1;
  }
  v27 = *(_QWORD *)(v3 + 304);
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v5 + 312 * v4 + 304) = v27;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 312 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xD20D21)
    {
      __break(0xC471u);
      JUMPOUT(0x197127F24);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 312 * *(unsigned int *)(a1 + 12));
    v5 = 312 * a2;
    v6 = WTF::fastMalloc((WTF *)(312 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x138;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::PrivateClickMeasurement>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::PrivateClickMeasurement>::move(WTF::StringImpl *a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (char *)a1 + v6;
      v8 = a3 + v6;
      *(_BYTE *)v8 = *((_BYTE *)a1 + v6);
      v9 = *(_QWORD *)((char *)a1 + v6 + 8);
      *((_QWORD *)v7 + 1) = 0;
      *(_QWORD *)(v8 + 8) = v9;
      v10 = *(_QWORD *)((char *)a1 + v6 + 16);
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)(v8 + 16) = v10;
      v11 = *(_OWORD *)((char *)a1 + v6 + 24);
      *(_OWORD *)(v8 + 33) = *(_OWORD *)((char *)a1 + v6 + 33);
      *(_OWORD *)(v8 + 24) = v11;
      *(_BYTE *)(a3 + v6 + 56) = 0;
      *(_BYTE *)(v8 + 184) = 0;
      if (*((_BYTE *)a1 + v6 + 184))
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(a3 + v6 + 56, (uint64_t)(v7 + 56));
        *(_BYTE *)(v8 + 184) = 1;
      }
      v12 = *((_OWORD *)v7 + 13);
      *(_OWORD *)(v8 + 192) = *((_OWORD *)v7 + 12);
      *(_OWORD *)(v8 + 208) = v12;
      *(_BYTE *)(v8 + 224) = 0;
      *(_BYTE *)(v8 + 232) = 0;
      if (v7[232])
      {
        v13 = *(_QWORD *)((char *)a1 + v6 + 224);
        *(_QWORD *)((char *)a1 + v6 + 224) = 0;
        *(_QWORD *)(v8 + 224) = v13;
        *(_BYTE *)(v8 + 232) = 1;
      }
      v14 = a3 + v6;
      v15 = *((_QWORD *)v7 + 30);
      *((_QWORD *)v7 + 30) = 0;
      *(_QWORD *)(v14 + 240) = v15;
      v16 = *((_QWORD *)v7 + 31);
      *((_QWORD *)v7 + 31) = 0;
      *(_QWORD *)(v14 + 248) = v16;
      v17 = *((_QWORD *)v7 + 32);
      *((_QWORD *)v7 + 32) = 0;
      *(_QWORD *)(v14 + 256) = v17;
      v18 = *((_QWORD *)v7 + 33);
      *((_QWORD *)v7 + 33) = 0;
      *(_QWORD *)(v14 + 264) = v18;
      *(_BYTE *)(v14 + 272) = 0;
      *(_BYTE *)(v14 + 296) = 0;
      if (v7[296])
      {
        v19 = (_QWORD *)((char *)a1 + v6);
        v20 = *(_QWORD *)((char *)a1 + v6 + 272);
        v19[34] = 0;
        *(_QWORD *)(v14 + 272) = v20;
        v21 = *(_QWORD *)((char *)a1 + v6 + 280);
        v19[35] = 0;
        *(_QWORD *)(v14 + 280) = v21;
        v22 = *(_QWORD *)((char *)a1 + v6 + 288);
        v19[36] = 0;
        *(_QWORD *)(v14 + 288) = v22;
        *(_BYTE *)(v14 + 296) = 1;
      }
      v23 = *((_QWORD *)v7 + 38);
      *((_QWORD *)v7 + 38) = 0;
      *(_QWORD *)(v14 + 304) = v23;
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WTF::StringImpl *)((char *)a1 + v6), a2);
      v6 += 312;
    }
    while (v7 + 312 != (char *)a2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned __int8 **v4;

  *a1 = off_1E34C10D8;
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), v3);
  v4 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  unsigned __int8 **v5;

  *(_QWORD *)a1 = off_1E34C10D8;
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, v3);
  v5 = (unsigned __int8 **)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v5);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = *(_QWORD *)(v2 + 152);
      v5 = *(_DWORD *)(result + 44);
      if (v5)
      {
        v6 = *(_QWORD *)(result + 32);
        v7 = 312 * v5;
        do
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v6, 1);
          v6 += 312;
          v7 -= 312;
        }
        while (v7);
      }
      v8 = *(_DWORD *)(v3 + 28);
      if (v8)
      {
        v9 = *(_QWORD *)(v3 + 16);
        v10 = 312 * v8;
        do
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, v9, 0);
          v9 += 312;
          v10 -= 312;
        }
        while (v10);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ITPThirdPartyData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v3 + 20) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1971283A0);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::ITPThirdPartyData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::ITPThirdPartyData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result != a2)
  {
    v5 = (uint64_t)result + 8;
    do
    {
      v7 = v5 - 8;
      v6 = *(_QWORD *)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v8 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 16) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 20) = v8;
      WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      result = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 += 24;
      a3 += 24;
    }
    while ((WTF::StringImpl *)(v7 + 24) != a2);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = a1[1];
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v10 = *a1;
  if (v6 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v11 = v6;
    v9 = *a2;
    v8 = *a3;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v10, &v9, &v8, a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  char v9;
  uint64_t v10;
  _BOOL4 v11;

  v4 = *(_DWORD *)(result + 8);
  v5 = *a2;
  if (*a2)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if (v6 < 0)
    {
LABEL_14:
      *a4 = 0;
      return result;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  v9 = v7;
  if (v4 < 0)
    goto LABEL_14;
  if ((v9 & 1) != 0)
    goto LABEL_14;
  v7 = __OFADD__(v4, v8);
  v10 = (v4 + v8);
  if (v7)
    goto LABEL_14;
  v11 = !v5 || (*(_BYTE *)(v5 + 16) & 4) != 0;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v10, v11, *(int8x16_t **)result, *(_QWORD *)(result + 8), v5, *a3, a4);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  uint64_t v14;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v14;
        if (v14)
        {
          *(_DWORD *)v14 = 2;
          *(_DWORD *)(v14 + 4) = v11;
          *(_QWORD *)(v14 + 8) = v14 + 20;
          *(_DWORD *)(v14 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((char *)(v14 + 20), a3->i8, a4, a5, a6);
        }
        goto LABEL_6;
      }
LABEL_9:
      v13 = 0;
      goto LABEL_6;
    }
LABEL_10:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_6;
  }
  if (!(_DWORD)result)
    goto LABEL_10;
  if (result > 0x7FFFFFEF)
    goto LABEL_9;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v14;
  if (v14)
  {
    *(_DWORD *)v14 = 2;
    *(_DWORD *)(v14 + 4) = v11;
    *(_QWORD *)(v14 + 8) = v14 + 20;
    *(_DWORD *)(v14 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((char *)(v14 + 20), a3, a4, a5, a6);
  }
LABEL_6:
  *a7 = v13;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, char a5)
{
  char *v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;

  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  v9 = &__dst[a3];
  v12 = a4;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v12, v9);
  v11 = v12;
  if (v12)
    v11 = *(unsigned int *)(v12 + 4);
  v9[v11] = a5;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, char a5)
{
  char *v6;
  char *v7;
  __int128 v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  uint64_t *result;
  uint64_t v17;
  uint64_t v18;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  v6 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v7 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v8 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      v9 = a2[1];
      v20.val[0] = a2[2];
      v10 = a2[3];
      a2 += 4;
      v11 = v10;
      v20.val[1] = 0uLL;
      v21.val[0] = v9;
      v19.val[1] = 0uLL;
      v12 = a1;
      vst2q_s8(v12, v19);
      v12 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v12, v21);
      v13 = a1 + 64;
      vst2q_s8(v13, v20);
      v14 = a1 + 96;
      vst2q_s8(v14, *(int8x16x2_t *)(&v8 - 1));
      a1 += 128;
    }
    while (a1 != v7);
    a1 = v7;
  }
  while (a1 != v6)
  {
    v15 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v15;
    a1 += 2;
  }
  v18 = a4;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v18, v6);
  v17 = v18;
  if (v18)
    v17 = *(unsigned int *)(v18 + 4);
  *(_WORD *)&v6[2 * v17] = a5;
  return result;
}

uint64_t std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = (uint64_t *)(a1 + 1);
  v5 = (uint64_t)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v5;
        v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 1);
LABEL_9:
    v9 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v9 + 28) = *a3;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = v7;
    *v6 = v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = (uint64_t *)*v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned int>(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unsigned int v5;
  int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  char *result;
  char *v12;
  char *v13;
  __int128 v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  _BYTE v26[13];
  uint64_t v27;
  int8x16x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;

  v27 = *MEMORY[0x1E0C80C00];
  if (a3)
    v4 = a3 - 1;
  else
    v4 = 0;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197128A90);
  }
  v5 = a4;
  v7 = v4;
  v8 = a4;
  do
  {
    ++v7;
    v9 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v9);
  v10 = *((_QWORD *)a1 + 1);
  if ((v10 || (v10 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v10 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v12 = &result[2 * v4];
      if ((v4 & 0xFFFFFFC0) != 0)
      {
        v13 = &result[2 * (v4 & 0xFFFFFFC0)];
        v14 = 0uLL;
        do
        {
          v28.val[0] = *a2;
          v15 = a2[1];
          v29.val[0] = a2[2];
          v16 = a2[3];
          a2 += 4;
          v17 = v16;
          v29.val[1] = 0uLL;
          v30.val[0] = v15;
          v28.val[1] = 0uLL;
          v18 = result;
          vst2q_s8(v18, v28);
          v18 += 32;
          v30.val[1] = 0uLL;
          vst2q_s8(v18, v30);
          v19 = result + 64;
          vst2q_s8(v19, v29);
          v20 = result + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v14 - 1));
          result += 128;
        }
        while (result != v13);
        result = v13;
      }
      while (result != v12)
      {
        v21 = a2->u8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        *(_WORD *)result = v21;
        result += 2;
      }
      v22 = 0;
      do
      {
        v26[v22-- + 12] = (v5 % 0xA) | 0x30;
        v9 = v5 > 9;
        v5 /= 0xAu;
      }
      while (v9);
      if (v22 + 14 <= 13)
      {
        do
        {
          *(_WORD *)v12 = *((unsigned __int8 *)&v27 + v22);
          v12 += 2;
        }
        while (!__CFADD__(v22++, 1));
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEAB398]();
    if (result)
    {
      v24 = result;
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
          *result = a2->i8[0];
        else
          result = (char *)memcpy(result, a2, v4);
      }
      v25 = 0;
      do
      {
        v26[v25-- + 12] = (v5 % 0xA) | 0x30;
        v9 = v5 > 9;
        v5 /= 0xAu;
      }
      while (v9);
      if (v25 + 14 <= 13)
        return (char *)memcpy(&v24[v4], &v26[v25 + 13], -v25);
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  WTF::StringImpl *v31;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  v3 = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!v3)
    goto LABEL_3;
  v5 = v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  if (v5)
  {
    v8 = v5;
    v9 = (_OWORD *)(v6 + 24);
    do
    {
      *((_DWORD *)v9 - 2) = 0;
      *v9 = 0uLL;
      v9[1] = 0uLL;
      v9 = (_OWORD *)((char *)v9 + 40);
      --v8;
    }
    while (v8);
  }
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (int *)(v2 + 40 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            v21 = v20 & v17;
            v22 = (int *)(v16 + 40 * (v20 & v17));
            v20 = ++v18 + (v20 & v17);
          }
          while (*v22);
          v23 = v16 + 40 * v21;
          v26 = *(WTF::StringImpl **)(v23 + 8);
          v25 = (_QWORD *)(v23 + 8);
          v24 = v26;
          *v25 = 0;
          if (v26)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v7);
            else
              *(_DWORD *)v24 -= 2;
          }
          *v22 = *v12;
          v27 = v2 + 40 * v10;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *v25 = v28;
          v29 = v16 + 40 * v21;
          v30 = *(_OWORD *)(v27 + 16);
          *(_DWORD *)(v29 + 32) = *(_DWORD *)(v27 + 32);
          *(_OWORD *)(v29 + 16) = v30;
          v31 = *(WTF::StringImpl **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v7);
            else
              *(_DWORD *)v31 -= 2;
          }
          if (v12 == a2)
            v11 = v16 + 40 * v21;
        }
        else
        {
          v14 = v2 + 40 * v10;
          v15 = *(WTF::StringImpl **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v7);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v10;
    }
    while (v10 != v3);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

int *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int v7;
  int v8;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  v5 = v2 & (v4 ^ HIWORD(v4));
  v6 = (int *)(a1 + 40 * v5);
  v7 = *v6;
  if (*v6 != a2)
  {
    v8 = 1;
    while (v7)
    {
      v5 = (v5 + v8) & v2;
      v6 = (int *)(a1 + 40 * v5);
      v7 = *v6;
      ++v8;
      if (*v6 == a2)
        return v6;
    }
    return (int *)(a1 + 40 * *(unsigned int *)(a1 - 4));
  }
  return v6;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned __int8 **v5;

  *a1 = &off_1E34C1100;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned __int8 **v5;

  *(_QWORD *)this = &off_1E34C1100;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t (**v3)();
  uint64_t (***v4)();
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)v2);
  v3 = *(uint64_t (***)())(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
  v5 = &off_1E34C1128;
  *v4 = &off_1E34C1128;
  v4[1] = (uint64_t (**)())v2;
  v4[2] = v3;
  v6 = *(_QWORD *)(v2 + 8);
  if (!v6)
    goto LABEL_8;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
    v5 = &off_1E34C1128;
LABEL_8:
    ((void (*)(uint64_t (***)(), _QWORD))v5[2])(v4, 0);
    return ((uint64_t (*)(uint64_t (***)()))(*v4)[1])(v4);
  }
  v8 = *(_QWORD *)(v7 + 32);
  v10 = *(_QWORD *)(v7 + 24);
  if (!WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 216), &v10))
  {
    v5 = *v4;
    goto LABEL_8;
  }
  result = WebCore::NetworkStorageSession::hasCookies();
  if (v4)
    return ((uint64_t (*)(uint64_t (***)()))(*v4)[1])(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C1128;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C1128;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C1150;
  *(_QWORD *)(v4 + 8) = v3;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1150;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1150;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 **v6;

  *a1 = &off_1E34C1178;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 **v6;

  *(_QWORD *)this = &off_1E34C1178;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)();
  uint64_t (***v6)();
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t hasStorageAccess;
  id v13;
  _QWORD v14[2];
  char v15;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)v2);
    v5 = *(uint64_t (***)())(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    v6 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
    v7 = &off_1E34C11A0;
    *v6 = &off_1E34C11A0;
    v6[1] = (uint64_t (**)())v2;
    v6[2] = v5;
    v8 = *(_QWORD *)(v2 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 32);
        v14[0] = *(_QWORD *)(v9 + 24);
        if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 216), v14))
        {
          v14[0] = v3;
          v14[1] = v4;
          v15 = 1;
          hasStorageAccess = WebCore::NetworkStorageSession::hasStorageAccess();
        }
        else
        {
          hasStorageAccess = 0;
        }
        v7 = *v6;
      }
      else
      {
        hasStorageAccess = 0;
        v7 = &off_1E34C11A0;
      }
    }
    else
    {
      hasStorageAccess = 0;
    }
    ((void (*)(uint64_t (***)(), uint64_t))v7[2])(v6, hasStorageAccess);
    return ((uint64_t (*)(uint64_t (***)()))(*v6)[1])(v6);
  }
  else
  {
    v13 = std::__throw_bad_optional_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(v13);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C11A0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C11A0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C11C8;
  *(_QWORD *)(v4 + 8) = v3;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C11C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C11C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebKit::StorageAccessStatus)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C11F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebKit::StorageAccessStatus)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C11F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebKit::StorageAccessStatus)> &&)::$_0,void,WebCore::StorageAccessWasGranted>::call(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 2 * (a2 == 1));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34C1240;
  WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::~$_1((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C1240;
  WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::~$_1((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
  WTF *v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  __int128 v40;
  _BYTE v41[25];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  _QWORD v48[2];

  LOBYTE(v43) = 0;
  v46 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 32),
        v33 = *(WTF **)(v4 + 24),
        WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 216), &v33)))
  {
    WebCore::NetworkStorageSession::storageAccessQuirkForDomainPair();
    std::__optional_storage_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OrganizationStorageAccessPromptQuirk,false>>((WTF *)&v43, (WTF::StringImpl *)&v33);
    std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v6);
    canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction();
  }
  else
  {
    canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction = 0;
  }
  v8 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v33 = v8;
  if (v46)
  {
    v9 = v44;
    v44 = 0;
    v47 = 0u;
    v10 = v43;
    v43 = 0u;
    v34 = v10;
    v48[0] = 0;
    v35 = v9;
    v48[1] = 0;
    *(_QWORD *)&v10 = v45;
    v45 = 0;
    v36 = v10;
    v37 = 1;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, a2);
    if (*((_QWORD *)&v47 + 1))
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*((uint64_t *)&v47 + 1), v11);
    v12 = (WTF::StringImpl *)v47;
    *(_QWORD *)&v47 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    LOBYTE(v34) = 0;
    v37 = 0;
  }
  WebCore::RegistrableDomain::isolatedCopy(&v38);
  WebCore::RegistrableDomain::isolatedCopy(&v39);
  v13 = *(_OWORD *)(a1 + 64);
  v40 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)v41 = v13;
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)&v41[16] = *(_QWORD *)(a1 + 80);
  v41[24] = canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction;
  *(_QWORD *)(a1 + 88) = 0;
  v42 = v14;
  v15 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v15 = off_1E34C1268;
  v16 = v33;
  v33 = 0;
  *(_QWORD *)(v15 + 8) = v16;
  *(_BYTE *)(v15 + 16) = 0;
  *(_BYTE *)(v15 + 48) = 0;
  if (v37)
  {
    *(_QWORD *)(v15 + 16) = v34;
    v17 = *((_QWORD *)&v34 + 1);
    v34 = 0uLL;
    *(_QWORD *)(v15 + 24) = v17;
    *(_QWORD *)(v15 + 32) = v35;
    v18 = v36;
    v35 = 0;
    v36 = 0;
    *(_QWORD *)(v15 + 40) = v18;
    *(_BYTE *)(v15 + 48) = 1;
  }
  *(_QWORD *)(v15 + 56) = v38;
  v19 = v39;
  v38 = 0;
  v39 = 0;
  *(_QWORD *)(v15 + 64) = v19;
  v20 = v40;
  v21 = *(_OWORD *)v41;
  *(_OWORD *)(v15 + 97) = *(_OWORD *)&v41[9];
  *(_OWORD *)(v15 + 88) = v21;
  *(_OWORD *)(v15 + 72) = v20;
  v22 = v42;
  v42 = 0;
  *(_QWORD *)(v15 + 120) = v22;
  *(_QWORD *)&v47 = v15;
  WTF::SuspendableWorkQueue::dispatch();
  v24 = v47;
  *(_QWORD *)&v47 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v42;
  v42 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v39;
  v39 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v23);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v38;
  v38 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v23);
    else
      *(_DWORD *)v27 -= 2;
  }
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v23);
  v29 = (unsigned int *)v33;
  v33 = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
  }
  return std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v28);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = off_1E34C1268;
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 2), a2);
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)a1 = off_1E34C1268;
  v3 = *((_QWORD *)a1 + 15);
  *((_QWORD *)a1 + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 16, a2);
  v7 = (unsigned int *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  return WTF::fastFree(a1, v6);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _QWORD v25[2];

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a1 + 24), a2, a3);
      v8 = v5;
      v25[0] = v5;
      v25[1] = v6;
      v9 = *(_QWORD *)(a1 + 24);
      v10 = v9 ? v9 + 24 * *(unsigned int *)(v9 - 4) : 0;
      if (v10 != v5)
      {
        do
        {
          v13 = *(unsigned int *)(v8 + 20);
          if ((_DWORD)v13)
          {
            v14 = *(WTF ***)(v8 + 8);
            v15 = 8 * v13;
            do
            {
              if (!WTF::equal(*(WTF **)v8, *(const WTF::StringImpl **)(a1 + 64), v7)
                || (WTF::equal(*v14, *(const WTF::StringImpl **)(a1 + 56), v16) & 1) == 0)
              {
                v17 = *v14;
                if (*v14)
                  *(_DWORD *)v17 += 2;
                v24 = v17;
                v18 = *(WTF::StringImpl **)v8;
                if (*(_QWORD *)v8)
                  *(_DWORD *)v18 += 2;
                v23 = v18;
                v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v19 = off_1E34C1290;
                v22 = v19;
                WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(a1 + 72, (const WebCore::RegistrableDomain *)&v24, &v23, (uint64_t *)&v22);
                if (v22)
                  (*(void (**)(_QWORD *))(*v22 + 8))(v22);
                v20 = v23;
                v23 = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2)
                    WTF::StringImpl::destroy(v20, v6);
                  else
                    *(_DWORD *)v20 -= 2;
                }
                v21 = v24;
                v24 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2)
                    WTF::StringImpl::destroy(v21, v6);
                  else
                    *(_DWORD *)v21 -= 2;
                }
              }
              ++v14;
              v15 -= 8;
            }
            while (v15);
            v8 = v25[0];
          }
          v25[0] = v8 + 24;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v25, (uint64_t)v6, v7);
          v8 = v25[0];
        }
        while (v25[0] != v10);
      }
    }
    return WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(a1 + 72, (const WebCore::RegistrableDomain *)(a1 + 56), (const WTF::StringImpl **)(a1 + 64), (uint64_t *)(a1 + 120));
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

WTF::StringImpl *WebKit::ResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(uint64_t a1, const WebCore::RegistrableDomain *a2, const WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _BOOL4 v14;
  uint64_t v15;
  __int128 v17;
  char v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  uint64_t v21[3];
  WTF::StringImpl *v22[2];

  v22[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 24))
  {
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(*(_QWORD *)(a1 + 32), a2, (uint64_t)"grantStorageAccess");
    if (!v9)
    {
      v15 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = (WTF::StringImpl *)v21[0];
    v20 = v21[0];
    v11 = *a3;
    if (*a3)
      *(_DWORD *)v11 += 2;
    v22[0] = v11;
    v19 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v19, v22, (uint64_t)v21);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v8, &v20, (uint64_t *)&v19);
    if (v19)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v19, v12);
    v13 = v22[0];
    v22[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v12);
        if (!v10)
        {
LABEL_18:
          v14 = *(_BYTE *)(a1 + 24) != 0;
          goto LABEL_19;
        }
LABEL_15:
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v12);
        else
          *(_DWORD *)v10 -= 2;
        goto LABEL_18;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v10)
      goto LABEL_18;
    goto LABEL_15;
  }
  v14 = 0;
LABEL_19:
  v17 = *(_OWORD *)a1;
  v18 = 1;
  return WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(v8, (WTF **)a2, a3, &v17, *(_QWORD *)(a1 + 16), v14, *(_BYTE *)(a1 + 25), a4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E34C12B8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)a1[7];
  a1[7] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34C12B8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[7];
  _QWORD v15[2];
  char v16;
  _BYTE v17[7];

  v2 = *(WTF::StringImpl **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)v14 = *(_DWORD *)(a1 + 41);
  *(_DWORD *)&v14[3] = *(_DWORD *)(a1 + 44);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned __int8 *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)v5);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E34C12E0;
  v8[1] = v7;
  v8[2] = v5;
  v9 = *(_QWORD *)(v5 + 8);
  if (v9
    && (v10 = *(_QWORD *)(v9 + 8)) != 0
    && (v11 = *(_QWORD *)(v10 + 32),
        v15[0] = *(_QWORD *)(v10 + 24),
        WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 216), v15)))
  {
    if (v6)
    {
      LOBYTE(v15[0]) = 0;
      v16 = 0;
    }
    else
    {
      v15[0] = v2;
      v15[1] = v3;
      v16 = v4;
      *(_DWORD *)v17 = *(_DWORD *)v14;
      *(_DWORD *)&v17[3] = *(_DWORD *)&v14[3];
    }
    WebCore::NetworkStorageSession::grantStorageAccess();
    if (v4)
      v12 = WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame(v5, v2, v3, *(WTF::StringImpl **)(a1 + 8));
    else
      v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v12);
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;
  uint64_t v3;

  *a1 = &off_1E34C12E0;
  v2 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C12E0;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C1308;
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 16) = v3;
  v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1}::operator()(WTF::CompletionHandler)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1308;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1}::operator()(WTF::CompletionHandler)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1308;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,WTF::CompletionHandler<void ()(WebCore::StorageAccessWasGranted)> &&)::$_0::operator()(void)::{lambda(WTF::CompletionHandler)#1}::operator()(WTF::CompletionHandler)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1358;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1358;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16));
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::ResourceLoadStatisticsStore::DomainData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = v3[1];
      v3[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 5;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::ASCIICaseInsensitiveHash *v20;
  WTF::StringImpl *v21;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v12 = v9;
  v13 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v13;
  *(_DWORD *)(v12 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v14 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = v6;
    do
    {
      if (*(_QWORD *)v16 != -1)
      {
        if (WTF::equal(*(WTF **)v16, 0, v11))
        {
          v17 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v10);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        else
        {
          v18 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(a1, (WTF::ASCIICaseInsensitiveHash **)v16);
          v19 = *(WTF::StringImpl **)v18;
          *(_QWORD *)v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v10);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = *(WTF::ASCIICaseInsensitiveHash **)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)v18 = v20;
          *(_QWORD *)(v18 + 8) = *(_QWORD *)(v16 + 8);
          v21 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v10);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (v16 == a3)
            v14 = v18;
        }
      }
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::clear(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C1380;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::clear(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34C1380;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::clear(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C13A8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::clear(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34C13A8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = off_1E34C13D0;
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[9];
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 7), a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), v6);
  v8 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v8)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v8);
  v9 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)a1 = off_1E34C13D0;
  v3 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)a1 + 9);
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 56, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, v6);
  v8 = (unsigned __int8 **)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v8)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v8);
  v9 = (unsigned int *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v7);
    }
  }
  return WTF::fastFree(a1, v7);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v2 = (uint64_t)(a1 + 3);
  v4 = a1[1];
  v3 = (unsigned __int8 **)a1[2];
  a1[1] = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
  v5 = a1[10];
  a1[10] = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C13F8;
  v6[1] = v4;
  v6[2] = v3;
  v6[3] = v5;
  v8 = v6;
  WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(v3, v2, &v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34C13F8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C13F8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v3 = &off_1E34C1420;
  v3[1] = v1;
  v3[2] = v2;
  v5 = v3;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C1420;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C1420;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *result;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 708))
      {
        v6 = qword_1ECE71140;
        if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Done applying cross-site tracking restrictions.", buf, 2u);
          v7 = *(_QWORD *)(a1 + 8);
          if (v7)
            v5 = *(_QWORD *)(v7 + 8);
          else
            v5 = 0;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v5, 13, 4, (uint64_t)&v9);
        result = v9;
        v9 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

__n128 WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ResourceLoadStatisticsStore::DomainData>(unsigned int *a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 40 * a1[3]);
  v4->n128_u32[0] = v3->n128_u32[0];
  v5 = v3->n128_u64[1];
  v3->n128_u64[1] = 0;
  v4->n128_u64[1] = v5;
  v6 = v3[2].n128_u64[0];
  result = v3[1];
  v4[1] = result;
  v4[2].n128_u64[0] = v6;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  __int128 v11;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 40 * v4);
        v9 = v3;
        do
        {
          *v7 = *(_DWORD *)v9;
          v10 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v10;
          v11 = *((_OWORD *)v9 + 1);
          *((_QWORD *)v7 + 4) = *((_QWORD *)v9 + 4);
          *((_OWORD *)v7 + 1) = v11;
          result = (unsigned int *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 40);
          v7 += 10;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_DWORD *WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *a2;
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *result;
  char *v10;
  uint64_t v11;
  __int16 v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  int8x16_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  int8x16x2_t v26;
  int8x16x2_t v27;
  int8x16x2_t v28;

  v7 = *a3;
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0 || v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v10 = *(char **)a2;
      v11 = *a3;
      v12 = *a4;
      v13 = &result[2 * *(_QWORD *)(a2 + 8)];
      v14 = *(_QWORD *)(a2 + 8) & 0xFFFFFFC0;
      if (v14)
      {
        v15 = &result[2 * v14];
        v16 = 0uLL;
        do
        {
          v26.val[0] = *(int8x16_t *)v10;
          v17 = *((int8x16_t *)v10 + 1);
          v27.val[0] = (int8x16_t)*((_OWORD *)v10 + 2);
          v18 = *((_OWORD *)v10 + 3);
          v10 += 64;
          v19 = v18;
          v27.val[1] = 0uLL;
          v28.val[0] = v17;
          v26.val[1] = 0uLL;
          v20 = result;
          vst2q_s8(v20, v26);
          v20 += 32;
          v28.val[1] = 0uLL;
          vst2q_s8(v20, v28);
          v21 = result + 64;
          vst2q_s8(v21, v27);
          v22 = result + 96;
          vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
          result += 128;
        }
        while (result != v15);
        result = v15;
      }
      while (result != v13)
      {
        v23 = *v10++;
        *(_WORD *)result = v23;
        result += 2;
      }
      v25 = v11;
      result = (char *)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v25, v13);
      v24 = v25;
      if (v25)
        v24 = *(unsigned int *)(v25 + 4);
      *(_WORD *)&v13[2 * v24] = v12;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEAB398]();
    if (result)
      return (char *)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, *(char **)a2, *(_QWORD *)(a2 + 8), *a3, *a4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setNotifyPagesWhenDataRecordsWereScanned(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1498;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setNotifyPagesWhenDataRecordsWereScanned(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1498;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setNotifyPagesWhenDataRecordsWereScanned(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::RunLoop *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v1)
    *(_BYTE *)(v1 + 224) = *(_BYTE *)(a1 + 16);
  v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C14C0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C14C0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::RunLoop *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v1)
    *(_BYTE *)(v1 + 226) = *(_BYTE *)(a1 + 16);
  v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C14E8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C14E8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::RunLoop *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v1)
    *(_BYTE *)(v1 + 225) = *(_BYTE *)(a1 + 16);
  v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebResourceLoadStatisticsStore::*&)(void),WebKit::WebResourceLoadStatisticsStore*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(WebKit::NetworkSession &,WTF::String const&,WebKit::ShouldIncludeLocalhost,WebCore::ResourceLoadStatistics::IsEphemeral)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34C1538;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(WebKit::NetworkSession &,WTF::String const&,WebKit::ShouldIncludeLocalhost,WebCore::ResourceLoadStatistics::IsEphemeral)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34C1538;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(WebKit::NetworkSession &,WTF::String const&,WebKit::ShouldIncludeLocalhost,WebCore::ResourceLoadStatistics::IsEphemeral)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebKit::ResourceLoadStatisticsStore *v3;
  WebKit::ResourceLoadStatisticsStore **v4;
  const WTF::String *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (WebKit::ResourceLoadStatisticsStore *)WTF::fastMalloc((WTF *)0x2C8);
  WebKit::ResourceLoadStatisticsStore::ResourceLoadStatisticsStore((uint64_t)v3, v2, *(WTF::WorkQueue **)(v2 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
  v4 = (WebKit::ResourceLoadStatisticsStore **)(v2 + 24);
  std::unique_ptr<WebKit::ResourceLoadStatisticsStore>::reset[abi:sn180100](v4, v3);
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v9, v5))
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v9, v6);
  WebKit::ResourceLoadStatisticsStore::didCreateNetworkProcess((unsigned __int8 ***)*v4);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1560;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1560;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C1588;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34C1588;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C15B0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C15B0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::destroyResourceLoadStatisticsStore(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::RunLoop *v2;
  uint64_t result;
  uint64_t v4;

  std::unique_ptr<WebKit::ResourceLoadStatisticsStore>::reset[abi:sn180100]((WebKit::ResourceLoadStatisticsStore **)(*(_QWORD *)(a1 + 8) + 24), 0);
  v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C15D8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C15D8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 711))
    {
      v6 = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      v3 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v3 = &off_1E34C1600;
      *(_OWORD *)(v3 + 8) = v6;
      v8 = v3;
      WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(v2, &v8);
      result = v8;
      if (v8)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      *(_BYTE *)(*(_QWORD *)(v1 + 24) + 711) = 0;
      return result;
    }
    v7 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v5 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v5 = &off_1E34C1628;
    *(_QWORD *)(v5 + 8) = v1;
    *(_OWORD *)(v5 + 16) = v7;
    v8 = v5;
  }
  else
  {
    v5 = WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v8, (uint64_t *)(a1 + 24));
  }
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C1600;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C1600;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF::RunLoop *v1;
  uint64_t result;
  uint64_t v3;

  v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 16));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C1628;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C1628;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v7;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebResourceLoadStatisticsStore::logTestingEvent(*(IPC::Encoder **)(v2 + 8), (const WTF::String *)&v7);
  v4 = v7;
  v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1650;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1650;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  _QWORD *v9;
  WTF::RunLoop *v10;
  uint64_t result;
  _QWORD *v12;
  uint8_t buf[8];

  v2 = *(_BYTE **)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 16);
    if (v2[709] != v3)
    {
      v2[709] = v3;
      v2[708] = v3;
      v4 = qword_1ECE71140;
      v5 = os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO);
      if (v3)
      {
        if (v5)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Turned ITP Debug Mode on.", buf, 2u);
        }
      }
      else if (v5)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Turned ITP Debug Mode off.", buf, 2u);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage((uint64_t)v2, 13, 4, (uint64_t)buf);
      v7 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      WebKit::ResourceLoadStatisticsStore::ensurePrevalentResourcesForDebugMode((uint64_t *)buf, v2);
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v8);
      if (v3)
      {
        v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v9 = off_1E34C0E80;
        v12 = v9;
        WebKit::ResourceLoadStatisticsStore::updateCookieBlocking((uint64_t)v2, (uint64_t *)&v12);
        if (v12)
          (*(void (**)(_QWORD *))(*v12 + 8))(v12);
      }
    }
  }
  v10 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v10);
  WTF::RunLoop::dispatch();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1678;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1678;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  WTF::RunLoop *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1[1] + 24);
  if (v2)
    WTF::String::operator=((WTF::StringImpl **)(v2 + 240), (WTF::StringImpl *)(a1 + 2));
  v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, a1 + 3);
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C16A0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C16A0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::ResourceLoadStatisticsStore *v2;
  WTF::RunLoop *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(WebKit::ResourceLoadStatisticsStore **)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
    WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(v2);
  v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, (uint64_t *)(a1 + 16));
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C16C8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C16C8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::ResourceLoadStatisticsStore *v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  unsigned __int8 v12;

  v2 = *(WebKit::ResourceLoadStatisticsStore **)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    WebKit::ResourceLoadStatisticsStore::checkForMissingTablesInSchema((WebKit::ResourceLoadStatisticsStore *)v11, v2);
    v3 = v12;
    v4 = v12 ^ 1;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v6 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v6 = &off_1E34C16F0;
    *(_BYTE *)(v6 + 8) = v4;
    *(_QWORD *)(v6 + 16) = v5;
    v10 = v6;
    WTF::RunLoop::main((WTF::RunLoop *)v6);
    WTF::RunLoop::dispatch();
    result = v10;
    if (v10)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v3)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v7);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C16F0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C16F0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *a1 = off_1E34C1718;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned __int8 **v5;

  *(_QWORD *)a1 = off_1E34C1718;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = (unsigned __int8 **)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v5);
  return WTF::fastFree(a1, v4);
}

WebKit::ResourceLoadStatisticsStore *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  WebKit::DatabaseUtilities *v3;
  WTF::RunLoop *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  WebKit::ResourceLoadStatisticsStore *v8;
  WebKit::ResourceLoadStatisticsStore *result;
  WTF::RunLoop *v10;
  WebKit::ResourceLoadStatisticsStore *v11;

  v2 = a1[1];
  v3 = *(WebKit::DatabaseUtilities **)(v2 + 24);
  if (v3)
  {
    WebKit::ResourceLoadStatisticsStore::mergeStatistics(v3, (uint64_t)(a1 + 3));
    v4 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v11, a1 + 5);
    WTF::RunLoop::main(v4);
    WTF::RunLoop::dispatch();
    v5 = (uint64_t)v11;
    v11 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(_QWORD *)(v2 + 24);
    if (*(_BYTE *)(v6 + 272))
      *(_BYTE *)(v6 + 272) = 0;
    v7 = (unsigned __int8 **)a1[2];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v7);
    v8 = (WebKit::ResourceLoadStatisticsStore *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v8 = &off_1E34C1740;
    *((_QWORD *)v8 + 1) = v2;
    *((_QWORD *)v8 + 2) = v7;
    v11 = v8;
    WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(v6, (uint64_t *)&v11);
    if (v11)
      (*(void (**)(WebKit::ResourceLoadStatisticsStore *))(*(_QWORD *)v11 + 8))(v11);
    return WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(*(WebKit::ResourceLoadStatisticsStore **)(v2 + 24));
  }
  else
  {
    v10 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v11, a1 + 5);
    WTF::RunLoop::main(v10);
    WTF::RunLoop::dispatch();
    result = v11;
    v11 = 0;
    if (result)
      return (WebKit::ResourceLoadStatisticsStore *)(*(uint64_t (**)(WebKit::ResourceLoadStatisticsStore *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;

  *a1 = &off_1E34C1740;
  v2 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;

  *(_QWORD *)this = &off_1E34C1740;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  unsigned __int8 **v1;
  uint64_t v2;
  WTF::RunLoop *v3;
  uint64_t result;
  WTF::RunLoop *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(unsigned __int8 ***)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1);
  v3 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v3 = &off_1E34C1768;
  *((_QWORD *)v3 + 1) = v2;
  *((_QWORD *)v3 + 2) = v1;
  v5 = v3;
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;

  *a1 = &off_1E34C1768;
  v2 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;

  *(_QWORD *)this = &off_1E34C1768;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebResourceLoadStatisticsStore::logTestingEvent(*(IPC::Encoder **)(v1 + 8), (const WTF::String *)&v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34C1790;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C1790;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::RunLoop *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  unsigned __int8 **v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  WTF::StringImpl *v35;
  _QWORD *v36;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    v3 = a1 + 16;
    v28 = *(_OWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 56);
    v29 = *(_QWORD *)(a1 + 48);
    v5 = *(unsigned __int8 *)(a1 + 64);
    v6 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = &off_1E34C17E0;
    *((_QWORD *)v7 + 1) = v6;
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v2, (const WebCore::RegistrableDomain *)(a1 + 16), (uint64_t)"hasStorageAccess");
    if (!v8)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v7 + 8))(v7);
    v9 = WebKit::ResourceLoadStatisticsStore::cookieAccess(v2, v3, (const WebCore::RegistrableDomain *)(a1 + 24), v5 != 0);
    if ((_DWORD)v9 == 1)
    {
      WTF::RunLoop::main(v9);
      v13 = *(unsigned __int8 ***)(v2 + 104);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v13);
      WebCore::RegistrableDomain::isolatedCopy(&v31);
      v32 = v7;
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v14 = &off_1E34C1100;
      v14[1] = v13;
      v15 = v31;
      v31 = 0;
      v14[2] = v15;
      v16 = v32;
      v32 = 0;
      v14[3] = v16;
      v36 = v14;
      WTF::RunLoop::dispatch();
      v18 = v36;
      v36 = 0;
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
      v19 = v32;
      v32 = 0;
      if (v19)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
    }
    else
    {
      if (!(_DWORD)v9)
      {
        (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v7 + 8))(v7);
      }
      WTF::RunLoop::main(v9);
      v20 = *(unsigned __int8 ***)(v2 + 104);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v20);
      WebCore::RegistrableDomain::isolatedCopy(&v31);
      WebCore::RegistrableDomain::isolatedCopy(&v32);
      v33 = v28;
      LOBYTE(v34) = v29;
      *((_QWORD *)&v34 + 1) = v4;
      v35 = v7;
      v21 = WTF::fastMalloc((WTF *)0x48);
      *(_QWORD *)v21 = &off_1E34C1178;
      *(_QWORD *)(v21 + 8) = v20;
      v22 = v31;
      v31 = 0;
      *(_QWORD *)(v21 + 16) = v22;
      *(_QWORD *)(v21 + 24) = v32;
      v23 = v34;
      *(_OWORD *)(v21 + 32) = v33;
      *(_OWORD *)(v21 + 48) = v23;
      v24 = v35;
      v32 = 0;
      v35 = 0;
      *(_QWORD *)(v21 + 64) = v24;
      v36 = (_QWORD *)v21;
      WTF::RunLoop::dispatch();
      v25 = v36;
      v36 = 0;
      if (v25)
        (*(void (**)(_QWORD *))(*v25 + 8))(v25);
      v26 = v35;
      v35 = 0;
      if (v26)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 8))(v26);
      v27 = v32;
      v32 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v17);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    v12 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = &off_1E34C17B8;
    *((_QWORD *)v12 + 1) = v11;
    v30 = v12;
    WTF::RunLoop::main(v12);
    WTF::RunLoop::dispatch();
    result = v30;
    if (v30)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C17B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C17B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C17E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C17E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C1808;
  *(_QWORD *)(v4 + 8) = v3;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::RunLoop::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1808;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1808;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1830;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1830;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34C1858;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::~$_1(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C1858;
  WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF<WebKit::WebPageProxyIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::~$_1((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::DatabaseUtilities *v17;
  WTF **v18;
  char v19;
  const WebCore::RegistrableDomain *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  WebCore::SQLiteDatabase *v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  _QWORD *v31;
  void (*v32)(void);
  NSObject *v34;
  uint64_t v35;
  int Error;
  uint64_t ErrorMsg;
  NSObject *v38;
  uint64_t v39;
  void *v40;
  WTF *v41;
  NSObject *v42;
  uint64_t v43;
  void *v44;
  WTF *v45;
  NSObject *v46;
  uint64_t v47;
  char *v48;
  void *v49;
  WTF *v50;
  NSObject *v51;
  uint64_t v52;
  char *v53;
  void *v54;
  WTF *v55;
  WTF *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  const WebCore::RegistrableDomain *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101[2];
  unsigned int v102;
  WTF *v103;
  char v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  _BYTE buf[22];
  __int16 v108;
  int v109;
  __int16 v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24))
  {
    v84 = *(_OWORD *)(a1 + 80);
    v87 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v89 = *(_OWORD *)(a1 + 96);
    v91 = *(_OWORD *)(a1 + 112);
    v93 = *(_BYTE *)(a1 + 128);
    LOBYTE(v94) = 0;
    v98 = 0;
    v12 = *(unsigned __int8 *)(a1 + 168);
    if (*(_BYTE *)(a1 + 168))
    {
      v13 = *(_QWORD *)(a1 + 136);
      v2 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
      v94 = v13;
      v95 = v2;
      v5 = *(_QWORD *)(a1 + 152);
      v96 = v5;
      v3 = *(_DWORD *)(a1 + 160);
      v4 = *(_DWORD *)(a1 + 164);
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      v97 = __PAIR64__(v4, v3);
      v98 = 1;
    }
    v22 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0;
    v99 = v22;
    v23 = WTF::fastMalloc((WTF *)0x80);
    *(_QWORD *)v23 = off_1E34C1880;
    *(_OWORD *)(v23 + 8) = v87;
    *(_OWORD *)(v23 + 24) = v84;
    *(_OWORD *)(v23 + 40) = v89;
    *(_BYTE *)(v23 + 72) = v93;
    *(_OWORD *)(v23 + 56) = v91;
    *(_BYTE *)(v23 + 80) = 0;
    *(_BYTE *)(v23 + 112) = 0;
    if (v12)
    {
      *(_QWORD *)(v23 + 80) = v94;
      *(_QWORD *)(v23 + 88) = v2;
      v94 = 0;
      v95 = 0;
      *(_QWORD *)(v23 + 96) = v5;
      v96 = 0;
      v97 = 0;
      *(_DWORD *)(v23 + 104) = v3;
      *(_DWORD *)(v23 + 108) = v4;
      *(_BYTE *)(v23 + 112) = 1;
    }
    *(_QWORD *)(v23 + 120) = v22;
    *(_QWORD *)buf = v23;
    WTF::RunLoop::main((WTF::RunLoop *)v23);
    WTF::RunLoop::dispatch();
    v25 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v99 = 0;
    goto LABEL_47;
  }
  v86 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v80 = *(_OWORD *)(a1 + 32);
  v81 = *(_QWORD *)(a1 + 48);
  v79 = *(unsigned __int8 *)(a1 + 56);
  v9 = *(unsigned __int8 *)(a1 + 57);
  v82 = *(_OWORD *)(a1 + 80);
  v83 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v88 = *(_OWORD *)(a1 + 96);
  v90 = *(_OWORD *)(a1 + 112);
  v92 = *(_BYTE *)(a1 + 128);
  LOBYTE(v94) = 0;
  v98 = 0;
  v10 = *(unsigned __int8 *)(a1 + 168);
  if (*(_BYTE *)(a1 + 168))
  {
    v11 = *(_QWORD *)(a1 + 136);
    v6 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v94 = v11;
    v95 = v6;
    v1 = *(_QWORD *)(a1 + 152);
    v96 = v1;
    LODWORD(v2) = *(_DWORD *)(a1 + 160);
    v7 = *(_DWORD *)(a1 + 164);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v97 = __PAIR64__(v7, v2);
    v98 = 1;
  }
  v85 = (const WebCore::RegistrableDomain *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  v99 = v14;
  v15 = WTF::fastMalloc((WTF *)0x80);
  v16 = v15;
  *(_QWORD *)v15 = off_1E34C18D0;
  *(_OWORD *)(v15 + 8) = v83;
  *(_OWORD *)(v15 + 24) = v82;
  *(_OWORD *)(v15 + 40) = v88;
  *(_BYTE *)(v15 + 72) = v92;
  *(_OWORD *)(v15 + 56) = v90;
  *(_BYTE *)(v15 + 80) = 0;
  *(_BYTE *)(v15 + 112) = 0;
  if (v10)
  {
    *(_QWORD *)(v15 + 80) = v94;
    *(_QWORD *)(v15 + 88) = v6;
    v94 = 0;
    v95 = 0;
    *(_QWORD *)(v15 + 96) = v1;
    v96 = 0;
    v97 = 0;
    *(_DWORD *)(v15 + 104) = v2;
    *(_DWORD *)(v15 + 108) = v7;
    *(_BYTE *)(v15 + 112) = 1;
  }
  *(_QWORD *)(v15 + 120) = v14;
  v17 = (WebKit::DatabaseUtilities *)v86;
  v18 = (WTF **)v85;
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v86, v85, (uint64_t)"requestStorageAccess");
  if (!v19)
    goto LABEL_12;
  v20 = (const WebCore::RegistrableDomain *)(a1 + 24);
  v21 = WebKit::ResourceLoadStatisticsStore::cookieAccess(v86, (uint64_t)v85, v20, v9 != 0);
  if (v21 == 1)
  {
    if (*(_BYTE *)(v86 + 708))
    {
      v42 = qword_1ECE71140;
      if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
      {
        WTF::String::utf8();
        if (v101[0])
          v43 = v101[0] + 16;
        else
          v43 = 0;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v43;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: No need to grant storage access to %{private}s since its cookies are not blocked in third-party contexts. Note that the underlying cookie policy may still block this third-party from setting cookies.", buf, 0xCu);
        v45 = (WTF *)v101[0];
        v101[0] = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 1)
            WTF::fastFree(v45, v44);
          else
            --*(_DWORD *)v45;
        }
        v18 = (WTF **)v85;
      }
      v60 = *v18;
      if (*v18)
        *(_DWORD *)v60 += 2;
      v101[0] = (uint64_t)v60;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] No need to grant storage access to '", 43, v101, (uint64_t)"' since its cookies are not blocked in third-party contexts. Note that the underlying cookie policy may still block this third-party from setting cookies.", 155, buf);
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v86, 13, 4, (uint64_t)buf);
      v62 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, v61);
        else
          *(_DWORD *)v62 -= 2;
      }
      v63 = (WTF::StringImpl *)v101[0];
      v101[0] = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v61);
        else
          *(_DWORD *)v63 -= 2;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 2);
    goto LABEL_45;
  }
  if (!v21)
  {
    if (*(_BYTE *)(v86 + 708))
    {
      v38 = qword_1ECE71140;
      if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
      {
        WTF::String::utf8();
        if (v101[0])
          v39 = v101[0] + 16;
        else
          v39 = 0;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v39;
        _os_log_impl(&dword_196BCC000, v38, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Cannot grant storage access to %{private}s since its cookies are blocked in third-party contexts and it has not received user interaction as first-party.", buf, 0xCu);
        v41 = (WTF *)v101[0];
        v101[0] = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 1)
            WTF::fastFree(v41, v40);
          else
            --*(_DWORD *)v41;
        }
        v18 = (WTF **)v85;
      }
      v56 = *v18;
      if (*v18)
        *(_DWORD *)v56 += 2;
      v101[0] = (uint64_t)v56;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] Cannot grant storage access to '", 39, v101, (uint64_t)"' since its cookies are blocked in third-party contexts and it has not received user interaction as first-party.", 113, buf);
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v86, 13, 2, (uint64_t)buf);
      v58 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v57);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = (WTF::StringImpl *)v101[0];
      v101[0] = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v57);
        else
          *(_DWORD *)v59 -= 2;
      }
    }
LABEL_12:
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    goto LABEL_45;
  }
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v86, v20, (uint64_t)"hasUserGrantedStorageAccessThroughPrompt");
  if (!v26)
  {
    v30 = *(unsigned __int8 *)(v86 + 708);
    goto LABEL_43;
  }
  v27 = (WebCore::SQLiteDatabase *)(v86 + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  v28 = *(_DWORD *)&buf[16];
  if (*(_DWORD *)&buf[16])
  {
    v29 = 0;
  }
  else
  {
    if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)buf))
      goto LABEL_31;
    if (*(_DWORD *)&buf[16])
      goto LABEL_159;
    if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)buf))
      goto LABEL_31;
    if (*(_DWORD *)&buf[16])
      goto LABEL_159;
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)buf) != 100)
    {
LABEL_31:
      v29 = 0;
    }
    else
    {
      if (*(_DWORD *)&buf[16])
        goto LABEL_159;
      v29 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)buf) != 0;
    }
    v28 = *(_DWORD *)&buf[16];
  }
  if (v28 != -1)
    (*(&off_1E34C0CF8 + v28))((int)v101, (WebCore::SQLiteStatement *)buf);
  v30 = *(unsigned __int8 *)(v86 + 708);
  if (!v29)
  {
LABEL_43:
    if (v30)
    {
      v46 = qword_1ECE71140;
      if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
      {
        WTF::String::utf8();
        if (v101[0])
          v47 = v101[0] + 16;
        else
          v47 = 0;
        WTF::String::utf8();
        if (v103)
          v48 = (char *)v103 + 16;
        else
          v48 = 0;
        *(_DWORD *)buf = 136380931;
        *(_QWORD *)&buf[4] = v47;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v48;
        _os_log_impl(&dword_196BCC000, v46, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: About to ask the user whether they want to grant storage access to %{private}s under %{private}s or not.", buf, 0x16u);
        v50 = v103;
        v103 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 1)
            WTF::fastFree(v50, v49);
          else
            --*(_DWORD *)v50;
        }
        v64 = (WTF *)v101[0];
        v101[0] = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 1)
            WTF::fastFree(v64, v49);
          else
            --*(_DWORD *)v64;
        }
      }
      v65 = *(WTF::StringImpl **)v85;
      if (*(_QWORD *)v85)
        *(_DWORD *)v65 += 2;
      v101[0] = (uint64_t)v65;
      v66 = *(WTF **)v20;
      if (*(_QWORD *)v20)
        *(_DWORD *)v66 += 2;
      v103 = v66;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] About to ask the user whether they want to grant storage access to '", 75, v101, (uint64_t)"' under '", 10, (uint64_t *)&v103, (uint64_t)"' or not.", 10, buf);
      WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v86, 13, 4, (uint64_t)buf);
      v68 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
          WTF::StringImpl::destroy(v68, v67);
        else
          *(_DWORD *)v68 -= 2;
      }
      v69 = v103;
      v103 = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v67);
        else
          *(_DWORD *)v69 -= 2;
      }
      v70 = (WTF::StringImpl *)v101[0];
      v101[0] = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v67);
        else
          *(_DWORD *)v70 -= 2;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 1);
    goto LABEL_45;
  }
  if (*(_BYTE *)(v86 + 708))
  {
    v51 = qword_1ECE71140;
    if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
    {
      WTF::String::utf8();
      if (v101[0])
        v52 = v101[0] + 16;
      else
        v52 = 0;
      WTF::String::utf8();
      if (v103)
        v53 = (char *)v103 + 16;
      else
        v53 = 0;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v52;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v53;
      _os_log_impl(&dword_196BCC000, v51, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Storage access was granted to %{private}s under %{private}s.", buf, 0x16u);
      v55 = v103;
      v103 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 1)
          WTF::fastFree(v55, v54);
        else
          --*(_DWORD *)v55;
      }
      v71 = (WTF *)v101[0];
      v101[0] = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 1)
          WTF::fastFree(v71, v54);
        else
          --*(_DWORD *)v71;
      }
    }
    v72 = *(WTF::StringImpl **)v85;
    if (*(_QWORD *)v85)
      *(_DWORD *)v72 += 2;
    v106 = v72;
    v73 = *(WTF::StringImpl **)v20;
    if (*(_QWORD *)v20)
      *(_DWORD *)v73 += 2;
    v105 = v73;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] Storage access was granted to '", 38, (uint64_t *)&v106, (uint64_t)"' under '", 10, (uint64_t *)&v105, (uint64_t)"'.", 3, buf);
    WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v86, 13, 4, (uint64_t)buf);
    v75 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v74);
      else
        *(_DWORD *)v75 -= 2;
    }
    v76 = v105;
    v105 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v74);
      else
        *(_DWORD *)v76 -= 2;
    }
    v77 = v106;
    v106 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v74);
      else
        *(_DWORD *)v77 -= 2;
    }
    v17 = (WebKit::DatabaseUtilities *)v86;
    v18 = (WTF **)v85;
  }
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v17, (uint64_t)&v103);
  WebCore::SQLiteDatabase::prepareStatement();
  if (v102 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v101))
    goto LABEL_48;
  if (!v102)
  {
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v101) == 101)
    {
      *(_OWORD *)buf = v80;
      buf[16] = 1;
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v31 = &off_1E34C11F0;
      v31[1] = v16;
      v100 = v31;
      WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal((uint64_t)v17, v18, (const WTF::StringImpl **)v20, (__int128 *)buf, v81, 1, v79 != 0, (uint64_t *)&v100);
      if (!v100)
        goto LABEL_52;
      v32 = *(void (**)(void))(*v100 + 8);
LABEL_51:
      v32();
LABEL_52:
      if (v102 != -1)
        (*(&off_1E34C0CF8 + v102))((int)&v100, (WebCore::SQLiteStatement *)v101);
      v16 = (uint64_t)v103;
      if (v104)
      {
        (*(void (**)(WTF *))(*(_QWORD *)v103 + 16))(v103);
      }
      else if (!v103)
      {
        goto LABEL_46;
      }
LABEL_45:
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
LABEL_46:
      v99 = 0;
LABEL_47:
      std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94, v24);
      return 0;
    }
LABEL_48:
    v34 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v35 = *((_QWORD *)v17 + 81);
      Error = WebCore::SQLiteDatabase::lastError(v27);
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v27);
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v35;
      v108 = 1024;
      v109 = Error;
      v110 = 2081;
      v111 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v34, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::requestStorageAccess: failed to step statement", buf, 0x26u);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    v32 = *(void (**)(void))(*(_QWORD *)v16 + 8);
    goto LABEL_51;
  }
LABEL_159:
  v78 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v78);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;

  *a1 = off_1E34C1880;
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), a2);
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;

  *(_QWORD *)a1 = off_1E34C1880;
  v3 = *((_QWORD *)a1 + 15);
  *((_QWORD *)a1 + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned __int8 **)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v7);
  return WTF::fastFree(a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  __int16 v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v2 = (uint64_t *)(a1 + 120);
  v8 = 0;
  v9 = *(_BYTE *)(a1 + 72);
  v3 = *(WTF::StringImpl **)(a1 + 32);
  if (v3)
    *(_DWORD *)v3 += 2;
  v10 = v3;
  v4 = *(WTF::StringImpl **)(a1 + 24);
  if (v4)
    *(_DWORD *)v4 += 2;
  v11 = v4;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v2, (uint64_t)&v8);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(WebKit::StorageAccessStatus)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 **v6;

  *a1 = &off_1E34C18A8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(WebKit::StorageAccessStatus)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 **v6;

  *(_QWORD *)this = &off_1E34C18A8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(WebKit::StorageAccessStatus)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, int a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  WTF::ThreadSafeWeakPtrControlBlock *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t result;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  WTF::StringImpl *v29[2];
  _BYTE v30[26];
  uint64_t v31;
  _QWORD *v32;

  if (a2)
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_BYTE *)(a1 + 64);
    v27 = v3;
    v8 = *(WTF::ThreadSafeWeakPtrControlBlock **)v3;
    if (*(_QWORD *)v3)
      v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
    v28[0] = v8;
    v28[1] = v3;
    WebCore::RegistrableDomain::isolatedCopy(v29);
    WebCore::RegistrableDomain::isolatedCopy(&v29[1]);
    *(_QWORD *)v30 = v4;
    *(_QWORD *)&v30[8] = v5;
    *(_QWORD *)&v30[16] = v6;
    v30[24] = 1;
    v30[25] = v7;
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    v31 = v9;
    v10 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)v10 = &off_1E34C1970;
    *(_QWORD *)(v10 + 8) = v27;
    *(WTF::StringImpl **)(v10 + 16) = v28[0];
    *(WTF::StringImpl **)(v10 + 24) = v28[1];
    *(WTF::StringImpl **)(v10 + 32) = v29[0];
    v11 = v29[1];
    *(_OWORD *)v28 = 0u;
    *(_OWORD *)v29 = 0u;
    *(_QWORD *)(v10 + 40) = v11;
    v12 = *(_OWORD *)&v30[10];
    *(_OWORD *)(v10 + 48) = *(_OWORD *)v30;
    *(_OWORD *)(v10 + 58) = v12;
    v13 = v31;
    v31 = 0;
    *(_QWORD *)(v10 + 80) = v13;
    if (*((_BYTE *)v3 + 64))
    {
      result = 200;
      __break(0xC471u);
    }
    else
    {
      v14 = v10;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)v3);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v15 = &off_1E34C0D18;
      v15[1] = v3;
      v15[2] = v14;
      v32 = v15;
      WTF::SuspendableWorkQueue::dispatch();
      v17 = v32;
      v32 = 0;
      if (v17)
        (*(void (**)(_QWORD *))(*v17 + 8))(v17);
      v18 = v31;
      v31 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = v29[1];
      v29[1] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
      v26 = v29[0];
      v29[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v16);
        else
          *(_DWORD *)v26 -= 2;
      }
      result = (uint64_t)v28[0];
      v28[0] = 0;
      if (result)
        return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, v16);
    }
  }
  else
  {
    v20 = (uint64_t *)(a1 + 72);
    LOWORD(v27) = 256;
    BYTE2(v27) = *(_BYTE *)(a1 + 64);
    v21 = *(WTF::StringImpl **)(a1 + 32);
    if (v21)
      *(_DWORD *)v21 += 2;
    v28[0] = v21;
    v22 = *(WTF::StringImpl **)(a1 + 24);
    if (v22)
      *(_DWORD *)v22 += 2;
    v28[1] = v22;
    WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v20, (uint64_t)&v27);
    v24 = v28[1];
    v28[1] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    result = (uint64_t)v28[0];
    v28[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;

  *a1 = off_1E34C18D0;
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), a2);
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;

  *(_QWORD *)a1 = off_1E34C18D0;
  v3 = *((_QWORD *)a1 + 15);
  *((_QWORD *)a1 + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned __int8 **)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v7);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::call(uint64_t a1, char a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v7 = *(_OWORD *)(a1 + 8);
  v8 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v18 = *(_OWORD *)(a1 + 40);
  v19 = *(_OWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 72);
  LOBYTE(v21) = 0;
  v25 = 0;
  v9 = *(unsigned __int8 *)(a1 + 112);
  v16 = v8;
  v17 = v7;
  if (*(_BYTE *)(a1 + 112))
  {
    v10 = *(_QWORD *)(a1 + 80);
    v2 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v21 = v10;
    v22 = v2;
    v5 = *(_QWORD *)(a1 + 96);
    v23 = v5;
    v3 = *(_DWORD *)(a1 + 104);
    v4 = *(_DWORD *)(a1 + 108);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    v24 = __PAIR64__(v4, v3);
    v25 = 1;
  }
  v11 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  v26 = v11;
  v27 = a2;
  v12 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v12 = off_1E34C18F8;
  *(_OWORD *)(v12 + 8) = v17;
  *(_OWORD *)(v12 + 24) = v16;
  *(_OWORD *)(v12 + 40) = v18;
  *(_BYTE *)(v12 + 72) = v20;
  *(_OWORD *)(v12 + 56) = v19;
  *(_BYTE *)(v12 + 80) = 0;
  *(_BYTE *)(v12 + 112) = 0;
  if (v9)
  {
    *(_QWORD *)(v12 + 80) = v21;
    *(_QWORD *)(v12 + 88) = v2;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)(v12 + 96) = v5;
    v23 = 0;
    v24 = 0;
    *(_DWORD *)(v12 + 104) = v3;
    *(_DWORD *)(v12 + 108) = v4;
    *(_BYTE *)(v12 + 112) = 1;
  }
  *(_QWORD *)(v12 + 120) = v11;
  *(_BYTE *)(v12 + 128) = a2;
  v28 = v12;
  WTF::RunLoop::main((WTF::RunLoop *)v12);
  WTF::RunLoop::dispatch();
  v14 = v28;
  v28 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v26 = 0;
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v13);
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;

  *a1 = off_1E34C18F8;
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), a2);
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;

  *(_QWORD *)a1 = off_1E34C18F8;
  v3 = *((_QWORD *)a1 + 15);
  *((_QWORD *)a1 + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned __int8 **)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v7);
  return WTF::fastFree(a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_1::operator()(void)::{lambda(WebKit::StorageAccessStatus)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::call(WTF::StringImpl *result)
{
  WTF::StringImpl *v1;
  int v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 **v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[2];
  WTF::StringImpl *v21;
  char *v22;
  char *v23;
  WTF::StringImpl *v24;

  v1 = result;
  v2 = *((unsigned __int8 *)result + 128);
  v3 = *((_QWORD *)result + 1);
  if (v2 == 2)
  {
    LOWORD(v20[0]) = WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame(*((_QWORD *)result + 1), *((WTF::StringImpl **)result + 5), *((_QWORD *)result + 6), *((WTF::StringImpl **)result + 3));
    BYTE2(v20[0]) = *((_BYTE *)v1 + 72);
    v4 = (WTF::StringImpl *)*((_QWORD *)v1 + 4);
    if (v4)
      *(_DWORD *)v4 += 2;
    v20[1] = v4;
    v5 = (WTF::StringImpl *)*((_QWORD *)v1 + 3);
    if (v5)
      *(_DWORD *)v5 += 2;
    v21 = v5;
    v6 = (uint64_t *)((char *)v1 + 120);
    goto LABEL_23;
  }
  if (v2 != 1)
  {
    if (*((_BYTE *)result + 128))
      return result;
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(v3 + 8);
  if (!v7 || !*(_QWORD *)(v7 + 8))
  {
LABEL_18:
    v6 = (uint64_t *)((char *)result + 120);
    LOWORD(v20[0]) = 0;
    BYTE2(v20[0]) = *((_BYTE *)v1 + 72);
    v16 = (WTF::StringImpl *)*((_QWORD *)v1 + 4);
    if (v16)
      *(_DWORD *)v16 += 2;
    v20[1] = v16;
    v17 = (WTF::StringImpl *)*((_QWORD *)v1 + 3);
    if (v17)
      *(_DWORD *)v17 += 2;
    v21 = v17;
LABEL_23:
    WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v6, (uint64_t)v20);
    v19 = v21;
    v21 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    result = v20[1];
    v20[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v8 = (unsigned __int8 **)*((_QWORD *)result + 2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v8);
  v9 = (_DWORD *)*((_QWORD *)v1 + 3);
  if (v9)
    *v9 += 2;
  v10 = (_DWORD *)*((_QWORD *)v1 + 4);
  if (v10)
    *v10 += 2;
  *(_OWORD *)v20 = *(_OWORD *)((char *)v1 + 40);
  v11 = *((_QWORD *)v1 + 7);
  v12 = *((_BYTE *)v1 + 72);
  v13 = *((_QWORD *)v1 + 15);
  *((_QWORD *)v1 + 15) = 0;
  v14 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v14 = &off_1E34C18A8;
  *(_QWORD *)(v14 + 8) = v3;
  *(_QWORD *)(v14 + 16) = v8;
  *(_QWORD *)(v14 + 24) = v9;
  *(_QWORD *)(v14 + 32) = v10;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)v20;
  *(_QWORD *)(v14 + 56) = v11;
  *(_BYTE *)(v14 + 64) = v12;
  *(_QWORD *)(v14 + 72) = v13;
  v24 = (WTF::StringImpl *)v14;
  v15 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 32) + 32);
  v20[0] = (WTF::StringImpl *)((char *)v1 + 64);
  v20[1] = (WTF::StringImpl *)((char *)v1 + 40);
  v21 = (WTF::StringImpl *)((char *)v1 + 24);
  v22 = (char *)v1 + 32;
  v23 = (char *)v1 + 80;
  IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestStorageAccessConfirm,WTF::CompletionHandler<void ()(BOOL)>>(v15, (uint64_t)v20, (uint64_t *)&v24);
  result = v24;
  if (v24)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessEphemeral(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 **v6;

  *a1 = &off_1E34C1920;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessEphemeral(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 **v6;

  *(_QWORD *)this = &off_1E34C1920;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v6);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessEphemeral(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::StorageAccessScope,WebKit::CanRequestStorageAccessWithoutUserInteraction,std::optional<WebCore::OrganizationStorageAccessPromptQuirk> &&,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  _BYTE v23[8];
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = (WTF::StringImpl **)(a1 + 24);
    v4 = (WTF::StringImpl **)(a1 + 32);
    v5 = *(_BYTE *)(a1 + 64);
    v6 = (uint64_t *)(a1 + 72);
    v7 = *(_QWORD *)(v2 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(WTF::StringImpl **)(a1 + 40);
        v10 = *(WTF::StringImpl **)(a1 + 48);
        v11 = *(_QWORD *)(v8 + 32);
        v26 = *(WTF::StringImpl **)(v8 + 24);
        if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 216), &v26))
        {
          v26 = v9;
          v27 = v10;
          LOBYTE(v28) = 1;
          WebCore::NetworkStorageSession::grantStorageAccess();
          v23[0] = WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame(v2, v9, (uint64_t)v10, *v3);
          v23[1] = 1;
          v23[2] = v5;
          v12 = *v4;
          if (*v4)
            *(_DWORD *)v12 += 2;
          v24 = v12;
          v13 = *v3;
          if (*v3)
            *(_DWORD *)v13 += 2;
          v25 = v13;
          WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v6, (uint64_t)v23);
          v15 = v25;
          v25 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v14);
            else
              *(_DWORD *)v15 -= 2;
          }
          result = v24;
          v24 = 0;
          if (!result)
            return result;
LABEL_27:
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
          *(_DWORD *)result -= 2;
          return result;
        }
      }
    }
    LOWORD(v26) = 256;
    BYTE2(v26) = v5;
    v19 = *v4;
    if (*v4)
      *(_DWORD *)v19 += 2;
    v27 = v19;
    v20 = *v3;
    if (*v3)
      *(_DWORD *)v20 += 2;
    v28 = v20;
    v18 = v6;
  }
  else
  {
    LOWORD(v26) = 256;
    BYTE2(v26) = *(_BYTE *)(a1 + 64);
    v16 = *(WTF::StringImpl **)(a1 + 32);
    if (v16)
      *(_DWORD *)v16 += 2;
    v27 = v16;
    v17 = *(WTF::StringImpl **)(a1 + 24);
    if (v17)
      *(_DWORD *)v17 += 2;
    v28 = v17;
    v18 = (uint64_t *)(a1 + 72);
  }
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v18, (uint64_t)&v26);
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
    goto LABEL_27;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(WebCore::RegistrableDomain &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1948;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(WebCore::RegistrableDomain &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1948;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(WebCore::RegistrableDomain &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &)::$_0,void>::call(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF::StringImpl **v6;
  _QWORD *v7;
  NSObject *v8;
  char *v9;
  char *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _BYTE buf[12];
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(result + 24);
    v5 = (WTF **)(result + 16);
    v6 = (WTF::StringImpl **)(result + 32);
    result = WTF::equal(*(WTF **)(result + 16), *(const WTF::StringImpl **)(result + 32), a3);
    if ((result & 1) == 0)
    {
      if (*(_BYTE *)(v3 + 708))
      {
        v8 = qword_1ECE71140;
        if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
        {
          WTF::String::utf8();
          if (v22)
            v9 = (char *)v22 + 16;
          else
            v9 = 0;
          WTF::String::utf8();
          if (v21)
            v10 = (char *)v21 + 16;
          else
            v10 = 0;
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v9;
          v24 = 2081;
          v25 = v10;
          _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: [Temporary combatibility fix] Storage access was granted for %{private}s under opener page from %{private}s, with user interaction in the opened window.", buf, 0x16u);
          v12 = v21;
          v21 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
              WTF::fastFree(v12, v11);
            else
              --*(_DWORD *)v12;
          }
          v13 = v22;
          v22 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
              WTF::fastFree(v13, v11);
            else
              --*(_DWORD *)v13;
          }
        }
        v14 = *v5;
        if (*v5)
          *(_DWORD *)v14 += 2;
        v22 = v14;
        v15 = *v6;
        if (*v6)
          *(_DWORD *)v15 += 2;
        v21 = v15;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] Storage access was granted for '", 39, (uint64_t *)&v22, (uint64_t)"' under opener page from '", 27, (uint64_t *)&v21, (uint64_t)"', with user interaction in the opened window.", 47, buf);
        WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v3, 13, 4, (uint64_t)buf);
        v17 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = v21;
        v21 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v16);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v22;
        v22 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v16);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      buf[0] = 0;
      BYTE2(v25) = 0;
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E34C1218;
      v20 = v7;
      WebKit::ResourceLoadStatisticsStore::grantStorageAccessInternal(v3, v5, v5 + 2, (__int128 *)buf, v4, 0, 1, (uint64_t *)&v20);
      result = (uint64_t)v20;
      if (v20)
        return (*(uint64_t (**)(_QWORD *))(*v20 + 8))(v20);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 *v6;

  *a1 = &off_1E34C1970;
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 *v6;

  *(_QWORD *)this = &off_1E34C1970;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::RunLoop *v12;
  unsigned int *v13;
  unsigned int v14;
  WTF::WorkQueue *v15;
  unsigned __int8 **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 **v25;
  WTF::WorkQueue *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *result;
  char v44;
  WTF::ThreadSafeWeakPtrControlBlock *v45[2];
  uint64_t v46;
  __int128 v47;
  WTF::StringImpl *v48[2];
  __int16 v49;
  uint64_t v50;
  WTF::StringImpl *v51[2];
  WTF::StringImpl *v52[2];
  unsigned __int8 **v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  char v62;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(_BYTE *)(a1 + 72);
    v44 = *(_BYTE *)(a1 + 73);
    v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)v45 = v7;
    v47 = *(_OWORD *)(a1 + 48);
    WebCore::RegistrableDomain::isolatedCopy(v48);
    WebCore::RegistrableDomain::isolatedCopy(&v48[1]);
    v49 = *(_WORD *)(a1 + 72);
    v8 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    v50 = v8;
    v9 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v9 = &off_1E34C19C0;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)v45;
    *(_OWORD *)(v9 + 24) = v47;
    *(WTF::StringImpl **)(v9 + 40) = v48[0];
    v10 = v48[1];
    *(_OWORD *)v48 = 0u;
    *(_QWORD *)(v9 + 48) = v10;
    *(_WORD *)(v9 + 56) = v49;
    v11 = v50;
    v50 = 0;
    *(_QWORD *)(v9 + 64) = v11;
    v12 = (WTF::RunLoop *)WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)&v61);
    WTF::RunLoop::main(v12);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 96), v2);
    v13 = *(unsigned int **)(v2 + 96);
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    v51[0] = (WTF::StringImpl *)v13;
    WebCore::RegistrableDomain::isolatedCopy(&v51[1]);
    WebCore::RegistrableDomain::isolatedCopy(v52);
    v15 = *(WTF::WorkQueue **)(v2 + 112);
    WTF::WorkQueue::ref(v15);
    v52[1] = v15;
    v16 = *(unsigned __int8 ***)(v2 + 104);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v16);
    v53 = v16;
    *(_QWORD *)&v54 = v3;
    *((_QWORD *)&v54 + 1) = v4;
    *(_QWORD *)&v55 = v5;
    BYTE8(v55) = v6;
    BYTE9(v55) = v44;
    *(_DWORD *)((char *)&v55 + 10) = v59;
    HIWORD(v55) = v60;
    v56 = v2;
    v57 = v9;
    v17 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v17 = off_1E34C1240;
    *(WTF::StringImpl **)(v17 + 8) = v51[0];
    *(WTF::StringImpl **)(v17 + 16) = v51[1];
    *(WTF::StringImpl **)(v17 + 24) = v52[0];
    v18 = v52[1];
    *(_OWORD *)v51 = 0u;
    *(_OWORD *)v52 = 0u;
    *(_QWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 40) = v53;
    v19 = v54;
    v20 = v55;
    *(_QWORD *)(v17 + 80) = v56;
    *(_OWORD *)(v17 + 48) = v19;
    *(_OWORD *)(v17 + 64) = v20;
    v21 = v57;
    v53 = 0;
    v57 = 0;
    *(_QWORD *)(v17 + 88) = v21;
    v58 = v17;
    WTF::RunLoop::dispatch();
    v23 = v58;
    v58 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v57;
    v57 = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v53;
    v53 = 0;
    if (v25)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v25);
    v26 = v52[1];
    v52[1] = 0;
    if (v26)
      WTF::WorkQueue::deref(v26);
    v27 = v52[0];
    v52[0] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v22);
      else
        *(_DWORD *)v27 -= 2;
    }
    v35 = v51[1];
    v51[1] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v22);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = (unsigned int *)v51[0];
    v51[0] = 0;
    if (v36)
    {
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v22);
      }
    }
    v39 = v61;
    if (v62)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
    }
    else if (!v61)
    {
LABEL_35:
      v40 = v50;
      v50 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      v41 = v48[1];
      v48[1] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v22);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = v48[0];
      v48[0] = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v22);
        else
          *(_DWORD *)v42 -= 2;
      }
      return 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    goto LABEL_35;
  }
  WebCore::RegistrableDomain::isolatedCopy(v51);
  WebCore::RegistrableDomain::isolatedCopy(&v51[1]);
  LOWORD(v52[0]) = *(_WORD *)(a1 + 72);
  v28 = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  v52[1] = v28;
  v29 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v29 = &off_1E34C1998;
  *(WTF::StringImpl **)(v29 + 8) = v51[0];
  v30 = v51[1];
  v51[0] = 0;
  v51[1] = 0;
  *(_QWORD *)(v29 + 16) = v30;
  *(_WORD *)(v29 + 24) = v52[0];
  v31 = v52[1];
  v52[1] = 0;
  *(_QWORD *)(v29 + 32) = v31;
  v46 = v29;
  WTF::RunLoop::main((WTF::RunLoop *)v29);
  WTF::RunLoop::dispatch();
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v33 = v52[1];
  v52[1] = 0;
  if (v33)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v51[1];
  v51[1] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  result = v51[0];
  v51[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34C1998;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C1998;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  char v8;
  __int16 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v2 = (uint64_t *)(a1 + 32);
  v8 = 0;
  v9 = *(_WORD *)(a1 + 24);
  v3 = *(WTF::StringImpl **)(a1 + 16);
  if (v3)
    *(_DWORD *)v3 += 2;
  v10 = v3;
  v4 = *(WTF::StringImpl **)(a1 + 8);
  if (v4)
    *(_DWORD *)v4 += 2;
  v11 = v4;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(v2, (uint64_t)&v8);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 *v6;

  *a1 = &off_1E34C19C0;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 *)a1[1];
  a1[1] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 *v6;

  *(_QWORD *)this = &off_1E34C19C0;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1},void,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&>::call(uint64_t a1, char a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::ThreadSafeWeakPtrControlBlock *v15[2];
  __int128 v16;
  WTF::StringImpl *v17[2];
  _BYTE v18[3];
  uint64_t v19;
  uint64_t v20;

  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)v15 = v4;
  v16 = *(_OWORD *)(a1 + 24);
  WebCore::RegistrableDomain::isolatedCopy(v17);
  WebCore::RegistrableDomain::isolatedCopy(&v17[1]);
  v18[0] = a2;
  *(_WORD *)&v18[1] = *(_WORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v19 = v5;
  v6 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v6 = &off_1E34C19E8;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)v15;
  *(_OWORD *)(v6 + 24) = v16;
  *(WTF::StringImpl **)(v6 + 40) = v17[0];
  v7 = v17[1];
  *(_OWORD *)v17 = 0u;
  *(_QWORD *)(v6 + 48) = v7;
  *(_WORD *)(v6 + 56) = *(_WORD *)v18;
  *(_BYTE *)(v6 + 58) = v18[2];
  v8 = v19;
  v19 = 0;
  *(_QWORD *)(v6 + 64) = v8;
  v20 = v6;
  WTF::RunLoop::main((WTF::RunLoop *)v6);
  WTF::RunLoop::dispatch();
  v10 = v20;
  v20 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v19;
  v19 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v17[1];
  v17[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 *v6;

  *a1 = &off_1E34C19E8;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 *)a1[1];
  a1[1] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 *v6;

  *(_QWORD *)this = &off_1E34C19E8;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::grantStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::StorageAccessPromptWasShown,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(void)::{lambda(WebCore::StorageAccessWasGranted)#1}::operator()(WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 **v3;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int8 *result;
  WTF::StringImpl *v15;
  char v16;
  __int16 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_24;
  }
  v3 = *(unsigned __int8 ***)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        goto LABEL_24;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v3)
    goto LABEL_24;
LABEL_16:
  if (*(_BYTE *)(a1 + 56) == 1)
  {
    v16 = WebKit::WebResourceLoadStatisticsStore::storageAccessWasGrantedValueForFrame((uint64_t)v3, *(WTF::StringImpl **)(a1 + 24), *(_QWORD *)(a1 + 32), *(WTF::StringImpl **)(a1 + 40));
    v17 = *(_WORD *)(a1 + 57);
    v6 = *(WTF::StringImpl **)(a1 + 48);
    if (v6)
      *(_DWORD *)v6 += 2;
    v18 = v6;
    v7 = *(WTF::StringImpl **)(a1 + 40);
    if (v7)
      *(_DWORD *)v7 += 2;
    v19 = v7;
    WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()((uint64_t *)(a1 + 64), (uint64_t)&v16);
    v9 = v19;
    v19 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
LABEL_24:
  v16 = *(_BYTE *)(a1 + 56);
  v17 = *(_WORD *)(a1 + 57);
  v10 = *(WTF::StringImpl **)(a1 + 48);
  if (v10)
    *(_DWORD *)v10 += 2;
  v18 = v10;
  v11 = *(WTF::StringImpl **)(a1 + 40);
  if (v11)
    *(_DWORD *)v11 += 2;
  v19 = v11;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()((uint64_t *)(a1 + 64), (uint64_t)&v16);
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = (unsigned __int8 *)v18;
  v18 = 0;
  if (!result)
  {
LABEL_35:
    if (!v3)
      return result;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_35;
  }
  result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
  if (v3)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setThirdPartyCookieBlockingMode(WebCore::ThirdPartyCookieBlockingMode)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v1)
    *(_BYTE *)(v1 + 704) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSameSiteStrictEnforcementEnabled(WebCore::SameSiteStrictEnforcementEnabled)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v1)
    *(_BYTE *)(v1 + 705) = *(_BYTE *)(result + 16);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1A60;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1A60;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  WTF::RunLoop *v4;
  uint64_t result;
  WTF::RunLoop *v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v1)
  {
    v2 = *(unsigned __int8 *)(a1 + 16);
    *(_BYTE *)(v1 + 706) = v2;
    if (v2 == 3)
      *(_BYTE *)(v1 + 226) = 1;
  }
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = &off_1E34C1A88;
  *((_QWORD *)v4 + 1) = v3;
  v6 = v4;
  WTF::RunLoop::main(v4);
  WTF::RunLoop::dispatch();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1A88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1A88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(WebCore::FirstPartyWebsiteDataRemovalMode,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1AB0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1AB0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::RunLoop *v4;
  uint64_t result;
  WTF::RunLoop *v6;

  v2 = *(_QWORD *)(a1[1] + 24);
  if (v2)
    WTF::String::operator=((WTF::StringImpl **)(v2 + 288), (WTF::StringImpl *)(a1 + 2));
  v3 = a1[3];
  a1[3] = 0;
  v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = &off_1E34C1AD8;
  *((_QWORD *)v4 + 1) = v3;
  v6 = v4;
  WTF::RunLoop::main(v4);
  WTF::RunLoop::dispatch();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1AD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1AD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *a1 = &off_1E34C1B00;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)a1[2];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *(_QWORD *)this = &off_1E34C1B00;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::RunLoop *v7;
  uint64_t result;
  uint64_t v9;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
  {
    v5 = a1[2];
    a1[2] = 0;
    v6 = *(WTF::StringImpl ***)(v4 + 296);
    *(_QWORD *)(v4 + 296) = v5;
    if (v6)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
    *(_BYTE *)(*(_QWORD *)(v3 + 24) + 704) = 1;
  }
  v7 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v9, a1 + 3);
  WTF::RunLoop::main(v7);
  WTF::RunLoop::dispatch();
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setManagedDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *a1 = &off_1E34C1B28;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)a1[2];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setManagedDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *(_QWORD *)this = &off_1E34C1B28;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setManagedDomains(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::RunLoop *v7;
  uint64_t result;
  uint64_t v9;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
  {
    v5 = a1[2];
    a1[2] = 0;
    v6 = *(WTF::StringImpl ***)(v4 + 304);
    *(_QWORD *)(v4 + 304) = v5;
    if (v6)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
    *(_BYTE *)(*(_QWORD *)(v3 + 24) + 704) = 2;
  }
  v7 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v9, a1 + 3);
  WTF::RunLoop::main(v7);
  WTF::RunLoop::dispatch();
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WebKit::ResourceLoadStatisticsStore *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::performDailyTasks(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebKit::ResourceLoadStatisticsStore *result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(WebKit::ResourceLoadStatisticsStore **)(v1 + 24);
  if (result)
  {
    WebKit::ResourceLoadStatisticsStore::includeTodayAsOperatingDateIfNecessary(result);
    return (WebKit::ResourceLoadStatisticsStore *)WebCore::SQLiteDatabase::runIncrementalVacuumCommand((WebCore::SQLiteDatabase *)(*(_QWORD *)(v1 + 24) + 16));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,BOOL,BOOL,WTF::Seconds,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34C1B78;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,BOOL,BOOL,WTF::Seconds,BOOL)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C1B78;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,BOOL,BOOL,WTF::Seconds,BOOL)::$_0,void>::call(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  double v7;
  int v8;
  WTF **v9;
  char v10;
  WTF::StringImpl **v11;
  const WTF::StringImpl *v12;
  unsigned __int8 v13;
  char v14;
  char v15;
  uint64_t v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char v20;
  BOOL v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v31;
  char v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  NSObject *v51;
  char *v52;
  char *v53;
  void *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl **v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  char v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  _BYTE buf[12];
  __int16 v71;
  char *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (!v3)
    return result;
  v4 = result;
  v5 = *(unsigned __int8 *)(result + 40);
  v6 = *(unsigned __int8 *)(result + 41);
  v7 = *(double *)(result + 48);
  v8 = *(unsigned __int8 *)(result + 56);
  v9 = (WTF **)(result + 16);
  v10 = WTF::equal(*(WTF **)(result + 16), *(const WTF::StringImpl **)(result + 24), a3);
  v11 = (WTF::StringImpl **)(v4 + 32);
  v13 = WTF::equal(*v9, *(const WTF::StringImpl **)(v4 + 32), v12);
  result = (uint64_t)WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v3, (uint64_t)&v66);
  if (v6)
    v14 = 1;
  else
    v14 = v10;
  v15 = v14 | v13;
  if (((v14 | v13) & 1) == 0)
  {
    result = WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)v9, (uint64_t)"logFrameNavigation");
    if (!v26)
      goto LABEL_10;
    WTF::WallTime::now((WTF::WallTime *)result);
    WebCore::ResourceLoadStatistics::reduceTimeResolution();
    WebKit::ResourceLoadStatisticsStore::updateLastSeen(v3, v27);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = *(WTF::StringImpl **)buf;
    v65 = *(WTF::StringImpl **)buf;
    v29 = *(WTF::StringImpl **)(v4 + 24);
    if (v29)
      *(_DWORD *)v29 += 2;
    v69 = v29;
    v64 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v64, &v69, (uint64_t)buf);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v65, (uint64_t *)&v64);
    if (v64)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v64, v30);
    result = (uint64_t)v69;
    v69 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
      else
        *(_DWORD *)result -= 2;
    }
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        result = WTF::StringImpl::destroy(v28, v30);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if ((v13 & 1) != 0)
    goto LABEL_9;
  if (!v6)
  {
    if (v5)
    {
      WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)(v4 + 32), (uint64_t)"logFrameNavigation");
      v19 = v18;
      result = WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)v9, (uint64_t)"logFrameNavigation");
      if (v20)
        v21 = v19 == 0;
      else
        v21 = 1;
      if (!v21)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v22 = *(WTF::StringImpl **)buf;
        v65 = *(WTF::StringImpl **)buf;
        v23 = *v9;
        if (*v9)
          *(_DWORD *)v23 += 2;
        v69 = v23;
        v64 = 0;
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v64, &v69, (uint64_t)buf);
        WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v65, (uint64_t *)&v64);
        if (v64)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v64, v24);
        v25 = v69;
        v69 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v24);
          else
            *(_DWORD *)v22 -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v38 = *(WTF::StringImpl **)buf;
        v65 = *(WTF::StringImpl **)buf;
        v39 = *v11;
        if (*v11)
          *(_DWORD *)v39 += 2;
        v69 = v39;
        v64 = 0;
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v64, &v69, (uint64_t)buf);
        WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v65, (uint64_t *)&v64);
        if (v64)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v64, v40);
        v41 = v69;
        v69 = 0;
        if (!v41)
          goto LABEL_91;
        goto LABEL_88;
      }
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v17 = !v8 && v7 < *(double *)(v3 + 208);
  if (!v5 && !v17)
  {
LABEL_9:
    if ((v15 & 1) == 0)
    {
      while (1)
      {
        v47 = *(_QWORD *)(v3 + 256) + 1;
        *(_QWORD *)(v3 + 256) = v47;
        *(_QWORD *)(v3 + 264) = v47;
        *(_BYTE *)(v3 + 272) = 1;
        v11 = *(WTF::StringImpl ***)(v3 + 112);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 96), v3);
        v9 = *(WTF ***)(v3 + 96);
        if (v9)
        {
          do
            v48 = __ldaxr((unsigned int *)v9);
          while (__stlxr(v48 + 1, (unsigned int *)v9));
        }
        if (*(_BYTE *)(v3 + 272))
          break;
        __break(1u);
LABEL_101:
        v51 = qword_1ECE71140;
        if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
        {
          WTF::String::utf8();
          if (v65)
            v52 = (char *)v65 + 16;
          else
            v52 = 0;
          WTF::String::utf8();
          if (v64)
            v53 = (char *)v64 + 16;
          else
            v53 = 0;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v52;
          v71 = 2082;
          v72 = v53;
          _os_log_impl(&dword_196BCC000, v51, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Did set %{public}s as making a top frame redirect to %{public}s.", buf, 0x16u);
          v55 = v64;
          v64 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 1)
              WTF::fastFree(v55, v54);
            else
              --*(_DWORD *)v55;
          }
          v56 = v65;
          v65 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 1)
              WTF::fastFree(v56, v54);
            else
              --*(_DWORD *)v56;
          }
        }
        v57 = *v11;
        if (*v11)
          *(_DWORD *)v57 += 2;
        v65 = v57;
        v58 = *v9;
        if (*v9)
          *(_DWORD *)v58 += 2;
        v64 = v58;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Did set '", 10, (uint64_t *)&v65, (uint64_t)"' as making a top frame redirect to '", 38, (uint64_t *)&v64, (uint64_t)"'.", 3, buf);
        WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(v3, 13, 4, (uint64_t)buf);
        v60 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v59);
          else
            *(_DWORD *)v60 -= 2;
        }
        v61 = v64;
        v64 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v59);
          else
            *(_DWORD *)v61 -= 2;
        }
        v62 = v65;
        v65 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v59);
          else
            *(_DWORD *)v62 -= 2;
        }
LABEL_83:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v38 = *(WTF::StringImpl **)buf;
        v69 = *(WTF::StringImpl **)buf;
        v46 = *v11;
        if (*v11)
          *(_DWORD *)v46 += 2;
        v68 = v46;
        v63 = 0;
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v63, &v68, (uint64_t)buf);
        WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v69, (uint64_t *)&v63);
        if (v63)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v63, v40);
        v41 = v68;
        v68 = 0;
        if (v41)
        {
LABEL_88:
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v40);
          else
            *(_DWORD *)v41 -= 2;
        }
LABEL_91:
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v40);
          else
            *(_DWORD *)v38 -= 2;
        }
      }
      v49 = *(_QWORD *)(v3 + 264);
      v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v50 = &off_1E34C0EA8;
      v50[1] = v3;
      v50[2] = v9;
      v50[3] = v49;
      *(_QWORD *)buf = v50;
      WTF::SuspendableWorkQueue::dispatchAfter();
      result = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    goto LABEL_10;
  }
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)(v4 + 32), (uint64_t)"logFrameNavigation");
  v32 = v31;
  result = WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v3, (const WebCore::RegistrableDomain *)v9, (uint64_t)"logFrameNavigation");
  if (v33 && v32)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = *(WTF::StringImpl **)buf;
    v65 = *(WTF::StringImpl **)buf;
    v35 = *v9;
    if (*v9)
      *(_DWORD *)v35 += 2;
    v69 = v35;
    v64 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v64, &v69, (uint64_t)buf);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v65, (uint64_t *)&v64);
    if (v64)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v64, v36);
    v37 = v69;
    v69 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v36);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (v5)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v42 = *(WTF::StringImpl **)buf;
      v65 = *(WTF::StringImpl **)buf;
      v43 = *v9;
      if (*v9)
        *(_DWORD *)v43 += 2;
      v69 = v43;
      v64 = 0;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v64, &v69, (uint64_t)buf);
      WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v3, (uint64_t *)&v65, (uint64_t *)&v64);
      if (v64)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v64, v44);
      v45 = v69;
      v69 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v44);
        else
          *(_DWORD *)v45 -= 2;
      }
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v44);
        else
          *(_DWORD *)v42 -= 2;
      }
      if (*(_BYTE *)(v3 + 708))
        goto LABEL_101;
    }
    goto LABEL_83;
  }
LABEL_10:
  v16 = v66;
  if (v67)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
  }
  else if (!v66)
  {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1BA0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1BA0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  double *v3;
  const WebCore::RegistrableDomain *v4;
  _QWORD *v5;
  char v6;
  WTF::WallTime *hasHadUserInteraction;
  int v8;
  double v9;
  double v10;
  WTF::RunLoop *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v1 = a1[1];
  v2 = a1[3];
  a1[3] = 0;
  v16 = v2;
  v3 = *(double **)(v1 + 24);
  if (v3)
  {
    v4 = (const WebCore::RegistrableDomain *)(a1 + 2);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E34C1BC8;
    v5[1] = v2;
    v15 = v5;
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v3, (uint64_t)&v17);
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v3, v4, (uint64_t)"logUserInteraction");
    if (v6
      && (hasHadUserInteraction = (WTF::WallTime *)WebKit::ResourceLoadStatisticsStore::hasHadUserInteraction((uint64_t)v3, v4), v8 = (int)hasHadUserInteraction, v9 = v3[80], WTF::WallTime::now(hasHadUserInteraction), WebKit::ResourceLoadStatisticsStore::setUserInteraction((uint64_t)v3, v9 + v10), !v8))
    {
      WebKit::ResourceLoadStatisticsStore::updateCookieBlocking((uint64_t)v3, (uint64_t *)&v15);
    }
    else
    {
      v15 = 0;
      (*(void (**)(_QWORD *))(*v5 + 16))(v5);
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    }
    v14 = v17;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    }
    else if (!v17)
    {
      goto LABEL_14;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_14:
    result = (uint64_t)v15;
    if (!v15)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v11 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v17, &v16);
  WTF::RunLoop::main(v11);
  WTF::RunLoop::dispatch();
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1BC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1BC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF::RunLoop *v1;
  uint64_t result;
  uint64_t v3;

  v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 8));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::DidFilterKnownLinkDecoration,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34C1BF0;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::DidFilterKnownLinkDecoration,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C1BF0;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::DidFilterKnownLinkDecoration,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  const WebCore::RegistrableDomain **v3;
  int v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  WTF::RunLoop *v12;
  WebCore::SQLiteStatement *result;
  WTF::StringImpl **v14;
  WebCore::SQLiteStatement *v15;
  uint64_t v16;
  char v17;
  WebCore::SQLiteStatement *v18[3];
  WTF::StringImpl *v19[2];

  v19[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (!v2)
    goto LABEL_31;
  v3 = (const WebCore::RegistrableDomain **)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)&v16);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v2, (const WebCore::RegistrableDomain *)(a1 + 24), (uint64_t)"logCrossSiteLoadWithLinkDecoration");
  if (!v5)
    goto LABEL_27;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v18[0];
  v15 = v18[0];
  v7 = *(WTF::StringImpl **)(a1 + 16);
  if (v7)
    *(_DWORD *)v7 += 2;
  v19[0] = v7;
  v14 = 0;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v14, v19, (uint64_t)v18);
  WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v2, (uint64_t *)&v15, (uint64_t *)&v14);
  if (v14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v8);
  v9 = v19[0];
  v19[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v8);
      if (!v6)
        goto LABEL_16;
LABEL_13:
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v8);
      else
        *(_DWORD *)v6 -= 2;
      goto LABEL_16;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (v6)
    goto LABEL_13;
LABEL_16:
  if (*(_BYTE *)(v2 + 226) || *(_BYTE *)(v2 + 707) || !MEMORY[0x19AEABBCC](*v3, "localhost", 9))
  {
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 456), (uint64_t)"isScheduledForAllButCookieDataRemoval", (WebCore::SQLiteStatementAutoResetScope *)v18);
    v10 = WebKit::ResourceLoadStatisticsStore::predicateValueForDomain((WebKit::ResourceLoadStatisticsStore *)v2, v18, *v3);
    if (v10 == 2)
    {
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v18);
      if (v4)
        goto LABEL_27;
    }
    else
    {
      if (v10)
      {
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v18);
        goto LABEL_27;
      }
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v18);
    }
  }
  if (WebKit::ResourceLoadStatisticsStore::isPrevalentResource((WebKit::ResourceLoadStatisticsStore *)v2, (const WebCore::RegistrableDomain **)(a1 + 16)))
  {
    WebKit::ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval(v2, (const WebCore::RegistrableDomain *)(a1 + 24));
  }
LABEL_27:
  v11 = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  }
  else if (!v16)
  {
    goto LABEL_31;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
LABEL_31:
  v12 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v18, (uint64_t *)(a1 + 40));
  WTF::RunLoop::main(v12);
  WTF::RunLoop::dispatch();
  result = v18[0];
  v18[0] = 0;
  if (result)
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1C18;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1C18;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  const WebCore::RegistrableDomain *v4;
  _QWORD *v5;
  uint64_t result;
  WTF::RunLoop *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = a1[1];
  v2 = a1[3];
  a1[3] = 0;
  v9 = v2;
  v3 = *(_QWORD **)(v1 + 24);
  if (v3)
  {
    v4 = (const WebCore::RegistrableDomain *)(a1 + 2);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E34C1C40;
    v5[1] = v2;
    v10 = v5;
    WebKit::ResourceLoadStatisticsStore::clearUserInteraction(v3, v4, (uint64_t *)&v10);
    result = (uint64_t)v10;
    if (!v10)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v7 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v10, &v9);
  WTF::RunLoop::main(v7);
  WTF::RunLoop::dispatch();
  v8 = (uint64_t)v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1C40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1C40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF::RunLoop *v1;
  uint64_t result;
  uint64_t v3;

  v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 8));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1C68;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1C68;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  double *v2;
  double v3;
  double i;
  WTF::RunLoop *v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(double **)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    v3 = *(double *)(a1 + 16);
    for (i = v2[80]; i <= v3; i = i + 86400.0)
    {
      v2[80] = i;
      WebKit::ResourceLoadStatisticsStore::includeTodayAsOperatingDateIfNecessary((WebKit::ResourceLoadStatisticsStore *)v2);
    }
  }
  v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  WTF **v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
  v7 = (WTF **)(v2 + 8 * v6);
  if ((WTF::equal(*v7, 0, v8) & 1) != 0)
  {
LABEL_7:
    if (*a1)
      return *a1 + 8 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  else
  {
    v10 = 1;
    while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
    {
      v6 = (v6 + v10) & v5;
      v7 = (WTF **)(v2 + 8 * v6);
      ++v10;
      if (WTF::equal(*v7, 0, v9))
        goto LABEL_7;
    }
  }
  return (uint64_t)v7;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1C90;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1C90;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  char hasHadUserInteraction;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(a1[1] + 24);
  if (v2)
    hasHadUserInteraction = WebKit::ResourceLoadStatisticsStore::hasHadUserInteraction(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
  else
    hasHadUserInteraction = 0;
  v4 = a1[3];
  a1[3] = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34C1CB8;
  *(_BYTE *)(v5 + 8) = hasHadUserInteraction;
  *(_QWORD *)(v5 + 16) = v4;
  v7 = v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1CB8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1CB8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setLastSeen(WebCore::RegistrableDomain &&,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1CE0;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setLastSeen(WebCore::RegistrableDomain &&,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1CE0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setLastSeen(WebCore::RegistrableDomain &&,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebKit::DatabaseUtilities *v2;
  double v3;
  char v4;
  uint64_t v5;
  WTF::RunLoop *v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 24);
  if (!v2)
    goto LABEL_8;
  v3 = *((double *)a1 + 3);
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)&v8);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 2), (uint64_t)"setLastSeen");
  if (v4)
    WebKit::ResourceLoadStatisticsStore::updateLastSeen((uint64_t)v2, v3);
  v5 = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
LABEL_8:
  v6 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v8, a1 + 4);
  WTF::RunLoop::main(v6);
  WTF::RunLoop::dispatch();
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,WTF::Seconds,BOOL,WebCore::RegistrableDomain &&,BOOL,BOOL,BOOL,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E34C1D08;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,WTF::Seconds,BOOL,WebCore::RegistrableDomain &&,BOOL,BOOL,BOOL,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34C1D08;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebCore::RegistrableDomain &,WTF::Seconds,BOOL,WebCore::RegistrableDomain &&,BOOL,BOOL,BOOL,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WebKit::DatabaseUtilities *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::RunLoop *v10;
  uint64_t result;
  uint64_t v12[3];
  WTF::StringImpl **v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[25];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int128 v25;
  _BYTE v26[25];
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v2 + 24))
  {
    v3 = *(_DWORD **)(a1 + 16);
    if (v3)
      *v3 += 2;
    v14[0] = (uint64_t)v3;
    v18 = 0u;
    memset(v19, 0, sizeof(v19));
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    v25 = 0u;
    memset(v26, 0, sizeof(v26));
    v27 = 0;
    v28 = 0;
    v14[1] = *(_QWORD *)(a1 + 40);
    v15 = *(_BYTE *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_BYTE *)(a1 + 64);
    v23 = *(_WORD *)(a1 + 65);
    v24 = *(_DWORD *)(a1 + 68);
    v13 = 0;
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 && *(_DWORD *)(v4 + 4) && (MEMORY[0x19AEABBCC]() & 1) == 0)
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v13, (WTF::ASCIICaseInsensitiveHash **)(a1 + 24), (uint64_t)v12);
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 && *(_DWORD *)(v5 + 4) && (MEMORY[0x19AEABBCC]() & 1) == 0)
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v13, (WTF::ASCIICaseInsensitiveHash **)(a1 + 32), (uint64_t)v12);
    v6 = v13;
    v13 = 0;
    *((_QWORD *)&v20 + 1) = v6;
    v7 = *(WebKit::DatabaseUtilities **)(v2 + 24);
    v12[0] = WTF::fastMalloc((WTF *)0xC8);
    v12[1] = 0x100000001;
    WebCore::ResourceLoadStatistics::ResourceLoadStatistics(v12[0], v14);
    WebKit::ResourceLoadStatisticsStore::mergeStatistics(v7, (uint64_t)v12);
    WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v8);
    if (v13)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v9);
    WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v14, v9);
  }
  v10 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v14, (uint64_t *)(a1 + 72));
  WTF::RunLoop::main(v10);
  WTF::RunLoop::dispatch();
  result = v14[0];
  v14[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34C1D30;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C1D30;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int Error;
  uint64_t ErrorMsg;
  _QWORD *v17;
  _BYTE v18[16];
  unsigned int v19;
  _BYTE v20[16];
  unsigned int v21;
  _BYTE v22[16];
  unsigned int v23;
  _BYTE buf[12];
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1[1] + 24);
  if (!v2)
  {
    v8 = a1[4];
    a1[4] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  WebCore::SQLiteDatabase::prepareStatement();
  WebCore::SQLiteDatabase::prepareStatement();
  WebCore::SQLiteDatabase::prepareStatement();
  if (!v23 && !v21 && !v19)
  {
    if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 2)) >> 32))goto LABEL_50;
    if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v22))
    {
      if (v23)
        goto LABEL_51;
      if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 3)) >> 32))
      {
LABEL_50:
        std::__throw_bad_optional_access[abi:sn180100]();
        goto LABEL_51;
      }
      if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v22))
      {
        if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 2)) >> 32))goto LABEL_50;
        if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v20))
        {
          if (v21)
            goto LABEL_51;
          if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 3)) >> 32))goto LABEL_50;
          if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v20))
          {
            if (!((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 2)) >> 32))goto LABEL_50;
            if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v18))
            {
              if (v19)
                goto LABEL_51;
              if ((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)v2, (const WebCore::RegistrableDomain *)(a1 + 3)) >> 32)
              {
                if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v18))
                  goto LABEL_34;
                if (!v23)
                {
                  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v22) != 100)
                    goto LABEL_48;
                  if (v21)
                    goto LABEL_51;
                  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v20) != 100)
                    goto LABEL_48;
                  if (v19)
                    goto LABEL_51;
                  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v18) != 100)
                  {
LABEL_48:
                    v3 = qword_1ECE71758;
                    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
                      goto LABEL_6;
                    v14 = *(_QWORD *)(v2 + 648);
                    Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
                    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
                    *(_DWORD *)buf = 134218755;
                    *(_QWORD *)&buf[4] = v2;
                    v25 = 2048;
                    v26 = v14;
                    v27 = 1024;
                    v28 = Error;
                    v29 = 2081;
                    v30 = ErrorMsg;
                    v10 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::isCorrectS"
                          "ubStatisticsCount: failed to step statement";
                    goto LABEL_18;
                  }
                  if (!v23)
                  {
                    v4 = 0;
                    if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v22) != 1)
                      goto LABEL_7;
                    if (!v21)
                    {
                      v4 = 0;
                      if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v20) != 1)
                        goto LABEL_7;
                      if (!v19)
                      {
                        v4 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v18) == 1;
                        goto LABEL_7;
                      }
                    }
                  }
                }
LABEL_51:
                v17 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
                return WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v17);
              }
              goto LABEL_50;
            }
          }
        }
      }
    }
LABEL_34:
    v3 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      goto LABEL_6;
    v11 = *(_QWORD *)(v2 + 648);
    v12 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
    v13 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
    *(_DWORD *)buf = 134218755;
    *(_QWORD *)&buf[4] = v2;
    v25 = 2048;
    v26 = v11;
    v27 = 1024;
    v28 = v12;
    v29 = 2081;
    v30 = v13;
    v10 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::isCorrectSubStatisticsCoun"
          "t: failed to bind parameters";
    goto LABEL_18;
  }
  v3 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    v9 = *(_QWORD *)(v2 + 648);
    *(_DWORD *)buf = 134218755;
    *(_QWORD *)&buf[4] = v2;
    v25 = 2048;
    v26 = v9;
    v27 = 1024;
    v28 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
    v29 = 2081;
    v30 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
    v10 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::isCorrectSubStatisticsCoun"
          "t: failed to prepare statement";
LABEL_18:
    _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, v10, buf, 0x26u);
  }
LABEL_6:
  v4 = 0;
LABEL_7:
  if (v19 != -1)
    (*(&off_1E34C0CF8 + v19))((int)buf, (WebCore::SQLiteStatement *)v18);
  if (v21 != -1)
    (*(&off_1E34C0CF8 + v21))((int)buf, (WebCore::SQLiteStatement *)v20);
  if (v23 != -1)
    (*(&off_1E34C0CF8 + v23))((int)buf, (WebCore::SQLiteStatement *)v22);
  v5 = a1[4];
  a1[4] = 0;
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E34C1D58;
  *(_BYTE *)(v6 + 8) = v4;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)buf = v6;
  WTF::RunLoop::main((WTF::RunLoop *)v6);
  WTF::RunLoop::dispatch();
  result = *(_QWORD **)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1D58;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1D58;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1D80;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1D80;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebKit::ResourceLoadStatisticsStore *v2;
  WTF::RunLoop *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(WebKit::ResourceLoadStatisticsStore **)(a1[1] + 24);
  if (v2)
    WebKit::ResourceLoadStatisticsStore::setPrevalentResource(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
  v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, a1 + 3);
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1DA8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1DA8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebKit::ResourceLoadStatisticsStore *v2;
  WTF::RunLoop *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(WebKit::ResourceLoadStatisticsStore **)(a1[1] + 24);
  if (v2)
    WebKit::ResourceLoadStatisticsStore::setVeryPrevalentResource(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
  v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, a1 + 3);
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34C1DD0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C1DD0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t *a1)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  uint64_t result;
  uint64_t v11;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v14;
  uint64_t v15;
  char v16;
  _BYTE buf[12];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1[1] + 24);
  if (!v2)
    goto LABEL_14;
  v3 = *(double *)(v2 + 640);
  WTF::WallTime::now((WTF::WallTime *)a1);
  v5 = v4;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)&v15);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setMostRecentWebPushInteractionTime");
  if (v6)
  {
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 472), (uint64_t)"setMostRecentWebPushInteractionTime", (WebCore::SQLiteStatementAutoResetScope *)&v14);
    if (!v14
      || WebCore::SQLiteStatement::bindDouble(v14, v3 + v5)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(v14) != 101)
    {
      v7 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v11 = *(_QWORD *)(v2 + 648);
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
        *(_DWORD *)buf = 134218755;
        *(_QWORD *)&buf[4] = v2;
        v18 = 2048;
        v19 = v11;
        v20 = 1024;
        v21 = Error;
        v22 = 2081;
        v23 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime: failed to step statement", buf, 0x26u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v14);
  }
  v8 = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  }
  else if (!v15)
  {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_14:
  v9 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, a1 + 2);
  WTF::RunLoop::main(v9);
  WTF::RunLoop::dispatch();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1DF8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1DF8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::RunLoop *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::RunLoop *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::RunLoop *v16;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    v4 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = &off_1E34C1E48;
    *((_QWORD *)v4 + 1) = v2;
    v14 = v4;
    WebKit::ResourceLoadStatisticsStore::dumpResourceLoadStatistics(v3, (uint64_t *)&v14);
    result = v14;
    if (v14)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v6 += 2;
    v13 = v6;
    WTF::String::isolatedCopy();
    v15 = v2;
    v7 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = &off_1E34C1E20;
    *((_QWORD *)v7 + 1) = v14;
    v8 = v15;
    v14 = 0;
    v15 = 0;
    *((_QWORD *)v7 + 2) = v8;
    v16 = v7;
    WTF::RunLoop::main(v7);
    WTF::RunLoop::dispatch();
    v10 = v16;
    v16 = 0;
    if (v10)
      (*(void (**)(WTF::RunLoop *))(*(_QWORD *)v10 + 8))(v10);
    v11 = v15;
    v15 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v13;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1E20;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1E20;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1},void,WTF::String &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C1E48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1},void,WTF::String &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C1E48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0::operator()(void)::{lambda(WTF::String &)#1},void,WTF::String &>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::RunLoop *v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::RunLoop *v7;

  WTF::String::isolatedCopy();
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v6 = v2;
  v3 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v3 = &off_1E34C1E20;
  *((_QWORD *)v3 + 1) = v5;
  *((_QWORD *)v3 + 2) = v6;
  v7 = v3;
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  if (v7)
    (*(void (**)(WTF::RunLoop *))(*(_QWORD *)v7 + 8))(v7);
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1E70;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1E70;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::ResourceLoadStatisticsStore *v2;
  BOOL isPrevalentResource;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(WebKit::ResourceLoadStatisticsStore **)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
    isPrevalentResource = WebKit::ResourceLoadStatisticsStore::isPrevalentResource(v2, (const WebCore::RegistrableDomain **)(a1 + 16));
  else
    isPrevalentResource = 0;
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34C1E98;
  *(_BYTE *)(v5 + 8) = isPrevalentResource;
  *(_QWORD *)(v5 + 16) = v4;
  v7 = v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1E98;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1E98;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C1EC0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C1EC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::SQLiteStatement *result;
  WebCore::SQLiteStatement *v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 226)
      || *(_BYTE *)(v2 + 707)
      || (MEMORY[0x19AEABBCC](*(_QWORD *)(a1 + 16), "localhost", 9) & 1) == 0)
    {
      WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 424), (uint64_t)"isVeryPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v6);
      LOBYTE(v2) = WebKit::ResourceLoadStatisticsStore::predicateValueForDomain((WebKit::ResourceLoadStatisticsStore *)v2, &v6, *(const WebCore::RegistrableDomain **)(a1 + 16)) != 0;
      WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v6);
    }
    else
    {
      LOBYTE(v2) = 0;
    }
  }
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C1EE8;
  *(_BYTE *)(v4 + 8) = v2;
  *(_QWORD *)(v4 + 16) = v3;
  v6 = (WebCore::SQLiteStatement *)v4;
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::RunLoop::dispatch();
  result = v6;
  v6 = 0;
  if (result)
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1EE8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1EE8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34C1F10;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C1F10;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebCore::SQLiteStatement **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::SQLiteStatement *result;
  WebCore::SQLiteStatement *v7;

  v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 24);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 45, (uint64_t)"isRegisteredAsSubresourceUnder", (WebCore::SQLiteStatementAutoResetScope *)&v7);
    v3 = WebKit::ResourceLoadStatisticsStore::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
    LOBYTE(v2) = WebKit::ResourceLoadStatisticsStore::relationshipExists((uint64_t)v2, &v7, v3);
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v7);
  }
  v4 = a1[4];
  a1[4] = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34C1F38;
  *(_BYTE *)(v5 + 8) = (_BYTE)v2;
  *(_QWORD *)(v5 + 16) = v4;
  v7 = (WebCore::SQLiteStatement *)v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  result = v7;
  v7 = 0;
  if (result)
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1F38;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1F38;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34C1F60;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C1F60;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebCore::SQLiteStatement **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::SQLiteStatement *result;
  WebCore::SQLiteStatement *v7;

  v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 24);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 44, (uint64_t)"isRegisteredAsSubFrameUnder", (WebCore::SQLiteStatementAutoResetScope *)&v7);
    v3 = WebKit::ResourceLoadStatisticsStore::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
    LOBYTE(v2) = WebKit::ResourceLoadStatisticsStore::relationshipExists((uint64_t)v2, &v7, v3);
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v7);
  }
  v4 = a1[4];
  a1[4] = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34C1F88;
  *(_BYTE *)(v5 + 8) = (_BYTE)v2;
  *(_QWORD *)(v5 + 16) = v4;
  v7 = (WebCore::SQLiteStatement *)v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  result = v7;
  v7 = 0;
  if (result)
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1F88;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1F88;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34C1FB0;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C1FB0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebCore::SQLiteStatement **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::SQLiteStatement *result;
  WebCore::SQLiteStatement *v7;

  v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 24);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 46, (uint64_t)"isRegisteredAsRedirectingTo", (WebCore::SQLiteStatementAutoResetScope *)&v7);
    v3 = WebKit::ResourceLoadStatisticsStore::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
    LOBYTE(v2) = WebKit::ResourceLoadStatisticsStore::relationshipExists((uint64_t)v2, &v7, v3);
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v7);
  }
  v4 = a1[4];
  a1[4] = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34C1FD8;
  *(_BYTE *)(v5 + 8) = (_BYTE)v2;
  *(_QWORD *)(v5 + 16) = v4;
  v7 = (WebCore::SQLiteStatement *)v5;
  WTF::RunLoop::main((WTF::RunLoop *)v5);
  WTF::RunLoop::dispatch();
  result = v7;
  v7 = 0;
  if (result)
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C1FD8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C1FD8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C2000;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C2000;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  NSObject *v4;
  uint64_t v5;
  WTF::RunLoop *v6;
  uint64_t result;
  uint64_t v8;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v11;
  uint64_t v12;
  char v13;
  _BYTE buf[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1[1] + 24);
  if (!v2)
    goto LABEL_13;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)&v12);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(v2, (const WebCore::RegistrableDomain *)(a1 + 2), (uint64_t)"clearPrevalentResource");
  if (v3)
  {
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 432), (uint64_t)"clearPrevalentResource", (WebCore::SQLiteStatementAutoResetScope *)&v11);
    if (!v11
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(v11) != 101)
    {
      v4 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v8 = *(_QWORD *)(v2 + 648);
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
        *(_DWORD *)buf = 134218755;
        *(_QWORD *)&buf[4] = v2;
        v15 = 2048;
        v16 = v8;
        v17 = 1024;
        v18 = Error;
        v19 = 2081;
        v20 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::clearPrevalentResource: failed to step statement", buf, 0x26u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v11);
  }
  v5 = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  }
  else if (!v12)
  {
    goto LABEL_13;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
LABEL_13:
  v6 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, a1 + 3);
  WTF::RunLoop::main(v6);
  WTF::RunLoop::dispatch();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfathered(WebCore::RegistrableDomain &&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C2028;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfathered(WebCore::RegistrableDomain &&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C2028;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfathered(WebCore::RegistrableDomain &&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebCore::SQLiteStatement **v2;
  WTF::RunLoop *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 24);
  if (v2)
    WebKit::ResourceLoadStatisticsStore::setGrandfathered(v2, (const WebCore::RegistrableDomain *)(a1 + 2));
  v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, a1 + 4);
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34C2050;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C2050;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

WebCore::SQLiteStatement *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::SQLiteStatement **v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::SQLiteStatement *result;
  WebCore::SQLiteStatement *v6;

  v2 = *(WebCore::SQLiteStatement ***)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 60, (uint64_t)"isGrandfathered", (WebCore::SQLiteStatementAutoResetScope *)&v6);
    LOBYTE(v2) = WebKit::ResourceLoadStatisticsStore::predicateValueForDomain((WebKit::ResourceLoadStatisticsStore *)v2, &v6, *(const WebCore::RegistrableDomain **)(a1 + 24)) != 0;
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v6);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C2078;
  *(_BYTE *)(v4 + 8) = (_BYTE)v2;
  *(_QWORD *)(v4 + 16) = v3;
  v6 = (WebCore::SQLiteStatement *)v4;
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::RunLoop::dispatch();
  result = v6;
  v6 = 0;
  if (result)
    return (WebCore::SQLiteStatement *)(*(uint64_t (**)(WebCore::SQLiteStatement *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C2078;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2078;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::isGrandfathered(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34C20A0;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34C20A0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebKit::DatabaseUtilities *v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::ASCIICaseInsensitiveHash *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  uint64_t result;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v15[3];
  WTF::ASCIICaseInsensitiveHash *v16[2];

  v16[1] = *(WTF::ASCIICaseInsensitiveHash **)MEMORY[0x1E0C80C00];
  v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 24);
  if (!v2)
    goto LABEL_20;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)&v13);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setSubframeUnderTopFrameDomain");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (WTF::StringImpl *)v15[0];
    v12 = v15[0];
    v5 = (WTF::ASCIICaseInsensitiveHash *)a1[4];
    if (v5)
      *(_DWORD *)v5 += 2;
    v16[0] = v5;
    v11 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v11, v16, (uint64_t)v15);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v12, (uint64_t *)&v11);
    if (v11)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v6);
    v7 = v16[0];
    v16[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v6);
        if (!v4)
          goto LABEL_16;
LABEL_13:
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v6);
        else
          *(_DWORD *)v4 -= 2;
        goto LABEL_16;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v4)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_16:
  v8 = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  else if (!v13)
  {
    goto LABEL_20;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_20:
  v9 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v15, a1 + 2);
  WTF::RunLoop::main(v9);
  WTF::RunLoop::dispatch();
  result = v15[0];
  v15[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34C20C8;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34C20C8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebKit::DatabaseUtilities *v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::ASCIICaseInsensitiveHash *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  uint64_t result;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v15[3];
  WTF::ASCIICaseInsensitiveHash *v16[2];

  v16[1] = *(WTF::ASCIICaseInsensitiveHash **)MEMORY[0x1E0C80C00];
  v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 24);
  if (!v2)
    goto LABEL_20;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)&v13);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setSubresourceUnderTopFrameDomain");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (WTF::StringImpl *)v15[0];
    v12 = v15[0];
    v5 = (WTF::ASCIICaseInsensitiveHash *)a1[4];
    if (v5)
      *(_DWORD *)v5 += 2;
    v16[0] = v5;
    v11 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v11, v16, (uint64_t)v15);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v12, (uint64_t *)&v11);
    if (v11)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v6);
    v7 = v16[0];
    v16[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v6);
        if (!v4)
          goto LABEL_16;
LABEL_13:
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v6);
        else
          *(_DWORD *)v4 -= 2;
        goto LABEL_16;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v4)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_16:
  v8 = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  else if (!v13)
  {
    goto LABEL_20;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_20:
  v9 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v15, a1 + 2);
  WTF::RunLoop::main(v9);
  WTF::RunLoop::dispatch();
  result = v15[0];
  v15[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34C20F0;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34C20F0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebKit::DatabaseUtilities *v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::ASCIICaseInsensitiveHash *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  uint64_t result;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v15[3];
  WTF::ASCIICaseInsensitiveHash *v16[2];

  v16[1] = *(WTF::ASCIICaseInsensitiveHash **)MEMORY[0x1E0C80C00];
  v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 24);
  if (!v2)
    goto LABEL_20;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)&v13);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setSubresourceUniqueRedirectTo");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (WTF::StringImpl *)v15[0];
    v12 = v15[0];
    v5 = (WTF::ASCIICaseInsensitiveHash *)a1[4];
    if (v5)
      *(_DWORD *)v5 += 2;
    v16[0] = v5;
    v11 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v11, v16, (uint64_t)v15);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v12, (uint64_t *)&v11);
    if (v11)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v6);
    v7 = v16[0];
    v16[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v6);
        if (!v4)
          goto LABEL_16;
LABEL_13:
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v6);
        else
          *(_DWORD *)v4 -= 2;
        goto LABEL_16;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v4)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_16:
  v8 = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  else if (!v13)
  {
    goto LABEL_20;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_20:
  v9 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v15, a1 + 2);
  WTF::RunLoop::main(v9);
  WTF::RunLoop::dispatch();
  result = v15[0];
  v15[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34C2118;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34C2118;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebKit::DatabaseUtilities *v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::ASCIICaseInsensitiveHash *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  uint64_t result;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v15[3];
  WTF::ASCIICaseInsensitiveHash *v16[2];

  v16[1] = *(WTF::ASCIICaseInsensitiveHash **)MEMORY[0x1E0C80C00];
  v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 24);
  if (!v2)
    goto LABEL_20;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)&v13);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setSubresourceUniqueRedirectFrom");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (WTF::StringImpl *)v15[0];
    v12 = v15[0];
    v5 = (WTF::ASCIICaseInsensitiveHash *)a1[4];
    if (v5)
      *(_DWORD *)v5 += 2;
    v16[0] = v5;
    v11 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v11, v16, (uint64_t)v15);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v12, (uint64_t *)&v11);
    if (v11)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v6);
    v7 = v16[0];
    v16[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v6);
        if (!v4)
          goto LABEL_16;
LABEL_13:
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v6);
        else
          *(_DWORD *)v4 -= 2;
        goto LABEL_16;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v4)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_16:
  v8 = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  else if (!v13)
  {
    goto LABEL_20;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_20:
  v9 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v15, a1 + 2);
  WTF::RunLoop::main(v9);
  WTF::RunLoop::dispatch();
  result = v15[0];
  v15[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34C2140;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34C2140;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebKit::DatabaseUtilities *v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::ASCIICaseInsensitiveHash *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::ASCIICaseInsensitiveHash *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::RunLoop *v13;
  uint64_t result;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[3];
  WTF::ASCIICaseInsensitiveHash *v20[2];

  v20[1] = *(WTF::ASCIICaseInsensitiveHash **)MEMORY[0x1E0C80C00];
  v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 24);
  if (!v2)
    goto LABEL_33;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)&v17);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setTopFrameUniqueRedirectTo");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (WTF::StringImpl *)v19[0];
    v16 = v19[0];
    v5 = (WTF::ASCIICaseInsensitiveHash *)a1[4];
    if (v5)
      *(_DWORD *)v5 += 2;
    v20[0] = v5;
    v15 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v15, v20, (uint64_t)v19);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v16, (uint64_t *)&v15);
    if (v15)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v6);
    v7 = v20[0];
    v20[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v6);
        if (!v4)
          goto LABEL_16;
LABEL_13:
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v6);
        else
          *(_DWORD *)v4 -= 2;
LABEL_16:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v8 = (WTF::StringImpl *)v19[0];
        v16 = v19[0];
        v9 = (WTF::ASCIICaseInsensitiveHash *)a1[4];
        if (v9)
          *(_DWORD *)v9 += 2;
        v20[0] = v9;
        v15 = 0;
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v15, v20, (uint64_t)v19);
        WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v16, (uint64_t *)&v15);
        if (v15)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v10);
        v11 = v20[0];
        v20[0] = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, v10);
            if (!v8)
              goto LABEL_29;
LABEL_26:
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v10);
            else
              *(_DWORD *)v8 -= 2;
            goto LABEL_29;
          }
          *(_DWORD *)v11 -= 2;
        }
        if (!v8)
          goto LABEL_29;
        goto LABEL_26;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v4)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_29:
  v12 = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  }
  else if (!v17)
  {
    goto LABEL_33;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_33:
  v13 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v19, a1 + 2);
  WTF::RunLoop::main(v13);
  WTF::RunLoop::dispatch();
  result = v19[0];
  v19[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34C2168;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34C2168;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebKit::DatabaseUtilities *v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::ASCIICaseInsensitiveHash *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  uint64_t result;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v15[3];
  WTF::ASCIICaseInsensitiveHash *v16[2];

  v16[1] = *(WTF::ASCIICaseInsensitiveHash **)MEMORY[0x1E0C80C00];
  v2 = *(WebKit::DatabaseUtilities **)(a1[1] + 24);
  if (!v2)
    goto LABEL_20;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary(v2, (uint64_t)&v13);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)v2, (const WebCore::RegistrableDomain *)(a1 + 3), (uint64_t)"setTopFrameUniqueRedirectFrom");
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (WTF::StringImpl *)v15[0];
    v12 = v15[0];
    v5 = (WTF::ASCIICaseInsensitiveHash *)a1[4];
    if (v5)
      *(_DWORD *)v5 += 2;
    v16[0] = v5;
    v11 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v11, v16, (uint64_t)v15);
    WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList((uint64_t)v2, &v12, (uint64_t *)&v11);
    if (v11)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v6);
    v7 = v16[0];
    v16[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v6);
        if (!v4)
          goto LABEL_16;
LABEL_13:
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v6);
        else
          *(_DWORD *)v4 -= 2;
        goto LABEL_16;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v4)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_16:
  v8 = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  else if (!v13)
  {
    goto LABEL_20;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_20:
  v9 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v15, a1 + 2);
  WTF::RunLoop::main(v9);
  WTF::RunLoop::dispatch();
  result = v15[0];
  v15[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C2190;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2190;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  WTF::RunLoop *v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v2 = (uint64_t *)(a1 + 16);
  if (v1)
  {
    v3 = *v2;
    *v2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E34C21B8;
    v4[1] = v3;
    v7 = v4;
    WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(v1, (uint64_t *)&v7);
    result = (uint64_t)v7;
    if (!v7)
      return result;
  }
  else
  {
    v6 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, v2);
    WTF::RunLoop::main(v6);
    WTF::RunLoop::dispatch();
    result = (uint64_t)v7;
    v7 = 0;
    if (!result)
      return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C21B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C21B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF::RunLoop *v1;
  uint64_t result;
  uint64_t v3;

  v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 8));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **v3;

  *a1 = &off_1E34C21E0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;

  *(_QWORD *)this = &off_1E34C21E0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 **v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  WTF::RunLoop *v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  WTF::RunLoop *v20;
  unsigned __int8 **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  unsigned __int8 **v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t result;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  NSObject *v45;
  WTF::RunLoop *v46;
  uint64_t v47;
  _BYTE v48[16];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52[2];
  _QWORD *v53;
  _BYTE buf[24];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::RunLoop *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v2 + 24))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E34C2208;
    v4[1] = v3;
    v5 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v4;
    v6 = *(_QWORD **)(v2 + 24);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v7);
    v8 = *(_BYTE *)(a1 + 24);
    do
      v9 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v9 + 1, (unsigned int *)v5));
    v10 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v10 = off_1E34C2230;
    *(_QWORD *)(v10 + 8) = v2;
    *(_QWORD *)(v10 + 16) = v7;
    *(_BYTE *)(v10 + 24) = v8;
    *(_QWORD *)(v10 + 32) = v5;
    WebCore::SQLiteDatabase::clearAllTables((WebCore::SQLiteDatabase *)(v6 + 2));
    if (!WebKit::ResourceLoadStatisticsStore::createSchema((WebKit::ResourceLoadStatisticsStore *)v6))
    {
      v11 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v47 = v6[81];
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v47;
        _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::clearDatabaseContents: failed to create schema", buf, 0x16u);
      }
    }
    v12 = WTF::fastMalloc((WTF *)0x10);
    v13 = (unsigned int *)v12;
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = v10;
    do
      v14 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v14 + 1, (unsigned int *)v12));
    v15 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v15 = off_1E34C1380;
    *((_QWORD *)v15 + 1) = v13;
    WTF::RunLoop::main(v15);
    v16 = (unsigned __int8 **)v6[13];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v16);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v17 = &off_1E34C1010;
    v17[1] = v16;
    v17[2] = v15;
    *(_QWORD *)buf = v17;
    WTF::RunLoop::dispatch();
    v18 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    WebKit::ResourceLoadStatisticsStore::ensurePrevalentResourcesForDebugMode(v52, v6);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v48, (uint64_t)v52);
    v51 = 0;
    v49 = 0u;
    v50 = 0u;
    do
      v19 = __ldaxr(v13);
    while (__stlxr(v19 + 1, v13));
    v20 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = off_1E34C13A8;
    *((_QWORD *)v20 + 1) = v13;
    WTF::RunLoop::main(v20);
    v21 = (unsigned __int8 **)v6[13];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v21);
    *(_QWORD *)buf = v21;
    WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy(&buf[8], (uint64_t)v48);
    v60 = v20;
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x50);
    *v22 = off_1E34C0F70;
    v22[1] = *(_QWORD *)buf;
    v23 = *(_QWORD *)&buf[8];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v22[2] = v23;
    v24 = *(_QWORD *)&buf[16];
    *(_QWORD *)&buf[16] = 0;
    v22[3] = v24;
    v25 = v55;
    v55 = 0;
    v22[4] = v25;
    v26 = v56;
    v56 = 0;
    v22[5] = v26;
    v27 = v57;
    v57 = 0;
    v22[6] = v27;
    v28 = v58;
    v58 = 0;
    v22[7] = v28;
    v29 = v59;
    v59 = 0;
    v22[8] = v29;
    v22[9] = v20;
    v53 = v22;
    WTF::RunLoop::dispatch();
    v31 = v53;
    v53 = 0;
    if (v31)
      (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    v60 = 0;
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v30);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v32);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf[8], v33);
    v35 = *(unsigned __int8 ***)buf;
    *(_QWORD *)buf = 0;
    if (v35)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v35);
    if (v51)
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v51, v34);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v34);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v36);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v37);
    result = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52, v38);
    do
    {
      v40 = __ldaxr(v13);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v13));
    if (!v41)
    {
      atomic_store(1u, v13);
      *(_QWORD *)buf = v13;
      result = WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
    }
    v42 = *(_QWORD *)(v2 + 24);
    if (*(_BYTE *)(v42 + 272))
      *(_BYTE *)(v42 + 272) = 0;
    do
    {
      v43 = __ldaxr((unsigned int *)v5);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, (unsigned int *)v5));
    if (!v44)
    {
      atomic_store(1u, (unsigned int *)v5);
      *(_QWORD *)buf = v5;
      return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v45 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_196BCC000, v45, OS_LOG_TYPE_DEFAULT, "WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent Before being cleared, m_statisticsStore is null when trying to grandfather data.", buf, 2u);
      }
    }
    v46 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, (uint64_t *)(a1 + 32));
    WTF::RunLoop::main(v46);
    WTF::RunLoop::dispatch();
    result = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2208;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2208;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF::RunLoop *v1;
  uint64_t result;
  uint64_t v3;

  v1 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, (uint64_t *)(a1 + 8));
  WTF::RunLoop::main(v1);
  WTF::RunLoop::dispatch();
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(uint64_t a1)
{
  unsigned __int8 **v2;

  *(_QWORD *)a1 = off_1E34C2230;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 32));
  v2 = *(unsigned __int8 ***)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v2);
  return a1;
}

{
  void *v2;
  unsigned __int8 **v3;

  *(_QWORD *)a1 = off_1E34C2230;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 32));
  v3 = *(unsigned __int8 ***)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  uint8_t v6[8];
  _QWORD *v7;

  if (*(_BYTE *)(a1 + 24))
  {
    v1 = *(_QWORD *)(a1 + 8);
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v4 = off_1E34C2258;
      v4[1] = v3;
      v7 = v4;
      WebKit::ResourceLoadStatisticsStore::grandfatherExistingWebsiteData(v2, (uint64_t *)&v7);
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      *(_BYTE *)(*(_QWORD *)(v1 + 24) + 711) = 1;
    }
    else
    {
      v5 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent After being cleared, m_statisticsStore is null when trying to grandfather data.", v6, 2u);
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C2258;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(WebKit::ShouldGrandfatherStatistics,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#2}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34C2258;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C2280;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2280;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebCore::SQLiteStatement **v3;
  WebCore::SQLiteStatement **v4;
  WebCore::SQLiteStatement **v5;
  WebCore::SQLiteStatement **v6;
  WebCore::SQLiteStatement **v7;
  WebCore::SQLiteStatement **v8;
  NSObject *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int Error;
  uint64_t ErrorMsg;
  const char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE buf[12];
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (!v2)
  {
    v14 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v3 = (WebCore::SQLiteStatement **)(v2 + 560);
  WebKit::DatabaseUtilities::scopedStatement(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (WebCore::SQLiteStatement **)(v2 + 560), (uint64_t)"domainIDExistsInDatabase", (WebCore::SQLiteStatementAutoResetScope *)&v27);
  v4 = (WebCore::SQLiteStatement **)(v2 + 568);
  WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 568), (uint64_t)"domainIDExistsInDatabase linkDecorationExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v26);
  v5 = (WebCore::SQLiteStatement **)(v2 + 576);
  WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 576), (uint64_t)"domainIDExistsInDatabase subFrameExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v25);
  v6 = (WebCore::SQLiteStatement **)(v2 + 584);
  WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 584), (uint64_t)"domainIDExistsInDatabase subResourceExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v24);
  v7 = (WebCore::SQLiteStatement **)(v2 + 592);
  WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 592), (uint64_t)"domainIDExistsInDatabase uniqueRedirectExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v23);
  v8 = (WebCore::SQLiteStatement **)(v2 + 600);
  WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 600), (uint64_t)"domainIDExistsInDatabase observedDomainsExistsStatement", (WebCore::SQLiteStatementAutoResetScope *)&v22);
  if (!v27
    || !v26
    || !v25
    || !v24
    || !v23
    || !v22
    || WebCore::SQLiteStatement::bindInt(*v3)
    || WebCore::SQLiteStatement::bindInt(*v3)
    || WebCore::SQLiteStatement::bindInt(*v4)
    || WebCore::SQLiteStatement::bindInt(*v4)
    || WebCore::SQLiteStatement::bindInt(*v5)
    || WebCore::SQLiteStatement::bindInt(*v5)
    || WebCore::SQLiteStatement::bindInt(*v6)
    || WebCore::SQLiteStatement::bindInt(*v6)
    || WebCore::SQLiteStatement::bindInt(*v7)
    || WebCore::SQLiteStatement::bindInt(*v7)
    || WebCore::SQLiteStatement::bindInt(*v8))
  {
    v9 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v15 = *(_QWORD *)(v2 + 648);
    Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
    *(_DWORD *)buf = 134218755;
    *(_QWORD *)&buf[4] = v2;
    v29 = 2048;
    v30 = v15;
    v31 = 1024;
    v32 = Error;
    v33 = 2081;
    v34 = ErrorMsg;
    v18 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::domainIDExistsInDatabase: "
          "failed to bind parameters";
LABEL_26:
    _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, v18, buf, 0x26u);
    goto LABEL_20;
  }
  if (WebCore::SQLiteStatement::step(*v3) == 100
    && WebCore::SQLiteStatement::step(*v4) == 100
    && WebCore::SQLiteStatement::step(*v5) == 100
    && WebCore::SQLiteStatement::step(*v6) == 100
    && WebCore::SQLiteStatement::step(*v7) == 100
    && WebCore::SQLiteStatement::step(*v8) == 100)
  {
    v10 = WebCore::SQLiteStatement::columnInt(*v3)
       || WebCore::SQLiteStatement::columnInt(*v4)
       || WebCore::SQLiteStatement::columnInt(*v5)
       || WebCore::SQLiteStatement::columnInt(*v6)
       || WebCore::SQLiteStatement::columnInt(*v7)
       || WebCore::SQLiteStatement::columnInt(*v8) != 0;
    goto LABEL_21;
  }
  v9 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    v19 = *(_QWORD *)(v2 + 648);
    v20 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
    v21 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
    *(_DWORD *)buf = 134218755;
    *(_QWORD *)&buf[4] = v2;
    v29 = 2048;
    v30 = v19;
    v31 = 1024;
    v32 = v20;
    v33 = 2081;
    v34 = v21;
    v18 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::domainIDExistsInDatabase: "
          "failed to step statement";
    goto LABEL_26;
  }
LABEL_20:
  v10 = 0;
LABEL_21:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v22);
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v23);
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v24);
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v25);
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v26);
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v27);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v12 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v12 = &off_1E34C22A8;
  *(_BYTE *)(v12 + 8) = v10;
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)buf = v12;
  WTF::RunLoop::main((WTF::RunLoop *)v12);
  WTF::RunLoop::dispatch();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C22A8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C22A8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C22D0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C22D0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::RunLoop *v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(a1[1] + 24);
  if (v1)
  {
    v2 = a1[2];
    if (!*(_BYTE *)(v1 + 160))
      *(_BYTE *)(v1 + 160) = 1;
    *(_QWORD *)(v1 + 152) = v2;
  }
  v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, a1 + 3);
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C22F8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C22F8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  WTF::RunLoop *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1[1] + 24);
  if (v1)
    *(_QWORD *)(v1 + 168) = a1[2];
  v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, a1 + 3);
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C2320;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2320;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  WTF::RunLoop *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1[1] + 24);
  if (v1)
    *(_QWORD *)(v1 + 176) = a1[2];
  v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, a1 + 3);
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::SetDomainsWithCrossPageStorageAccess,WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34C2348;
  v3 = a1[2];
  if (v3)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::SetDomainsWithCrossPageStorageAccess,WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2348;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::SetDomainsWithCrossPageStorageAccess,WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebResourceLoadStatisticsStore::callUpdatePrevalentDomainsToBlockCookiesForHandler(WebKit::RegistrableDomainsToBlockCookiesFor const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=((uint64_t *)(*(_QWORD *)(a1 + 8) + 88), (uint64_t *)(a1 + 16));
}

uint64_t *WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=(uint64_t *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, v3);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C2370;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2370;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  WTF::RunLoop *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1[1] + 24);
  if (v1)
    *(_QWORD *)(v1 + 144) = a1[2];
  v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, a1 + 3);
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C2398;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2398;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(unsigned long,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  WTF::RunLoop *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1[1] + 24);
  if (v1)
    *(_QWORD *)(v1 + 136) = a1[2];
  v2 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, a1 + 3);
  WTF::RunLoop::main(v2);
  WTF::RunLoop::dispatch();
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C23C0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C23C0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::RunLoop *v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v3)
  {
    *(_OWORD *)(v3 + 136) = xmmword_1978CF790;
    *(_BYTE *)(v3 + 152) = 0;
    *(_BYTE *)(v3 + 160) = 0;
    *(_OWORD *)(v3 + 168) = xmmword_1978CF7A0;
    *(int64x2_t *)(v3 + 184) = vdupq_n_s64(0x4122750000000000uLL);
    *(_OWORD *)(v3 + 200) = xmmword_1978CF7B0;
    *(_QWORD *)(v3 + 216) = 10;
    *(_WORD *)(v3 + 224) = 256;
    *(_BYTE *)(v3 + 226) = 0;
    v4 = *(WTF::StringImpl ***)(v3 + 296);
    if (v4)
    {
      *(_QWORD *)(v3 + 296) = 0;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    }
    *(_QWORD *)(v3 + 640) = 0;
    *(_DWORD *)(v3 + 656) = 0;
    if (*(_BYTE *)(v3 + 688))
      *(_BYTE *)(v3 + 688) = 0;
    if (*(_BYTE *)(v3 + 672))
      *(_BYTE *)(v3 + 672) = 0;
  }
  v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)(a1 + 16));
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(WebCore::RegistrableDomain,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C23E8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(WebCore::RegistrableDomain,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C23E8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(WebCore::RegistrableDomain,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  WTF::RunLoop *v5;
  uint64_t result;
  uint64_t v7;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v10;
  _BYTE buf[12];
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 24);
  if (v3
    && (unint64_t)WebKit::ResourceLoadStatisticsStore::domainID(*(WebCore::SQLiteStatement ***)(v2 + 24), (const WebCore::RegistrableDomain *)(a1 + 2)) >> 32)
  {
    WebKit::DatabaseUtilities::scopedStatement(v3, (WebCore::SQLiteStatement **)(v3 + 608), (uint64_t)"removeDataForDomain", (WebCore::SQLiteStatementAutoResetScope *)&v10);
    if (!v10
      || WebCore::SQLiteStatement::bindInt(v10)
      || WebCore::SQLiteStatement::step(v10) != 101)
    {
      v4 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v7 = *(_QWORD *)(v3 + 648);
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v3 + 16));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 16));
        *(_DWORD *)buf = 134218755;
        *(_QWORD *)&buf[4] = v3;
        v12 = 2048;
        v13 = v7;
        v14 = 1024;
        v15 = Error;
        v16 = 2081;
        v17 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::removeDataForDomain: failed to step statement", buf, 0x26u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v10);
  }
  v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, a1 + 3);
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C2410;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2410;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebCore::SQLiteStatement *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  void *v15;
  WTF::StringImpl *v16;
  void *v17;
  WebCore::SQLiteStatement *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 520), (uint64_t)"allDomains", (WebCore::SQLiteStatementAutoResetScope *)&v19);
    v3 = v19;
    v22 = 0;
    v23 = 0;
    if (v19)
    {
      while (WebCore::SQLiteStatement::step(v3) == 100)
      {
        WebCore::SQLiteStatement::columnText(v19);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v24, &v25);
        LODWORD(v5) = HIDWORD(v23);
        if (HIDWORD(v23) == (_DWORD)v23)
        {
          v9 = (uint64_t *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v25);
          v5 = HIDWORD(v23);
          v10 = v22;
          v11 = *v9;
          *v9 = 0;
          *(_QWORD *)(v10 + 8 * v5) = v11;
        }
        else
        {
          v6 = v25;
          v25 = 0;
          *(_QWORD *)(v22 + 8 * HIDWORD(v23)) = v6;
        }
        HIDWORD(v23) = v5 + 1;
        v7 = v25;
        v25 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v4);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = v24;
        v24 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v4);
          else
            *(_DWORD *)v8 -= 2;
        }
        v3 = v19;
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v19);
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)&v19, (uint64_t)&v22);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v21 = v12;
  v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v13 = off_1E34C2438;
  *((_QWORD *)v13 + 1) = v19;
  v14 = v20;
  v19 = 0;
  v20 = 0;
  *((_QWORD *)v13 + 2) = v14;
  *((_QWORD *)v13 + 3) = v12;
  v25 = v13;
  WTF::RunLoop::main(v13);
  WTF::RunLoop::dispatch();
  v16 = v25;
  v25 = 0;
  if (v16)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
  v21 = 0;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v15);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v17);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34C2438;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34C2438;
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomains(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C2460;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2460;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  const WTF::StringImpl *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl **result;
  uint64_t v29;
  WTF::StringImpl **v30;
  char v31;
  unsigned int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  char v36;

  v1 = *(_QWORD *)(a1 + 8);
  LOBYTE(v35) = 0;
  v36 = 0;
  if (*(_QWORD *)(v1 + 24))
  {
    v29 = a1;
    v35 = 0;
    WebKit::ResourceLoadStatisticsStore::domains((WebKit::ResourceLoadStatisticsStore *)&v30);
    if (v32)
    {
      v3 = v30;
      v4 = &v30[5 * v32];
      while (1)
      {
        if (*((double *)v3 + 2) >= *((double *)v3 + 3))
          v5 = v3[2];
        else
          v5 = v3[3];
        v6 = v35;
        if (v35
          || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&v35, 0), (v6 = v35) != 0))
        {
          v7 = *((_DWORD *)v6 - 2);
        }
        else
        {
          v7 = 0;
        }
        v8 = WTF::ASCIICaseInsensitiveHash::hash(v3[1], v2) & v7;
        v9 = (uint64_t)&v6[2 * v8];
        if ((WTF::equal(*(WTF **)v9, 0, v10) & 1) == 0)
        {
          v12 = 0;
          v13 = 1;
          while (1)
          {
            v14 = (_QWORD *)v9;
            if (*(_QWORD *)v9 != -1)
            {
              v14 = v12;
              if ((WTF::equalIgnoringASCIICase(*(WTF **)v9, v3[1], v11) & 1) != 0)
                goto LABEL_26;
            }
            v8 = (v8 + v13) & v7;
            v9 = (uint64_t)&v6[2 * v8];
            ++v13;
            v12 = v14;
            if (WTF::equal(*(WTF **)v9, 0, v11))
            {
              if (v14)
              {
                *v14 = 0;
                v14[1] = 0;
                --*((_DWORD *)v35 - 4);
                v9 = (uint64_t)v14;
              }
              break;
            }
          }
        }
        WTF::String::operator=((WTF::StringImpl **)v9, (WTF::StringImpl *)(v3 + 1));
        *(_QWORD *)(v9 + 8) = v5;
        v15 = v35 ? *((_DWORD *)v35 - 3) + 1 : 1;
        *((_DWORD *)v35 - 3) = v15;
        v16 = v35 ? *((_DWORD *)v35 - 3) : 0;
        v17 = (*((_DWORD *)v35 - 4) + v16);
        v18 = *((unsigned int *)v35 - 1);
        if (v18 > 0x400)
          break;
        if (3 * v18 <= 4 * v17)
          goto LABEL_25;
LABEL_26:
        v3 += 5;
        if (v3 == v4)
          goto LABEL_31;
      }
      if (v18 > 2 * v17)
        goto LABEL_26;
LABEL_25:
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&v35, v9);
      goto LABEL_26;
    }
LABEL_31:
    WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v2);
    v19 = 1;
    v36 = 1;
    WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>::copy((uint64_t *)&v35, v20, v21, (uint64_t *)&v30);
    a1 = v29;
  }
  else
  {
    v19 = 0;
    LOBYTE(v30) = 0;
  }
  v31 = v19;
  v22 = *(WTF::StringImpl ***)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v33 = v22;
  v23 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v23 = &off_1E34C2488;
  *(_BYTE *)(v23 + 8) = 0;
  *(_BYTE *)(v23 + 16) = 0;
  if (v31)
  {
    v24 = v30;
    v30 = 0;
    *(_QWORD *)(v23 + 8) = v24;
    *(_BYTE *)(v23 + 16) = 1;
  }
  v25 = v33;
  v33 = 0;
  v34 = v23;
  *(_QWORD *)(v23 + 24) = v25;
  WTF::RunLoop::main((WTF::RunLoop *)v23);
  WTF::RunLoop::dispatch();
  v27 = v34;
  v34 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  result = v33;
  v33 = 0;
  if (result)
    result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
  if (v31)
  {
    result = v30;
    if (v30)
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v26);
  }
  if (v36)
  {
    result = v35;
    if (v35)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v35, v26);
  }
  return result;
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD v16[2];

  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, a2, a3);
  v16[0] = result;
  v16[1] = v7;
  v8 = *a1;
  if (*a1)
    v9 = v8 + 16 * *(unsigned int *)(v8 - 4);
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      WebCore::RegistrableDomain::isolatedCopy(&v15);
      v12 = v15;
      v15 = 0;
      v13 = *(WTF::StringImpl **)v16[0];
      *(_QWORD *)v16[0] = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v15;
      v15 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v10);
        else
          *(_DWORD *)v14 -= 2;
      }
      v16[0] += 16;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v16, (uint64_t)v10, v11);
      result = v16[0];
    }
    while (v16[0] != v9);
    v8 = *a1;
  }
  *a1 = 0;
  *a4 = v8;
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = *a1;
  if (*a1)
    v4 = *(unsigned int *)(v3 - 4);
  else
    v4 = 0;
  v6[0] = a2;
  v6[1] = v3 + 16 * v4;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v6, a2, a3);
  return v6[0];
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *(_QWORD *)a1 = &off_1E34C2488;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 16))
  {
    v4 = *(WTF::StringImpl ***)(a1 + 8);
    if (v4)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *(_QWORD *)this = &off_1E34C2488;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((_BYTE *)this + 16))
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    if (v4)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **result;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  char v7;

  v2 = (uint64_t *)(a1 + 24);
  LOBYTE(v6) = 0;
  v7 = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WTF::StringImpl ***)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v6 = v3;
    v7 = 1;
  }
  result = (WTF::StringImpl **)WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(v2, (uint64_t)&v6);
  if (v7)
  {
    result = v6;
    if (v6)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C24B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C24B0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::RunLoop *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::RunLoop *v8;
  uint64_t v9;
  WTF::StringImpl **result;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::RunLoop *v13;
  WTF::StringImpl **v14;

  v2 = *(_QWORD *)(a1 + 8);
  v14 = 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
    WebKit::ResourceLoadStatisticsStore::domainsExemptFromWebsiteDataDeletion((WebKit::ResourceLoadStatisticsStore *)&v14, v3);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy((uint64_t *)&v14, (uint64_t *)&v11);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v12 = v4;
  v5 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34C24D8;
  *((_QWORD *)v5 + 1) = v11;
  v6 = v12;
  v11 = 0;
  v12 = 0;
  *((_QWORD *)v5 + 2) = v6;
  v13 = v5;
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  v8 = v13;
  v13 = 0;
  if (v8)
    (*(void (**)(WTF::RunLoop *))(*(_QWORD *)v8 + 8))(v8);
  v9 = v12;
  v12 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v7);
  result = v14;
  if (v14)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *a1 = &off_1E34C24D8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)a1[1];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *(_QWORD *)this = &off_1E34C24D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 1);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C2500;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C2500;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::RunLoop *v6;
  void *v7;
  WTF::RunLoop *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  WTF::RunLoop *v12;
  _QWORD v13[3];
  WTF::RunLoop *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    WebKit::ResourceLoadStatisticsStore::aggregatedThirdPartyData((WebKit::ResourceLoadStatisticsStore *)&v15, v2);
    v3 = v15;
    v15 = 0;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v5 = v16;
    v16 = 0;
    v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v6 = off_1E34C2550;
    *((_QWORD *)v6 + 1) = v3;
    v13[0] = 0;
    v13[1] = 0;
    *((_QWORD *)v6 + 2) = v5;
    *((_QWORD *)v6 + 3) = v4;
    v14 = v6;
    WTF::RunLoop::main(v6);
    WTF::RunLoop::dispatch();
    v8 = v14;
    v14 = 0;
    if (v8)
      (*(void (**)(WTF::RunLoop *))(*(_QWORD *)v8 + 8))(v8);
    v13[2] = 0;
    WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v7);
    return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v9);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v12 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = &off_1E34C2528;
    *((_QWORD *)v12 + 1) = v11;
    v13[0] = v12;
    WTF::RunLoop::main(v12);
    WTF::RunLoop::dispatch();
    result = v13[0];
    v13[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2528;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2528;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34C2550;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34C2550;
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(WebCore::RegistrableDomain &&,unsigned int,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C2578;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(WebCore::RegistrableDomain &&,unsigned int,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C2578;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(WebCore::RegistrableDomain &&,unsigned int,BOOL,BOOL,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  WTF::WallTime *v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  WTF *v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  WTF::RunLoop *v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int Error;
  uint64_t ErrorMsg;
  const char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  WebCore::SQLiteStatement *v27[2];
  unsigned int v28;
  uint64_t v29;
  char v30;
  _BYTE buf[12];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (!v2)
    goto LABEL_40;
  v3 = *(_DWORD *)(a1 + 24);
  v4 = (WTF::WallTime *)WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)&v29);
  if (!v3)
  {
    v11 = -86400.0;
LABEL_22:
    WebKit::ResourceLoadStatisticsStore::updateOperatingDatesParameters((WebKit::ResourceLoadStatisticsStore *)v2);
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 320), (uint64_t)"insertExpiredStatisticForTesting", (WebCore::SQLiteStatementAutoResetScope *)v27);
    if (WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::bindDouble(v27[0], v11)
      || WebCore::SQLiteStatement::bindInt(v27[0])
      || WebCore::SQLiteStatement::bindDouble(v27[0], v11)
      || WebCore::SQLiteStatement::bindInt(v27[0])
      || WebCore::SQLiteStatement::bindInt(v27[0])
      || WebCore::SQLiteStatement::bindInt(v27[0])
      || WebCore::SQLiteStatement::bindInt(v27[0])
      || WebCore::SQLiteStatement::bindInt(v27[0])
      || WebCore::SQLiteStatement::bindInt(v27[0])
      || WebCore::SQLiteStatement::bindInt(v27[0])
      || WebCore::SQLiteStatement::bindDouble(v27[0], 0.0))
    {
      v13 = qword_1ECE71758;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
LABEL_35:
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v27);
        goto LABEL_36;
      }
      v20 = *(_QWORD *)(v2 + 648);
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = v2;
      v32 = 2048;
      v33 = v20;
      v34 = 1024;
      v35 = Error;
      v36 = 2081;
      v37 = ErrorMsg;
      v23 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertExpiredStatisticFo"
            "rTesting: failed to step scopedInsertObservedDomainStatement";
    }
    else
    {
LABEL_46:
      if (WebCore::SQLiteStatement::step(v27[0]) == 101)
        goto LABEL_35;
      v13 = qword_1ECE71758;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
        goto LABEL_35;
      v24 = *(_QWORD *)(v2 + 648);
      v25 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
      v26 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = v2;
      v32 = 2048;
      v33 = v24;
      v34 = 1024;
      v35 = v25;
      v36 = 2081;
      v37 = v26;
      v23 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertExpiredStatisticFo"
            "rTesting: failed to step statement";
    }
    _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, v23, buf, 0x26u);
    goto LABEL_35;
  }
  v5 = 1;
  v6 = 24;
  while (1)
  {
    v7 = *(double *)(v2 + 640);
    v8 = (WTF *)WTF::WallTime::now(v4);
    v10 = v7 + v9 + (double)v6 * -3600.0;
    WebKit::OperatingDate::fromWallTime(v8, v10);
    WebCore::SQLiteDatabase::prepareStatement();
    if (v28 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v27))
      break;
    if (v28)
      goto LABEL_45;
    if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v27))
      break;
    if (v28)
      goto LABEL_45;
    if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v27))
      break;
    if (v28)
      goto LABEL_45;
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v27) != 101)
      break;
    if (v28)
    {
LABEL_45:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_46;
    }
    v4 = (WTF::WallTime *)WebCore::SQLiteStatement::reset((WebCore::SQLiteStatement *)v27);
    if (v28 != -1)
      v4 = (WTF::WallTime *)(*(&off_1E34C0CF8 + v28))((int)buf, (WebCore::SQLiteStatement *)v27);
    ++v5;
    v6 += 24;
    if (v5 > v3)
    {
      v11 = v10 + -86400.0;
      goto LABEL_22;
    }
  }
  v12 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    v17 = *(_QWORD *)(v2 + 648);
    v18 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(v2 + 16));
    v19 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
    *(_DWORD *)buf = 134218755;
    *(_QWORD *)&buf[4] = v2;
    v32 = 2048;
    v33 = v17;
    v34 = 1024;
    v35 = v18;
    v36 = 2081;
    v37 = v19;
    _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertExpiredStatisticForTesting: failed to step insertOperatingDateStatement", buf, 0x26u);
  }
  if (v28 != -1)
    (*(&off_1E34C0CF8 + v28))((int)buf, (WebCore::SQLiteStatement *)v27);
LABEL_36:
  v14 = v29;
  if (v30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  }
  else if (!v29)
  {
    goto LABEL_40;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_40:
  v15 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(buf, (uint64_t *)(a1 + 32));
  WTF::RunLoop::main(v15);
  WTF::RunLoop::dispatch();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  WTF::StringImpl *v28;
  uint64_t result;
  uint64_t v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_OWORD *)(v7 + 48);
    do
    {
      *(v11 - 2) = 0uLL;
      *(v11 - 1) = 0uLL;
      *v11 = xmmword_1978CF7C0;
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v30 = v5;
    do
    {
      v15 = v4 + 48 * v12;
      if (*(_QWORD *)(v15 + 8) != -1)
      {
        if (*(_OWORD *)v15 == 0 && WTF::equal(*(WTF **)(v15 + 16), 0, v9))
        {
          v16 = *(WTF::StringImpl **)(v15 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v8);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::PairHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>::hash(v4 + 48 * v12);
          for (i = 0; ; v19 = i + v21)
          {
            v21 = v19 & v18;
            v22 = v17 + 48 * (v19 & v18);
            if (*(_OWORD *)v22 == 0 && (WTF::equal(*(WTF **)(v22 + 16), 0, v9) & 1) != 0)
              break;
            ++i;
          }
          v23 = *(WTF::StringImpl **)(v22 + 16);
          *(_QWORD *)(v22 + 16) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v8);
            else
              *(_DWORD *)v23 -= 2;
          }
          *(_OWORD *)v22 = *(_OWORD *)v15;
          v24 = *(_QWORD *)(v15 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v22 + 16) = v24;
          v25 = v17 + 48 * v21;
          v26 = v4 + 48 * v12;
          v27 = *(_OWORD *)(v26 + 24);
          *(_QWORD *)(v25 + 40) = *(_QWORD *)(v26 + 40);
          *(_OWORD *)(v25 + 24) = v27;
          v28 = *(WTF::StringImpl **)(v15 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          v14 = v30;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v8);
            else
              *(_DWORD *)v28 -= 2;
          }
          if (v15 == a3)
            v13 = v22;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

unint64_t WTF::PairHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>::hash(uint64_t a1)
{
  int v2;
  const WTF::StringImpl *v3;
  unsigned int v5;
  __int16 v6;
  char v7;

  v5 = -1640531527;
  v6 = 0;
  v7 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v5, (_QWORD *)a1);
  v2 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v5);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * v2
                           + 95187966
                           * WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)(a1 + 16), v3))) >> 4;
}

BOOL WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::isEmptyOrDeletedBucket(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_OWORD *)a1 == 0)
  {
    if ((WTF::equal(*(WTF **)(a1 + 16), 0, a3) & 1) != 0)
      return 1;
    v3 = *(_QWORD *)(a1 + 8);
  }
  return v3 == -1;
}

uint64_t WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(v2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  return WTF::HashTable<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>>,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashMap<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue,WTF::DefaultHash<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::HashTraits<WebKit::WebResourceLoadStatisticsStore::StorageAccessRequestRecordValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>>::rehash(a1, v4, 0);
}

double WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,std::pair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  double result;

  v3 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = 0.0;
  *(_OWORD *)a1 = xmmword_1978CF7D0;
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebCookieManager::startObservingCookieChanges(PAL::SessionID)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v2 = (unsigned int *)(v1 + 120);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 301;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v12 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v11);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v1 + 16) + 32))(v1 + 16, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    result = (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  do
  {
    v9 = __ldaxr(v2);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v2));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)(v1 + 120));
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C25C8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 30;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C25C8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 30;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebCookieManager::setHTTPCookieAcceptPolicy(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;

  WebKit::NetworkProcess::cookieAcceptPolicyChanged(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C25F0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C25F0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1)
{
  return WebKit::Download::cancel(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,WebKit::Download::IgnoreDidFailCallback)::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::PendingDownload>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::PendingDownload>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = result;
  v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
    result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v27 + 8));
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v30 + 8));
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v16 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Ref<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v20 = *a3;
    *a3 = 0;
    v21 = v16[1];
    v16[1] = v20;
    if (v21)
      result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v21 + 8));
    v22 = *v6;
    if (*v6)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v25 = *v6;
    if (*v6)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
        v16 = result;
        v25 = *v6;
        if (*v6)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v11 = *a2;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v24;
  *(_BYTE *)(a4 + 16) = 0;
  v29 = *a3;
  *a3 = 0;
  v30 = v16[1];
  v16[1] = v29;
  if (v30)
    return (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v30 + 8));
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

void sub_197138ECC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_197139050(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t downloadWrapperMap(void)
{
  uint64_t result;

  if ((_MergedGlobals_68 & 1) != 0)
  {
    result = qword_1ECE72998;
    if (qword_1ECE72998)
      return result;
  }
  else
  {
    qword_1ECE72998 = 0;
    _MergedGlobals_68 = 1;
  }
  WTF::RetainPtr<NSURLSession>::operator=((const void **)&qword_1ECE72998, (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB3748], "weakToWeakObjectsMapTable"));
  return qword_1ECE72998;
}

void sub_197139148(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  CFRelease(*(CFTypeRef *)(v2 + 16));
  _Unwind_Resume(a1);
}

void sub_1971392A0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197139AE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v4 = *(WTF::StringImpl **)(v2 - 72);
  *(_QWORD *)(v2 - 72) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197139D30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197139DE4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

const __CFString *elementActionTypeToUIActionIdentifier(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xF)
    return CFSTR("WKElementActionTypeCustom");
  else
    return off_1E34C27B0[a1 - 1];
}

void sub_19713A2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, CFTypeRef cf)
{
  const void *v14;
  const void *v15;

  if (v14)
    CFRelease(v14);
  CFRelease(v15);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c56_ZTSKZ43___WKElementAction_uiActionForElementInfo__E3__2(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_19713A45C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c56_ZTSKZ43___WKElementAction_uiActionForElementInfo__E3__2(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

void sub_19713A684(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_19713A73C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_19713A994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef cf,uint64_t a37,uint64_t a38,uint64_t a39,int a40,WTF::StringImpl *a41)
{
  uint64_t v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  CFTypeRef v45;

  CFRelease(*(CFTypeRef *)(v41 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  v44 = a41;
  a41 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (a40 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E34C2770[a40])(&a10, &a37);
  a40 = -1;
  v45 = cf;
  cf = 0;
  if (v45)
    CFRelease(v45);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a12);
  _Unwind_Resume(a1);
}

void sub_19713ABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,CFTypeRef cf,uint64_t a41,uint64_t a42,uint64_t a43,int a44,WTF::StringImpl *a45)
{
  _Unwind_Resume(exception_object);
}

void sub_19713AD6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WKDataTaskClient::~WKDataTaskClient(id *this)
{
  objc_destroyWeak(this + 2);
}

{
  void *v2;

  objc_destroyWeak(this + 2);
  WTF::fastFree((WTF *)this, v2);
}

void WKDataTaskClient::didReceiveChallenge(uint64_t a1, uint64_t a2, WebCore *a3, uint64_t *a4)
{
  id *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  id Weak;
  uint64_t v15;
  const WebCore::AuthenticationChallenge *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  CFTypeRef cf;

  v8 = (id *)(a1 + 16);
  if (objc_loadWeak((id *)(a1 + 16)) && (*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v8);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_dataTask_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v22);
    if (WeakRetained)
      CFRelease(WeakRetained);
    Weak = objc_loadWeak(v8);
    v15 = *(_QWORD *)(a2 + 8);
    v17 = WebCore::mac(a3, v16);
    v18 = v22;
    v19 = *a4;
    *a4 = 0;
    v20 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v20 = MEMORY[0x1E0C809A0];
    v20[1] = 50331650;
    v20[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    v20[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::descriptor;
    v20[4] = v18;
    v20[5] = v19;
    objc_msgSend(Weak, "dataTask:didReceiveAuthenticationChallenge:completionHandler:", v15, v17, v20);
    _Block_release(v20);
  }
  else
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v22);
    cf = 0;
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, 3, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v21 = v22;
    v22 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v10);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
}

void sub_19713AFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf)
{
  const void *v12;
  const void *v13;

  v13 = v12;
  _Block_release(v13);
  _Unwind_Resume(a1);
}

void WKDataTaskClient::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, uint64_t a4, uint64_t *a5)
{
  id *v9;
  uint64_t v10;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  id Weak;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v9 = (id *)(a1 + 16);
  if (objc_loadWeak((id *)(a1 + 16)) && (*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v9);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_dataTask_willPerformHTTPRedirection_newRequest_decisionHandler_, &v19);
    if (WeakRetained)
      CFRelease(WeakRetained);
    Weak = objc_loadWeak(v9);
    v13 = *(_QWORD *)(a2 + 8);
    v14 = WebCore::ResourceResponse::nsURLResponse(a3);
    v15 = WebCore::ResourceRequest::nsURLRequest();
    v16 = v19;
    v17 = *a5;
    *a5 = 0;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtr<void ()(_WKDataTaskRedirectPolicy)>::fromCallable<WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1}>(WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1})::{lambda(void *,_WKDataTaskRedirectPolicy)#1}::__invoke;
    v18[3] = &WTF::BlockPtr<void ()(_WKDataTaskRedirectPolicy)>::fromCallable<WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1}>(WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1})::descriptor;
    v18[4] = v16;
    v18[5] = v17;
    objc_msgSend(Weak, "dataTask:willPerformHTTPRedirection:newRequest:decisionHandler:", v13, v14, v15, v18);
    _Block_release(v18);
  }
  else
  {
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

void sub_19713B238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  v11 = v10;
  _Block_release(v11);
  _Unwind_Resume(a1);
}

void WKDataTaskClient::didReceiveResponse(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, uint64_t *a4)
{
  id *v8;
  uint64_t v9;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  id Weak;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v8 = (id *)(a1 + 16);
  if (objc_loadWeak((id *)(a1 + 16)) && (*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v8);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_dataTask_didReceiveResponse_decisionHandler_, &v17);
    if (WeakRetained)
      CFRelease(WeakRetained);
    Weak = objc_loadWeak(v8);
    v12 = *(_QWORD *)(a2 + 8);
    v13 = WebCore::ResourceResponse::nsURLResponse(a3);
    v14 = v17;
    v15 = *a4;
    *a4 = 0;
    v16 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v16 = MEMORY[0x1E0C809A0];
    v16[1] = 50331650;
    v16[2] = WTF::BlockPtr<void ()(_WKDataTaskResponsePolicy)>::fromCallable<WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1}>(WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1})::{lambda(void *,_WKDataTaskResponsePolicy)#1}::__invoke;
    v16[3] = &WTF::BlockPtr<void ()(_WKDataTaskResponsePolicy)>::fromCallable<WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1}>(WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1})::descriptor;
    v16[4] = v14;
    v16[5] = v15;
    objc_msgSend(Weak, "dataTask:didReceiveResponse:decisionHandler:", v12, v13, v16);
    _Block_release(v16);
  }
  else
  {
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void sub_19713B400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  v11 = v10;
  _Block_release(v11);
  _Unwind_Resume(a1);
}

void WKDataTaskClient::didReceiveData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id *v8;
  id Weak;
  uint64_t v10;
  const void *v11;

  v8 = (id *)(a1 + 16);
  if (objc_loadWeak((id *)(a1 + 16)) && (*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    Weak = objc_loadWeak(v8);
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a3, a4);
    objc_msgSend(Weak, "dataTask:didReceiveData:", v10, v11);
    if (v11)
      CFRelease(v11);
  }
}

void sub_19713B524(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WKDataTaskClient::didCompleteWithError(uint64_t a1, uint64_t a2, WebCore::ResourceError *a3)
{
  id *v6;
  id Weak;
  uint64_t v8;
  const void *v9;

  v6 = (id *)(a1 + 16);
  if (objc_loadWeak((id *)(a1 + 16)) && (*(_BYTE *)(a1 + 24) & 0x10) != 0)
  {
    Weak = objc_loadWeak(v6);
    objc_msgSend(Weak, "dataTask:didCompleteWithError:", *(_QWORD *)(a2 + 8), WebCore::ResourceError::nsError(a3));
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(const void **)(v8 + 120);
    *(_QWORD *)(v8 + 120) = 0;
    if (v9)
      CFRelease(v9);
  }
}

unsigned int *WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  WTF::StringImpl *result;
  NSURLSessionAuthChallengeDisposition v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  CFTypeRef cf;

  result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
    v8 = WebKit::toAuthenticationChallengeDisposition(a2, v7);
    MEMORY[0x19AEAC4CC](&v13, a3);
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, unint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, v8, &v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19713B704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (cf)
    CFRelease(cf);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v14);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

unsigned int *WTF::BlockPtr<void ()(_WKDataTaskRedirectPolicy)>::fromCallable<WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1}>(WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKDataTaskRedirectPolicy)>::fromCallable<WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1}>(WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1})::{lambda(void *,_WKDataTaskRedirectPolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, a2 == 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_19713B840(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::BlockPtr<void ()(_WKDataTaskResponsePolicy)>::fromCallable<WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1}>(WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKDataTaskResponsePolicy)>::fromCallable<WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1}>(WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1})::{lambda(void *,_WKDataTaskResponsePolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, a2 == 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_19713B920(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

Class initSSReadingList(void)
{
  Class result;
  void *v1;

  if ((byte_1ECE72991 & 1) == 0)
  {
    v1 = dlopen("/System/Library/Frameworks/SafariServices.framework/SafariServices", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x19713B99CLL);
    }
    *(_QWORD *)algn_1ECE729A8 = v1;
    byte_1ECE72991 = 1;
  }
  result = objc_getClass("SSReadingList");
  qword_1ECE729A0 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getSSReadingListClass = SSReadingListFunction;
  return result;
}

{
  Class result;
  void *v1;

  if ((byte_1ECE72C43 & 1) == 0)
  {
    v1 = dlopen("/System/Library/Frameworks/SafariServices.framework/SafariServices", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x197287DB8);
    }
    unk_1ECE72C50 = v1;
    byte_1ECE72C43 = 1;
  }
  result = objc_getClass("SSReadingList");
  qword_1ECE72C48 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getSSReadingListClass = SSReadingListFunction;
  return result;
}

uint64_t SSReadingListFunction(void)
{
  return qword_1ECE729A0;
}

{
  return qword_1ECE72C48;
}

void API::Feature::~Feature(API::Feature *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  API::Feature::~Feature(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef *v12;

  v2 = result;
  v3 = *((_DWORD *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3)
    return v2;
  if (v3 < 0xD20D21)
  {
    v5 = 312 * v3;
    v6 = WTF::fastMalloc((WTF *)(312 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0x138;
    *(_QWORD *)v2 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = v6;
      v9 = 0;
      v10 = *a2;
      v11 = 312 * v7;
      do
      {
        v12 = WebKit::FrameInfoData::FrameInfoData((CFTypeRef *)(v8 + v9), (const WebKit::FrameInfoData *)(v10 + v9));
        WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v12 + 37, v10 + v9 + 296);
        v9 += 312;
      }
      while (v11 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_19713BBE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  WTF *v15;

  v15 = *(WTF **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)v13 = 0;
    *(_DWORD *)(v13 + 8) = 0;
    WTF::fastFree(v15, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DownloadMap::add(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  char v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  pid_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  NSObject *v38;
  uint64_t v39;
  uint8_t buf[24];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "Adding download %llu to NetworkProcess DownloadMap", buf, 0xCu);
  }
  v9 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v9 = *a1) != 0))
  {
    v10 = 0;
    v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v9 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == a2)
      {
        if ((v10 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v9 - 4);
        v30 = 0;
        v29 = v9 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v11;
      v16 = (uint64_t *)(v9 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = v18;
    }
  }
  *v16 = a2;
  v20 = *a3;
  *a3 = 0;
  v21 = v16[1];
  v16[1] = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v9 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v9 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v9 - 16) + v25);
  v27 = *(unsigned int *)(v9 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_28;
  }
  else if (3 * v27 > 4 * v26)
  {
    goto LABEL_28;
  }
  v28 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v16);
  v16 = v28;
  v9 = *a1;
  if (!*a1)
  {
    *(_QWORD *)a4 = v28;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  v27 = *(unsigned int *)(v9 - 4);
LABEL_28:
  v29 = v9 + 16 * v27;
  v30 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v30;
  if (*(_DWORD *)(v9 - 12) == 1)
  {
    v31 = getpid();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v39 = 0;
    v32 = WTF::fastMalloc((WTF *)0xB0);
    v33 = WebKit::ProcessAssertion::ProcessAssertion(v32, v31, (_DWORD **)buf, 2, MEMORY[0x1E0CBF738]);
    WebKit::ProcessAssertion::acquireAsync(v33, &v39);
    v35 = a1[1];
    a1[1] = v32;
    if (v35)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v35 + 8), v34);
    v36 = v39;
    v39 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v34);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v38, OS_LOG_TYPE_DEFAULT, "Took 'WebKit downloads' assertion in NetworkProcess", buf, 2u);
    }
  }
}

BOOL WebKit::DownloadMap::remove(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  NSObject *v23;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v25 = 134217984;
    v26 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Removing download %llu from NetworkProcess DownloadMap", (uint8_t *)&v25, 0xCu);
  }
  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v6 + 16 * v11);
    if (v12 != a2)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v6 + 16 * v11);
        ++v13;
        if (v12 == a2)
          goto LABEL_11;
      }
      v11 = *(unsigned int *)(v6 - 4);
    }
LABEL_11:
    v15 = *(unsigned int *)(v6 - 4);
    v14 = v11 != v15;
    if (v11 == v15)
      goto LABEL_34;
    v16 = (_QWORD *)(v6 + 16 * v11);
    v17 = v16[1];
    *v16 = -1;
    v16[1] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    ++*(_DWORD *)(*a1 - 16);
    v18 = *a1;
    v19 = *a1 ? *(_DWORD *)(v18 - 12) - 1 : -1;
    *(_DWORD *)(v18 - 12) = v19;
    v6 = *a1;
    if (*a1
      && ((v20 = *(_DWORD *)(v6 - 4), 6 * *(_DWORD *)(v6 - 12) < v20) ? (v21 = v20 >= 9) : (v21 = 0),
          !v21
       || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v20 >> 1, 0), (v6 = *a1) != 0)))
    {
LABEL_34:
      if (*(_DWORD *)(v6 - 12))
        return v14;
    }
    else
    {
      v14 = 1;
    }
  }
  else
  {
    v14 = 0;
  }
  v22 = a1[1];
  a1[1] = 0;
  if (v22)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v22 + 8), v5);
  v23 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v25) = 0;
    _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEFAULT, "Dropped 'WebKit downloads' assertion in NetworkProcess", (uint8_t *)&v25, 2u);
  }
  return v14;
}

WebKit::DownloadMonitor *WebKit::DownloadMonitor::DownloadMonitor(WebKit::DownloadMonitor *this, WebKit::Download *a2)
{
  _QWORD *v3;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 4) = 10;
  WebCore::TimerBase::TimerBase((WebKit::DownloadMonitor *)((char *)this + 200));
  *((_QWORD *)this + 25) = off_1E34B3740;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v3 = off_1E34C2A50;
  v3[1] = WebKit::DownloadMonitor::timerFired;
  v3[2] = 0;
  v3[3] = this;
  *((_QWORD *)this + 31) = v3;
  *((_QWORD *)this + 32) = 0;
  return this;
}

void WebKit::DownloadMonitor::timerFired(WebKit::DownloadMonitor *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[12];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WebKit::DownloadMonitor::downloadReceivedBytes(this, 0);
  v2 = *((_QWORD *)this + 32);
  if (v2 >= 9)
  {
    __break(0xC471u);
    JUMPOUT(0x19713C544);
  }
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = 0.0;
  if (v3 != v4)
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 3);
    v8 = *((unsigned int *)this + 8);
    v9 = *((_QWORD *)this + 1);
    do
    {
      v10 = *(_QWORD *)(v7 + 16 * v9 + 8);
      v9 += v8 + 1;
      do
        v9 -= v8;
      while (v9 >= v8);
      v6 += v10;
    }
    while (v4 != v9);
    if (v6)
    {
      if (!v4)
        v4 = *((unsigned int *)this + 8);
      v11 = *(double *)(v7 + 16 * v4 - 16) - *(double *)(v7 + 16 * v3);
      if (v11 != 0.0)
        v5 = (double)v6 / v11;
    }
  }
  if (v5 >= (double)WebKit::throughputIntervals[2 * v2 + 1])
  {
    v16 = off_1ECE713E8;
    v17 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
    if (v2 + 1 > 8)
    {
      if (v17)
      {
        v20 = *(_QWORD *)(*(_QWORD *)this + 24);
        *(_DWORD *)v21 = 134218240;
        *(_QWORD *)&v21[4] = this;
        v22 = 2048;
        v23 = v20;
        _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::timerFired: Download reached threshold to not be terminated (id = %llu)", v21, 0x16u);
      }
    }
    else
    {
      if (v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)this + 24);
        *(_DWORD *)v21 = 134218240;
        *(_QWORD *)&v21[4] = this;
        v22 = 2048;
        v23 = v18;
        _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::timerFired: sufficient throughput rate (id = %llu)", v21, 0x16u);
        v19 = *((_QWORD *)this + 32);
        *((_QWORD *)this + 32) = v19 + 1;
        if ((unint64_t)(v19 + 1) >= 9)
        {
          __break(0xC471u);
          JUMPOUT(0x19713C470);
        }
      }
      else
      {
        *((_QWORD *)this + 32) = v2 + 1;
      }
      WebCore::TimerBase::start();
    }
  }
  else
  {
    v12 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(*(_QWORD *)this + 24);
      *(_DWORD *)v21 = 134218240;
      *(_QWORD *)&v21[4] = this;
      v22 = 2048;
      v23 = v13;
      _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::timerFired: cancelling download (id = %llu)", v21, 0x16u);
    }
    v14 = *(_QWORD *)this;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E34C2A78;
    *(_QWORD *)v21 = v15;
    WebKit::Download::cancel(v14, (uint64_t *)v21, 0);
    if (*(_QWORD *)v21)
      (*(void (**)(_QWORD))(**(_QWORD **)v21 + 8))(*(_QWORD *)v21);
  }
}

uint64_t WebKit::DownloadMonitor::downloadReceivedBytes(WebKit::DownloadMonitor *this, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = (char *)this + 8;
  v6 = v4;
  if (v3 > v4)
    v6 = v4 + *((unsigned int *)this + 8);
  if (v6 - v3 < 0xA)
    goto LABEL_9;
  if (v3 != v4)
  {
    if (v3 == *((unsigned int *)this + 8) - 1)
      v7 = 0;
    else
      v7 = v3 + 1;
    *((_QWORD *)this + 1) = v7;
LABEL_9:
    WTF::MonotonicTime::now(this);
    *(_QWORD *)&v10 = v8;
    *((_QWORD *)&v10 + 1) = a2;
    return WTF::Deque<WebKit::DownloadMonitor::Timestamp,10ul>::append((uint64_t)v5, &v10);
  }
  result = 512;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Deque<WebKit::DownloadMonitor::Timestamp,10ul>::append(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = *(unsigned int *)(result + 24);
  if (!v4)
  {
    if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    result = WTF::Deque<WebKit::DownloadMonitor::Timestamp,10ul>::expandCapacity(result);
    v4 = *(_QWORD *)(v3 + 8);
  }
LABEL_10:
  *(_OWORD *)(*(_QWORD *)(v3 + 16) + 16 * v4) = *a2;
  v6 = *(_QWORD *)(v3 + 8);
  if (v6 == *(unsigned int *)(v3 + 24) - 1)
    v7 = 0;
  else
    v7 = v6 + 1;
  *(_QWORD *)(v3 + 8) = v7;
  return result;
}

void WebKit::DownloadMonitor::applicationWillEnterForeground(WebKit::DownloadMonitor *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  WebKit::DownloadMonitor *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)this + 24);
    v4 = 134218240;
    v5 = this;
    v6 = 2048;
    v7 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::applicationWillEnterForeground (id = %llu)", (uint8_t *)&v4, 0x16u);
  }
  if ((*((_QWORD *)this + 29) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebKit::DownloadMonitor *)((char *)this + 200));
  *((_QWORD *)this + 32) = 0;
}

uint64_t WebKit::DownloadMonitor::applicationDidEnterBackground(WebKit::DownloadMonitor *this)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  WebKit::DownloadMonitor *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)this + 24);
    v5 = 134218240;
    v6 = this;
    v7 = 2048;
    v8 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - DownloadMonitor::applicationDidEnterBackground (id = %llu)", (uint8_t *)&v5, 0x16u);
  }
  return WebCore::TimerBase::start();
}

uint64_t WebKit::PendingDownload::PendingDownload(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, WebKit::NetworkSession *a5, WTF::StringImpl *a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebKit::NetworkDataTask *v25;
  uint64_t v26;
  WebCore::ResourceRequest *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  IPC::Encoder *v35;

  *(_QWORD *)(a1 + 8) = &unk_1E34C28D0;
  v17 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E34C2840;
  v18 = WTF::fastMalloc((WTF *)0xC90);
  *(_QWORD *)(a1 + 24) = WebKit::NetworkLoad::NetworkLoad(v18, a1, a3, a5);
  if (a2)
  {
    v19 = *a2;
    if (__ldaxr(*a2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v19))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEABB3C](v19);
LABEL_6:
    ++*((_QWORD *)v19 + 1);
    v21 = __ldxr(v19);
    if (v21 == 1)
    {
      if (!__stlxr(0, v19))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  }
LABEL_11:
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 41) = 0;
  *(_BYTE *)(a1 + 42) = a7;
  *(_QWORD *)(a1 + 48) = a9;
  *(_QWORD *)(a1 + 56) = a10;
  WTF::URL::invalidate((WTF::URL *)(a1 + 64));
  *(_QWORD *)(a1 + 104) = 0;
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD *)(v22 + 2992);
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
    v22 = *(_QWORD *)(a1 + 24);
    v24 = *(_QWORD *)(v22 + 2992);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a3 + 291);
    if (v24)
    {
      *(_QWORD *)(v24 + 40) = a4;
      v22 = *(_QWORD *)(a1 + 24);
      v25 = *(WebKit::NetworkDataTask **)(v22 + 2992);
      if (v25)
      {
        WebKit::NetworkDataTask::setPendingDownload(v25, (WebKit::PendingDownload *)a1);
        v22 = *(_QWORD *)(a1 + 24);
        v26 = *(_QWORD *)(v22 + 2992);
        if (v26)
        {
          WTF::String::operator=((WTF::StringImpl **)(v26 + 536), a6);
          v22 = *(_QWORD *)(a1 + 24);
        }
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a3 + 291);
  }
  v27 = (WebCore::ResourceRequest *)(v22 + 3008);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
  v29 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v29 = 14;
  *(_QWORD *)(v29 + 8) = v28;
  *(_QWORD *)(v29 + 528) = v29 + 16;
  *(_QWORD *)(v29 + 536) = v29 + 16;
  *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v29 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
  v35 = (IPC::Encoder *)v29;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v29, v27);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, (uint64_t *)a6);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v17 + 32))(v17, &v35, 0);
  v31 = v35;
  v35 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v30);
    WTF::fastFree(v32, v33);
  }
  return a1;
}

uint64_t WebKit::PendingDownload::PendingDownload(uint64_t a1, unsigned __int8 **a2, uint64_t *a3, uint64_t *a4, uint64_t a5, WebCore::ResourceRequest *a6, WebCore::ResourceResponseBase *a7)
{
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v27;
  IPC::Encoder *v28;

  *(_QWORD *)(a1 + 8) = &unk_1E34C28D0;
  v13 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E34C2840;
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v14;
  if (a2)
  {
    v15 = *a2;
    if (__ldaxr(*a2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEABB3C](v15);
LABEL_6:
    ++*((_QWORD *)v15 + 1);
    v17 = __ldxr(v15);
    if (v17 == 1)
    {
      if (!__stlxr(0, v15))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  }
LABEL_11:
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 41) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 64));
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 2992);
  if (v18)
    *(_QWORD *)(v18 + 40) = a5;
  v27 = 0;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
  v20 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v20 = 14;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v20 + 528) = v20 + 16;
  *(_QWORD *)(v20 + 536) = v20 + 16;
  *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v20 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
  v28 = (IPC::Encoder *)v20;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v20, a6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v20, (uint64_t *)&v27);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v13 + 32))(v13, &v28, 0);
  v22 = v28;
  v28 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v21);
    WTF::fastFree(v23, v24);
  }
  v25 = v27;
  v27 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  WebKit::NetworkLoad::convertTaskToDownload(*(_QWORD *)(a1 + 24), (WebKit::PendingDownload *)a1, (uint64_t)a6, a7, a4);
  return a1;
}

uint64_t WebKit::PendingDownload::willSendRedirectedRequest(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, WebCore::ResourceResponseBase *a4, uint64_t *a5)
{
  WebCore::SecurityOrigin *v9;
  const WTF::URL *v10;
  WebCore::SecurityOrigin *v11;
  const WTF::URL *v12;
  WTF::StringImpl *v13;
  char isSameOriginAs;
  WebCore::SecurityOrigin *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  uint64_t result;
  WTF *v26;
  void *v27;
  uint64_t v28;
  CFTypeRef v29;
  WTF::URL *v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  WebCore::SecurityOrigin *v38[2];
  WTF *v39[2];
  char v40;
  CFTypeRef cf;

  if (!WTF::linkedOnOrAfterSDKWithBehavior() || !*(_BYTE *)(a1 + 42))
    goto LABEL_7;
  v9 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url(a4);
  WebCore::SecurityOrigin::create(v9, v10);
  v11 = (WebCore::SecurityOrigin *)WebCore::ResourceRequestBase::url(a3);
  WebCore::SecurityOrigin::create(v11, v12);
  isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v39[0], v38[0]);
  v15 = v38[0];
  v38[0] = 0;
  if (v15)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v15, v13);
  v16 = v39[0];
  v39[0] = 0;
  if (v16)
  {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v16, v13);
    if ((isSameOriginAs & 1) != 0)
      goto LABEL_7;
  }
  else if ((isSameOriginAs & 1) != 0)
  {
LABEL_7:
    v18 = *(_QWORD *)(a1 + 8);
    v17 = a1 + 8;
    v19 = (*(uint64_t (**)(uint64_t))(v18 + 56))(v17);
    v20 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v20 = 15;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)(v20 + 528) = v20 + 16;
    *(_QWORD *)(v20 + 536) = v20 + 16;
    *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v20 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
    v38[0] = (WebCore::SecurityOrigin *)v20;
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v20, a3);
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v20, a4);
    v21 = *a5;
    *a5 = 0;
    v22 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v22 = &off_1E34C2AA0;
    *((_QWORD *)v22 + 1) = v21;
    v39[0] = v22;
    v39[1] = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    (*(void (**)(uint64_t, WebCore::SecurityOrigin **, WTF **, _QWORD))(*(_QWORD *)v17 + 40))(v17, v38, v39, 0);
    v24 = v39[0];
    v39[0] = 0;
    if (v24)
      (*(void (**)(WTF *))(*(_QWORD *)v24 + 8))(v24);
    result = (uint64_t)v38[0];
    v38[0] = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v23);
      return WTF::fastFree(v26, v27);
    }
    return result;
  }
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v39);
  v28 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, v39);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = cf;
  cf = 0;
  if (v29)
    CFRelease(v29);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v39);
  result = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 2992);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  if (*(_BYTE *)(a1 + 56))
  {
    v30 = (WTF::URL *)WebCore::ResourceRequestBase::url(a3);
    result = WTF::URL::protocolIsJavaScript(v30);
    if ((result & 1) == 0)
    {
      v31 = *(_QWORD **)(a1 + 24);
      if (v31[6])
      {
        if (v31[5])
        {
          v32 = v31[3];
          v33 = (unsigned int *)(v32 + 120);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
          if (*(_BYTE *)(a1 + 56)
            && (v39[0] = *(WTF **)(a1 + 48),
                result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v32 + 128), v39), v35 = *(_QWORD *)(a1 + 24), *(_QWORD *)(v35 + 48))&& (*(_OWORD *)v39 = *(_OWORD *)(v35 + 48), v40 = 1, v38[0] = *(WebCore::SecurityOrigin **)(v35 + 40), v38[1] = (WebCore::SecurityOrigin *)(v38[0] != 0), v38[0]))
          {
            result = (uint64_t)WebKit::NetworkConnectionToWebProcess::loadCancelledDownloadRedirectRequestInFrame(result, (uint64_t)a3, (uint64_t)v39, (uint64_t)v38);
            if (v32)
            {
              do
              {
                v36 = __ldaxr(v33);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v33));
              if (!v37)
              {
                atomic_store(1u, (unsigned int *)(v32 + 120));
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
              }
            }
          }
          else
          {
            __break(1u);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::PendingDownload::cancel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 2992);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

IPC::Encoder *WebKit::PendingDownload::didFailLoading(IPC::Encoder *this, const WebCore::ResourceError *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  if (!*((_BYTE *)this + 41))
  {
    v4 = (char *)this + 8;
    v3 = *((_QWORD *)this + 1);
    *((_BYTE *)this + 41) = 1;
    v5 = (*(uint64_t (**)(uint64_t))(v3 + 56))((uint64_t)this + 8);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 10;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v10 = (IPC::Encoder *)v6;
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v6, a2);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = 0;
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v10, 0);
    this = v10;
    v10 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return this;
}

uint64_t WebKit::PendingDownload::messageSenderConnection(WebKit::PendingDownload *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t `non-virtual thunk to'WebKit::PendingDownload::messageSenderConnection(WebKit::PendingDownload *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebKit::PendingDownload::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::PendingDownload::messageSenderDestinationID(WebKit::PendingDownload *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 2992) + 40);
}

uint64_t `non-virtual thunk to'WebKit::PendingDownload::messageSenderDestinationID(WebKit::PendingDownload *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 2992) + 40);
}

uint64_t std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 16))
  {
    WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1, (uint64_t *)a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a1 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a1 + 12) = v3;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

WTF::StringImpl *WebKit::NetworkNotificationManager::setPushAndNotificationsEnabledForOrigin(uint64_t a1, WebCore::SecurityOriginData *this, char a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  char v13;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v7 = v5 + 32;
    WebCore::SecurityOriginData::toString(this);
    v12 = &v11;
    v13 = a3;
    IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(v7, (uint64_t)&v12, a4);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WebCore::SecurityOriginData *))(*(_QWORD *)v10 + 16))(v10, this);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _QWORD *v17;
  IPC::Encoder *v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 661;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *(uint64_t **)a2);
  LOBYTE(a2) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34C2AC8;
  v9[1] = v8;
  v17 = v9;
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD **))(*(_QWORD *)a1 + 24))(a1, &v18, &v17);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

IPC::Encoder *WebKit::NetworkNotificationManager::getPendingPushMessages(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD *v15;
  IPC::Encoder *v16;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34C2AF0;
  v4[1] = v3;
  v5 = *(_QWORD **)(a1 + 24);
  v6 = v5[4];
  v5 += 4;
  v7 = (*(uint64_t (**)(_QWORD *))(v6 + 56))(v5);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 651;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34C2B18;
  v9[1] = v4;
  v15 = v9;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD **))(*v5 + 24))(v5, &v16, &v15);
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::NetworkNotificationManager::showNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::NetworkNotificationManager::subscribeToPushService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[10];
  int v9;
  char v10;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v8[0] = a2;
    v8[1] = a3;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(v5 + 32, (uint64_t)v8, a4);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v8[0]) = 16;
    v9 = 1;
    v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v8);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9 != -1)
      return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS6_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v9])(&v10, v8);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _QWORD *v17;
  IPC::Encoder *v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 662;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, **(const void ***)(a2 + 8), *(unsigned int *)(*(_QWORD *)(a2 + 8) + 12));
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34C2B40;
  v9[1] = v8;
  v17 = v9;
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD **))(*(_QWORD *)a1 + 24))(a1, &v18, &v17);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::unsubscribeFromPushService(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9[2];
  int v10;
  _QWORD v11[2];
  char v12;

  v11[0] = a3;
  v11[1] = a4;
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v9[0] = a2;
    v9[1] = v11;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(v6 + 32, v9, a5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v9[0]) = 16;
    v10 = 1;
    v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v8 + 16))(v8, v9);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v10 != -1)
      return ((uint64_t (*)(char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v10])(&v12, v9);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _QWORD *v17;
  IPC::Encoder *v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 663;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v7, a2[1]);
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34C2B68;
  v9[1] = v8;
  v17 = v9;
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD **))(*(_QWORD *)a1 + 24))(a1, &v18, &v17);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::getPushSubscription(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[95];
  char v11;
  uint64_t *v12;
  _BYTE v13[88];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if ((v4 & 0x8000000000000000) == 0 || v4 == -1)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
    {
      v12 = a2;
      return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(v5 + 32, &v12, a3);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13[0] = 16;
      v14 = 1;
      v7 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v7 + 16))(v7, &v12);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if (v14 != -1)
        return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v14])(v10, v13);
    }
  }
  else
  {
    v10[0] = 0;
    v10[80] = 0;
    v13[0] = 0;
    v13[80] = 0;
    v14 = 0;
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v8 + 16))(v8, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v14 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v14])(&v11, v13);
    v14 = -1;
    return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v9);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _QWORD *v17;
  IPC::Encoder *v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 653;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *a2);
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34C2BA0;
  v9[1] = v8;
  v17 = v9;
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD **))(*(_QWORD *)a1 + 24))(a1, &v18, &v17);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::getPushPermissionState(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8[2];
  int v9;
  char v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if ((v4 & 0x8000000000000000) == 0 || v4 == -1)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
    {
      v8[0] = a2;
      return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)>>(v5 + 32, v8, a3);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v8[0]) = 16;
    v9 = 1;
  }
  else
  {
    LOBYTE(v8[0]) = 0;
    v9 = 0;
  }
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v7 + 16))(v7, v8);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v9 != -1)
    return ((uint64_t (*)(char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v9])(&v10, v8);
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _QWORD *v17;
  IPC::Encoder *v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 652;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *a2);
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34C2BD8;
  v9[1] = v8;
  v17 = v9;
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD **))(*(_QWORD *)a1 + 24))(a1, &v18, &v17);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::incrementSilentPushCount(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v6 = a2;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()>>(v3 + 32, &v6, a3);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()(unsigned int)>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _QWORD *v17;
  IPC::Encoder *v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 655;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v7, *a2);
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34C2C10;
  v9[1] = v8;
  v17 = v9;
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD **))(*(_QWORD *)a1 + 24))(a1, &v18, &v17);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

IPC::Encoder *WebKit::NetworkNotificationManager::removeAllPushSubscriptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  IPC::Encoder *v17;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 32);
    v4 = v3 + 32;
    v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 658;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v17 = (IPC::Encoder *)v7;
    v8 = *a2;
    *a2 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34C2C38;
    v9[1] = v8;
    v16 = v9;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD **))(*(_QWORD *)v4 + 24))(v4, &v17, &v16);
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    result = v17;
    v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
  }
  else
  {
    v15 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

uint64_t WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v6 = a2;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()>>(v3 + 32, &v6, a3);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _QWORD *v17;
  IPC::Encoder *v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 659;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v7, *a2);
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34C2C60;
  v9[1] = v8;
  v17 = v9;
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD **))(*(_QWORD *)a1 + 24))(a1, &v18, &v17);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

__n128 WebKit::WebPushD::Connection::Connection(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = off_1E34B4B60;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = &unk_1E34B4BC0;
  *(_QWORD *)(a1 + 40) = a3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)a4;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v5 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a1 + 56) = v5;
    LODWORD(v5) = *(_DWORD *)(a4 + 16);
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a1 + 64) = v5;
    LODWORD(v5) = *(_DWORD *)(a4 + 20);
    *(_DWORD *)(a4 + 20) = 0;
    *(_DWORD *)(a1 + 68) = v5;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v6 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a1 + 80) = v6;
  result = *(__n128 *)(a4 + 48);
  v8 = *(_OWORD *)(a4 + 64);
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v8;
  return result;
}

WebKit::PCM::ClientImpl *WebKit::PCM::ClientImpl::ClientImpl(WebKit::PCM::ClientImpl *this, WebKit::NetworkSession *a2, WebKit::NetworkProcess *a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34C2980;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v6 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *((_QWORD *)this + 1) = v6;
  v8 = (unsigned int *)((char *)a3 + 120);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 2) = a3;
  return this;
}

_QWORD *WebKit::PCM::ClientImpl::broadcastConsoleMessage(_QWORD *result, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result[1];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      result = (_QWORD *)result[2];
      if (*((_BYTE *)result + 392))
        return WebKit::NetworkProcess::broadcastConsoleMessage((uint64_t)result, *(_QWORD *)(v4 + 24), 14, a2, a3);
    }
  }
  return result;
}

BOOL WebKit::PCM::ClientImpl::featureEnabled(WebKit::PCM::ClientImpl *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return v1 && *(_QWORD *)(v1 + 8) && *(_BYTE *)(*((_QWORD *)this + 2) + 392) != 0;
}

BOOL WebKit::PCM::ClientImpl::debugModeEnabled(WebKit::PCM::ClientImpl *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && *(_BYTE *)(v2 + 160) != 0;
}

BOOL WebKit::PCM::ClientImpl::usesEphemeralDataStore(WebKit::PCM::ClientImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 24), v3 < 0))
    return v3 != -1;
  else
    return 0;
}

void WebKit::PCM::DaemonClient::broadcastConsoleMessage(uint64_t a1, unsigned int a2)
{
  {
    WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
    qword_1EE341CA8 = 0;
  }
  WebKit::PCM::DaemonConnectionSet::broadcastConsoleMessage((_QWORD **)&WebKit::PCM::DaemonConnectionSet::singleton(void)::set, a2);
}

uint64_t WebKit::PCM::DaemonClient::featureEnabled(WebKit::PCM::DaemonClient *this)
{
  return 1;
}

BOOL WebKit::PCM::DaemonClient::debugModeEnabled(WebKit::PCM::DaemonClient *this)
{
  _BOOL8 result;

    return qword_1EE341CA8 != 0;
  result = 0;
  WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
  qword_1EE341CA8 = 0;
  return result;
}

void WebKit::PendingDownload::~PendingDownload(WebKit::PendingDownload *this)
{
  WTF *v1;
  void *v2;

  WebKit::PendingDownload::~PendingDownload(this);
  WTF::fastFree(v1, v2);
}

{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = off_1E34C2840;
  *((_QWORD *)this + 1) = &unk_1E34C28D0;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 13);
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned __int8 **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    v5 = *v4;
    if (__ldaxr(*v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEABB3C](v5);
LABEL_10:
    v7 = *((_QWORD *)v5 + 1);
    v8 = v7 - 1;
    *((_QWORD *)v5 + 1) = v7 - 1;
    if (v7 == 1)
    {
      v18 = *((_QWORD *)v5 + 2);
      v10 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      v9 = v18 == 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v11 = __ldxr(v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, v5))
      {
        if (v8)
          goto LABEL_20;
LABEL_18:
        v12 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v12 = off_1E34ACA48;
        *(_QWORD *)(v12 + 8) = v5;
        *(_QWORD *)(v12 + 16) = v10;
        *(_BYTE *)(v12 + 24) = v9;
        v19 = v12;
        WTF::ensureOnMainRunLoop();
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_20:
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 3, 0);
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v13);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebKit::PendingDownload::isSynchronous(WebKit::PendingDownload *this)
{
  return 0;
}

uint64_t WebKit::PendingDownload::isAllowedToAskUserForCredentials(WebKit::PendingDownload *this)
{
  return *((unsigned __int8 *)this + 40);
}

void `non-virtual thunk to'WebKit::PendingDownload::~PendingDownload(WebKit::PendingDownload *this)
{
  WebKit::PendingDownload::~PendingDownload((WebKit::PendingDownload *)((char *)this - 8));
}

{
  WTF *v1;
  void *v2;

  WebKit::PendingDownload::~PendingDownload((WebKit::PendingDownload *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

void WebKit::NetworkNotificationManager::~NetworkNotificationManager(WebKit::NetworkNotificationManager *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E34C2920;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E34C2920;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v4);
}

void WebKit::PCM::ClientImpl::~ClientImpl(WebKit::PCM::ClientImpl *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34C2980;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 30;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34C2980;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 30;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::PCM::ClientImpl::runningInDaemon(WebKit::PCM::ClientImpl *this)
{
  return 0;
}

void WebKit::PCM::DaemonClient::~DaemonClient(unsigned int **this, void *a2)
{
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  WTF::fastFree((WTF *)this, v3);
}

uint64_t WebKit::PCM::DaemonClient::usesEphemeralDataStore(WebKit::PCM::DaemonClient *this)
{
  return 0;
}

uint64_t WebKit::PCM::DaemonClient::runningInDaemon(WebKit::PCM::DaemonClient *this)
{
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::DownloadMonitor::*&)(void),WebKit::DownloadMonitor*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Deque<WebKit::DownloadMonitor::Timestamp,10ul>::expandCapacity(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  __int128 v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;

  v1 = *(unsigned int *)(result + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0xFFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = *(WTF **)(result + 16);
    v5 = v2 + 1;
    result = WTF::fastMalloc((WTF *)(16 * (v2 + 1)));
    *(_DWORD *)(v3 + 24) = v5;
    *(_QWORD *)(v3 + 16) = result;
    v7 = *(_QWORD *)v3;
    v8 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 <= v8)
    {
      if (*(_QWORD *)v3 != v8)
      {
        v15 = (_OWORD *)(result + 16 * v7);
        v16 = (__int128 *)((char *)v4 + 16 * v7);
        v17 = 16 * v8 - 16 * v7;
        do
        {
          v18 = *v16++;
          *v15++ = v18;
          v17 -= 16;
        }
        while (v17);
      }
    }
    else
    {
      if (v8)
      {
        v9 = 16 * v8;
        v10 = v4;
        do
        {
          v11 = *(_OWORD *)v10;
          v10 = (WTF *)((char *)v10 + 16);
          *(_OWORD *)result = v11;
          result += 16;
          v9 -= 16;
        }
        while (v9);
        v5 = *(_DWORD *)(v3 + 24);
        v7 = *(_QWORD *)v3;
        result = *(_QWORD *)(v3 + 16);
      }
      if (v7 != v1)
      {
        v12 = (__int128 *)((char *)v4 + 16 * v7);
        v13 = 16 * v7 - 16 * v1;
        do
        {
          v14 = *v12++;
          *(_OWORD *)(result + 16 * v5 + v13) = v14;
          v13 += 16;
        }
        while (v13);
      }
      *(_QWORD *)v3 = v7 - v1 + v5;
    }
    if ((WTF *)(v3 + 32) != v4 && v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2AA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2AA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE v4[208];

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>(a2, v4);
    if (v4[200])
    {
      v3 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v4);
    }
    else
    {
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v4);
      IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>((uint64_t *)(a1 + 8));
  }
}

void IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(uint64_t *a1)
{
  uint64_t v2;
  CFTypeRef v3;
  _BYTE v4[192];
  CFTypeRef cf;

  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v4);
  v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v4);
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[200])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::ResourceRequestBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  _BYTE v5[200];
  char v6;

  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v5);
  v3 = v6;
  if (v6)
  {
    std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)a2, (uint64_t)v5);
    v3 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[200] = v3;
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
}

_QWORD *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2AC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2AC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(void)> &&>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkNotificationManager::getPendingPushMessages(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0,void,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2AF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkNotificationManager::getPendingPushMessages(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0,void,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2AF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkNotificationManager::getPendingPushMessages(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0,void,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(Messages::PushClientConnection::GetPendingPushMessages &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2B18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(Messages::PushClientConnection::GetPendingPushMessages &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2B18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(Messages::PushClientConnection::GetPendingPushMessages &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7), !v8))
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  v6 = v10;
  if (v10)
  {
    *(_QWORD *)a3 = v8;
    v7 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    result = WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unsigned int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38[5];
  _BYTE v39[144];
  char v40;
  uint64_t v41;
  uint64_t v42;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v6, v5);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_22;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v41 = 0;
    v42 = 0;
    if (v10 >> 1 >= 0x97B)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebPushMessage>(a1, &v33);
        if (!v40)
          break;
        v25 = HIDWORD(v42);
        if (HIDWORD(v42) == (_DWORD)v42)
        {
          WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPushMessage>((uint64_t)&v41, (unint64_t)&v33);
        }
        else
        {
          v27 = v41;
          v28 = v41 + 216 * HIDWORD(v42);
          *(_BYTE *)v28 = 0;
          *(_BYTE *)(v28 + 16) = 0;
          if (v36)
          {
            *(_QWORD *)v28 = 0;
            *(_QWORD *)(v28 + 8) = 0;
            v29 = v33;
            v33 = 0;
            *(_QWORD *)v28 = v29;
            LODWORD(v29) = v34;
            v34 = 0;
            *(_DWORD *)(v28 + 8) = v29;
            LODWORD(v29) = v35;
            v35 = 0;
            *(_DWORD *)(v28 + 12) = v29;
            *(_BYTE *)(v28 + 16) = 1;
          }
          v30 = v37;
          v31 = v27 + 216 * v25;
          v37 = 0;
          *(_QWORD *)(v31 + 24) = v30;
          WTF::URL::URL(v31 + 32, v38);
          std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v31 + 72, (uint64_t)v39);
          ++HIDWORD(v42);
        }
        std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v26);
        if (!--v10)
        {
          WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v41, HIDWORD(v42));
          *(_QWORD *)a3 = v41;
          v32 = v42;
          v41 = 0;
          v42 = 0;
          *(_QWORD *)(a3 + 8) = v32;
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v19 = 0;
        v20 = 0;
LABEL_19:
        v41 = 0;
        v42 = 0;
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v20;
LABEL_20:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
      }
      LODWORD(v42) = 216 * (int)v10 / 0xD8u;
      v41 = WTF::fastMalloc((WTF *)(216 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebPushMessage>(a1, &v33);
        if (!v40)
          break;
        v12 = HIDWORD(v42);
        if (HIDWORD(v42) == (_DWORD)v42)
        {
          WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPushMessage>((uint64_t)&v41, (unint64_t)&v33);
        }
        else
        {
          v14 = v41;
          v15 = v41 + 216 * HIDWORD(v42);
          *(_BYTE *)v15 = 0;
          *(_BYTE *)(v15 + 16) = 0;
          if (v36)
          {
            *(_QWORD *)v15 = 0;
            *(_QWORD *)(v15 + 8) = 0;
            v16 = v33;
            v33 = 0;
            *(_QWORD *)v15 = v16;
            LODWORD(v16) = v34;
            v34 = 0;
            *(_DWORD *)(v15 + 8) = v16;
            LODWORD(v16) = v35;
            v35 = 0;
            *(_DWORD *)(v15 + 12) = v16;
            *(_BYTE *)(v15 + 16) = 1;
          }
          v17 = v37;
          v18 = v14 + 216 * v12;
          v37 = 0;
          *(_QWORD *)(v18 + 24) = v17;
          WTF::URL::URL(v18 + 32, v38);
          std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v18 + 72, (uint64_t)v39);
          ++HIDWORD(v42);
        }
        std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v13);
        if (!--v10)
        {
          v19 = v41;
          v20 = v42;
          goto LABEL_19;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v11);
    return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
  }
  v21 = v5;
  v22 = 0;
LABEL_22:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v21)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPushMessage>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = v3;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 216 * v5;
  *(_BYTE *)v7 = 0;
  *(_BYTE *)(v7 + 16) = 0;
  if (*(_BYTE *)(v3 + 16))
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    v8 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)v7 = v8;
    LODWORD(v8) = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v7 + 8) = v8;
    LODWORD(v8) = *(_DWORD *)(v3 + 12);
    *(_DWORD *)(v3 + 12) = 0;
    *(_DWORD *)(v7 + 12) = v8;
    *(_BYTE *)(v7 + 16) = 1;
  }
  v9 = *(_QWORD *)(v3 + 24);
  v10 = v6 + 216 * v5;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v10 + 24) = v9;
  WTF::URL::URL(v10 + 32, (uint64_t *)(v3 + 32));
  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v10 + 72, v4 + 72);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 216 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x12F684C)
    {
      __break(0xC471u);
      JUMPOUT(0x19713F32CLL);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 216 * *(unsigned int *)(a1 + 12));
    v5 = 216 * a2;
    v6 = WTF::fastMalloc((WTF *)(216 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0xD8;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebPushMessage>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebPushMessage>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char *v14;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (char *)v5 + v6;
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 16) = 0;
      if (*((_BYTE *)v5 + v6 + 16))
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v9 = *(WTF::StringImpl **)v8;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)v7 = v9;
        LODWORD(v9) = *((_DWORD *)v8 + 2);
        *((_DWORD *)v8 + 2) = 0;
        *(_DWORD *)(v7 + 8) = (_DWORD)v9;
        LODWORD(v9) = *((_DWORD *)v8 + 3);
        *((_DWORD *)v8 + 3) = 0;
        *(_DWORD *)(v7 + 12) = (_DWORD)v9;
        *(_BYTE *)(v7 + 16) = 1;
      }
      v10 = *((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = 0;
      *(_QWORD *)(v7 + 24) = v10;
      WTF::URL::URL(v7 + 32, (uint64_t *)v8 + 4);
      std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v7 + 72, (uint64_t)(v8 + 72));
      std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v8 + 72), v11);
      v13 = (WTF::StringImpl *)*((_QWORD *)v8 + 4);
      *((_QWORD *)v8 + 4) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
      if (v8[16])
      {
        result = *(WTF::StringImpl **)v8;
        if (*(_QWORD *)v8)
        {
          v14 = (char *)v5 + v6;
          *(_QWORD *)v14 = 0;
          *((_DWORD *)v14 + 2) = 0;
          result = (WTF::StringImpl *)WTF::fastFree(result, v12);
        }
      }
      v6 += 216;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 216 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 216 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0x12F684C)
      {
        __break(0xC471u);
        JUMPOUT(0x19713F554);
      }
      v6 = (WTF *)(216 * a2);
      result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = v6 / 0xD8;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebKit::WebPushMessage>::move(v5, (WTF::StringImpl *)((char *)v5 + 216 * v4), result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = result;
    do
    {
      std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + 72, a2);
      v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      if (*((_BYTE *)v3 + 16))
      {
        result = *(WTF::StringImpl **)v3;
        if (*(_QWORD *)v3)
        {
          *(_QWORD *)v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
          result = (WTF::StringImpl *)WTF::fastFree(result, a2);
        }
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 216);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 216 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::SubscribeToPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2B40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::SubscribeToPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2B40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::SubscribeToPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[80];
  int v6;
  char v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>>(a2, (uint64_t)v5);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    if (v6 != -1)
      return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS6_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v6])(&v8, v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _OWORD v3[5];
  int v4;
  char v5;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS6_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v4])(&v5, v3);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 88))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;
  _BYTE v6[80];
  int v7;
  unsigned __int8 v8;
  char v9;

  result = (uint64_t)IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(a1, (uint64_t)v6);
  v4 = v8;
  *(_BYTE *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 80) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v6);
    v5 = v8;
    *(_BYTE *)(a2 + 88) = 1;
    if (v5)
    {
      if (v7 != -1)
        return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS6_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v7])(&v9, v6);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 0;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 88))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *result;
  char v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      v25 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        a1 = v25;
        v21 = *v25;
        v20 = v25[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_15;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v20 = v3;
    v21 = 0;
LABEL_15:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      v24 = a1;
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
        a1 = v24;
        v4 = *v24;
        v3 = v24[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_16;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::PushSubscriptionData>(a1, (uint64_t)&v26);
      v9 = v35;
      if (v35)
      {
        v10 = v27;
        *(_QWORD *)a2 = v26;
        *(_QWORD *)(a2 + 8) = v10;
        *(_OWORD *)(a2 + 16) = v28;
        v11 = v29;
        v27 = 0;
        v29 = 0;
        *(_QWORD *)(a2 + 32) = v11;
        v12 = v30;
        v30 = 0;
        *(_QWORD *)(a2 + 40) = v12;
        v13 = v31;
        v31 = 0;
        *(_QWORD *)(a2 + 48) = v13;
        v14 = v32;
        v32 = 0;
        *(_QWORD *)(a2 + 56) = v14;
        v15 = v33;
        v33 = 0;
        *(_QWORD *)(a2 + 64) = v15;
        v16 = v34;
        v34 = 0;
        *(_QWORD *)(a2 + 72) = v16;
        v9 = 1;
        *(_DWORD *)(a2 + 80) = 0;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
      *(_BYTE *)(a2 + 88) = v9;
      return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v8);
    }
    else
    {
      result = IPC::Decoder::decode<WebCore::ExceptionData>(a1, (uint64_t)&v26);
      v18 = v28;
      if ((_BYTE)v28)
      {
        v18 = v26;
        *(_QWORD *)(a2 + 8) = v27;
        v19 = 1;
        *(_DWORD *)(a2 + 80) = 1;
      }
      else
      {
        v19 = 0;
      }
      *(_BYTE *)a2 = v18;
      *(_BYTE *)(a2 + 88) = v19;
    }
    return result;
  }
LABEL_16:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result && v3)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 88) = 0;
  return result;
}

WTF *IPC::Decoder::decode<WebCore::PushSubscriptionData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ExceptionData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::Exception,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2B68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2B68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[16];
  int v6;
  char v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>(a2, (uint64_t)v5);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    if (v6 != -1)
      return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v6])(&v8, v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  v3[0] = 0;
  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v4])(&v5, v3);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;
  _BYTE v6[16];
  int v7;
  unsigned __int8 v8;
  char v9;

  result = (uint64_t)IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>(a1, (uint64_t)v6);
  v4 = v8;
  *(_BYTE *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v6);
    v5 = v8;
    *(_BYTE *)(a2 + 24) = 1;
    if (v5)
    {
      if (v7 != -1)
        return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v7])(&v9, v6);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  char v23[8];
  uint64_t v24;
  char v25;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v22 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        result = v22;
        v11 = *v22;
        v10 = v22[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_14;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_14:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v21 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        result = v21;
        v4 = *v21;
        v3 = v21[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_15;
  }
  if (*v6 >= 2u)
  {
LABEL_15:
    *result = 0;
    result[1] = 0;
    result = (uint64_t *)result[3];
    if (result && v3)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
LABEL_20:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return result;
  }
  if (*v6)
  {
    if (v3 <= (unint64_t)&v6[-v4 + 1])
    {
      v14 = 0;
      v15 = 0;
      *result = 0;
      result[1] = 0;
      v16 = result[3];
      if (v16)
      {
        v17 = result;
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(result[3]);
        v14 = 0;
        v18 = *v17;
        v19 = v17[1];
        v20 = v17[3];
        *v17 = 0;
        v17[1] = 0;
        v15 = 0;
        if (v20)
        {
          result = v17;
          if (v19)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
            result = v17;
            v15 = *v17;
            v14 = v17[1];
          }
        }
        else
        {
          result = v17;
        }
      }
    }
    else
    {
      result[2] = (uint64_t)(v6 + 2);
      v7 = v6[1];
      if (v7 < 2)
      {
        *(_BYTE *)a2 = v7 != 0;
        *(_DWORD *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      v14 = v3;
      v15 = v4;
    }
    *result = 0;
    result[1] = 0;
    result = (uint64_t *)result[3];
    if (result)
    {
      if (v14)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(*result + 16))(result, v15, v14);
    }
    goto LABEL_20;
  }
  result = (uint64_t *)IPC::Decoder::decode<WebCore::ExceptionData>(result, (uint64_t)v23);
  v8 = v25;
  if (v25)
  {
    v8 = v23[0];
    *(_QWORD *)(a2 + 8) = v24;
    v9 = 1;
    *(_DWORD *)(a2 + 16) = 1;
  }
  else
  {
    v9 = 0;
  }
  *(_BYTE *)a2 = v8;
  *(_BYTE *)(a2 + 24) = v9;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C2B80[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetPushSubscription &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2BA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetPushSubscription &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2BA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetPushSubscription &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  _BYTE v6[8];
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>>(a2, v6);
  if (!v9)
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v9)
  {
    if (v8 != -1)
      return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v8])(&v5, &v7);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;
  _BYTE v4[8];
  _BYTE v5[88];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = 0;
  v5[80] = 0;
  v6 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v6])(&v3, v5);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[104])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;
  _BYTE v7[8];
  _BYTE v8[88];
  int v9;
  unsigned __int8 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(a1, (uint64_t)v7);
  if (v10)
  {
    a2[8] = 0;
    v4 = (uint64_t)(a2 + 8);
    *(_DWORD *)(v4 + 88) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(v4, (uint64_t)v8);
    v5 = v10;
    *(_BYTE *)(v4 + 96) = 1;
    if (v5)
    {
      if (v9 != -1)
        return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v9])(&v6, v8);
    }
  }
  else
  {
    *a2 = 0;
    a2[104] = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 104))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v19 = 0;
    v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      v24 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        a1 = v24;
        v20 = *v24;
        v19 = v24[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_14;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v19 = v3;
    v20 = 0;
LABEL_14:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      v23 = a1;
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
        a1 = v23;
        v4 = *v23;
        v3 = v23[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_15;
  }
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v3)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
    goto LABEL_16;
  }
  if (v7)
  {
    result = IPC::Decoder::decode<std::optional<WebCore::PushSubscriptionData>>(a1, (uint64_t)&v25);
    if (v35)
    {
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 88) = 0;
      if (v34)
      {
        v10 = v26;
        *(_QWORD *)(a2 + 8) = v25;
        *(_QWORD *)(a2 + 16) = v10;
        *(_OWORD *)(a2 + 24) = v27;
        v11 = v28;
        v26 = 0;
        v28 = 0;
        *(_QWORD *)(a2 + 40) = v11;
        v12 = v29;
        v29 = 0;
        *(_QWORD *)(a2 + 48) = v12;
        v13 = v30;
        v30 = 0;
        *(_QWORD *)(a2 + 56) = v13;
        v14 = v31;
        v31 = 0;
        *(_QWORD *)(a2 + 64) = v14;
        v15 = v32;
        v32 = 0;
        *(_QWORD *)(a2 + 72) = v15;
        v16 = v33;
        v33 = 0;
        *(_QWORD *)(a2 + 80) = v16;
        *(_BYTE *)(a2 + 88) = 1;
      }
      *(_DWORD *)(a2 + 96) = 0;
      *(_BYTE *)(a2 + 104) = 1;
      return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v9);
    }
LABEL_16:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 104) = 0;
    return result;
  }
  result = (uint64_t)IPC::Decoder::decode<WebCore::ExceptionData>(a1, (uint64_t)&v25);
  v17 = v27;
  if ((_BYTE)v27)
  {
    v18 = v26;
    *(_BYTE *)(a2 + 8) = v25;
    *(_QWORD *)(a2 + 16) = v18;
    v17 = 1;
    *(_DWORD *)(a2 + 96) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 104) = v17;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::PushSubscriptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::PushSubscriptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 88))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::PushSubscriptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v3 = a1[1];
  v4 = (char *)*a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v17 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      v22 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        a1 = v22;
        v18 = *v22;
        v17 = v22[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = &v4[v5];
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v17 = v3;
    v18 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      v21 = a1;
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        a1 = v21;
        v4 = (char *)*v21;
        v3 = v21[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::PushSubscriptionData>(a1, (uint64_t)&v23);
      v8 = v32;
      if (v32)
      {
        v9 = v24;
        *(_QWORD *)a2 = v23;
        *(_QWORD *)(a2 + 8) = v9;
        *(_OWORD *)(a2 + 16) = v25;
        v10 = v26;
        v24 = 0;
        v26 = 0;
        *(_QWORD *)(a2 + 32) = v10;
        v11 = v27;
        v27 = 0;
        *(_QWORD *)(a2 + 40) = v11;
        v12 = v28;
        v28 = 0;
        *(_QWORD *)(a2 + 48) = v12;
        v13 = v29;
        v29 = 0;
        *(_QWORD *)(a2 + 56) = v13;
        v14 = v30;
        v30 = 0;
        *(_QWORD *)(a2 + 64) = v14;
        v15 = v31;
        v31 = 0;
        *(_QWORD *)(a2 + 72) = v15;
        v8 = 1;
        *(_BYTE *)(a2 + 80) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      LOBYTE(v23) = 0;
      v32 = 0;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 80) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 88) = v8;
    return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v4);
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result && v3)
    result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 88) = 0;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 88);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 88) = -1;
  v5 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C2BB8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 88) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;

  *a2 = 0;
  a2[80] = 0;
  if (*(_BYTE *)(a3 + 80))
  {
    result = std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>((uint64_t)a2, a3);
    a2[80] = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetPushPermissionState &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2BD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetPushPermissionState &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2BD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetPushPermissionState &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[16];
  int v6;
  char v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>>(a2, (uint64_t)v5);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    if (v6 != -1)
      return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v6])(&v8, v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  v3[0] = 0;
  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v4])(&v5, v3);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;
  _BYTE v6[16];
  int v7;
  unsigned __int8 v8;
  char v9;

  result = (uint64_t)IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>(a1, (uint64_t)v6);
  v4 = v8;
  *(_BYTE *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned char,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned char,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v6);
    v5 = v8;
    *(_BYTE *)(a2 + 24) = 1;
    if (v5)
    {
      if (v7 != -1)
        return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v7])(&v9, v6);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  char v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  _BYTE v17[8];
  uint64_t v18;
  char v19;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v16 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v16;
        v10 = *v16;
        v9 = v16[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_13:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v15 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v15;
        v4 = *v15;
        v3 = v15[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
LABEL_14:
    *result = 0;
    result[1] = 0;
    result = (uint64_t *)result[3];
    if (!result)
    {
LABEL_17:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
LABEL_23:
    if (v3)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
    goto LABEL_17;
  }
  if (*v6 >= 2u)
    goto LABEL_14;
  if (*v6)
  {
    if (v3 > (unint64_t)&v6[-v4 + 1])
    {
      result[2] = (uint64_t)(v6 + 2);
      *(_BYTE *)a2 = v6[1];
      *(_DWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (!v13)
      goto LABEL_17;
    v14 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(result[3]);
    v4 = *v14;
    v3 = v14[1];
    result = (uint64_t *)v14[3];
    *v14 = 0;
    v14[1] = 0;
    if (!result)
      goto LABEL_17;
    goto LABEL_23;
  }
  result = (uint64_t *)IPC::Decoder::decode<WebCore::ExceptionData>(result, (uint64_t)v17);
  v7 = v19;
  if (v19)
  {
    v7 = v17[0];
    *(_QWORD *)(a2 + 8) = v18;
    v8 = 1;
    *(_DWORD *)(a2 + 16) = 1;
  }
  else
  {
    v8 = 0;
  }
  *(_BYTE *)a2 = v7;
  *(_BYTE *)(a2 + 24) = v8;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned char,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned char,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C2BF0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJhS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJhS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::IncrementSilentPushCount &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::IncrementSilentPushCount &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2C10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::IncrementSilentPushCount &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<float>>(a2), (v3 & 0xFF00000000) != 0))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemoveAllPushSubscriptions,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemoveAllPushSubscriptions &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2C38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemoveAllPushSubscriptions,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemoveAllPushSubscriptions &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2C38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemoveAllPushSubscriptions,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemoveAllPushSubscriptions &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<float>>(a2), (v3 & 0xFF00000000) != 0))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemovePushSubscriptionsForOrigin &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C2C60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemovePushSubscriptionsForOrigin &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2C60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemovePushSubscriptionsForOrigin &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<float>>(a2), (v3 & 0xFF00000000) != 0))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_197141394(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_197141424(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void API::InspectorConfiguration::~InspectorConfiguration(API::InspectorConfiguration *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  JUMPOUT(0x19AEB936CLL);
}

void sub_19714183C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

void sub_1971419CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  _Unwind_Resume(exception_object);
}

void sub_197141B58(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  _Unwind_Resume(exception_object);
}

void sub_197141D0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197141DB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197141E5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19714200C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void InspectorClient::~InspectorClient(id *this)
{
  objc_destroyWeak(this + 1);
}

{
  void *v2;

  objc_destroyWeak(this + 1);
  WTF::fastFree((WTF *)this, v2);
}

id InspectorClient::openURLExternally(id *this, WebKit::WebInspectorUIProxy *a2, const WTF::String *a3)
{
  id *v6;
  id result;
  id Weak;
  uint64_t v9;
  void *v10;
  const __CFString *v11;

  v6 = this + 1;
  result = objc_loadWeak(this + 1);
  if (result && ((_BYTE)this[2] & 1) != 0)
  {
    Weak = objc_loadWeak(v6);
    v9 = *((_QWORD *)a2 + 1);
    v10 = (void *)MEMORY[0x1E0C99E98];
    if (*(_QWORD *)a3)
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    return (id)objc_msgSend(Weak, "inspector:openURLExternally:", v9, objc_msgSend(v10, "URLWithString:", v11));
  }
  return result;
}

id InspectorClient::frontendLoaded(id *this, WebKit::WebInspectorUIProxy *a2)
{
  id *v4;
  id result;

  v4 = this + 1;
  result = objc_loadWeak(this + 1);
  if (result)
  {
    if (((_BYTE)this[2] & 2) != 0)
      return (id)objc_msgSend(objc_loadWeak(v4), "inspectorFrontendLoaded:", *((_QWORD *)a2 + 1));
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)72>::type()
{
  return 72;
}

WebKit::PCM::Database *WebKit::PCM::Database::Database(WebKit::PCM::Database *this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6[3];

  WTF::FileSystemImpl::pathByAppendingComponent();
  WebKit::DatabaseUtilities::DatabaseUtilities(this, (uint64_t *)v6);
  v4 = v6[0];
  v6[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)this = off_1E34C2CE0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  WebKit::DatabaseUtilities::openDatabaseAndCreateSchemaIfNecessary(this, v3);
  WebKit::DatabaseUtilities::enableForeignKeys(this);
  WebKit::PCM::Database::addDestinationTokenColumnsIfNecessary(this);
  if ((byte_1ECE729B1 & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE729C0 = 0;
    qword_1ECE729B8 = 0;
    byte_1ECE729B1 = 1;
  }
  WTF::WeakHashSet<WebKit::PCM::Database,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::PCM::Database>((uint64_t)v6, (unsigned int *)this);
  return this;
}

uint64_t WebKit::PCM::Database::addDestinationTokenColumnsIfNecessary(WebKit::PCM::Database *this)
{
  const WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  void *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  unsigned int v8;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  WebKit::DatabaseUtilities::columnsForTable((uint64_t)this, "AttributedPrivateClickMeasurement", 34, (uint64_t)&v7);
  if (!v8 || (WTF::equal(*((WTF **)v7 + v8 - 1), v2, v3) & 1) == 0)
  {
    WebKit::DatabaseUtilities::addMissingColumnToTable((uint64_t)this, "AttributedPrivateClickMeasurement", 34, "destinationToken TEXT", 22);
    WebKit::DatabaseUtilities::addMissingColumnToTable((uint64_t)this, "AttributedPrivateClickMeasurement", 34, "destinationSignature TEXT", 26);
    WebKit::DatabaseUtilities::addMissingColumnToTable((uint64_t)this, "AttributedPrivateClickMeasurement", 34, "destinationKeyID TEXT", 22);
  }
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return WTF::StringImpl::destroy(v2, v6);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::PCM::Database,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::PCM::Database>(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;

  if (++dword_1ECE729C0 > dword_1ECE729C4)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit3PCM8DatabaseES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_(a1, a2);
    dword_1ECE729C0 = 0;
    v4 = qword_1ECE729B8;
    if (qword_1ECE729B8)
    {
      v4 = *(_DWORD *)(qword_1ECE729B8 - 12);
      if (v4 > 0x7FFFFFFE)
        v4 = 0x7FFFFFFF;
    }
    dword_1ECE729C4 = 2 * v4;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 24, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 12);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  v14 = (WTF *)v5;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&qword_1ECE729B8, &v14, a1);
  result = (unsigned int *)v14;
  v14 = 0;
  if (result)
  {
    do
    {
      v12 = __ldaxr(result);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, result));
    if (!v13)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  if (v5)
  {
    do
    {
      v10 = __ldaxr(v5);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v5));
    if (!v11)
    {
      atomic_store(1u, v5);
      return (unsigned int *)WTF::fastFree((WTF *)v5, v8);
    }
  }
  return result;
}

void WebKit::PCM::Database::~Database(WebCore::SQLiteStatement **this)
{
  uint64_t v2;
  void *v3;
  unsigned int v4;
  WebCore::SQLiteStatement *v5;
  unsigned int **v6;
  uint64_t v7;
  void *v8;
  WebCore::SQLiteStatement *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::SQLiteStatement *v13;

  *this = (WebCore::SQLiteStatement *)off_1E34C2CE0;
  v2 = (uint64_t)WebKit::PCM::Database::destroyStatements(this);
  if (this[3])
    v2 = WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)(this + 2));
  if ((byte_1ECE729B1 & 1) != 0)
  {
    if (++dword_1ECE729C0 <= dword_1ECE729C4)
      goto LABEL_9;
  }
  else
  {
    *(_QWORD *)&dword_1ECE729C0 = 1;
    qword_1ECE729B8 = 0;
    byte_1ECE729B1 = 1;
  }
  _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit3PCM8DatabaseES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_(v2, v3);
  dword_1ECE729C0 = 0;
  v4 = qword_1ECE729B8;
  if (qword_1ECE729B8)
  {
    v4 = *(_DWORD *)(qword_1ECE729B8 - 12);
    if (v4 > 0x7FFFFFFE)
      v4 = 0x7FFFFFFF;
  }
  dword_1ECE729C4 = 2 * v4;
LABEL_9:
  v5 = this[12];
  if (v5 && *((_QWORD *)v5 + 1))
  {
    v13 = this[12];
    v6 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1ECE729B8, &v13);
    if (qword_1ECE729B8)
    {
      v7 = qword_1ECE729B8 + 8 * *(unsigned int *)(qword_1ECE729B8 - 4);
      if ((unsigned int **)v7 == v6)
        goto LABEL_18;
    }
    else
    {
      if (!v6)
        goto LABEL_18;
      v7 = 0;
    }
    if ((unsigned int **)v7 != v6)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&qword_1ECE729B8, v6);
  }
LABEL_18:
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 26, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 25, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 24, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 23, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 22, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 21, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 20, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 19, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 18, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 17, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 16, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 15, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 14, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 13, 0);
  v9 = this[12];
  if (v9)
  {
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unsigned int *)this[12];
    this[12] = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v8);
      }
    }
  }
  else
  {
    this[12] = 0;
  }
  WebKit::DatabaseUtilities::~DatabaseUtilities((WebKit::DatabaseUtilities *)this);
}

{
  WTF *v1;
  void *v2;

  WebKit::PCM::Database::~Database(this);
  WTF::fastFree(v1, v2);
}

uint64_t *WebKit::PCM::Database::expectedTableAndIndexQueries(WebKit::PCM::Database *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  _QWORD v24[2];
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  _QWORD v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  char v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  WTF::StringImpl *v38[4];
  uint64_t v39;
  _QWORD v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_69 & 1) == 0)
  {
    v33[0] = "PCMObservedDomains";
    v33[1] = 19;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v30 = v38[0];
    LOBYTE(v31) = 0;
    v32 = 0;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)v38, (uint64_t)v33, (uint64_t *)&v30);
    v29[0] = "UnattributedPrivateClickMeasurement";
    v29[1] = 36;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = (WTF::StringImpl *)v34;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS UnattributedPrivateClickMeasurement_sourceSiteDomainID_destinationSiteDomainID_sourceApplicationBundleID on UnattributedPrivateClickMeasurement(sourceSiteDomainID, destinationSiteDomainID, sourceApplicationBundleID)", &v25);
    v3 = v25;
    v25 = 0;
    v26 = v2;
    v27 = v3;
    v28 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v39, (uint64_t)v29, (uint64_t *)&v26);
    v24[0] = "AttributedPrivateClickMeasurement";
    v24[1] = 34;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (WTF::StringImpl *)v34;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS AttributedPrivateClickMeasurement_sourceSiteDomainID_destinationSiteDomainID_sourceApplicationBundleID on AttributedPrivateClickMeasurement(sourceSiteDomainID, destinationSiteDomainID, sourceApplicationBundleID)", &v20);
    v5 = v20;
    v20 = 0;
    v21 = v4;
    v22 = v5;
    v23 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)v40, (uint64_t)v24, (uint64_t *)&v21);
    WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::HashMap(&v34, v38, 3);
    v7 = 0;
    qword_1ECE729C8 = v34;
    dword_1ECE729D8 = v36;
    byte_1ECE729DC = v37;
    v8 = v35;
    v34 = 0;
    v35 = 0;
    qword_1ECE729D0 = v8;
    v36 = 0;
    v37 = 0;
    do
    {
      v9 = &v38[v7];
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40[v7 + 2], v6);
      v10 = (WTF::StringImpl *)v40[v7 + 1];
      v40[v7 + 1] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v6);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v9[8];
      v9[8] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v6);
        else
          *(_DWORD *)v11 -= 2;
      }
      v7 -= 4;
    }
    while (v7 != -12);
    if (v23)
    {
      v12 = v22;
      v22 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v6);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v13 = v21;
    v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v6);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v20;
    v20 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v6);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (v28)
    {
      v15 = v27;
      v27 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v6);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v16 = v26;
    v26 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v6);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v25;
    v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v6);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (v32)
    {
      v18 = v31;
      v31 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v6);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    v19 = v30;
    v30 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v6);
      else
        *(_DWORD *)v19 -= 2;
    }
    _MergedGlobals_69 = 1;
  }
  return &qword_1ECE729C8;
}

char **WebKit::PCM::Database::sortedTables(WebKit::PCM::Database *this)
{
  return &WebKit::PCM::Database::sortedTables(void)::sortedTables;
}

uint64_t WebKit::PCM::Database::createUniqueIndices(WebKit::PCM::Database *this)
{
  uint64_t result;

  result = WebCore::SQLiteDatabase::executeCommand();
  if ((_DWORD)result)
    return WebCore::SQLiteDatabase::executeCommand();
  return result;
}

uint64_t WebKit::PCM::Database::createSchema(WebKit::PCM::Database *this)
{
  if (WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand())
  {
    return WebCore::SQLiteDatabase::executeCommand();
  }
  else
  {
    return 0;
  }
}

void WebKit::PCM::Database::insertPrivateClickMeasurement(uint64_t a1, uint64_t a2, int a3)
{
  double v3;
  unint64_t v7;
  unint64_t v8;
  int v9;
  double v10;
  WebCore::SQLiteDatabase *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t ErrorMsg;
  uint64_t v17;
  _QWORD v18[2];
  unsigned int v19;
  char v20;
  uint64_t v21;
  char v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint8_t v27[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)&v21);
  v7 = WebKit::PCM::Database::ensureDomainID((WebCore::SQLiteStatement **)a1, (const WebCore::RegistrableDomain *)(a2 + 8));
  v8 = WebKit::PCM::Database::ensureDomainID((WebCore::SQLiteStatement **)a1, (const WebCore::RegistrableDomain *)(a2 + 16));
  if (HIDWORD(v7) && HIDWORD(v8))
  {
    if (a3)
    {
      v9 = *(unsigned __int8 *)(a2 + 184);
      v3 = -1.0;
      if (*(_BYTE *)(a2 + 200))
        v10 = *(double *)(a2 + 192);
      else
        v10 = -1.0;
      LOBYTE(v18[0]) = 0;
      v20 = 0;
      if (v9 && *(_BYTE *)(a2 + 176))
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>(v18, a2 + 152);
        v20 = 1;
      }
      if (*(_BYTE *)(a2 + 216))
        v3 = *(double *)(a2 + 208);
      v11 = (WebCore::SQLiteDatabase *)(a1 + 16);
      WebCore::SQLiteDatabase::prepareStatement();
      if (!*(_DWORD *)((char *)&v30 + 2)
        && !WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v27))
      {
        if (*(_DWORD *)((char *)&v30 + 2))
          goto LABEL_76;
        if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v27))
        {
          if (*(_DWORD *)((char *)&v30 + 2))
            goto LABEL_76;
          if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v27))
          {
            if (*(_DWORD *)((char *)&v30 + 2))
              goto LABEL_76;
            if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v27))
            {
              if (*(_DWORD *)((char *)&v30 + 2))
                goto LABEL_76;
              if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v27))
              {
                if (*(_DWORD *)((char *)&v30 + 2))
                  goto LABEL_76;
                if (!WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v27, *(double *)(a2 + 24)))
                {
                  if (*(_DWORD *)((char *)&v30 + 2))
                    goto LABEL_76;
                  if (!WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v27, v10))
                  {
                    if (*(_DWORD *)((char *)&v30 + 2))
                      goto LABEL_76;
                    if (!WebCore::SQLiteStatement::bindText())
                    {
                      if (*(_DWORD *)((char *)&v30 + 2))
                        goto LABEL_76;
                      if (!WebCore::SQLiteStatement::bindText())
                      {
                        if (*(_DWORD *)((char *)&v30 + 2))
                          goto LABEL_76;
                        while (!WebCore::SQLiteStatement::bindText())
                        {
                          if (!*(_DWORD *)((char *)&v30 + 2))
                          {
                            if (WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v27, v3))
                              break;
                            if (!*(_DWORD *)((char *)&v30 + 2))
                            {
                              if (WebCore::SQLiteStatement::bindText())
                                break;
                              if (!*(_DWORD *)((char *)&v30 + 2))
                              {
                                if (WebCore::SQLiteStatement::bindText())
                                  break;
                                if (!*(_DWORD *)((char *)&v30 + 2))
                                {
                                  if (WebCore::SQLiteStatement::bindText())
                                    break;
                                  if (!*(_DWORD *)((char *)&v30 + 2))
                                  {
                                    if (WebCore::SQLiteStatement::bindText())
                                      break;
                                    if (!*(_DWORD *)((char *)&v30 + 2))
                                    {
                                      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v27) == 101)
                                        goto LABEL_46;
                                      break;
                                    }
                                  }
                                }
                              }
                            }
                          }
LABEL_76:
                          std::__throw_bad_variant_access[abi:sn180100]();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v13 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
      {
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v11);
        *(_DWORD *)buf = 134218243;
        v24 = a1;
        v25 = 2081;
        v26 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "%p - Database::insertPrivateClickMeasurement insertAttributedPrivateClickMeasurementQuery, error message: %{private}s", buf, 0x16u);
      }
LABEL_46:
      if (*(_DWORD *)((char *)&v30 + 2) != -1)
        (*(&off_1E34C2F78 + *(unsigned int *)((char *)&v30 + 2)))((int)buf, (WebCore::SQLiteStatement *)v27);
      std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v12);
    }
    else
    {
      v11 = (WebCore::SQLiteDatabase *)(a1 + 16);
      WebCore::SQLiteDatabase::prepareStatement();
      if (v19 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v18))
        goto LABEL_67;
      if (v19)
        goto LABEL_76;
      if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v18))
        goto LABEL_67;
      if (v19)
        goto LABEL_76;
      if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v18))
        goto LABEL_67;
      if (v19)
        goto LABEL_76;
      if (WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v18, *(double *)(a2 + 24)))
        goto LABEL_67;
      if (v19)
        goto LABEL_76;
      if (WebCore::SQLiteStatement::bindText())
        goto LABEL_67;
      if (v19)
        goto LABEL_76;
      if (WebCore::SQLiteStatement::bindText())
        goto LABEL_67;
      if (v19)
        goto LABEL_76;
      if (WebCore::SQLiteStatement::bindText())
        goto LABEL_67;
      if (v19)
        goto LABEL_76;
      if (WebCore::SQLiteStatement::bindText())
        goto LABEL_67;
      if (v19)
        goto LABEL_76;
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v18) != 101)
      {
LABEL_67:
        v14 = qword_1ECE715F0;
        if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
        {
          v17 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
          *(_DWORD *)v27 = 134218243;
          v28 = a1;
          v29 = 2081;
          v30 = v17;
          _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "%p - Database::insertPrivateClickMeasurement insertUnattributedPrivateClickMeasurementQuery, error message: %{private}s", v27, 0x16u);
        }
      }
      if (v19 != -1)
        (*(&off_1E34C2F78 + v19))((int)v27, (WebCore::SQLiteStatement *)v18);
    }
  }
  v15 = v21;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  }
  else if (!v21)
  {
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
}

uint64_t WebKit::PCM::Database::ensureDomainID(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v14;
  uint8_t buf[4];
  WebCore::SQLiteStatement **v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = WebKit::PCM::Database::domainID(this, a2);
  v5 = v4 >> 8;
  if (HIDWORD(v4))
  {
    v8 = v4;
    v7 = v4 & 0x100000000;
    return v7 & 0x100000000 | v8 | ((_DWORD)v5 << 8);
  }
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 26, (uint64_t)"insertObservedDomain", (WebCore::SQLiteStatementAutoResetScope *)&v14);
  if (!v14 || WebCore::SQLiteStatement::bindText())
  {
    v6 = qword_1ECE715F0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
    *(_DWORD *)buf = 134218243;
    v16 = this;
    v17 = 2081;
    v18 = ErrorMsg;
    v12 = "%p - Database::ensureDomainID failed to bind, error message: %{private}s";
LABEL_14:
    _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, v12, buf, 0x16u);
    goto LABEL_5;
  }
  if (WebCore::SQLiteStatement::step(v14) == 101)
  {
    v10 = WebKit::PCM::Database::domainID(this, a2);
    v8 = v10;
    v5 = v10 >> 8;
    v7 = v10 & 0x100000000;
    goto LABEL_6;
  }
  v6 = qword_1ECE715F0;
  if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
  {
    v11 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
    *(_DWORD *)buf = 134218243;
    v16 = this;
    v17 = 2081;
    v18 = v11;
    v12 = "%p - Database::ensureDomainID failed to commit, error message: %{private}s";
    goto LABEL_14;
  }
LABEL_5:
  v7 = 0;
  v8 = 0;
LABEL_6:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v14);
  return v7 & 0x100000000 | v8 | ((_DWORD)v5 << 8);
}

uint64_t WebKit::PCM::Database::domainID(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v8;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v10;
  uint8_t buf[4];
  WebCore::SQLiteStatement **v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 24, (uint64_t)"domainID", (WebCore::SQLiteStatementAutoResetScope *)&v10);
  if (v10 && !WebCore::SQLiteStatement::bindText())
  {
    if (WebCore::SQLiteStatement::step(v10) == 100)
    {
      v8 = WebCore::SQLiteStatement::columnInt(v10);
      v6 = v8 & 0xFFFFFF00;
      v5 = v8;
      v4 = 0x100000000;
      goto LABEL_6;
    }
  }
  else
  {
    v3 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218243;
      v12 = this;
      v13 = 2081;
      v14 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "%p - Database::domainIDFromString failed. Error message: %{private}s", buf, 0x16u);
    }
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
LABEL_6:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v10);
  return v4 | v6 | v5;
}

void WebKit::PCM::Database::clearExpiredPrivateClickMeasurement(WebCore::SQLiteStatement **this)
{
  WebCore::PrivateClickMeasurement *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v9;
  uint8_t buf[4];
  WebCore::SQLiteStatement **v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (WebCore::PrivateClickMeasurement *)WTF::WallTime::now((WTF::WallTime *)this);
  v4 = v3;
  WebCore::PrivateClickMeasurement::maxAge(v2);
  v6 = v5;
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 20, (uint64_t)"clearExpiredPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v9);
  if (!v9
    || WebCore::SQLiteStatement::bindDouble(v9, v4 - v6)
    || WebCore::SQLiteStatement::step(v9) != 101)
  {
    v7 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218243;
      v11 = this;
      v12 = 2081;
      v13 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - Database::clearExpiredPrivateClickMeasurement, error message: %{private}s", buf, 0x16u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v9);
}

char *WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(char *result, _BYTE *a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, char *a6, uint64_t a7)
{
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char *v14;
  unsigned __int8 v15;
  unsigned int v16;
  int v17;
  unsigned __int8 v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  _DWORD *v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  char *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  unsigned __int8 v37;
  unsigned int v38;
  char *v39;
  int v40;
  unsigned int v41;
  _DWORD *v42;

  if (a3)
    v7 = a3 - 1;
  else
    v7 = 0;
  if (v7 >> 31)
  {
    __break(0xC471u);
    goto LABEL_54;
  }
  if (a7)
    v8 = a7 - 1;
  else
    v8 = 0;
  v9 = v8 >> 31;
  if (v8 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197143EE8);
  }
  v11 = a5;
  v12 = a4;
  v14 = result;
  v15 = a4;
  do
  {
    LODWORD(v9) = v9 + 1;
    v16 = v15;
    v15 /= 0xAu;
  }
  while (v16 > 9);
  v17 = 0;
  v18 = a5;
  do
  {
    ++v17;
    v19 = v18;
    v18 /= 0xAu;
  }
  while (v19 > 9);
  if (((v17 | v8) & 0x80000000) != 0)
    goto LABEL_53;
  v20 = __OFADD__(v17, (_DWORD)v8);
  v21 = v17 + v8;
  if (v20)
    goto LABEL_53;
  v20 = __OFADD__(v21, 17);
  v22 = v21 + 17;
  v23 = v20;
  if ((v9 & 0x80000000) != 0 || v23)
    goto LABEL_53;
  v20 = __OFADD__((_DWORD)v9, v22);
  v24 = v9 + v22;
  v25 = v20;
  if ((v7 & 0x80000000) != 0)
    goto LABEL_53;
  if (v25)
    goto LABEL_53;
  v26 = (v7 + v24);
  if (__OFADD__((_DWORD)v7, v24))
    goto LABEL_53;
  if (!(_DWORD)v26)
  {
    v27 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_47;
  }
  if ((v26 & 0x80000000) != 0 || (result = (char *)WTF::tryFastCompactMalloc((WTF *)(v26 + 20)), (v27 = v42) == 0))
  {
LABEL_53:
    *(_QWORD *)v14 = 0;
    __break(0xC471u);
LABEL_54:
    JUMPOUT(0x197143EC8);
  }
  v28 = v42 + 5;
  *v42 = 2;
  v27[1] = v26;
  *((_QWORD *)v27 + 1) = v27 + 5;
  v27[4] = 4;
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 == 1)
      *v28 = *a2;
    else
      result = (char *)memcpy(v27 + 5, a2, v7);
  }
  v29 = 0;
  v30 = v12;
  do
  {
    v31 = v30;
    *((_BYTE *)&v42 + v29-- + 3) = (v30 % 0xAu) | 0x30;
    v30 /= 0xAu;
  }
  while (v31 > 9);
  v32 = &v28[v7];
  if (v29 + 5 <= 4)
    result = (char *)memcpy(v32, (char *)&v42 + v29 + 4, -v29);
  v33 = 0;
  do
  {
    ++v33;
    v34 = v12;
    v12 /= 0xAu;
  }
  while (v34 > 9);
  v35 = 0;
  v36 = &v32[v33];
  *(_OWORD *)v36 = *(_OWORD *)"' and priority: '";
  v36[16] = 39;
  v37 = v11;
  do
  {
    v38 = v37;
    *((_BYTE *)&v42 + v35-- + 3) = (v37 % 0xAu) | 0x30;
    v37 /= 0xAu;
  }
  while (v38 > 9);
  v39 = v36 + 17;
  if (v35 + 5 <= 4)
    result = (char *)memcpy(v39, (char *)&v42 + v35 + 4, -v35);
  v40 = 0;
  do
  {
    ++v40;
    v41 = v11;
    v11 /= 0xAu;
  }
  while (v41 > 9);
  if ((_DWORD)v8)
  {
    result = &v39[v40];
    if ((_DWORD)v8 == 1)
      *result = *a6;
    else
      result = (char *)memcpy(result, a6, v8);
  }
LABEL_47:
  *(_QWORD *)v14 = v27;
  return result;
}

void WebKit::PCM::Database::allAttributedPrivateClickMeasurement(WebKit::PCM::Database *this, uint64_t a2)
{
  WebCore::SQLiteStatement *v4;
  NSObject *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::scopedStatement(a2, (WebCore::SQLiteStatement **)(a2 + 136), (uint64_t)"allAttributedPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v9);
  v4 = v9;
  if (v9)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    if (WebCore::SQLiteStatement::step(v4) == 100)
    {
      do
      {
        WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v9, a2, 1, (uint64_t)buf);
        v6 = *((_DWORD *)this + 3);
        if (v6 == *((_DWORD *)this + 2))
        {
          WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PrivateClickMeasurement>((uint64_t)this, (unint64_t)buf);
        }
        else
        {
          WebCore::PrivateClickMeasurement::PrivateClickMeasurement(*(_QWORD *)this + 312 * v6, (uint64_t)buf);
          ++*((_DWORD *)this + 3);
        }
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v7);
      }
      while (WebCore::SQLiteStatement::step(v9) == 100);
    }
  }
  else
  {
    v5 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a2 + 16));
      *(_DWORD *)buf = 134218243;
      v11 = a2;
      v12 = 2081;
      v13 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - Database::allAttributedPrivateClickMeasurement, error message: %{private}s", buf, 0x16u);
    }
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v9);
}

WTF::StringImpl *WebKit::PCM::Database::attributionToStringForTesting(WebKit::PCM::Database *this, const WebCore::PrivateClickMeasurement *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  int v7;
  int i;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _WORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  int v42;
  unsigned __int8 v43;
  int v44;
  unsigned __int8 v45;
  unsigned int v46;
  int v47;
  unsigned __int8 v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t k;
  uint64_t v53;
  unsigned __int8 v54;
  unsigned int v55;
  _WORD *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned int v64;
  _WORD *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  char *v77;
  unsigned __int8 v78;
  unsigned int v79;
  char *v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t m;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *result;
  WTF::StringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108[2];
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  char v112;
  uint64_t v113;
  uint64_t v114;

  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    *(_DWORD *)v4 += 2;
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    *(_DWORD *)v5 += 2;
  v6 = *(_BYTE *)a2;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 1;
  if (!v4)
    goto LABEL_155;
  v7 = *(_DWORD *)(v4 + 4);
  if (!v5)
    goto LABEL_156;
LABEL_7:
  for (i = *(_DWORD *)(v5 + 4); ; i = 0)
  {
    v9 = 12;
    v10 = v6;
    do
    {
      v11 = v9;
      v12 = v10;
      v10 /= 0xAu;
      ++v9;
    }
    while (v12 > 9);
    v13 = v9 > 0xB ? v11 + 1 : -1;
    v14 = __CFADD__(v13, i);
    v15 = v13 + i;
    if (v14 || v15 >= 0xFFFFFFEC)
      v16 = -1;
    else
      v16 = v15 + 20;
    v14 = __CFADD__(v16, v7);
    v17 = v16 + v7;
    if (v14 || v17 >= 0xFFFFFFF3)
    {
      v18 = 0xFFFFFFFFLL;
      if (!v4)
        goto LABEL_20;
    }
    else
    {
      v18 = v17 + 13;
      if (!v4)
        goto LABEL_20;
    }
    if ((*(_BYTE *)(v4 + 16) & 4) == 0)
      goto LABEL_22;
LABEL_20:
    if (v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
    {
LABEL_22:
      v19 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v109);
      if (v19)
      {
        v20 = v19;
        for (j = 0; j != 13; ++j)
          *(_WORD *)(v19 + 2 * j) = aSourceSite[j];
        v114 = v4;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v114, (char *)(v19 + 26));
        v22 = v114 ? *(unsigned int *)(v114 + 4) : 0;
        v23 = 0;
        v24 = v20 + 26 + 2 * v22;
        do
        {
          *(_WORD *)(v24 + 2 * v23) = aAttributeOnSit[v23];
          ++v23;
        }
        while (v23 != 20);
        v25 = v24 + 40;
        v108[0] = v5;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v108, (char *)(v24 + 40));
        v26 = v108[0] ? *(unsigned int *)(v108[0] + 4) : 0;
        v27 = 0;
        v28 = v25 + 2 * v26;
        v29 = 2 * v22 + 2 * v26 + v20 + 66;
        do
        {
          *(_WORD *)(v29 + 2 * v27) = aSourceId[v27];
          ++v27;
        }
        while (v27 != 12);
        v30 = 0;
        do
        {
          v31 = v6;
          *((_BYTE *)&v113 + v30-- + 3) = (v6 % 0xAu) | 0x30;
          v6 /= 0xAu;
        }
        while (v31 > 9);
        if (v30 + 5 <= 4)
        {
          v32 = (_WORD *)(v28 + 24);
          do
          {
            *v32++ = *((unsigned __int8 *)&v113 + v30 + 4);
            v14 = __CFADD__(v30++, 1);
          }
          while (!v14);
        }
      }
      goto LABEL_49;
    }
    v33 = (char *)MEMORY[0x19AEAB398](&v109, v18);
    if (v33)
    {
      qmemcpy(v33, "Source site: ", 13);
      v34 = v33 + 13;
      v114 = v4;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v114, v33 + 13);
      v35 = v114;
      if (v114)
        v35 = *(unsigned int *)(v114 + 4);
      v36 = &v34[v35];
      *(_OWORD *)v36 = *(_OWORD *)"\nAttribute on site: ";
      *((_DWORD *)v36 + 4) = 540697972;
      v37 = v36 + 20;
      v108[0] = v5;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v108, v36 + 20);
      v38 = v108[0];
      if (v108[0])
        v38 = *(unsigned int *)(v108[0] + 4);
      v39 = 0;
      v40 = &v37[v38];
      *(_QWORD *)v40 = *(_QWORD *)"\nSource ID: ";
      *((_DWORD *)v40 + 2) = 540689481;
      do
      {
        v41 = v6;
        *((_BYTE *)&v113 + v39-- + 3) = (v6 % 0xAu) | 0x30;
        v6 /= 0xAu;
      }
      while (v41 > 9);
      if (v39 + 5 <= 4)
        memcpy(v40 + 12, (char *)&v113 + v39 + 4, -v39);
    }
LABEL_49:
    if (!*((_BYTE *)a2 + 184))
      goto LABEL_120;
    v42 = 0;
    v43 = *((_BYTE *)a2 + 56);
    v6 = *((_BYTE *)a2 + 57);
    v44 = *((unsigned __int8 *)a2 + 200);
    v45 = v43;
    do
    {
      ++v42;
      v46 = v45;
      v45 /= 0xAu;
    }
    while (v46 > 9);
    v47 = 59;
    v48 = *((_BYTE *)a2 + 57);
    do
    {
      v49 = v48;
      v48 /= 0xAu;
      ++v47;
    }
    while (v49 > 9);
    v50 = v110;
    if (!v110)
    {
      v50 = v109;
      if (!v109)
        goto LABEL_82;
    }
    if ((*((_BYTE *)v50 + 16) & 4) == 0)
    {
      v51 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v109);
      if (v51)
      {
        for (k = 0; k != 27; ++k)
          *(_WORD *)(v51 + 2 * k) = aAttributionTri[k];
        v53 = 0;
        v54 = v43;
        do
        {
          v55 = v54;
          *((_BYTE *)v108 + v53-- + 3) = (v54 % 0xAu) | 0x30;
          v54 /= 0xAu;
        }
        while (v55 > 9);
        if (v53 + 5 <= 4)
        {
          v56 = (_WORD *)(v51 + 54);
          do
          {
            *v56++ = *((unsigned __int8 *)v108 + v53 + 4);
            v14 = __CFADD__(v53++, 1);
          }
          while (!v14);
        }
        v57 = 0;
        do
        {
          ++v57;
          v58 = v43;
          v43 /= 0xAu;
        }
        while (v58 > 9);
        v59 = 0;
        v60 = v51 + 54 + 2 * v57;
        v61 = v51 + 2 * v57;
        do
        {
          *(_WORD *)(v61 + 54 + 2 * v59) = aAttributionPri[v59];
          ++v59;
        }
        while (v59 != 23);
        v62 = 0;
        v63 = v6;
        do
        {
          v64 = v63;
          *((_BYTE *)v108 + v62-- + 3) = (v63 % 0xAu) | 0x30;
          v63 /= 0xAu;
        }
        while (v64 > 9);
        if (v62 + 5 <= 4)
        {
          v65 = (_WORD *)(v60 + 46);
          do
          {
            *v65++ = *((unsigned __int8 *)v108 + v62 + 4);
            v14 = __CFADD__(v62++, 1);
          }
          while (!v14);
        }
        v66 = 0;
        do
        {
          ++v66;
          v67 = v6;
          v6 /= 0xAu;
        }
        while (v67 > 9);
        v68 = 0;
        v69 = v61 + 2 * v66 + 100;
        do
        {
          *(_WORD *)(v69 + 2 * v68) = aAttributionEar[v68];
          ++v68;
        }
        while (v68 != 36);
      }
    }
    else
    {
LABEL_82:
      v51 = MEMORY[0x19AEAB398](&v109);
      if (v51)
      {
        v70 = 0;
        qmemcpy((void *)v51, "\nAttribution trigger data: ", 27);
        v71 = v43;
        do
        {
          v72 = v71;
          *((_BYTE *)v108 + v70-- + 3) = (v71 % 0xAu) | 0x30;
          v71 /= 0xAu;
        }
        while (v72 > 9);
        v73 = v51 + 27;
        if (v70 + 5 <= 4)
          v51 = (uint64_t)memcpy((void *)(v51 + 27), (char *)v108 + v70 + 4, -v70);
        v74 = 0;
        do
        {
          ++v74;
          v75 = v43;
          v43 /= 0xAu;
        }
        while (v75 > 9);
        v76 = 0;
        v77 = (char *)(v73 + v74);
        qmemcpy(v77, "\nAttribution priority: ", 23);
        v78 = v6;
        do
        {
          v79 = v78;
          *((_BYTE *)v108 + v76-- + 3) = (v78 % 0xAu) | 0x30;
          v78 /= 0xAu;
        }
        while (v79 > 9);
        v80 = v77 + 23;
        if (v76 + 5 <= 4)
          v51 = (uint64_t)memcpy(v80, (char *)v108 + v76 + 4, -v76);
        v81 = 0;
        do
        {
          ++v81;
          v82 = v6;
          v6 /= 0xAu;
        }
        while (v82 > 9);
        qmemcpy(&v80[v81], "\nAttribution earliest time to send: ", 36);
      }
    }
    if (v44)
      WTF::WallTime::now((WTF::WallTime *)v51);
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    if (*((_BYTE *)a2 + 184))
      break;
    __break(1u);
LABEL_155:
    v7 = 0;
    if (v5)
      goto LABEL_7;
LABEL_156:
    ;
  }
  if (!*((_BYTE *)a2 + 176))
  {
LABEL_120:
    WTF::StringBuilder::append();
    goto LABEL_121;
  }
  v84 = *((_QWORD *)a2 + 19);
  v83 = *((_QWORD *)a2 + 20);
  v85 = *((_QWORD *)a2 + 21);
  v86 = v110;
  if ((v110 || (v86 = v109) != 0) && (*((_BYTE *)v86 + 16) & 4) == 0
    || v84 && (*(_BYTE *)(v84 + 16) & 4) == 0
    || v83 && (*(_BYTE *)(v83 + 16) & 4) == 0
    || v85 && (*(_BYTE *)(v85 + 16) & 4) == 0)
  {
    v87 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v109);
    if (v87)
    {
      v88 = v87;
      for (m = 0; m != 8; ++m)
        *(_WORD *)(v87 + 2 * m) = aToken[m];
      v113 = v84;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v113, (char *)(v87 + 16));
      if (v113)
        v90 = *(unsigned int *)(v113 + 4);
      else
        v90 = 0;
      v91 = 0;
      v92 = v88 + 16 + 2 * v90;
      do
      {
        *(_WORD *)(v92 + 2 * v91) = aSignature[v91];
        ++v91;
      }
      while (v91 != 12);
      v93 = v92 + 24;
      v114 = v83;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v114, (char *)(v92 + 24));
      if (v114)
        v94 = *(unsigned int *)(v114 + 4);
      else
        v94 = 0;
      v95 = 0;
      v96 = v93 + 2 * v94;
      v97 = 2 * v90 + 2 * v94 + v88 + 40;
      do
      {
        *(_WORD *)(v97 + 2 * v95) = aKey_0[v95];
        ++v95;
      }
      while (v95 != 6);
      v108[0] = v85;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v108, (char *)(v96 + 12));
    }
  }
  else
  {
    v101 = MEMORY[0x19AEAB398](&v109);
    if (v101)
    {
      *(_QWORD *)v101 = 0x203A6E656B6F740ALL;
      v102 = v101 + 8;
      v113 = v84;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v113, (char *)(v101 + 8));
      v103 = v113;
      if (v113)
        v103 = *(unsigned int *)(v113 + 4);
      v104 = v102 + v103;
      *(_QWORD *)v104 = *(_QWORD *)"\nsignature: ";
      *(_DWORD *)(v104 + 8) = 540697970;
      v105 = v104 + 12;
      v114 = v83;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v114, (char *)(v104 + 12));
      v106 = v114;
      if (v114)
        v106 = *(unsigned int *)(v114 + 4);
      v107 = v105 + v106;
      *(_WORD *)(v107 + 4) = 8250;
      *(_DWORD *)v107 = 2036689674;
      v108[0] = v85;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v108, (char *)(v107 + 6));
    }
  }
LABEL_121:
  v108[0] = (uint64_t)"\nApplication bundle identifier: ";
  v108[1] = 33;
  LOBYTE(v114) = 10;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>((WTF::StringBuilder *)&v109, v108, (uint64_t *)a2 + 38, (char *)&v114);
  result = v109;
  if (v109
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v109),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v109),
        (result = v109) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *(_QWORD *)this = result;
  v100 = v110;
  v110 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::destroy(v100, v98);
      result = v109;
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v109 = 0;
  if (!result)
  {
LABEL_131:
    if (v5)
      goto LABEL_134;
LABEL_136:
    if (v4)
      goto LABEL_139;
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_131;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v98);
  if (!v5)
    goto LABEL_136;
LABEL_134:
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_136;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v98);
  if (v4)
  {
LABEL_139:
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v4, v98);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::StringBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int8x16_t *v9;
  int v10;
  int8x16_t *v11;
  int v12;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = v3 != 0;
  v5 = v3 - 1;
  if (!v4)
    v5 = 0;
  v11 = *(int8x16_t **)a2;
  if (v5 >> 31)
    goto LABEL_8;
  v12 = v5;
  v6 = *(_QWORD *)(a3 + 8);
  v4 = v6 != 0;
  v7 = v6 - 1;
  if (!v4)
    v7 = 0;
  v9 = *(int8x16_t **)a3;
  if (v7 >> 31)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x197144CA4);
  }
  v10 = v7;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, &v11, &v9);
}

void WebKit::PCM::Database::clearPrivateClickMeasurement(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  unint64_t v3;
  WTF::StringImpl *v4;
  NSObject *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v9;
  uint64_t v10;
  char v11;
  _BYTE buf[12];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 8))
  {
    v3 = WebKit::PCM::Database::domainID(this, a2);
    if (!HIDWORD(v3))
      return;
    WTF::String::number((WTF::String *)v3);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  v4 = *(WTF::StringImpl **)buf;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)&v10);
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 19, (uint64_t)"clearPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v9);
  if (!v9
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(v9) != 101)
  {
    v5 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218243;
      *(_QWORD *)&buf[4] = this;
      v13 = 2081;
      v14 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - ResourceLoadStatisticsStore::clearPrivateClickMeasurement clearAllPrivateClickMeasurementScopedStatement, error message: %{private}s", buf, 0x16u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v9);
  v7 = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  else if (!v10)
  {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_14:
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void WebKit::PCM::Database::getDomainStringFromDomainID(WebCore::SQLiteStatement **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  NSObject *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t ErrorMsg;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebCore::SQLiteStatement *v11;
  _BYTE buf[12];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v4 += 2;
  *a2 = v4;
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 25, (uint64_t)"getDomainStringFromDomainID", (WebCore::SQLiteStatementAutoResetScope *)&v11);
  if (v11 && !WebCore::SQLiteStatement::bindInt(v11))
  {
    if (WebCore::SQLiteStatement::step(v11) == 100)
    {
      WebCore::SQLiteStatement::columnText(this[25]);
      v7 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      *a2 = v7;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
        {
          WTF::StringImpl::destroy(v4, v6);
          v10 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v9);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  else
  {
    v5 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218243;
      *(_QWORD *)&buf[4] = this;
      v13 = 2081;
      v14 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - Database::getDomainStringFromDomainID. Statement failed to prepare or bind, error message: %{private}s", buf, 0x16u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v11);
}

WebCore::SQLiteStatement *WebKit::PCM::Database::destroyStatements(WebCore::SQLiteStatement **this)
{
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 13, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 14, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 15, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 16, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 17, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 18, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 19, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 20, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 21, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 22, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 23, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 24, 0);
  std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 25, 0);
  return std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](this + 26, 0);
}

void WebKit::PCM::EphemeralStore::~EphemeralStore(WebKit::PCM::EphemeralStore *this, WTF::StringImpl *a2)
{
  *(_QWORD *)this = off_1E34C2D38;
  if (*((_BYTE *)this + 328))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::PCM::EphemeralStore *)((char *)this + 16), a2);
}

{
  *(_QWORD *)this = off_1E34C2D38;
  if (*((_BYTE *)this + 328))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::PCM::EphemeralStore *)((char *)this + 16), a2);
  WTF::fastFree(this, a2);
}

uint64_t WebKit::PCM::EphemeralStore::insertPrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;

  std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>(a1 + 16, a2);
  v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void WebKit::PCM::EphemeralStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(WebKit::PCM::EphemeralStore *this, WTF::StringImpl *a2)
{
  if (*((_BYTE *)this + 328))
  {
    if (!*((_BYTE *)this + 200))
    {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::PCM::EphemeralStore *)((char *)this + 16), a2);
      *((_BYTE *)this + 328) = 0;
    }
  }
}

uint64_t WebKit::PCM::EphemeralStore::attributePrivateClickMeasurement(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3, const WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t result;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  char v20;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0;
  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_11;
  result = WTF::equal(*(WTF **)(a1 + 24), *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_11;
  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_13;
  result = WTF::equal(*(WTF **)(a1 + 32), *(const WTF::StringImpl **)a3, v12);
  if ((result & 1) == 0)
    goto LABEL_11;
  v14 = *a4;
  if (*a4 && *((_DWORD *)v14 + 1))
  {
    if (!*(_BYTE *)(a1 + 328))
      goto LABEL_13;
    result = WTF::equal(*(WTF **)(a1 + 320), v14, v13);
    if ((result & 1) == 0)
    {
LABEL_11:
      LOBYTE(v19[0]) = 0;
      v20 = 0;
      goto LABEL_12;
    }
  }
  if (*(_BYTE *)(a1 + 328))
  {
    WebCore::PrivateClickMeasurement::attributeAndGetEarliestTimeToSend();
    v19[0] = v17;
    v19[1] = v18;
    v20 = 1;
LABEL_12:
    v15 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _OWORD *, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v19, v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return (uint64_t)WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v21, v16);
  }
LABEL_13:
  __break(1u);
  return result;
}

WTF::StringImpl *WebKit::PCM::EphemeralStore::privateClickMeasurementToStringForTesting(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const char *v11;
  uint64_t v12;
  char v13;
  const char *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;
  WTF::StringImpl *v20;

  if (!*(_BYTE *)(a1 + 328))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v20);
    result = v20;
    v20 = 0;
    if (!result)
      return result;
    goto LABEL_23;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  result = (WTF::StringImpl *)WTF::StringBuilder::append();
  v11 = "SourceSite: ";
  v12 = 13;
  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_27;
  v14 = "\n";
  v15 = 2;
  result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (uint64_t)&v11, (uint64_t *)(a1 + 24), (uint64_t)&v14);
  v11 = "DestinationSite: ";
  v12 = 18;
  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_27;
  v14 = "\n";
  v15 = 2;
  result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (uint64_t)&v11, (uint64_t *)(a1 + 32), (uint64_t)&v14);
  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_27;
  result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (int8x16_t *)"SourceID: ", 11, *(_BYTE *)(a1 + 16), (int8x16_t *)"\n", 2);
  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_27;
  LOBYTE(v11) = 0;
  v13 = 0;
  if (*(_BYTE *)(a1 + 200))
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData const&,WebCore::PCM::AttributionTriggerData*>((uint64_t)&v11, a1 + 72);
    v13 = 1;
    result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (int8x16_t *)"Trigger data: ", 15, v11, (int8x16_t *)"\n", 2);
    if (v13)
    {
      WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (int8x16_t *)"Trigger priority: ", 19, BYTE1(v11), (int8x16_t *)"\n", 2);
      goto LABEL_9;
    }
LABEL_27:
    __break(1u);
    return result;
  }
LABEL_9:
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v5);
  v6 = v16;
  if (v16
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16),
        (v6 = v16) != 0))
  {
    *(_DWORD *)v6 += 2;
  }
  v10 = v6;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v17;
  v17 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
LABEL_23:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, unsigned __int8 a4, int8x16_t *a5, uint64_t a6)
{
  size_t v6;
  unint64_t v7;
  unsigned __int8 v9;
  int v11;
  unsigned __int8 v12;
  unsigned int v13;
  uint64_t v14;
  char *result;
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned int v28;
  char *v29;
  int v31;
  unsigned int v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE v50[16];
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;

  if (a3)
    v6 = a3 - 1;
  else
    v6 = 0;
  if (v6 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197145888);
  }
  if (a6)
    v7 = a6 - 1;
  else
    v7 = 0;
  if (v7 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1971458A8);
  }
  v9 = a4;
  v11 = 0;
  v12 = a4;
  do
  {
    ++v11;
    v13 = v12;
    v12 /= 0xAu;
  }
  while (v13 > 9);
  v14 = *((_QWORD *)a1 + 1);
  if ((v14 || (v14 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v16 = &result[2 * v6];
      if ((v6 & 0xFFFFFFC0) != 0)
      {
        v17 = &result[2 * (v6 & 0xFFFFFFC0)];
        v18 = 0uLL;
        do
        {
          v51.val[0] = *a2;
          v19 = a2[1];
          v53.val[0] = a2[2];
          v20 = a2[3];
          a2 += 4;
          v21 = v20;
          v53.val[1] = 0uLL;
          v55.val[0] = v19;
          v51.val[1] = 0uLL;
          v22 = result;
          vst2q_s8(v22, v51);
          v22 += 32;
          v55.val[1] = 0uLL;
          vst2q_s8(v22, v55);
          v23 = result + 64;
          vst2q_s8(v23, v53);
          v24 = result + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
          result += 128;
        }
        while (result != v17);
        result = v17;
      }
      while (result != v16)
      {
        v25 = a2->u8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        *(_WORD *)result = v25;
        result += 2;
      }
      v26 = 0;
      v27 = v9;
      do
      {
        v28 = v27;
        v50[v26-- + 7] = (v27 % 0xAu) | 0x30;
        v27 /= 0xAu;
      }
      while (v28 > 9);
      if (v26 + 5 <= 4)
      {
        v29 = v16;
        do
        {
          *(_WORD *)v29 = v50[v26 + 8];
          v29 += 2;
        }
        while (!__CFADD__(v26++, 1));
      }
      v31 = 0;
      do
      {
        ++v31;
        v32 = v9;
        v9 /= 0xAu;
      }
      while (v32 > 9);
      v33 = &v16[2 * v31];
      v34 = &v33[2 * v7];
      if ((v7 & 0xFFFFFFC0) != 0)
      {
        v35 = &v33[2 * (v7 & 0xFFFFFFC0)];
        v36 = 0uLL;
        do
        {
          v52.val[0] = *a5;
          v37 = a5[1];
          v54.val[0] = a5[2];
          v38 = a5[3];
          a5 += 4;
          v39 = v38;
          v54.val[1] = 0uLL;
          v56.val[0] = v37;
          v52.val[1] = 0uLL;
          v40 = v33;
          vst2q_s8(v40, v52);
          v40 += 32;
          v56.val[1] = 0uLL;
          vst2q_s8(v40, v56);
          v41 = v33 + 64;
          vst2q_s8(v41, v54);
          v42 = v33 + 96;
          vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
          v33 += 128;
        }
        while (v33 != v35);
        v33 = v35;
      }
      while (v33 != v34)
      {
        v43 = a5->u8[0];
        a5 = (int8x16_t *)((char *)a5 + 1);
        *(_WORD *)v33 = v43;
        v33 += 2;
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEAB398]();
    if (result)
    {
      v44 = result;
      if ((_DWORD)v6)
      {
        if ((_DWORD)v6 == 1)
          *result = a2->i8[0];
        else
          result = (char *)memcpy(result, a2, v6);
      }
      v45 = 0;
      v46 = v9;
      do
      {
        v47 = v46;
        v50[v45-- + 3] = (v46 % 0xAu) | 0x30;
        v46 /= 0xAu;
      }
      while (v47 > 9);
      if (v45 + 5 <= 4)
        result = (char *)memcpy(&v44[v6], &v50[v45 + 4], -v45);
      v48 = 0;
      do
      {
        ++v48;
        v49 = v9;
        v9 /= 0xAu;
      }
      while (v49 > 9);
      if ((_DWORD)v7)
      {
        result = &v44[v6 + v48];
        if ((_DWORD)v7 == 1)
          *result = a5->i8[0];
        else
          return (char *)memcpy(result, a5, v7);
      }
    }
  }
  return result;
}

void WebKit::PCM::EphemeralStore::allAttributedPrivateClickMeasurement(_BYTE *a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::PrivateClickMeasurement *v8;
  int v9;
  int v10;
  _QWORD v11[40];

  v11[39] = *MEMORY[0x1E0C80C00];
  if (a1[328] && a1[200])
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v11, (const WebCore::PrivateClickMeasurement *)(a1 + 16));
    v9 = 1;
    v8 = (WebCore::PrivateClickMeasurement *)WTF::fastMalloc((WTF *)0x138);
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement(v8, (const WebCore::PrivateClickMeasurement *)v11);
    v10 = 1;
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::PrivateClickMeasurement **))(*(_QWORD *)v3 + 16))(v3, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v11, v5);
  }
  else
  {
    v11[0] = 0;
    v11[1] = 0;
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v7);
  }
}

uint64_t WebKit::PCM::EphemeralStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(_BYTE *a1, WTF::StringImpl *a2)
{
  uint64_t v4;

  if (a1[328] && a1[200])
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), a2);
    a1[328] = 0;
  }
  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void WebKit::PCM::EphemeralStore::clearExpiredPrivateClickMeasurement(WebKit::PCM::EphemeralStore *this)
{
  WebCore::PrivateClickMeasurement *v2;
  double v3;
  double v4;
  WTF::StringImpl *v5;
  double v6;

  if (*((_BYTE *)this + 328))
  {
    v2 = (WebCore::PrivateClickMeasurement *)WTF::WallTime::now(this);
    if (*((_BYTE *)this + 328))
    {
      v4 = v3 - *((double *)this + 5);
      WebCore::PrivateClickMeasurement::maxAge(v2);
      if (v4 > v6)
      {
        if (*((_BYTE *)this + 328))
        {
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::PCM::EphemeralStore *)((char *)this + 16), v5);
          *((_BYTE *)this + 328) = 0;
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t WebKit::PCM::EphemeralStore::clearPrivateClickMeasurement(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 328))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), a2);
    *(_BYTE *)(a1 + 328) = 0;
  }
  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::PCM::EphemeralStore::clearPrivateClickMeasurementForRegistrableDomain(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_7;
  result = WTF::equal(*(WTF **)(a1 + 24), *a2, a3);
  if ((result & 1) != 0)
    goto LABEL_5;
  if (*(_BYTE *)(a1 + 328))
  {
    if (!WTF::equal(*(WTF **)(a1 + 32), *a2, v8))
    {
LABEL_7:
      v9 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
LABEL_5:
    if (*(_BYTE *)(a1 + 328))
    {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), v7);
      *(_BYTE *)(a1 + 328) = 0;
    }
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

void WebKit::PCM::EphemeralStore::clearSentAttribution(uint64_t a1, WTF::StringImpl *a2, char a3)
{
  char v4;
  char v5;

  if ((a3 & 1) != 0)
  {
    v4 = *((_BYTE *)a2 + 200);
    if (v4)
    {
      v5 = 0;
LABEL_6:
      *((_BYTE *)a2 + 200) = v4;
      *((_BYTE *)a2 + 216) = v5;
      std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>(a1 + 16, (uint64_t)a2);
      return;
    }
  }
  else
  {
    v5 = *((_BYTE *)a2 + 216);
    if (v5)
    {
      v4 = 0;
      goto LABEL_6;
    }
  }
  if (*(_BYTE *)(a1 + 328))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), a2);
    *(_BYTE *)(a1 + 328) = 0;
  }
}

uint64_t WebKit::PCM::EphemeralStore::close(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 328))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), a2);
    *(_BYTE *)(a1 + 328) = 0;
  }
  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::PrivateClickMeasurementManager::PrivateClickMeasurementManager(uint64_t a1, uint64_t *a2, _DWORD **a3)
{
  WTF::RunLoop::TimerBase *v6;
  WTF::RunLoop *v7;
  _DWORD *v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E34C2DB0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (WTF::RunLoop::TimerBase *)(a1 + 16);
  v7 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::RunLoop::Timer::Timer<WebKit::PrivateClickMeasurementManager>(v6, v7, a1, (uint64_t)WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests, 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v8 = *a3;
  if (*a3)
    *v8 += 2;
  *(_QWORD *)(a1 + 176) = v8;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 184) = v9;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) & 1) == 0)
    WTF::RunLoop::TimerBase::start();
  return a1;
}

uint64_t WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(WebKit::PrivateClickMeasurementManager *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 24))(*((_QWORD *)this + 23));
  if ((_DWORD)result)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore((uint64_t)this);
    v3 = *((_QWORD *)this + 21);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = &off_1E34C3210;
    v6[1] = this;
    v6[2] = v4;
    v7 = (uint64_t)v6;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 56))(v3, &v7);
    result = v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::PrivateClickMeasurementManager>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t result;

  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34C2F98;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a3;
  result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E34ABE00;
  *((_QWORD *)a1 + 3) = v10;
  return result;
}

void WebKit::PrivateClickMeasurementManager::~PrivateClickMeasurementManager(WebKit::PrivateClickMeasurementManager *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;

  *(_QWORD *)this = off_1E34C2DB0;
  v3 = *((_QWORD *)this + 21);
  if (v3)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34C2FC0;
    v22 = v4;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 96))(v3, &v22);
    v5 = v22;
    v22 = 0;
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  }
  if (*((_BYTE *)this + 344))
    WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues::~TestingFraudPreventionValues((WebKit::PrivateClickMeasurementManager *)((char *)this + 280), a2);
  if (*((_BYTE *)this + 272))
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 29);
    *((_QWORD *)this + 29) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  v8 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 152, a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 104, v14);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 56, v15);
  *((_QWORD *)this + 2) = off_1E34ABE00;
  v16 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::PrivateClickMeasurementManager *)((char *)this + 16));
  v18 = *((_QWORD *)this + 1);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v17);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::PrivateClickMeasurementManager::~PrivateClickMeasurementManager(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::PrivateClickMeasurementManager::storeUnattributed(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19[39];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184)) & 1) != 0)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184)))
    {
      WebKit::PrivateClickMeasurementManager::initializeStore(a1);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168));
    }
    if (*(_BYTE *)(a1 + 160))
      WebCore::PrivateClickMeasurement::setSourceApplicationBundleIDForTesting((WebCore::PrivateClickMeasurement *)a2, (const WTF::String *)(a1 + 152));
    if (*(_BYTE *)(a2 + 232))
    {
      v7 = *(WTF::StringImpl **)(a2 + 224);
      if (v7)
      {
        v8 = *(_DWORD *)v7;
        *(_DWORD *)v7 += 2;
        if (v8)
          *(_DWORD *)v7 = v8;
        else
          WTF::StringImpl::destroy(v7, v6);
      }
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v19, (const WebCore::PrivateClickMeasurement *)a2);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      v11 = *(unsigned int **)(a1 + 8);
      if (v11)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v13 = &off_1E34C2FE8;
      v13[1] = v11;
      v13[2] = a1;
      v18 = v13;
      WebKit::PrivateClickMeasurementManager::getTokenPublicKey(a1, (uint64_t)v19, 0, 1, (uint64_t *)&v18);
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v19, v14);
    }
    v15 = *(_QWORD *)(a1 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, 0, v19);
    v17 = v19[0];
    v19[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), a2, 0, a3);
  }
  else
  {
    v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::getTokenPublicKey(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t *a5)
{
  WTF::StringImpl *result;
  void *v11;
  __int128 v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::JSONImpl::Value *v44;
  _BYTE v45[24];
  __int128 v46;
  _OWORD v47[2];
  _BYTE v48[128];
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::JSONImpl::Value *v62;
  WTF::StringImpl *v63;
  __int128 v64;
  __int128 v65;

  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184));
  if (!(_DWORD)result)
    return result;
  v63 = 0;
  WTF::URL::invalidate((WTF::URL *)&v63);
  if (*(_BYTE *)(a1 + 96))
  {
    if ((a3 & 1) == 0)
    {
      result = (WTF::StringImpl *)WTF::String::operator=(&v63, (WTF::StringImpl *)(a1 + 56));
      a4 = 0;
      v12 = *(_OWORD *)(a1 + 80);
      v64 = *(_OWORD *)(a1 + 64);
      v65 = v12;
LABEL_11:
      if (!v63)
        return result;
      if (*((_DWORD *)v63 + 1) && (v64 & 1) != 0)
      {
        v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184));
        v14 = qword_1ECE715F0;
        if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v45 = 0;
          _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_INFO, "About to fire a token public key request.", v45, 2u);
        }
        v15 = *(_QWORD *)(a1 + 184);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v62 = *(WTF::JSONImpl::Value **)v45;
        (*(void (**)(uint64_t, _QWORD, WTF::JSONImpl::Value **))(*(_QWORD *)v15 + 16))(v15, 0, &v62);
        v17 = v62;
        v62 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
        v62 = 0;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
        v18 = *(unsigned int **)(a1 + 8);
        if (v18)
        {
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
        *(_QWORD *)v45 = v18;
        *(_QWORD *)&v45[8] = a1;
        v45[16] = *(_BYTE *)a2;
        v20 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v46 = v20;
        v47[0] = *(_OWORD *)(a2 + 24);
        *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)(a2 + 33);
        v48[0] = 0;
        v49 = 0;
        if (*(_BYTE *)(a2 + 184))
        {
          std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v48, a2 + 56);
          v49 = 1;
        }
        v21 = *(_OWORD *)(a2 + 208);
        v50 = *(_OWORD *)(a2 + 192);
        v51 = v21;
        LOBYTE(v52) = 0;
        v53 = 0;
        if (*(_BYTE *)(a2 + 232))
        {
          v22 = *(_QWORD *)(a2 + 224);
          *(_QWORD *)(a2 + 224) = 0;
          v52 = v22;
          v53 = 1;
        }
        v23 = *(_OWORD *)(a2 + 240);
        v24 = *(_OWORD *)(a2 + 256);
        *(_OWORD *)(a2 + 240) = 0u;
        *(_OWORD *)(a2 + 256) = 0u;
        v54 = v23;
        v55 = v24;
        LOBYTE(v56) = 0;
        v58 = 0;
        if (*(_BYTE *)(a2 + 296))
        {
          v25 = *(_OWORD *)(a2 + 272);
          *(_QWORD *)(a2 + 272) = 0;
          *(_QWORD *)(a2 + 280) = 0;
          v56 = v25;
          v26 = *(_QWORD *)(a2 + 288);
          *(_QWORD *)(a2 + 288) = 0;
          v57 = v26;
          v58 = 1;
        }
        v27 = *(_QWORD *)(a2 + 304);
        *(_QWORD *)(a2 + 304) = 0;
        v28 = *a5;
        *a5 = 0;
        v59 = v27;
        v60 = v28;
        v29 = WTF::fastMalloc((WTF *)0x158);
        *(_QWORD *)v29 = off_1E34C3010;
        *(_OWORD *)(v29 + 8) = *(_OWORD *)v45;
        *(_BYTE *)(v29 + 24) = v45[16];
        *(_QWORD *)(v29 + 32) = v46;
        v30 = *((_QWORD *)&v46 + 1);
        *(_QWORD *)v45 = 0;
        v46 = 0uLL;
        *(_QWORD *)(v29 + 40) = v30;
        v31 = v47[0];
        *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v47 + 9);
        *(_OWORD *)(v29 + 48) = v31;
        *(_BYTE *)(v29 + 80) = 0;
        *(_BYTE *)(v29 + 208) = 0;
        if (v49)
        {
          std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v29 + 80, (uint64_t)v48);
          *(_BYTE *)(v29 + 208) = 1;
        }
        v32 = v50;
        *(_OWORD *)(v29 + 232) = v51;
        *(_OWORD *)(v29 + 216) = v32;
        *(_BYTE *)(v29 + 248) = 0;
        *(_BYTE *)(v29 + 256) = 0;
        if (v53)
        {
          v33 = v52;
          v52 = 0;
          *(_QWORD *)(v29 + 248) = v33;
          *(_BYTE *)(v29 + 256) = 1;
        }
        *(_OWORD *)(v29 + 264) = v54;
        *(_QWORD *)(v29 + 280) = v55;
        v34 = *((_QWORD *)&v55 + 1);
        v54 = 0u;
        v55 = 0u;
        *(_QWORD *)(v29 + 288) = v34;
        *(_BYTE *)(v29 + 296) = 0;
        *(_BYTE *)(v29 + 320) = 0;
        if (v58)
        {
          *(_QWORD *)(v29 + 296) = v56;
          v35 = *((_QWORD *)&v56 + 1);
          v56 = 0uLL;
          *(_QWORD *)(v29 + 304) = v35;
          v36 = v57;
          v57 = 0;
          *(_QWORD *)(v29 + 312) = v36;
          *(_BYTE *)(v29 + 320) = 1;
        }
        *(_QWORD *)(v29 + 328) = v59;
        v37 = v60;
        v59 = 0;
        v60 = 0;
        *(_QWORD *)(v29 + 336) = v37;
        v61 = v29;
        WebKit::PCM::NetworkLoader::start((WTF::URL *)&v63, &v62, a4 | v13, &v61);
        v39 = v61;
        v61 = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        v40 = v60;
        v60 = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v45[16], v38);
        v41 = *(unsigned int **)v45;
        *(_QWORD *)v45 = 0;
        if (v41)
        {
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            atomic_store(1u, v41);
            WTF::fastFree((WTF *)v41, v11);
          }
        }
        v44 = v62;
        v62 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v44;
        }
      }
    }
  }
  else
  {
    WebCore::PrivateClickMeasurement::tokenPublicKeyURL((WebCore::PrivateClickMeasurement *)a2);
    if (LOBYTE(v47[0]))
    {
      result = (WTF::StringImpl *)WTF::String::operator=(&v63, (WTF::StringImpl *)v45);
      v64 = *(_OWORD *)&v45[8];
      v65 = v46;
      if (LOBYTE(v47[0]))
      {
        result = *(WTF::StringImpl **)v45;
        *(_QWORD *)v45 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
      goto LABEL_11;
    }
  }
  result = v63;
  v63 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 WebKit::PrivateClickMeasurementManager::configureForTokenSigning(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __n128 result;

  *a2 = 1;
  if (*(_BYTE *)(a1 + 144))
  {
    WTF::String::operator=((WTF::StringImpl **)a3, (WTF::StringImpl *)(a1 + 104));
    v7 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a3 + 8) = v7;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184)) & 1) == 0)
      *a2 = 0;
  }
  else if (*(_BYTE *)(a4 + 40))
  {
    WTF::String::operator=((WTF::StringImpl **)a3, (WTF::StringImpl *)a4);
    result = *(__n128 *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(__n128 *)(a3 + 24) = result;
  }
  return result;
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::getSignatureBase64URLFromTokenSignatureResponse(_BYTE *a1, uint64_t a2, WTF::StringImpl *a3, WTF::JSONImpl::ObjectBase *a4)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  if (a3)
  {
    v6 = *(_QWORD *)(a2 + 184);
    *(_DWORD *)a3 += 2;
    v17 = a3;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Received error: '", 46, (uint64_t *)&v17, (uint64_t)"' for token signing request.", 29, &v18);
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, 2, &v18);
    v8 = v18;
    v18 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v17;
    v17 = 0;
    if (!result)
      goto LABEL_14;
    goto LABEL_11;
  }
  if (!a4)
  {
    v12 = *(_QWORD *)(a2 + 184);
    WTF::tryMakeString<WTF::ASCIILiteral>(&v18, "[Private Click Measurement] JSON response is empty for token signing request.", 78);
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, 2, &v18);
      result = v18;
      v18 = 0;
      if (!result)
      {
LABEL_14:
        *a1 = 0;
        a1[8] = 0;
        return result;
      }
LABEL_11:
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
      goto LABEL_14;
    }
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x1971469ACLL);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(a4, (const WTF::String *)&v16);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  if (v18 && *((_DWORD *)v18 + 1))
  {
    *(_QWORD *)a1 = v18;
    a1[8] = 1;
    return result;
  }
  v13 = *(_QWORD *)(a2 + 184);
  WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] JSON response doesn't have the key 'unlinkable_token' for token signing request.", 109);
  if (!v16)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, 2, &v16);
  v15 = v16;
  v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  *a1 = 0;
  a1[8] = 0;
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *(WTF::StringImpl **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](a1 + 128, a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100](a1 + 88, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 72, v5);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 56, v6);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, v7);
  v9 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v8);
    }
  }
  return a1;
}

uint64_t WebKit::PrivateClickMeasurementManager::migratePrivateClickMeasurementFromLegacyStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  WebKit::PrivateClickMeasurementManager::initializeStore(a1);
  v6 = *(_QWORD *)(a1 + 168);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E34C30E8;
  v9 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v6 + 16))(v6, a2, a3, &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::setDebugModeIsEnabled(WebKit::PrivateClickMeasurementManager *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4[2];

  v1 = *((_QWORD *)this + 23);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = v4[1];
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, 4, v4);
  result = v4[0];
  v4[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::handleAttribution(uint64_t a1, uint64_t a2, WTF::URL *a3, WTF::StringImpl **a4, WTF::URL *a5, uint64_t a6)
{
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  __int128 v36;
  int v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int v48;
  int v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  unsigned int v75;
  WTF::JSONImpl::Value *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  int v83;
  int v84;
  WTF *v85[2];
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  unsigned __int8 v91;
  WTF::StringImpl *v92;
  unsigned __int8 v93;
  WTF::StringImpl *v94;
  unsigned __int8 v95;
  __int128 v96;
  __int128 v97;
  unsigned __int8 v98;
  __int128 v99;
  uint64_t v100;
  unsigned __int8 v101;
  WTF::StringImpl *v102;
  uint8_t buf[8];
  __int128 v104;
  __int128 v105;
  WTF::StringImpl *v106;
  char v107;
  WTF::StringImpl *v108;
  char v109;
  __int128 v110;
  __int128 v111;
  char v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  WTF::JSONImpl::Value *v118;
  WTF::StringImpl *v119;
  __int128 v120;
  __int128 v121;

  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184));
  if ((_DWORD)result)
  {
    v13 = WTF::URL::host(a3);
    if ((WebCore::RegistrableDomain::matches(a4, v13, v14) & 1) == 0)
    {
      v17 = *(_QWORD *)(a1 + 184);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v17 + 16))(v17, 1, buf);
      result = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (!result)
        return result;
      goto LABEL_142;
    }
    v102 = 0;
    v15 = WTF::URL::host(a5);
    if (WebCore::RegistrableDomain::matches(a4, v15, v16))
    {
      if (*(_BYTE *)(a2 + 16))
      {
        WTF::String::operator=(&v102, (WTF::StringImpl *)(a2 + 8));
LABEL_15:
        v22 = *(_QWORD *)(a1 + 184);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v89 = *(WTF::StringImpl **)buf;
        (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, 0, &v89);
        v24 = v89;
        v89 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
        if (*(_BYTE *)(a2 + 32))
        {
          LOWORD(v89) = *(_WORD *)a2;
          BYTE2(v89) = *(_BYTE *)(a2 + 2);
          LOBYTE(v90) = 0;
          v91 = 0;
          if (*(_BYTE *)(a2 + 16))
          {
            v25 = *(WTF::StringImpl **)(a2 + 8);
            if (v25)
              *(_DWORD *)v25 += 2;
            v90 = v25;
            v91 = 1;
          }
          LOBYTE(v92) = 0;
          v26 = *(WTF::StringImpl **)(a2 + 24);
          if (v26)
            *(_DWORD *)v26 += 2;
          v92 = v26;
          v93 = 1;
          LOBYTE(v94) = 0;
          v95 = 0;
          if (*(_BYTE *)(a2 + 48))
          {
            v27 = *(WTF::StringImpl **)(a2 + 40);
            if (v27)
              *(_DWORD *)v27 += 2;
            v94 = v27;
            v95 = 1;
          }
          LOBYTE(v96) = 0;
          v98 = 0;
          if (*(_BYTE *)(a2 + 88))
          {
            std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>(&v96, a2 + 56);
            v98 = 1;
          }
          LOBYTE(v99) = 0;
          v101 = 0;
          if (*(_BYTE *)(a2 + 120))
          {
            std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>(&v99, a2 + 96);
            v101 = 1;
          }
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
          v28 = *(unsigned int **)(a1 + 8);
          if (v28)
          {
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 + 1, v28));
          }
          v85[0] = (WTF *)v28;
          v85[1] = (WTF *)a1;
          v30 = v102;
          v102 = 0;
          v86 = v30;
          WebCore::RegistrableDomain::RegistrableDomain(&v87, a5);
          WTF::String::isolatedCopy();
          v31 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v31 = &off_1E34C3110;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)v85;
          *(_QWORD *)(v31 + 24) = v86;
          v32 = v87;
          v87 = 0;
          *(_QWORD *)(v31 + 32) = v32;
          v33 = v88;
          v88 = 0;
          *(_QWORD *)(v31 + 40) = v33;
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184)))
            goto LABEL_117;
          v119 = 0;
          WTF::URL::invalidate((WTF::URL *)&v119);
          v34 = *(unsigned __int8 *)(a1 + 96);
          if (*(_BYTE *)(a1 + 96))
          {
            WTF::String::operator=(&v119, (WTF::StringImpl *)(a1 + 56));
            v36 = *(_OWORD *)(a1 + 80);
            v120 = *(_OWORD *)(a1 + 64);
            v121 = v36;
          }
          else
          {
            WebCore::PCM::AttributionTriggerData::tokenPublicKeyURL((WebCore::PCM::AttributionTriggerData *)&v89);
            if (!(_BYTE)v106)
              goto LABEL_112;
            WTF::String::operator=(&v119, (WTF::StringImpl *)buf);
            v120 = v104;
            v121 = v105;
            if ((_BYTE)v106)
            {
              v46 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v35);
                else
                  *(_DWORD *)v46 -= 2;
              }
            }
          }
          if (!v119)
            goto LABEL_117;
          if (*((_DWORD *)v119 + 1) && (v120 & 1) != 0)
          {
            v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184));
            if (v34)
              v38 = v37;
            else
              v38 = 1;
            v84 = v38;
            v39 = qword_1ECE715F0;
            if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_196BCC000, v39, OS_LOG_TYPE_INFO, "About to fire a token public key request.", buf, 2u);
            }
            v40 = *(_QWORD *)(a1 + 184);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v118 = *(WTF::JSONImpl::Value **)buf;
            (*(void (**)(uint64_t, _QWORD, WTF::JSONImpl::Value **))(*(_QWORD *)v40 + 16))(v40, 0, &v118);
            v42 = v118;
            v118 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2)
                WTF::StringImpl::destroy(v42, v41);
              else
                *(_DWORD *)v42 -= 2;
            }
            v118 = 0;
            WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
            v47 = *(unsigned int **)(a1 + 8);
            if (v47)
            {
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 + 1, v47));
            }
            *(_QWORD *)buf = v47;
            *(_QWORD *)&v104 = a1;
            WORD4(v104) = (_WORD)v89;
            BYTE10(v104) = BYTE2(v89);
            LOBYTE(v105) = 0;
            BYTE8(v105) = 0;
            v49 = v91;
            if (v91)
            {
              v50 = v90;
              v90 = 0;
              *(_QWORD *)&v105 = v50;
              BYTE8(v105) = 1;
            }
            LOBYTE(v106) = 0;
            v107 = 0;
            v51 = v93;
            if (v93)
            {
              v52 = v92;
              v92 = 0;
              v106 = v52;
              v107 = 1;
            }
            LOBYTE(v108) = 0;
            v109 = 0;
            v53 = v95;
            if (v95)
            {
              v54 = v94;
              v94 = 0;
              v108 = v54;
              v109 = 1;
            }
            LOBYTE(v110) = 0;
            v112 = 0;
            v55 = v98;
            if (v98)
            {
              v56 = v96;
              v57 = v97;
              v96 = 0u;
              v97 = 0u;
              v110 = v56;
              v111 = v57;
              v112 = 1;
            }
            LOBYTE(v113) = 0;
            v115 = 0;
            v83 = v101;
            if (v101)
            {
              v58 = v99;
              v99 = 0uLL;
              v113 = v58;
              v59 = v100;
              v100 = 0;
              v114 = v59;
              v115 = 1;
            }
            v116 = v31;
            v60 = WTF::fastMalloc((WTF *)0xA0);
            *(_QWORD *)v60 = off_1E34C3038;
            *(_QWORD *)(v60 + 8) = v47;
            *(_QWORD *)buf = 0;
            *(_QWORD *)(v60 + 16) = a1;
            *(_WORD *)(v60 + 24) = WORD4(v104);
            *(_BYTE *)(v60 + 26) = BYTE10(v104);
            *(_BYTE *)(v60 + 32) = 0;
            *(_BYTE *)(v60 + 40) = 0;
            if (v49)
            {
              v61 = v105;
              *(_QWORD *)&v105 = 0;
              *(_QWORD *)(v60 + 32) = v61;
              *(_BYTE *)(v60 + 40) = 1;
            }
            *(_BYTE *)(v60 + 48) = 0;
            *(_BYTE *)(v60 + 56) = 0;
            if (v51)
            {
              v62 = v106;
              v106 = 0;
              *(_QWORD *)(v60 + 48) = v62;
              *(_BYTE *)(v60 + 56) = 1;
            }
            *(_BYTE *)(v60 + 64) = 0;
            *(_BYTE *)(v60 + 72) = 0;
            if (v53)
            {
              v63 = v108;
              v108 = 0;
              *(_QWORD *)(v60 + 64) = v63;
              *(_BYTE *)(v60 + 72) = 1;
            }
            *(_BYTE *)(v60 + 80) = 0;
            *(_BYTE *)(v60 + 112) = 0;
            if (v55)
            {
              *(_OWORD *)(v60 + 80) = v110;
              *(_QWORD *)(v60 + 96) = v111;
              v64 = *((_QWORD *)&v111 + 1);
              v110 = 0u;
              v111 = 0u;
              *(_QWORD *)(v60 + 104) = v64;
              *(_BYTE *)(v60 + 112) = 1;
            }
            *(_BYTE *)(v60 + 120) = 0;
            *(_BYTE *)(v60 + 144) = 0;
            if (v83)
            {
              *(_QWORD *)(v60 + 120) = v113;
              v65 = *((_QWORD *)&v113 + 1);
              v113 = 0uLL;
              *(_QWORD *)(v60 + 128) = v65;
              v66 = v114;
              v114 = 0;
              *(_QWORD *)(v60 + 136) = v66;
              *(_BYTE *)(v60 + 144) = 1;
            }
            *(_QWORD *)(v60 + 152) = v31;
            v117 = v60;
            WebKit::PCM::NetworkLoader::start((WTF::URL *)&v119, &v118, v84, &v117);
            v68 = v117;
            v117 = 0;
            if (v68)
              (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
            v116 = 0;
            std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v113, v67);
            std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v110, v69);
            if (v109)
            {
              v70 = v108;
              v108 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                  WTF::StringImpl::destroy(v70, v35);
                else
                  *(_DWORD *)v70 -= 2;
              }
            }
            if (v107)
            {
              v71 = v106;
              v106 = 0;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                  WTF::StringImpl::destroy(v71, v35);
                else
                  *(_DWORD *)v71 -= 2;
              }
            }
            if (BYTE8(v105))
            {
              v72 = (WTF::StringImpl *)v105;
              *(_QWORD *)&v105 = 0;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2)
                  WTF::StringImpl::destroy(v72, v35);
                else
                  *(_DWORD *)v72 -= 2;
              }
            }
            v73 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v73)
            {
              do
              {
                v74 = __ldaxr((unsigned int *)v73);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, (unsigned int *)v73));
              if (!v75)
              {
                atomic_store(1u, (unsigned int *)v73);
                WTF::fastFree(v73, v35);
              }
            }
            v76 = v118;
            v118 = 0;
            if (v76)
            {
              if (*(_DWORD *)v76 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v76;
            }
            v31 = 0;
          }
LABEL_112:
          v77 = v119;
          v119 = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
              WTF::StringImpl::destroy(v77, v35);
            else
              *(_DWORD *)v77 -= 2;
          }
          if (!v31)
          {
LABEL_118:
            v78 = v88;
            v88 = 0;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
                WTF::StringImpl::destroy(v78, v35);
              else
                *(_DWORD *)v78 -= 2;
            }
            v79 = v87;
            v87 = 0;
            if (v79)
            {
              if (*(_DWORD *)v79 == 2)
                WTF::StringImpl::destroy(v79, v35);
              else
                *(_DWORD *)v79 -= 2;
            }
            std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v99, v35);
            std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v96, v80);
            if (v95)
            {
              v81 = v94;
              v94 = 0;
              if (v81)
              {
                if (*(_DWORD *)v81 == 2)
                  WTF::StringImpl::destroy(v81, v18);
                else
                  *(_DWORD *)v81 -= 2;
              }
            }
            if (v93)
            {
              v82 = v92;
              v92 = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, v18);
                else
                  *(_DWORD *)v82 -= 2;
              }
            }
            if (!v91 || (v20 = v90, v90 = 0, !v20))
            {
LABEL_141:
              result = v102;
              v102 = 0;
              if (!result)
                return result;
LABEL_142:
              if (*(_DWORD *)result == 2)
                return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
              *(_DWORD *)result -= 2;
              return result;
            }
LABEL_138:
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v18);
            else
              *(_DWORD *)v20 -= 2;
            goto LABEL_141;
          }
LABEL_117:
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          goto LABEL_118;
        }
        v43 = v102;
        v102 = 0;
        *(_QWORD *)buf = v43;
        WebCore::RegistrableDomain::RegistrableDomain(&v89, a5);
        if (*(_BYTE *)(a1 + 160))
          v44 = a1 + 152;
        else
          v44 = a6;
        WebKit::PrivateClickMeasurementManager::attribute(a1, (uint64_t)buf, (uint64_t)&v89, a2, v44);
        v45 = v89;
        v89 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v18);
          else
            *(_DWORD *)v45 -= 2;
        }
LABEL_12:
        v20 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (!v20)
          goto LABEL_141;
        goto LABEL_138;
      }
      v19 = *(_QWORD *)(a1 + 184);
    }
    else
    {
      if (!*(_BYTE *)(a2 + 16))
      {
        v21 = *a4;
        *a4 = 0;
        v102 = v21;
        goto LABEL_15;
      }
      v19 = *(_QWORD *)(a1 + 184);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v19 + 16))(v19, 1, buf);
    goto LABEL_12;
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::attribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184));
  if ((_DWORD)result)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    v11 = *(_QWORD *)(a1 + 168);
    v12 = *(unsigned __int8 *)(a1 + 48);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    v13 = *(unsigned int **)(a1 + 8);
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = &off_1E34C3148;
    v15[1] = a1;
    v15[2] = v13;
    v16 = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, _QWORD **))(*(_QWORD *)v11 + 24))(v11, a2, a3, a5, a4, v12 != 0, &v16);
    result = (uint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::startTimerImmediatelyForTesting(WebKit::PrivateClickMeasurementManager *this)
{
  return WTF::RunLoop::TimerBase::start();
}

WTF::StringImpl **WebKit::PrivateClickMeasurementManager::setPrivateClickMeasurementAppBundleIDForTesting(WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  v2 = *(WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2 || !*((_DWORD *)v2 + 1))
    return (WTF::StringImpl **)std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100]((uint64_t)(result + 19));
  if (*((_BYTE *)result + 160))
    return WTF::String::operator=(result + 19, a2);
  *(_QWORD *)a2 = 0;
  result[19] = v2;
  *((_BYTE *)result + 160) = 1;
  return result;
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(uint64_t a1, WebCore::PrivateClickMeasurement *a2, char a3)
{
  _DWORD *v6;
  __int128 v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  int v12;
  NSObject *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  uint8_t buf[8];
  __int128 v27;
  __int128 v28;
  WTF::StringImpl *v29;
  char v30;

  v29 = 0;
  WTF::URL::invalidate((WTF::URL *)&v29);
  if ((a3 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 272))
    {
      v6 = *(_DWORD **)(a1 + 232);
      if (v6)
        *v6 += 2;
      *(_QWORD *)buf = v6;
      v7 = *(_OWORD *)(a1 + 256);
      v27 = *(_OWORD *)(a1 + 240);
      v28 = v7;
    }
    else
    {
      WebCore::PrivateClickMeasurement::attributionReportClickDestinationURL(a2);
    }
  }
  else if (*(_BYTE *)(a1 + 272))
  {
    v8 = *(_DWORD **)(a1 + 192);
    if (v8)
      *v8 += 2;
    *(_QWORD *)buf = v8;
    v27 = *(_OWORD *)(a1 + 200);
    v28 = *(_OWORD *)(a1 + 216);
  }
  else
  {
    WebCore::PrivateClickMeasurement::attributionReportClickSourceURL(a2);
  }
  WTF::URL::operator=((uint64_t)&v29, (WTF::StringImpl *)buf);
  v10 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v29;
  if (v29)
  {
    if (!*((_DWORD *)v29 + 1) || (v30 & 1) == 0)
    {
      v29 = 0;
LABEL_39:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      *(_DWORD *)result -= 2;
      return result;
    }
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184));
    v13 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_INFO, "About to fire an attribution request.", buf, 2u);
    }
    v14 = *(_QWORD *)(a1 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v14 + 16))(v14, 0, buf);
    v16 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    WebCore::PrivateClickMeasurement::attributionReportJSON(a2);
    v17 = v25;
    v25 = 0;
    *(_QWORD *)buf = v17;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    v18 = *(unsigned int **)(a1 + 8);
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v20 = &off_1E34C31E8;
    v20[1] = v18;
    v20[2] = a1;
    v24 = v20;
    WebKit::PCM::NetworkLoader::start((WTF::URL *)&v29, (WTF::JSONImpl::Value **)buf, v12, (uint64_t *)&v24);
    v21 = (uint64_t)v24;
    v24 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v22;
    }
    v23 = v25;
    v25 = 0;
    if (v23)
    {
      if (*v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v23;
    }
    result = v29;
    v29 = 0;
    if (result)
      goto LABEL_39;
  }
  return result;
}

double WebKit::PrivateClickMeasurementManager::randomlyBetweenFifteenAndThirtyMinutes(WebKit::PrivateClickMeasurementManager *this)
{
  double result;
  char v2;

  result = 0.0;
  if (!*((_BYTE *)this + 48))
  {
    v2 = (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 23) + 32))(*((_QWORD *)this + 23), 0.0);
    result = 10.0;
    if ((v2 & 1) == 0)
      return (double)(WTF::cryptographicallyRandomNumber<unsigned int>() % 0x384) + 900.0;
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::clear(_QWORD **a1, uint64_t *a2)
{
  uint64_t v5;

  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 2));
  std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100]((uint64_t)(a1 + 19));
  if (((*(uint64_t (**)(_QWORD *))(*a1[23] + 24))(a1[23]) & 1) != 0)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore((uint64_t)a1);
    return (*(uint64_t (**)(_QWORD *, uint64_t *))(*a1[21] + 72))(a1[21], a2);
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebKit::PrivateClickMeasurementManager::clearForRegistrableDomain(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184)) & 1) != 0)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 168) + 80))(*(_QWORD *)(a1 + 168), a2, a3);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::toStringForTesting(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184)) & 1) != 0)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168), a2);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v6);
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::setTokenPublicKeyURLForTesting(uint64_t result, WTF::StringImpl *a2)
{
  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
      return std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>(result + 56, a2);
  }
  return result;
}

uint64_t std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    WTF::URL::operator=(a1, a2);
  }
  else
  {
    WTF::URL::URL(a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

void WebKit::PrivateClickMeasurementManager::setTokenSignatureURLForTesting(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char v5;

  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>(a1 + 104, a2);
  }
  else
  {
    LOBYTE(v4) = 0;
    v5 = 0;
    std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>((WTF::StringImpl *)(a1 + 104), (unsigned __int8 *)&v4);
    if (v5)
    {
      v3 = v4;
      v4 = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, v2);
        else
          *(_DWORD *)v3 -= 2;
      }
    }
  }
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::setAttributionReportURLsForTesting(WTF::StringImpl *result, uint64_t *a2, uint64_t *a3)
{
  WTF::StringImpl *v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[5];
  WTF::StringImpl *v10[5];

  v3 = result;
  if (*a2 && *(_DWORD *)(*a2 + 4) && *a3 && *(_DWORD *)(*a3 + 4))
  {
    WTF::URL::URL((uint64_t)v9, a2);
    WTF::URL::URL((uint64_t)v10, a3);
    v5 = (uint64_t)v3 + 192;
    if (*((_BYTE *)v3 + 272))
    {
      WTF::URL::operator=(v5, (WTF::StringImpl *)v9);
      WTF::URL::operator=((uint64_t)v3 + 232, (WTF::StringImpl *)v10);
    }
    else
    {
      WTF::URL::URL(v5, (uint64_t *)v9);
      WTF::URL::URL((uint64_t)v3 + 232, (uint64_t *)v10);
      *((_BYTE *)v3 + 272) = 1;
    }
    v8 = v10[0];
    v10[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v9[0];
    v9[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else if (*((_BYTE *)result + 272))
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)result + 29);
    *((_QWORD *)v3 + 29) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = (WTF::StringImpl *)*((_QWORD *)v3 + 24);
    *((_QWORD *)v3 + 24) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *((_BYTE *)v3 + 272) = 0;
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::markAllUnattributedAsExpiredForTesting(WebKit::PrivateClickMeasurementManager *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 24))(*((_QWORD *)this + 23));
  if ((_DWORD)result)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore((uint64_t)this);
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21));
  }
  return result;
}

void WebKit::PrivateClickMeasurementManager::setPCMFraudPreventionValuesForTesting(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _DWORD *v24;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2
    && *(_DWORD *)(v5 + 4)
    && *a3
    && *(_DWORD *)(*a3 + 4)
    && *a4
    && *(_DWORD *)(*a4 + 4)
    && *a5
    && *(_DWORD *)(*a5 + 4))
  {
    *(_QWORD *)a2 = 0;
    v7 = *a3;
    *a3 = 0;
    v8 = *a4;
    *a4 = 0;
    v9 = *a5;
    *a5 = 0;
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 8;
    v11 = *(unsigned __int8 *)(a1 + 344);
    v24 = v10;
    v20 = 0;
    if (v11)
    {
      v12 = *(WTF::StringImpl **)(a1 + 280);
      *(_QWORD *)(a1 + 280) = v5;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      *(_QWORD *)&v21 = 0;
      v13 = *(WTF::StringImpl **)(a1 + 288);
      *(_QWORD *)(a1 + 288) = v7;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      *((_QWORD *)&v21 + 1) = 0;
      v14 = *(WTF::StringImpl **)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v8;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      *(_QWORD *)&v22 = 0;
      v15 = *(WTF::StringImpl **)(a1 + 304);
      *(_QWORD *)(a1 + 304) = v9;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      *((_QWORD *)&v22 + 1) = 0;
      v16 = *(WTF::StringImpl **)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v10;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      *(_QWORD *)&v23 = 0;
      v17 = *(WTF::StringImpl **)(a1 + 320);
      *(_QWORD *)(a1 + 320) = v10;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      *((_QWORD *)&v23 + 1) = 0;
      v18 = *(WTF::StringImpl **)(a1 + 328);
      *(_QWORD *)(a1 + 328) = v10;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, a2);
        else
          *(_DWORD *)v18 -= 2;
      }
      v24 = 0;
      v19 = *(WTF::StringImpl **)(a1 + 336);
      *(_QWORD *)(a1 + 336) = v10;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, a2);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 280) = v5;
      *(_QWORD *)(a1 + 288) = v7;
      v21 = 0u;
      *(_QWORD *)(a1 + 296) = v8;
      *(_QWORD *)(a1 + 304) = v9;
      v22 = 0u;
      *(_QWORD *)(a1 + 312) = v10;
      *(_QWORD *)(a1 + 320) = v10;
      v23 = 0u;
      v24 = 0;
      *(_QWORD *)(a1 + 328) = v10;
      *(_QWORD *)(a1 + 336) = v10;
      *(_BYTE *)(a1 + 344) = 1;
    }
    WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues::~TestingFraudPreventionValues((WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues *)&v20, a2);
  }
}

uint64_t WebKit::PrivateClickMeasurementManager::markAttributedPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184)) & 1) != 0)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 168) + 48))(*(_QWORD *)(a1 + 168), a2);
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebKit::PrivateClickMeasurementManager::initializeStore(uint64_t this)
{
  uint64_t v1;
  WebKit::PCM::PersistentStore *v2;
  unsigned int *v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  if (!*(_QWORD *)(this + 168))
  {
    v1 = this;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(this + 184) + 40))(*(_QWORD *)(this + 184)))
    {
      v6 = WTF::fastMalloc((WTF *)0x150);
      *(_DWORD *)(v6 + 8) = 1;
      *(_QWORD *)v6 = off_1E34C2D38;
      *(_BYTE *)(v6 + 16) = 0;
      *(_BYTE *)(v6 + 328) = 0;
      this = *(_QWORD *)(v1 + 168);
      *(_QWORD *)(v1 + 168) = v6;
      if (!this)
        return this;
      v7 = (unsigned int *)(this + 8);
      do
      {
        v8 = __ldaxr(v7);
        v5 = --v8 == 0;
      }
      while (__stlxr(v8, v7));
    }
    else
    {
      v2 = (WebKit::PCM::PersistentStore *)WTF::fastMalloc((WTF *)0x20);
      WebKit::PCM::PersistentStore::PersistentStore(v2, (const WTF::String *)(v1 + 176));
      this = *(_QWORD *)(v1 + 168);
      *(_QWORD *)(v1 + 168) = v2;
      if (!this)
        return this;
      v3 = (unsigned int *)(this + 8);
      do
      {
        v4 = __ldaxr(v3);
        v5 = --v4 == 0;
      }
      while (__stlxr(v4, v3));
    }
    if (v5)
    {
      atomic_store(1u, (unsigned int *)(this + 8));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t WebKit::PrivateClickMeasurementManager::destroyStoreForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    v5 = *(unsigned int **)(a1 + 8);
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = *a2;
    *a2 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34C3238;
    v8[1] = v5;
    v8[2] = v7;
    v11 = v8;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 96))(v3, &v11);
    result = (uint64_t)v11;
    v11 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v10 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

void WebKit::PrivateClickMeasurementManager::allowTLSCertificateChainForLocalPCMTesting(uint64_t a1, const void **a2)
{
  WebKit::PCM::NetworkLoader::allowTLSCertificateChainForLocalPCMTesting(a2);
}

_QWORD *WebKit::PCM::initializePCMStorageInDirectory(WebKit::PCM *this, const WTF::String *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34C29C8;
  v3[1] = 0;
  v4 = WTF::fastMalloc((WTF *)0x160);
  v6 = v3;
  WebKit::PrivateClickMeasurementManager::PrivateClickMeasurementManager(v4, (uint64_t *)&v6, (_DWORD **)this);
  result = v6;
  if (v6)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  {
    result = (_QWORD *)WebKit::PCM::managerPointer(void)::manager;
    WebKit::PCM::managerPointer(void)::manager = v4;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    WebKit::PCM::managerPointer(void)::manager = v4;
  }
  return result;
}

void WebKit::PCM::decodeMessageAndSendToManager(WebKit::Daemon::Connection *a1, int a2, WTF::StringImpl *a3, WTF::StringImpl *a4, uint64_t *a5)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::PrivateClickMeasurement *p_cf;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  _QWORD *v33;
  void (*v34)(void);
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  _QWORD *v44;
  void (*v45)(void);
  unsigned __int8 **v46;
  WTF::StringImpl *v47;
  void (*v48)(void);
  uint64_t v49;
  _QWORD *v50;
  unsigned __int8 **v51;
  unsigned __int8 **v52;
  unsigned __int8 **v53;
  WTF::StringImpl *v54;
  int v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  CFTypeRef v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  __int128 v93;
  __int128 v94;
  char v95;
  WTF::StringImpl *v96;
  char v97;
  CFTypeRef cf;
  WTF::StringImpl *v99;
  _BYTE v100[20];
  int v101;
  WTF::StringImpl *v102;
  int v103;
  _BYTE v104[20];
  __int128 v105;
  char v106;
  __int128 v107;
  uint64_t v108;
  char v109;
  WTF::StringImpl *v110;
  __int128 v111;
  __int128 v112;
  _OWORD v113[3];
  WTF::StringImpl *v114;
  char v115;
  char v116;
  char v117;
  __int128 v118;
  __int128 v119;
  int v120;
  int v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  char v126;
  __int128 v127;
  uint64_t v128;
  char v129;
  WTF::StringImpl *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  WTF::StringImpl *v136;
  char v137;
  char v138;
  char v139;
  WTF::StringImpl *v140;
  _BYTE v141[24];
  uint64_t v142;
  WTF::StringImpl *v143;
  char v144;
  __int128 v145;
  __int128 v146;
  char v147;
  __int128 v148;
  uint64_t v149;
  char v150;
  char v151;
  char v152;
  WTF::StringImpl *v153;
  _BYTE v154[32];
  char v155;
  WTF::StringImpl *v156;
  char v157;

  switch(a2)
  {
    case 0:
      v153 = a3;
      *(_QWORD *)v154 = a4;
      *(_QWORD *)&v154[8] = 0;
      LOBYTE(v140) = 0;
      v152 = 0;
      WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::decode((uint64_t *)&v153, (unsigned __int8 **)a3, (uint64_t)&v118);
      if (v138)
      {
        WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)&cf, (uint64_t)&v118);
        v116 = 1;
        if (!v138
          || (WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v118, v9),
              v116))
        {
          WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)&v140, (uint64_t)&cf);
          v152 = 1;
          if (!v116
            || (WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&cf, v10),
                v152))
          {
            v11 = *a5;
            *a5 = 0;
            v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v12 = &off_1E34C3260;
            v12[1] = v11;
            *(_QWORD *)&v118 = v12;
            {
              v14 = WebKit::PCM::managerPointer(void)::manager;
            }
            else
            {
              v14 = 0;
              WebKit::PCM::managerPointer(void)::manager = 0;
            }
            if (!v152)
              goto LABEL_177;
            (*(void (**)(uint64_t, WTF::StringImpl **, __int128 *))(*(_QWORD *)v14 + 16))(v14, &v140, &v118);
            v16 = v118;
            *(_QWORD *)&v118 = 0;
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
            if (v152)
            {
              p_cf = (WebCore::PrivateClickMeasurement *)&v140;
              goto LABEL_98;
            }
          }
        }
      }
      return;
    case 1:
      v89 = a3;
      v90 = a4;
      v91 = 0;
      LOBYTE(cf) = 0;
      v115 = 0;
      WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::decode((uint64_t *)&v89, (unsigned __int8 **)a3, &v140);
      if (v151
        && (WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(&v92, (uint64_t *)&v89, v18), v95))
      {
        WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode((uint64_t *)&v89, v19, (uint64_t)&v96);
        if (v97)
        {
          WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(&v153, (uint64_t *)&v89, v20);
          if (v155)
          {
            WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>((uint64_t *)&v89, v21, (uint64_t)&v156);
            if (v157)
            {
              if (!v151 || !v95 || !v97 || !v155)
                goto LABEL_177;
              LOWORD(v118) = (_WORD)v140;
              BYTE2(v118) = BYTE2(v140);
              BYTE8(v118) = 0;
              LOBYTE(v119) = 0;
              if (v141[8])
              {
                v22 = *(_QWORD *)v141;
                *(_QWORD *)v141 = 0;
                *((_QWORD *)&v118 + 1) = v22;
                LOBYTE(v119) = 1;
              }
              BYTE8(v119) = 0;
              LOBYTE(v120) = 0;
              if ((_BYTE)v142)
              {
                v23 = *(_QWORD *)&v141[16];
                *(_QWORD *)&v141[16] = 0;
                *((_QWORD *)&v119 + 1) = v23;
                LOBYTE(v120) = 1;
              }
              LOBYTE(v122) = 0;
              LOBYTE(v123) = 0;
              if (v144)
              {
                v24 = v143;
                v143 = 0;
                v122 = v24;
                LOBYTE(v123) = 1;
              }
              LOBYTE(v124) = 0;
              v126 = 0;
              if (v147)
              {
                v25 = v145;
                v145 = 0u;
                v124 = v25;
                v26 = v146;
                v146 = 0u;
                v125 = v26;
                v126 = 1;
              }
              LOBYTE(v127) = 0;
              v129 = 0;
              if (v150)
              {
                v27 = v148;
                v148 = 0uLL;
                v127 = v27;
                v28 = v149;
                v149 = 0;
                v128 = v28;
                v129 = 1;
              }
              v29 = v92;
              v92 = 0;
              v131 = v93;
              v132 = v94;
              LODWORD(v93) = v93 & 0xFFFFFFFE;
              v30 = v96;
              v96 = 0;
              v130 = v29;
              *(_QWORD *)&v133 = v30;
              v31 = v153;
              v153 = 0;
              v134 = *(_OWORD *)v154;
              v135 = *(_OWORD *)&v154[16];
              *((_QWORD *)&v133 + 1) = v31;
              v136 = v156;
              v137 = 1;
            }
            else
            {
              LOBYTE(v118) = 0;
              v137 = 0;
              if (v155)
              {
                v67 = v153;
                v153 = 0;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                    WTF::StringImpl::destroy(v67, v13);
                  else
                    *(_DWORD *)v67 -= 2;
                }
              }
            }
          }
          else
          {
            LOBYTE(v118) = 0;
            v137 = 0;
          }
          if (v97)
          {
            v71 = v96;
            v96 = 0;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, v13);
              else
                *(_DWORD *)v71 -= 2;
            }
          }
        }
        else
        {
          LOBYTE(v118) = 0;
          v137 = 0;
        }
        if (v95)
        {
          v72 = v92;
          v92 = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
              WTF::StringImpl::destroy(v72, v13);
            else
              *(_DWORD *)v72 -= 2;
          }
        }
      }
      else
      {
        LOBYTE(v118) = 0;
        v137 = 0;
      }
      std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v140, v13);
      if (v115 == v137)
      {
        if (!v115)
          goto LABEL_174;
        LOWORD(cf) = v118;
        BYTE2(cf) = BYTE2(v118);
        std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(&v99, (WTF::StringImpl *)((char *)&v118 + 8));
        std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((WTF::StringImpl **)&v100[8], (WTF::StringImpl *)((char *)&v119 + 8));
        std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(&v102, (WTF::StringImpl *)&v122);
        std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>((uint64_t)&v104[4], (uint64_t *)&v124);
        std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>((WTF::StringImpl **)&v107, (unsigned __int8 *)&v127);
        WTF::URL::operator=((uint64_t)&v110, (WTF::StringImpl *)&v130);
        v75 = v133;
        *(_QWORD *)&v133 = 0;
        v76 = *(WTF::StringImpl **)&v113[0];
        *(_QWORD *)&v113[0] = v75;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v74);
          else
            *(_DWORD *)v76 -= 2;
        }
        WTF::URL::operator=((uint64_t)v113 + 8, (WTF::StringImpl *)((char *)&v133 + 8));
        v86 = v136;
        v136 = 0;
        v87 = v114;
        v114 = v86;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v73);
          else
            *(_DWORD *)v87 -= 2;
        }
      }
      else if (v115)
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::~__tuple_impl(&cf, v73);
        v115 = 0;
      }
      else
      {
        LOWORD(cf) = v118;
        BYTE2(cf) = BYTE2(v118);
        LOBYTE(v99) = 0;
        v100[0] = 0;
        if ((_BYTE)v119)
        {
          v77 = (WTF::StringImpl *)*((_QWORD *)&v118 + 1);
          *((_QWORD *)&v118 + 1) = 0;
          v99 = v77;
          v100[0] = 1;
        }
        v100[8] = 0;
        v100[16] = 0;
        if ((_BYTE)v120)
        {
          v78 = *((_QWORD *)&v119 + 1);
          *((_QWORD *)&v119 + 1) = 0;
          *(_QWORD *)&v100[8] = v78;
          v100[16] = 1;
        }
        LOBYTE(v102) = 0;
        LOBYTE(v103) = 0;
        if ((_BYTE)v123)
        {
          v79 = v122;
          v122 = 0;
          v102 = v79;
          LOBYTE(v103) = 1;
        }
        v104[4] = 0;
        v106 = 0;
        if (v126)
        {
          v80 = v124;
          v124 = 0u;
          *(_OWORD *)&v104[4] = v80;
          v81 = v125;
          v125 = 0u;
          v105 = v81;
          v106 = 1;
        }
        LOBYTE(v107) = 0;
        v109 = 0;
        if (v129)
        {
          v82 = v127;
          v127 = 0uLL;
          v107 = v82;
          v83 = v128;
          v128 = 0;
          v108 = v83;
          v109 = 1;
        }
        v111 = v131;
        v112 = v132;
        LODWORD(v131) = v131 & 0xFFFFFFFE;
        v113[0] = v133;
        v84 = v130;
        v85 = v136;
        v130 = 0;
        v133 = 0uLL;
        v113[1] = v134;
        v113[2] = v135;
        LODWORD(v134) = v134 & 0xFFFFFFFE;
        v136 = 0;
        v110 = v84;
        v114 = v85;
        v115 = 1;
      }
      if (v137)
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::~__tuple_impl(&v118, v73);
LABEL_174:
      if (v115)
      {
        (*(void (**)(uint64_t, CFTypeRef *, WTF::StringImpl **, _OWORD *, char *, WTF::StringImpl **))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 24))(WebKit::PCM::managerPointer(void)::manager, &cf, &v110, v113, (char *)v113 + 8, &v114);
        if (v115)
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::~__tuple_impl(&cf, v88);
      }
      return;
    case 2:
      v32 = *a5;
      *a5 = 0;
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v33 = &off_1E34C3288;
      v33[1] = v32;
      *(_QWORD *)&v118 = v33;
      v34 = *(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 32);
      goto LABEL_78;
    case 3:
      *(_QWORD *)&v118 = a3;
      *((_QWORD *)&v118 + 1) = a4;
      *(_QWORD *)&v119 = 0;
      WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode((uint64_t *)&v118, (unsigned __int8 **)a3, (uint64_t)&cf);
      if (!(_BYTE)v99)
        return;
      LOBYTE(v99) = 1;
      v35 = *a5;
      *a5 = 0;
      v36 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v36 = &off_1E34C32B0;
      *((_QWORD *)v36 + 1) = v35;
      v140 = v36;
      (*(void (**)(uint64_t, CFTypeRef *, WTF::StringImpl **))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager
                                                                       + 40))(WebKit::PCM::managerPointer(void)::manager, &cf, &v140);
      v38 = v140;
      v140 = 0;
      if (v38)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v38 + 8))(v38);
      if (!(_BYTE)v99)
        return;
      v39 = (WTF::StringImpl *)cf;
      cf = 0;
      if (!v39)
        return;
      goto LABEL_108;
    case 4:
      v153 = a3;
      *(_QWORD *)v154 = a4;
      *(_QWORD *)&v154[8] = 0;
      LOBYTE(cf) = 0;
      v117 = 0;
      WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::decode((uint64_t *)&v153, (unsigned __int8 **)a3, (uint64_t)&v140);
      if (!v152)
        return;
      if (*(_QWORD *)v154 == *(_QWORD *)&v154[8])
      {
        LOBYTE(v118) = 0;
        v139 = 0;
      }
      else
      {
        v63 = *((_BYTE *)v153 + (*(_QWORD *)&v154[8])++);
        WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)&v118, (uint64_t)&v140);
        v138 = v63;
        v139 = 1;
        if (!v152)
          goto LABEL_94;
      }
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v140, v40);
      if (!v139)
        return;
LABEL_94:
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)&cf, (uint64_t)&v118);
      v116 = v138;
      v117 = 1;
      if (!v139
        || (WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v118, v64),
            v117))
      {
        (*(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 48))();
        if (v117)
        {
          p_cf = (WebCore::PrivateClickMeasurement *)&cf;
LABEL_98:
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(p_cf, v15);
        }
      }
      return;
    case 5:
      if (a4)
      {
        v41 = *(unsigned __int8 *)a3;
        {
          v42 = qword_1EE341CA8 != 0;
        }
        else
        {
          v42 = 0;
          WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
          qword_1EE341CA8 = 0;
        }
        WebKit::PCM::DaemonConnectionSet::setConnectedNetworkProcessHasDebugModeEnabled((WebKit::PCM::DaemonConnectionSet *)&WebKit::PCM::DaemonConnectionSet::singleton(void)::set, a1, v41 != 0);
        if (v42 != (qword_1EE341CA8 != 0))
          WebKit::PrivateClickMeasurementManager::setDebugModeIsEnabled((WebKit::PrivateClickMeasurementManager *)WebKit::PCM::managerPointer(void)::manager);
      }
      return;
    case 6:
      v43 = *a5;
      *a5 = 0;
      v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v44 = &off_1E34C32D8;
      v44[1] = v43;
      *(_QWORD *)&v118 = v44;
      v34 = *(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 64);
      goto LABEL_78;
    case 7:
      if (a4)
        (*(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 72))();
      return;
    case 8:
      cf = a3;
      v99 = a4;
      *(_QWORD *)v100 = 0;
      LOBYTE(v118) = 0;
      LOBYTE(v122) = 0;
      WebKit::Daemon::Decoder::operator>><std::tuple<WTF::URL>>((uint64_t *)&cf, (uint64_t)&v118, (unsigned __int8 **)a3);
      if (!(_BYTE)v122)
        return;
      v45 = *(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 80);
      goto LABEL_56;
    case 9:
      cf = a3;
      v99 = a4;
      *(_QWORD *)v100 = 0;
      LOBYTE(v118) = 0;
      LOBYTE(v122) = 0;
      WebKit::Daemon::Decoder::operator>><std::tuple<WTF::URL>>((uint64_t *)&cf, (uint64_t)&v118, (unsigned __int8 **)a3);
      if (!(_BYTE)v122)
        return;
      v45 = *(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 88);
LABEL_56:
      v45();
      if (!(_BYTE)v122)
        return;
      v39 = (WTF::StringImpl *)v118;
      *(_QWORD *)&v118 = 0;
      if (!v39)
        return;
      goto LABEL_108;
    case 10:
      v92 = a3;
      v93 = (unint64_t)a4;
      LOBYTE(cf) = 0;
      BYTE8(v105) = 0;
      WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(&v153, (uint64_t *)&v92, (unsigned __int8 **)a3);
      if (!v155)
      {
        LOBYTE(v118) = 0;
        BYTE8(v125) = 0;
LABEL_122:
        std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v13);
        goto LABEL_123;
      }
      WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(&v140, (uint64_t *)&v92, v46);
      if (!(_BYTE)v143)
      {
        LOBYTE(v118) = 0;
        BYTE8(v125) = 0;
        if (v155)
        {
          v65 = v153;
          v153 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, v13);
            else
              *(_DWORD *)v65 -= 2;
          }
        }
        goto LABEL_122;
      }
      if (!v155)
        goto LABEL_177;
      v119 = *(_OWORD *)&v154[8];
      v120 = *(_DWORD *)&v154[24];
      v121 = *(_DWORD *)&v154[28];
      v124 = *(_OWORD *)&v141[8];
      *(_QWORD *)&v125 = v142;
      BYTE8(v125) = 1;
      *(_QWORD *)&v118 = 0;
      cf = v153;
      v99 = *(WTF::StringImpl **)v154;
      *(_DWORD *)v100 = *(_DWORD *)&v154[8];
      *(_QWORD *)&v100[4] = *(_QWORD *)&v154[12];
      *(_QWORD *)&v100[12] = *(_QWORD *)&v154[20];
      v101 = *(_DWORD *)&v154[28];
      *((_QWORD *)&v118 + 1) = *(_QWORD *)v154 & 0xFFFFFFFFFFFFFFFELL;
      v122 = 0;
      v102 = v140;
      v103 = *(_DWORD *)v141;
      *(_QWORD *)v104 = *(_QWORD *)&v141[4];
      *(_DWORD *)&v104[8] = *(_DWORD *)&v141[12];
      *(_QWORD *)&v104[12] = *(_QWORD *)&v141[16];
      *(_QWORD *)&v105 = v142;
      v123 = *(_QWORD *)v141 & 0xFFFFFFFFFFFFFFFELL;
      BYTE8(v105) = 1;
      std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, (WTF::StringImpl *)*(unsigned int *)&v141[4]);
      (*(void (**)(uint64_t, CFTypeRef *, WTF::StringImpl **))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager
                                                                       + 96))(WebKit::PCM::managerPointer(void)::manager, &cf, &v102);
LABEL_123:
      std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v47);
      return;
    case 11:
      v48 = *(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 104);
      goto LABEL_74;
    case 12:
      v49 = *a5;
      *a5 = 0;
      v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v50 = &off_1E34C3300;
      v50[1] = v49;
      *(_QWORD *)&v118 = v50;
      v34 = *(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 112);
      goto LABEL_78;
    case 13:
      v140 = a3;
      *(_QWORD *)v141 = a4;
      *(_QWORD *)&v141[8] = 0;
      LOBYTE(cf) = 0;
      v100[16] = 0;
      WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>((uint64_t *)&v140, (unsigned __int8 **)a3, (uint64_t)&v156);
      if (!v157)
        goto LABEL_178;
      WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>((uint64_t *)&v140, v51, (uint64_t)&v89);
      if (!(_BYTE)v90)
      {
        v55 = 0;
        LOBYTE(v118) = 0;
        LOBYTE(v120) = 0;
        goto LABEL_131;
      }
      WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>((uint64_t *)&v140, v52, (uint64_t)&v92);
      if (!(_BYTE)v93)
      {
        v55 = 0;
        LOBYTE(v118) = 0;
        LOBYTE(v120) = 0;
        goto LABEL_126;
      }
      WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>((uint64_t *)&v140, v53, (uint64_t)&v153);
      if (v154[0])
      {
        if (!v157 || !(_BYTE)v90 || !(_BYTE)v93)
        {
LABEL_177:
          __break(1u);
LABEL_178:
          LOBYTE(v118) = 0;
          LOBYTE(v120) = 0;
          goto LABEL_179;
        }
        v54 = v156;
        v156 = 0;
        v5 = v89;
        v89 = 0;
        *(_QWORD *)&v118 = v54;
        *((_QWORD *)&v118 + 1) = v5;
        v7 = v92;
        v6 = v153;
        *(_QWORD *)&v119 = v92;
        *((_QWORD *)&v119 + 1) = v153;
        v55 = 1;
        LOBYTE(v120) = 1;
      }
      else
      {
        LOBYTE(v118) = 0;
        LOBYTE(v120) = 0;
        if ((_BYTE)v93)
        {
          v66 = v92;
          v92 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 != 2)
            {
              v55 = 0;
              *(_DWORD *)v66 -= 2;
              goto LABEL_126;
            }
            WTF::StringImpl::destroy(v66, v13);
          }
        }
        v55 = 0;
      }
LABEL_126:
      if ((_BYTE)v90)
      {
        v68 = v89;
        v89 = 0;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, v13);
          else
            *(_DWORD *)v68 -= 2;
        }
      }
LABEL_131:
      if (v157)
      {
        v69 = v156;
        v156 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, v13);
          else
            *(_DWORD *)v69 -= 2;
        }
      }
      if (v55)
      {
        cf = (CFTypeRef)v118;
        v99 = v5;
        v118 = 0u;
        v119 = 0u;
        *(_QWORD *)v100 = v7;
        *(_QWORD *)&v100[8] = v6;
        v100[16] = 1;
        std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v13);
        (*(void (**)(uint64_t, CFTypeRef *, WTF::StringImpl **, _BYTE *, _BYTE *))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager
                                                                                           + 120))(WebKit::PCM::managerPointer(void)::manager, &cf, &v99, v100, &v100[8]);
        goto LABEL_180;
      }
LABEL_179:
      std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v13);
LABEL_180:
      std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v70);
      return;
    case 14:
      v48 = *(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 128);
LABEL_74:
      v48();
      return;
    case 15:
      *(_QWORD *)&v118 = a3;
      *((_QWORD *)&v118 + 1) = a4;
      *(_QWORD *)&v119 = 0;
      LOBYTE(v153) = 0;
      v154[0] = 0;
      WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>((uint64_t *)&v118, (unsigned __int8 **)a3, (uint64_t)&cf);
      v56 = (char)v99;
      if ((_BYTE)v99)
      {
        v140 = (WTF::StringImpl *)cf;
        v56 = 1;
      }
      else
      {
        LOBYTE(v140) = 0;
      }
      v141[0] = v56;
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(&v153, (WTF::StringImpl *)&v140);
      if (v141[0])
      {
        v62 = v140;
        v140 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v61);
          else
            *(_DWORD *)v62 -= 2;
        }
      }
      if (v154[0])
      {
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager
                                                            + 136))(WebKit::PCM::managerPointer(void)::manager, &v153);
        if (v154[0])
        {
          v39 = v153;
          v153 = 0;
          if (v39)
          {
LABEL_108:
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v37);
            else
              *(_DWORD *)v39 -= 2;
          }
        }
      }
      return;
    case 16:
      v57 = *a5;
      *a5 = 0;
      v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v58 = &off_1E34C3328;
      v58[1] = v57;
      *(_QWORD *)&v118 = v58;
      v34 = *(void (**)(void))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 144);
LABEL_78:
      v34();
      v59 = v118;
      *(_QWORD *)&v118 = 0;
      if (v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
      return;
    case 17:
      *(_QWORD *)&v118 = a3;
      *((_QWORD *)&v118 + 1) = a4;
      *(_QWORD *)&v119 = 0;
      WebKit::Daemon::Coder<WebCore::CertificateInfo,void>::decode((uint64_t *)&v118, (uint64_t)&cf);
      if ((_BYTE)v99)
      {
        LOBYTE(v99) = 1;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)WebKit::PCM::managerPointer(void)::manager + 152))(WebKit::PCM::managerPointer(void)::manager, &cf);
        if ((_BYTE)v99)
        {
          v60 = cf;
          cf = 0;
          if (v60)
            CFRelease(v60);
        }
      }
      return;
    default:
      return;
  }
}

WebKit::PCM::ManagerProxy *WebKit::PCM::ManagerProxy::ManagerProxy(WebKit::PCM::ManagerProxy *this, const WTF::String *a2, WebKit::NetworkSession *a3)
{
  unsigned int *v5;
  unsigned int v6;
  WTF *v8;

  *(_QWORD *)this = off_1E34C2E60;
  WTF::String::utf8();
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = v8;
  *((_QWORD *)this + 1) = &off_1E34B4C10;
  *((_QWORD *)this + 2) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 2, (uint64_t)a3);
  v5 = (unsigned int *)*((_QWORD *)a3 + 1);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 5) = v5;
  return this;
}

WTF *WebKit::PCM::ManagerProxy::storeUnattributed(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *result;
  _QWORD *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::encode((unsigned int *)&v14, a2);
  v12 = v14;
  v13 = v15;
  v14 = 0;
  v15 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34C3350;
  v6[1] = v5;
  v11 = v6;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply((_QWORD *)(a1 + 8), 0, (uint64_t)&v12, (uint64_t *)&v11);
  v8 = (uint64_t)v11;
  v11 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v12;
  if (v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v9, v7);
  }
  result = v14;
  if (v14)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::handleAttribution(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  void *v11;
  WTF *v12;
  WTF *result;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::encode((unsigned int *)&v16, a2);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v16, a3);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v16, a4);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v16, a5);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v16, a6);
  v14 = v16;
  v15 = v17;
  v16 = 0;
  v17 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 1, (uint64_t)&v14);
  v12 = v14;
  if (v14)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree(v12, v11);
  }
  result = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::clear(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  WTF *result;
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;

  v2 = (_QWORD *)(a1 + 8);
  v9 = 0;
  v10 = 0;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34C3378;
  v4[1] = v3;
  v8 = v4;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(v2, 2, (uint64_t)&v9, (uint64_t *)&v8);
  v6 = (uint64_t)v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = v9;
  if (v9)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::clearForRegistrableDomain(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *result;
  _QWORD *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a2);
  v12 = v14;
  v13 = v15;
  v14 = 0;
  v15 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34C33A0;
  v6[1] = v5;
  v11 = v6;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply((_QWORD *)(a1 + 8), 3, (uint64_t)&v12, (uint64_t *)&v11);
  v8 = (uint64_t)v11;
  v11 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v12;
  if (v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v9, v7);
  }
  result = v14;
  if (v14)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setDebugModeIsEnabled(xpc_connection_t *this, char a2)
{
  void *v3;
  WTF *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  LOBYTE(v6) = a2;
  WebKit::Daemon::Encoder::encodeFixedLengthData((unsigned int *)&v8, &v6, 1uLL);
  v6 = v8;
  v7 = v9;
  v8 = 0;
  v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 5, (uint64_t)&v6);
  v4 = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  result = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::migratePrivateClickMeasurementFromLegacyStorage(uint64_t a1, uint64_t a2, char a3)
{
  void *v5;
  WTF *v6;
  WTF *result;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::encode((unsigned int *)&v10, a2);
  LOBYTE(v8) = a3;
  WebKit::Daemon::Encoder::encodeFixedLengthData((unsigned int *)&v10, &v8, 1uLL);
  v8 = v10;
  v9 = v11;
  v10 = 0;
  v11 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 4, (uint64_t)&v8);
  v6 = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v6, v5);
  }
  result = v10;
  if (v10)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::toStringForTesting(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  WTF *result;
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;

  v2 = (_QWORD *)(a1 + 8);
  v9 = 0;
  v10 = 0;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34C33C8;
  v4[1] = v3;
  v8 = v4;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(v2, 6, (uint64_t)&v9, (uint64_t *)&v8);
  v6 = (uint64_t)v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = v9;
  if (v9)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setOverrideTimerForTesting(xpc_connection_t *this, char a2)
{
  void *v3;
  WTF *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  LOBYTE(v6) = a2;
  WebKit::Daemon::Encoder::encodeFixedLengthData((unsigned int *)&v8, &v6, 1uLL);
  v6 = v8;
  v7 = v9;
  v8 = 0;
  v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 7, (uint64_t)&v6);
  v4 = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  result = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setTokenPublicKeyURLForTesting(uint64_t a1, uint64_t *a2)
{
  void *v3;
  WTF *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v8, a2);
  v6 = v8;
  v7 = v9;
  v8 = 0;
  v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 8, (uint64_t)&v6);
  v4 = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  result = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setTokenSignatureURLForTesting(uint64_t a1, uint64_t *a2)
{
  void *v3;
  WTF *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v8, a2);
  v6 = v8;
  v7 = v9;
  v8 = 0;
  v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 9, (uint64_t)&v6);
  v4 = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  result = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setAttributionReportURLsForTesting(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v5;
  WTF *v6;
  WTF *result;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v10, a2);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v10, a3);
  v8 = v10;
  v9 = v11;
  v10 = 0;
  v11 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 10, (uint64_t)&v8);
  v6 = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v6, v5);
  }
  result = v10;
  if (v10)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::markAllUnattributedAsExpiredForTesting(xpc_connection_t *this)
{
  void *v1;
  WTF *result;
  WTF *v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 11, (uint64_t)&v3);
  result = v3;
  if (v3)
  {
    v3 = 0;
    LODWORD(v4) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::markAttributedPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  WTF *result;
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;

  v2 = (_QWORD *)(a1 + 8);
  v9 = 0;
  v10 = 0;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34C33F0;
  v4[1] = v3;
  v8 = v4;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(v2, 12, (uint64_t)&v9, (uint64_t *)&v8);
  v6 = (uint64_t)v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = v9;
  if (v9)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setPCMFraudPreventionValuesForTesting(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  void *v9;
  WTF *v10;
  WTF *result;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a2);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a3);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a4);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a5);
  v12 = v14;
  v13 = v15;
  v14 = 0;
  v15 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 13, (uint64_t)&v12);
  v10 = v12;
  if (v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v10, v9);
  }
  result = v14;
  if (v14)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::startTimerImmediatelyForTesting(xpc_connection_t *this)
{
  void *v1;
  WTF *result;
  WTF *v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 14, (uint64_t)&v3);
  result = v3;
  if (v3)
  {
    v3 = 0;
    LODWORD(v4) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setPrivateClickMeasurementAppBundleIDForTesting(uint64_t a1, uint64_t *a2)
{
  void *v3;
  WTF *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v8, a2);
  v6 = v8;
  v7 = v9;
  v8 = 0;
  v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 15, (uint64_t)&v6);
  v4 = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  result = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::destroyStoreForTesting(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  WTF *result;
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;

  v2 = (_QWORD *)(a1 + 8);
  v9 = 0;
  v10 = 0;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34C3418;
  v4[1] = v3;
  v8 = v4;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(v2, 16, (uint64_t)&v9, (uint64_t *)&v8);
  v6 = (uint64_t)v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = v9;
  if (v9)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::allowTLSCertificateChainForLocalPCMTesting(xpc_connection_t *this, const WebCore::CertificateInfo *a2)
{
  void *v3;
  WTF *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  WebKit::Daemon::Coder<WebCore::CertificateInfo,void>::encode((unsigned int *)&v8);
  v6 = v8;
  v7 = v9;
  v8 = 0;
  v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 17, (uint64_t)&v6);
  v4 = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  result = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WebKit::PCM::PersistentStore *WebKit::PCM::PersistentStore::PersistentStore(WebKit::PCM::PersistentStore *this, const WTF::String *a2)
{
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  WebKit::PCM::PersistentStore *v11;
  WebKit::PCM::PersistentStore *v12;
  uint64_t v13;
  _QWORD *v14;

  *((_DWORD *)this + 2) = 1;
  v4 = (unsigned int *)((char *)this + 8);
  *(_QWORD *)this = off_1E34C2F10;
  *((_QWORD *)this + 2) = 0;
  WebKit::PCM::sharedWorkQueue((WTF::WorkQueue **)this + 3);
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v11 = this;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v12 = this;
    WTF::String::isolatedCopy();
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = &off_1E34C3440;
    v6[1] = v11;
    v6[2] = v12;
    v7 = v13;
    v12 = 0;
    v13 = 0;
    v6[3] = v7;
    v14 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    v9 = v14;
    v14 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0::~$_0((uint64_t)&v11, v8);
  }
  return this;
}

uint64_t WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

void WebKit::PCM::PersistentStore::~PersistentStore(WebKit::PCM::PersistentStore *this)
{
  WTF::WorkQueue *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E34C2F10;
  v2 = (WTF::WorkQueue *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    WTF::WorkQueue::deref(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::PCM::PersistentStore::~PersistentStore(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::PCM::PersistentStore::insertPrivateClickMeasurement(uint64_t a1, char *a2, char a3, uint64_t *a4)
{
  unsigned int *v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  char v33[8];
  __int128 v34;
  _OWORD v35[2];
  _BYTE v36[128];
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;

  v7 = (unsigned int *)(a1 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v33[0] = *a2;
  v9 = *(_OWORD *)(a2 + 8);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v34 = v9;
  v35[0] = *(_OWORD *)(a2 + 24);
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)(a2 + 33);
  v36[0] = 0;
  v37 = 0;
  if (a2[184])
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v36, (uint64_t)(a2 + 56));
    v37 = 1;
  }
  v10 = *((_OWORD *)a2 + 13);
  v38 = *((_OWORD *)a2 + 12);
  v39 = v10;
  LOBYTE(v40) = 0;
  v41 = 0;
  if (a2[232])
  {
    v11 = *((_QWORD *)a2 + 28);
    *((_QWORD *)a2 + 28) = 0;
    v40 = v11;
    v41 = 1;
  }
  v12 = *((_OWORD *)a2 + 15);
  v13 = *((_OWORD *)a2 + 16);
  *((_OWORD *)a2 + 15) = 0u;
  *((_OWORD *)a2 + 16) = 0u;
  v42 = v12;
  v43 = v13;
  LOBYTE(v44) = 0;
  v46 = 0;
  if (a2[296])
  {
    v14 = *((_OWORD *)a2 + 17);
    *((_QWORD *)a2 + 34) = 0;
    *((_QWORD *)a2 + 35) = 0;
    v44 = v14;
    v15 = *((_QWORD *)a2 + 36);
    *((_QWORD *)a2 + 36) = 0;
    v45 = v15;
    v46 = 1;
  }
  v16 = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = 0;
  v47 = v16;
  v48 = a3;
  v17 = *a4;
  *a4 = 0;
  v49 = v17;
  v18 = WTF::fastMalloc((WTF *)0x160);
  *(_QWORD *)v18 = off_1E34C3468;
  *(_QWORD *)(v18 + 8) = a1;
  *(_QWORD *)(v18 + 16) = a1;
  *(_BYTE *)(v18 + 24) = v33[0];
  *(_QWORD *)(v18 + 32) = v34;
  v19 = *((_QWORD *)&v34 + 1);
  v34 = 0uLL;
  *(_QWORD *)(v18 + 40) = v19;
  v20 = v35[0];
  *(_OWORD *)(v18 + 57) = *(_OWORD *)((char *)v35 + 9);
  *(_OWORD *)(v18 + 48) = v20;
  *(_BYTE *)(v18 + 80) = 0;
  *(_BYTE *)(v18 + 208) = 0;
  if (v37)
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v18 + 80, (uint64_t)v36);
    *(_BYTE *)(v18 + 208) = 1;
  }
  v21 = v38;
  *(_OWORD *)(v18 + 232) = v39;
  *(_OWORD *)(v18 + 216) = v21;
  *(_BYTE *)(v18 + 248) = 0;
  *(_BYTE *)(v18 + 256) = 0;
  if (v41)
  {
    v22 = v40;
    v40 = 0;
    *(_QWORD *)(v18 + 248) = v22;
    *(_BYTE *)(v18 + 256) = 1;
  }
  *(_OWORD *)(v18 + 264) = v42;
  *(_QWORD *)(v18 + 280) = v43;
  v23 = *((_QWORD *)&v43 + 1);
  v42 = 0u;
  v43 = 0u;
  *(_QWORD *)(v18 + 288) = v23;
  *(_BYTE *)(v18 + 296) = 0;
  *(_BYTE *)(v18 + 320) = 0;
  if (v46)
  {
    *(_QWORD *)(v18 + 296) = v44;
    v24 = *((_QWORD *)&v44 + 1);
    v44 = 0uLL;
    *(_QWORD *)(v18 + 304) = v24;
    v25 = v45;
    v45 = 0;
    *(_QWORD *)(v18 + 312) = v25;
    *(_BYTE *)(v18 + 320) = 1;
  }
  *(_QWORD *)(v18 + 328) = v47;
  *(_BYTE *)(v18 + 336) = v48;
  v26 = v49;
  v47 = 0;
  v49 = 0;
  *(_QWORD *)(v18 + 344) = v26;
  v50 = v18;
  WTF::SuspendableWorkQueue::dispatch();
  v28 = v50;
  v50 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = v49;
  v49 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v33, v27);
  return 0;
}

uint64_t WebKit::PCM::PersistentStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(WebKit::PCM::PersistentStore *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v2 = (unsigned int *)((char *)this + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C3490;
  v4[1] = this;
  v4[2] = this;
  v6 = (uint64_t)v4;
  WTF::SuspendableWorkQueue::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, char a6, uint64_t *a7)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  WTF::StringImpl *v52;

  v33 = a1;
  v10 = (unsigned int *)(a1 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)&v34 = a1;
  WebCore::RegistrableDomain::isolatedCopy(&v52);
  *((_QWORD *)&v34 + 1) = v52;
  WebCore::RegistrableDomain::isolatedCopy(&v52);
  *(_QWORD *)&v35 = v52;
  WTF::String::isolatedCopy();
  v36 = *a5;
  v37 = *((_BYTE *)a5 + 2);
  LOBYTE(v38) = 0;
  v39 = 0;
  if (*((_BYTE *)a5 + 16))
  {
    v12 = *((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = 0;
    v38 = v12;
    v39 = 1;
  }
  LOBYTE(v40) = 0;
  v41 = 0;
  if (*((_BYTE *)a5 + 32))
  {
    v13 = *((_QWORD *)a5 + 3);
    *((_QWORD *)a5 + 3) = 0;
    v40 = v13;
    v41 = 1;
  }
  LOBYTE(v42) = 0;
  v43 = 0;
  if (*((_BYTE *)a5 + 48))
  {
    v14 = *((_QWORD *)a5 + 5);
    *((_QWORD *)a5 + 5) = 0;
    v42 = v14;
    v43 = 1;
  }
  LOBYTE(v44) = 0;
  v46 = 0;
  if (*((_BYTE *)a5 + 88))
  {
    v15 = *(_OWORD *)(a5 + 28);
    *(_OWORD *)(a5 + 28) = 0u;
    v16 = *(_OWORD *)(a5 + 36);
    *(_OWORD *)(a5 + 36) = 0u;
    v44 = v15;
    v45 = v16;
    v46 = 1;
  }
  LOBYTE(v47) = 0;
  v49 = 0;
  if (*((_BYTE *)a5 + 120))
  {
    v17 = *((_OWORD *)a5 + 6);
    *((_QWORD *)a5 + 12) = 0;
    *((_QWORD *)a5 + 13) = 0;
    v47 = v17;
    v18 = *((_QWORD *)a5 + 14);
    *((_QWORD *)a5 + 14) = 0;
    v48 = v18;
    v49 = 1;
  }
  v50 = a6;
  v19 = *a7;
  *a7 = 0;
  v51 = v19;
  v20 = WTF::fastMalloc((WTF *)0xC0);
  *(_QWORD *)v20 = off_1E34C34B8;
  *(_QWORD *)(v20 + 8) = v33;
  *(_QWORD *)(v20 + 16) = v34;
  v21 = *((_QWORD *)&v34 + 1);
  v34 = 0u;
  *(_QWORD *)(v20 + 24) = v21;
  *(_QWORD *)(v20 + 32) = v35;
  v22 = *((_QWORD *)&v35 + 1);
  v35 = 0u;
  *(_QWORD *)(v20 + 40) = v22;
  *(_WORD *)(v20 + 48) = v36;
  *(_BYTE *)(v20 + 50) = v37;
  *(_BYTE *)(v20 + 56) = 0;
  *(_BYTE *)(v20 + 64) = 0;
  if (v39)
  {
    v23 = v38;
    v38 = 0;
    *(_QWORD *)(v20 + 56) = v23;
    *(_BYTE *)(v20 + 64) = 1;
  }
  *(_BYTE *)(v20 + 72) = 0;
  *(_BYTE *)(v20 + 80) = 0;
  if (v41)
  {
    v24 = v40;
    v40 = 0;
    *(_QWORD *)(v20 + 72) = v24;
    *(_BYTE *)(v20 + 80) = 1;
  }
  *(_BYTE *)(v20 + 88) = 0;
  *(_BYTE *)(v20 + 96) = 0;
  if (v43)
  {
    v25 = v42;
    v42 = 0;
    *(_QWORD *)(v20 + 88) = v25;
    *(_BYTE *)(v20 + 96) = 1;
  }
  *(_BYTE *)(v20 + 104) = 0;
  *(_BYTE *)(v20 + 136) = 0;
  if (v46)
  {
    *(_OWORD *)(v20 + 104) = v44;
    *(_QWORD *)(v20 + 120) = v45;
    v26 = *((_QWORD *)&v45 + 1);
    v44 = 0uLL;
    v45 = 0uLL;
    *(_QWORD *)(v20 + 128) = v26;
    *(_BYTE *)(v20 + 136) = 1;
  }
  *(_BYTE *)(v20 + 144) = 0;
  *(_BYTE *)(v20 + 168) = 0;
  if (v49)
  {
    *(_QWORD *)(v20 + 144) = v47;
    v27 = *((_QWORD *)&v47 + 1);
    v47 = 0uLL;
    *(_QWORD *)(v20 + 152) = v27;
    v28 = v48;
    v48 = 0;
    *(_QWORD *)(v20 + 160) = v28;
    *(_BYTE *)(v20 + 168) = 1;
  }
  *(_BYTE *)(v20 + 176) = v50;
  v29 = v51;
  v51 = 0;
  *(_QWORD *)(v20 + 184) = v29;
  v52 = (WTF::StringImpl *)v20;
  WTF::SuspendableWorkQueue::dispatch();
  v31 = v52;
  v52 = 0;
  if (v31)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
  return WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WebCore::PCM::AttributionDestinationSite &::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::~$_0(&v33, v30);
}

_QWORD *WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WebCore::PCM::AttributionDestinationSite &::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = a1[22];
  a1[22] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 17), a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 12), v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), v5);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8), v6);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 6), v7);
  v9 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  return a1;
}

uint64_t WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(uint64_t a1, uint64_t *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = (unsigned int *)(a1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C3530;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v5;
  v8 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(uint64_t a1, uint64_t *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[3];
  _QWORD *v10;

  v9[0] = a1;
  v3 = (unsigned int *)(a1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C3580;
  v6[1] = v9[0];
  v6[2] = a1;
  v9[1] = 0;
  v9[2] = 0;
  v6[3] = v5;
  v10 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((uint64_t)v9);
}

uint64_t WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WebKit::PCM::PersistentStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = (unsigned int *)(a1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C35D0;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v5;
  v8 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WebKit::PCM::PersistentStore::clearPrivateClickMeasurement(uint64_t a1, uint64_t *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = (unsigned int *)(a1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C35F8;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v5;
  v8 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WebKit::PCM::PersistentStore::clearPrivateClickMeasurementForRegistrableDomain(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = (unsigned int *)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::RegistrableDomain::isolatedCopy(&v17);
  v6 = *a3;
  *a3 = 0;
  v18 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E34C3620;
  v7[1] = a1;
  v7[2] = a1;
  v8 = v17;
  v17 = 0;
  v7[3] = v8;
  v9 = v18;
  v18 = 0;
  v7[4] = v9;
  v19 = v7;
  WTF::SuspendableWorkQueue::dispatch();
  v11 = v19;
  v19 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v12 = v18;
  v18 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  return 0;
}

uint64_t WebKit::PCM::PersistentStore::clearExpiredPrivateClickMeasurement(WebKit::PCM::PersistentStore *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v2 = (unsigned int *)((char *)this + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C3648;
  v4[1] = this;
  v4[2] = this;
  v6 = (uint64_t)v4;
  WTF::SuspendableWorkQueue::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::PCM::PersistentStore::clearSentAttribution(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  _BYTE v24[136];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v4 = (unsigned int *)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::PrivateClickMeasurement::isolatedCopy();
  v36 = a3;
  v6 = WTF::fastMalloc((WTF *)0x158);
  *(_QWORD *)v6 = off_1E34C3670;
  *(_QWORD *)(v6 + 8) = a1;
  *(_QWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 24) = v20;
  *(_QWORD *)(v6 + 32) = v21;
  v7 = v22;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)(v6 + 40) = v7;
  v8 = v23[0];
  *(_OWORD *)(v6 + 57) = *(_OWORD *)((char *)v23 + 9);
  *(_OWORD *)(v6 + 48) = v8;
  *(_BYTE *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 208) = 0;
  if (v24[128])
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v6 + 80, (uint64_t)v24);
    *(_BYTE *)(v6 + 208) = 1;
  }
  v9 = v25;
  *(_OWORD *)(v6 + 232) = v26;
  *(_OWORD *)(v6 + 216) = v9;
  *(_BYTE *)(v6 + 248) = 0;
  *(_BYTE *)(v6 + 256) = 0;
  if (v28)
  {
    v10 = v27;
    v27 = 0;
    *(_QWORD *)(v6 + 248) = v10;
    *(_BYTE *)(v6 + 256) = 1;
  }
  *(_OWORD *)(v6 + 264) = v29;
  *(_QWORD *)(v6 + 280) = v30;
  v11 = *((_QWORD *)&v30 + 1);
  v29 = 0u;
  v30 = 0u;
  *(_QWORD *)(v6 + 288) = v11;
  *(_BYTE *)(v6 + 296) = 0;
  *(_BYTE *)(v6 + 320) = 0;
  if (v34)
  {
    *(_QWORD *)(v6 + 296) = v31;
    v12 = v32;
    v31 = 0;
    v32 = 0;
    *(_QWORD *)(v6 + 304) = v12;
    v13 = v33;
    v33 = 0;
    *(_QWORD *)(v6 + 312) = v13;
    *(_BYTE *)(v6 + 320) = 1;
  }
  v14 = v35;
  v35 = 0;
  *(_QWORD *)(v6 + 328) = v14;
  *(_BYTE *)(v6 + 336) = v36;
  v37 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  v16 = v37;
  v37 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v20, v15);
  return 0;
}

uint64_t WebKit::PCM::PersistentStore::close(uint64_t a1, uint64_t *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = (unsigned int *)(a1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C3698;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v5;
  v8 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WebKit::PCM::Database::needsUpdatedSchema(WebKit::PCM::Database *this)
{
  return 0;
}

uint64_t WebKit::PrivateClickMeasurementManager::setOverrideTimerForTesting(uint64_t this, char a2)
{
  *(_BYTE *)(this + 48) = a2;
  return this;
}

void WebKit::PCM::ManagerProxy::~ManagerProxy(WebKit::PCM::ManagerProxy *this, void *a2)
{
  WebKit::Daemon::Connection *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E34C2E60;
  *((_QWORD *)this + 1) = &off_1E34B4C10;
  v3 = (WebKit::PCM::ManagerProxy *)((char *)this + 8);
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(v3, a2);
}

{
  WebKit::Daemon::Connection *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  *(_QWORD *)this = off_1E34C2E60;
  *((_QWORD *)this + 1) = &off_1E34B4C10;
  v3 = (WebKit::PCM::ManagerProxy *)((char *)this + 8);
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(v3, a2);
  WTF::fastFree(this, v7);
}

unsigned int *WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>(WTF::StringImpl *a1, unsigned __int8 *a2)
{
  uint64_t v2;

  if (*((unsigned __int8 *)a1 + 40) == a2[40])
  {
    if (*((_BYTE *)a1 + 40))
      WTF::URL::operator=((uint64_t)a1, (WTF::StringImpl *)a2);
  }
  else if (*((_BYTE *)a1 + 40))
  {
    std::__optional_destruct_base<WTF::URL,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    WTF::URL::URL((uint64_t)a1, (uint64_t *)a2);
    *(_BYTE *)(v2 + 40) = 1;
  }
}

WTF::StringImpl *std::__optional_destruct_base<WTF::URL,false>::reset[abi:sn180100](WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*((_BYTE *)result + 40))
  {
    v2 = result;
    result = *(WTF::StringImpl **)result;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *((_BYTE *)v2 + 40) = 0;
  }
  return result;
}

void WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues::~TestingFraudPreventionValues(WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit3PCM8DatabaseES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_(uint64_t a1, void *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int **v6;
  uint64_t v8;
  int v9;
  unsigned int v10;

  v2 = qword_1ECE729B8;
  if (qword_1ECE729B8)
  {
    v3 = *(_DWORD *)(qword_1ECE729B8 - 4);
    if (v3)
    {
      v4 = 0;
      v5 = v3 - 1;
      do
      {
        v6 = (unsigned int **)(v2 + 8 * v5);
        if ((unint64_t)*v6 + 1 >= 2 && !*((_QWORD *)*v6 + 1))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v6, a2);
          ++v4;
        }
      }
      while ((unint64_t)v5--);
      v8 = qword_1ECE729B8;
      if (v4)
      {
        *(_DWORD *)(qword_1ECE729B8 - 16) += v4;
        if (qword_1ECE729B8)
          v9 = *(_DWORD *)(qword_1ECE729B8 - 12);
        else
          v9 = 0;
        *(_DWORD *)(qword_1ECE729B8 - 12) = v9 - v4;
        v8 = qword_1ECE729B8;
      }
      if (v8)
      {
        v10 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v10 && v10 >= 9)
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1ECE729B8);
      }
    }
  }
}

unint64_t WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 16 * v5);
        v9 = v4;
        do
        {
          *(_BYTE *)v7 = *(_BYTE *)v9;
          v10 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v10;
          result = (unsigned int *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 16);
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, int8x16_t **a3)
{
  uint64_t v5;
  char *result;
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char *v32;
  int8x16_t *v33;
  uint64_t v34;
  int8x16_t *v35;
  size_t v36;
  int8x16_t *v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;

  v5 = *((_QWORD *)a1 + 1);
  if (!v5 && (v5 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    result = (char *)MEMORY[0x19AEAB398]();
    if (!result)
      return result;
    v32 = result;
    v33 = a2[1];
    v34 = v33;
    v35 = *a3;
    v36 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v33)
    {
      v37 = *a2;
      if ((_DWORD)v33 == 1)
      {
        *result = v37->i8[0];
        if (!(_DWORD)v36)
          return result;
        goto LABEL_23;
      }
      result = (char *)memcpy(result, v37, a2[1]);
    }
    if (!(_DWORD)v36)
      return result;
LABEL_23:
    result = &v32[v34];
    if ((_DWORD)v36 != 1)
      return (char *)memcpy(result, v35, v36);
    *result = v35->i8[0];
    return result;
  }
  result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v7 = *a2;
    v8 = *a3;
    v9 = *((unsigned int *)a3 + 2);
    v10 = &result[2 * a2[1]];
    v11 = (unint64_t)a2[1] & 0xFFFFFFC0;
    if (v11)
    {
      v12 = &result[2 * v11];
      v13 = 0uLL;
      do
      {
        v38.val[0] = *v7;
        v14 = v7[1];
        v40.val[0] = v7[2];
        v15 = v7[3];
        v7 += 4;
        v16 = v15;
        v40.val[1] = 0uLL;
        v42.val[0] = v14;
        v38.val[1] = 0uLL;
        v17 = result;
        vst2q_s8(v17, v38);
        v17 += 32;
        v42.val[1] = 0uLL;
        vst2q_s8(v17, v42);
        v18 = result + 64;
        vst2q_s8(v18, v40);
        v19 = result + 96;
        vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
        result += 128;
      }
      while (result != v12);
      result = v12;
    }
    while (result != v10)
    {
      v20 = v7->u8[0];
      v7 = (int8x16_t *)((char *)v7 + 1);
      *(_WORD *)result = v20;
      result += 2;
    }
    v21 = &v10[2 * v9];
    v22 = v9 & 0xFFFFFFC0;
    if (v22)
    {
      v23 = &v10[2 * v22];
      v24 = 0uLL;
      do
      {
        v39.val[0] = *v8;
        v25 = v8[1];
        v41.val[0] = v8[2];
        v26 = v8[3];
        v8 += 4;
        v27 = v26;
        v41.val[1] = 0uLL;
        v43.val[0] = v25;
        v39.val[1] = 0uLL;
        v28 = v10;
        vst2q_s8(v28, v39);
        v28 += 32;
        v43.val[1] = 0uLL;
        vst2q_s8(v28, v43);
        v29 = v10 + 64;
        vst2q_s8(v29, v41);
        v30 = v10 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
        v10 += 128;
      }
      while (v10 != v23);
      v10 = v23;
    }
    while (v10 != v21)
    {
      v31 = v8->u8[0];
      v8 = (int8x16_t *)((char *)v8 + 1);
      *(_WORD *)v10 = v31;
      v10 += 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::PrivateClickMeasurementManager::*&)(void),WebKit::PrivateClickMeasurementManager*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::storeUnattributed(WebCore::PrivateClickMeasurement &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PrivateClickMeasurement &,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C2FE8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::storeUnattributed(WebCore::PrivateClickMeasurement &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PrivateClickMeasurement &,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C2FE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::storeUnattributed(WebCore::PrivateClickMeasurement &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PrivateClickMeasurement &,WTF::String const&>::call(WTF::StringImpl *result, WebCore::PrivateClickMeasurement *this, WTF::String *a3)
{
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  char *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  __int128 v51;
  __int128 v52;
  char v53;
  WTF::StringImpl *v54;
  char v55;
  unsigned __int8 v56;
  _BYTE buf[24];
  __int128 v58;
  _OWORD v59[2];
  _BYTE v60[128];
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 1);
  if (!v3 || !*(_QWORD *)(v3 + 8) || !*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
    return result;
  v5 = *((_QWORD *)result + 2);
  if (*(_BYTE *)(v5 + 344))
  {
    WTF::String::operator=((WTF::StringImpl **)this + 33, (WTF::StringImpl *)(v5 + 280));
LABEL_7:
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 184) + 24))(*(_QWORD *)(v5 + 184));
    if (!(_DWORD)result)
      return result;
    v56 = 0;
    v54 = 0;
    WTF::URL::invalidate((WTF::URL *)&v54);
    WebCore::PrivateClickMeasurement::tokenSignatureURL(this);
    LOBYTE(v50) = 0;
    v53 = 0;
    if (LOBYTE(v59[0]))
    {
      v6 = *(WTF::StringImpl **)buf;
      if (*(_QWORD *)buf)
        **(_DWORD **)buf += 2;
      v50 = v6;
      v51 = *(_OWORD *)&buf[8];
      v52 = v58;
      v53 = 1;
    }
    WebKit::PrivateClickMeasurementManager::configureForTokenSigning(v5, &v56, (uint64_t)&v54, (uint64_t)&v50);
    if (v53)
    {
      v8 = v50;
      v50 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    if (LOBYTE(v59[0]))
    {
      v12 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    result = v54;
    if (!v54)
      return result;
    if (!*((_DWORD *)v54 + 1) || (v55 & 1) == 0)
    {
      v54 = 0;
LABEL_84:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      *(_DWORD *)result -= 2;
      return result;
    }
    v13 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_INFO, "About to fire a unlinkable token signing request for the click source.", buf, 2u);
    }
    v14 = *(_QWORD *)(v5 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v49 = *(WTF::StringImpl **)buf;
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, 0, &v49);
    v16 = v49;
    v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    WebCore::PrivateClickMeasurement::tokenSignatureJSON(this);
    v20 = v48;
    v48 = 0;
    v49 = v20;
    v21 = v56;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
    v22 = *(unsigned int **)(v5 + 8);
    if (v22)
    {
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    *(_QWORD *)buf = v22;
    *(_QWORD *)&buf[8] = v5;
    buf[16] = *(_BYTE *)this;
    v24 = *(_OWORD *)((char *)this + 8);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    v58 = v24;
    v59[0] = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)v59 + 9) = *(_OWORD *)((char *)this + 33);
    v60[0] = 0;
    v61 = 0;
    if (*((_BYTE *)this + 184))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v60, (uint64_t)this + 56);
      v61 = 1;
    }
    v25 = *((_OWORD *)this + 13);
    v62 = *((_OWORD *)this + 12);
    v63 = v25;
    LOBYTE(v64) = 0;
    v65 = 0;
    if (*((_BYTE *)this + 232))
    {
      v26 = *((_QWORD *)this + 28);
      *((_QWORD *)this + 28) = 0;
      v64 = v26;
      v65 = 1;
    }
    v27 = *((_OWORD *)this + 15);
    v28 = *((_OWORD *)this + 16);
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    v66 = v27;
    v67 = v28;
    LOBYTE(v68) = 0;
    v70 = 0;
    if (*((_BYTE *)this + 296))
    {
      v29 = *((_OWORD *)this + 17);
      *((_QWORD *)this + 34) = 0;
      *((_QWORD *)this + 35) = 0;
      v68 = v29;
      v30 = *((_QWORD *)this + 36);
      *((_QWORD *)this + 36) = 0;
      v69 = v30;
      v70 = 1;
    }
    v31 = *((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;
    v71 = v31;
    v32 = WTF::fastMalloc((WTF *)0x150);
    *(_QWORD *)v32 = off_1E34C3060;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)buf;
    *(_BYTE *)(v32 + 24) = buf[16];
    *(_QWORD *)(v32 + 32) = v58;
    v33 = *((_QWORD *)&v58 + 1);
    *(_QWORD *)buf = 0;
    v58 = 0uLL;
    *(_QWORD *)(v32 + 40) = v33;
    v34 = v59[0];
    *(_OWORD *)(v32 + 57) = *(_OWORD *)((char *)v59 + 9);
    *(_OWORD *)(v32 + 48) = v34;
    *(_BYTE *)(v32 + 80) = 0;
    *(_BYTE *)(v32 + 208) = 0;
    if (v61)
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v32 + 80, (uint64_t)v60);
      *(_BYTE *)(v32 + 208) = 1;
    }
    v35 = v62;
    *(_OWORD *)(v32 + 232) = v63;
    *(_OWORD *)(v32 + 216) = v35;
    *(_BYTE *)(v32 + 248) = 0;
    *(_BYTE *)(v32 + 256) = 0;
    if (v65)
    {
      v36 = v64;
      v64 = 0;
      *(_QWORD *)(v32 + 248) = v36;
      *(_BYTE *)(v32 + 256) = 1;
    }
    *(_OWORD *)(v32 + 264) = v66;
    *(_QWORD *)(v32 + 280) = v67;
    v37 = *((_QWORD *)&v67 + 1);
    v66 = 0u;
    v67 = 0u;
    *(_QWORD *)(v32 + 288) = v37;
    *(_BYTE *)(v32 + 296) = 0;
    *(_BYTE *)(v32 + 320) = 0;
    if (v70)
    {
      *(_QWORD *)(v32 + 296) = v68;
      v38 = *((_QWORD *)&v68 + 1);
      v68 = 0uLL;
      *(_QWORD *)(v32 + 304) = v38;
      v39 = v69;
      v69 = 0;
      *(_QWORD *)(v32 + 312) = v39;
      *(_BYTE *)(v32 + 320) = 1;
    }
    v40 = v71;
    v71 = 0;
    *(_QWORD *)(v32 + 328) = v40;
    v47 = v32;
    WebKit::PCM::NetworkLoader::start((WTF::URL *)&v54, &v49, v21 != 0, &v47);
    v42 = v47;
    v47 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&buf[16], v41);
    v11 = *(unsigned int **)buf;
    *(_QWORD *)buf = 0;
    if (!v11)
      goto LABEL_75;
    do
    {
      v43 = __ldaxr(v11);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v11));
    if (v44)
      goto LABEL_75;
    goto LABEL_89;
  }
  WebCore::PrivateClickMeasurement::calculateAndUpdateSourceUnlinkableToken(this, a3);
  if (!(_BYTE)v51)
    goto LABEL_7;
  v9 = qword_1ECE715F0;
  if (!os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
    goto LABEL_41;
  WTF::String::utf8();
  if (v54)
    v10 = (char *)v54 + 16;
  else
    v10 = 0;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = v10;
  _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_INFO, "Got the following error in calculateAndUpdateSourceUnlinkableToken(): '%{public}s", buf, 0xCu);
  v11 = (unsigned int *)v54;
  v54 = 0;
  if (v11)
  {
    if (*v11 == 1)
      v11 = (unsigned int *)WTF::fastFree((WTF *)v11, v7);
    else
      --*v11;
  }
  if ((_BYTE)v51)
  {
LABEL_41:
    v17 = *(_QWORD *)(v5 + 184);
    v18 = v50;
    if (v50)
      *(_DWORD *)v50 += 2;
    v49 = v18;
    *(_QWORD *)buf = "[Private Click Measurement] ";
    *(_QWORD *)&buf[8] = 29;
    result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)buf, (uint64_t *)&v49, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, 2, &v54);
    v19 = v54;
    v54 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v7);
      else
        *(_DWORD *)v19 -= 2;
    }
    result = v49;
    v49 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
    if ((_BYTE)v51)
    {
      result = v50;
      v50 = 0;
      if (result)
        goto LABEL_84;
    }
    return result;
  }
  __break(1u);
LABEL_89:
  atomic_store(1u, v11);
  WTF::fastFree((WTF *)v11, v7);
LABEL_75:
  v45 = v49;
  v49 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v45;
  }
  v46 = v48;
  v48 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v46;
  }
  result = v54;
  v54 = 0;
  if (result)
    goto LABEL_84;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PrivateClickMeasurement &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C3010;
  v3 = a1[42];
  a1[42] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PrivateClickMeasurement &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C3010;
  v3 = a1[42];
  a1[42] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PrivateClickMeasurement &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::JSONImpl::ObjectBase *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v3 = *((_QWORD *)result + 1);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 2);
  v6 = *a2;
  if (*a2)
  {
    v7 = *(_QWORD *)(v5 + 184);
    *(_DWORD *)v6 += 2;
    v15 = v6;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Received error: '", 46, (uint64_t *)&v15, (uint64_t)"' for token public key request.", 32, &v16);
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, 2, &v16);
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v5 + 184);
  if (!*a3)
  {
    WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] JSON response is empty for token public key request.", 81);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 2, &v16);
      result = v16;
      v16 = 0;
      if (!result)
        return result;
      goto LABEL_20;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x19714BF78);
  }
  WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] Got JSON response for token public key request.", 76);
  if (!v16)
    goto LABEL_24;
  (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 0, &v16);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(v13, (const WTF::String *)&v15);
  (*(void (**)(_QWORD, uint64_t, WTF::StringImpl **))(**((_QWORD **)v4 + 42) + 16))(*((_QWORD *)v4 + 42), (uint64_t)v4 + 24, &v16);
LABEL_15:
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
LABEL_20:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PCM::AttributionTriggerData &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PCM::AttributionTriggerData &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = off_1E34C3038;
  v3 = a1[19];
  a1[19] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 15), a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8), v5);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 6), v6);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v7);
  v9 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PCM::AttributionTriggerData &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PCM::AttributionTriggerData &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)a1 = off_1E34C3038;
  v3 = *((_QWORD *)a1 + 19);
  *((_QWORD *)a1 + 19) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 120, a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64, v5);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 48, v6);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v7);
  v9 = (unsigned int *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  return WTF::fastFree(a1, v8);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PCM::AttributionTriggerData &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PCM::AttributionTriggerData &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::JSONImpl::ObjectBase *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v3 = *((_QWORD *)result + 1);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 2);
  v6 = *a2;
  if (*a2)
  {
    v7 = *(_QWORD *)(v5 + 184);
    *(_DWORD *)v6 += 2;
    v15 = v6;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Received error: '", 46, (uint64_t *)&v15, (uint64_t)"' for token public key request.", 32, &v16);
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, 2, &v16);
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v5 + 184);
  if (!*a3)
  {
    WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] JSON response is empty for token public key request.", 81);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 2, &v16);
      result = v16;
      v16 = 0;
      if (!result)
        return result;
      goto LABEL_20;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x19714C294);
  }
  WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] Got JSON response for token public key request.", 76);
  if (!v16)
    goto LABEL_24;
  (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 0, &v16);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(v13, (const WTF::String *)&v15);
  (*(void (**)(_QWORD, uint64_t, WTF::StringImpl **))(**((_QWORD **)v4 + 19) + 16))(*((_QWORD *)v4 + 19), (uint64_t)v4 + 24, &v16);
LABEL_15:
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
LABEL_20:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WTF::tryMakeString<WTF::ASCIILiteral>(_BYTE *result, _BYTE *a2, uint64_t a3)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    v3 = a3 - 1;
  else
    v3 = 0;
  if (v3 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19714C344);
  }
  v4 = result;
  if ((_DWORD)v3)
  {
    result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v3 + 20));
    v6 = v7;
    if (v7)
    {
      result = (_BYTE *)(v7 + 20);
      *(_DWORD *)v7 = 2;
      *(_DWORD *)(v7 + 4) = v3;
      *(_QWORD *)(v7 + 8) = v7 + 20;
      *(_DWORD *)(v7 + 16) = 4;
      if ((_DWORD)v3 == 1)
        *result = *a2;
      else
        result = memcpy(result, a2, v3);
    }
  }
  else
  {
    v6 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  *v4 = v6;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForSource(WebCore::PrivateClickMeasurement &&)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E34C3060;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForSource(WebCore::PrivateClickMeasurement &&)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E34C3060;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForSource(WebCore::PrivateClickMeasurement &&)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  char *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  __int128 buf;
  WTF::StringImpl *v29[2];

  v29[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  if (!*(_QWORD *)(v3 + 8))
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 2);
  result = WebKit::PrivateClickMeasurementManager::getSignatureBase64URLFromTokenSignatureResponse(&v26, v5, *a2, *a3);
  if (!v27)
    return result;
  if (*(_BYTE *)(v5 + 344))
  {
    buf = 0uLL;
    v29[0] = 0;
    WTF::String::operator=((WTF::StringImpl **)&buf, (WTF::StringImpl *)(v5 + 288));
    if (*(_BYTE *)(v5 + 344))
    {
      WTF::String::operator=((WTF::StringImpl **)&buf + 1, (WTF::StringImpl *)(v5 + 296));
      if (*(_BYTE *)(v5 + 344))
      {
        WTF::String::operator=(v29, (WTF::StringImpl *)(v5 + 304));
        WebCore::PrivateClickMeasurement::setSourceSecretToken();
        v7 = v29[0];
        v29[0] = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v6);
          else
            *(_DWORD *)v7 -= 2;
        }
        v12 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
        *((_QWORD *)&buf + 1) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v6);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = (WTF::StringImpl *)buf;
        *(_QWORD *)&buf = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v6);
          else
            *(_DWORD *)v13 -= 2;
        }
        goto LABEL_27;
      }
    }
LABEL_57:
    __break(1u);
  }
  WebCore::PrivateClickMeasurement::calculateAndUpdateSourceSecretToken((WTF::StringImpl *)((char *)v4 + 24), (const WTF::String *)&v26);
  if (v25)
  {
    v8 = qword_1ECE715F0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
      goto LABEL_41;
    WTF::String::utf8();
    if (v23)
      v9 = (char *)v23 + 16;
    else
      v9 = 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_INFO, "Got the following error in calculateAndUpdateSourceSecretToken(): '%{public}s", (uint8_t *)&buf, 0xCu);
    v11 = v23;
    v23 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v10);
      else
        --*(_DWORD *)v11;
    }
    if (v25)
    {
LABEL_41:
      v19 = *(_QWORD *)(v5 + 184);
      v20 = v24;
      if (v24)
        *(_DWORD *)v24 += 2;
      v22 = v20;
      *(_QWORD *)&buf = "[Private Click Measurement] ";
      *((_QWORD *)&buf + 1) = 29;
      result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&buf, (uint64_t *)&v22, &v23);
      if (!v23)
      {
        __break(0xC471u);
        return result;
      }
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v19 + 16))(v19, 2, &v23);
      v21 = v23;
      v23 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v18);
        else
          *(_DWORD *)v21 -= 2;
      }
      result = v22;
      v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
        else
          *(_DWORD *)result -= 2;
      }
      if (v25)
      {
        result = v24;
        v24 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
          else
            *(_DWORD *)result -= 2;
        }
      }
      goto LABEL_33;
    }
    goto LABEL_57;
  }
LABEL_27:
  v14 = *(_QWORD *)(v5 + 184);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v14 + 16))(v14, 0, &buf);
  v16 = (WTF::StringImpl *)buf;
  *(_QWORD *)&buf = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = off_1E34C3088;
  *(_QWORD *)&buf = v17;
  WebKit::PrivateClickMeasurementManager::initializeStore(v5);
  (*(void (**)(_QWORD, uint64_t, _QWORD, __int128 *))(**(_QWORD **)(v5 + 168) + 16))(*(_QWORD *)(v5 + 168), (uint64_t)v4 + 24, 0, &buf);
  result = (WTF::StringImpl *)buf;
  *(_QWORD *)&buf = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
LABEL_33:
  if (v27)
  {
    result = v26;
    v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>> const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34C30B0;
  WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>> const&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C30B0;
  WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  NSObject *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  char *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint8_t buf[8];
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  WTF::StringImpl *v31;
  char v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  if (!*(_QWORD *)(v3 + 8))
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 2);
  result = WebKit::PrivateClickMeasurementManager::getSignatureBase64URLFromTokenSignatureResponse(&v31, v5, *a2, *a3);
  if (!v32)
    return result;
  if (!*((_BYTE *)v4 + 128))
  {
    v7 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_INFO, "Destination unlinkable token is missing.", buf, 2u);
    }
    v8 = *(_QWORD *)(v5 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, 2, buf);
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_61;
  }
  WebCore::PrivateClickMeasurement::calculateAndUpdateDestinationSecretToken();
  if (!v30)
  {
    v10 = *(_QWORD *)(v5 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v10 + 16))(v10, 0, &v33);
    v12 = (WTF::StringImpl *)v33;
    *(_QWORD *)&v33 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (!v30)
    {
      if (*((_BYTE *)v4 + 160))
      {
        WTF::String::operator=((WTF::StringImpl **)v4 + 17, (WTF::StringImpl *)buf);
        WTF::String::operator=((WTF::StringImpl **)v4 + 18, (WTF::StringImpl *)&v28);
        WTF::String::operator=((WTF::StringImpl **)v4 + 19, (WTF::StringImpl *)&v29);
      }
      else
      {
        v17 = *(WTF::StringImpl **)buf;
        if (*(_QWORD *)buf)
          **(_DWORD **)buf += 2;
        *((_QWORD *)v4 + 17) = v17;
        v18 = v28;
        if (v28)
          *v28 += 2;
        *((_QWORD *)v4 + 18) = v18;
        v19 = v29;
        if (v29)
          *v29 += 2;
        *((_QWORD *)v4 + 19) = v19;
        *((_BYTE *)v4 + 160) = 1;
      }
      if (*(_BYTE *)(v5 + 160))
        v20 = v5 + 152;
      else
        v20 = (uint64_t)v4 + 168;
      result = (WTF::StringImpl *)WebKit::PrivateClickMeasurementManager::attribute(v5, (uint64_t)v4 + 24, (uint64_t)v4 + 32, (uint64_t)v4 + 40, v20);
      goto LABEL_59;
    }
    goto LABEL_67;
  }
  if (v30 != 1)
  {
LABEL_67:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_68:
    __break(0xC471u);
    return result;
  }
  v6 = *(WTF::StringImpl **)buf;
  if (*(_QWORD *)buf && *(_DWORD *)(*(_QWORD *)buf + 4))
  {
    **(_DWORD **)buf += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = (WTF::StringImpl *)v33;
  }
  v26 = v6;
  v13 = qword_1ECE715F0;
  if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
  {
    WTF::String::utf8();
    if (v25)
      v14 = (char *)v25 + 16;
    else
      v14 = 0;
    LODWORD(v33) = 136446210;
    *(_QWORD *)((char *)&v33 + 4) = v14;
    _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_INFO, "Got the following error in calculateAndUpdateSourceSecretToken(): '%{public}s", (uint8_t *)&v33, 0xCu);
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, v15);
      else
        --*(_DWORD *)v16;
    }
    v6 = v26;
  }
  v21 = *(_QWORD *)(v5 + 184);
  if (v6)
    *(_DWORD *)v6 += 2;
  v24 = v6;
  *(_QWORD *)&v33 = "[Private Click Measurement] ";
  *((_QWORD *)&v33 + 1) = 29;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v33, (uint64_t *)&v24, &v25);
  if (!v25)
    goto LABEL_68;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, 2, &v25);
  v22 = v25;
  v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v9);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v9);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_59:
  if (v30 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(__int128 *, uint8_t *))off_1E34C30C8[v30])(&v33, buf);
LABEL_61:
  if (v32)
  {
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22DestinationSecretTokenEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22DestinationSecretTokenEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::handleAttribution(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::RegistrableDomain &&,WTF::URL const,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &,WTF::String>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34C3110;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::handleAttribution(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::RegistrableDomain &&,WTF::URL const,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &,WTF::String>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34C3110;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::handleAttribution(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::RegistrableDomain &&,WTF::URL const,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &,WTF::String>::call(WTF::StringImpl **result, uint64_t a2, WebCore::PrivateClickMeasurement *this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  NSObject *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  const void *v12;
  const void *v13;
  const void *v14;
  NSObject *v15;
  char *v16;
  void *v17;
  WTF::StringImpl *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  NSObject *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  unsigned int *v35;
  unsigned int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  CFTypeRef cf;
  CFTypeRef v60;
  CFTypeRef v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  __int128 v68;
  __int128 v69;
  char v70;
  WTF::StringImpl *v71;
  char v72;
  unsigned __int8 v73;
  _BYTE buf[40];
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  __int128 v82;
  char v83;
  __int128 v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v3 = result[1];
  if (!v3 || !*((_QWORD *)v3 + 1))
    return result;
  v4 = result;
  v5 = (uint64_t)result[2];
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    if (*(_BYTE *)(v5 + 344))
    {
      if (!*(_BYTE *)(a2 + 88))
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_BYTE *)(a2 + 88) = 1;
      }
      return WTF::String::operator=((WTF::StringImpl **)(a2 + 80), (WTF::StringImpl *)(v5 + 312));
    }
    WebCore::PrivateClickMeasurement::calculateAndUpdateDestinationUnlinkableToken(this, (const WTF::String *)a2);
    if (v63)
    {
      if (v63 == 1)
      {
        v10 = (WTF::StringImpl *)cf;
        if (cf && *((_DWORD *)cf + 1))
        {
          *(_DWORD *)cf += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v10 = *(WTF::StringImpl **)buf;
        }
        v67 = v10;
        v15 = qword_1ECE715F0;
        if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
        {
          WTF::String::utf8();
          if (v71)
            v16 = (char *)v71 + 16;
          else
            v16 = 0;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v16;
          _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_INFO, "Got the following error in calculateAndUpdateDestinationUnlinkableToken(): '%{public}s", buf, 0xCu);
          v18 = v71;
          v71 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 1)
              WTF::fastFree(v18, v17);
            else
              --*(_DWORD *)v18;
          }
          v10 = v67;
        }
        v25 = *(_QWORD *)(v5 + 184);
        if (v10)
          *(_DWORD *)v10 += 2;
        v66 = v10;
        *(_QWORD *)buf = "[Private Click Measurement] ";
        *(_QWORD *)&buf[8] = 29;
        result = (WTF::StringImpl **)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)buf, (uint64_t *)&v66, &v71);
        if (v71)
        {
          (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v25 + 16))(v25, 2, &v71);
          v26 = v71;
          v71 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v23);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = v66;
          v66 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v23);
            else
              *(_DWORD *)v27 -= 2;
          }
          result = (WTF::StringImpl **)v67;
          v67 = 0;
          if (!result)
            goto LABEL_77;
          goto LABEL_74;
        }
      }
      else
      {
        result = (WTF::StringImpl **)std::__throw_bad_variant_access[abi:sn180100]();
      }
      __break(0xC471u);
      return result;
    }
    v11 = cf;
    if (*(_BYTE *)(a2 + 88))
    {
      if (cf)
        CFRetain(cf);
      v12 = *(const void **)(a2 + 56);
      *(_QWORD *)(a2 + 56) = cf;
      if (v12)
        CFRelease(v12);
      if (v60)
        CFRetain(v60);
      v13 = *(const void **)(a2 + 64);
      *(_QWORD *)(a2 + 64) = v60;
      if (v13)
        CFRelease(v13);
      if (v61)
        CFRetain(v61);
      v14 = *(const void **)(a2 + 72);
      *(_QWORD *)(a2 + 72) = v61;
      if (v14)
        CFRelease(v14);
      WTF::String::operator=((WTF::StringImpl **)(a2 + 80), (WTF::StringImpl *)&v62);
    }
    else
    {
      *(_QWORD *)(a2 + 56) = cf;
      if (v11)
        CFRetain(v11);
      v19 = v60;
      *(_QWORD *)(a2 + 64) = v60;
      if (v19)
        CFRetain(v19);
      v20 = v61;
      *(_QWORD *)(a2 + 72) = v61;
      if (v20)
        CFRetain(v20);
      v21 = v62;
      if (v62)
        *v62 += 2;
      *(_QWORD *)(a2 + 80) = v21;
      *(_BYTE *)(a2 + 88) = 1;
    }
    result = (WTF::StringImpl **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 184) + 24))(*(_QWORD *)(v5 + 184));
    if (!(_DWORD)result)
      goto LABEL_77;
    v73 = 0;
    v71 = 0;
    WTF::URL::invalidate((WTF::URL *)&v71);
    WebCore::PCM::AttributionTriggerData::tokenSignatureURL((WebCore::PCM::AttributionTriggerData *)a2);
    LOBYTE(v67) = 0;
    v70 = 0;
    if ((_BYTE)v75)
    {
      v22 = *(WTF::StringImpl **)buf;
      if (*(_QWORD *)buf)
        **(_DWORD **)buf += 2;
      v67 = v22;
      v68 = *(_OWORD *)&buf[8];
      v69 = *(_OWORD *)&buf[24];
      v70 = 1;
    }
    WebKit::PrivateClickMeasurementManager::configureForTokenSigning(v5, &v73, (uint64_t)&v71, (uint64_t)&v67);
    if (v70)
    {
      v24 = v67;
      v67 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    if ((_BYTE)v75)
    {
      v28 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v23);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
    result = (WTF::StringImpl **)v71;
    if (!v71)
      goto LABEL_77;
    if (*((_DWORD *)v71 + 1) && (v72 & 1) != 0)
    {
      v29 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_196BCC000, v29, OS_LOG_TYPE_INFO, "About to fire a unlinkable token signing request for the click destination.", buf, 2u);
      }
      v30 = *(_QWORD *)(v5 + 184);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v66 = *(WTF::StringImpl **)buf;
      (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v30 + 16))(v30, 0, &v66);
      v32 = v66;
      v66 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
      WebCore::PCM::AttributionTriggerData::tokenSignatureJSON((WebCore::PCM::AttributionTriggerData *)a2);
      v33 = v65;
      v65 = 0;
      v66 = v33;
      v34 = v73;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
      v35 = *(unsigned int **)(v5 + 8);
      if (v35)
      {
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
      }
      *(_QWORD *)buf = v35;
      *(_QWORD *)&buf[8] = v5;
      v37 = *(_OWORD *)(v4 + 3);
      v4[3] = 0;
      v4[4] = 0;
      *(_OWORD *)&buf[16] = v37;
      *(_WORD *)&buf[32] = *(_WORD *)a2;
      buf[34] = *(_BYTE *)(a2 + 2);
      LOBYTE(v75) = 0;
      v76 = 0;
      if (*(_BYTE *)(a2 + 16))
      {
        v38 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v75 = v38;
        v76 = 1;
      }
      LOBYTE(v77) = 0;
      v78 = 0;
      if (*(_BYTE *)(a2 + 32))
      {
        v39 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = 0;
        v77 = v39;
        v78 = 1;
      }
      LOBYTE(v79) = 0;
      v80 = 0;
      if (*(_BYTE *)(a2 + 48))
      {
        v40 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a2 + 40) = 0;
        v79 = v40;
        v80 = 1;
      }
      LOBYTE(v81) = 0;
      v83 = 0;
      if (*(_BYTE *)(a2 + 88))
      {
        v41 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a2 + 56) = 0u;
        v81 = v41;
        v42 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a2 + 72) = 0u;
        v82 = v42;
        v83 = 1;
      }
      LOBYTE(v84) = 0;
      v86 = 0;
      if (*(_BYTE *)(a2 + 120))
      {
        v43 = *(_OWORD *)(a2 + 96);
        *(_QWORD *)(a2 + 96) = 0;
        *(_QWORD *)(a2 + 104) = 0;
        v84 = v43;
        v44 = *(_QWORD *)(a2 + 112);
        *(_QWORD *)(a2 + 112) = 0;
        v85 = v44;
        v86 = 1;
      }
      WTF::String::isolatedCopy();
      v45 = WTF::fastMalloc((WTF *)0xB0);
      *(_QWORD *)v45 = off_1E34C30B0;
      *(_OWORD *)(v45 + 8) = *(_OWORD *)buf;
      *(_QWORD *)(v45 + 24) = *(_QWORD *)&buf[16];
      v46 = *(_QWORD *)&buf[24];
      *(_QWORD *)buf = 0;
      *(_OWORD *)&buf[16] = 0uLL;
      *(_QWORD *)(v45 + 32) = v46;
      *(_WORD *)(v45 + 40) = *(_WORD *)&buf[32];
      *(_BYTE *)(v45 + 42) = buf[34];
      *(_BYTE *)(v45 + 48) = 0;
      *(_BYTE *)(v45 + 56) = 0;
      if (v76)
      {
        v47 = v75;
        v75 = 0;
        *(_QWORD *)(v45 + 48) = v47;
        *(_BYTE *)(v45 + 56) = 1;
      }
      *(_BYTE *)(v45 + 64) = 0;
      *(_BYTE *)(v45 + 72) = 0;
      if (v78)
      {
        v48 = v77;
        v77 = 0;
        *(_QWORD *)(v45 + 64) = v48;
        *(_BYTE *)(v45 + 72) = 1;
      }
      *(_BYTE *)(v45 + 80) = 0;
      *(_BYTE *)(v45 + 88) = 0;
      if (v80)
      {
        v49 = v79;
        v79 = 0;
        *(_QWORD *)(v45 + 80) = v49;
        *(_BYTE *)(v45 + 88) = 1;
      }
      *(_BYTE *)(v45 + 96) = 0;
      *(_BYTE *)(v45 + 128) = 0;
      if (v83)
      {
        *(_QWORD *)(v45 + 96) = v81;
        v50 = *((_QWORD *)&v81 + 1);
        v81 = 0u;
        *(_QWORD *)(v45 + 104) = v50;
        *(_QWORD *)(v45 + 112) = v82;
        v51 = *((_QWORD *)&v82 + 1);
        v82 = 0u;
        *(_QWORD *)(v45 + 120) = v51;
        *(_BYTE *)(v45 + 128) = 1;
      }
      *(_BYTE *)(v45 + 136) = 0;
      *(_BYTE *)(v45 + 160) = 0;
      if (v86)
      {
        *(_QWORD *)(v45 + 136) = v84;
        v52 = *((_QWORD *)&v84 + 1);
        v84 = 0uLL;
        *(_QWORD *)(v45 + 144) = v52;
        v53 = v85;
        v85 = 0;
        *(_QWORD *)(v45 + 152) = v53;
        *(_BYTE *)(v45 + 160) = 1;
      }
      v54 = v87;
      v87 = 0;
      *(_QWORD *)(v45 + 168) = v54;
      v64 = v45;
      WebKit::PCM::NetworkLoader::start((WTF::URL *)&v71, &v66, v34 != 0, &v64);
      v56 = v64;
      v64 = 0;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0::~$_0((uint64_t)buf, v55);
      v57 = v66;
      v66 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v57;
      }
      v58 = v65;
      v65 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v58;
      }
      result = (WTF::StringImpl **)v71;
      v71 = 0;
      if (!result)
        goto LABEL_77;
    }
    else
    {
      v71 = 0;
    }
LABEL_74:
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
    else
      *(_DWORD *)result -= 2;
LABEL_77:
    if (v63 != -1)
      return (WTF::StringImpl **)((uint64_t (*)(_BYTE *, CFTypeRef *))off_1E34C3128[v63])(buf, &cf);
    return result;
  }
  v7 = qword_1ECE715F0;
  if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_INFO, "The public key URL was empty.", buf, 2u);
  }
  v8 = *(_QWORD *)(v5 + 184);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, 2, buf);
  result = *(WTF::StringImpl ***)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM26DestinationUnlinkableTokenEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)a2;
  *(_QWORD *)a2 = 0;
  if (v6)
    CFRelease(v6);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM26DestinationUnlinkableTokenEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::attribute(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C3148;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::attribute(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C3148;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::attribute(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&>::call(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  double v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *result;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  char v39[16];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char __s[16];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD __src[7];
  size_t __n[2];
  _OWORD v73[7];
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a2 + 32);
  v8 = *a3;
  v9 = *((_DWORD *)a3 + 2);
  v10 = *((unsigned int *)a3 + 3);
  *a3 = 0;
  a3[1] = 0;
  v36 = v8;
  v37 = v9;
  v38 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11 || !*(_QWORD *)(v11 + 8) || !v7)
    return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
  v12 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v12 + 184) + 32))(*(_QWORD *)(v12 + 184)))
    v13 = (_DWORD)v10 == 0;
  else
    v13 = 1;
  if (!v13)
  {
    v21 = &v8[16 * v10];
    do
    {
      v22 = v8 + 8;
      v23 = *v8;
      v8 += 16;
      (*(void (**)(_QWORD, _QWORD, unsigned __int8 *))(**(_QWORD **)(v12 + 184) + 16))(*(_QWORD *)(v12 + 184), v23, v22);
    }
    while (v8 != v21);
  }
  if (!(_BYTE)v4 || !(_BYTE)v6)
    return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
  if (v5 >= v3)
  {
    v14 = v4;
  }
  else
  {
    v3 = v5;
    v14 = v6;
  }
  if (!v14)
    return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
  if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v12 + 16)))
  {
    WTF::RunLoop::TimerBase::secondsUntilFire((WTF::RunLoop::TimerBase *)(v12 + 16));
    if (v15 < v3)
      return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
  }
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 184) + 32))(*(_QWORD *)(v12 + 184));
  v17 = *(_QWORD *)(v12 + 184);
  if (!v16)
  {
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Setting timer for firing attribution request to the timeout of ", 92, (uint64_t)" seconds.", 10, v73);
    (*(void (**)(uint64_t, _QWORD, _OWORD *))(*(_QWORD *)v17 + 16))(v17, 0, v73);
    v19 = *(WTF::StringImpl **)&v73[0];
    *(_QWORD *)&v73[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
LABEL_22:
    WTF::RunLoop::TimerBase::start();
    return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
  }
  WTF::numberToString();
  HIDWORD(v54) = strlen(__s);
  WTF::numberToString();
  result = (unsigned int *)strlen(v39);
  HIDWORD(v46) = (_DWORD)result;
  if ((result & 0x80000000) == 0 && !__OFADD__((_DWORD)result, 9))
  {
    v24 = (_DWORD)result + 60;
    if (!__OFADD__((_DWORD)result + 9, 51) && (HIDWORD(v54) & 0x80000000) == 0)
    {
      v25 = __OFADD__(HIDWORD(v54), v24);
      v26 = HIDWORD(v54) + v24;
      if (!v25)
      {
        v27 = (v26 + 102);
        if (!__OFADD__(v26, 102))
        {
          v67 = v51;
          v68 = v52;
          v69 = v53;
          v70 = v54;
          v63 = *(_OWORD *)__s;
          v64 = v48;
          v65 = v49;
          v66 = v50;
          v57 = v41;
          v58 = v42;
          v55 = *(_OWORD *)v39;
          v56 = v40;
          v61 = v45;
          v62 = v46;
          v59 = v43;
          v60 = v44;
          if (v26 == -102)
          {
            v28 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
LABEL_42:
            *(_QWORD *)&v73[0] = v28;
            (*(void (**)(uint64_t, _QWORD, _OWORD *))(*(_QWORD *)v17 + 16))(v17, 0, v73);
            v35 = *(WTF::StringImpl **)&v73[0];
            *(_QWORD *)&v73[0] = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v34);
              else
                *(_DWORD *)v35 -= 2;
            }
            goto LABEL_22;
          }
          if ((v27 & 0x80000000) == 0)
          {
            result = (unsigned int *)WTF::tryFastCompactMalloc((WTF *)(v27 + 20));
            v28 = *(_QWORD *)&v73[0];
            if (*(_QWORD *)&v73[0])
            {
              **(_DWORD **)&v73[0] = 2;
              *(_DWORD *)(v28 + 4) = v27;
              *(_QWORD *)(v28 + 8) = v28 + 20;
              *(_DWORD *)(v28 + 16) = 4;
              qmemcpy((void *)(v28 + 20), "[Private Click Measurement] Setting timer for firing attribution request to the debug mode timeout of ", 102);
              v29 = (_BYTE *)(v28 + 122);
              __src[2] = v65;
              __src[3] = v66;
              __src[0] = v63;
              __src[1] = v64;
              __src[6] = v69;
              *(_OWORD *)__n = v70;
              __src[4] = v67;
              __src[5] = v68;
              v30 = HIDWORD(v70);
              if (HIDWORD(v70))
              {
                if (HIDWORD(v70) == 1)
                  *v29 = __src[0];
                else
                  memcpy((void *)(v28 + 122), __src, HIDWORD(v70));
              }
              qmemcpy(&v29[v30], " seconds where the regular timeout would have been ", 51);
              v31 = &v29[v30 + 51];
              v73[4] = v59;
              v73[5] = v60;
              v73[6] = v61;
              v74 = v62;
              v73[0] = v55;
              v73[1] = v56;
              v73[2] = v57;
              v73[3] = v58;
              v32 = HIDWORD(v62);
              if (HIDWORD(v62))
              {
                if (HIDWORD(v62) == 1)
                  *v31 = v73[0];
                else
                  memcpy(v31, v73, HIDWORD(v74));
              }
              v33 = &v31[v32];
              *(_QWORD *)v33 = *(_QWORD *)" seconds.";
              v33[8] = 46;
              goto LABEL_42;
            }
          }
        }
      }
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t v7[2];
  uint64_t v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7[0] = a3;
  v7[1] = a4;
  result = WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>(v8, v7, a5);
  if (!*a5)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char __s[124];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v13 = *a1;
  if (v6 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19714DE6CLL);
  }
  v14 = v6;
  WTF::numberToString();
  v16 = strlen(__s);
  v8 = a2[1];
  v5 = v8 != 0;
  v9 = v8 - 1;
  if (!v5)
    v9 = 0;
  v11 = *a2;
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19714DE8CLL);
  }
  v12 = v9;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v13, (uint64_t)__s, (uint64_t)&v11, a3);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 124);
  v5 = *(_DWORD *)(a3 + 8);
  if ((v5 | v4) < 0
    || ((v6 = result, v7 = *(_DWORD *)(result + 8), v8 = __OFADD__(v4, v5), v9 = v4 + v5, !v8) ? (v10 = 0) : (v10 = 1),
        v7 < 0 || (v10 & 1) != 0 || (result = (v7 + v9), __OFADD__(v7, v9))))
  {
    *a4 = 0;
  }
  else
  {
    v12 = *(_OWORD **)v6;
    v11 = *(_QWORD *)(v6 + 8);
    v13 = *(_OWORD *)(a2 + 80);
    v17[4] = *(_OWORD *)(a2 + 64);
    v17[5] = v13;
    v14 = *(_OWORD *)(a2 + 112);
    v17[6] = *(_OWORD *)(a2 + 96);
    v17[7] = v14;
    v15 = *(_OWORD *)(a2 + 16);
    v17[0] = *(_OWORD *)a2;
    v17[1] = v15;
    v16 = *(_OWORD *)(a2 + 48);
    v17[2] = *(_OWORD *)(a2 + 32);
    v17[3] = v16;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, 1, v12, v11, v17, *(_OWORD **)a3, *(_QWORD *)(a3 + 8), a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, __int128 *a5@<X4>, _OWORD *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v13;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  char *v29;
  char *v30;
  int8x16_t *p_src;
  __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  char *v41;
  __int128 v42;
  int8x16_t v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 __src;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;
  int8x16x2_t v82;
  int8x16x2_t v83;

  v13 = result;
  v74 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = __src;
        if (!(_QWORD)__src)
          goto LABEL_38;
        v16 = (_BYTE *)(__src + 20);
        *(_DWORD *)__src = 2;
        *(_DWORD *)(v15 + 4) = v13;
        *(_QWORD *)(v15 + 8) = v15 + 20;
        *(_DWORD *)(v15 + 16) = 4;
        v62 = a5[4];
        v63 = a5[5];
        v64 = a5[6];
        v65 = a5[7];
        v58 = *a5;
        v59 = a5[1];
        v60 = a5[2];
        v61 = a5[3];
        if (a4)
        {
          if (a4 == 1)
            *v16 = *(_BYTE *)a3;
          else
            result = (uint64_t)memcpy((void *)(v15 + 20), a3, a4);
        }
        v17 = &v16[a4];
        v70 = v62;
        v71 = v63;
        v72 = v64;
        v73 = v65;
        __src = v58;
        v67 = v59;
        v68 = v60;
        v69 = v61;
        if (HIDWORD(v65))
        {
          if (HIDWORD(v65) == 1)
          {
            *v17 = __src;
            if (!a7)
              goto LABEL_38;
LABEL_12:
            result = (uint64_t)&v17[HIDWORD(v65)];
            if (a7 == 1)
              *(_BYTE *)result = *(_BYTE *)a6;
            else
              result = (uint64_t)memcpy((void *)result, a6, a7);
            goto LABEL_38;
          }
          result = (uint64_t)memcpy(v17, &__src, HIDWORD(v73));
        }
        if (!a7)
          goto LABEL_38;
        goto LABEL_12;
      }
LABEL_16:
      v15 = 0;
      goto LABEL_38;
    }
LABEL_17:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_38;
  }
  if (!(_DWORD)result)
    goto LABEL_17;
  if (result > 0x7FFFFFEF)
    goto LABEL_16;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = __src;
  if ((_QWORD)__src)
  {
    v18 = (char *)(__src + 20);
    *(_DWORD *)__src = 2;
    *(_DWORD *)(v15 + 4) = v13;
    *(_QWORD *)(v15 + 8) = v15 + 20;
    *(_DWORD *)(v15 + 16) = 0;
    v54 = a5[4];
    v55 = a5[5];
    v56 = a5[6];
    v57 = a5[7];
    v50 = *a5;
    v51 = a5[1];
    v19 = (char *)(v15 + 20 + 2 * a4);
    v52 = a5[2];
    v53 = a5[3];
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v20 = &v18[2 * (a4 & 0xFFFFFFC0)];
      v21 = 0uLL;
      do
      {
        v75.val[0] = (int8x16_t)*a3;
        v22 = *((int8x16_t *)a3 + 1);
        v78.val[0] = (int8x16_t)a3[2];
        v23 = a3[3];
        a3 += 4;
        v24 = v23;
        v78.val[1] = 0uLL;
        v81.val[0] = v22;
        v75.val[1] = 0uLL;
        v25 = v18;
        vst2q_s8(v25, v75);
        v25 += 32;
        v81.val[1] = 0uLL;
        vst2q_s8(v25, v81);
        v26 = v18 + 64;
        vst2q_s8(v26, v78);
        v27 = v18 + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      v18 = v20;
    }
    while (v18 != v19)
    {
      v28 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v18 = v28;
      v18 += 2;
    }
    v70 = v54;
    v71 = v55;
    v72 = v56;
    v73 = v57;
    __src = v50;
    v67 = v51;
    v68 = v52;
    v69 = v53;
    v29 = &v19[2 * HIDWORD(v57)];
    if (HIDWORD(v57) < 0x40)
    {
      p_src = (int8x16_t *)&__src;
    }
    else
    {
      v30 = &v19[2 * (HIDWORD(v57) & 0xFFFFFFC0)];
      p_src = (int8x16_t *)&__src;
      v32 = 0uLL;
      do
      {
        v76.val[0] = *p_src;
        v33 = p_src[1];
        v79.val[0] = p_src[2];
        v34 = p_src[3];
        p_src += 4;
        v35 = v34;
        v79.val[1] = 0uLL;
        v82.val[0] = v33;
        v76.val[1] = 0uLL;
        v36 = v19;
        vst2q_s8(v36, v76);
        v36 += 32;
        v82.val[1] = 0uLL;
        vst2q_s8(v36, v82);
        v37 = v19 + 64;
        vst2q_s8(v37, v79);
        v38 = v19 + 96;
        vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
        v19 += 128;
      }
      while (v19 != v30);
      v19 = v30;
    }
    while (v19 != v29)
    {
      v39 = p_src->u8[0];
      p_src = (int8x16_t *)((char *)p_src + 1);
      *(_WORD *)v19 = v39;
      v19 += 2;
    }
    v40 = &v29[2 * a7];
    if ((a7 & 0xFFFFFFC0) != 0)
    {
      v41 = &v29[2 * (a7 & 0xFFFFFFC0)];
      v42 = 0uLL;
      do
      {
        v77.val[0] = (int8x16_t)*a6;
        v43 = *((int8x16_t *)a6 + 1);
        v80.val[0] = (int8x16_t)a6[2];
        v44 = a6[3];
        a6 += 4;
        v45 = v44;
        v80.val[1] = 0uLL;
        v83.val[0] = v43;
        v77.val[1] = 0uLL;
        v46 = v29;
        vst2q_s8(v46, v77);
        v46 += 32;
        v83.val[1] = 0uLL;
        vst2q_s8(v46, v83);
        v47 = v29 + 64;
        vst2q_s8(v47, v80);
        v48 = v29 + 96;
        vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
        v29 += 128;
      }
      while (v29 != v41);
      v29 = v41;
    }
    while (v29 != v40)
    {
      v49 = *(unsigned __int8 *)a6;
      a6 = (_OWORD *)((char *)a6 + 1);
      *(_WORD *)v29 = v49;
      v29 += 2;
    }
  }
LABEL_38:
  *a8 = v15;
  return result;
}

