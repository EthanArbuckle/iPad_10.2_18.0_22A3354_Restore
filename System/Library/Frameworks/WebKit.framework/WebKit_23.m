uint64_t WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  void *v34;
  WTF::RunLoop *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v51;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  IPC::Encoder *v64;
  uint64_t v65;
  uint64_t v66[2];
  os_unfair_lock_s *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 v70;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 96) + 96);
  v4 = *((_QWORD *)a1 + 7);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v5 + 30.0);
    if (!v70)
      goto LABEL_53;
    v46 = v68;
    v45 = v69;
    v47 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - v68;
    if (v47 >= v68)
    {
      v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v69)
      {
        *(_WORD *)(v68 + v48) = 2822;
LABEL_63:
        v51 = (_QWORD *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v51 >= v46 + v49)
        {
          v49 = (unint64_t)v51 - v46 + 8;
          if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45)
            goto LABEL_53;
          *v51 = v4;
        }
        if (!v45)
          goto LABEL_53;
        v53 = *(_QWORD *)(v3 + 64);
        v54 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v55 = *(_QWORD *)(v3 + 56);
        if (v54 + 16 >= v55)
          v54 = 0;
        if (v49 <= 0x10)
          v49 = 16;
        v56 = v54 + v49;
        if (v55 <= v56)
          v56 = 0;
        *(_QWORD *)(v3 + 72) = v56;
        v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v56, v57));
        v59 = *(_DWORD *)(v3 + 108);
        if (v58 == 0x80000000 || v59 != 0)
        {
          v61 = v59 + 1;
          *(_DWORD *)(v3 + 108) = v61;
          if (v61 >= *(_DWORD *)(v3 + 104))
          {
            if (*(_BYTE *)(v3 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
            *(_DWORD *)(v3 + 108) = 0;
          }
        }
        *(_QWORD *)(v3 + 48) = v4;
        goto LABEL_2;
      }
      v45 = 0;
    }
    v49 = 0;
    goto LABEL_63;
  }
LABEL_2:
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v6);
  if (!v70)
    goto LABEL_53;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)(v3 + 8));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34E4C38;
  v8[1] = v2;
  v66[0] = (uint64_t)v8;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v66[1] = v9;
  v65 = v9;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v67, v66);
  v11 = v70;
  if (!v70)
    goto LABEL_88;
  v11 = v68;
  v12 = v69;
  v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 - v68;
  if (v13 < v68)
  {
    v15 = 0;
    v10 = v69;
  }
  else
  {
    v10 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_89;
    v15 = 0;
    if (v14 + 2 <= v69)
    {
      *(_WORD *)(v68 + v14) = 1245;
      v10 = v12;
      v15 = v14 + 2;
    }
  }
  while (1)
  {
    v16 = (_QWORD *)((v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v11 + v15)
    {
      v17 = (char *)v16 - v11;
      if ((unint64_t)v16 - v11 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_27;
      v15 = (unint64_t)(v17 + 8);
      if ((unint64_t)(v17 + 8) > v10)
        goto LABEL_27;
      *v16 = v9;
    }
    if (v10)
    {
      v18 = *(_QWORD *)(v3 + 64);
      v19 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v3 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v3 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_50;
    }
LABEL_27:
    v11 = v70;
    if (v70)
      break;
LABEL_88:
    __break(1u);
LABEL_89:
    v15 = v10;
  }
  v25 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v68;
  if (v25 < v68)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v69)
    {
      *(_WORD *)(v68 + v26) = 2821;
      v27 = v26 + 2;
    }
  }
  v28 = *(_QWORD *)(v3 + 64);
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v27 <= 0x10)
    v27 = 16;
  v31 = v29 + v27;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
  do
    __ldaxr(v32);
  while (__stlxr(v31, v32));
  *(_DWORD *)(v3 + 108) = 0;
  v33 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v33 = 1245;
  *(_QWORD *)(v33 + 8) = v4;
  *(_QWORD *)(v33 + 528) = v33 + 16;
  *(_QWORD *)(v33 + 536) = v33 + 16;
  *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v33 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
  v64 = (IPC::Encoder *)v33;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, &v65);
  if (IPC::Connection::sendMessageImpl((uint64_t)v67, (uint64_t *)&v64, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v67, v65, &v63);
    if (v63)
    {
      v36 = (unsigned int *)(WTF::RunLoop::main(v35) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v38 = v63;
      v63 = 0;
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v39 = &off_1E34E4C60;
      v39[1] = v38;
      v62 = v39;
      WTF::RunLoop::dispatch();
      if (v62)
        (*(void (**)(_QWORD *))(*v62 + 8))(v62);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v36);
      v40 = v63;
      v63 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v41 = v64;
  v64 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v34);
    WTF::fastFree(v42, v43);
  }
LABEL_50:
  v44 = v66[0];
  v66[0] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
  v2 = 0;
LABEL_53:
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return result;
}

unsigned int *WebKit::WebGPU::RemoteQueueProxy::writeBuffer(size_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unint64_t a5, unint64_t a6, unint64_t a7, size_t a8)
{
  size_t v14;
  unsigned int *result;
  unint64_t v16;
  WTF::ApproximateTime *v17;
  unsigned int v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  WTF::RunLoop *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v51;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v61;
  unsigned int v62;
  _BYTE v63[16];
  unsigned __int8 v64;
  WTF::ApproximateTime *v65;
  unsigned int *v66;
  _QWORD *v67;
  uint64_t v68;
  IPC::Encoder *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_unfair_lock_s *v73;
  unint64_t v74;
  unint64_t v75;
  char v76;

  v14 = a1;
  result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64));
  v66 = result;
  if (!result)
    return result;
  if ((_BYTE)a8)
    v16 = a7;
  else
    v16 = a5 - a6;
  if (a5 < a6 || v16 != -1 && a5 - a6 < v16)
    goto LABEL_89;
  WebCore::SharedMemory::copySpan();
  v63[0] = 0;
  v64 = 0;
  v17 = v65;
  if (v65)
  {
    WebCore::SharedMemory::createHandle();
    std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)v63, (uint64_t)&v74);
    if (v76)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v74);
    a6 = (unint64_t)v65;
    if (v65)
    {
      do
        v18 = __ldaxr((unsigned int *)a6);
      while (__stlxr(v18 + 1, (unsigned int *)a6));
    }
  }
  else
  {
    a6 = 0;
  }
  a7 = v64;
  a4 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v14 + 72) + 96) + 96);
  v14 = *(_QWORD *)(v14 + 56);
  WTF::ApproximateTime::now(v17);
  v20 = v19 + 30.0;
  if (*((_QWORD *)a4 + 6) == v14)
    goto LABEL_16;
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a4 + 14), &v74, v19 + 30.0);
  if (!v76)
    goto LABEL_45;
  v46 = v74;
  v45 = v75;
  v47 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v48 = v47 - v74;
  if (v47 >= v74)
  {
    v49 = v48 + 2;
    if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v75)
    {
      *(_WORD *)(v74 + v48) = 2822;
      goto LABEL_59;
    }
    v45 = 0;
  }
  v49 = 0;
LABEL_59:
  v51 = (_QWORD *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v51 >= v46 + v49)
  {
    v49 = (unint64_t)v51 - v46 + 8;
    if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45)
      goto LABEL_45;
    *v51 = v14;
  }
  if (v45)
  {
    v53 = *((_QWORD *)a4 + 8);
    v54 = (*((_QWORD *)a4 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v55 = *((_QWORD *)a4 + 7);
    if (v54 + 16 >= v55)
      v54 = 0;
    if (v49 <= 0x10)
      v49 = 16;
    v56 = v54 + v49;
    if (v55 <= v56)
      v56 = 0;
    *((_QWORD *)a4 + 9) = v56;
    v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v56, v57));
    v59 = a4[27];
    if (v58 == 0x80000000 || v59 != 0)
    {
      v62 = v59 + 1;
      a4[27] = v62;
      if (v62 >= a4[26])
      {
        if (*((_BYTE *)a4 + 96))
          MEMORY[0x19AEBA1A0](a4[21]);
        a4[27] = 0;
      }
    }
    *((_QWORD *)a4 + 6) = v14;
LABEL_16:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a4 + 14), &v74, v20);
    if (v76)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, (uint64_t **)a4 + 1);
      v21 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v21 = &off_1E34E4C88;
      *(_QWORD *)(v21 + 8) = a6;
      *(_BYTE *)(v21 + 16) = a7;
      v71 = v21;
      v72 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v70 = v72;
      IPC::Connection::addAsyncReplyHandler((uint64_t)v73, &v71);
      if (v76)
      {
        v22 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - v74;
        if (v22 < v74)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v75)
          {
            *(_WORD *)(v74 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *((_QWORD *)a4 + 8);
        v26 = (*((_QWORD *)a4 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *((_QWORD *)a4 + 7);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *((_QWORD *)a4 + 9) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        a4[27] = 0;
        a6 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)a6 = 1248;
        *(_QWORD *)(a6 + 8) = v14;
        *(_QWORD *)(a6 + 528) = a6 + 16;
        *(_QWORD *)(a6 + 536) = a6 + 16;
        *(_OWORD *)(a6 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(a6 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)a6);
        v69 = (IPC::Encoder *)a6;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a6, (uint64_t *)&v66);
        v30 = *(_QWORD *)(a6 + 544);
        a7 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
        a8 = a7 + 8;
        v31 = *(_QWORD *)(a6 + 552);
        if (v31 >= a7 + 8)
        {
          a4 = *(unsigned int **)(a6 + 528);
          goto LABEL_32;
        }
        v61 = (2 * v31 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v14 = v61;
          v61 *= 2;
        }
        while (v14 < a8);
        result = (unsigned int *)mmap(0, v14, 3, 4098, -1, 0);
        if (result == (unsigned int *)-1)
        {
          __break(0xC471u);
          return result;
        }
        a4 = result;
        memcpy(result, *(const void **)(a6 + 528), *(_QWORD *)(a6 + 544));
        result = *(unsigned int **)(a6 + 528);
        if (result == (unsigned int *)(a6 + 16))
        {
LABEL_84:
          *(_QWORD *)(a6 + 528) = a4;
          *(_QWORD *)(a6 + 552) = v14;
          v30 = *(_QWORD *)(a6 + 544);
LABEL_32:
          bzero((char *)a4 + v30, a7 - v30);
          *(_QWORD *)(a6 + 544) = a8;
          v32 = (_QWORD *)(*(_QWORD *)(a6 + 528) + a7);
          *(_QWORD *)(a6 + 536) = v32 + 1;
          *v32 = a3;
          IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>((IPC::Encoder *)a6, (unint64_t)v63);
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a6, &v70);
          if (IPC::Connection::sendMessageImpl((uint64_t)v73, (uint64_t *)&v69, 1, 0))
          {
            IPC::Connection::takeAsyncReplyHandler(v73, v70, &v68);
            if (v68)
            {
              v35 = (unsigned int *)(WTF::RunLoop::main(v34) + 8);
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 + 1, v35));
              v37 = v68;
              v68 = 0;
              v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v38 = &off_1E34E4CB0;
              v38[1] = v37;
              v67 = v38;
              WTF::RunLoop::dispatch();
              v39 = v67;
              v67 = 0;
              if (v39)
                (*(void (**)(_QWORD *))(*v39 + 8))(v39);
              WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v35);
              v40 = v68;
              v68 = 0;
              if (v40)
                (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            }
          }
          v41 = v69;
          v69 = 0;
          if (v41)
          {
            IPC::Encoder::~Encoder(v41, v33);
            WTF::fastFree(v42, v43);
          }
          v44 = v71;
          v71 = 0;
          if (v44)
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
          a6 = 0;
          goto LABEL_45;
        }
LABEL_90:
        munmap(result, *(_QWORD *)(a6 + 552));
        goto LABEL_84;
      }
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
  }
LABEL_45:
  if (a6)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)a6);
  if (v64)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v63);
  result = (unsigned int *)v65;
  v65 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  return result;
}

unsigned int *WebKit::WebGPU::RemoteQueueProxy::writeTexture(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  size_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *result;
  WTF::ApproximateTime *v16;
  unsigned int v17;
  double v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void *v32;
  WTF::RunLoop *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v50;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  unint64_t v60;
  unsigned int v61;
  _BYTE v62[16];
  unsigned __int8 v63;
  WTF::ApproximateTime *v64;
  const void *v65[2];
  int v66;
  char v67;
  uint64_t v68;
  int v69;
  char v70;
  unint64_t v71;
  char v72;
  _QWORD v73[2];
  uint64_t v74;
  int v75;
  char v76;
  char v77;
  _QWORD *v78;
  uint64_t v79;
  IPC::Encoder *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_unfair_lock_s *v84;
  unint64_t v85;
  unint64_t v86;
  char v87;

  v11 = a1;
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 64), a2, (uint64_t)v73);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = *a5;
  v69 = *((_DWORD *)a5 + 2);
  v70 = *((_BYTE *)a5 + 12);
  v14 = ((unint64_t)*((unsigned int *)a5 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)a5 + 20) << 56);
  v68 = v13;
  v71 = v14;
  v72 = 1;
  result = (unsigned int *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v12, a6);
  if (v77 && v67)
  {
    WebCore::SharedMemory::copySpan();
    v62[0] = 0;
    v63 = 0;
    v16 = v64;
    if (v64)
    {
      WebCore::SharedMemory::createHandle();
      std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)v62, (uint64_t)&v85);
      if (v87)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v85);
    }
    if (!v77 || !v72 || !v67)
      goto LABEL_92;
    a4 = (uint64_t)v64;
    if (v64)
    {
      do
        v17 = __ldaxr((unsigned int *)a4);
      while (__stlxr(v17 + 1, (unsigned int *)a4));
    }
    a6 = v63;
    a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 72) + 96) + 96);
    v11 = *(_QWORD *)(v11 + 56);
    WTF::ApproximateTime::now(v16);
    v19 = v18 + 30.0;
    if (*(_QWORD *)(a3 + 48) == v11)
      goto LABEL_12;
    IPC::StreamClientConnectionBuffer::tryAcquire(a3 + 56, &v85, v18 + 30.0);
    if (!v87)
      goto LABEL_41;
    v45 = v85;
    v44 = v86;
    v46 = (v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v85;
    if (v46 >= v85)
    {
      v48 = v47 + 2;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v48 <= v86)
      {
        *(_WORD *)(v85 + v47) = 2822;
LABEL_62:
        v50 = (_QWORD *)((v45 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v50 >= v45 + v48)
        {
          v48 = (unint64_t)v50 - v45 + 8;
          if ((unint64_t)v50 - v45 > 0xFFFFFFFFFFFFFFF7 || v48 > v44)
            goto LABEL_41;
          *v50 = v11;
        }
        if (!v44)
        {
LABEL_41:
          if (a4)
            WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)a4);
          if (v63)
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v62);
          result = (unsigned int *)v64;
          v64 = 0;
          if (result)
            result = WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
          goto LABEL_47;
        }
        v52 = *(_QWORD *)(a3 + 64);
        v53 = (*(_QWORD *)(a3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v54 = *(_QWORD *)(a3 + 56);
        if (v53 + 16 >= v54)
          v53 = 0;
        if (v48 <= 0x10)
          v48 = 16;
        v55 = v53 + v48;
        if (v54 <= v55)
          v55 = 0;
        *(_QWORD *)(a3 + 72) = v55;
        v56 = (unint64_t *)(*(_QWORD *)(v52 + 16) + 128);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v55, v56));
        v58 = *(_DWORD *)(a3 + 108);
        if (v57 == 0x80000000 || v58 != 0)
        {
          v61 = v58 + 1;
          *(_DWORD *)(a3 + 108) = v61;
          if (v61 >= *(_DWORD *)(a3 + 104))
          {
            if (*(_BYTE *)(a3 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(a3 + 84));
            *(_DWORD *)(a3 + 108) = 0;
          }
        }
        *(_QWORD *)(a3 + 48) = v11;
LABEL_12:
        IPC::StreamClientConnectionBuffer::tryAcquire(a3 + 56, &v85, v19);
        if (v87)
        {
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v84, (uint64_t **)(a3 + 8));
          v20 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v20 = &off_1E34E4CD8;
          *(_QWORD *)(v20 + 8) = a4;
          *(_BYTE *)(v20 + 16) = a6;
          v82 = v20;
          v83 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
          v81 = v83;
          IPC::Connection::addAsyncReplyHandler((uint64_t)v84, &v82);
          if (v87)
          {
            v21 = (v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v22 = v21 - v85;
            if (v21 < v85)
            {
              v23 = 0;
            }
            else
            {
              v23 = 0;
              if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v86)
              {
                *(_WORD *)(v85 + v22) = 2821;
                v23 = v22 + 2;
              }
            }
            v24 = *(_QWORD *)(a3 + 64);
            v25 = (*(_QWORD *)(a3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v26 = *(_QWORD *)(a3 + 56);
            if (v25 + 16 >= v26)
              v25 = 0;
            if (v23 <= 0x10)
              v23 = 16;
            v27 = v25 + v23;
            if (v26 <= v27)
              v27 = 0;
            *(_QWORD *)(a3 + 72) = v27;
            v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
            do
              __ldaxr(v28);
            while (__stlxr(v27, v28));
            *(_DWORD *)(a3 + 108) = 0;
            a4 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)a4 = 1249;
            *(_QWORD *)(a4 + 8) = v11;
            *(_QWORD *)(a4 + 528) = a4 + 16;
            *(_QWORD *)(a4 + 536) = a4 + 16;
            *(_OWORD *)(a4 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(a4 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)a4);
            v80 = (IPC::Encoder *)a4;
            IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode((IPC::Encoder *)a4, v73);
            IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>((IPC::Encoder *)a4, (unint64_t)v62);
            IPC::ArgumentCoder<WebKit::WebGPU::ImageDataLayout,void>::encode((IPC::Encoder *)a4, (int *)&v68);
            v11 = v66;
            a5 = *(uint64_t **)(a4 + 544);
            v6 = (size_t)a5 + 1;
            v29 = *(_QWORD *)(a4 + 552);
            if (v29 >= (unint64_t)a5 + 1)
            {
              a6 = *(_QWORD *)(a4 + 528);
              v30 = *(_QWORD *)(a4 + 544);
              goto LABEL_28;
            }
            v60 = (2 * v29 + 4095) & 0xFFFFFFFFFFFFF000;
            do
            {
              a3 = v60;
              v60 *= 2;
            }
            while (a3 < v6);
            result = (unsigned int *)mmap(0, a3, 3, 4098, -1, 0);
            if (result == (unsigned int *)-1)
            {
              __break(0xC471u);
              return result;
            }
            a6 = (uint64_t)result;
            memcpy(result, *(const void **)(a4 + 528), *(_QWORD *)(a4 + 544));
            v16 = *(WTF::ApproximateTime **)(a4 + 528);
            if (v16 == (WTF::ApproximateTime *)(a4 + 16))
            {
LABEL_87:
              *(_QWORD *)(a4 + 528) = a6;
              *(_QWORD *)(a4 + 552) = a3;
              v30 = *(_QWORD *)(a4 + 544);
LABEL_28:
              bzero((void *)(a6 + v30), (size_t)a5 - v30);
              *(_QWORD *)(a4 + 544) = v6;
              v31 = (char *)a5 + *(_QWORD *)(a4 + 528);
              *(_QWORD *)(a4 + 536) = v31 + 1;
              *v31 = v11;
              IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((char *)a4, v65, v11);
              IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a4, &v81);
              if (IPC::Connection::sendMessageImpl((uint64_t)v84, (uint64_t *)&v80, 1, 0))
              {
                IPC::Connection::takeAsyncReplyHandler(v84, v81, &v79);
                if (v79)
                {
                  v34 = (unsigned int *)(WTF::RunLoop::main(v33) + 8);
                  do
                    v35 = __ldaxr(v34);
                  while (__stlxr(v35 + 1, v34));
                  v36 = v79;
                  v79 = 0;
                  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v37 = &off_1E34E4D00;
                  v37[1] = v36;
                  v78 = v37;
                  WTF::RunLoop::dispatch();
                  v38 = v78;
                  v78 = 0;
                  if (v38)
                    (*(void (**)(_QWORD *))(*v38 + 8))(v38);
                  WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v34);
                  v39 = v79;
                  v79 = 0;
                  if (v39)
                    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
                }
              }
              v40 = v80;
              v80 = 0;
              if (v40)
              {
                IPC::Encoder::~Encoder(v40, v32);
                WTF::fastFree(v41, v42);
              }
              v43 = v82;
              v82 = 0;
              if (v43)
                (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v84);
              a4 = 0;
              goto LABEL_41;
            }
LABEL_93:
            munmap(v16, *(_QWORD *)(a4 + 552));
            goto LABEL_87;
          }
LABEL_92:
          __break(1u);
          goto LABEL_93;
        }
        goto LABEL_41;
      }
      v44 = 0;
    }
    v48 = 0;
    goto LABEL_62;
  }
LABEL_47:
  if (v67 && v66 != -1)
    result = (unsigned int *)((uint64_t (*)(unint64_t *, const void **))off_1E34E4690[v66])(&v85, v65);
  if (v77 && v76 && v75 != -1)
    return (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E34E48C8[v75])(&v68, &v74);
  return result;
}

void WebKit::WebGPU::RemoteQueueProxy::writeBufferNoCopy()
{
  __break(0xC471u);
}

void WebKit::WebGPU::RemoteQueueProxy::writeTexture()
{
  __break(0xC471u);
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteQueueProxy::copyExternalImageToTexture(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v4;
  WTF::ApproximateTime *v5;
  uint64_t v6;
  size_t v7;
  uint64_t *v10;
  WTF::ApproximateTime *result;
  int v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  void *v42;
  IPC::Encoder *v43;
  WTF *v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unsigned int v62;
  unint64_t v63;
  const void *v64[2];
  int v65;
  unsigned __int8 v66;
  _QWORD v67[2];
  uint64_t v68;
  int v69;
  char v70;
  char v71;
  _BYTE v72[16];
  int v73;
  char v74;
  char v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;

  v10 = a1;
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[8], a2, v72);
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v10[8], a3, v67);
  result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v10[8], a4);
  v12 = v66;
  if (v75)
    v13 = v71 == 0;
  else
    v13 = 1;
  if (v13 || v66 == 0)
    goto LABEL_51;
  v15 = *(_QWORD *)(*(_QWORD *)(v10[9] + 96) + 96);
  v16 = v10[7];
  WTF::ApproximateTime::now(result);
  v18 = v17 + 30.0;
  if (*(_QWORD *)(v15 + 48) == v16)
  {
LABEL_9:
    result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v15 + 56, &v77, v18);
    if (v79)
    {
      v80 = v77;
      v81 = v78;
      v82 = 0;
      v19 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = v19 >= v77;
      v21 = v19 - v77;
      if (v20)
      {
        if (v21 > 0xFFFFFFFFFFFFFFFDLL || v21 + 2 > v78)
        {
          v81 = 0;
        }
        else
        {
          *(_WORD *)(v77 + v21) = 1243;
          v82 = v21 + 2;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::encode((uint64_t *)&v80, (uint64_t)v72);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::encode((uint64_t *)&v80, (uint64_t)v67);
      result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((uint64_t *)&v80, (uint64_t)v64);
      if (v81)
      {
        v23 = v82;
        v24 = *(_QWORD *)(v15 + 64);
        v25 = (*(_QWORD *)(v15 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v15 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v82 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v28 = 0;
        else
          v28 = v27;
        *(_QWORD *)(v15 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v28, v29));
        if (v30 == 0x80000000 || *(_DWORD *)(v15 + 108))
        {
          if (*(_BYTE *)(v15 + 96))
            result = (WTF::ApproximateTime *)MEMORY[0x19AEBA1A0](*(unsigned int *)(v15 + 84));
          *(_DWORD *)(v15 + 108) = 0;
        }
        goto LABEL_50;
      }
      if (v79)
      {
        v31 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = v31 - v77;
        if (v31 < v77)
        {
          v33 = 0;
        }
        else
        {
          v33 = 0;
          if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v78)
          {
            *(_WORD *)(v77 + v32) = 2821;
            v33 = v32 + 2;
          }
        }
        v34 = *(_QWORD *)(v15 + 64);
        v35 = (*(_QWORD *)(v15 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = *(_QWORD *)(v15 + 56);
        if (v35 + 16 >= v36)
          v35 = 0;
        if (v33 <= 0x10)
          v33 = 16;
        v37 = v35 + v33;
        if (v36 <= v37)
          v37 = 0;
        *(_QWORD *)(v15 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
        do
          __ldaxr(v38);
        while (__stlxr(v37, v38));
        *(_DWORD *)(v15 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, (uint64_t **)(v15 + 8));
        v10 = v76;
        v15 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v15 = 1243;
        *(_QWORD *)(v15 + 8) = v16;
        *(_QWORD *)(v15 + 528) = v15 + 16;
        *(_QWORD *)(v15 + 536) = v15 + 16;
        *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v15 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
        v80 = v15;
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::encode((IPC::Encoder *)v15, (uint64_t)v72);
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::encode((IPC::Encoder *)v15, v67);
        v16 = v65;
        v6 = *(_QWORD *)(v15 + 544);
        v7 = v6 + 1;
        v39 = *(_QWORD *)(v15 + 552);
        if (v39 >= v6 + 1)
        {
          v5 = *(WTF::ApproximateTime **)(v15 + 528);
          v40 = *(_QWORD *)(v15 + 544);
LABEL_47:
          bzero((char *)v5 + v40, v6 - v40);
          *(_QWORD *)(v15 + 544) = v7;
          v41 = (_BYTE *)(*(_QWORD *)(v15 + 528) + v6);
          *(_QWORD *)(v15 + 536) = v41 + 1;
          *v41 = v16;
          IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>((char *)v15, v64, v16);
          IPC::Connection::sendMessageImpl((uint64_t)v10, (uint64_t *)&v80, 1, 0);
          v43 = (IPC::Encoder *)v80;
          v80 = 0;
          if (v43)
          {
            IPC::Encoder::~Encoder(v43, v42);
            WTF::fastFree(v44, v45);
          }
          result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76);
          goto LABEL_50;
        }
        v63 = (2 * v39 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v4 = v63;
          v63 *= 2;
        }
        while (v4 < v7);
        result = (WTF::ApproximateTime *)mmap(0, v4, 3, 4098, -1, 0);
        if (result == (WTF::ApproximateTime *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v5 = result;
        memcpy(result, *(const void **)(v15 + 528), *(_QWORD *)(v15 + 544));
        result = *(WTF::ApproximateTime **)(v15 + 528);
        if (result == (WTF::ApproximateTime *)(v15 + 16))
        {
LABEL_96:
          *(_QWORD *)(v15 + 528) = v5;
          *(_QWORD *)(v15 + 552) = v4;
          v40 = *(_QWORD *)(v15 + 544);
          goto LABEL_47;
        }
      }
      else
      {
        __break(1u);
      }
      munmap(result, *(_QWORD *)(v15 + 552));
      goto LABEL_96;
    }
    goto LABEL_50;
  }
  result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire(v15 + 56, &v80, v17 + 30.0);
  if ((_BYTE)v82)
  {
    v46 = v80;
    v47 = v81;
    v48 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = v48 - v80;
    if (v48 < v80)
    {
      v51 = 0;
      v50 = v81;
    }
    else
    {
      v50 = 0;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v51 = 0;
      }
      else
      {
        v51 = 0;
        if (v49 + 2 <= v81)
        {
          *(_WORD *)(v80 + v49) = 2822;
          v50 = v47;
          v51 = v49 + 2;
        }
      }
    }
    v52 = (_QWORD *)((v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v52 >= v46 + v51)
    {
      v53 = (char *)v52 - v46;
      if ((unint64_t)v52 - v46 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_50;
      v51 = (unint64_t)(v53 + 8);
      if ((unint64_t)(v53 + 8) > v50)
        goto LABEL_50;
      *v52 = v16;
    }
    if (v50)
    {
      v54 = (*(_QWORD *)(v15 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = *(_QWORD *)(v15 + 56);
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v51 <= 0x10)
        v51 = 16;
      v56 = v54 + v51;
      if (v55 <= v56)
        v57 = 0;
      else
        v57 = v56;
      *(_QWORD *)(v15 + 72) = v57;
      v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v15 + 64) + 16) + 128);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v57, v58));
      v60 = *(_DWORD *)(v15 + 108);
      if (v59 == 0x80000000 || v60 != 0)
      {
        v62 = v60 + 1;
        *(_DWORD *)(v15 + 108) = v62;
        if (v62 >= *(_DWORD *)(v15 + 104))
        {
          if (*(_BYTE *)(v15 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v15 + 84));
          *(_DWORD *)(v15 + 108) = 0;
        }
      }
      *(_QWORD *)(v15 + 48) = v16;
      goto LABEL_9;
    }
  }
LABEL_50:
  v12 = v66;
LABEL_51:
  if (v12 && v65 != -1)
    result = (WTF::ApproximateTime *)((uint64_t (*)(unint64_t *, const void **))off_1E34E4690[v65])(&v80, v64);
  if (v71 && v70 && v69 != -1)
    result = (WTF::ApproximateTime *)((uint64_t (*)(const void **, uint64_t *))off_1E34E48C8[v69])(v64, &v68);
  if (v75 && v74 && v73 != -1)
    return (WTF::ApproximateTime *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E34E48D8[v73])(v67, v72);
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteQueueProxy::setLabelInternal(WebKit::WebGPU::RemoteQueueProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 96) + 96);
  v4 = *((_QWORD *)this + 7);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v4)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1246;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v3 + 64);
        v15 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v3 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v3 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v3 + 108))
        {
          if (*(_BYTE *)(v3 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v3 + 64);
        v25 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v3 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v3 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v3 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v3 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1246;
        *(_QWORD *)(v30 + 8) = v4;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v4;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v3 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v3 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v3 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v3 + 108) = v49;
        if (v49 >= *(_DWORD *)(v3 + 104))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
      }
      *(_QWORD *)(v3 + 48) = v4;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteRenderBundleEncoderProxy::~RemoteRenderBundleEncoderProxy(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 1252;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1252;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E48F8;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteRenderBundleEncoderProxy::~RemoteRenderBundleEncoderProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setPipeline(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this, const WebCore::WebGPU::RenderPipeline *a2)
{
  unsigned __int8 ***result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unsigned int v51;
  unsigned __int8 ***v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  IPC::Encoder *v57;

  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::RenderPipeline *))(**((_QWORD **)this + 4) + 176))(*((_QWORD *)this + 4), a2);
  v52 = result;
  if (result)
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    v7 = v6 + 30.0;
    if (*(_QWORD *)(v5 + 48) == v4)
    {
      while (1)
      {
        result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v54, v7);
        if (!v56)
          return result;
        v9 = v54;
        v8 = v55;
        v10 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v11 = v10 - v54;
        if (v10 >= v54)
        {
          v12 = v11 + 2;
          if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v55)
          {
            *(_WORD *)(v54 + v11) = 1264;
            goto LABEL_10;
          }
          v8 = 0;
        }
        v12 = 0;
LABEL_10:
        v14 = (_QWORD *)((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v14 >= v9 + v12)
        {
          v12 = (unint64_t)v14 - v9 + 8;
          if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFF7 || v12 > v8)
            goto LABEL_31;
          *v14 = v52;
        }
        if (v8)
        {
          v16 = *(_QWORD *)(v5 + 64);
          v17 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v18 = *(_QWORD *)(v5 + 56);
          if (v17 + 16 >= v18)
            v17 = 0;
          if (v12 <= 0x10)
            v12 = 16;
          v19 = v17 + v12;
          if (v18 <= v19)
            v20 = 0;
          else
            v20 = v19;
          *(_QWORD *)(v5 + 72) = v20;
          v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v20, v21));
          if (v22 == 0x80000000 || *(_DWORD *)(v5 + 108))
          {
            if (*(_BYTE *)(v5 + 96))
              result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
            *(_DWORD *)(v5 + 108) = 0;
          }
          return result;
        }
LABEL_31:
        if (v56)
        {
          v23 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v24 = v23 - v54;
          if (v23 < v54)
          {
            v25 = 0;
          }
          else
          {
            v25 = 0;
            if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v55)
            {
              *(_WORD *)(v54 + v24) = 2821;
              v25 = v24 + 2;
            }
          }
          v26 = *(_QWORD *)(v5 + 64);
          v27 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v28 = *(_QWORD *)(v5 + 56);
          if (v27 + 16 >= v28)
            v27 = 0;
          if (v25 <= 0x10)
            v25 = 16;
          v29 = v27 + v25;
          if (v28 <= v29)
            v29 = 0;
          *(_QWORD *)(v5 + 72) = v29;
          v30 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
          do
            __ldaxr(v30);
          while (__stlxr(v29, v30));
          *(_DWORD *)(v5 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)(v5 + 8));
          v31 = v53;
          v32 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v32 = 1264;
          *(_QWORD *)(v32 + 8) = v4;
          *(_QWORD *)(v32 + 528) = v32 + 16;
          *(_QWORD *)(v32 + 536) = v32 + 16;
          *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v32 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
          v57 = (IPC::Encoder *)v32;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v32, (uint64_t *)&v52);
          IPC::Connection::sendMessageImpl((uint64_t)v31, (uint64_t *)&v57, 1, 0);
          v34 = v57;
          v57 = 0;
          if (v34)
          {
            IPC::Encoder::~Encoder(v34, v33);
            WTF::fastFree(v35, v36);
          }
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v53);
        }
        __break(1u);
LABEL_83:
        v37 = 0;
LABEL_84:
        v40 = 0;
LABEL_55:
        v42 = (_QWORD *)((v9 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v42 >= v9 + v40)
        {
          v40 = (unint64_t)v42 - v9 + 8;
          if ((unint64_t)v42 - v9 > 0xFFFFFFFFFFFFFFF7 || v40 > v37)
            return result;
          *v42 = v4;
        }
        if (!v37)
          return result;
        v44 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v45 = *(_QWORD *)(v5 + 56);
        if (v44 + 16 >= v45)
          v44 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v46 = v44 + v40;
        if (v45 <= v46)
          v46 = 0;
        *(_QWORD *)(v5 + 72) = v46;
        v47 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v46, v47));
        v49 = *(_DWORD *)(v5 + 108);
        if (v48 == 0x80000000 || v49 != 0)
        {
          v51 = v49 + 1;
          *(_DWORD *)(v5 + 108) = v51;
          if (v51 >= *(_DWORD *)(v5 + 104))
          {
            if (*(_BYTE *)(v5 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
            *(_DWORD *)(v5 + 108) = 0;
          }
        }
        *(_QWORD *)(v5 + 48) = v4;
      }
    }
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v54, v6 + 30.0);
    if (v56)
    {
      v9 = v54;
      v37 = v55;
      v38 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v39 = v38 - v54;
      if (v38 < v54)
        goto LABEL_84;
      v40 = v39 + 2;
      if (v39 > 0xFFFFFFFFFFFFFFFDLL || v40 > v55)
        goto LABEL_83;
      *(_WORD *)(v54 + v39) = 2822;
      goto LABEL_55;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setIndexBuffer(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 ***result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unsigned int v55;
  _QWORD v56[4];
  unsigned __int8 ***v57;
  char v58;
  _QWORD v59[2];
  _QWORD v60[2];
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;

  v60[0] = a4;
  v60[1] = a5;
  v59[0] = a6;
  v59[1] = a7;
  v58 = a3;
  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  v57 = result;
  if (result)
  {
    v56[0] = &v57;
    v56[1] = &v58;
    v56[2] = v60;
    v56[3] = v59;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 176) + 96) + 96);
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    v12 = v11 + 30.0;
    if (*(_QWORD *)(v10 + 48) == v9)
    {
      while (1)
      {
        result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v62, v12);
        if (!v64)
          break;
        v65 = v62;
        v66 = v63;
        v67 = 0;
        v13 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v14 = v13 >= v62;
        v15 = v13 - v62;
        if (v14)
        {
          if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v63)
          {
            v66 = 0;
          }
          else
          {
            *(_WORD *)(v62 + v15) = 1262;
            v67 = v15 + 2;
          }
        }
        result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(&v65, (uint64_t)v56);
        if (v66)
        {
          v18 = v67;
          v19 = *(_QWORD *)(v10 + 64);
          v20 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v21 = *(_QWORD *)(v10 + 56);
          if (v20 + 16 >= v21)
            v20 = 0;
          if (v67 <= 0x10)
            v18 = 16;
          v22 = v20 + v18;
          if (v21 <= v22)
            v23 = 0;
          else
            v23 = v22;
          *(_QWORD *)(v10 + 72) = v23;
          v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v23, v24));
          if (v25 == 0x80000000 || *(_DWORD *)(v10 + 108))
          {
            if (*(_BYTE *)(v10 + 96))
              result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
            *(_DWORD *)(v10 + 108) = 0;
          }
          return result;
        }
        v26 = v64;
        if (v64)
        {
          v27 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v28 = v27 - v62;
          if (v27 < v62)
          {
            v29 = 0;
          }
          else
          {
            v29 = 0;
            if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v63)
            {
              *(_WORD *)(v62 + v28) = 2821;
              v29 = v28 + 2;
            }
          }
          v30 = *(_QWORD *)(v10 + 64);
          v31 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v32 = *(_QWORD *)(v10 + 56);
          if (v31 + 16 >= v32)
            v31 = 0;
          if (v29 <= 0x10)
            v29 = 16;
          v33 = v31 + v29;
          if (v32 <= v33)
            v33 = 0;
          *(_QWORD *)(v10 + 72) = v33;
          v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
          do
            __ldaxr(v34);
          while (__stlxr(v33, v34));
          *(_DWORD *)(v10 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(v10 + 8));
          v35 = v61;
          v36 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v36 = 1262;
          *(_QWORD *)(v36 + 8) = v9;
          *(_QWORD *)(v36 + 528) = v36 + 16;
          *(_QWORD *)(v36 + 536) = v36 + 16;
          *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v36 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
          v65 = v36;
          IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(v36, (uint64_t)v56);
          IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)&v65, 1, 0);
          v38 = (IPC::Encoder *)v65;
          v65 = 0;
          if (v38)
          {
            IPC::Encoder::~Encoder(v38, v37);
            WTF::fastFree(v39, v40);
          }
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        }
        __break(1u);
LABEL_74:
        v44 = v17;
LABEL_48:
        v45 = (_QWORD *)((v26 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v45 >= v26 + v44)
        {
          v46 = (char *)v45 - v26;
          if ((unint64_t)v45 - v26 > 0xFFFFFFFFFFFFFFF7)
            return result;
          v44 = (unint64_t)(v46 + 8);
          if ((unint64_t)(v46 + 8) > v17)
            return result;
          *v45 = v9;
        }
        if (!v17)
          return result;
        v47 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v48 = *(_QWORD *)(v10 + 56);
        if (v47 + 16 >= v48)
          v47 = 0;
        if (v44 <= 0x10)
          v44 = 16;
        v49 = v47 + v44;
        if (v48 <= v49)
          v50 = 0;
        else
          v50 = v49;
        *(_QWORD *)(v10 + 72) = v50;
        v51 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 16) + 128);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v50, v51));
        v53 = *(_DWORD *)(v10 + 108);
        if (v52 == 0x80000000 || v53 != 0)
        {
          v55 = v53 + 1;
          *(_DWORD *)(v10 + 108) = v55;
          if (v55 >= *(_DWORD *)(v10 + 104))
          {
            if (*(_BYTE *)(v10 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
            *(_DWORD *)(v10 + 108) = 0;
          }
        }
        *(_QWORD *)(v10 + 48) = v9;
      }
    }
    else
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v65, v11 + 30.0);
      if ((_BYTE)v67)
      {
        v26 = v65;
        v41 = v66;
        v42 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = v42 - v65;
        if (v42 < v65)
        {
          v44 = 0;
          v17 = v66;
        }
        else
        {
          v17 = 0;
          if (v43 > 0xFFFFFFFFFFFFFFFDLL)
            goto LABEL_74;
          v44 = 0;
          if (v43 + 2 <= v66)
          {
            *(_WORD *)(v65 + v43) = 2822;
            v17 = v41;
            v44 = v43 + 2;
          }
        }
        goto LABEL_48;
      }
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setVertexBuffer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 ***result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  int *v47;
  WTF *v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  int *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  int64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  int *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  char *v82;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  int v90;
  unsigned int v92;
  unsigned int v93;
  int *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  unsigned __int8 ***v98;
  int v99;
  _QWORD v100[2];
  _QWORD v101[2];
  uint64_t *v102;
  int *v103;
  _QWORD *v104;
  _QWORD *v105;
  int *v106;
  unint64_t v107;
  unint64_t v108;

  v101[0] = a4;
  v101[1] = a5;
  v100[0] = a6;
  v100[1] = a7;
  v99 = a2;
  if (a3)
  {
    result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a3);
    v98 = result;
    if (!result)
      return result;
    v94 = &v99;
    v95 = &v98;
    v96 = v101;
    v97 = v100;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 176) + 96) + 96);
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    v12 = v11 + 30.0;
    if (*(_QWORD *)(v10 + 48) == v9)
    {
LABEL_4:
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v103, v12);
      if (!(_BYTE)v105)
        return result;
      v106 = v103;
      v107 = (unint64_t)v104;
      v108 = 0;
      v13 = ((unint64_t)v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = v13 >= (unint64_t)v103;
      v15 = v13 - (_QWORD)v103;
      if (v14)
      {
        if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > (unint64_t)v104)
          goto LABEL_138;
        *(_WORD *)((char *)v103 + v15) = 1265;
        v108 = v15 + 2;
      }
      while (1)
      {
        result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(&v106, (uint64_t)&v94);
        if (v107)
        {
          v17 = v108;
          v18 = *(_QWORD *)(v10 + 64);
          v19 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v20 = *(_QWORD *)(v10 + 56);
          if (v19 + 16 >= v20)
            v19 = 0;
          if (v108 <= 0x10)
            v17 = 16;
          v21 = v19 + v17;
          if (v20 <= v21)
            v22 = 0;
          else
            v22 = v21;
          *(_QWORD *)(v10 + 72) = v22;
          v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v22, v23));
          goto LABEL_40;
        }
        if ((_BYTE)v105)
          break;
LABEL_137:
        __break(1u);
LABEL_138:
        v107 = 0;
      }
      v36 = ((unint64_t)v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v103;
      if (v36 < (unint64_t)v103)
      {
        v38 = 0;
      }
      else
      {
        v38 = 0;
        if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= (unint64_t)v104)
        {
          *(_WORD *)((char *)v103 + v37) = 2821;
          v38 = v37 + 2;
        }
      }
      v39 = *(_QWORD *)(v10 + 64);
      v40 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v41 = *(_QWORD *)(v10 + 56);
      if (v40 + 16 >= v41)
        v40 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v42 = v40 + v38;
      if (v41 <= v42)
        v42 = 0;
      *(_QWORD *)(v10 + 72) = v42;
      v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
      do
        __ldaxr(v43);
      while (__stlxr(v42, v43));
      *(_DWORD *)(v10 + 108) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v102, (uint64_t **)(v10 + 8));
      v44 = v102;
      v45 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v45 = 1265;
      *(_QWORD *)(v45 + 8) = v9;
      *(_QWORD *)(v45 + 528) = v45 + 16;
      *(_QWORD *)(v45 + 536) = v45 + 16;
      *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v45 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
      v106 = (int *)v45;
      IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(v45, &v94);
      IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v106, 1, 0);
      v47 = v106;
      v106 = 0;
      if (!v47)
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v102);
LABEL_59:
      IPC::Encoder::~Encoder((IPC::Encoder *)v47, v46);
      WTF::fastFree(v48, v49);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v102);
    }
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v106, v11 + 30.0);
    if ((_BYTE)v108)
    {
      v60 = v106;
      v61 = v107;
      v62 = ((unint64_t)v106 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v63 = v62 - (_QWORD)v106;
      if (v62 < (unint64_t)v106)
      {
        v65 = 0;
        v64 = v107;
      }
      else
      {
        v64 = 0;
        if (v63 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v65 = 0;
        }
        else
        {
          v65 = 0;
          if (v63 + 2 <= v107)
          {
            *(_WORD *)((char *)v106 + v63) = 2822;
            v64 = v61;
            v65 = v63 + 2;
          }
        }
      }
      v66 = (char *)(((unint64_t)v60 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v66 >= (char *)v60 + v65)
      {
        v67 = v66 - (char *)v60;
        if ((unint64_t)(v66 - (char *)v60) > 0xFFFFFFFFFFFFFFF7)
          return result;
        v65 = v67 + 8;
        if (v67 + 8 > v64)
          return result;
        *(_QWORD *)v66 = v9;
      }
      if (v64)
      {
        v68 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v69 = *(_QWORD *)(v10 + 56);
        if (v68 + 16 >= v69)
          v68 = 0;
        if (v65 <= 0x10)
          v65 = 16;
        v70 = v68 + v65;
        if (v69 <= v70)
          v71 = 0;
        else
          v71 = v70;
        *(_QWORD *)(v10 + 72) = v71;
        v72 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 16) + 128);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v71, v72));
        v74 = *(_DWORD *)(v10 + 108);
        if (v73 == 0x80000000 || v74 != 0)
        {
          v92 = v74 + 1;
          *(_DWORD *)(v10 + 108) = v92;
          if (v92 >= *(_DWORD *)(v10 + 104))
          {
            if (*(_BYTE *)(v10 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
            *(_DWORD *)(v10 + 108) = 0;
          }
        }
        *(_QWORD *)(v10 + 48) = v9;
        goto LABEL_4;
      }
    }
  }
  else
  {
    v103 = &v99;
    v104 = v101;
    v105 = v100;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 176) + 96) + 96);
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    v26 = v25 + 30.0;
    if (*(_QWORD *)(v10 + 48) != v9)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v94, v25 + 30.0);
      if (!(_BYTE)v96)
        return result;
      v76 = v94;
      v77 = v95;
      v78 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v79 = v78 - (_QWORD)v94;
      if (v78 < (unint64_t)v94)
      {
        v81 = 0;
        v80 = v95;
      }
      else
      {
        v80 = 0;
        if (v79 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v81 = 0;
        }
        else
        {
          v81 = 0;
          if (v79 + 2 <= (unint64_t)v95)
          {
            *(_WORD *)((char *)v94 + v79) = 2822;
            v80 = v77;
            v81 = v79 + 2;
          }
        }
      }
      v82 = (char *)(((unint64_t)v76 + v81 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v82 >= (char *)v76 + v81)
      {
        v81 = v82 - (char *)v76 + 8;
        if ((unint64_t)(v82 - (char *)v76) > 0xFFFFFFFFFFFFFFF7 || v81 > (unint64_t)v80)
          return result;
        *(_QWORD *)v82 = v9;
      }
      if (!v80)
        return result;
      v84 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v85 = *(_QWORD *)(v10 + 56);
      if (v84 + 16 >= v85)
        v84 = 0;
      if (v81 <= 0x10)
        v81 = 16;
      v86 = v84 + v81;
      if (v85 <= v86)
        v87 = 0;
      else
        v87 = v86;
      *(_QWORD *)(v10 + 72) = v87;
      v88 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 16) + 128);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v87, v88));
      v90 = *(_DWORD *)(v10 + 108);
      if (v89 == 0x80000000 || v90 != 0)
      {
        v93 = v90 + 1;
        *(_DWORD *)(v10 + 108) = v93;
        if (v93 >= *(_DWORD *)(v10 + 104))
        {
          if (*(_BYTE *)(v10 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
          *(_DWORD *)(v10 + 108) = 0;
        }
      }
      *(_QWORD *)(v10 + 48) = v9;
    }
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v106, v26);
    if (!(_BYTE)v108)
      return result;
    v94 = v106;
    v95 = (_QWORD *)v107;
    v96 = 0;
    v27 = ((unint64_t)v106 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v27 >= (unint64_t)v106;
    v28 = v27 - (_QWORD)v106;
    if (v14)
    {
      if (v28 > 0xFFFFFFFFFFFFFFFDLL || v28 + 2 > v107)
      {
        v95 = 0;
      }
      else
      {
        *(_WORD *)((char *)v106 + v28) = 1266;
        v96 = (_QWORD *)(v28 + 2);
      }
    }
    result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(&v94, (uint64_t)&v103);
    if (!v95)
    {
      if (!(_BYTE)v108)
        goto LABEL_137;
      v50 = ((unint64_t)v106 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = v50 - (_QWORD)v106;
      if (v50 < (unint64_t)v106)
      {
        v52 = 0;
      }
      else
      {
        v52 = 0;
        if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v51 + 2 <= v107)
        {
          *(_WORD *)((char *)v106 + v51) = 2821;
          v52 = v51 + 2;
        }
      }
      v53 = *(_QWORD *)(v10 + 64);
      v54 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = *(_QWORD *)(v10 + 56);
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v52 <= 0x10)
        v52 = 16;
      v56 = v54 + v52;
      if (v55 <= v56)
        v56 = 0;
      *(_QWORD *)(v10 + 72) = v56;
      v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
      do
        __ldaxr(v57);
      while (__stlxr(v56, v57));
      *(_DWORD *)(v10 + 108) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v102, (uint64_t **)(v10 + 8));
      v58 = v102;
      v59 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v59 = 1266;
      *(_QWORD *)(v59 + 8) = v9;
      *(_QWORD *)(v59 + 528) = v59 + 16;
      *(_QWORD *)(v59 + 536) = v59 + 16;
      *(_OWORD *)(v59 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v59 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v59);
      v94 = (int *)v59;
      IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(v59, &v103);
      IPC::Connection::sendMessageImpl((uint64_t)v58, (uint64_t *)&v94, 1, 0);
      v47 = v94;
      v94 = 0;
      if (!v47)
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v102);
      goto LABEL_59;
    }
    v29 = (uint64_t)v96;
    v30 = *(_QWORD *)(v10 + 64);
    v31 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = *(_QWORD *)(v10 + 56);
    if (v31 + 16 >= v32)
      v31 = 0;
    if ((unint64_t)v96 <= 0x10)
      v29 = 16;
    v33 = v31 + v29;
    if (v32 <= v33)
      v34 = 0;
    else
      v34 = v33;
    *(_QWORD *)(v10 + 72) = v34;
    v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
    do
      v24 = __ldaxr(v35);
    while (__stlxr(v34, v35));
LABEL_40:
    if (v24 == 0x80000000 || *(_DWORD *)(v10 + 108))
    {
      if (*(_BYTE *)(v10 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
      *(_DWORD *)(v10 + 108) = 0;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::draw(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unsigned __int8 ***result;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unsigned int v51;
  int *v52[4];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v55 = a4;
  v56 = a3;
  v54 = a5;
  v53 = a2;
  v52[0] = &v53;
  v52[1] = (int *)&v56;
  v52[2] = (int *)&v55;
  v52[3] = (int *)&v54;
  v5 = *((_QWORD *)a1 + 3);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v8 = v7 + 30.0;
  if (*(_QWORD *)(v6 + 48) == v5)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v58, v8);
      if (!v60)
        break;
      v61 = v58;
      v62 = v59;
      v63 = 0;
      v10 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 >= v58;
      v12 = v10 - v58;
      if (v11)
      {
        if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v59)
        {
          v62 = 0;
        }
        else
        {
          *(_WORD *)(v58 + v12) = 1253;
          v63 = v12 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>((uint64_t)&v61, (uint64_t)v52);
      if (v62)
      {
        v14 = v63;
        v15 = *(_QWORD *)(v6 + 64);
        v16 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(v6 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v63 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(v6 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(v6 + 108))
        {
          if (*(_BYTE *)(v6 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
          *(_DWORD *)(v6 + 108) = 0;
        }
        return result;
      }
      v22 = v60;
      if (v60)
      {
        v23 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v23 - v58;
        if (v23 < v58)
        {
          v25 = 0;
        }
        else
        {
          v25 = 0;
          if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v59)
          {
            *(_WORD *)(v58 + v24) = 2821;
            v25 = v24 + 2;
          }
        }
        v26 = *(_QWORD *)(v6 + 64);
        v27 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(v6 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        if (v25 <= 0x10)
          v25 = 16;
        v29 = v27 + v25;
        if (v28 <= v29)
          v29 = 0;
        *(_QWORD *)(v6 + 72) = v29;
        v30 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          __ldaxr(v30);
        while (__stlxr(v29, v30));
        *(_DWORD *)(v6 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(v6 + 8));
        v31 = v57;
        v32 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v32 = 1253;
        *(_QWORD *)(v32 + 8) = v5;
        *(_QWORD *)(v32 + 528) = v32 + 16;
        *(_QWORD *)(v32 + 536) = v32 + 16;
        *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v32 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
        v61 = v32;
        IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(v32, v52);
        IPC::Connection::sendMessageImpl((uint64_t)v31, (uint64_t *)&v61, 1, 0);
        v34 = (IPC::Encoder *)v61;
        v61 = 0;
        if (v34)
        {
          IPC::Encoder::~Encoder(v34, v33);
          WTF::fastFree(v35, v36);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v57);
      }
      __break(1u);
LABEL_73:
      v40 = v13;
LABEL_45:
      v41 = (_QWORD *)((v22 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v41 >= v22 + v40)
      {
        v40 = (unint64_t)v41 - v22 + 8;
        if ((unint64_t)v41 - v22 > 0xFFFFFFFFFFFFFFF7 || v40 > v13)
          return result;
        *v41 = v5;
      }
      if (!v13)
        return result;
      v43 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(v6 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v40 <= 0x10)
        v40 = 16;
      v45 = v43 + v40;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *(_QWORD *)(v6 + 72) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = *(_DWORD *)(v6 + 108);
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        *(_DWORD *)(v6 + 108) = v51;
        if (v51 >= *(_DWORD *)(v6 + 104))
        {
          if (*(_BYTE *)(v6 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
          *(_DWORD *)(v6 + 108) = 0;
        }
      }
      *(_QWORD *)(v6 + 48) = v5;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v61, v7 + 30.0);
    if ((_BYTE)v63)
    {
      v22 = v61;
      v37 = v62;
      v38 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v39 = v38 - v61;
      if (v38 < v61)
      {
        v40 = 0;
        v13 = v62;
      }
      else
      {
        v13 = 0;
        if (v39 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_73;
        v40 = 0;
        if (v39 + 2 <= v62)
        {
          *(_WORD *)(v61 + v39) = 2822;
          v13 = v37;
          v40 = v39 + 2;
        }
      }
      goto LABEL_45;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::drawIndexed(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  unsigned __int8 ***result;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v52;
  int *v53[5];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;

  v57 = a4;
  v58 = a3;
  v55 = a6;
  v56 = a5;
  v54 = a2;
  v53[0] = &v54;
  v53[1] = (int *)&v58;
  v53[2] = (int *)&v57;
  v53[3] = (int *)&v56;
  v53[4] = (int *)&v55;
  v6 = *((_QWORD *)a1 + 3);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v9 = v8 + 30.0;
  if (*(_QWORD *)(v7 + 48) == v6)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v60, v9);
      if (!v62)
        break;
      v63 = v60;
      v64 = v61;
      v65 = 0;
      v11 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v12 = v11 >= v60;
      v13 = v11 - v60;
      if (v12)
      {
        if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v61)
        {
          v64 = 0;
        }
        else
        {
          *(_WORD *)(v60 + v13) = 1254;
          v65 = v13 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>((uint64_t)&v63, (uint64_t)v53);
      if (v64)
      {
        v15 = v65;
        v16 = *(_QWORD *)(v7 + 64);
        v17 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(v7 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v65 <= 0x10)
          v15 = 16;
        v19 = v17 + v15;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(v7 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 == 0x80000000 || *(_DWORD *)(v7 + 108))
        {
          if (*(_BYTE *)(v7 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
          *(_DWORD *)(v7 + 108) = 0;
        }
        return result;
      }
      v23 = v62;
      if (v62)
      {
        v24 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v60;
        if (v24 < v60)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v61)
          {
            *(_WORD *)(v60 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(v7 + 64);
        v28 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(v7 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(v7 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(v7 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v7 + 8));
        v32 = v59;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 1254;
        *(_QWORD *)(v33 + 8) = v6;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v63 = v33;
        IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(v33, v53);
        IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v63, 1, 0);
        v35 = (IPC::Encoder *)v63;
        v63 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v59);
      }
      __break(1u);
LABEL_73:
      v41 = v14;
LABEL_45:
      v42 = (_QWORD *)((v23 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v42 >= v23 + v41)
      {
        v41 = (unint64_t)v42 - v23 + 8;
        if ((unint64_t)v42 - v23 > 0xFFFFFFFFFFFFFFF7 || v41 > v14)
          return result;
        *v42 = v6;
      }
      if (!v14)
        return result;
      v44 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v45 = *(_QWORD *)(v7 + 56);
      if (v44 + 16 >= v45)
        v44 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v46 = v44 + v41;
      if (v45 <= v46)
        v47 = 0;
      else
        v47 = v46;
      *(_QWORD *)(v7 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(v7 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v52 = v50 + 1;
        *(_DWORD *)(v7 + 108) = v52;
        if (v52 >= *(_DWORD *)(v7 + 104))
        {
          if (*(_BYTE *)(v7 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
          *(_DWORD *)(v7 + 108) = 0;
        }
      }
      *(_QWORD *)(v7 + 48) = v6;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v63, v8 + 30.0);
    if ((_BYTE)v65)
    {
      v23 = v63;
      v38 = v64;
      v39 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - v63;
      if (v39 < v63)
      {
        v41 = 0;
        v14 = v64;
      }
      else
      {
        v14 = 0;
        if (v40 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_73;
        v41 = 0;
        if (v40 + 2 <= v64)
        {
          *(_WORD *)(v63 + v40) = 2822;
          v14 = v38;
          v41 = v40 + 2;
        }
      }
      goto LABEL_45;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::drawIndirect(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 ***v4;
  unint64_t v5;
  size_t v6;
  unsigned __int8 ***result;
  size_t v10;
  uint64_t *v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v64;
  unint64_t v65;
  unsigned __int8 ***v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;

  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  v66 = result;
  if (!result)
    return result;
  v10 = *((_QWORD *)this + 3);
  v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v13 = v12 + 30.0;
  if (v11[6] == v10)
    goto LABEL_3;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v12 + 30.0);
  if (!v70)
    return result;
  v50 = v68;
  v49 = v69;
  v51 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = v51 - v68;
  if (v51 < v68)
    goto LABEL_99;
  v53 = v52 + 2;
  if (v52 > 0xFFFFFFFFFFFFFFFDLL || v53 > v69)
  {
    v49 = 0;
LABEL_99:
    v53 = 0;
    goto LABEL_63;
  }
  *(_WORD *)(v68 + v52) = 2822;
LABEL_63:
  v55 = (_QWORD *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v55 >= v50 + v53)
  {
    v53 = (unint64_t)v55 - v50 + 8;
    if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49)
      return result;
    *v55 = v10;
  }
  if (!v49)
    return result;
  v57 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v11[7];
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v53 <= 0x10)
    v53 = 16;
  v59 = v57 + v53;
  if (v58 <= v59)
    v59 = 0;
  v11[9] = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v11[8] + 16) + 128);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v59, v60));
  v62 = *((_DWORD *)v11 + 27);
  if (v61 == 0x80000000 || v62 != 0)
  {
    v64 = v62 + 1;
    *((_DWORD *)v11 + 27) = v64;
    if (v64 >= *((_DWORD *)v11 + 26))
    {
      if (*((_BYTE *)v11 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
  }
  v11[6] = v10;
LABEL_3:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v13);
  if (!v70)
    return result;
  v14 = v68;
  v15 = v69;
  v16 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v68;
  if (v16 >= v68)
  {
    v18 = v17 + 2;
    if (v17 <= 0xFFFFFFFFFFFFFFFDLL && v18 <= v69)
    {
      *(_WORD *)(v68 + v17) = 1256;
      goto LABEL_10;
    }
    v15 = 0;
  }
  v18 = 0;
LABEL_10:
  v20 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 - (v14 + v18);
  if (v20 >= v14 + v18)
  {
    v22 = v20 - v14;
    v23 = v21 + v18 + 8;
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v15)
    {
      v15 = 0;
    }
    else
    {
      *(_QWORD *)(v14 + v22) = v66;
      v18 = v23;
    }
  }
  v25 = (_QWORD *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v14 + v18)
  {
    v18 = (unint64_t)v25 - v14 + 8;
    if ((unint64_t)v25 - v14 > 0xFFFFFFFFFFFFFFF7 || v18 > v15)
      goto LABEL_37;
    *v25 = a3;
  }
  if (v15)
  {
    v27 = v11[8];
    v28 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v29 = v11[7];
    if (v28 + 16 >= v29)
      v28 = 0;
    if (v18 <= 0x10)
      v18 = 16;
    v30 = v28 + v18;
    if (v29 <= v30)
      v31 = 0;
    else
      v31 = v30;
    v11[9] = v31;
    v32 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v31, v32));
    if (v33 == 0x80000000 || *((_DWORD *)v11 + 27))
    {
      if (*((_BYTE *)v11 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
    return result;
  }
LABEL_37:
  if (!v70)
  {
    __break(1u);
LABEL_97:
    munmap(result, *(_QWORD *)(v3 + 552));
LABEL_92:
    *(_QWORD *)(v3 + 528) = v4;
    *(_QWORD *)(v3 + 552) = v10;
    v42 = *(_QWORD *)(v3 + 544);
    goto LABEL_52;
  }
  v34 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v35 = v34 - v68;
  if (v34 < v68)
  {
    v36 = 0;
  }
  else
  {
    v36 = 0;
    if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v69)
    {
      *(_WORD *)(v68 + v35) = 2821;
      v36 = v35 + 2;
    }
  }
  v37 = v11[8];
  v38 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v39 = v11[7];
  if (v38 + 16 >= v39)
    v38 = 0;
  if (v36 <= 0x10)
    v36 = 16;
  v40 = v38 + v36;
  if (v39 <= v40)
    v40 = 0;
  v11[9] = v40;
  v41 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
  do
    __ldaxr(v41);
  while (__stlxr(v40, v41));
  *((_DWORD *)v11 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v11 + 1);
  v11 = v67;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1256;
  *(_QWORD *)(v3 + 8) = v10;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v71 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, (uint64_t *)&v66);
  v42 = *(_QWORD *)(v3 + 544);
  v5 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v43 = *(_QWORD *)(v3 + 552);
  if (v43 < v5 + 8)
  {
    v65 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v10 = v65;
      v65 *= 2;
    }
    while (v10 < v6);
    result = (unsigned __int8 ***)mmap(0, v10, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v4 = result;
    memcpy(result, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    result = *(unsigned __int8 ****)(v3 + 528);
    if (result == (unsigned __int8 ***)(v3 + 16))
      goto LABEL_92;
    goto LABEL_97;
  }
  v4 = *(unsigned __int8 ****)(v3 + 528);
LABEL_52:
  bzero((char *)v4 + v42, v5 - v42);
  *(_QWORD *)(v3 + 544) = v6;
  v44 = (_QWORD *)(*(_QWORD *)(v3 + 528) + v5);
  *(_QWORD *)(v3 + 536) = v44 + 1;
  *v44 = a3;
  IPC::Connection::sendMessageImpl((uint64_t)v11, (uint64_t *)&v71, 1, 0);
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v45);
    WTF::fastFree(v47, v48);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::drawIndexedIndirect(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 ***v4;
  unint64_t v5;
  size_t v6;
  unsigned __int8 ***result;
  size_t v10;
  uint64_t *v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v64;
  unint64_t v65;
  unsigned __int8 ***v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;

  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  v66 = result;
  if (!result)
    return result;
  v10 = *((_QWORD *)this + 3);
  v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v13 = v12 + 30.0;
  if (v11[6] == v10)
    goto LABEL_3;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v12 + 30.0);
  if (!v70)
    return result;
  v50 = v68;
  v49 = v69;
  v51 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = v51 - v68;
  if (v51 < v68)
    goto LABEL_99;
  v53 = v52 + 2;
  if (v52 > 0xFFFFFFFFFFFFFFFDLL || v53 > v69)
  {
    v49 = 0;
LABEL_99:
    v53 = 0;
    goto LABEL_63;
  }
  *(_WORD *)(v68 + v52) = 2822;
LABEL_63:
  v55 = (_QWORD *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v55 >= v50 + v53)
  {
    v53 = (unint64_t)v55 - v50 + 8;
    if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49)
      return result;
    *v55 = v10;
  }
  if (!v49)
    return result;
  v57 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v11[7];
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v53 <= 0x10)
    v53 = 16;
  v59 = v57 + v53;
  if (v58 <= v59)
    v59 = 0;
  v11[9] = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v11[8] + 16) + 128);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v59, v60));
  v62 = *((_DWORD *)v11 + 27);
  if (v61 == 0x80000000 || v62 != 0)
  {
    v64 = v62 + 1;
    *((_DWORD *)v11 + 27) = v64;
    if (v64 >= *((_DWORD *)v11 + 26))
    {
      if (*((_BYTE *)v11 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
  }
  v11[6] = v10;
LABEL_3:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v13);
  if (!v70)
    return result;
  v14 = v68;
  v15 = v69;
  v16 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v68;
  if (v16 >= v68)
  {
    v18 = v17 + 2;
    if (v17 <= 0xFFFFFFFFFFFFFFFDLL && v18 <= v69)
    {
      *(_WORD *)(v68 + v17) = 1255;
      goto LABEL_10;
    }
    v15 = 0;
  }
  v18 = 0;
LABEL_10:
  v20 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 - (v14 + v18);
  if (v20 >= v14 + v18)
  {
    v22 = v20 - v14;
    v23 = v21 + v18 + 8;
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v15)
    {
      v15 = 0;
    }
    else
    {
      *(_QWORD *)(v14 + v22) = v66;
      v18 = v23;
    }
  }
  v25 = (_QWORD *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v14 + v18)
  {
    v18 = (unint64_t)v25 - v14 + 8;
    if ((unint64_t)v25 - v14 > 0xFFFFFFFFFFFFFFF7 || v18 > v15)
      goto LABEL_37;
    *v25 = a3;
  }
  if (v15)
  {
    v27 = v11[8];
    v28 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v29 = v11[7];
    if (v28 + 16 >= v29)
      v28 = 0;
    if (v18 <= 0x10)
      v18 = 16;
    v30 = v28 + v18;
    if (v29 <= v30)
      v31 = 0;
    else
      v31 = v30;
    v11[9] = v31;
    v32 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v31, v32));
    if (v33 == 0x80000000 || *((_DWORD *)v11 + 27))
    {
      if (*((_BYTE *)v11 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
    return result;
  }
LABEL_37:
  if (!v70)
  {
    __break(1u);
LABEL_97:
    munmap(result, *(_QWORD *)(v3 + 552));
LABEL_92:
    *(_QWORD *)(v3 + 528) = v4;
    *(_QWORD *)(v3 + 552) = v10;
    v42 = *(_QWORD *)(v3 + 544);
    goto LABEL_52;
  }
  v34 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v35 = v34 - v68;
  if (v34 < v68)
  {
    v36 = 0;
  }
  else
  {
    v36 = 0;
    if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v69)
    {
      *(_WORD *)(v68 + v35) = 2821;
      v36 = v35 + 2;
    }
  }
  v37 = v11[8];
  v38 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v39 = v11[7];
  if (v38 + 16 >= v39)
    v38 = 0;
  if (v36 <= 0x10)
    v36 = 16;
  v40 = v38 + v36;
  if (v39 <= v40)
    v40 = 0;
  v11[9] = v40;
  v41 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
  do
    __ldaxr(v41);
  while (__stlxr(v40, v41));
  *((_DWORD *)v11 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v11 + 1);
  v11 = v67;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1255;
  *(_QWORD *)(v3 + 8) = v10;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v71 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, (uint64_t *)&v66);
  v42 = *(_QWORD *)(v3 + 544);
  v5 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v43 = *(_QWORD *)(v3 + 552);
  if (v43 < v5 + 8)
  {
    v65 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v10 = v65;
      v65 *= 2;
    }
    while (v10 < v6);
    result = (unsigned __int8 ***)mmap(0, v10, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v4 = result;
    memcpy(result, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    result = *(unsigned __int8 ****)(v3 + 528);
    if (result == (unsigned __int8 ***)(v3 + 16))
      goto LABEL_92;
    goto LABEL_97;
  }
  v4 = *(unsigned __int8 ****)(v3 + 528);
LABEL_52:
  bzero((char *)v4 + v42, v5 - v42);
  *(_QWORD *)(v3 + 544) = v6;
  v44 = (_QWORD *)(*(_QWORD *)(v3 + 528) + v5);
  *(_QWORD *)(v3 + 536) = v44 + 1;
  *v44 = a3;
  IPC::Connection::sendMessageImpl((uint64_t)v11, (uint64_t *)&v71, 1, 0);
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v45);
    WTF::fastFree(v47, v48);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setBindGroup(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  unsigned __int8 ***result;
  int *v7[3];
  unsigned __int8 ***v8;
  int v9;

  v9 = a2;
  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a3);
  v8 = result;
  if (result)
  {
    v7[0] = &v9;
    v7[1] = (int *)&v8;
    v7[2] = a4;
    return WebKit::WebGPU::RemoteRenderBundleEncoderProxy::send<Messages::RemoteRenderBundleEncoder::SetBindGroup>(*(WTF::ApproximateTime **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 176) + 96) + 96), v7);
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::send<Messages::RemoteRenderBundleEncoder::SetBindGroup>(WTF::ApproximateTime *a1, uint64_t a2, int **a3)
{
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;
  unint64_t v56;
  unint64_t v57;

  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(WTF::ApproximateTime **)(a2 + 48) == a1)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v52, v7);
      if (!v54)
        break;
      v55 = v52;
      v56 = v53;
      v57 = 0;
      v9 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v52;
      v11 = v9 - (_QWORD)v52;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v53)
        {
          v56 = 0;
        }
        else
        {
          *(_WORD *)((char *)v52 + v11) = 1261;
          v57 = v11 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(&v55, (uint64_t)a3);
      if (v56)
      {
        v14 = v57;
        v15 = *(_QWORD *)(a2 + 64);
        v16 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(a2 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v57 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(a2 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(a2 + 108))
        {
          if (*(_BYTE *)(a2 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
        return result;
      }
      if (v54)
      {
        v22 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v52;
        if (v22 < (unint64_t)v52)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v53)
          {
            *(_WORD *)((char *)v52 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a2 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a2 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a2 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a2 + 8));
        v30 = v51;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1261;
        *(_QWORD *)(v31 + 8) = a1;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v55 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(v31, a3);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v55, 1, 0);
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
      }
      __break(1u);
LABEL_76:
      v36 = 0;
LABEL_77:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v13 + v39)
      {
        v39 = v41 - (char *)v13 + 8;
        if ((unint64_t)(v41 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return result;
        *(_QWORD *)v41 = a1;
      }
      if (!v36)
        return result;
      v43 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a2 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a2 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a2 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *(_DWORD *)(a2 + 108) = v50;
        if (v50 >= *(_DWORD *)(a2 + 104))
        {
          if (*(_BYTE *)(a2 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
      }
      *(_QWORD *)(a2 + 48) = a1;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v55, v6 + 30.0);
    if ((_BYTE)v57)
    {
      v13 = v55;
      v36 = v56;
      v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v55;
      if (v37 < (unint64_t)v55)
        goto LABEL_77;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v56)
        goto LABEL_76;
      *(_WORD *)((char *)v55 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

WTF *WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setBindGroup(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this, int a2, const WebCore::WebGPU::BindGroup *a3, const unsigned int *a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  WTF *result;
  uint64_t v12;
  void *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  char v19;
  int *v20[3];
  WTF *v21;
  int v22;

  v22 = a2;
  result = (WTF *)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::BindGroup *))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), a3);
  v21 = result;
  if (result)
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, (int *)&a4[a6], a7);
    v17 = v15;
    v12 = v16;
    v15 = 0;
    v16 = 0;
    v18 = v12;
    v19 = 1;
    v20[0] = &v22;
    v20[1] = (int *)&v21;
    v20[2] = (int *)&v17;
    WebKit::WebGPU::RemoteRenderBundleEncoderProxy::send<Messages::RemoteRenderBundleEncoder::SetBindGroup>(*((WTF::ApproximateTime **)this + 3), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96), v20);
    if (v19)
    {
      v14 = v17;
      if (v17)
      {
        v17 = 0;
        LODWORD(v18) = 0;
        WTF::fastFree(v14, v13);
      }
    }
    result = v15;
    if (v15)
    {
      v15 = 0;
      LODWORD(v16) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::pushDebugGroup(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1260;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1260;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::popDebugGroup(WebKit::WebGPU::RemoteRenderBundleEncoderProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 1259;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 1259;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::insertDebugMarker(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1258;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1258;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteRenderBundleEncoderProxy::finish@<X0>(_QWORD *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  char *v16;
  IPC::Encoder *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  int v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  WTF::ApproximateTime *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v59;
  WTF::ApproximateTime *v60;
  WTF::StringImpl *v61;
  char v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  unint64_t v65;
  char v66;
  IPC::Encoder *v67;
  unint64_t v68;
  char *v69;

  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v61 = v5;
  v62 = 1;
  v60 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v6 = a1[3];
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 176) + 96) + 96);
  WTF::ApproximateTime::now(v60);
  v9 = v8 + 30.0;
  if (*(_QWORD *)(v7 + 48) != v6)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v67, v8 + 30.0);
    if ((_BYTE)v69)
    {
      v17 = v67;
      v45 = v68;
      v46 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = v46 - (_QWORD)v67;
      if (v46 < (unint64_t)v67)
        goto LABEL_90;
      v48 = v47 + 2;
      if (v47 > 0xFFFFFFFFFFFFFFFDLL || v48 > v68)
        goto LABEL_89;
      *(_WORD *)((char *)v67 + v47) = 2822;
      goto LABEL_62;
    }
    goto LABEL_47;
  }
  while (1)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v64, v9);
    if (!v66)
      goto LABEL_47;
    v67 = v64;
    v68 = v65;
    v69 = 0;
    v11 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v12 = v11 >= (unint64_t)v64;
    v13 = v11 - (_QWORD)v64;
    if (v12)
    {
      if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v65)
      {
        v68 = 0;
      }
      else
      {
        *(_WORD *)((char *)v64 + v13) = 1257;
        v69 = (char *)(v13 + 2);
      }
    }
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v67, (uint64_t *)&v61);
    v15 = (unint64_t)v69;
    v16 = (char *)((unint64_t)&v69[(_QWORD)v67 + 7] & 0xFFFFFFFFFFFFFFF8);
    v17 = (IPC::Encoder *)(v16 - &v69[(_QWORD)v67]);
    if (v16 >= &v69[(_QWORD)v67])
    {
      v17 = (IPC::Encoder *)(v16 - (char *)v67);
      if ((unint64_t)(v16 - (char *)v67) > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_31;
      v15 = (unint64_t)v17 + 8;
      if ((unint64_t)v17 + 8 > v68)
        goto LABEL_31;
      *(_QWORD *)v16 = v60;
      v69 = (char *)v17 + 8;
    }
    if (v68)
    {
      v18 = *(_QWORD *)(v7 + 64);
      v19 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v7 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v7 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v7 + 108))
      {
        if (*(_BYTE *)(v7 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
        *(_DWORD *)(v7 + 108) = 0;
      }
LABEL_48:
      v43 = a1 + 4;
      v41 = a1[4];
      v42 = v43[1];
      v44 = v60;
      result = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(result + 8) = 1;
      *(_QWORD *)result = off_1E34E4D28;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = v44;
      ++*(_DWORD *)(v41 + 8);
      *(_QWORD *)(result + 32) = v41;
      ++*(_DWORD *)(v42 + 8);
      *(_QWORD *)(result + 40) = v42;
      goto LABEL_49;
    }
LABEL_31:
    if (v66)
      break;
    __break(1u);
LABEL_89:
    v45 = 0;
LABEL_90:
    v48 = 0;
LABEL_62:
    v50 = (char *)(((unint64_t)v17 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v50 >= (char *)v17 + v48)
    {
      v48 = v50 - (char *)v17 + 8;
      if ((unint64_t)(v50 - (char *)v17) > 0xFFFFFFFFFFFFFFF7 || v48 > v45)
        goto LABEL_47;
      *(_QWORD *)v50 = v6;
    }
    if (!v45)
      goto LABEL_47;
    v52 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v53 = *(_QWORD *)(v7 + 56);
    if (v52 + 16 >= v53)
      v52 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v54 = v52 + v48;
    if (v53 <= v54)
      v54 = 0;
    *(_QWORD *)(v7 + 72) = v54;
    v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 64) + 16) + 128);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v54, v55));
    v57 = *(_DWORD *)(v7 + 108);
    if (v56 == 0x80000000 || v57 != 0)
    {
      v59 = v57 + 1;
      *(_DWORD *)(v7 + 108) = v59;
      if (v59 >= *(_DWORD *)(v7 + 104))
      {
        if (*(_BYTE *)(v7 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
        *(_DWORD *)(v7 + 108) = 0;
      }
    }
    *(_QWORD *)(v7 + 48) = v6;
  }
  v25 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - (_QWORD)v64;
  if (v25 < (unint64_t)v64)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v65)
    {
      *(_WORD *)((char *)v64 + v26) = 2821;
      v27 = v26 + 2;
    }
  }
  v28 = *(_QWORD *)(v7 + 64);
  v29 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v7 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v27 <= 0x10)
    v27 = 16;
  v31 = v29 + v27;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v7 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
  do
    __ldaxr(v32);
  while (__stlxr(v31, v32));
  *(_DWORD *)(v7 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)(v7 + 8));
  v33 = v63;
  v34 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v34 = 1257;
  *(_QWORD *)(v34 + 8) = v6;
  *(_QWORD *)(v34 + 528) = v34 + 16;
  *(_QWORD *)(v34 + 536) = v34 + 16;
  *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v34 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
  v67 = (IPC::Encoder *)v34;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v34, (uint64_t *)&v61);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v34, (uint64_t *)&v60);
  v36 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v67, 1, 0);
  v37 = v67;
  v67 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v35);
    WTF::fastFree(v38, v39);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
  if (!v36)
    goto LABEL_48;
LABEL_47:
  result = 0;
LABEL_49:
  *a3 = result;
  if (v62)
  {
    result = (uint64_t)v61;
    v61 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::setLabelInternal(WTF::ApproximateTime **this, const WTF::String *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)a2;
  return WebKit::WebGPU::RemoteRenderBundleEncoderProxy::send<Messages::RemoteRenderBundleEncoder::SetLabel>(this[3], *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[5] + 22) + 96) + 96), &v3);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleEncoderProxy::send<Messages::RemoteRenderBundleEncoder::SetLabel>(WTF::ApproximateTime *a1, uint64_t a2, uint64_t **a3)
{
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;
  unint64_t v56;
  unint64_t v57;

  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(WTF::ApproximateTime **)(a2 + 48) == a1)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v52, v7);
      if (!v54)
        break;
      v55 = v52;
      v56 = v53;
      v57 = 0;
      v9 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v52;
      v11 = v9 - (_QWORD)v52;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v53)
        {
          v56 = 0;
        }
        else
        {
          *(_WORD *)((char *)v52 + v11) = 1263;
          v57 = v11 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v55, *a3);
      if (v56)
      {
        v14 = v57;
        v15 = *(_QWORD *)(a2 + 64);
        v16 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(a2 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v57 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(a2 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(a2 + 108))
        {
          if (*(_BYTE *)(a2 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
        return result;
      }
      if (v54)
      {
        v22 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v52;
        if (v22 < (unint64_t)v52)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v53)
          {
            *(_WORD *)((char *)v52 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a2 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a2 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a2 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a2 + 8));
        v30 = v51;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1263;
        *(_QWORD *)(v31 + 8) = a1;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v55 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, *a3);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v55, 1, 0);
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
      }
      __break(1u);
LABEL_76:
      v36 = 0;
LABEL_77:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v13 + v39)
      {
        v39 = v41 - (char *)v13 + 8;
        if ((unint64_t)(v41 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return result;
        *(_QWORD *)v41 = a1;
      }
      if (!v36)
        return result;
      v43 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a2 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a2 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a2 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *(_DWORD *)(a2 + 108) = v50;
        if (v50 >= *(_DWORD *)(a2 + 104))
        {
          if (*(_BYTE *)(a2 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
      }
      *(_QWORD *)(a2 + 48) = a1;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v55, v6 + 30.0);
    if ((_BYTE)v57)
    {
      v13 = v55;
      v36 = v56;
      v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v55;
      if (v37 < (unint64_t)v55)
        goto LABEL_77;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v56)
        goto LABEL_76;
      *(_WORD *)((char *)v55 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t WebKit::RemoteGPUProxy::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebKit::RemoteGPUProxy::deref(WebKit::RemoteGPUProxy *this, void *a2)
{
  return WTF::ThreadSafeRefCounted<WebKit::RemoteGPUProxy,(WTF::DestructionThread)0>::deref((unsigned int *)this + 6, a2);
}

uint64_t WebKit::RemoteGPUProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80));
}

uint64_t WebKit::RemoteGPUProxy::isCurrent(WebKit::RemoteGPUProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10));
}

uint64_t `non-virtual thunk to'WebKit::RemoteGPUProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
}

uint64_t `non-virtual thunk to'WebKit::RemoteGPUProxy::isCurrent(WebKit::RemoteGPUProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages9RemoteGPU14RequestAdapterEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

unsigned __int8 ***WTF::Detail::CallableWrapper<WebKit::WebGPU::RemoteDeviceProxy::importExternalTexture(WebCore::WebGPU::ExternalTextureDescriptor const&)::$_0,void,IPC::Semaphore &>::call(WTF::ApproximateTime *a1, IPC::Semaphore *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  unsigned int v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  IPC::Encoder *v44;

  v3 = *((_QWORD *)a1 + 1);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 176) + 96) + 96);
  v5 = *(_QWORD *)(v3 + 152);
  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v5)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v41, v6 + 30.0);
  if (!v43)
    return result;
  v25 = v41;
  v24 = v42;
  v26 = (v41 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v27 = v26 - v41;
  if (v26 < v41)
    goto LABEL_55;
  v28 = v27 + 2;
  if (v27 > 0xFFFFFFFFFFFFFFFDLL || v28 > v42)
  {
    v24 = 0;
LABEL_55:
    v28 = 0;
    goto LABEL_28;
  }
  *(_WORD *)(v41 + v27) = 2822;
LABEL_28:
  v30 = (_QWORD *)((v25 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v30 >= v25 + v28)
  {
    v28 = (unint64_t)v30 - v25 + 8;
    if ((unint64_t)v30 - v25 > 0xFFFFFFFFFFFFFFF7 || v28 > v24)
      return result;
    *v30 = v5;
  }
  if (!v24)
    return result;
  v32 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v33 = *(_QWORD *)(v4 + 56);
  if (v32 + 16 >= v33)
    v32 = 0;
  if (v28 <= 0x10)
    v28 = 16;
  v34 = v32 + v28;
  if (v33 <= v34)
    v34 = 0;
  *(_QWORD *)(v4 + 72) = v34;
  v35 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v34, v35));
  v37 = *(_DWORD *)(v4 + 108);
  if (v36 == 0x80000000 || v37 != 0)
  {
    v39 = v37 + 1;
    *(_DWORD *)(v4 + 108) = v39;
    if (v39 >= *(_DWORD *)(v4 + 104))
    {
      if (*(_BYTE *)(v4 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
      *(_DWORD *)(v4 + 108) = 0;
    }
  }
  *(_QWORD *)(v4 + 48) = v5;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v41, v7);
  if (v43)
  {
    v9 = (v41 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v10 = v9 - v41;
    if (v9 < v41 || ((v11 = v10 + 2, v10 <= 0xFFFFFFFFFFFFFFFDLL) ? (v12 = v11 > v42) : (v12 = 1), v12))
      v11 = 0;
    else
      *(_WORD *)(v41 + v10) = 2821;
    v13 = *(_QWORD *)(v4 + 64);
    v14 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v15 = *(_QWORD *)(v4 + 56);
    if (v14 + 16 >= v15)
      v14 = 0;
    if (v11 <= 0x10)
      v11 = 16;
    v16 = v14 + v11;
    if (v15 <= v16)
      v16 = 0;
    *(_QWORD *)(v4 + 72) = v16;
    v17 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
    do
      __ldaxr(v17);
    while (__stlxr(v16, v17));
    *(_DWORD *)(v4 + 108) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v40, (uint64_t **)(v4 + 8));
    v18 = v40;
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 792;
    *(_QWORD *)(v19 + 8) = v5;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v44 = (IPC::Encoder *)v19;
    IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v19, a2);
    IPC::Connection::sendMessageImpl((uint64_t)v18, (uint64_t *)&v44, 1, 0);
    v21 = v44;
    v44 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v20);
      WTF::fastFree(v22, v23);
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v40);
  }
  return result;
}

unsigned __int8 ***WTF::Detail::CallableWrapper<WebKit::WebGPU::RemoteDeviceProxy::importExternalTexture(WebCore::WebGPU::ExternalTextureDescriptor const&)::$_1,void,WebCore::SharedMemoryHandle &&>::call(WTF::ApproximateTime *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  unsigned int v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  IPC::Encoder *v44;

  v3 = *((_QWORD *)a1 + 1);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 176) + 96) + 96);
  v5 = *(_QWORD *)(v3 + 152);
  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v5)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v41, v6 + 30.0);
  if (!v43)
    return result;
  v25 = v41;
  v24 = v42;
  v26 = (v41 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v27 = v26 - v41;
  if (v26 < v41)
    goto LABEL_55;
  v28 = v27 + 2;
  if (v27 > 0xFFFFFFFFFFFFFFFDLL || v28 > v42)
  {
    v24 = 0;
LABEL_55:
    v28 = 0;
    goto LABEL_28;
  }
  *(_WORD *)(v41 + v27) = 2822;
LABEL_28:
  v30 = (_QWORD *)((v25 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v30 >= v25 + v28)
  {
    v28 = (unint64_t)v30 - v25 + 8;
    if ((unint64_t)v30 - v25 > 0xFFFFFFFFFFFFFFF7 || v28 > v24)
      return result;
    *v30 = v5;
  }
  if (!v24)
    return result;
  v32 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v33 = *(_QWORD *)(v4 + 56);
  if (v32 + 16 >= v33)
    v32 = 0;
  if (v28 <= 0x10)
    v28 = 16;
  v34 = v32 + v28;
  if (v33 <= v34)
    v34 = 0;
  *(_QWORD *)(v4 + 72) = v34;
  v35 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v34, v35));
  v37 = *(_DWORD *)(v4 + 108);
  if (v36 == 0x80000000 || v37 != 0)
  {
    v39 = v37 + 1;
    *(_DWORD *)(v4 + 108) = v39;
    if (v39 >= *(_DWORD *)(v4 + 104))
    {
      if (*(_BYTE *)(v4 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
      *(_DWORD *)(v4 + 108) = 0;
    }
  }
  *(_QWORD *)(v4 + 48) = v5;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v41, v7);
  if (v43)
  {
    v9 = (v41 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v10 = v9 - v41;
    if (v9 < v41 || ((v11 = v10 + 2, v10 <= 0xFFFFFFFFFFFFFFFDLL) ? (v12 = v11 > v42) : (v12 = 1), v12))
      v11 = 0;
    else
      *(_WORD *)(v41 + v10) = 2821;
    v13 = *(_QWORD *)(v4 + 64);
    v14 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v15 = *(_QWORD *)(v4 + 56);
    if (v14 + 16 >= v15)
      v14 = 0;
    if (v11 <= 0x10)
      v11 = 16;
    v16 = v14 + v11;
    if (v15 <= v16)
      v16 = 0;
    *(_QWORD *)(v4 + 72) = v16;
    v17 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
    do
      __ldaxr(v17);
    while (__stlxr(v16, v17));
    *(_DWORD *)(v4 + 108) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v40, (uint64_t **)(v4 + 8));
    v18 = v40;
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 791;
    *(_QWORD *)(v19 + 8) = v5;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v44 = (IPC::Encoder *)v19;
    IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v19, a2);
    IPC::Connection::sendMessageImpl((uint64_t)v18, (uint64_t *)&v44, 1, 0);
    v21 = v44;
    v44 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v20);
      WTF::fastFree(v22, v23);
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v40);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  uint64_t v5;

  *a1 = &off_1E34E49D8;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34E49D8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>::call(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  _DWORD *v14;
  _BYTE v15[8];
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;
  _DWORD *v19;

  v2 = (uint64_t)(a1 + 1);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>(v2);
  IPC::Decoder::decode<std::tuple<BOOL,WTF::String>>((uint64_t)v15, a2);
  if (!v17)
    return IPC::Connection::cancelReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>(v2);
  if (v15[0])
  {
    v4 = a1[3];
    v5 = *(_QWORD *)(v4 + 168);
    v6 = a1[1];
    v7 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = off_1E34E3E08;
    *(_QWORD *)(v7 + 24) = v6;
    ++*(_DWORD *)(v5 + 8);
    *(_QWORD *)(v7 + 32) = v5;
    ++*(_DWORD *)(v4 + 8);
    *(_QWORD *)(v7 + 40) = v4;
    WTF::String::operator=((WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(a1 + 4));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, v7 + 16);
    v19 = (_DWORD *)v7;
    v8 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v18 = v8;
    v9 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v19, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = v18;
    v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
    }
LABEL_19:
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v19 = 0;
  v13 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v19, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = (WTF::StringImpl *)v19;
  v19 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v17)
    goto LABEL_19;
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  _DWORD *v6;

  v5 = 0;
  v6 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, &v6, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<BOOL,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_7;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v6;
    v12 = 0;
LABEL_7:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_8;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v5);
    goto LABEL_9;
  }
  result = IPC::Decoder::decode<WTF::String>(a2, &v18);
  if (v19)
  {
    *(_QWORD *)(a1 + 8) = v18;
    *(_BYTE *)a1 = v9 != 0;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
LABEL_9:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (v17)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v16);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::CreateComputePipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4A00;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::CreateComputePipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4A00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::CreateComputePipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  uint64_t v5;

  *a1 = &off_1E34E4A28;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34E4A28;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0)#1},void,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0>::call(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  _DWORD *v14;
  _BYTE v15[8];
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;
  _DWORD *v19;

  v2 = (uint64_t)(a1 + 1);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>(v2);
  IPC::Decoder::decode<std::tuple<BOOL,WTF::String>>((uint64_t)v15, a2);
  if (!v17)
    return IPC::Connection::cancelReply<Messages::RemoteDevice::CreateComputePipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createComputePipelineAsync(WebCore::WebGPU::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0>(v2);
  if (v15[0])
  {
    v4 = a1[3];
    v5 = *(_QWORD *)(v4 + 168);
    v6 = a1[1];
    v7 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = off_1E34E4E18;
    *(_QWORD *)(v7 + 24) = v6;
    ++*(_DWORD *)(v5 + 8);
    *(_QWORD *)(v7 + 32) = v5;
    ++*(_DWORD *)(v4 + 8);
    *(_QWORD *)(v7 + 40) = v4;
    WTF::String::operator=((WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(a1 + 4));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, v7 + 16);
    v19 = (_DWORD *)v7;
    v8 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v18 = v8;
    v9 = a1[2];
    a1[2] = 0;
    (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v19, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = v18;
    v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
    }
LABEL_19:
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v19 = 0;
  v13 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v19, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = (WTF::StringImpl *)v19;
  v19 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v17)
    goto LABEL_19;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::CreateRenderPipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4A50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::CreateRenderPipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4A50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::CreateRenderPipelineAsync,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::CreateRenderPipelineAsync &&,WebKit::WebGPU::RemoteDeviceProxy::createRenderPipelineAsync(WebCore::WebGPU::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4A78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4A78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char v3;
  uint64_t result;
  uint64_t *v5;
  _BOOL8 v6;
  uint64_t v7;
  char v8[8];
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  char v13[8];
  int v14;
  char v15;
  char v16;
  uint64_t *v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t **v23;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>>((uint64_t)v8, a2);
  if (!v12)
    return IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(v2);
  v3 = v8[0];
  v13[0] = 0;
  v15 = 0;
  if (!v11)
  {
    v6 = v8[0] != 0;
    LOBYTE(v17) = 0;
    LOBYTE(v19) = 0;
    v7 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _BOOL8, uint64_t **))(*(_QWORD *)v7 + 16))(v7, v6, &v17);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if ((_BYTE)v19 && (_DWORD)v18 != -1)
      result = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E34E4AA8[v18])(&v23, &v17);
    goto LABEL_7;
  }
  v14 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)&v9);
  v15 = 1;
  v16 = v3;
  v17 = v2;
  v18 = &v16;
  v19 = v2;
  v20 = &v16;
  v21 = v2;
  v22 = &v16;
  if (v14 == -1)
  {
    v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(v5);
  }
  v23 = &v17;
  result = ((uint64_t (*)(uint64_t ***, char *))off_1E34E4AC0[v14])(&v23, v13);
LABEL_7:
  if (v15 && v14 != -1)
    result = ((uint64_t (**)(uint64_t **, char *))off_1E34E4A90)[v14](&v17, v13);
  if (v12 && v11 && v10 != -1)
    return ((uint64_t (**)(uint64_t **, uint64_t *))off_1E34E4A90)[v10](&v17, &v9);
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[8];
  int v4;
  char v5;
  char v6;

  v3[0] = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v1 + 16))(v1, 0, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v5)
  {
    if (v4 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34E4AA8[v4])(&v6, v3);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[8];
  unsigned int v43;
  unsigned __int8 v44;
  char v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  char v50;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v23 = 0;
    v24 = 0;
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v24 = *a2;
        v23 = a2[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
    goto LABEL_42;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v23 = v6;
    v24 = 0;
LABEL_42:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_43;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_43:
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v5);
    goto LABEL_12;
  }
  v10 = v9 != 0;
  if (v6 <= (unint64_t)&v8[-v5 + 1])
  {
    v28 = 0;
    v29 = 0;
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
      v28 = 0;
      v39 = *a2;
      v40 = a2[1];
      v41 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v29 = 0;
      if (v41)
      {
        if (v40)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39);
          v29 = *a2;
          v28 = a2[1];
        }
      }
    }
    goto LABEL_47;
  }
  a2[2] = (uint64_t)(v8 + 2);
  if (v8[1] >= 2u)
  {
    v28 = v6;
    v29 = v5;
LABEL_47:
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31 && v28)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v29, v28);
    goto LABEL_10;
  }
  if (!v8[1])
  {
    v42[0] = 0;
    v44 = 0;
    v45 = 1;
    goto LABEL_28;
  }
  if (v6 <= (unint64_t)&v8[-v5 + 2])
  {
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      v33 = *a2;
      v34 = a2[1];
      v35 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v35)
      {
        if (v34)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
      }
    }
    goto LABEL_9;
  }
  a2[2] = (uint64_t)(v8 + 3);
  v11 = v8[2];
  if (v11 <= 2)
  {
    if (!v11)
    {
      v47 = 0;
      v48 = 1;
      goto LABEL_25;
    }
    if (v11 == 1)
    {
      IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(a2, (uint64_t)&v49);
      if (v50)
      {
        v46 = v49;
        v21 = 1;
        v47 = 1;
        goto LABEL_24;
      }
    }
    else
    {
      IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(a2, (uint64_t)&v49);
      if (v50)
      {
        v46 = v49;
        v47 = 2;
        v21 = 1;
        goto LABEL_24;
      }
    }
    v36 = *a2;
    v37 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (v38 && v37)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
    v21 = 0;
    LOBYTE(v46) = 0;
LABEL_24:
    v48 = v21;
    if (!v21)
      goto LABEL_9;
LABEL_25:
    v42[0] = 0;
    v43 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>((uint64_t)v42, (uint64_t)&v46);
    v44 = 1;
    v45 = 1;
    if (!v48)
      goto LABEL_28;
    if (v47 == -1)
      goto LABEL_28;
    ((uint64_t (**)(uint64_t *, uint64_t *))off_1E34E4A90)[v47](&v49, &v46);
    if (v45)
      goto LABEL_28;
    goto LABEL_11;
  }
LABEL_9:
  v12 = *a2;
  v13 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v14 = a2[3];
  if (v14 && v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
LABEL_10:
  v42[0] = 0;
  v45 = 0;
LABEL_11:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v17 = a2[3];
  if (!v17 || !v16 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15), !v45))
  {
LABEL_12:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
LABEL_13:
    v18 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v19)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18);
    }
    return result;
  }
LABEL_28:
  *(_BYTE *)a1 = v10;
  *(_BYTE *)(a1 + 8) = 0;
  result = a1 + 8;
  *(_BYTE *)(a1 + 24) = 0;
  if (!v44)
  {
    *(_BYTE *)(a1 + 32) = 1;
    return result;
  }
  *(_DWORD *)(a1 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>(result, (uint64_t)v42);
  *(_BYTE *)(a1 + 24) = 1;
  v22 = v44;
  *(_BYTE *)(a1 + 32) = 1;
  if (v45)
  {
    if (v22)
    {
      if (v43 != -1)
      {
        result = off_1E34E4A90[v43](&v46, v42);
        if (!*(_BYTE *)(a1 + 32))
          goto LABEL_13;
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **result;

  result = *(WTF::StringImpl ***)a2;
  *(_QWORD *)a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref(result, a2);
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **result;

  result = *(WTF::StringImpl ***)a2;
  *(_QWORD *)a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref(result, a2);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit6WebGPU17RemoteDeviceProxy13popErrorScopeEONS8_17CompletionHandlerIFvbONS_8optionalINS_7variantIJNS8_3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISJ_EENS8_21DefaultRefDerefTraitsISJ_EEEENSG_INSI_15ValidationErrorENSK_ISP_EENSM_ISP_EEEENSG_INSI_13InternalErrorENSK_IST_EENSM_IST_EEEEEEEEEEEEEN3__0clINSE_INSF_IJNSB_16OutOfMemoryErrorENSB_15ValidationErrorENSB_13InternalErrorEEEEEEEEDabT_EUlOS15_E_JZZNSC_13popErrorScopeES12_ENS14_IS19_EES1A_bS1B_EUlOS16_E_ZZNSC_13popErrorScopeES12_ENS14_IS19_EES1A_bS1B_EUlOS17_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJS15_S16_S17_EEEEEEDcS1B_DpT0_(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  int v7;
  char v8;
  char v9;

  v1 = **a1;
  v2 = *(unsigned __int8 *)(*a1)[1];
  v3 = (_DWORD *)WTF::fastMalloc((WTF *)4);
  *v3 = 1;
  v6 = v3;
  v7 = 0;
  v8 = 1;
  v4 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v4 + 16))(v4, v2, &v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v8)
  {
    if (v7 != -1)
      return ((uint64_t (*)(char *, _DWORD **))off_1E34E4AA8[v7])(&v9, &v6);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit6WebGPU17RemoteDeviceProxy13popErrorScopeEONS8_17CompletionHandlerIFvbONS_8optionalINS_7variantIJNS8_3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISJ_EENS8_21DefaultRefDerefTraitsISJ_EEEENSG_INSI_15ValidationErrorENSK_ISP_EENSM_ISP_EEEENSG_INSI_13InternalErrorENSK_IST_EENSM_IST_EEEEEEEEEEEEEN3__0clINSE_INSF_IJNSB_16OutOfMemoryErrorENSB_15ValidationErrorENSB_13InternalErrorEEEEEEEEDabT_EUlOS15_E_JZZNSC_13popErrorScopeES12_ENS14_IS19_EES1A_bS1B_EUlOS16_E_ZZNSC_13popErrorScopeES12_ENS14_IS19_EES1A_bS1B_EUlOS17_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJS15_S16_S17_EEEEEEDcS1B_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 16);
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 8) = v6;
  v9 = v5;
  v10 = 1;
  v11 = 1;
  v7 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, v4, &v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E34E4AA8[v10])(&v12, &v9);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit6WebGPU17RemoteDeviceProxy13popErrorScopeEONS8_17CompletionHandlerIFvbONS_8optionalINS_7variantIJNS8_3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISJ_EENS8_21DefaultRefDerefTraitsISJ_EEEENSG_INSI_15ValidationErrorENSK_ISP_EENSM_ISP_EEEENSG_INSI_13InternalErrorENSK_IST_EENSM_IST_EEEEEEEEEEEEEN3__0clINSE_INSF_IJNSB_16OutOfMemoryErrorENSB_15ValidationErrorENSB_13InternalErrorEEEEEEEEDabT_EUlOS15_E_JZZNSC_13popErrorScopeES12_ENS14_IS19_EES1A_bS1B_EUlOS16_E_ZZNSC_13popErrorScopeES12_ENS14_IS19_EES1A_bS1B_EUlOS17_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJS15_S16_S17_EEEEEEDcS1B_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 40);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 8) = v6;
  v9 = v5;
  v10 = 2;
  v11 = 1;
  v7 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, v4, &v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E34E4AA8[v10])(&v12, &v9);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::PopErrorScope &&,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4AE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::PopErrorScope &&,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4AE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::PopErrorScope &&,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4B10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4B10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char v3;
  uint64_t result;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  char v8[8];
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  char v13[8];
  int v14;
  char v15;
  char v16;
  uint64_t *v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t **v23;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>>((uint64_t)v8, a2);
  if (!v12)
    return IPC::Connection::cancelReply<Messages::RemoteDevice::PopErrorScope,WebKit::WebGPU::RemoteDeviceProxy::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(v2);
  v3 = v8[0];
  v13[0] = 0;
  v15 = 0;
  if (v11)
  {
    v14 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)&v9);
    v15 = 1;
    v16 = v3;
    v17 = v2;
    v18 = &v16;
    v19 = v2;
    v20 = &v16;
    v21 = v2;
    v22 = &v16;
    if (v14 == -1)
    {
      v7 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit6WebGPU17RemoteDeviceProxy27resolveUncapturedErrorEventEONS8_17CompletionHandlerIFvbONS_8optionalINS_7variantIJNS8_3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISJ_EENS8_21DefaultRefDerefTraitsISJ_EEEENSG_INSI_15ValidationErrorENSK_ISP_EENSM_ISP_EEEENSG_INSI_13InternalErrorENSK_IST_EENSM_IST_EEEEEEEEEEEEEN3__0clINSE_INSF_IJNSB_16OutOfMemoryErrorENSB_15ValidationErrorENSB_13InternalErrorEEEEEEEEDabT_EUlOS15_E_JZZNSC_27resolveUncapturedErrorEventES12_ENS14_IS19_EES1A_bS1B_EUlOS16_E_ZZNSC_27resolveUncapturedErrorEventES12_ENS14_IS19_EES1A_bS1B_EUlOS17_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJS15_S16_S17_EEEEEEDcS1B_DpT0_(v7);
    }
    v23 = &v17;
    result = ((uint64_t (*)(uint64_t ***, char *))off_1E34E4B28[v14])(&v23, v13);
  }
  else
  {
    v5 = v8[0] != 0;
    LOBYTE(v17) = 0;
    LOBYTE(v19) = 0;
    v6 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _BOOL8, uint64_t **))(*(_QWORD *)v6 + 16))(v6, v5, &v17);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if ((_BYTE)v19 && (_DWORD)v18 != -1)
      result = ((uint64_t (*)(uint64_t ***, uint64_t **))off_1E34E4AA8[v18])(&v23, &v17);
  }
  if (v15 && v14 != -1)
    result = ((uint64_t (**)(uint64_t **, char *))off_1E34E4A90)[v14](&v17, v13);
  if (v12 && v11 && v10 != -1)
    return ((uint64_t (**)(uint64_t **, uint64_t *))off_1E34E4A90)[v10](&v17, &v9);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit6WebGPU17RemoteDeviceProxy27resolveUncapturedErrorEventEONS8_17CompletionHandlerIFvbONS_8optionalINS_7variantIJNS8_3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISJ_EENS8_21DefaultRefDerefTraitsISJ_EEEENSG_INSI_15ValidationErrorENSK_ISP_EENSM_ISP_EEEENSG_INSI_13InternalErrorENSK_IST_EENSM_IST_EEEEEEEEEEEEEN3__0clINSE_INSF_IJNSB_16OutOfMemoryErrorENSB_15ValidationErrorENSB_13InternalErrorEEEEEEEEDabT_EUlOS15_E_JZZNSC_27resolveUncapturedErrorEventES12_ENS14_IS19_EES1A_bS1B_EUlOS16_E_ZZNSC_27resolveUncapturedErrorEventES12_ENS14_IS19_EES1A_bS1B_EUlOS17_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJS15_S16_S17_EEEEEEDcS1B_DpT0_(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  int v7;
  char v8;
  char v9;

  v1 = **a1;
  v2 = *(unsigned __int8 *)(*a1)[1];
  v3 = (_DWORD *)WTF::fastMalloc((WTF *)4);
  *v3 = 1;
  v6 = v3;
  v7 = 0;
  v8 = 1;
  v4 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v4 + 16))(v4, v2, &v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v8)
  {
    if (v7 != -1)
      return ((uint64_t (*)(char *, _DWORD **))off_1E34E4AA8[v7])(&v9, &v6);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit6WebGPU17RemoteDeviceProxy27resolveUncapturedErrorEventEONS8_17CompletionHandlerIFvbONS_8optionalINS_7variantIJNS8_3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISJ_EENS8_21DefaultRefDerefTraitsISJ_EEEENSG_INSI_15ValidationErrorENSK_ISP_EENSM_ISP_EEEENSG_INSI_13InternalErrorENSK_IST_EENSM_IST_EEEEEEEEEEEEEN3__0clINSE_INSF_IJNSB_16OutOfMemoryErrorENSB_15ValidationErrorENSB_13InternalErrorEEEEEEEEDabT_EUlOS15_E_JZZNSC_27resolveUncapturedErrorEventES12_ENS14_IS19_EES1A_bS1B_EUlOS16_E_ZZNSC_27resolveUncapturedErrorEventES12_ENS14_IS19_EES1A_bS1B_EUlOS17_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJS15_S16_S17_EEEEEEDcS1B_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 16);
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 24);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 8) = v6;
  v9 = v5;
  v10 = 1;
  v11 = 1;
  v7 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, v4, &v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E34E4AA8[v10])(&v12, &v9);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit6WebGPU17RemoteDeviceProxy27resolveUncapturedErrorEventEONS8_17CompletionHandlerIFvbONS_8optionalINS_7variantIJNS8_3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISJ_EENS8_21DefaultRefDerefTraitsISJ_EEEENSG_INSI_15ValidationErrorENSK_ISP_EENSM_ISP_EEEENSG_INSI_13InternalErrorENSK_IST_EENSM_IST_EEEEEEEEEEEEEN3__0clINSE_INSF_IJNSB_16OutOfMemoryErrorENSB_15ValidationErrorENSB_13InternalErrorEEEEEEEEDabT_EUlOS15_E_JZZNSC_27resolveUncapturedErrorEventES12_ENS14_IS19_EES1A_bS1B_EUlOS16_E_ZZNSC_27resolveUncapturedErrorEventES12_ENS14_IS19_EES1A_bS1B_EUlOS17_E_EEEEEJONS0_6__baseILNS0_6_TraitE1EJS15_S16_S17_EEEEEEDcS1B_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  v3 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 40);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 8) = v6;
  v9 = v5;
  v10 = 2;
  v11 = 1;
  v7 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, v4, &v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v11)
  {
    if (v10 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E34E4AA8[v10])(&v12, &v9);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::ResolveUncapturedErrorEvent &&,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4B50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::ResolveUncapturedErrorEvent &&,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4B50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveUncapturedErrorEvent,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::ResolveUncapturedErrorEvent &&,WebKit::WebGPU::RemoteDeviceProxy::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4B78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4B78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &>(WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a2 || (v4 = *a2) == 0)
  {
LABEL_8:
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        v17 = *a2;
        v18 = a2[1];
        v19 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v19)
        {
          if (v18)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
        }
      }
    }
    goto LABEL_7;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_7:
    v10 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
        v14 = *a2;
        v15 = a2[1];
        v16 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v16)
        {
          if (v15)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
        }
      }
    }
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::ResolveDeviceLostPromise &&,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4BA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::ResolveDeviceLostPromise &&,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4BA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteDevice::ResolveDeviceLostPromise,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteDevice::ResolveDeviceLostPromise &&,WebKit::WebGPU::RemoteDeviceProxy::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteGPUProxy::initializeIPC(WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *result;
  unsigned int v12;
  unsigned int v13;
  WebKit::WebProcess *v14;
  uint64_t *v15[3];
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 8);
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::ensureGPUProcessConnection(v3);
  v5 = *(_QWORD *)(v2 + 104);
  v6 = *(uint64_t **)(a1 + 24);
  v16 = **(_QWORD **)(a1 + 16);
  v17 = v5;
  v7 = *(_QWORD *)(v4 + 24);
  v15[0] = &v17;
  v15[1] = &v16;
  v15[2] = v6;
  IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateGPU>(v7, v15, 0, 1, 0);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
  v9 = *(unsigned int **)(v4 + 8);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  result = *(unsigned int **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = v9;
  if (result)
  {
    do
    {
      v12 = __ldaxr(result);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, result));
    if (!v13)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteGPUProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34E4BF0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPUProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34E4BF0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::RemoteGPUProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = *(_QWORD *)(v2 + 16);
      if (__ldaxr((unsigned __int8 *)v4))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v4))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEABB3C](v4);
LABEL_8:
      ++*(_QWORD *)(v4 + 8);
      v6 = __ldxr((unsigned __int8 *)v4);
      if (v6 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
      v7 = *((_QWORD *)v3 + 1);
      v8 = *(_QWORD *)(v2 + 24);
      v10 = &v11;
      v11 = v7;
      IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseGPU>(v8, &v10, 0, 1, 0);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), v9);
    }
  }
  return result;
}

uint64_t *IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteGPUProxy::WasCreated>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;

  IPC::Connection::waitForMessage((unsigned __int8 ***)a1, 0x36Au, a2, a3, (uint64_t)&v11, a4);
  v5 = v12;
  if (!v12)
  {
    v7 = atomic_load((unsigned __int8 *)(a1 + 33));
    v5 = v12;
    if ((v7 & 1) != 0)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1, v11);
      v6 = 0;
      v5 = v12;
    }
    else
    {
      v6 = 1;
    }
    if (v5 == -1)
      return (uint64_t *)v6;
    goto LABEL_8;
  }
  if (v12 == 1)
  {
    v6 = v11;
LABEL_8:
    ((void (*)(char *, uint64_t *))off_1E34E4C08[v5])(&v13, &v11);
    return (uint64_t *)v6;
  }
  v9 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return IPC::Decoder::operator>><std::tuple<std::optional<WebKit::RemoteGPURequestAdapterResponse>>>(v9, v10);
}

uint64_t *IPC::Decoder::operator>><std::tuple<std::optional<WebKit::RemoteGPURequestAdapterResponse>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  void *v12;
  unint64_t v13;
  int v14;
  void *v15;
  int v16;
  void *v17;
  char v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int128 v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  char v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  char v63;
  char v64;

  v7 = a1[1];
  v8 = (char *)*a1;
  v9 = a1[2] - *a1;
  if (v7 <= v9)
  {
    v27 = 0;
    v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v28 = *a1;
        v27 = a1[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
    goto LABEL_42;
  }
  v10 = &v8[v9];
  a1[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    v27 = v7;
    v28 = 0;
LABEL_42:
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
        v8 = (char *)*a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_43;
  }
  v11 = *v10;
  if (v11 < 2)
  {
    if (v11)
    {
      IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::decode(a1, (uint64_t)&v37);
      if (!v49)
      {
        v12 = (void *)*a1;
        v32 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v33 = a1[3];
        if (!v33 || !v32 || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v33 + 16))(v33, v12), !v49))
        {
          std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v12);
          goto LABEL_48;
        }
      }
      v4 = *((_QWORD *)&v37 + 1);
      v13 = v37;
      v37 = 0u;
      v3 = v38;
      v2 = HIDWORD(v38);
      v38 = 0;
      v59 = v45;
      v60 = v46;
      v61 = v47;
      v62 = v48;
      v55 = v41;
      v56 = v42;
      v57 = v43;
      v58 = v44;
      v53 = v39;
      v54 = v40;
      v14 = 1;
      v63 = 1;
      v64 = 1;
      std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v12);
      v51 = 0u;
      v37 = __PAIR128__(v4, v13);
      v52 = 0;
      v38 = __PAIR64__(v2, v3);
      v45 = v59;
      v46 = v60;
      v47 = v61;
      v48 = v62;
      v41 = v55;
      v42 = v56;
      v43 = v57;
      v44 = v58;
      v39 = v53;
      v40 = v54;
      v49 = 1;
    }
    else
    {
      LOBYTE(v37) = 0;
      v49 = 0;
      LOBYTE(v51) = 0;
      v63 = 0;
      v64 = 1;
      std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v8);
      v14 = 0;
      LOBYTE(v37) = 0;
      v49 = 0;
    }
    v16 = 1;
    v50 = 1;
    std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v15);
    v18 = 0;
    goto LABEL_9;
  }
LABEL_43:
  *a1 = 0;
  a1[1] = 0;
  v31 = a1[3];
  if (v31 && v7)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v31 + 16))(v31, v8);
LABEL_48:
  v34 = *a1;
  v35 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v36 = a1[3];
  if (!v36)
  {
    v35 = 0;
LABEL_50:
    v17 = 0;
    goto LABEL_51;
  }
  if (!v35)
    goto LABEL_50;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34);
  v17 = (void *)*a1;
  v35 = a1[1];
  v36 = a1[3];
LABEL_51:
  LOBYTE(v37) = 0;
  v50 = 0;
  *a1 = 0;
  a1[1] = 0;
  if (v36 && v35)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v36 + 16))(v36, v17);
  v14 = 0;
  v16 = 0;
  v18 = 1;
LABEL_9:
  if (*(unsigned __int8 *)(a2 + 184) != v16)
  {
    if (*(_BYTE *)(a2 + 184))
    {
      std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100](a2, v17);
      *(_BYTE *)(a2 + 184) = 0;
      if ((v18 & 1) != 0)
        return a1;
      goto LABEL_36;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 176) = 0;
    if (v14)
    {
      v21 = v37;
      v37 = 0uLL;
      *(_QWORD *)a2 = v21;
      *(_QWORD *)(a2 + 8) = v4;
      v38 = 0;
      *(_DWORD *)(a2 + 16) = v3;
      *(_DWORD *)(a2 + 20) = v2;
      *(_OWORD *)(a2 + 120) = v45;
      *(_OWORD *)(a2 + 136) = v46;
      *(_OWORD *)(a2 + 152) = v47;
      *(_BYTE *)(a2 + 168) = v48;
      *(_OWORD *)(a2 + 56) = v41;
      *(_OWORD *)(a2 + 72) = v42;
      *(_OWORD *)(a2 + 88) = v43;
      *(_OWORD *)(a2 + 104) = v44;
      *(_OWORD *)(a2 + 24) = v39;
      *(_OWORD *)(a2 + 40) = v40;
      *(_BYTE *)(a2 + 176) = 1;
    }
    *(_BYTE *)(a2 + 184) = 1;
    if ((v18 & 1) != 0)
      return a1;
    goto LABEL_36;
  }
  if (!*(_BYTE *)(a2 + 184))
    return a1;
  if (*(unsigned __int8 *)(a2 + 176) != v14)
  {
    if (!*(_BYTE *)(a2 + 176))
    {
      v23 = v37;
      v37 = 0uLL;
      *(_QWORD *)a2 = v23;
      *(_QWORD *)(a2 + 8) = v4;
      v38 = 0;
      *(_DWORD *)(a2 + 16) = v3;
      *(_DWORD *)(a2 + 20) = v2;
      *(_OWORD *)(a2 + 120) = v45;
      *(_OWORD *)(a2 + 136) = v46;
      *(_OWORD *)(a2 + 152) = v47;
      *(_BYTE *)(a2 + 168) = v48;
      *(_OWORD *)(a2 + 56) = v41;
      *(_OWORD *)(a2 + 72) = v42;
      *(_OWORD *)(a2 + 88) = v43;
      *(_OWORD *)(a2 + 104) = v44;
      *(_OWORD *)(a2 + 24) = v39;
      *(_OWORD *)(a2 + 40) = v40;
      *(_BYTE *)(a2 + 176) = 1;
      if ((v18 & 1) != 0)
        return a1;
      goto LABEL_36;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 8, v17);
    v22 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v22 -= 2;
    }
    *(_BYTE *)(a2 + 176) = 0;
    if ((v18 & 1) != 0)
      return a1;
LABEL_36:
    std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v17);
    return a1;
  }
  if (*(_BYTE *)(a2 + 176))
  {
    v19 = v37;
    *(_QWORD *)&v37 = 0;
    v20 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v24 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v24)
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a2 + 8), (WTF::StringImpl *)(*(_QWORD *)(a2 + 8) + 8 * v24));
    v25 = *(WTF **)(a2 + 8);
    if (v25)
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v25, v17);
    }
    *((_QWORD *)&v37 + 1) = 0;
    v38 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 16) = v3;
    *(_DWORD *)(a2 + 20) = v2;
    *(_OWORD *)(a2 + 120) = v45;
    *(_OWORD *)(a2 + 136) = v46;
    *(_OWORD *)(a2 + 152) = v47;
    *(_BYTE *)(a2 + 168) = v48;
    *(_OWORD *)(a2 + 56) = v41;
    *(_OWORD *)(a2 + 72) = v42;
    *(_OWORD *)(a2 + 88) = v43;
    *(_OWORD *)(a2 + 104) = v44;
    *(_OWORD *)(a2 + 24) = v39;
    *(_OWORD *)(a2 + 40) = v40;
  }
  if ((v18 & 1) == 0)
    goto LABEL_36;
  return a1;
}

__n128 std::__optional_copy_assign_base<WebKit::RemoteGPURequestAdapterResponse,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*((_BYTE *)a2 + 176))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = v2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(a1 + 8) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(a1 + 16) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *(_DWORD *)(a1 + 20) = v3;
    v4 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 24) = v4;
    v5 = *(_OWORD *)(a2 + 7);
    v6 = *(_OWORD *)(a2 + 9);
    v7 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 72) = v6;
    *(_OWORD *)(a1 + 56) = v5;
    result = *(__n128 *)(a2 + 15);
    v9 = *(_OWORD *)(a2 + 17);
    v10 = *(_OWORD *)(a2 + 19);
    *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
    *(_OWORD *)(a1 + 152) = v10;
    *(_OWORD *)(a1 + 136) = v9;
    *(__n128 *)(a1 + 120) = result;
    *(_BYTE *)(a1 + 176) = 1;
  }
  return result;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ConnectionSendSyncResult(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  char v31;

  v4 = *a2;
  *a2 = 0;
  LOBYTE(v19) = 0;
  v31 = 0;
  v5 = *((_BYTE *)a3 + 176);
  if (v5)
  {
    v7 = *(__int128 *)((char *)a3 + 136);
    v27 = *(__int128 *)((char *)a3 + 120);
    v6 = v27;
    v28 = v7;
    v29 = *(__int128 *)((char *)a3 + 152);
    v30 = *((_BYTE *)a3 + 168);
    v9 = *(__int128 *)((char *)a3 + 72);
    v23 = *(__int128 *)((char *)a3 + 56);
    v8 = v23;
    v24 = v9;
    v10 = *(__int128 *)((char *)a3 + 104);
    v25 = *(__int128 *)((char *)a3 + 88);
    v26 = v10;
    v11 = *(__int128 *)((char *)a3 + 40);
    v21 = *(__int128 *)((char *)a3 + 24);
    v22 = v11;
    v5 = 1;
    v31 = 1;
    v19 = 0u;
    v12 = *a3;
    *a3 = 0u;
    *(_OWORD *)(a1 + 8) = v12;
    v20 = 0;
    *(_QWORD *)&v12 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)(a1 + 24) = v12;
    v13 = v28;
    *(_OWORD *)(a1 + 128) = v6;
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 160) = v29;
    *(_BYTE *)(a1 + 176) = v30;
    v14 = v24;
    v15 = v25;
    v16 = v26;
    *(_OWORD *)(a1 + 64) = v8;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v15;
    *(_OWORD *)(a1 + 112) = v16;
    v17 = v22;
    *(_OWORD *)(a1 + 32) = v21;
    *(_OWORD *)(a1 + 48) = v17;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
  }
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 184) = v5;
  *(_DWORD *)(a1 + 192) = 0;
  std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGPU::RequestAdapter>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 192);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E4800[v4])(&v7, result);
  *(_DWORD *)(v3 + 192) = -1;
  v5 = *(unsigned int *)(a2 + 192);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E4C18[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 192) = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages9RemoteGPU14RequestAdapterEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  double result;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  *(_QWORD *)&result = std::__optional_copy_assign_base<WebKit::RemoteGPURequestAdapterResponse,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)(a2 + 1), a3 + 1).n128_u64[0];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages9RemoteGPU14RequestAdapterEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemotePresentationContext::Present,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;

  if (*(_QWORD *)(a1 + 48) == a4)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v21 = v53;
  v20 = v54;
  v22 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v53;
  if (v22 >= v53)
  {
    v24 = v23 + 2;
    if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v24 <= v54)
    {
      *(_WORD *)(v53 + v23) = 2822;
      goto LABEL_31;
    }
    v20 = 0;
  }
  v24 = 0;
LABEL_31:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      return 17;
    *v26 = a4;
  }
  if (!v20)
    return 17;
  v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(a1 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(a1 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(a1 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(a1 + 108) = v35;
    if (v35 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a4;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v7 = v54;
  v8 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v9 = v8 - v53;
  if (v8 < v53)
  {
    v10 = 0;
    if (v54)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v54)
      goto LABEL_62;
    *(_WORD *)(v53 + v9) = 1238;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(a1 + 64);
      v13 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(a1 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(a1 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v19 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v19;
    }
  }
  if (!v55)
  {
    __break(1u);
LABEL_81:
    v38 = 0;
    goto LABEL_68;
  }
LABEL_62:
  v36 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v37 = v36 - v53;
  if (v36 < v53)
    goto LABEL_81;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v54)
    goto LABEL_81;
  *(_WORD *)(v53 + v37) = 2821;
LABEL_68:
  v40 = *(_QWORD *)(a1 + 64);
  v41 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(a1 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(a1 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
  v45 = v52;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1238;
  *(_QWORD *)(v46 + 8) = a4;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v56 = (IPC::Encoder *)v46;
  v19 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v56, 1, 0);
  v48 = v56;
  v56 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
  return v19;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4C38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4C38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteQueue::OnSubmittedWorkDone &&,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4C60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteQueue::OnSubmittedWorkDone &&,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4C60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::OnSubmittedWorkDone,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteQueue::OnSubmittedWorkDone &&,WebKit::WebGPU::RemoteQueueProxy::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34E4C88;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4C88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  BOOL v5;

  v2 = result;
  if (a2 && *a2)
  {
    result = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
    if (*(_QWORD *)(v2 + 8))
      v3 = 1;
    else
      v3 = *(_BYTE *)(v2 + 16) == 0;
    v4 = v3;
    if ((unsigned __int16)result >= 0x100u)
    {
      if ((v4 & 1) == 0)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x197563938);
      }
    }
    else if ((v4 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  else
  {
    if (*(_QWORD *)(result + 8))
      v5 = 1;
    else
      v5 = *(_BYTE *)(result + 16) == 0;
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x19756396CLL);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteQueue::WriteBuffer &&,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4CB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteQueue::WriteBuffer &&,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4CB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteBuffer,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteQueue::WriteBuffer &&,WebKit::WebGPU::RemoteQueueProxy::writeBuffer(WebCore::WebGPU::Buffer const&,unsigned long long,std::span<unsigned char const,18446744073709551615ul>,unsigned long long,std::optional<unsigned long long>)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34E4CD8;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4CD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &>(WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  BOOL v5;

  v2 = result;
  if (a2 && *a2)
  {
    result = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
    if (*(_QWORD *)(v2 + 8))
      v3 = 1;
    else
      v3 = *(_BYTE *)(v2 + 16) == 0;
    v4 = v3;
    if ((unsigned __int16)result >= 0x100u)
    {
      if ((v4 & 1) == 0)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x197563B34);
      }
    }
    else if ((v4 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  else
  {
    if (*(_QWORD *)(result + 8))
      v5 = 1;
    else
      v5 = *(_BYTE *)(result + 16) == 0;
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x197563B68);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteQueue::WriteTexture &&,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E4D00;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteQueue::WriteTexture &&,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E4D00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteQueue::WriteTexture,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteQueue::WriteTexture &&,WebKit::WebGPU::RemoteQueueProxy::writeTexture(WebCore::WebGPU::ImageCopyTexture const&,std::span<unsigned char const,18446744073709551615ul>,WebCore::WebGPU::ImageDataLayout const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0 &,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;

  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, *(_QWORD **)a2);
  v4 = a1[2];
  if (v4 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v4) = **(_BYTE **)(a2 + 8);
    a1[2] = v4 + 1;
  }
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, *(_QWORD *)(a2 + 16));
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, *(_QWORD *)(a2 + 24));
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char *result;
  unint64_t v12;
  size_t v13;
  void *v14;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)a2);
  v4 = **(_BYTE **)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 >= v5 + 1)
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
LABEL_3:
    bzero(&v8[v9], v5 - v9);
    *(_QWORD *)(a1 + 544) = v6;
    v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)a1, *(uint64_t **)(a2 + 16));
    return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)a1, *(uint64_t **)(a2 + 24));
  }
  v12 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v13 = v12;
    v12 *= 2;
  }
  while (v13 < v6);
  result = (char *)mmap(0, v13, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v8 = result;
    memcpy(result, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v13;
    v9 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = **(_DWORD **)a2;
      a1[2] = v10;
    }
  }
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, *(_QWORD *)(a2 + 8));
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, *(_QWORD *)(a2 + 16));
}

char *IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(uint64_t a1, int **a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  char *result;
  unint64_t v12;
  size_t v13;
  void *v14;

  v4 = **a2;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 >= v6 + 4)
  {
    v9 = *(char **)(a1 + 528);
LABEL_3:
    bzero(&v9[v5], v6 - v5);
    *(_QWORD *)(a1 + 544) = v7;
    v10 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v6);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)a1, (uint64_t *)a2[1]);
    return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)a1, (uint64_t *)a2[2]);
  }
  v12 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v13 = v12;
    v12 *= 2;
  }
  while (v13 < v7);
  result = (char *)mmap(0, v13, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v13;
    v5 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = **(_DWORD **)a2;
      a1[2] = v10;
    }
  }
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, *(_QWORD **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, *(_QWORD *)(a2 + 16));
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, *(_QWORD *)(a2 + 24));
}

char *IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(uint64_t a1, int **a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  char *result;
  unint64_t v12;
  size_t v13;
  void *v14;

  v4 = **a2;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 >= v6 + 4)
  {
    v9 = *(char **)(a1 + 528);
LABEL_3:
    bzero(&v9[v5], v6 - v5);
    *(_QWORD *)(a1 + 544) = v7;
    v10 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v6);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, (uint64_t *)a2[1]);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)a1, (uint64_t *)a2[2]);
    return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)a1, (uint64_t *)a2[3]);
  }
  v12 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v13 = v12;
    v12 *= 2;
  }
  while (v13 < v7);
  result = (char *)mmap(0, v13, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v13;
    v5 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

char *IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > *(_QWORD *)(a1 + 8))
    {
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + v9) = **(_DWORD **)a2;
      *(_QWORD *)(a1 + 16) = v10;
    }
  }
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>((char *)a1, *(_QWORD *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>((char *)a1, *(_QWORD *)(a2 + 16));
  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>((char *)a1, *(_QWORD *)(a2 + 24));
}

void IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(uint64_t a1, int **a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = **a2;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 >= v6 + 4)
  {
    v9 = *(char **)(a1 + 528);
LABEL_3:
    bzero(&v9[v5], v6 - v5);
    *(_QWORD *)(a1 + 544) = v7;
    v10 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v6);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)a1, a2[1]);
    IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)a1, a2[2]);
    IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)a1, a2[3]);
    return;
  }
  v11 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v7);
  v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (v13 != (char *)-1)
  {
    v9 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v12;
    v5 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
}

char *IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > *(_QWORD *)(a1 + 8))
    {
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + v9) = **(_DWORD **)a2;
      *(_QWORD *)(a1 + 16) = v10;
    }
  }
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>((char *)a1, *(_QWORD *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>((char *)a1, *(_QWORD *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<int> const&>((_QWORD *)a1, *(_QWORD *)(a2 + 24));
  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>((char *)a1, *(_QWORD *)(a2 + 32));
}

_QWORD *IPC::ArgumentCoder<std::optional<int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<int> const&>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 4))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::StreamConnectionEncoder::operator<<<int const&>(result, (_DWORD *)a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 4))
      return IPC::StreamConnectionEncoder::operator<<<int const&>(result, (_DWORD *)a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_QWORD *)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(uint64_t a1, int **a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = **a2;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 >= v6 + 4)
  {
    v9 = *(char **)(a1 + 528);
LABEL_3:
    bzero(&v9[v5], v6 - v5);
    *(_QWORD *)(a1 + 544) = v7;
    v10 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v6);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)a1, a2[1]);
    IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)a1, a2[2]);
    IPC::ArgumentCoder<std::optional<int>,void>::encode<IPC::Encoder,std::optional<int> const&>((IPC::Encoder *)a1, a2[3]);
    IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)a1, a2[4]);
    return;
  }
  v11 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v7);
  v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (v13 != (char *)-1)
  {
    v9 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v12;
    v5 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
}

void WebKit::WebGPU::RemoteRenderBundleProxy::~RemoteRenderBundleProxy(WebKit::WebGPU::RemoteRenderBundleProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 1267;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1267;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E4FE8;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteRenderBundleProxy::~RemoteRenderBundleProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderBundleProxy::setLabelInternal(WebKit::WebGPU::RemoteRenderBundleProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1268;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1268;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteRenderPassEncoderProxy::~RemoteRenderPassEncoderProxy(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 1270;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1270;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E5010;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteRenderPassEncoderProxy::~RemoteRenderPassEncoderProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::setPipeline(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, const WebCore::WebGPU::RenderPipeline *a2)
{
  unsigned __int8 ***result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unsigned int v51;
  unsigned __int8 ***v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  IPC::Encoder *v57;

  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::RenderPipeline *))(**((_QWORD **)this + 4) + 176))(*((_QWORD *)this + 4), a2);
  v52 = result;
  if (result)
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    v7 = v6 + 30.0;
    if (*(_QWORD *)(v5 + 48) == v4)
    {
      while (1)
      {
        result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v54, v7);
        if (!v56)
          return result;
        v9 = v54;
        v8 = v55;
        v10 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v11 = v10 - v54;
        if (v10 >= v54)
        {
          v12 = v11 + 2;
          if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v55)
          {
            *(_WORD *)(v54 + v11) = 1285;
            goto LABEL_10;
          }
          v8 = 0;
        }
        v12 = 0;
LABEL_10:
        v14 = (_QWORD *)((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v14 >= v9 + v12)
        {
          v12 = (unint64_t)v14 - v9 + 8;
          if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFF7 || v12 > v8)
            goto LABEL_31;
          *v14 = v52;
        }
        if (v8)
        {
          v16 = *(_QWORD *)(v5 + 64);
          v17 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v18 = *(_QWORD *)(v5 + 56);
          if (v17 + 16 >= v18)
            v17 = 0;
          if (v12 <= 0x10)
            v12 = 16;
          v19 = v17 + v12;
          if (v18 <= v19)
            v20 = 0;
          else
            v20 = v19;
          *(_QWORD *)(v5 + 72) = v20;
          v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v20, v21));
          if (v22 == 0x80000000 || *(_DWORD *)(v5 + 108))
          {
            if (*(_BYTE *)(v5 + 96))
              result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
            *(_DWORD *)(v5 + 108) = 0;
          }
          return result;
        }
LABEL_31:
        if (v56)
        {
          v23 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v24 = v23 - v54;
          if (v23 < v54)
          {
            v25 = 0;
          }
          else
          {
            v25 = 0;
            if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v55)
            {
              *(_WORD *)(v54 + v24) = 2821;
              v25 = v24 + 2;
            }
          }
          v26 = *(_QWORD *)(v5 + 64);
          v27 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v28 = *(_QWORD *)(v5 + 56);
          if (v27 + 16 >= v28)
            v27 = 0;
          if (v25 <= 0x10)
            v25 = 16;
          v29 = v27 + v25;
          if (v28 <= v29)
            v29 = 0;
          *(_QWORD *)(v5 + 72) = v29;
          v30 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
          do
            __ldaxr(v30);
          while (__stlxr(v29, v30));
          *(_DWORD *)(v5 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, (uint64_t **)(v5 + 8));
          v31 = v53;
          v32 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v32 = 1285;
          *(_QWORD *)(v32 + 8) = v4;
          *(_QWORD *)(v32 + 528) = v32 + 16;
          *(_QWORD *)(v32 + 536) = v32 + 16;
          *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v32 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
          v57 = (IPC::Encoder *)v32;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v32, (uint64_t *)&v52);
          IPC::Connection::sendMessageImpl((uint64_t)v31, (uint64_t *)&v57, 1, 0);
          v34 = v57;
          v57 = 0;
          if (v34)
          {
            IPC::Encoder::~Encoder(v34, v33);
            WTF::fastFree(v35, v36);
          }
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v53);
        }
        __break(1u);
LABEL_83:
        v37 = 0;
LABEL_84:
        v40 = 0;
LABEL_55:
        v42 = (_QWORD *)((v9 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v42 >= v9 + v40)
        {
          v40 = (unint64_t)v42 - v9 + 8;
          if ((unint64_t)v42 - v9 > 0xFFFFFFFFFFFFFFF7 || v40 > v37)
            return result;
          *v42 = v4;
        }
        if (!v37)
          return result;
        v44 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v45 = *(_QWORD *)(v5 + 56);
        if (v44 + 16 >= v45)
          v44 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v46 = v44 + v40;
        if (v45 <= v46)
          v46 = 0;
        *(_QWORD *)(v5 + 72) = v46;
        v47 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v46, v47));
        v49 = *(_DWORD *)(v5 + 108);
        if (v48 == 0x80000000 || v49 != 0)
        {
          v51 = v49 + 1;
          *(_DWORD *)(v5 + 108) = v51;
          if (v51 >= *(_DWORD *)(v5 + 104))
          {
            if (*(_BYTE *)(v5 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
            *(_DWORD *)(v5 + 108) = 0;
          }
        }
        *(_QWORD *)(v5 + 48) = v4;
      }
    }
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v54, v6 + 30.0);
    if (v56)
    {
      v9 = v54;
      v37 = v55;
      v38 = (v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v39 = v38 - v54;
      if (v38 < v54)
        goto LABEL_84;
      v40 = v39 + 2;
      if (v39 > 0xFFFFFFFFFFFFFFFDLL || v40 > v55)
        goto LABEL_83;
      *(_WORD *)(v54 + v39) = 2822;
      goto LABEL_55;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::setIndexBuffer(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 ***result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unsigned int v55;
  _QWORD v56[4];
  unsigned __int8 ***v57;
  char v58;
  _QWORD v59[2];
  _QWORD v60[2];
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;

  v60[0] = a4;
  v60[1] = a5;
  v59[0] = a6;
  v59[1] = a7;
  v58 = a3;
  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  v57 = result;
  if (result)
  {
    v56[0] = &v57;
    v56[1] = &v58;
    v56[2] = v60;
    v56[3] = v59;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 176) + 96) + 96);
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    v12 = v11 + 30.0;
    if (*(_QWORD *)(v10 + 48) == v9)
    {
      while (1)
      {
        result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v62, v12);
        if (!v64)
          break;
        v65 = v62;
        v66 = v63;
        v67 = 0;
        v13 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v14 = v13 >= v62;
        v15 = v13 - v62;
        if (v14)
        {
          if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v63)
          {
            v66 = 0;
          }
          else
          {
            *(_WORD *)(v62 + v15) = 1283;
            v67 = v15 + 2;
          }
        }
        result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(&v65, (uint64_t)v56);
        if (v66)
        {
          v18 = v67;
          v19 = *(_QWORD *)(v10 + 64);
          v20 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v21 = *(_QWORD *)(v10 + 56);
          if (v20 + 16 >= v21)
            v20 = 0;
          if (v67 <= 0x10)
            v18 = 16;
          v22 = v20 + v18;
          if (v21 <= v22)
            v23 = 0;
          else
            v23 = v22;
          *(_QWORD *)(v10 + 72) = v23;
          v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v23, v24));
          if (v25 == 0x80000000 || *(_DWORD *)(v10 + 108))
          {
            if (*(_BYTE *)(v10 + 96))
              result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
            *(_DWORD *)(v10 + 108) = 0;
          }
          return result;
        }
        v26 = v64;
        if (v64)
        {
          v27 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v28 = v27 - v62;
          if (v27 < v62)
          {
            v29 = 0;
          }
          else
          {
            v29 = 0;
            if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v63)
            {
              *(_WORD *)(v62 + v28) = 2821;
              v29 = v28 + 2;
            }
          }
          v30 = *(_QWORD *)(v10 + 64);
          v31 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v32 = *(_QWORD *)(v10 + 56);
          if (v31 + 16 >= v32)
            v31 = 0;
          if (v29 <= 0x10)
            v29 = 16;
          v33 = v31 + v29;
          if (v32 <= v33)
            v33 = 0;
          *(_QWORD *)(v10 + 72) = v33;
          v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
          do
            __ldaxr(v34);
          while (__stlxr(v33, v34));
          *(_DWORD *)(v10 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(v10 + 8));
          v35 = v61;
          v36 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v36 = 1283;
          *(_QWORD *)(v36 + 8) = v9;
          *(_QWORD *)(v36 + 528) = v36 + 16;
          *(_QWORD *)(v36 + 536) = v36 + 16;
          *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v36 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
          v65 = v36;
          IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::WebGPU::IndexFormat const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(v36, (uint64_t)v56);
          IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)&v65, 1, 0);
          v38 = (IPC::Encoder *)v65;
          v65 = 0;
          if (v38)
          {
            IPC::Encoder::~Encoder(v38, v37);
            WTF::fastFree(v39, v40);
          }
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        }
        __break(1u);
LABEL_74:
        v44 = v17;
LABEL_48:
        v45 = (_QWORD *)((v26 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v45 >= v26 + v44)
        {
          v46 = (char *)v45 - v26;
          if ((unint64_t)v45 - v26 > 0xFFFFFFFFFFFFFFF7)
            return result;
          v44 = (unint64_t)(v46 + 8);
          if ((unint64_t)(v46 + 8) > v17)
            return result;
          *v45 = v9;
        }
        if (!v17)
          return result;
        v47 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v48 = *(_QWORD *)(v10 + 56);
        if (v47 + 16 >= v48)
          v47 = 0;
        if (v44 <= 0x10)
          v44 = 16;
        v49 = v47 + v44;
        if (v48 <= v49)
          v50 = 0;
        else
          v50 = v49;
        *(_QWORD *)(v10 + 72) = v50;
        v51 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 16) + 128);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v50, v51));
        v53 = *(_DWORD *)(v10 + 108);
        if (v52 == 0x80000000 || v53 != 0)
        {
          v55 = v53 + 1;
          *(_DWORD *)(v10 + 108) = v55;
          if (v55 >= *(_DWORD *)(v10 + 104))
          {
            if (*(_BYTE *)(v10 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
            *(_DWORD *)(v10 + 108) = 0;
          }
        }
        *(_QWORD *)(v10 + 48) = v9;
      }
    }
    else
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v65, v11 + 30.0);
      if ((_BYTE)v67)
      {
        v26 = v65;
        v41 = v66;
        v42 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = v42 - v65;
        if (v42 < v65)
        {
          v44 = 0;
          v17 = v66;
        }
        else
        {
          v17 = 0;
          if (v43 > 0xFFFFFFFFFFFFFFFDLL)
            goto LABEL_74;
          v44 = 0;
          if (v43 + 2 <= v66)
          {
            *(_WORD *)(v65 + v43) = 2822;
            v17 = v41;
            v44 = v43 + 2;
          }
        }
        goto LABEL_48;
      }
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::setVertexBuffer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 ***result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  int *v47;
  WTF *v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  int *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  int64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  int *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  char *v82;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  int v90;
  unsigned int v92;
  unsigned int v93;
  int *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  unsigned __int8 ***v98;
  int v99;
  _QWORD v100[2];
  _QWORD v101[2];
  uint64_t *v102;
  int *v103;
  _QWORD *v104;
  _QWORD *v105;
  int *v106;
  unint64_t v107;
  unint64_t v108;

  v101[0] = a4;
  v101[1] = a5;
  v100[0] = a6;
  v100[1] = a7;
  v99 = a2;
  if (a3)
  {
    result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a3);
    v98 = result;
    if (!result)
      return result;
    v94 = &v99;
    v95 = &v98;
    v96 = v101;
    v97 = v100;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 176) + 96) + 96);
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    v12 = v11 + 30.0;
    if (*(_QWORD *)(v10 + 48) == v9)
    {
LABEL_4:
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v103, v12);
      if (!(_BYTE)v105)
        return result;
      v106 = v103;
      v107 = (unint64_t)v104;
      v108 = 0;
      v13 = ((unint64_t)v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = v13 >= (unint64_t)v103;
      v15 = v13 - (_QWORD)v103;
      if (v14)
      {
        if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > (unint64_t)v104)
          goto LABEL_138;
        *(_WORD *)((char *)v103 + v15) = 1288;
        v108 = v15 + 2;
      }
      while (1)
      {
        result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(&v106, (uint64_t)&v94);
        if (v107)
        {
          v17 = v108;
          v18 = *(_QWORD *)(v10 + 64);
          v19 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v20 = *(_QWORD *)(v10 + 56);
          if (v19 + 16 >= v20)
            v19 = 0;
          if (v108 <= 0x10)
            v17 = 16;
          v21 = v19 + v17;
          if (v20 <= v21)
            v22 = 0;
          else
            v22 = v21;
          *(_QWORD *)(v10 + 72) = v22;
          v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v22, v23));
          goto LABEL_40;
        }
        if ((_BYTE)v105)
          break;
LABEL_137:
        __break(1u);
LABEL_138:
        v107 = 0;
      }
      v36 = ((unint64_t)v103 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v103;
      if (v36 < (unint64_t)v103)
      {
        v38 = 0;
      }
      else
      {
        v38 = 0;
        if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v37 + 2 <= (unint64_t)v104)
        {
          *(_WORD *)((char *)v103 + v37) = 2821;
          v38 = v37 + 2;
        }
      }
      v39 = *(_QWORD *)(v10 + 64);
      v40 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v41 = *(_QWORD *)(v10 + 56);
      if (v40 + 16 >= v41)
        v40 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v42 = v40 + v38;
      if (v41 <= v42)
        v42 = 0;
      *(_QWORD *)(v10 + 72) = v42;
      v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
      do
        __ldaxr(v43);
      while (__stlxr(v42, v43));
      *(_DWORD *)(v10 + 108) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v102, (uint64_t **)(v10 + 8));
      v44 = v102;
      v45 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v45 = 1288;
      *(_QWORD *)(v45 + 8) = v9;
      *(_QWORD *)(v45 + 528) = v45 + 16;
      *(_QWORD *)(v45 + 536) = v45 + 16;
      *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v45 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
      v106 = (int *)v45;
      IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul,3ul>(v45, &v94);
      IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v106, 1, 0);
      v47 = v106;
      v106 = 0;
      if (!v47)
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v102);
LABEL_59:
      IPC::Encoder::~Encoder((IPC::Encoder *)v47, v46);
      WTF::fastFree(v48, v49);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v102);
    }
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v106, v11 + 30.0);
    if ((_BYTE)v108)
    {
      v60 = v106;
      v61 = v107;
      v62 = ((unint64_t)v106 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v63 = v62 - (_QWORD)v106;
      if (v62 < (unint64_t)v106)
      {
        v65 = 0;
        v64 = v107;
      }
      else
      {
        v64 = 0;
        if (v63 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v65 = 0;
        }
        else
        {
          v65 = 0;
          if (v63 + 2 <= v107)
          {
            *(_WORD *)((char *)v106 + v63) = 2822;
            v64 = v61;
            v65 = v63 + 2;
          }
        }
      }
      v66 = (char *)(((unint64_t)v60 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v66 >= (char *)v60 + v65)
      {
        v67 = v66 - (char *)v60;
        if ((unint64_t)(v66 - (char *)v60) > 0xFFFFFFFFFFFFFFF7)
          return result;
        v65 = v67 + 8;
        if (v67 + 8 > v64)
          return result;
        *(_QWORD *)v66 = v9;
      }
      if (v64)
      {
        v68 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v69 = *(_QWORD *)(v10 + 56);
        if (v68 + 16 >= v69)
          v68 = 0;
        if (v65 <= 0x10)
          v65 = 16;
        v70 = v68 + v65;
        if (v69 <= v70)
          v71 = 0;
        else
          v71 = v70;
        *(_QWORD *)(v10 + 72) = v71;
        v72 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 16) + 128);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v71, v72));
        v74 = *(_DWORD *)(v10 + 108);
        if (v73 == 0x80000000 || v74 != 0)
        {
          v92 = v74 + 1;
          *(_DWORD *)(v10 + 108) = v92;
          if (v92 >= *(_DWORD *)(v10 + 104))
          {
            if (*(_BYTE *)(v10 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
            *(_DWORD *)(v10 + 108) = 0;
          }
        }
        *(_QWORD *)(v10 + 48) = v9;
        goto LABEL_4;
      }
    }
  }
  else
  {
    v103 = &v99;
    v104 = v101;
    v105 = v100;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 176) + 96) + 96);
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    v26 = v25 + 30.0;
    if (*(_QWORD *)(v10 + 48) != v9)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v94, v25 + 30.0);
      if (!(_BYTE)v96)
        return result;
      v76 = v94;
      v77 = v95;
      v78 = ((unint64_t)v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v79 = v78 - (_QWORD)v94;
      if (v78 < (unint64_t)v94)
      {
        v81 = 0;
        v80 = v95;
      }
      else
      {
        v80 = 0;
        if (v79 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v81 = 0;
        }
        else
        {
          v81 = 0;
          if (v79 + 2 <= (unint64_t)v95)
          {
            *(_WORD *)((char *)v94 + v79) = 2822;
            v80 = v77;
            v81 = v79 + 2;
          }
        }
      }
      v82 = (char *)(((unint64_t)v76 + v81 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v82 >= (char *)v76 + v81)
      {
        v81 = v82 - (char *)v76 + 8;
        if ((unint64_t)(v82 - (char *)v76) > 0xFFFFFFFFFFFFFFF7 || v81 > (unint64_t)v80)
          return result;
        *(_QWORD *)v82 = v9;
      }
      if (!v80)
        return result;
      v84 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v85 = *(_QWORD *)(v10 + 56);
      if (v84 + 16 >= v85)
        v84 = 0;
      if (v81 <= 0x10)
        v81 = 16;
      v86 = v84 + v81;
      if (v85 <= v86)
        v87 = 0;
      else
        v87 = v86;
      *(_QWORD *)(v10 + 72) = v87;
      v88 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 16) + 128);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v87, v88));
      v90 = *(_DWORD *)(v10 + 108);
      if (v89 == 0x80000000 || v90 != 0)
      {
        v93 = v90 + 1;
        *(_DWORD *)(v10 + 108) = v93;
        if (v93 >= *(_DWORD *)(v10 + 104))
        {
          if (*(_BYTE *)(v10 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
          *(_DWORD *)(v10 + 108) = 0;
        }
      }
      *(_QWORD *)(v10 + 48) = v9;
    }
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v10 + 56, &v106, v26);
    if (!(_BYTE)v108)
      return result;
    v94 = v106;
    v95 = (_QWORD *)v107;
    v96 = 0;
    v27 = ((unint64_t)v106 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v27 >= (unint64_t)v106;
    v28 = v27 - (_QWORD)v106;
    if (v14)
    {
      if (v28 > 0xFFFFFFFFFFFFFFFDLL || v28 + 2 > v107)
      {
        v95 = 0;
      }
      else
      {
        *(_WORD *)((char *)v106 + v28) = 1290;
        v96 = (_QWORD *)(v28 + 2);
      }
    }
    result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(&v94, (uint64_t)&v103);
    if (!v95)
    {
      if (!(_BYTE)v108)
        goto LABEL_137;
      v50 = ((unint64_t)v106 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = v50 - (_QWORD)v106;
      if (v50 < (unint64_t)v106)
      {
        v52 = 0;
      }
      else
      {
        v52 = 0;
        if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v51 + 2 <= v107)
        {
          *(_WORD *)((char *)v106 + v51) = 2821;
          v52 = v51 + 2;
        }
      }
      v53 = *(_QWORD *)(v10 + 64);
      v54 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = *(_QWORD *)(v10 + 56);
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v52 <= 0x10)
        v52 = 16;
      v56 = v54 + v52;
      if (v55 <= v56)
        v56 = 0;
      *(_QWORD *)(v10 + 72) = v56;
      v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
      do
        __ldaxr(v57);
      while (__stlxr(v56, v57));
      *(_DWORD *)(v10 + 108) = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v102, (uint64_t **)(v10 + 8));
      v58 = v102;
      v59 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v59 = 1290;
      *(_QWORD *)(v59 + 8) = v9;
      *(_QWORD *)(v59 + 528) = v59 + 16;
      *(_QWORD *)(v59 + 536) = v59 + 16;
      *(_OWORD *)(v59 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v59 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v59);
      v94 = (int *)v59;
      IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned long long> const&,std::optional<unsigned long long> const&>,0ul,1ul,2ul>(v59, &v103);
      IPC::Connection::sendMessageImpl((uint64_t)v58, (uint64_t *)&v94, 1, 0);
      v47 = v94;
      v94 = 0;
      if (!v47)
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v102);
      goto LABEL_59;
    }
    v29 = (uint64_t)v96;
    v30 = *(_QWORD *)(v10 + 64);
    v31 = (*(_QWORD *)(v10 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = *(_QWORD *)(v10 + 56);
    if (v31 + 16 >= v32)
      v31 = 0;
    if ((unint64_t)v96 <= 0x10)
      v29 = 16;
    v33 = v31 + v29;
    if (v32 <= v33)
      v34 = 0;
    else
      v34 = v33;
    *(_QWORD *)(v10 + 72) = v34;
    v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
    do
      v24 = __ldaxr(v35);
    while (__stlxr(v34, v35));
LABEL_40:
    if (v24 == 0x80000000 || *(_DWORD *)(v10 + 108))
    {
      if (*(_BYTE *)(v10 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v10 + 84));
      *(_DWORD *)(v10 + 108) = 0;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::draw(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unsigned __int8 ***result;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unsigned int v51;
  int *v52[4];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v55 = a4;
  v56 = a3;
  v54 = a5;
  v53 = a2;
  v52[0] = &v53;
  v52[1] = (int *)&v56;
  v52[2] = (int *)&v55;
  v52[3] = (int *)&v54;
  v5 = *((_QWORD *)a1 + 3);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v8 = v7 + 30.0;
  if (*(_QWORD *)(v6 + 48) == v5)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v58, v8);
      if (!v60)
        break;
      v61 = v58;
      v62 = v59;
      v63 = 0;
      v10 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 >= v58;
      v12 = v10 - v58;
      if (v11)
      {
        if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v59)
        {
          v62 = 0;
        }
        else
        {
          *(_WORD *)(v58 + v12) = 1271;
          v63 = v12 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>((uint64_t)&v61, (uint64_t)v52);
      if (v62)
      {
        v14 = v63;
        v15 = *(_QWORD *)(v6 + 64);
        v16 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(v6 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v63 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(v6 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(v6 + 108))
        {
          if (*(_BYTE *)(v6 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
          *(_DWORD *)(v6 + 108) = 0;
        }
        return result;
      }
      v22 = v60;
      if (v60)
      {
        v23 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v23 - v58;
        if (v23 < v58)
        {
          v25 = 0;
        }
        else
        {
          v25 = 0;
          if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v24 + 2 <= v59)
          {
            *(_WORD *)(v58 + v24) = 2821;
            v25 = v24 + 2;
          }
        }
        v26 = *(_QWORD *)(v6 + 64);
        v27 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(v6 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        if (v25 <= 0x10)
          v25 = 16;
        v29 = v27 + v25;
        if (v28 <= v29)
          v29 = 0;
        *(_QWORD *)(v6 + 72) = v29;
        v30 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          __ldaxr(v30);
        while (__stlxr(v29, v30));
        *(_DWORD *)(v6 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(v6 + 8));
        v31 = v57;
        v32 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v32 = 1271;
        *(_QWORD *)(v32 + 8) = v5;
        *(_QWORD *)(v32 + 528) = v32 + 16;
        *(_QWORD *)(v32 + 536) = v32 + 16;
        *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v32 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
        v61 = v32;
        IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul>(v32, v52);
        IPC::Connection::sendMessageImpl((uint64_t)v31, (uint64_t *)&v61, 1, 0);
        v34 = (IPC::Encoder *)v61;
        v61 = 0;
        if (v34)
        {
          IPC::Encoder::~Encoder(v34, v33);
          WTF::fastFree(v35, v36);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v57);
      }
      __break(1u);
LABEL_73:
      v40 = v13;
LABEL_45:
      v41 = (_QWORD *)((v22 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v41 >= v22 + v40)
      {
        v40 = (unint64_t)v41 - v22 + 8;
        if ((unint64_t)v41 - v22 > 0xFFFFFFFFFFFFFFF7 || v40 > v13)
          return result;
        *v41 = v5;
      }
      if (!v13)
        return result;
      v43 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(v6 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v40 <= 0x10)
        v40 = 16;
      v45 = v43 + v40;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *(_QWORD *)(v6 + 72) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = *(_DWORD *)(v6 + 108);
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        *(_DWORD *)(v6 + 108) = v51;
        if (v51 >= *(_DWORD *)(v6 + 104))
        {
          if (*(_BYTE *)(v6 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
          *(_DWORD *)(v6 + 108) = 0;
        }
      }
      *(_QWORD *)(v6 + 48) = v5;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v61, v7 + 30.0);
    if ((_BYTE)v63)
    {
      v22 = v61;
      v37 = v62;
      v38 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v39 = v38 - v61;
      if (v38 < v61)
      {
        v40 = 0;
        v13 = v62;
      }
      else
      {
        v13 = 0;
        if (v39 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_73;
        v40 = 0;
        if (v39 + 2 <= v62)
        {
          *(_WORD *)(v61 + v39) = 2822;
          v13 = v37;
          v40 = v39 + 2;
        }
      }
      goto LABEL_45;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::drawIndexed(WTF::ApproximateTime *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  unsigned __int8 ***result;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v52;
  int *v53[5];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;

  v57 = a4;
  v58 = a3;
  v55 = a6;
  v56 = a5;
  v54 = a2;
  v53[0] = &v54;
  v53[1] = (int *)&v58;
  v53[2] = (int *)&v57;
  v53[3] = (int *)&v56;
  v53[4] = (int *)&v55;
  v6 = *((_QWORD *)a1 + 3);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v9 = v8 + 30.0;
  if (*(_QWORD *)(v7 + 48) == v6)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v60, v9);
      if (!v62)
        break;
      v63 = v60;
      v64 = v61;
      v65 = 0;
      v11 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v12 = v11 >= v60;
      v13 = v11 - v60;
      if (v12)
      {
        if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v61)
        {
          v64 = 0;
        }
        else
        {
          *(_WORD *)(v60 + v13) = 1272;
          v65 = v13 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>((uint64_t)&v63, (uint64_t)v53);
      if (v64)
      {
        v15 = v65;
        v16 = *(_QWORD *)(v7 + 64);
        v17 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(v7 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v65 <= 0x10)
          v15 = 16;
        v19 = v17 + v15;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(v7 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 == 0x80000000 || *(_DWORD *)(v7 + 108))
        {
          if (*(_BYTE *)(v7 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
          *(_DWORD *)(v7 + 108) = 0;
        }
        return result;
      }
      v23 = v62;
      if (v62)
      {
        v24 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v60;
        if (v24 < v60)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v61)
          {
            *(_WORD *)(v60 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(v7 + 64);
        v28 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(v7 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(v7 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(v7 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)(v7 + 8));
        v32 = v59;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 1272;
        *(_QWORD *)(v33 + 8) = v6;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v63 = v33;
        IPC::ArgumentCoder<std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,std::optional<unsigned int> const&,std::optional<unsigned int> const&,std::optional<int> const&,std::optional<unsigned int> const&>,0ul,1ul,2ul,3ul,4ul>(v33, v53);
        IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v63, 1, 0);
        v35 = (IPC::Encoder *)v63;
        v63 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v59);
      }
      __break(1u);
LABEL_73:
      v41 = v14;
LABEL_45:
      v42 = (_QWORD *)((v23 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v42 >= v23 + v41)
      {
        v41 = (unint64_t)v42 - v23 + 8;
        if ((unint64_t)v42 - v23 > 0xFFFFFFFFFFFFFFF7 || v41 > v14)
          return result;
        *v42 = v6;
      }
      if (!v14)
        return result;
      v44 = (*(_QWORD *)(v7 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v45 = *(_QWORD *)(v7 + 56);
      if (v44 + 16 >= v45)
        v44 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v46 = v44 + v41;
      if (v45 <= v46)
        v47 = 0;
      else
        v47 = v46;
      *(_QWORD *)(v7 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(v7 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v52 = v50 + 1;
        *(_DWORD *)(v7 + 108) = v52;
        if (v52 >= *(_DWORD *)(v7 + 104))
        {
          if (*(_BYTE *)(v7 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v7 + 84));
          *(_DWORD *)(v7 + 108) = 0;
        }
      }
      *(_QWORD *)(v7 + 48) = v6;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v7 + 56, &v63, v8 + 30.0);
    if ((_BYTE)v65)
    {
      v23 = v63;
      v38 = v64;
      v39 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - v63;
      if (v39 < v63)
      {
        v41 = 0;
        v14 = v64;
      }
      else
      {
        v14 = 0;
        if (v40 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_73;
        v41 = 0;
        if (v40 + 2 <= v64)
        {
          *(_WORD *)(v63 + v40) = 2822;
          v14 = v38;
          v41 = v40 + 2;
        }
      }
      goto LABEL_45;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::drawIndirect(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 ***v4;
  unint64_t v5;
  size_t v6;
  unsigned __int8 ***result;
  size_t v10;
  uint64_t *v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v64;
  unint64_t v65;
  unsigned __int8 ***v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;

  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  v66 = result;
  if (!result)
    return result;
  v10 = *((_QWORD *)this + 3);
  v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v13 = v12 + 30.0;
  if (v11[6] == v10)
    goto LABEL_3;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v12 + 30.0);
  if (!v70)
    return result;
  v50 = v68;
  v49 = v69;
  v51 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = v51 - v68;
  if (v51 < v68)
    goto LABEL_99;
  v53 = v52 + 2;
  if (v52 > 0xFFFFFFFFFFFFFFFDLL || v53 > v69)
  {
    v49 = 0;
LABEL_99:
    v53 = 0;
    goto LABEL_63;
  }
  *(_WORD *)(v68 + v52) = 2822;
LABEL_63:
  v55 = (_QWORD *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v55 >= v50 + v53)
  {
    v53 = (unint64_t)v55 - v50 + 8;
    if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49)
      return result;
    *v55 = v10;
  }
  if (!v49)
    return result;
  v57 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v11[7];
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v53 <= 0x10)
    v53 = 16;
  v59 = v57 + v53;
  if (v58 <= v59)
    v59 = 0;
  v11[9] = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v11[8] + 16) + 128);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v59, v60));
  v62 = *((_DWORD *)v11 + 27);
  if (v61 == 0x80000000 || v62 != 0)
  {
    v64 = v62 + 1;
    *((_DWORD *)v11 + 27) = v64;
    if (v64 >= *((_DWORD *)v11 + 26))
    {
      if (*((_BYTE *)v11 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
  }
  v11[6] = v10;
LABEL_3:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v13);
  if (!v70)
    return result;
  v14 = v68;
  v15 = v69;
  v16 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v68;
  if (v16 >= v68)
  {
    v18 = v17 + 2;
    if (v17 <= 0xFFFFFFFFFFFFFFFDLL && v18 <= v69)
    {
      *(_WORD *)(v68 + v17) = 1274;
      goto LABEL_10;
    }
    v15 = 0;
  }
  v18 = 0;
LABEL_10:
  v20 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 - (v14 + v18);
  if (v20 >= v14 + v18)
  {
    v22 = v20 - v14;
    v23 = v21 + v18 + 8;
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v15)
    {
      v15 = 0;
    }
    else
    {
      *(_QWORD *)(v14 + v22) = v66;
      v18 = v23;
    }
  }
  v25 = (_QWORD *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v14 + v18)
  {
    v18 = (unint64_t)v25 - v14 + 8;
    if ((unint64_t)v25 - v14 > 0xFFFFFFFFFFFFFFF7 || v18 > v15)
      goto LABEL_37;
    *v25 = a3;
  }
  if (v15)
  {
    v27 = v11[8];
    v28 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v29 = v11[7];
    if (v28 + 16 >= v29)
      v28 = 0;
    if (v18 <= 0x10)
      v18 = 16;
    v30 = v28 + v18;
    if (v29 <= v30)
      v31 = 0;
    else
      v31 = v30;
    v11[9] = v31;
    v32 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v31, v32));
    if (v33 == 0x80000000 || *((_DWORD *)v11 + 27))
    {
      if (*((_BYTE *)v11 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
    return result;
  }
LABEL_37:
  if (!v70)
  {
    __break(1u);
LABEL_97:
    munmap(result, *(_QWORD *)(v3 + 552));
LABEL_92:
    *(_QWORD *)(v3 + 528) = v4;
    *(_QWORD *)(v3 + 552) = v10;
    v42 = *(_QWORD *)(v3 + 544);
    goto LABEL_52;
  }
  v34 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v35 = v34 - v68;
  if (v34 < v68)
  {
    v36 = 0;
  }
  else
  {
    v36 = 0;
    if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v69)
    {
      *(_WORD *)(v68 + v35) = 2821;
      v36 = v35 + 2;
    }
  }
  v37 = v11[8];
  v38 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v39 = v11[7];
  if (v38 + 16 >= v39)
    v38 = 0;
  if (v36 <= 0x10)
    v36 = 16;
  v40 = v38 + v36;
  if (v39 <= v40)
    v40 = 0;
  v11[9] = v40;
  v41 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
  do
    __ldaxr(v41);
  while (__stlxr(v40, v41));
  *((_DWORD *)v11 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v11 + 1);
  v11 = v67;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1274;
  *(_QWORD *)(v3 + 8) = v10;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v71 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, (uint64_t *)&v66);
  v42 = *(_QWORD *)(v3 + 544);
  v5 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v43 = *(_QWORD *)(v3 + 552);
  if (v43 < v5 + 8)
  {
    v65 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v10 = v65;
      v65 *= 2;
    }
    while (v10 < v6);
    result = (unsigned __int8 ***)mmap(0, v10, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v4 = result;
    memcpy(result, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    result = *(unsigned __int8 ****)(v3 + 528);
    if (result == (unsigned __int8 ***)(v3 + 16))
      goto LABEL_92;
    goto LABEL_97;
  }
  v4 = *(unsigned __int8 ****)(v3 + 528);
LABEL_52:
  bzero((char *)v4 + v42, v5 - v42);
  *(_QWORD *)(v3 + 544) = v6;
  v44 = (_QWORD *)(*(_QWORD *)(v3 + 528) + v5);
  *(_QWORD *)(v3 + 536) = v44 + 1;
  *v44 = a3;
  IPC::Connection::sendMessageImpl((uint64_t)v11, (uint64_t *)&v71, 1, 0);
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v45);
    WTF::fastFree(v47, v48);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::drawIndexedIndirect(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, const WebCore::WebGPU::Buffer *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 ***v4;
  unint64_t v5;
  size_t v6;
  unsigned __int8 ***result;
  size_t v10;
  uint64_t *v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v64;
  unint64_t v65;
  unsigned __int8 ***v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;

  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  v66 = result;
  if (!result)
    return result;
  v10 = *((_QWORD *)this + 3);
  v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
  v13 = v12 + 30.0;
  if (v11[6] == v10)
    goto LABEL_3;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v12 + 30.0);
  if (!v70)
    return result;
  v50 = v68;
  v49 = v69;
  v51 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = v51 - v68;
  if (v51 < v68)
    goto LABEL_99;
  v53 = v52 + 2;
  if (v52 > 0xFFFFFFFFFFFFFFFDLL || v53 > v69)
  {
    v49 = 0;
LABEL_99:
    v53 = 0;
    goto LABEL_63;
  }
  *(_WORD *)(v68 + v52) = 2822;
LABEL_63:
  v55 = (_QWORD *)((v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v55 >= v50 + v53)
  {
    v53 = (unint64_t)v55 - v50 + 8;
    if ((unint64_t)v55 - v50 > 0xFFFFFFFFFFFFFFF7 || v53 > v49)
      return result;
    *v55 = v10;
  }
  if (!v49)
    return result;
  v57 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v11[7];
  if (v57 + 16 >= v58)
    v57 = 0;
  if (v53 <= 0x10)
    v53 = 16;
  v59 = v57 + v53;
  if (v58 <= v59)
    v59 = 0;
  v11[9] = v59;
  v60 = (unint64_t *)(*(_QWORD *)(v11[8] + 16) + 128);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v59, v60));
  v62 = *((_DWORD *)v11 + 27);
  if (v61 == 0x80000000 || v62 != 0)
  {
    v64 = v62 + 1;
    *((_DWORD *)v11 + 27) = v64;
    if (v64 >= *((_DWORD *)v11 + 26))
    {
      if (*((_BYTE *)v11 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
  }
  v11[6] = v10;
LABEL_3:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v13);
  if (!v70)
    return result;
  v14 = v68;
  v15 = v69;
  v16 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v68;
  if (v16 >= v68)
  {
    v18 = v17 + 2;
    if (v17 <= 0xFFFFFFFFFFFFFFFDLL && v18 <= v69)
    {
      *(_WORD *)(v68 + v17) = 1273;
      goto LABEL_10;
    }
    v15 = 0;
  }
  v18 = 0;
LABEL_10:
  v20 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 - (v14 + v18);
  if (v20 >= v14 + v18)
  {
    v22 = v20 - v14;
    v23 = v21 + v18 + 8;
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v15)
    {
      v15 = 0;
    }
    else
    {
      *(_QWORD *)(v14 + v22) = v66;
      v18 = v23;
    }
  }
  v25 = (_QWORD *)((v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v14 + v18)
  {
    v18 = (unint64_t)v25 - v14 + 8;
    if ((unint64_t)v25 - v14 > 0xFFFFFFFFFFFFFFF7 || v18 > v15)
      goto LABEL_37;
    *v25 = a3;
  }
  if (v15)
  {
    v27 = v11[8];
    v28 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v29 = v11[7];
    if (v28 + 16 >= v29)
      v28 = 0;
    if (v18 <= 0x10)
      v18 = 16;
    v30 = v28 + v18;
    if (v29 <= v30)
      v31 = 0;
    else
      v31 = v30;
    v11[9] = v31;
    v32 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v31, v32));
    if (v33 == 0x80000000 || *((_DWORD *)v11 + 27))
    {
      if (*((_BYTE *)v11 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
    return result;
  }
LABEL_37:
  if (!v70)
  {
    __break(1u);
LABEL_97:
    munmap(result, *(_QWORD *)(v3 + 552));
LABEL_92:
    *(_QWORD *)(v3 + 528) = v4;
    *(_QWORD *)(v3 + 552) = v10;
    v42 = *(_QWORD *)(v3 + 544);
    goto LABEL_52;
  }
  v34 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v35 = v34 - v68;
  if (v34 < v68)
  {
    v36 = 0;
  }
  else
  {
    v36 = 0;
    if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v69)
    {
      *(_WORD *)(v68 + v35) = 2821;
      v36 = v35 + 2;
    }
  }
  v37 = v11[8];
  v38 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v39 = v11[7];
  if (v38 + 16 >= v39)
    v38 = 0;
  if (v36 <= 0x10)
    v36 = 16;
  v40 = v38 + v36;
  if (v39 <= v40)
    v40 = 0;
  v11[9] = v40;
  v41 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
  do
    __ldaxr(v41);
  while (__stlxr(v40, v41));
  *((_DWORD *)v11 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v11 + 1);
  v11 = v67;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1273;
  *(_QWORD *)(v3 + 8) = v10;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v71 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, (uint64_t *)&v66);
  v42 = *(_QWORD *)(v3 + 544);
  v5 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v43 = *(_QWORD *)(v3 + 552);
  if (v43 < v5 + 8)
  {
    v65 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v10 = v65;
      v65 *= 2;
    }
    while (v10 < v6);
    result = (unsigned __int8 ***)mmap(0, v10, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v4 = result;
    memcpy(result, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    result = *(unsigned __int8 ****)(v3 + 528);
    if (result == (unsigned __int8 ***)(v3 + 16))
      goto LABEL_92;
    goto LABEL_97;
  }
  v4 = *(unsigned __int8 ****)(v3 + 528);
LABEL_52:
  bzero((char *)v4 + v42, v5 - v42);
  *(_QWORD *)(v3 + 544) = v6;
  v44 = (_QWORD *)(*(_QWORD *)(v3 + 528) + v5);
  *(_QWORD *)(v3 + 536) = v44 + 1;
  *v44 = a3;
  IPC::Connection::sendMessageImpl((uint64_t)v11, (uint64_t *)&v71, 1, 0);
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    IPC::Encoder::~Encoder(v46, v45);
    WTF::fastFree(v47, v48);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::setBindGroup(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  unsigned __int8 ***result;
  int *v7[3];
  unsigned __int8 ***v8;
  int v9;

  v9 = a2;
  result = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a3);
  v8 = result;
  if (result)
  {
    v7[0] = &v9;
    v7[1] = (int *)&v8;
    v7[2] = a4;
    return WebKit::WebGPU::RemoteRenderPassEncoderProxy::send<Messages::RemoteRenderPassEncoder::SetBindGroup>(*(WTF::ApproximateTime **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) + 176) + 96) + 96), v7);
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::send<Messages::RemoteRenderPassEncoder::SetBindGroup>(WTF::ApproximateTime *a1, uint64_t a2, int **a3)
{
  double v6;
  double v7;
  unsigned __int8 ***result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  IPC::Encoder *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  unint64_t v53;
  char v54;
  IPC::Encoder *v55;
  unint64_t v56;
  unint64_t v57;

  WTF::ApproximateTime::now(a1);
  v7 = v6 + 30.0;
  if (*(WTF::ApproximateTime **)(a2 + 48) == a1)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v52, v7);
      if (!v54)
        break;
      v55 = v52;
      v56 = v53;
      v57 = 0;
      v9 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= (unint64_t)v52;
      v11 = v9 - (_QWORD)v52;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v53)
        {
          v56 = 0;
        }
        else
        {
          *(_WORD *)((char *)v52 + v11) = 1281;
          v57 = v11 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(&v55, (uint64_t)a3);
      if (v56)
      {
        v14 = v57;
        v15 = *(_QWORD *)(a2 + 64);
        v16 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = *(_QWORD *)(a2 + 56);
        if (v16 + 16 >= v17)
          v16 = 0;
        if (v57 <= 0x10)
          v14 = 16;
        v18 = v16 + v14;
        if (v17 <= v18)
          v19 = 0;
        else
          v19 = v18;
        *(_QWORD *)(a2 + 72) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        if (v21 == 0x80000000 || *(_DWORD *)(a2 + 108))
        {
          if (*(_BYTE *)(a2 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
        return result;
      }
      if (v54)
      {
        v22 = ((unint64_t)v52 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v52;
        if (v22 < (unint64_t)v52)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v53)
          {
            *(_WORD *)((char *)v52 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a2 + 64);
        v26 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a2 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a2 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a2 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, (uint64_t **)(a2 + 8));
        v30 = v51;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1281;
        *(_QWORD *)(v31 + 8) = a1;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v55 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>,0ul,1ul,2ul>(v31, a3);
        IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v55, 1, 0);
        v33 = v55;
        v55 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v51);
      }
      __break(1u);
LABEL_76:
      v36 = 0;
LABEL_77:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v13 + v39)
      {
        v39 = v41 - (char *)v13 + 8;
        if ((unint64_t)(v41 - (char *)v13) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return result;
        *(_QWORD *)v41 = a1;
      }
      if (!v36)
        return result;
      v43 = (*(_QWORD *)(a2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a2 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a2 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a2 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *(_DWORD *)(a2 + 108) = v50;
        if (v50 >= *(_DWORD *)(a2 + 104))
        {
          if (*(_BYTE *)(a2 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a2 + 84));
          *(_DWORD *)(a2 + 108) = 0;
        }
      }
      *(_QWORD *)(a2 + 48) = a1;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v55, v6 + 30.0);
    if ((_BYTE)v57)
    {
      v13 = v55;
      v36 = v56;
      v37 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v55;
      if (v37 < (unint64_t)v55)
        goto LABEL_77;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v56)
        goto LABEL_76;
      *(_WORD *)((char *)v55 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

WTF *WebKit::WebGPU::RemoteRenderPassEncoderProxy::setBindGroup(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, int a2, const WebCore::WebGPU::BindGroup *a3, const unsigned int *a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  WTF *result;
  uint64_t v12;
  void *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  char v19;
  int *v20[3];
  WTF *v21;
  int v22;

  v22 = a2;
  result = (WTF *)(*(uint64_t (**)(_QWORD, const WebCore::WebGPU::BindGroup *))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), a3);
  v21 = result;
  if (result)
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, (int *)&a4[a6], a7);
    v17 = v15;
    v12 = v16;
    v15 = 0;
    v16 = 0;
    v18 = v12;
    v19 = 1;
    v20[0] = &v22;
    v20[1] = (int *)&v21;
    v20[2] = (int *)&v17;
    WebKit::WebGPU::RemoteRenderPassEncoderProxy::send<Messages::RemoteRenderPassEncoder::SetBindGroup>(*((WTF::ApproximateTime **)this + 3), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96), v20);
    if (v19)
    {
      v14 = v17;
      if (v17)
      {
        v17 = 0;
        LODWORD(v18) = 0;
        WTF::fastFree(v14, v13);
      }
    }
    result = v15;
    if (v15)
    {
      v15 = 0;
      LODWORD(v16) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::pushDebugGroup(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1280;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1280;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::popDebugGroup(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 1279;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 1279;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::insertDebugMarker(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1278;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1278;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::setViewport(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  char *v8;
  unsigned __int8 ***v9;
  unint64_t v10;
  size_t v11;
  size_t v18;
  uint64_t *v19;
  double v20;
  double v21;
  unsigned __int8 ***result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  float *v68;
  uint64_t v69;
  unint64_t v70;
  size_t v71;
  unint64_t v72;
  char *v73;
  float *v74;
  uint64_t v75;
  unint64_t v76;
  size_t v77;
  unint64_t v78;
  char *v79;
  float *v80;
  uint64_t v81;
  unint64_t v82;
  size_t v83;
  unint64_t v84;
  char *v85;
  float *v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  char *v91;
  float *v92;
  uint64_t v93;
  unint64_t v94;
  size_t v95;
  unint64_t v96;
  char *v97;
  float *v98;
  void *v99;
  IPC::Encoder *v100;
  WTF *v101;
  void *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v109;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  int v116;
  unsigned int v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  size_t v122;
  char *v123;
  unsigned __int8 ***v124;
  unint64_t v125;
  size_t v126;
  char *v127;
  unsigned __int8 ***v128;
  unint64_t v129;
  size_t v130;
  char *v131;
  unsigned __int8 ***v132;
  unint64_t v133;
  size_t v134;
  char *v135;
  unsigned __int8 ***v136;
  unint64_t v137;
  size_t v138;
  char *v139;
  unsigned __int8 ***v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  char v146;
  IPC::Encoder *v147;

  v18 = *((_QWORD *)this + 3);
  v19 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v21 = v20 + 30.0;
  if (v19[6] == v18)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v19 + 7), &v144, v20 + 30.0);
  if (!v146)
    return result;
  v104 = v144;
  v103 = v145;
  v105 = (v144 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v106 = v105 - v144;
  if (v105 < v144)
    goto LABEL_157;
  v107 = v106 + 2;
  if (v106 > 0xFFFFFFFFFFFFFFFDLL || v107 > v145)
  {
    v103 = 0;
LABEL_157:
    v107 = 0;
    goto LABEL_90;
  }
  *(_WORD *)(v144 + v106) = 2822;
LABEL_90:
  v109 = (_QWORD *)((v104 + v107 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v109 >= v104 + v107)
  {
    v107 = (unint64_t)v109 - v104 + 8;
    if ((unint64_t)v109 - v104 > 0xFFFFFFFFFFFFFFF7 || v107 > v103)
      return result;
    *v109 = v18;
  }
  if (!v103)
    return result;
  v111 = (v19[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v112 = v19[7];
  if (v111 + 16 >= v112)
    v111 = 0;
  if (v107 <= 0x10)
    v107 = 16;
  v113 = v111 + v107;
  if (v112 <= v113)
    v113 = 0;
  v19[9] = v113;
  v114 = (unint64_t *)(*(_QWORD *)(v19[8] + 16) + 128);
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v113, v114));
  v116 = *((_DWORD *)v19 + 27);
  if (v115 == 0x80000000 || v116 != 0)
  {
    v118 = v116 + 1;
    *((_DWORD *)v19 + 27) = v118;
    if (v118 >= *((_DWORD *)v19 + 26))
    {
      if (*((_BYTE *)v19 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v19 + 21));
      *((_DWORD *)v19 + 27) = 0;
    }
  }
  v19[6] = v18;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v19 + 7), &v144, v21);
  if (!v146)
    return result;
  v23 = v144;
  v24 = v145;
  v25 = (v144 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v144;
  if (v25 >= v144)
  {
    v27 = v26 + 2;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v27 <= v145)
    {
      *(_WORD *)(v144 + v26) = 1289;
      goto LABEL_9;
    }
    v24 = 0;
  }
  v27 = 0;
LABEL_9:
  v29 = (v23 + v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v30 = v29 - (v23 + v27);
  if (v29 >= v23 + v27)
  {
    v31 = v29 - v23;
    v32 = v30 + v27 + 4;
    if (v31 > 0xFFFFFFFFFFFFFFFBLL || v32 > v24)
    {
      v24 = 0;
    }
    else
    {
      *(float *)(v23 + v31) = a2;
      v27 = v32;
    }
  }
  v34 = (v23 + v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v35 = v34 - (v23 + v27);
  if (v34 >= v23 + v27)
  {
    v36 = v34 - v23;
    v37 = v35 + v27 + 4;
    if (v36 > 0xFFFFFFFFFFFFFFFBLL || v37 > v24)
    {
      v24 = 0;
    }
    else
    {
      *(float *)(v23 + v36) = a3;
      v27 = v37;
    }
  }
  v39 = (v23 + v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v40 = v39 >= v23 + v27;
  v41 = v39 - (v23 + v27);
  if (v40)
  {
    v141 = 0;
    v42 = v41 + v27;
    if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= v24)
    {
      *(float *)(v23 + v42) = a4;
      v141 = v24;
      v27 = v42 + 4;
    }
  }
  else
  {
    v141 = v24;
  }
  v43 = (v23 + v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v44 = v43 - (v23 + v27);
  if (v43 < v23 + v27)
  {
    v45 = v141;
  }
  else
  {
    v45 = 0;
    v46 = v44 + v27;
    if (v46 <= 0xFFFFFFFFFFFFFFFBLL && v46 + 4 <= v141)
    {
      *(float *)(v23 + v46) = a5;
      v45 = v141;
      v27 = v46 + 4;
    }
  }
  v47 = (v23 + v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v40 = v47 >= v23 + v27;
  v48 = v47 - (v23 + v27);
  if (v40)
  {
    v142 = 0;
    v49 = v48 + v27;
    if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= v45)
    {
      *(float *)(v23 + v49) = a6;
      v142 = v45;
      v27 = v49 + 4;
    }
  }
  else
  {
    v142 = v45;
  }
  v50 = (float *)((v23 + v27 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v50 >= v23 + v27)
  {
    v51 = (char *)v50 - v23;
    if ((unint64_t)v50 - v23 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_54;
    v27 = (unint64_t)(v51 + 4);
    if ((unint64_t)(v51 + 4) > v142)
      goto LABEL_54;
    *v50 = a7;
  }
  if (v142)
  {
    v52 = v19[8];
    v53 = (v19[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = v19[7];
    if (v53 + 16 >= v54)
      v53 = 0;
    if (v27 <= 0x10)
      v27 = 16;
    v55 = v53 + v27;
    if (v54 <= v55)
      v56 = 0;
    else
      v56 = v55;
    v19[9] = v56;
    v57 = (unint64_t *)(*(_QWORD *)(v52 + 16) + 128);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v56, v57));
    if (v58 == 0x80000000 || *((_DWORD *)v19 + 27))
    {
      if (*((_BYTE *)v19 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v19 + 21));
      *((_DWORD *)v19 + 27) = 0;
    }
    return result;
  }
LABEL_54:
  if (!v146)
  {
    __break(1u);
LABEL_155:
    munmap(result, *(_QWORD *)(v7 + 552));
    goto LABEL_119;
  }
  v59 = (v144 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v60 = v59 - v144;
  if (v59 < v144)
  {
    v61 = 0;
  }
  else
  {
    v61 = 0;
    if (v60 <= 0xFFFFFFFFFFFFFFFDLL && v60 + 2 <= v145)
    {
      *(_WORD *)(v144 + v60) = 2821;
      v61 = v60 + 2;
    }
  }
  v62 = (v19[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v19[7];
  if (v62 + 16 >= v63)
    v62 = 0;
  if (v61 <= 0x10)
    v61 = 16;
  v64 = v62 + v61;
  if (v63 <= v64)
    v64 = 0;
  v19[9] = v64;
  v65 = (unint64_t *)(*(_QWORD *)(v19[8] + 16) + 128);
  do
    __ldaxr(v65);
  while (__stlxr(v64, v65));
  *((_DWORD *)v19 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v143, (uint64_t **)v19 + 1);
  v19 = v143;
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1289;
  *(_QWORD *)(v7 + 8) = v18;
  v9 = (unsigned __int8 ***)(v7 + 16);
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v147 = (IPC::Encoder *)v7;
  v66 = *(_QWORD *)(v7 + 544);
  v10 = (v66 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = v10 + 4;
  v67 = *(_QWORD *)(v7 + 552);
  if (v67 >= v10 + 4)
  {
    v8 = *(char **)(v7 + 528);
    goto LABEL_69;
  }
  v119 = (2 * v67 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v18 = v119;
    v119 *= 2;
  }
  while (v18 < v11);
  v120 = (char *)mmap(0, v18, 3, 4098, -1, 0);
  if (v120 == (char *)-1)
    goto LABEL_165;
  v8 = v120;
  memcpy(v120, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
  result = *(unsigned __int8 ****)(v7 + 528);
  if (result != v9)
    goto LABEL_155;
LABEL_119:
  *(_QWORD *)(v7 + 528) = v8;
  *(_QWORD *)(v7 + 552) = v18;
  v66 = *(_QWORD *)(v7 + 544);
LABEL_69:
  bzero(&v8[v66], v10 - v66);
  *(_QWORD *)(v7 + 544) = v11;
  v68 = (float *)(*(_QWORD *)(v7 + 528) + v10);
  *(_QWORD *)(v7 + 536) = v68 + 1;
  *v68 = a2;
  v69 = *(_QWORD *)(v7 + 544);
  v70 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v71 = v70 + 4;
  v72 = *(_QWORD *)(v7 + 552);
  if (v72 < v70 + 4)
  {
    v121 = (2 * v72 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v122 = v121;
      v121 *= 2;
    }
    while (v122 < v71);
    v123 = (char *)mmap(0, v122, 3, 4098, -1, 0);
    if (v123 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x19756897CLL);
    }
    v73 = v123;
    memcpy(v123, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v124 = *(unsigned __int8 ****)(v7 + 528);
    if (v124 != v9)
      munmap(v124, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v73;
    *(_QWORD *)(v7 + 552) = v122;
    v69 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v73 = *(char **)(v7 + 528);
  }
  bzero(&v73[v69], v70 - v69);
  *(_QWORD *)(v7 + 544) = v71;
  v74 = (float *)(*(_QWORD *)(v7 + 528) + v70);
  *(_QWORD *)(v7 + 536) = v74 + 1;
  *v74 = a3;
  v75 = *(_QWORD *)(v7 + 544);
  v76 = (v75 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v77 = v76 + 4;
  v78 = *(_QWORD *)(v7 + 552);
  if (v78 < v76 + 4)
  {
    v125 = (2 * v78 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v126 = v125;
      v125 *= 2;
    }
    while (v126 < v77);
    v127 = (char *)mmap(0, v126, 3, 4098, -1, 0);
    if (v127 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x197568984);
    }
    v79 = v127;
    memcpy(v127, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v128 = *(unsigned __int8 ****)(v7 + 528);
    if (v128 != v9)
      munmap(v128, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v79;
    *(_QWORD *)(v7 + 552) = v126;
    v75 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v79 = *(char **)(v7 + 528);
  }
  bzero(&v79[v75], v76 - v75);
  *(_QWORD *)(v7 + 544) = v77;
  v80 = (float *)(*(_QWORD *)(v7 + 528) + v76);
  *(_QWORD *)(v7 + 536) = v80 + 1;
  *v80 = a4;
  v81 = *(_QWORD *)(v7 + 544);
  v82 = (v81 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v83 = v82 + 4;
  v84 = *(_QWORD *)(v7 + 552);
  if (v84 < v82 + 4)
  {
    v129 = (2 * v84 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v130 = v129;
      v129 *= 2;
    }
    while (v130 < v83);
    v131 = (char *)mmap(0, v130, 3, 4098, -1, 0);
    if (v131 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x19756898CLL);
    }
    v85 = v131;
    memcpy(v131, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v132 = *(unsigned __int8 ****)(v7 + 528);
    if (v132 != v9)
      munmap(v132, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v85;
    *(_QWORD *)(v7 + 552) = v130;
    v81 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v85 = *(char **)(v7 + 528);
  }
  bzero(&v85[v81], v82 - v81);
  *(_QWORD *)(v7 + 544) = v83;
  v86 = (float *)(*(_QWORD *)(v7 + 528) + v82);
  *(_QWORD *)(v7 + 536) = v86 + 1;
  *v86 = a5;
  v87 = *(_QWORD *)(v7 + 544);
  v88 = (v87 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v89 = v88 + 4;
  v90 = *(_QWORD *)(v7 + 552);
  if (v90 < v88 + 4)
  {
    v133 = (2 * v90 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v134 = v133;
      v133 *= 2;
    }
    while (v134 < v89);
    v135 = (char *)mmap(0, v134, 3, 4098, -1, 0);
    if (v135 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x197568994);
    }
    v91 = v135;
    memcpy(v135, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v136 = *(unsigned __int8 ****)(v7 + 528);
    if (v136 != v9)
      munmap(v136, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v91;
    *(_QWORD *)(v7 + 552) = v134;
    v87 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v91 = *(char **)(v7 + 528);
  }
  bzero(&v91[v87], v88 - v87);
  *(_QWORD *)(v7 + 544) = v89;
  v92 = (float *)(*(_QWORD *)(v7 + 528) + v88);
  *(_QWORD *)(v7 + 536) = v92 + 1;
  *v92 = a6;
  v93 = *(_QWORD *)(v7 + 544);
  v94 = (v93 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v95 = v94 + 4;
  v96 = *(_QWORD *)(v7 + 552);
  if (v96 < v94 + 4)
  {
    v137 = (2 * v96 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v138 = v137;
      v137 *= 2;
    }
    while (v138 < v95);
    v139 = (char *)mmap(0, v138, 3, 4098, -1, 0);
    if (v139 != (char *)-1)
    {
      v97 = v139;
      memcpy(v139, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
      v140 = *(unsigned __int8 ****)(v7 + 528);
      if (v140 != v9)
        munmap(v140, *(_QWORD *)(v7 + 552));
      *(_QWORD *)(v7 + 528) = v97;
      *(_QWORD *)(v7 + 552) = v138;
      v93 = *(_QWORD *)(v7 + 544);
      goto LABEL_79;
    }
LABEL_165:
    __break(0xC471u);
    JUMPOUT(0x197568974);
  }
  v97 = *(char **)(v7 + 528);
LABEL_79:
  bzero(&v97[v93], v94 - v93);
  *(_QWORD *)(v7 + 544) = v95;
  v98 = (float *)(*(_QWORD *)(v7 + 528) + v94);
  *(_QWORD *)(v7 + 536) = v98 + 1;
  *v98 = a7;
  IPC::Connection::sendMessageImpl((uint64_t)v19, (uint64_t *)&v147, 1, 0);
  v100 = v147;
  v147 = 0;
  if (v100)
  {
    IPC::Encoder::~Encoder(v100, v99);
    WTF::fastFree(v101, v102);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v143);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::setScissorRect(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  char *v6;
  unsigned __int8 ***v7;
  unint64_t v8;
  size_t v13;
  uint64_t *v14;
  double v15;
  double v16;
  unsigned __int8 ***result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;
  size_t v60;
  unint64_t v61;
  char *v62;
  _DWORD *v63;
  uint64_t v64;
  unint64_t v65;
  size_t v66;
  unint64_t v67;
  char *v68;
  _DWORD *v69;
  uint64_t v70;
  unint64_t v71;
  size_t v72;
  unint64_t v73;
  char *v74;
  _DWORD *v75;
  void *v76;
  IPC::Encoder *v77;
  WTF *v78;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  unsigned int v95;
  unint64_t v96;
  size_t v97;
  char *v98;
  unint64_t v99;
  size_t v100;
  char *v101;
  unsigned __int8 ***v102;
  unint64_t v103;
  size_t v104;
  char *v105;
  unsigned __int8 ***v106;
  unint64_t v107;
  size_t v108;
  char *v109;
  unsigned __int8 ***v110;
  unint64_t v111;
  size_t v112;
  uint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  IPC::Encoder *v117;

  v13 = *((_QWORD *)this + 3);
  v14 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v16 = v15 + 30.0;
  if (v14[6] == v13)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v14 + 7), &v114, v15 + 30.0);
  if (!v116)
    return result;
  v81 = v114;
  v80 = v115;
  v82 = (v114 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v83 = v82 - v114;
  if (v82 < v114)
    goto LABEL_132;
  v84 = v83 + 2;
  if (v83 > 0xFFFFFFFFFFFFFFFDLL || v84 > v115)
  {
    v80 = 0;
LABEL_132:
    v84 = 0;
    goto LABEL_77;
  }
  *(_WORD *)(v114 + v83) = 2822;
LABEL_77:
  v86 = (_QWORD *)((v81 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v86 >= v81 + v84)
  {
    v84 = (unint64_t)v86 - v81 + 8;
    if ((unint64_t)v86 - v81 > 0xFFFFFFFFFFFFFFF7 || v84 > v80)
      return result;
    *v86 = v13;
  }
  if (!v80)
    return result;
  v88 = (v14[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v89 = v14[7];
  if (v88 + 16 >= v89)
    v88 = 0;
  if (v84 <= 0x10)
    v84 = 16;
  v90 = v88 + v84;
  if (v89 <= v90)
    v90 = 0;
  v14[9] = v90;
  v91 = (unint64_t *)(*(_QWORD *)(v14[8] + 16) + 128);
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v90, v91));
  v93 = *((_DWORD *)v14 + 27);
  if (v92 == 0x80000000 || v93 != 0)
  {
    v95 = v93 + 1;
    *((_DWORD *)v14 + 27) = v95;
    if (v95 >= *((_DWORD *)v14 + 26))
    {
      if (*((_BYTE *)v14 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v14 + 21));
      *((_DWORD *)v14 + 27) = 0;
    }
  }
  v14[6] = v13;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v14 + 7), &v114, v16);
  if (!v116)
    return result;
  v18 = v114;
  v19 = v115;
  v20 = (v114 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v21 = v20 - v114;
  if (v20 >= v114)
  {
    v22 = v21 + 2;
    if (v21 <= 0xFFFFFFFFFFFFFFFDLL && v22 <= v115)
    {
      *(_WORD *)(v114 + v21) = 1286;
      goto LABEL_9;
    }
    v19 = 0;
  }
  v22 = 0;
LABEL_9:
  v24 = (v18 + v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 - (v18 + v22);
  if (v24 >= v18 + v22)
  {
    v26 = v24 - v18;
    v27 = v25 + v22 + 4;
    if (v26 > 0xFFFFFFFFFFFFFFFBLL || v27 > v19)
    {
      v19 = 0;
    }
    else
    {
      *(_DWORD *)(v18 + v26) = a2;
      v22 = v27;
    }
  }
  v29 = (v18 + v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v30 = v29 - (v18 + v22);
  if (v29 >= v18 + v22)
  {
    v31 = v29 - v18;
    v32 = v30 + v22 + 4;
    if (v31 > 0xFFFFFFFFFFFFFFFBLL || v32 > v19)
    {
      v19 = 0;
    }
    else
    {
      *(_DWORD *)(v18 + v31) = a3;
      v22 = v32;
    }
  }
  v34 = (v18 + v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v35 = v34 >= v18 + v22;
  v36 = v34 - (v18 + v22);
  if (v35)
  {
    v111 = 0;
    v37 = v36 + v22;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v19)
    {
      *(_DWORD *)(v18 + v37) = a4;
      v111 = v19;
      v22 = v37 + 4;
    }
  }
  else
  {
    v111 = v19;
  }
  v38 = (_DWORD *)((v18 + v22 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v38 >= v18 + v22)
  {
    v39 = (char *)v38 - v18;
    if ((unint64_t)v38 - v18 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_45;
    v22 = (unint64_t)(v39 + 4);
    if ((unint64_t)(v39 + 4) > v111)
      goto LABEL_45;
    *v38 = a5;
  }
  if (v111)
  {
    v40 = v14[8];
    v41 = (v14[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v42 = v14[7];
    if (v41 + 16 >= v42)
      v41 = 0;
    if (v22 <= 0x10)
      v22 = 16;
    v43 = v41 + v22;
    if (v42 <= v43)
      v44 = 0;
    else
      v44 = v43;
    v14[9] = v44;
    v45 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v44, v45));
    if (v46 == 0x80000000 || *((_DWORD *)v14 + 27))
    {
      if (*((_BYTE *)v14 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v14 + 21));
      *((_DWORD *)v14 + 27) = 0;
    }
    return result;
  }
LABEL_45:
  if (!v116)
  {
    __break(1u);
LABEL_130:
    munmap(result, *(_QWORD *)(v5 + 552));
    goto LABEL_106;
  }
  v47 = (v114 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v48 = v47 - v114;
  if (v47 < v114)
  {
    v49 = 0;
  }
  else
  {
    v49 = 0;
    if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v115)
    {
      *(_WORD *)(v114 + v48) = 2821;
      v49 = v48 + 2;
    }
  }
  v50 = v14[8];
  v51 = (v14[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = v14[7];
  if (v51 + 16 >= v52)
    v51 = 0;
  if (v49 <= 0x10)
    v49 = 16;
  v53 = v51 + v49;
  if (v52 <= v53)
    v53 = 0;
  v14[9] = v53;
  v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
  do
    __ldaxr(v54);
  while (__stlxr(v53, v54));
  *((_DWORD *)v14 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v113, (uint64_t **)v14 + 1);
  v14 = v113;
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1286;
  *(_QWORD *)(v5 + 8) = v13;
  v7 = (unsigned __int8 ***)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v117 = (IPC::Encoder *)v5;
  v55 = *(_QWORD *)(v5 + 544);
  v8 = (v55 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = v8 + 4;
  v56 = *(_QWORD *)(v5 + 552);
  if (v56 >= v8 + 4)
  {
    v6 = *(char **)(v5 + 528);
    goto LABEL_60;
  }
  v96 = (2 * v56 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v97 = v96;
    v96 *= 2;
  }
  while (v97 < v13);
  v112 = v97;
  v98 = (char *)mmap(0, v97, 3, 4098, -1, 0);
  if (v98 == (char *)-1)
    goto LABEL_137;
  v6 = v98;
  memcpy(v98, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
  result = *(unsigned __int8 ****)(v5 + 528);
  if (result != v7)
    goto LABEL_130;
LABEL_106:
  *(_QWORD *)(v5 + 528) = v6;
  *(_QWORD *)(v5 + 552) = v112;
  v55 = *(_QWORD *)(v5 + 544);
LABEL_60:
  bzero(&v6[v55], v8 - v55);
  *(_QWORD *)(v5 + 544) = v13;
  v57 = (_DWORD *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v57 + 1;
  *v57 = a2;
  v58 = *(_QWORD *)(v5 + 544);
  v59 = (v58 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v60 = v59 + 4;
  v61 = *(_QWORD *)(v5 + 552);
  if (v61 < v59 + 4)
  {
    v99 = (2 * v61 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v100 = v99;
      v99 *= 2;
    }
    while (v100 < v60);
    v101 = (char *)mmap(0, v100, 3, 4098, -1, 0);
    if (v101 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x197569110);
    }
    v62 = v101;
    memcpy(v101, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v102 = *(unsigned __int8 ****)(v5 + 528);
    if (v102 != v7)
      munmap(v102, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v62;
    *(_QWORD *)(v5 + 552) = v100;
    v58 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v62 = *(char **)(v5 + 528);
  }
  bzero(&v62[v58], v59 - v58);
  *(_QWORD *)(v5 + 544) = v60;
  v63 = (_DWORD *)(*(_QWORD *)(v5 + 528) + v59);
  *(_QWORD *)(v5 + 536) = v63 + 1;
  *v63 = a3;
  v64 = *(_QWORD *)(v5 + 544);
  v65 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v66 = v65 + 4;
  v67 = *(_QWORD *)(v5 + 552);
  if (v67 < v65 + 4)
  {
    v103 = (2 * v67 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v104 = v103;
      v103 *= 2;
    }
    while (v104 < v66);
    v105 = (char *)mmap(0, v104, 3, 4098, -1, 0);
    if (v105 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x197569118);
    }
    v68 = v105;
    memcpy(v105, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v106 = *(unsigned __int8 ****)(v5 + 528);
    if (v106 != v7)
      munmap(v106, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v68;
    *(_QWORD *)(v5 + 552) = v104;
    v64 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v68 = *(char **)(v5 + 528);
  }
  bzero(&v68[v64], v65 - v64);
  *(_QWORD *)(v5 + 544) = v66;
  v69 = (_DWORD *)(*(_QWORD *)(v5 + 528) + v65);
  *(_QWORD *)(v5 + 536) = v69 + 1;
  *v69 = a4;
  v70 = *(_QWORD *)(v5 + 544);
  v71 = (v70 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v72 = v71 + 4;
  v73 = *(_QWORD *)(v5 + 552);
  if (v73 < v71 + 4)
  {
    v107 = (2 * v73 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v108 = v107;
      v107 *= 2;
    }
    while (v108 < v72);
    v109 = (char *)mmap(0, v108, 3, 4098, -1, 0);
    if (v109 != (char *)-1)
    {
      v74 = v109;
      memcpy(v109, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
      v110 = *(unsigned __int8 ****)(v5 + 528);
      if (v110 != v7)
        munmap(v110, *(_QWORD *)(v5 + 552));
      *(_QWORD *)(v5 + 528) = v74;
      *(_QWORD *)(v5 + 552) = v108;
      v70 = *(_QWORD *)(v5 + 544);
      goto LABEL_66;
    }
LABEL_137:
    __break(0xC471u);
    JUMPOUT(0x197569108);
  }
  v74 = *(char **)(v5 + 528);
LABEL_66:
  bzero(&v74[v70], v71 - v70);
  *(_QWORD *)(v5 + 544) = v72;
  v75 = (_DWORD *)(*(_QWORD *)(v5 + 528) + v71);
  *(_QWORD *)(v5 + 536) = v75 + 1;
  *v75 = a5;
  IPC::Connection::sendMessageImpl((uint64_t)v14, (uint64_t *)&v117, 1, 0);
  v77 = v117;
  v117 = 0;
  if (v77)
  {
    IPC::Encoder::~Encoder(v77, v76);
    WTF::fastFree(v78, v79);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v113);
}

WTF::ApproximateTime *WebKit::WebGPU::RemoteRenderPassEncoderProxy::setBlendConstant(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;
  WTF::ApproximateTime *v4;
  uint64_t v5;
  size_t v6;
  WTF::ApproximateTime *result;
  uint64_t v9;
  uint64_t *v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  void *v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  IPC::Encoder *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unsigned int v55;
  unint64_t v56;
  _BYTE v57[32];
  int v58;
  char v59;
  uint64_t *v60;
  IPC::Encoder *v61;
  unint64_t v62;
  char v63;
  IPC::Encoder *v64;
  unint64_t v65;
  unint64_t v66;

  result = (WTF::ApproximateTime *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1[4], a2);
  if (!v59)
    return result;
  v9 = a1[3];
  v10 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(result);
  v12 = v11 + 30.0;
  if (v10[6] == v9)
  {
LABEL_3:
    result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v10 + 7), &v61, v12);
    if (v63)
    {
      v64 = v61;
      v65 = v62;
      v66 = 0;
      v13 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = v13 >= (unint64_t)v61;
      v15 = v13 - (_QWORD)v61;
      if (v14)
      {
        if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v62)
        {
          v65 = 0;
        }
        else
        {
          *(_WORD *)((char *)v61 + v15) = 1282;
          v66 = v15 + 2;
        }
      }
      result = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>((uint64_t *)&v64, (uint64_t)v57);
      if (v65)
      {
        v17 = v66;
        v18 = v10[8];
        v19 = (v10[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v20 = v10[7];
        if (v19 + 16 >= v20)
          v19 = 0;
        if (v66 <= 0x10)
          v17 = 16;
        v21 = v19 + v17;
        if (v20 <= v21)
          v22 = 0;
        else
          v22 = v21;
        v10[9] = v22;
        v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v22, v23));
        if (v24 == 0x80000000 || *((_DWORD *)v10 + 27))
        {
          if (*((_BYTE *)v10 + 96))
            result = (WTF::ApproximateTime *)MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
        goto LABEL_44;
      }
      if (v63)
      {
        v25 = ((unint64_t)v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = v25 - (_QWORD)v61;
        if (v25 < (unint64_t)v61)
        {
          v27 = 0;
        }
        else
        {
          v27 = 0;
          if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v62)
          {
            *(_WORD *)((char *)v61 + v26) = 2821;
            v27 = v26 + 2;
          }
        }
        v28 = v10[8];
        v29 = (v10[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v10[7];
        if (v29 + 16 >= v30)
          v29 = 0;
        if (v27 <= 0x10)
          v27 = 16;
        v31 = v29 + v27;
        if (v30 <= v31)
          v31 = 0;
        v10[9] = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
        do
          __ldaxr(v32);
        while (__stlxr(v31, v32));
        *((_DWORD *)v10 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, (uint64_t **)v10 + 1);
        v10 = v60;
        v2 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v2 = 1282;
        *(_QWORD *)(v2 + 8) = v9;
        *(_QWORD *)(v2 + 528) = v2 + 16;
        *(_QWORD *)(v2 + 536) = v2 + 16;
        *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v2 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
        v64 = (IPC::Encoder *)v2;
        v9 = v58;
        v5 = *(_QWORD *)(v2 + 544);
        v6 = v5 + 1;
        v33 = *(_QWORD *)(v2 + 552);
        if (v33 >= v5 + 1)
        {
          v4 = *(WTF::ApproximateTime **)(v2 + 528);
          v34 = *(_QWORD *)(v2 + 544);
LABEL_41:
          bzero((char *)v4 + v34, v5 - v34);
          *(_QWORD *)(v2 + 544) = v6;
          v35 = (_BYTE *)(*(_QWORD *)(v2 + 528) + v5);
          *(_QWORD *)(v2 + 536) = v35 + 1;
          *v35 = v9;
          IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>((char *)v2, (uint64_t)v57, v9);
          IPC::Connection::sendMessageImpl((uint64_t)v10, (uint64_t *)&v64, 1, 0);
          v37 = v64;
          v64 = 0;
          if (v37)
          {
            IPC::Encoder::~Encoder(v37, v36);
            WTF::fastFree(v38, v39);
          }
          result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v60);
          goto LABEL_44;
        }
        v56 = (2 * v33 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v3 = v56;
          v56 *= 2;
        }
        while (v3 < v6);
        result = (WTF::ApproximateTime *)mmap(0, v3, 3, 4098, -1, 0);
        if (result == (WTF::ApproximateTime *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v4 = result;
        memcpy(result, *(const void **)(v2 + 528), *(_QWORD *)(v2 + 544));
        result = *(WTF::ApproximateTime **)(v2 + 528);
        if (result == (WTF::ApproximateTime *)(v2 + 16))
        {
LABEL_84:
          *(_QWORD *)(v2 + 528) = v4;
          *(_QWORD *)(v2 + 552) = v3;
          v34 = *(_QWORD *)(v2 + 544);
          goto LABEL_41;
        }
      }
      else
      {
        __break(1u);
      }
      munmap(result, *(_QWORD *)(v2 + 552));
      goto LABEL_84;
    }
    goto LABEL_44;
  }
  result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v10 + 7), &v64, v11 + 30.0);
  if (!(_BYTE)v66)
    goto LABEL_44;
  v41 = v64;
  v40 = v65;
  v42 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v43 = v42 - (_QWORD)v64;
  if (v42 >= (unint64_t)v64)
  {
    v44 = v43 + 2;
    if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v44 <= v65)
    {
      *(_WORD *)((char *)v64 + v43) = 2822;
      goto LABEL_55;
    }
    v40 = 0;
  }
  v44 = 0;
LABEL_55:
  v46 = (char *)(((unint64_t)v41 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v46 >= (char *)v41 + v44)
  {
    v44 = v46 - (char *)v41 + 8;
    if ((unint64_t)(v46 - (char *)v41) > 0xFFFFFFFFFFFFFFF7 || v44 > v40)
      goto LABEL_44;
    *(_QWORD *)v46 = v9;
  }
  if (v40)
  {
    v48 = (v10[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = v10[7];
    if (v48 + 16 >= v49)
      v48 = 0;
    if (v44 <= 0x10)
      v44 = 16;
    v50 = v48 + v44;
    if (v49 <= v50)
      v50 = 0;
    v10[9] = v50;
    v51 = (unint64_t *)(*(_QWORD *)(v10[8] + 16) + 128);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v50, v51));
    v53 = *((_DWORD *)v10 + 27);
    if (v52 == 0x80000000 || v53 != 0)
    {
      v55 = v53 + 1;
      *((_DWORD *)v10 + 27) = v55;
      if (v55 >= *((_DWORD *)v10 + 26))
      {
        if (*((_BYTE *)v10 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
        *((_DWORD *)v10 + 27) = 0;
      }
    }
    v10[6] = v9;
    goto LABEL_3;
  }
LABEL_44:
  if (v59)
  {
    if (v58 != -1)
      return (WTF::ApproximateTime *)((uint64_t (*)(IPC::Encoder **, _BYTE *))off_1E34E50C8[v58])(&v64, v57);
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::setStencilReference(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, int a2)
{
  uint64_t v2;
  unsigned __int8 ***v3;
  unint64_t v4;
  size_t v5;
  size_t v7;
  uint64_t *v8;
  double v9;
  double v10;
  unsigned __int8 ***result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  void *v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  unsigned int v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  IPC::Encoder *v63;

  v7 = *((_QWORD *)this + 3);
  v8 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v10 = v9 + 30.0;
  if (v8[6] == v7)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v60, v9 + 30.0);
  if (!v62)
    return result;
  v43 = v60;
  v42 = v61;
  v44 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v45 = v44 - v60;
  if (v44 < v60)
    goto LABEL_91;
  v46 = v45 + 2;
  if (v45 > 0xFFFFFFFFFFFFFFFDLL || v46 > v61)
  {
    v42 = 0;
LABEL_91:
    v46 = 0;
    goto LABEL_56;
  }
  *(_WORD *)(v60 + v45) = 2822;
LABEL_56:
  v48 = (_QWORD *)((v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v48 >= v43 + v46)
  {
    v46 = (unint64_t)v48 - v43 + 8;
    if ((unint64_t)v48 - v43 > 0xFFFFFFFFFFFFFFF7 || v46 > v42)
      return result;
    *v48 = v7;
  }
  if (!v42)
    return result;
  v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = v8[7];
  if (v50 + 16 >= v51)
    v50 = 0;
  if (v46 <= 0x10)
    v46 = 16;
  v52 = v50 + v46;
  if (v51 <= v52)
    v52 = 0;
  v8[9] = v52;
  v53 = (unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128);
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v52, v53));
  v55 = *((_DWORD *)v8 + 27);
  if (v54 == 0x80000000 || v55 != 0)
  {
    v57 = v55 + 1;
    *((_DWORD *)v8 + 27) = v57;
    if (v57 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = v7;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v60, v10);
  if (!v62)
    return result;
  v13 = v60;
  v12 = v61;
  v14 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = v14 - v60;
  if (v14 >= v60)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v61)
    {
      *(_WORD *)(v60 + v15) = 1287;
      goto LABEL_9;
    }
    v12 = 0;
  }
  v16 = 0;
LABEL_9:
  v18 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v18 >= v13 + v16)
  {
    v16 = (unint64_t)v18 - v13 + 4;
    if ((unint64_t)v18 - v13 > 0xFFFFFFFFFFFFFFFBLL || v16 > v12)
      goto LABEL_30;
    *v18 = a2;
  }
  if (v12)
  {
    v20 = v8[8];
    v21 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v22 = v8[7];
    if (v21 + 16 >= v22)
      v21 = 0;
    if (v16 <= 0x10)
      v16 = 16;
    v23 = v21 + v16;
    if (v22 <= v23)
      v24 = 0;
    else
      v24 = v23;
    v8[9] = v24;
    v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v24, v25));
    if (v26 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    return result;
  }
LABEL_30:
  if (!v62)
  {
    __break(1u);
LABEL_89:
    munmap(result, *(_QWORD *)(v2 + 552));
LABEL_85:
    *(_QWORD *)(v2 + 528) = v3;
    *(_QWORD *)(v2 + 552) = v7;
    v35 = *(_QWORD *)(v2 + 544);
    goto LABEL_45;
  }
  v27 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = v27 - v60;
  if (v27 < v60)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v61)
    {
      *(_WORD *)(v60 + v28) = 2821;
      v29 = v28 + 2;
    }
  }
  v30 = v8[8];
  v31 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v32 = v8[7];
  if (v31 + 16 >= v32)
    v31 = 0;
  if (v29 <= 0x10)
    v29 = 16;
  v33 = v31 + v29;
  if (v32 <= v33)
    v33 = 0;
  v8[9] = v33;
  v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
  do
    __ldaxr(v34);
  while (__stlxr(v33, v34));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)v8 + 1);
  v8 = v59;
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1287;
  *(_QWORD *)(v2 + 8) = v7;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v63 = (IPC::Encoder *)v2;
  v35 = *(_QWORD *)(v2 + 544);
  v4 = (v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = v4 + 4;
  v36 = *(_QWORD *)(v2 + 552);
  if (v36 < v4 + 4)
  {
    v58 = (2 * v36 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v7 = v58;
      v58 *= 2;
    }
    while (v7 < v5);
    result = (unsigned __int8 ***)mmap(0, v7, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v3 = result;
    memcpy(result, *(const void **)(v2 + 528), *(_QWORD *)(v2 + 544));
    result = *(unsigned __int8 ****)(v2 + 528);
    if (result == (unsigned __int8 ***)(v2 + 16))
      goto LABEL_85;
    goto LABEL_89;
  }
  v3 = *(unsigned __int8 ****)(v2 + 528);
LABEL_45:
  bzero((char *)v3 + v35, v4 - v35);
  *(_QWORD *)(v2 + 544) = v5;
  v37 = (_DWORD *)(*(_QWORD *)(v2 + 528) + v4);
  *(_QWORD *)(v2 + 536) = v37 + 1;
  *v37 = a2;
  IPC::Connection::sendMessageImpl((uint64_t)v8, (uint64_t *)&v63, 1, 0);
  v39 = v63;
  v63 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v38);
    WTF::fastFree(v40, v41);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v59);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::beginOcclusionQuery(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, int a2)
{
  uint64_t v2;
  unsigned __int8 ***v3;
  unint64_t v4;
  size_t v5;
  size_t v7;
  uint64_t *v8;
  double v9;
  double v10;
  unsigned __int8 ***result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  void *v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  unsigned int v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  IPC::Encoder *v63;

  v7 = *((_QWORD *)this + 3);
  v8 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v10 = v9 + 30.0;
  if (v8[6] == v7)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v60, v9 + 30.0);
  if (!v62)
    return result;
  v43 = v60;
  v42 = v61;
  v44 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v45 = v44 - v60;
  if (v44 < v60)
    goto LABEL_91;
  v46 = v45 + 2;
  if (v45 > 0xFFFFFFFFFFFFFFFDLL || v46 > v61)
  {
    v42 = 0;
LABEL_91:
    v46 = 0;
    goto LABEL_56;
  }
  *(_WORD *)(v60 + v45) = 2822;
LABEL_56:
  v48 = (_QWORD *)((v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v48 >= v43 + v46)
  {
    v46 = (unint64_t)v48 - v43 + 8;
    if ((unint64_t)v48 - v43 > 0xFFFFFFFFFFFFFFF7 || v46 > v42)
      return result;
    *v48 = v7;
  }
  if (!v42)
    return result;
  v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = v8[7];
  if (v50 + 16 >= v51)
    v50 = 0;
  if (v46 <= 0x10)
    v46 = 16;
  v52 = v50 + v46;
  if (v51 <= v52)
    v52 = 0;
  v8[9] = v52;
  v53 = (unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128);
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v52, v53));
  v55 = *((_DWORD *)v8 + 27);
  if (v54 == 0x80000000 || v55 != 0)
  {
    v57 = v55 + 1;
    *((_DWORD *)v8 + 27) = v57;
    if (v57 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = v7;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v60, v10);
  if (!v62)
    return result;
  v13 = v60;
  v12 = v61;
  v14 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = v14 - v60;
  if (v14 >= v60)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v61)
    {
      *(_WORD *)(v60 + v15) = 1269;
      goto LABEL_9;
    }
    v12 = 0;
  }
  v16 = 0;
LABEL_9:
  v18 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v18 >= v13 + v16)
  {
    v16 = (unint64_t)v18 - v13 + 4;
    if ((unint64_t)v18 - v13 > 0xFFFFFFFFFFFFFFFBLL || v16 > v12)
      goto LABEL_30;
    *v18 = a2;
  }
  if (v12)
  {
    v20 = v8[8];
    v21 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v22 = v8[7];
    if (v21 + 16 >= v22)
      v21 = 0;
    if (v16 <= 0x10)
      v16 = 16;
    v23 = v21 + v16;
    if (v22 <= v23)
      v24 = 0;
    else
      v24 = v23;
    v8[9] = v24;
    v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v24, v25));
    if (v26 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    return result;
  }
LABEL_30:
  if (!v62)
  {
    __break(1u);
LABEL_89:
    munmap(result, *(_QWORD *)(v2 + 552));
LABEL_85:
    *(_QWORD *)(v2 + 528) = v3;
    *(_QWORD *)(v2 + 552) = v7;
    v35 = *(_QWORD *)(v2 + 544);
    goto LABEL_45;
  }
  v27 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = v27 - v60;
  if (v27 < v60)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v61)
    {
      *(_WORD *)(v60 + v28) = 2821;
      v29 = v28 + 2;
    }
  }
  v30 = v8[8];
  v31 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v32 = v8[7];
  if (v31 + 16 >= v32)
    v31 = 0;
  if (v29 <= 0x10)
    v29 = 16;
  v33 = v31 + v29;
  if (v32 <= v33)
    v33 = 0;
  v8[9] = v33;
  v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
  do
    __ldaxr(v34);
  while (__stlxr(v33, v34));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v59, (uint64_t **)v8 + 1);
  v8 = v59;
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1269;
  *(_QWORD *)(v2 + 8) = v7;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v63 = (IPC::Encoder *)v2;
  v35 = *(_QWORD *)(v2 + 544);
  v4 = (v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = v4 + 4;
  v36 = *(_QWORD *)(v2 + 552);
  if (v36 < v4 + 4)
  {
    v58 = (2 * v36 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v7 = v58;
      v58 *= 2;
    }
    while (v7 < v5);
    result = (unsigned __int8 ***)mmap(0, v7, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v3 = result;
    memcpy(result, *(const void **)(v2 + 528), *(_QWORD *)(v2 + 544));
    result = *(unsigned __int8 ****)(v2 + 528);
    if (result == (unsigned __int8 ***)(v2 + 16))
      goto LABEL_85;
    goto LABEL_89;
  }
  v3 = *(unsigned __int8 ****)(v2 + 528);
LABEL_45:
  bzero((char *)v3 + v35, v4 - v35);
  *(_QWORD *)(v2 + 544) = v5;
  v37 = (_DWORD *)(*(_QWORD *)(v2 + 528) + v4);
  *(_QWORD *)(v2 + 536) = v37 + 1;
  *v37 = a2;
  IPC::Connection::sendMessageImpl((uint64_t)v8, (uint64_t *)&v63, 1, 0);
  v39 = v63;
  v63 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v38);
    WTF::fastFree(v40, v41);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v59);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::endOcclusionQuery(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 1276;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 1276;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

WTF *WebKit::WebGPU::RemoteRenderPassEncoderProxy::executeBundles(WTF *result, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  _QWORD *v9;
  unint64_t v10;
  WTF::ApproximateTime *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  void *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  unint64_t v43;
  IPC::Encoder *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unsigned int v58;
  WTF *v59;
  uint64_t v60;
  uint64_t *v61;
  IPC::Encoder *v62;
  unint64_t v63;
  char v64;
  IPC::Encoder *v65;
  unint64_t v66;
  unint64_t v67;

  v2 = result;
  v59 = 0;
  v60 = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
    goto LABEL_12;
  if (v3 >> 29)
  {
    __break(0xC471u);
    goto LABEL_93;
  }
  LODWORD(v60) = *(_DWORD *)(a2 + 12);
  v59 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)a2;
    v7 = 8 * v5;
    do
    {
      v8 = (IPC::Encoder *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 4) + 160))(*((_QWORD *)v2 + 4), *v6);
      if (v8)
      {
        v65 = v8;
        if (HIDWORD(v60) == (_DWORD)v60)
        {
          v9 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, HIDWORD(v60) + 1, (unint64_t)&v65);
          *((_QWORD *)v59 + HIDWORD(v60)) = *v9;
        }
        else
        {
          *((_QWORD *)v59 + HIDWORD(v60)) = v8;
        }
        ++HIDWORD(v60);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    v10 = HIDWORD(v60);
  }
  else
  {
LABEL_12:
    v10 = 0;
  }
  v11 = (WTF::ApproximateTime *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v59, v10);
  v12 = *((_QWORD *)v2 + 3);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(v11);
  v15 = v14 + 30.0;
  if (*(_QWORD *)(v13 + 48) == v12)
    goto LABEL_14;
  IPC::StreamClientConnectionBuffer::tryAcquire(v13 + 56, &v65, v14 + 30.0);
  if (!(_BYTE)v67)
    goto LABEL_53;
  v44 = v65;
  v43 = v66;
  v45 = ((unint64_t)v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v46 = v45 - (_QWORD)v65;
  if (v45 >= (unint64_t)v65)
  {
    v47 = v46 + 2;
    if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v47 <= v66)
    {
      *(_WORD *)((char *)v65 + v46) = 2822;
      goto LABEL_63;
    }
    v43 = 0;
  }
  v47 = 0;
LABEL_63:
  v49 = (char *)(((unint64_t)v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v49 >= (char *)v44 + v47)
  {
    v47 = v49 - (char *)v44 + 8;
    if ((unint64_t)(v49 - (char *)v44) > 0xFFFFFFFFFFFFFFF7 || v47 > v43)
      goto LABEL_53;
    *(_QWORD *)v49 = v12;
  }
  if (v43)
  {
    v51 = (*(_QWORD *)(v13 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = *(_QWORD *)(v13 + 56);
    if (v51 + 16 >= v52)
      v51 = 0;
    if (v47 <= 0x10)
      v47 = 16;
    v53 = v51 + v47;
    if (v52 <= v53)
      v53 = 0;
    *(_QWORD *)(v13 + 72) = v53;
    v54 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v13 + 64) + 16) + 128);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v53, v54));
    v56 = *(_DWORD *)(v13 + 108);
    if (v55 == 0x80000000 || v56 != 0)
    {
      v58 = v56 + 1;
      *(_DWORD *)(v13 + 108) = v58;
      if (v58 >= *(_DWORD *)(v13 + 104))
      {
        if (*(_BYTE *)(v13 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v13 + 84));
        *(_DWORD *)(v13 + 108) = 0;
      }
    }
    *(_QWORD *)(v13 + 48) = v12;
LABEL_14:
    IPC::StreamClientConnectionBuffer::tryAcquire(v13 + 56, &v62, v15);
    if (v64)
    {
      v65 = v62;
      v66 = v63;
      v67 = 0;
      v17 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = v17 >= (unint64_t)v62;
      v19 = v17 - (_QWORD)v62;
      if (v18)
      {
        if (v19 > 0xFFFFFFFFFFFFFFFDLL || v19 + 2 > v63)
        {
          v66 = 0;
        }
        else
        {
          *(_WORD *)((char *)v62 + v19) = 1277;
          v67 = v19 + 2;
        }
      }
      result = (WTF *)IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v65, (uint64_t)&v59);
      if (v66)
      {
        v21 = v67;
        v22 = *(_QWORD *)(v13 + 64);
        v23 = (*(_QWORD *)(v13 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = *(_QWORD *)(v13 + 56);
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v67 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        *(_QWORD *)(v13 + 72) = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *(_DWORD *)(v13 + 108))
        {
          if (*(_BYTE *)(v13 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v13 + 84));
          *(_DWORD *)(v13 + 108) = 0;
        }
        goto LABEL_53;
      }
      if (v64)
      {
        v29 = ((unint64_t)v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - (_QWORD)v62;
        if (v29 < (unint64_t)v62)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= v63)
          {
            *(_WORD *)((char *)v62 + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *(_QWORD *)(v13 + 64);
        v33 = (*(_QWORD *)(v13 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(v13 + 56);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *(_QWORD *)(v13 + 72) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *(_DWORD *)(v13 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v61, (uint64_t **)(v13 + 8));
        v37 = v61;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 1277;
        *(_QWORD *)(v38 + 8) = v12;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v65 = (IPC::Encoder *)v38;
        IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v38, (uint64_t)&v59);
        IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v65, 1, 0);
        v40 = v65;
        v65 = 0;
        if (v40)
        {
          IPC::Encoder::~Encoder(v40, v39);
          WTF::fastFree(v41, v42);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61);
        goto LABEL_53;
      }
LABEL_93:
      __break(1u);
      return result;
    }
  }
LABEL_53:
  result = v59;
  if (v59)
  {
    v59 = 0;
    LODWORD(v60) = 0;
    return (WTF *)WTF::fastFree(result, v16);
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::end(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v1)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v1;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v2 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v2 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v2 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v2 + 108) = v34;
    if (v34 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v1;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 1275;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v2 + 64);
      v13 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v2 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v2 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v2 + 64);
  v40 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v2 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v2 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v2 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 1275;
  *(_QWORD *)(v45 + 8) = v1;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPassEncoderProxy::setLabelInternal(WebKit::WebGPU::RemoteRenderPassEncoderProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1284;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1284;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteRenderPipelineProxy::~RemoteRenderPipelineProxy(WebKit::WebGPU::RemoteRenderPipelineProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 1291;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1291;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E50E8;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteRenderPipelineProxy::~RemoteRenderPipelineProxy(this);
  WTF::fastFree(v1, v2);
}

_DWORD *WebKit::WebGPU::RemoteRenderPipelineProxy::getBindGroupLayout@<X0>(WebKit::WebGPU::RemoteRenderPipelineProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  char *v4;
  int v5;
  unint64_t v6;
  size_t v7;
  size_t v10;
  uint64_t *v11;
  double v12;
  double v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  void *v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  WTF::ApproximateTime *v45;
  _DWORD *result;
  unint64_t v47;
  IPC::Encoder *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v53;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unsigned int v62;
  unint64_t v63;
  int v64;
  uint64_t *v65;
  WTF::ApproximateTime *v66;
  uint64_t *v67;
  IPC::Encoder *v68;
  unint64_t v69;
  char v70;
  IPC::Encoder *v71;
  unint64_t v72;
  unint64_t v73;

  v64 = a2;
  v65 = (uint64_t *)&v66;
  v66 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = *((_QWORD *)this + 3);
  v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(v66);
  v13 = v12 + 30.0;
  if (v11[6] == v10)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v71, v12 + 30.0);
  if (!(_BYTE)v73)
    goto LABEL_43;
  v48 = v71;
  v47 = v72;
  v49 = ((unint64_t)v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v50 = v49 - (_QWORD)v71;
  if (v49 < (unint64_t)v71)
    goto LABEL_85;
  v51 = v50 + 2;
  if (v50 > 0xFFFFFFFFFFFFFFFDLL || v51 > v72)
  {
    v47 = 0;
LABEL_85:
    v51 = 0;
    goto LABEL_51;
  }
  *(_WORD *)((char *)v71 + v50) = 2822;
LABEL_51:
  v53 = (char *)(((unint64_t)v48 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v53 >= (char *)v48 + v51)
  {
    v51 = v53 - (char *)v48 + 8;
    if ((unint64_t)(v53 - (char *)v48) > 0xFFFFFFFFFFFFFFF7 || v51 > v47)
      goto LABEL_43;
    *(_QWORD *)v53 = v10;
  }
  if (!v47)
  {
LABEL_43:
    v44 = (char *)this + 32;
    v42 = *((_QWORD *)this + 4);
    v43 = *((_QWORD *)v44 + 1);
    v45 = v66;
    result = (_DWORD *)WTF::fastMalloc((WTF *)0x38);
    result[2] = 1;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *(_QWORD *)result = off_1E34E3BF8;
    *((_QWORD *)result + 4) = v45;
    ++*(_DWORD *)(v42 + 8);
    *((_QWORD *)result + 5) = v42;
    ++*(_DWORD *)(v43 + 8);
    *((_QWORD *)result + 6) = v43;
    *a3 = result;
    return result;
  }
  v55 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = v11[7];
  if (v55 + 16 >= v56)
    v55 = 0;
  if (v51 <= 0x10)
    v51 = 16;
  v57 = v55 + v51;
  if (v56 <= v57)
    v57 = 0;
  v11[9] = v57;
  v58 = (unint64_t *)(*(_QWORD *)(v11[8] + 16) + 128);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v57, v58));
  v60 = *((_DWORD *)v11 + 27);
  if (v59 == 0x80000000 || v60 != 0)
  {
    v62 = v60 + 1;
    *((_DWORD *)v11 + 27) = v62;
    if (v62 >= *((_DWORD *)v11 + 26))
    {
      if (*((_BYTE *)v11 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
  }
  v11[6] = v10;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v11 + 7), &v68, v13);
  if (!v70)
    goto LABEL_43;
  v71 = v68;
  v72 = v69;
  v73 = 0;
  v14 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = v14 >= (unint64_t)v68;
  v16 = v14 - (_QWORD)v68;
  if (v15)
  {
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v69)
    {
      v72 = 0;
    }
    else
    {
      *(_WORD *)((char *)v68 + v16) = 1292;
      v73 = v16 + 2;
    }
  }
  v18 = IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul>(&v71, (uint64_t)&v64);
  if (v72)
  {
    v19 = v73;
    v20 = v11[8];
    v21 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v22 = v11[7];
    if (v21 + 16 >= v22)
      v21 = 0;
    if (v73 <= 0x10)
      v19 = 16;
    v23 = v21 + v19;
    if (v22 <= v23)
      v24 = 0;
    else
      v24 = v23;
    v11[9] = v24;
    v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v24, v25));
    if (v26 == 0x80000000 || *((_DWORD *)v11 + 27))
    {
      if (*((_BYTE *)v11 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
      *((_DWORD *)v11 + 27) = 0;
    }
    goto LABEL_43;
  }
  if (!v70)
  {
    __break(1u);
    goto LABEL_83;
  }
  v27 = ((unint64_t)v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = v27 - (_QWORD)v68;
  if (v27 < (unint64_t)v68)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v69)
    {
      *(_WORD *)((char *)v68 + v28) = 2821;
      v29 = v28 + 2;
    }
  }
  v30 = v11[8];
  v31 = (v11[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v32 = v11[7];
  if (v31 + 16 >= v32)
    v31 = 0;
  if (v29 <= 0x10)
    v29 = 16;
  v33 = v31 + v29;
  if (v32 <= v33)
    v33 = 0;
  v11[9] = v33;
  v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
  do
    __ldaxr(v34);
  while (__stlxr(v33, v34));
  *((_DWORD *)v11 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v11 + 1);
  v11 = v67;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1292;
  *(_QWORD *)(v3 + 8) = v10;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v71 = (IPC::Encoder *)v3;
  v5 = v64;
  v35 = *(_QWORD *)(v3 + 544);
  v6 = (v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v36 = *(_QWORD *)(v3 + 552);
  if (v36 >= v6 + 4)
  {
    v4 = *(char **)(v3 + 528);
LABEL_40:
    bzero(&v4[v35], v6 - v35);
    *(_QWORD *)(v3 + 544) = v7;
    v37 = (_DWORD *)(*(_QWORD *)(v3 + 528) + v6);
    *(_QWORD *)(v3 + 536) = v37 + 1;
    *v37 = v5;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v65);
    IPC::Connection::sendMessageImpl((uint64_t)v11, (uint64_t *)&v71, 1, 0);
    v39 = v71;
    v71 = 0;
    if (v39)
    {
      IPC::Encoder::~Encoder(v39, v38);
      WTF::fastFree(v40, v41);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
    goto LABEL_43;
  }
  v63 = (2 * v36 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v10 = v63;
    v63 *= 2;
  }
  while (v10 < v7);
  result = mmap(0, v10, 3, 4098, -1, 0);
  if (result != (_DWORD *)-1)
  {
    v4 = (char *)result;
    memcpy(result, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    v18 = *(_QWORD **)(v3 + 528);
    if (v18 == (_QWORD *)(v3 + 16))
    {
LABEL_80:
      *(_QWORD *)(v3 + 528) = v4;
      *(_QWORD *)(v3 + 552) = v10;
      v35 = *(_QWORD *)(v3 + 544);
      goto LABEL_40;
    }
LABEL_83:
    munmap(v18, *(_QWORD *)(v3 + 552));
    goto LABEL_80;
  }
  __break(0xC471u);
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteRenderPipelineProxy::setLabelInternal(WebKit::WebGPU::RemoteRenderPipelineProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1293;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1293;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteSamplerProxy::~RemoteSamplerProxy(WebKit::WebGPU::RemoteSamplerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v4 + 30.0);
  if (!v57)
    goto LABEL_78;
  v21 = v55;
  v20 = v56;
  v22 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v55;
  if (v22 < v55)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v56)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v55 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v55, v5);
  if (!v57)
    goto LABEL_78;
  v7 = v55;
  v8 = v56;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v55;
  if ((unint64_t)v9 < v55)
  {
    v11 = 0;
    if (v56)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v56)
      goto LABEL_60;
    *v9 = 1337;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v57)
  {
    __break(1u);
LABEL_92:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v55;
  v9 = (_WORD *)((v55 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_92;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v56)
    goto LABEL_92;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(v3 + 8));
  v45 = v54;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1337;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v58 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v58, 1, 0);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E5118;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteSamplerProxy::~RemoteSamplerProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteSamplerProxy::setLabelInternal(WebKit::WebGPU::RemoteSamplerProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1338;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1338;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteShaderModuleProxy::~RemoteShaderModuleProxy(WebKit::WebGPU::RemoteShaderModuleProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  IPC::Encoder *v62;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v2)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v59, v4 + 30.0);
  if (!v61)
    goto LABEL_78;
  v21 = v59;
  v20 = v60;
  v22 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v59;
  if (v22 < v59)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v60)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v59 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v2;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v3 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v3 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v3 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v3 + 108) = v35;
    if (v35 >= *(_DWORD *)(v3 + 104))
    {
      if (*(_BYTE *)(v3 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v59, v5);
  if (!v61)
    goto LABEL_78;
  v7 = v59;
  v8 = v60;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v59;
  if ((unint64_t)v9 < v59)
  {
    v11 = 0;
    if (v60)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v60)
      goto LABEL_60;
    *v9 = 1349;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v3 + 64);
      v14 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v3 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v3 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v61)
  {
    __break(1u);
LABEL_98:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v59;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_98;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v60)
    goto LABEL_98;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v3 + 64);
  v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v3 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v3 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v3 + 8));
  v45 = v58;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1349;
  *(_QWORD *)(v46 + 8) = v2;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v62 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v62, 1, 0);
  v48 = v62;
  v62 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v58);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E5140;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = *((_QWORD *)this + 2);
  if (v54)
  {
    *(_QWORD *)(v54 + 8) = 0;
    v55 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v55)
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteShaderModuleProxy::~RemoteShaderModuleProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  void *v34;
  WTF::RunLoop *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v51;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  IPC::Encoder *v64;
  uint64_t v65;
  uint64_t v66[2];
  os_unfair_lock_s *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 v70;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 6) + 176) + 96) + 96);
  v4 = *((_QWORD *)a1 + 4);
  WTF::ApproximateTime::now(a1);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) != v4)
  {
    result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v5 + 30.0);
    if (!v70)
      goto LABEL_53;
    v46 = v68;
    v45 = v69;
    v47 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - v68;
    if (v47 >= v68)
    {
      v49 = v48 + 2;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v49 <= v69)
      {
        *(_WORD *)(v68 + v48) = 2822;
LABEL_63:
        v51 = (_QWORD *)((v46 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v51 >= v46 + v49)
        {
          v49 = (unint64_t)v51 - v46 + 8;
          if ((unint64_t)v51 - v46 > 0xFFFFFFFFFFFFFFF7 || v49 > v45)
            goto LABEL_53;
          *v51 = v4;
        }
        if (!v45)
          goto LABEL_53;
        v53 = *(_QWORD *)(v3 + 64);
        v54 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v55 = *(_QWORD *)(v3 + 56);
        if (v54 + 16 >= v55)
          v54 = 0;
        if (v49 <= 0x10)
          v49 = 16;
        v56 = v54 + v49;
        if (v55 <= v56)
          v56 = 0;
        *(_QWORD *)(v3 + 72) = v56;
        v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v56, v57));
        v59 = *(_DWORD *)(v3 + 108);
        if (v58 == 0x80000000 || v59 != 0)
        {
          v61 = v59 + 1;
          *(_DWORD *)(v3 + 108) = v61;
          if (v61 >= *(_DWORD *)(v3 + 104))
          {
            if (*(_BYTE *)(v3 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
            *(_DWORD *)(v3 + 108) = 0;
          }
        }
        *(_QWORD *)(v3 + 48) = v4;
        goto LABEL_2;
      }
      v45 = 0;
    }
    v49 = 0;
    goto LABEL_63;
  }
LABEL_2:
  result = IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v68, v6);
  if (!v70)
    goto LABEL_53;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v67, (uint64_t **)(v3 + 8));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34E51D0;
  v8[1] = v2;
  v66[0] = (uint64_t)v8;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v66[1] = v9;
  v65 = v9;
  IPC::Connection::addAsyncReplyHandler((uint64_t)v67, v66);
  v11 = v70;
  if (!v70)
    goto LABEL_88;
  v11 = v68;
  v12 = v69;
  v13 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 - v68;
  if (v13 < v68)
  {
    v15 = 0;
    v10 = v69;
  }
  else
  {
    v10 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_89;
    v15 = 0;
    if (v14 + 2 <= v69)
    {
      *(_WORD *)(v68 + v14) = 1348;
      v10 = v12;
      v15 = v14 + 2;
    }
  }
  while (1)
  {
    v16 = (_QWORD *)((v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v16 >= v11 + v15)
    {
      v17 = (char *)v16 - v11;
      if ((unint64_t)v16 - v11 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_27;
      v15 = (unint64_t)(v17 + 8);
      if ((unint64_t)(v17 + 8) > v10)
        goto LABEL_27;
      *v16 = v9;
    }
    if (v10)
    {
      v18 = *(_QWORD *)(v3 + 64);
      v19 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_QWORD *)(v3 + 56);
      if (v19 + 16 >= v20)
        v19 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v21 = v19 + v15;
      if (v20 <= v21)
        v22 = 0;
      else
        v22 = v21;
      *(_QWORD *)(v3 + 72) = v22;
      v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v22, v23));
      if (v24 == 0x80000000 || *(_DWORD *)(v3 + 108))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
      goto LABEL_50;
    }
LABEL_27:
    v11 = v70;
    if (v70)
      break;
LABEL_88:
    __break(1u);
LABEL_89:
    v15 = v10;
  }
  v25 = (v68 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v26 = v25 - v68;
  if (v25 < v68)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v69)
    {
      *(_WORD *)(v68 + v26) = 2821;
      v27 = v26 + 2;
    }
  }
  v28 = *(_QWORD *)(v3 + 64);
  v29 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(_QWORD *)(v3 + 56);
  if (v29 + 16 >= v30)
    v29 = 0;
  if (v27 <= 0x10)
    v27 = 16;
  v31 = v29 + v27;
  if (v30 <= v31)
    v31 = 0;
  *(_QWORD *)(v3 + 72) = v31;
  v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
  do
    __ldaxr(v32);
  while (__stlxr(v31, v32));
  *(_DWORD *)(v3 + 108) = 0;
  v33 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v33 = 1348;
  *(_QWORD *)(v33 + 8) = v4;
  *(_QWORD *)(v33 + 528) = v33 + 16;
  *(_QWORD *)(v33 + 536) = v33 + 16;
  *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v33 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
  v64 = (IPC::Encoder *)v33;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, &v65);
  if (IPC::Connection::sendMessageImpl((uint64_t)v67, (uint64_t *)&v64, 1, 0))
  {
    IPC::Connection::takeAsyncReplyHandler(v67, v65, &v63);
    if (v63)
    {
      v36 = (unsigned int *)(WTF::RunLoop::main(v35) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v38 = v63;
      v63 = 0;
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v39 = &off_1E34E51F8;
      v39[1] = v38;
      v62 = v39;
      WTF::RunLoop::dispatch();
      if (v62)
        (*(void (**)(_QWORD *))(*v62 + 8))(v62);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v36);
      v40 = v63;
      v63 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v41 = v64;
  v64 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v34);
    WTF::fastFree(v42, v43);
  }
LABEL_50:
  v44 = v66[0];
  v66[0] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
  v2 = 0;
LABEL_53:
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteShaderModuleProxy::setLabelInternal(WebKit::WebGPU::RemoteShaderModuleProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 176) + 96) + 96);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v4 + 48) == v3)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1350;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v4 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v4 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v4 + 108))
        {
          if (*(_BYTE *)(v4 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v4 + 64);
        v25 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v4 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v4 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v4 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v4 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1350;
        *(_QWORD *)(v30 + 8) = v3;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v3;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v4 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v4 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v4 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v4 + 108) = v49;
        if (v49 >= *(_DWORD *)(v4 + 104))
        {
          if (*(_BYTE *)(v4 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
          *(_DWORD *)(v4 + 108) = 0;
        }
      }
      *(_QWORD *)(v4 + 48) = v3;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteTextureProxy::~RemoteTextureProxy(WebKit::WebGPU::RemoteTextureProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  IPC::Encoder *v62;

  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + 96);
  v3 = *((_QWORD *)this + 4);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v59, v4 + 30.0);
  if (!v61)
    goto LABEL_78;
  v21 = v59;
  v20 = v60;
  v22 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v59;
  if (v22 < v59)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v60)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v59 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v3;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v2 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v2 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v2 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v2 + 108) = v35;
    if (v35 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v59, v5);
  if (!v61)
    goto LABEL_78;
  v7 = v59;
  v8 = v60;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v59;
  if ((unint64_t)v9 < v59)
  {
    v11 = 0;
    if (v60)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v60)
      goto LABEL_60;
    *v9 = 1387;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v2 + 64);
      v14 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v2 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v2 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v61)
  {
    __break(1u);
LABEL_96:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v59;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_96;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v60)
    goto LABEL_96;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v2 + 64);
  v41 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v2 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v2 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v2 + 8));
  v45 = v58;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1387;
  *(_QWORD *)(v46 + 8) = v3;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v62 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v62, 1, 0);
  v48 = v62;
  v62 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v58);
LABEL_78:
  v51 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v51)
    WTF::ThreadSafeRefCounted<WebKit::RemoteGPUProxy,(WTF::DestructionThread)0>::deref((unsigned int *)(v51 + 24), v6);
  v52 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E5170;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = *((_QWORD *)this + 2);
  if (v54)
  {
    *(_QWORD *)(v54 + 8) = 0;
    v55 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v55)
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteTextureProxy::~RemoteTextureProxy(this);
  WTF::fastFree(v1, v2);
}

_DWORD *WebKit::WebGPU::RemoteTextureProxy::createView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  double v7;
  __int16 v9;
  __int16 v10;
  char v11;
  int v12;
  int v13;
  WTF::ApproximateTime *v14;
  double v15;
  _DWORD *result;
  WTF::StringImpl *v17;
  IPC::Encoder *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  size_t v45;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _BYTE *v49;
  void *v50;
  IPC::Encoder *v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  IPC::Encoder *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  int64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  unsigned int v73;
  unint64_t v74;
  size_t v75;
  void *v76;
  size_t v77;
  WTF::StringImpl *v78;
  __int16 v79;
  __int16 v80;
  char v81;
  int v82;
  int v83;
  char v84;
  int v85;
  int v86;
  char v87;
  unsigned __int8 v88;
  WTF::ApproximateTime *v89;
  int v90;
  char v91;
  int v92;
  char v93;
  uint64_t *v94;
  IPC::Encoder *v95;
  unint64_t v96;
  char v97;
  IPC::Encoder *v98;
  unint64_t v99;
  unint64_t v100;

  if (!*(_BYTE *)(a2 + 40))
  {
    WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    __break(1u);
    goto LABEL_116;
  }
  v4 = a1;
  v3 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v3 += 2;
  v9 = *(_WORD *)(a2 + 8);
  v10 = *(_WORD *)(a2 + 10);
  v11 = *(_BYTE *)(a2 + 12);
  v12 = *(_DWORD *)(a2 + 16);
  v92 = *(_DWORD *)(a2 + 20);
  v93 = *(_BYTE *)(a2 + 24);
  v13 = *(_DWORD *)(a2 + 28);
  v90 = *(_DWORD *)(a2 + 32);
  v91 = *(_BYTE *)(a2 + 36);
  v14 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v89 = v14;
  if (v3)
    *(_DWORD *)v3 += 2;
  v78 = v3;
  v79 = v9;
  v80 = v10;
  v81 = v11;
  v82 = v12;
  v83 = v92;
  v84 = v93;
  v85 = v13;
  v86 = v90;
  v87 = v91;
  v88 = 1;
  v5 = *(uint64_t **)(*(_QWORD *)(v4 + 48) + 96);
  v6 = *(void **)(v4 + 32);
  WTF::ApproximateTime::now(v14);
  v7 = v15 + 30.0;
  if ((void *)v5[6] != v6)
  {
    result = (_DWORD *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 7), &v98, v15 + 30.0);
    if ((_BYTE)v100)
    {
      v57 = v98;
      v58 = v99;
      v59 = ((unint64_t)v98 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v60 = v59 - (_QWORD)v98;
      if (v59 < (unint64_t)v98)
      {
        v62 = 0;
        v61 = v99;
      }
      else
      {
        v61 = 0;
        if (v60 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v62 = 0;
        }
        else
        {
          v62 = 0;
          if (v60 + 2 <= v99)
          {
            *(_WORD *)((char *)v98 + v60) = 2822;
            v61 = v58;
            v62 = v60 + 2;
          }
        }
      }
      v63 = (char *)(((unint64_t)v57 + v62 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v63 < (char *)v57 + v62)
      {
LABEL_84:
        if (v61)
        {
          v65 = (v5[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
          v66 = v5[7];
          if (v65 + 16 < v66)
            goto LABEL_86;
          goto LABEL_117;
        }
        goto LABEL_113;
      }
      v64 = v63 - (char *)v57;
      if ((unint64_t)(v63 - (char *)v57) <= 0xFFFFFFFFFFFFFFF7)
      {
        v62 = v64 + 8;
        if (v64 + 8 <= v61)
        {
          *(_QWORD *)v63 = v6;
          goto LABEL_84;
        }
      }
    }
LABEL_113:
    v24 = 1;
    goto LABEL_60;
  }
  while (2)
  {
    result = (_DWORD *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 7), &v95, v7);
    if (!v97)
    {
      v24 = 15;
      goto LABEL_60;
    }
    v18 = v95;
    v19 = v96;
    v98 = v95;
    v99 = v96;
    v100 = 0;
    v20 = ((unint64_t)v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v21 = v20 - (_QWORD)v95;
    if (v20 < (unint64_t)v95)
    {
      v22 = 0;
    }
    else
    {
      v22 = v21 + 2;
      if (v21 > 0xFFFFFFFFFFFFFFFDLL || v22 > v96)
      {
        v19 = 0;
        v22 = 0;
        v99 = 0;
      }
      else
      {
        *(_WORD *)((char *)v95 + v21) = 1385;
        v100 = v21 + 2;
      }
    }
    if (v88)
    {
      if (v22 < v19)
      {
        *((_BYTE *)v18 + v22) = 1;
        v100 = v22 + 1;
        if (!v88)
          goto LABEL_116;
        goto LABEL_17;
      }
      goto LABEL_111;
    }
    if (v22 >= v19)
    {
      v19 = 0;
      v99 = 0;
    }
    else
    {
      *((_BYTE *)v18 + v22++) = 0;
      v100 = v22;
    }
    while (1)
    {
      v25 = (char *)(((unint64_t)v18 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v25 >= (char *)v18 + v22)
      {
        v26 = v25 - (char *)v18;
        if ((unint64_t)(v25 - (char *)v18) > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_38;
        v22 = v26 + 8;
        if (v26 + 8 > v19)
          goto LABEL_38;
        *(_QWORD *)v25 = v89;
        v100 = v26 + 8;
        v19 = v99;
      }
      if (v19)
      {
        v27 = v5[8];
        v28 = (v5[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = v5[7];
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v22 <= 0x10)
          v22 = 16;
        v30 = v28 + v22;
        if (v29 <= v30)
          v31 = 0;
        else
          v31 = v30;
        v5[9] = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 == 0x80000000 || *((_DWORD *)v5 + 27))
        {
          if (*((_BYTE *)v5 + 96))
            result = (_DWORD *)MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
        v24 = 0;
        goto LABEL_60;
      }
LABEL_38:
      if (v97)
        break;
      __break(1u);
LABEL_111:
      v99 = 0;
LABEL_17:
      result = IPC::ArgumentCoder<WebKit::WebGPU::TextureViewDescriptor,void>::encode((char *)&v98, (uint64_t)&v78);
      v19 = v99;
      v22 = v100;
      v18 = v98;
    }
    v34 = ((unint64_t)v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v35 = v34 - (_QWORD)v95;
    if (v34 < (unint64_t)v95)
    {
      v36 = 0;
    }
    else
    {
      v36 = 0;
      if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v96)
      {
        *(_WORD *)((char *)v95 + v35) = 2821;
        v36 = v35 + 2;
      }
    }
    v37 = v5[8];
    v38 = (v5[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v39 = v5[7];
    if (v38 + 16 >= v39)
      v38 = 0;
    if (v36 <= 0x10)
      v36 = 16;
    v40 = v38 + v36;
    if (v39 <= v40)
      v40 = 0;
    v5[9] = v40;
    v41 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
    do
      __ldaxr(v41);
    while (__stlxr(v40, v41));
    *((_DWORD *)v5 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v94, (uint64_t **)v5 + 1);
    v5 = v94;
    v42 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v42 = 1385;
    *(_QWORD *)(v42 + 8) = v6;
    v6 = (void *)(v42 + 16);
    *(_QWORD *)(v42 + 528) = v42 + 16;
    *(_QWORD *)(v42 + 536) = v42 + 16;
    *(_OWORD *)(v42 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v42 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v42);
    v98 = (IPC::Encoder *)v42;
    v43 = v88;
    v44 = *(_QWORD *)(v42 + 544);
    v45 = v44 + 1;
    v46 = *(_QWORD *)(v42 + 552);
    if (v46 < v44 + 1)
    {
      v74 = (2 * v46 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v75 = v74;
        v74 *= 2;
      }
      while (v75 < v45);
      v77 = v75;
      result = mmap(0, v75, 3, 4098, -1, 0);
      if (result == (_DWORD *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v47 = result;
      memcpy(result, *(const void **)(v42 + 528), *(_QWORD *)(v42 + 544));
      v76 = *(void **)(v42 + 528);
      if (v76 != v6)
        munmap(v76, *(_QWORD *)(v42 + 552));
      *(_QWORD *)(v42 + 528) = v47;
      *(_QWORD *)(v42 + 552) = v77;
      v48 = *(_QWORD *)(v42 + 544);
    }
    else
    {
      v47 = *(_DWORD **)(v42 + 528);
      v48 = *(_QWORD *)(v42 + 544);
    }
    bzero((char *)v47 + v48, v44 - v48);
    *(_QWORD *)(v42 + 544) = v45;
    v49 = (_BYTE *)(*(_QWORD *)(v42 + 528) + v44);
    *(_QWORD *)(v42 + 536) = v49 + 1;
    if (v43)
    {
      *v49 = 1;
      if (v88)
      {
        IPC::ArgumentCoder<WebKit::WebGPU::TextureViewDescriptor,void>::encode((IPC::Encoder *)v42, (uint64_t)&v78);
        goto LABEL_57;
      }
LABEL_116:
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_117:
      v65 = 0;
LABEL_86:
      if (v62 <= 0x10)
        v62 = 16;
      v67 = v65 + v62;
      if (v66 <= v67)
        v68 = 0;
      else
        v68 = v67;
      v5[9] = v68;
      v69 = (unint64_t *)(*(_QWORD *)(v5[8] + 16) + 128);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v68, v69));
      v71 = *((_DWORD *)v5 + 27);
      if (v70 == 0x80000000 || v71 != 0)
      {
        v73 = v71 + 1;
        *((_DWORD *)v5 + 27) = v73;
        if (v73 >= *((_DWORD *)v5 + 26))
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
      }
      v5[6] = (uint64_t)v6;
      continue;
    }
    break;
  }
  *v49 = 0;
LABEL_57:
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v42, (uint64_t *)&v89);
  v24 = IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v98, 1, 0);
  v51 = v98;
  v98 = 0;
  if (v51)
  {
    IPC::Encoder::~Encoder(v51, v50);
    WTF::fastFree(v52, v53);
  }
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v94);
LABEL_60:
  if (v88 && (result = v78, v78 = 0, result))
  {
    if (*result != 2)
    {
      *result -= 2;
      goto LABEL_64;
    }
    result = (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
    if (!v24)
    {
LABEL_70:
      v54 = *(_QWORD *)(v4 + 40);
      v55 = (uint64_t)v89;
      v56 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v56 + 8) = 1;
      *(_QWORD *)(v56 + 24) = 0;
      *(_QWORD *)(v56 + 16) = 0;
      *(_QWORD *)v56 = off_1E34E4ED8;
      *(_QWORD *)(v56 + 32) = v55;
      ++*(_DWORD *)(v54 + 8);
      *(_QWORD *)(v56 + 40) = v54;
      ++*(_DWORD *)(v4 + 8);
      *(_QWORD *)(v56 + 48) = v4;
      *(_QWORD *)(v56 + 24) = v3;
      result = WebKit::WebGPU::RemoteTextureViewProxy::setLabelInternal((WebKit::WebGPU::RemoteTextureViewProxy *)v56, (const WTF::String *)(v56 + 24));
      *a3 = v56;
      return result;
    }
  }
  else
  {
LABEL_64:
    if (!v24)
      goto LABEL_70;
  }
  *a3 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return (_DWORD *)WTF::StringImpl::destroy(v3, v17);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

unsigned __int8 ***WebKit::WebGPU::RemoteTextureProxy::destroy(WebKit::WebGPU::RemoteTextureProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  unsigned __int8 ***result;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;

  v1 = *(_QWORD *)(*((_QWORD *)this + 6) + 96);
  v2 = *((_QWORD *)this + 4);
  WTF::ApproximateTime::now(this);
  v4 = v3 + 30.0;
  if (*(_QWORD *)(v1 + 48) == v2)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 56, &v51, v3 + 30.0);
  if (!v53)
    return result;
  v20 = v51;
  v19 = v52;
  v21 = (v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 - v51;
  if (v21 < v51)
    goto LABEL_56;
  v23 = v22 + 2;
  if (v22 > 0xFFFFFFFFFFFFFFFDLL || v23 > v52)
  {
    v19 = 0;
LABEL_56:
    v23 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v51 + v22) = 2822;
LABEL_30:
  v25 = (_QWORD *)((v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v25 >= v20 + v23)
  {
    v23 = (unint64_t)v25 - v20 + 8;
    if ((unint64_t)v25 - v20 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
      return result;
    *v25 = v2;
  }
  if (!v19)
    return result;
  v27 = (*(_QWORD *)(v1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)(v1 + 56);
  if (v27 + 16 >= v28)
    v27 = 0;
  if (v23 <= 0x10)
    v23 = 16;
  v29 = v27 + v23;
  if (v28 <= v29)
    v29 = 0;
  *(_QWORD *)(v1 + 72) = v29;
  v30 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 16) + 128);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v29, v30));
  v32 = *(_DWORD *)(v1 + 108);
  if (v31 == 0x80000000 || v32 != 0)
  {
    v34 = v32 + 1;
    *(_DWORD *)(v1 + 108) = v34;
    if (v34 >= *(_DWORD *)(v1 + 104))
    {
      if (*(_BYTE *)(v1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v1 + 84));
      *(_DWORD *)(v1 + 108) = 0;
    }
  }
  *(_QWORD *)(v1 + 48) = v2;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 56, &v51, v4);
  if (!v53)
    return result;
  v6 = v51;
  v7 = v52;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v9 = (unint64_t)v8 - v51;
  if ((unint64_t)v8 < v51)
  {
    v10 = 0;
    if (v52)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v52)
      goto LABEL_60;
    *v8 = 1386;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(v1 + 64);
      v13 = (*(_QWORD *)(v1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(v1 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(v1 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 == 0x80000000 || *(_DWORD *)(v1 + 108))
      {
        if (*(_BYTE *)(v1 + 96))
          result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v1 + 84));
        *(_DWORD *)(v1 + 108) = 0;
      }
      return result;
    }
  }
  if (!v53)
  {
    __break(1u);
LABEL_80:
    v37 = 0;
    goto LABEL_67;
  }
  v6 = v51;
  v8 = (_WORD *)((v51 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v35 = (unint64_t)v8 >= v6;
  v36 = (unint64_t)v8 - v6;
  if (!v35)
    goto LABEL_80;
  v37 = v36 + 2;
  if (v36 > 0xFFFFFFFFFFFFFFFDLL || v37 > v52)
    goto LABEL_80;
  *(_WORD *)(v6 + v36) = 2821;
LABEL_67:
  v39 = *(_QWORD *)(v1 + 64);
  v40 = (*(_QWORD *)(v1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v41 = *(_QWORD *)(v1 + 56);
  if (v40 + 16 >= v41)
    v40 = 0;
  if (v37 <= 0x10)
    v37 = 16;
  v42 = v40 + v37;
  if (v41 <= v42)
    v42 = 0;
  *(_QWORD *)(v1 + 72) = v42;
  v43 = (unint64_t *)(*(_QWORD *)(v39 + 16) + 128);
  do
    __ldaxr(v43);
  while (__stlxr(v42, v43));
  *(_DWORD *)(v1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v1 + 8));
  v44 = v50;
  v45 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v45 = 1386;
  *(_QWORD *)(v45 + 8) = v2;
  *(_QWORD *)(v45 + 528) = v45 + 16;
  *(_QWORD *)(v45 + 536) = v45 + 16;
  *(_OWORD *)(v45 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v45 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v45);
  v54 = (IPC::Encoder *)v45;
  IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v54, 1, 0);
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v48, v49);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
}

unsigned __int8 ***WebKit::WebGPU::RemoteTextureProxy::setLabelInternal(WebKit::WebGPU::RemoteTextureProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *(_QWORD *)(*((_QWORD *)this + 6) + 96);
  v4 = *((_QWORD *)this + 4);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v4)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1388;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v3 + 64);
        v15 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v3 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v3 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v3 + 108))
        {
          if (*(_BYTE *)(v3 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v3 + 64);
        v25 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v3 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v3 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v3 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v3 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1388;
        *(_QWORD *)(v30 + 8) = v4;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v4;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v3 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v3 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v3 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v3 + 108) = v49;
        if (v49 >= *(_DWORD *)(v3 + 104))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
      }
      *(_QWORD *)(v3 + 48) = v4;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

void WebKit::WebGPU::RemoteTextureViewProxy::~RemoteTextureViewProxy(WebKit::WebGPU::RemoteTextureViewProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  IPC::Encoder *v62;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 48) + 96);
  v3 = *((_QWORD *)this + 4);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v59, v4 + 30.0);
  if (!v61)
    goto LABEL_78;
  v21 = v59;
  v20 = v60;
  v22 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v59;
  if (v22 < v59)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v60)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v59 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v3;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v2 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v2 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v2 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v2 + 108) = v35;
    if (v35 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v59, v5);
  if (!v61)
    goto LABEL_78;
  v7 = v59;
  v8 = v60;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v59;
  if ((unint64_t)v9 < v59)
  {
    v11 = 0;
    if (v60)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v60)
      goto LABEL_60;
    *v9 = 1383;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v2 + 64);
      v14 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v2 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v2 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v61)
  {
    __break(1u);
LABEL_98:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v59;
  v9 = (_WORD *)((v59 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_98;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v60)
    goto LABEL_98;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v2 + 64);
  v41 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v2 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v2 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)(v2 + 8));
  v45 = v58;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 1383;
  *(_QWORD *)(v46 + 8) = v3;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v62 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v62, 1, 0);
  v48 = v62;
  v62 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v58);
LABEL_78:
  v51 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  *(_QWORD *)this = off_1E34E51A8;
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v6);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = *((_QWORD *)this + 2);
  if (v54)
  {
    *(_QWORD *)(v54 + 8) = 0;
    v55 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v55)
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteTextureViewProxy::~RemoteTextureViewProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***WebKit::WebGPU::RemoteTextureViewProxy::setLabelInternal(WebKit::WebGPU::RemoteTextureViewProxy *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned __int8 ***result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t *v50;
  IPC::Encoder *v51;
  unint64_t v52;
  char v53;
  IPC::Encoder *v54;
  unint64_t v55;
  unint64_t v56;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 48) + 96);
  v4 = *((_QWORD *)this + 4);
  WTF::ApproximateTime::now(this);
  v6 = v5 + 30.0;
  if (*(_QWORD *)(v3 + 48) == v4)
  {
    while (1)
    {
      result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v51, v6);
      if (!v53)
        break;
      v54 = v51;
      v55 = v52;
      v56 = 0;
      v8 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v51;
      v10 = v8 - (_QWORD)v51;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v52)
        {
          v55 = 0;
        }
        else
        {
          *(_WORD *)((char *)v51 + v10) = 1384;
          v56 = v10 + 2;
        }
      }
      result = (unsigned __int8 ***)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v54, (uint64_t *)a2);
      if (v55)
      {
        v13 = v56;
        v14 = *(_QWORD *)(v3 + 64);
        v15 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(v3 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v56 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(v3 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(v3 + 108))
        {
          if (*(_BYTE *)(v3 + 96))
            result = (unsigned __int8 ***)MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
        return result;
      }
      if (v53)
      {
        v21 = ((unint64_t)v51 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v22 = v21 - (_QWORD)v51;
        if (v21 < (unint64_t)v51)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v22 + 2 <= v52)
          {
            *(_WORD *)((char *)v51 + v22) = 2821;
            v23 = v22 + 2;
          }
        }
        v24 = *(_QWORD *)(v3 + 64);
        v25 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = *(_QWORD *)(v3 + 56);
        if (v25 + 16 >= v26)
          v25 = 0;
        if (v23 <= 0x10)
          v23 = 16;
        v27 = v25 + v23;
        if (v26 <= v27)
          v27 = 0;
        *(_QWORD *)(v3 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
        do
          __ldaxr(v28);
        while (__stlxr(v27, v28));
        *(_DWORD *)(v3 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, (uint64_t **)(v3 + 8));
        v29 = v50;
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 1384;
        *(_QWORD *)(v30 + 8) = v4;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v54 = (IPC::Encoder *)v30;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, (uint64_t *)a2);
        IPC::Connection::sendMessageImpl((uint64_t)v29, (uint64_t *)&v54, 1, 0);
        v32 = v54;
        v54 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v31);
          WTF::fastFree(v33, v34);
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
      }
      __break(1u);
LABEL_76:
      v35 = 0;
LABEL_77:
      v38 = 0;
LABEL_49:
      v40 = (char *)(((unint64_t)v12 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v40 >= (char *)v12 + v38)
      {
        v38 = v40 - (char *)v12 + 8;
        if ((unint64_t)(v40 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v38 > v35)
          return result;
        *(_QWORD *)v40 = v4;
      }
      if (!v35)
        return result;
      v42 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)(v3 + 56);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *(_QWORD *)(v3 + 72) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *(_DWORD *)(v3 + 108);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *(_DWORD *)(v3 + 108) = v49;
        if (v49 >= *(_DWORD *)(v3 + 104))
        {
          if (*(_BYTE *)(v3 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
          *(_DWORD *)(v3 + 108) = 0;
        }
      }
      *(_QWORD *)(v3 + 48) = v4;
    }
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v54, v5 + 30.0);
    if ((_BYTE)v56)
    {
      v12 = v54;
      v35 = v55;
      v36 = ((unint64_t)v54 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - (_QWORD)v54;
      if (v36 < (unint64_t)v54)
        goto LABEL_77;
      v38 = v37 + 2;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v55)
        goto LABEL_76;
      *(_WORD *)((char *)v54 + v37) = 2822;
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Adapter *a2)
{
  return *((_QWORD *)a2 + 10);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::BindGroup *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::BindGroupLayout *a2)
{
  return *((_QWORD *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Buffer *a2)
{
  return *((_QWORD *)a2 + 8);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::CommandBuffer *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::CommandEncoder *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToRawBacking(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 16);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 32);
}

{
  return *(_QWORD *)(a2 + 32);
}

{
  return *(_QWORD *)(a2 + 32);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::ComputePassEncoder *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::ComputePipeline *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Device *a2)
{
  return *((_QWORD *)a2 + 19);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::ExternalTexture *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::GPU *a2)
{
  return *((_QWORD *)a2 + 13);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::PipelineLayout *a2)
{
  return *((_QWORD *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::QuerySet *a2)
{
  return *((_QWORD *)a2 + 4);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Queue *a2)
{
  return *((_QWORD *)a2 + 7);
}

uint64_t WebKit::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebKit::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::RenderBundleEncoder *a2)
{
  return *((_QWORD *)a2 + 3);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E51D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E51D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &)#1},void,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t result;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  char v43;
  _QWORD v44[2];
  char v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  WTF::StringImpl *v51;
  uint64_t v52;

  v2 = a1 + 8;
  if (!a2 || (v4 = (void *)*a2) == 0)
  {
LABEL_53:
    v46 = 0;
    *(_QWORD *)&v47 = 0;
    WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0::operator()<WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, (uint64_t *)&v46);
    v24 = &v46;
    return WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v23);
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v26 = *a2;
        v27 = a2[1];
        v28 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v28)
        {
          if (v27)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
        }
      }
    }
    goto LABEL_49;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v51 = 0;
  v52 = 0;
  if (v9 < 0x5555)
  {
    if (!v9)
    {
      LODWORD(v11) = 0;
      v20 = 0;
      v10 = 0;
LABEL_23:
      v51 = 0;
      v52 = 0;
      v45 = 1;
      WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v4);
      v44[0] = 0;
      v44[1] = 0;
      WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v21);
      v43 = 1;
      v42[0] = 0;
      v46 = v10;
      v42[1] = 0;
      *(_QWORD *)&v47 = __PAIR64__(v11, v20);
      WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0::operator()<WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, (uint64_t *)&v46);
      WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v22);
      v24 = (WTF::StringImpl **)v42;
      return WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v23);
    }
    v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(48 * v9));
    LODWORD(v11) = 0;
    LODWORD(v52) = 48 * (int)v9 / 0x30u;
    v51 = v10;
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebGPU::CompilationMessage>((uint64_t)&v46, a2);
      if (!v50)
        break;
      if ((_DWORD)v11 == (_DWORD)v52)
      {
        v12 = WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v51, v11 + 1, (unint64_t)&v46);
        LODWORD(v11) = HIDWORD(v52);
        v10 = v51;
        v13 = (char *)v51 + 48 * HIDWORD(v52);
        v14 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)v13 = v14;
        v15 = *(_OWORD *)(v12 + 8);
        v16 = *(_OWORD *)(v12 + 24);
        v17 = *(_QWORD *)(v12 + 40);
      }
      else
      {
        v13 = (char *)v10 + 48 * v11;
        v18 = v46;
        v46 = 0;
        *(_QWORD *)v13 = v18;
        v15 = v47;
        v16 = v48;
        v17 = v49;
      }
      *((_QWORD *)v13 + 5) = v17;
      *(_OWORD *)(v13 + 24) = v16;
      *(_OWORD *)(v13 + 8) = v15;
      LODWORD(v11) = v11 + 1;
      HIDWORD(v52) = v11;
      if (v50)
      {
        v19 = v46;
        v46 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      if (!--v9)
      {
        v20 = v52;
        goto LABEL_23;
      }
    }
LABEL_48:
    WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v4);
LABEL_49:
    v38 = *a2;
    v39 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v40 = a2[3];
    if (v40)
    {
      if (v39)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
        v41 = *a2;
        v39 = a2[1];
        v40 = a2[3];
LABEL_52:
        *a2 = 0;
        a2[1] = 0;
        if (v40)
        {
          if (v39)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v41);
        }
        goto LABEL_53;
      }
    }
    else
    {
      v39 = 0;
    }
    v41 = 0;
    goto LABEL_52;
  }
  v29 = 0;
  LODWORD(v11) = 0;
  do
  {
    result = (uint64_t)IPC::Decoder::decode<WebKit::WebGPU::CompilationMessage>((uint64_t)&v46, a2);
    if (!v50)
      goto LABEL_48;
    if ((_DWORD)v11 == (_DWORD)v52)
    {
      result = WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v51, v11 + 1, (unint64_t)&v46);
      LODWORD(v11) = HIDWORD(v52);
      v29 = v51;
      v31 = (char *)v51 + 48 * HIDWORD(v52);
      v32 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v31 = v32;
      v33 = *(_OWORD *)(result + 8);
      v34 = *(_OWORD *)(result + 24);
      v35 = *(_QWORD *)(result + 40);
    }
    else
    {
      v31 = (char *)v29 + 48 * v11;
      v36 = v46;
      v46 = 0;
      *(_QWORD *)v31 = v36;
      v33 = v47;
      v34 = v48;
      v35 = v49;
    }
    *((_QWORD *)v31 + 5) = v35;
    *(_OWORD *)(v31 + 24) = v34;
    *(_OWORD *)(v31 + 8) = v33;
    v11 = (v11 + 1);
    HIDWORD(v52) = v11;
    if (v50)
    {
      result = (uint64_t)v46;
      v46 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v4);
        else
          *(_DWORD *)result -= 2;
      }
    }
    --v9;
  }
  while (v9);
  v20 = v52;
  if (v52 <= v11)
  {
LABEL_47:
    v10 = v51;
    goto LABEL_23;
  }
  if (!(_DWORD)v11)
  {
LABEL_45:
    v51 = 0;
    LODWORD(v52) = 0;
LABEL_46:
    WTF::fastFree(v29, v4);
    v20 = v52;
    LODWORD(v11) = HIDWORD(v52);
    goto LABEL_47;
  }
  if (v11 < 0x5555556)
  {
    v37 = WTF::fastMalloc((WTF *)(48 * v11));
    LODWORD(v52) = 48 * (int)v11 / 0x30u;
    v51 = (WTF::StringImpl *)v37;
    if ((WTF *)v37 != v29)
    {
      WTF::VectorMover<false,WebKit::WebGPU::CompilationMessage>::move(v29, (WTF *)((char *)v29 + 48 * v11), v37);
      if (v51 != v29)
        goto LABEL_46;
    }
    goto LABEL_45;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebGPU::CompilationMessage>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebGPU::CompilationMessage,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 48))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x19756EE08);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 48 * *((unsigned int *)result + 3));
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebKit::WebGPU::CompilationMessage>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebGPU::CompilationMessage>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  __int128 v8;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *(_OWORD *)((char *)v5 + 8);
      v8 = *(_OWORD *)((char *)v5 + 24);
      *(_QWORD *)(a3 + 40) = *((_QWORD *)v5 + 5);
      *(_OWORD *)(a3 + 24) = v8;
      *(_OWORD *)(a3 + 8) = v7;
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0::operator()<WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v19;
  void *v20;
  _QWORD *v21;
  __int128 v22;
  WTF *v23;
  _QWORD v24[2];

  v2 = (_QWORD *)result;
  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    if (*((_DWORD *)a2 + 3))
    {
      v21 = v2;
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *a2;
        v9 = *(_DWORD **)(*a2 + v6);
        if (v9)
          *v9 += 2;
        v10 = v8 + v6;
        v11 = *(_BYTE *)(v10 + 8);
        v22 = *(_OWORD *)(v10 + 16);
        v13 = *(_QWORD *)(v10 + 32);
        v12 = *(_QWORD *)(v10 + 40);
        v14 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v14 = 1;
        *(_QWORD *)(v14 + 8) = v9;
        *(_BYTE *)(v14 + 16) = v11;
        *(_OWORD *)(v14 + 24) = v22;
        *(_QWORD *)(v14 + 40) = v13;
        *(_QWORD *)(v14 + 48) = v12;
        v15 = v7 + 1;
        *(_QWORD *)(v5 + 8 * v7) = v14;
        v6 += 48;
        v7 = v15;
      }
      while (v15 < *((unsigned int *)a2 + 3));
      v2 = v21;
    }
    else
    {
      LODWORD(v15) = 0;
    }
  }
  else
  {
    LODWORD(v15) = 0;
    v5 = 0;
  }
  v16 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = v5;
  v24[0] = 0;
  v24[1] = 0;
  *(_DWORD *)(v16 + 16) = v3;
  *(_DWORD *)(v16 + 20) = v15;
  v23 = (WTF *)v16;
  v17 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v17 + 16))(v17, &v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      WTF::Vector<WTF::Ref<WebCore::WebGPU::CompilationMessage,WTF::RawPtrTraits<WebCore::WebGPU::CompilationMessage>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationMessage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19 + 8, v18);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  return WTF::Vector<WTF::Ref<WebCore::WebGPU::CompilationMessage,WTF::RawPtrTraits<WebCore::WebGPU::CompilationMessage>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationMessage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v18);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WebGPU::CompilationMessage,WTF::RawPtrTraits<WebCore::WebGPU::CompilationMessage>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationMessage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(WTF **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          v7 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
          WTF::fastFree(v6, a2);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteShaderModule::CompilationInfo &&,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E51F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteShaderModule::CompilationInfo &&,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E51F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WebKit::WebGPUIdentifierType,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteShaderModule::CompilationInfo,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteShaderModule::CompilationInfo &&,WebKit::WebGPU::RemoteShaderModuleProxy::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0 &,WTF::ObjectIdentifierThreadSafeAccessTraits<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::create@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  if (*(_DWORD *)(a1 + 64) == 1)
  {
    v3 = bmalloc::api::isoAllocate();
    v4 = (_QWORD *)WebCore::ImageBufferBackend::ImageBufferBackend();
    *v4 = off_1E34E5BE0;
    v4[5] = &unk_1E34E5CD8;
    result = WTF::MachSendRight::MachSendRight();
    *(_BYTE *)(v3 + 52) = 0;
    *a2 = v3;
  }
  else
  {
    result = 57;
    __break(0xC471u);
  }
  return result;
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[4];

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v3, (const WTF::MachSendRight *)(a1 + 48));
  WTF::MachSendRight::MachSendRight();
  *(_DWORD *)(a2 + 64) = 1;
  *(_BYTE *)(a2 + 72) = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
}

void `non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WebKit::ImageBufferRemoteIOSurfaceBackend::createBackendHandle(a1 - 40, a2);
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::takeBackendHandle(uint64_t a1@<X8>)
{
  int v2;
  _BYTE v3[4];

  v2 = 0;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::MachSendRight();
  *(_DWORD *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 72) = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v2);
}

void `non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::takeBackendHandle(uint64_t a1@<X8>)
{
  WebKit::ImageBufferRemoteIOSurfaceBackend::takeBackendHandle(a1);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::setBackendHandle(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a2 + 64) == 1)
    return WTF::MachSendRight::operator=();
  result = 77;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::setBackendHandle(uint64_t a1, uint64_t a2)
{
  return WebKit::ImageBufferRemoteIOSurfaceBackend::setBackendHandle(a1 - 40, a2);
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::clearBackendHandle(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  int v1;

  v1 = 0;
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1);
}

void `non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::clearBackendHandle(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  int v1;

  v1 = 0;
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::canMapBackingStore(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  return 0;
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::context(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  __break(0xC471u);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::bytesPerRow(WebKit::ImageBufferRemoteIOSurfaceBackend *this, const IntSize *a2)
{
  return WebCore::ImageBufferIOSurfaceBackend::calculateBytesPerRow((WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this + 8), a2);
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::copyNativeImage(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  __break(0xC471u);
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::createNativeImageReference(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  __break(0xC471u);
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::getPixelBuffer(WebKit::ImageBufferRemoteIOSurfaceBackend *this, const IntRect *a2, WebCore::PixelBuffer *a3)
{
  __break(0xC471u);
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::putPixelBuffer()
{
  __break(0xC471u);
}

WTF::StringImpl *WebKit::ImageBufferRemoteIOSurfaceBackend::debugDescription(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  char v7;
  int v8;
  __int16 v9;
  int v10;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  v8 = 0;
  v9 = 256;
  v10 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WebCore::operator<<();
  WTF::TextStream::release((WTF::TextStream *)&v4);
  v2 = v5;
  v5 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v1);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBackend::create(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  WebCore::IOSurface *v3;
  _QWORD *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;
  WebCore::IOSurface *v9;
  CFTypeRef cf;
  WebCore::IOSurface *v11;

  if (*(_DWORD *)(a1 + 64) == 1 && (WebCore::IOSurface::createFromSendRight(), v11))
  {
    WebCore::IOSurface::createPlatformContext(v11);
    if (cf)
    {
      bmalloc::api::isoAllocate();
      v3 = v11;
      v11 = 0;
      v9 = v3;
      v4 = (_QWORD *)WebCore::ImageBufferIOSurfaceBackend::ImageBufferIOSurfaceBackend();
      *v4 = off_1E34E5D28;
      v4[11] = &unk_1E34E5E08;
      *a2 = v4;
      CFRelease(cf);
      WebCore::IOSurface::~IOSurface(v9);
      WTF::fastFree(v5, v6);
    }
    else
    {
      *a2 = 0;
    }
    if (v11)
    {
      WebCore::IOSurface::~IOSurface(v11);
      WTF::fastFree(v7, v8);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void WebKit::ImageBufferShareableMappedIOSurfaceBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[4];
  _BYTE v4[64];
  int v5;
  char v6;

  WebCore::IOSurface::createSendRight(*(WebCore::IOSurface **)(a1 + 48));
  WTF::MachSendRight::MachSendRight();
  v5 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 64) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 72) = 1;
  if (v5 != -1)
    off_1E34E5E48[v5]((int)&v6, (WTF::MachSendRight *)v4);
  v5 = -1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
}

void `non-virtual thunk to'WebKit::ImageBufferShareableMappedIOSurfaceBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WebKit::ImageBufferShareableMappedIOSurfaceBackend::createBackendHandle(a1 - 88, a2);
}

WTF::StringImpl *WebKit::ImageBufferShareableMappedIOSurfaceBackend::debugDescription(WebKit::ImageBufferShareableMappedIOSurfaceBackend *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  char v8;
  int v9;
  __int16 v10;
  int v11;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 1;
  v9 = 0;
  v10 = 256;
  v11 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*((_QWORD *)this + 6))
    WebCore::operator<<();
  else
    WTF::TextStream::operator<<();
  WTF::TextStream::release((WTF::TextStream *)&v5);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::create(uint64_t a1@<X0>, unsigned int **a2@<X1>, WebCore::ImageBufferCGBackend **a3@<X8>)
{
  uint64_t v6;
  WebCore::ImageBufferCGBackend *v7;
  WebCore::IOSurface *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  WebCore::GraphicsContextCG *v13;
  uint64_t v14;
  WebCore::IOSurface *v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  char v19;
  WebCore::IOSurface *v20;
  CGRect v21;

  v6 = WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize();
  if ((int)v6 < 1 || v6 <= 0)
    goto LABEL_17;
  if ((unint64_t)*(char *)(a1 + 24) >= 4)
  {
    __break(0xC471u);
    __break(1u);
    return;
  }
  WebCore::IOSurface::create();
  if (!v20)
  {
LABEL_17:
    *a3 = 0;
    return;
  }
  if (WebCore::ProcessIdentity::operator BOOL())
    WebCore::IOSurface::setOwnershipIdentity();
  WebCore::IOSurface::createBitmapPlatformContext(v20);
  if (v19)
  {
    WebCore::FloatRect::operator CGRect();
    CGContextClearRect((CGContextRef)v18[1], v21);
    v7 = (WebCore::ImageBufferCGBackend *)bmalloc::api::isoAllocate();
    v8 = v20;
    v20 = 0;
    v9 = *a2;
    v10 = WebCore::ImageBufferBackend::ImageBufferBackend();
    *(_QWORD *)v10 = off_1E34E5220;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = &unk_1E34E5300;
    v11 = v18[0];
    *(_QWORD *)(v10 + 56) = v8;
    *(_QWORD *)(v10 + 64) = v11;
    v18[0] = 0;
    *(_BYTE *)(v10 + 72) = 1;
    *(_BYTE *)(v10 + 80) = 0;
    if (v9)
    {
      do
        v12 = __ldaxr(v9);
      while (__stlxr(v12 + 1, v9));
    }
    *((_QWORD *)v7 + 11) = v9;
    v13 = (WebCore::GraphicsContextCG *)WTF::fastMalloc((WTF *)0x2F0);
    WebCore::GraphicsContextCG::GraphicsContextCG();
    v14 = *((_QWORD *)v7 + 5);
    *((_QWORD *)v7 + 5) = v13;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v13 = (WebCore::GraphicsContextCG *)*((_QWORD *)v7 + 5);
    }
    WebCore::ImageBufferCGBackend::applyBaseTransform(v7, v13);
  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
  std::__optional_destruct_base<WebCore::IOSurface::LockAndContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    WebCore::IOSurface::~IOSurface(v15);
    WTF::fastFree(v16, v17);
  }
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(WebCore::IOSurface **this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;

  WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::releaseGraphicsContext((WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *)this);
  WebCore::IOSurface::moveToPool();
  v2 = (unsigned int *)this[11];
  this[11] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = v2;
      WTF::ThreadSafeRefCounted<WebCore::IOSurfacePool,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v5);
    }
  }
  if (*((_BYTE *)this + 72))
    WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(this + 8);
  std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100](this + 7, 0);
  WebCore::ImageBufferCGBackend::~ImageBufferCGBackend((WebCore::ImageBufferCGBackend *)this);
}

{
  bmalloc::api *v1;
  void *v2;

  WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

__IOSurface **WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::releaseGraphicsContext(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  __IOSurface **result;

  result = (__IOSurface **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    result = (__IOSurface **)(*((uint64_t (**)(__IOSurface **))*result + 1))(result);
  if (*((_BYTE *)this + 72))
  {
    result = WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker((__IOSurface **)this + 8);
    *((_BYTE *)this + 72) = 0;
  }
  return result;
}

void `non-virtual thunk to'WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(WebCore::IOSurface **this)
{
  WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6);
}

{
  bmalloc::api *v1;
  void *v2;

  WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(this - 6);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::canMapBackingStore(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  return 1;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v3[4];
  _BYTE v4[64];
  int v5;
  char v6;

  WebCore::IOSurface::createSendRight(*(WebCore::IOSurface **)(a1 + 56));
  WTF::MachSendRight::MachSendRight();
  v5 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 64) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 72) = 1;
  if (v5 != -1)
    off_1E34E5E48[v5]((int)&v6, (WTF::MachSendRight *)v4);
  v5 = -1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
}

void `non-virtual thunk to'WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::createBackendHandle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::createBackendHandle(a1 - 48, a2);
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::context(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  WebCore::GraphicsContextCG *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  CGContext *v7;
  uint64_t v8;
  void *v9;
  void *BaseAddress;
  const void *v11;
  IOSurfaceRef v12;
  const void *v13;
  uint64_t v14;
  NSObject *v15;
  WebCore::GraphicsContextCG *v16;
  uint64_t v17;
  WebCore::GraphicsContextCG *v18;
  uint64_t v19;
  IOSurfaceRef buffer;
  uint64_t v21;
  char v22;
  __IOSurface *v23;

  v2 = (WebCore::GraphicsContextCG *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = WebCore::GraphicsContextCG::platformContext(v2);
    if (*((_BYTE *)this + 72))
      v4 = 1;
    else
      v4 = v3 == 0;
    if (v4)
      return *((_QWORD *)this + 5);
    v7 = (CGContext *)v3;
    v8 = *((_QWORD *)this + 7);
    if (IOSurfaceLock(*(IOSurfaceRef *)(v8 + 48), 0, 0))
      goto LABEL_25;
    v9 = *(void **)(v8 + 48);
    if (v9)
      CFRetain(v9);
    buffer = (IOSurfaceRef)v9;
    v23 = 0;
    LOBYTE(v21) = 1;
    WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(&v23);
    BaseAddress = IOSurfaceGetBaseAddress((IOSurfaceRef)v9);
    if (BaseAddress == CGBitmapContextGetData(v7))
    {
      if (*((_BYTE *)this + 72))
      {
        buffer = 0;
        v11 = (const void *)*((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v9;
        if (v11)
          CFRelease(v11);
      }
      else
      {
        *((_QWORD *)this + 8) = v9;
        buffer = 0;
        *((_BYTE *)this + 72) = 1;
      }
      v5 = *((_QWORD *)this + 5);
      if ((_BYTE)v21)
        WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(&buffer);
      return v5;
    }
LABEL_24:
    WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(&buffer);
LABEL_25:
    v14 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    goto LABEL_27;
  }
  WebCore::IOSurface::createBitmapPlatformContext(*((WebCore::IOSurface **)this + 7));
  if (!v22)
  {
    std::__optional_destruct_base<WebCore::IOSurface::LockAndContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buffer);
LABEL_27:
    v15 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buffer) = 0;
      _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "ImageBufferShareableMappedIOSurfaceBitmapBackend::context() - failed to create or update the context", (uint8_t *)&buffer, 2u);
    }
    v16 = (WebCore::GraphicsContextCG *)WTF::fastMalloc((WTF *)0x2F0);
    WebCore::GraphicsContextCG::GraphicsContextCG();
    v17 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v16;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v16 = (WebCore::GraphicsContextCG *)*((_QWORD *)this + 5);
    }
    WebCore::ImageBufferCGBackend::applyBaseTransform(this, v16);
    return *((_QWORD *)this + 5);
  }
  if (*((_BYTE *)this + 72))
  {
    v12 = buffer;
    buffer = 0;
    v13 = (const void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v12;
    if (v13)
    {
      CFRelease(v13);
      if (!v22)
      {
        __break(1u);
        goto LABEL_24;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = buffer;
    buffer = 0;
    *((_BYTE *)this + 72) = 1;
  }
  std::make_unique[abi:sn180100]<WebCore::GraphicsContextCG,CGContext *>((uint64_t *)&v23);
  v18 = v23;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v23;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v18 = (WebCore::GraphicsContextCG *)*((_QWORD *)this + 5);
  }
  WebCore::ImageBufferCGBackend::applyBaseTransform(this, v18);
  v5 = *((_QWORD *)this + 5);
  std::__optional_destruct_base<WebCore::IOSurface::LockAndContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buffer);
  return v5;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::bytesPerRow(WebCore::IOSurface **this)
{
  return WebCore::IOSurface::bytesPerRow(this[7]);
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::copyNativeImage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::createNativeImageReference(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::sinkIntoNativeImage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::isInUse(WebCore::IOSurface **this)
{
  return WebCore::IOSurface::isInUse(this[7]);
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::setVolatile(WebCore::IOSurface **this)
{
  int v2;

  v2 = WebCore::IOSurface::isInUse(this[7]);
  if ((v2 & 1) == 0)
  {
    *((_BYTE *)this + 80) = 1;
    WebCore::IOSurface::setVolatile(this[7]);
  }
  return v2 ^ 1u;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::setVolatilityState(uint64_t result, char a2)
{
  *(_BYTE *)(result + 80) = a2;
  return result;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::setNonVolatile(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  *((_BYTE *)this + 80) = 0;
  return WebCore::IOSurface::setVolatile(*((WebCore::IOSurface **)this + 7));
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::volatilityState(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  return *((unsigned __int8 *)this + 80);
}

__IOSurface **WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::flushContext(__IOSurface **this)
{
  __IOSurface **v1;

  if (*((_BYTE *)this + 72))
  {
    v1 = this;
    this = WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(this + 8);
    *((_BYTE *)v1 + 72) = 0;
  }
  return this;
}

uint64_t WebKit::AudioTrackPrivateRemote::AudioTrackPrivateRemote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::ThreadSafeWeakPtrControlBlock *v8;
  const WTF::StringImpl *v9;

  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)a1 = off_1E34E5350;
  v8 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v8)
    v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = a2;
  *(_BYTE *)(a1 + 104) = 6;
  *(_QWORD *)(a1 + 112) = *a4;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)WTF::MediaTime::zeroTime(v8);
  *(_QWORD *)(a1 + 160) = a3;
  WebKit::AudioTrackPrivateRemote::updateConfiguration(a1, a4, v9);
  return a1;
}

_BYTE *WebKit::AudioTrackPrivateRemote::updateConfiguration(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v5 = *a2;
  if (*a2 != *(_QWORD *)(a1 + 112))
  {
    *(_QWORD *)(a1 + 112) = v5;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E34E5FE0;
    v6[1] = v5;
    v19 = v6;
    WebCore::TrackPrivateBase::notifyClients();
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  v7 = a1 + 120;
  if ((WTF::equal((WTF *)a2[1], *(const WTF::StringImpl **)(a1 + 120), a3) & 1) == 0)
  {
    if (*(_QWORD *)v7)
    {
      v9 = *(_DWORD *)(*(_QWORD *)v7 + 4);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 120), (WTF::StringImpl *)(a2 + 1));
      if (v9)
      {
        WTF::String::isolatedCopy();
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = &off_1E34E6008;
        v10[1] = v23;
        v20 = v10;
        WebCore::TrackPrivateBase::notifyClients();
        if (v20)
          (*(void (**)(_QWORD *))(*v20 + 8))(v20);
        v23 = 0;
      }
    }
    else
    {
      WTF::String::operator=((WTF::StringImpl **)(a1 + 120), (WTF::StringImpl *)(a2 + 1));
    }
  }
  v11 = a1 + 128;
  if ((WTF::equal((WTF *)a2[2], *(const WTF::StringImpl **)(a1 + 128), v8) & 1) == 0)
  {
    if (*(_QWORD *)v11)
    {
      v13 = *(_DWORD *)(*(_QWORD *)v11 + 4);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 128), (WTF::StringImpl *)(a2 + 2));
      if (v13)
      {
        WTF::String::isolatedCopy();
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = &off_1E34E6030;
        v14[1] = v23;
        v21 = v14;
        WebCore::TrackPrivateBase::notifyClients();
        if (v21)
          (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      }
    }
    else
    {
      WTF::String::operator=((WTF::StringImpl **)(a1 + 128), (WTF::StringImpl *)(a2 + 2));
    }
  }
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 10);
  v15 = a2[3];
  *(_QWORD *)(a1 + 149) = *(uint64_t *)((char *)a2 + 29);
  *(_QWORD *)(a1 + 144) = v15;
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 45);
  if ((WebCore::operator==((uint64_t)(a2 + 6), a1 + 56, v12) & 1) == 0)
  {
    WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 6));
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 7);
    v16 = *(_DWORD **)(a1 + 56);
    if (v16)
      *v16 += 2;
    v22 = *(_OWORD *)(a1 + 64);
    v17 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v17 = &off_1E34E5F38;
    *(_QWORD *)(v17 + 8) = v16;
    *(_OWORD *)(v17 + 16) = v22;
    v24 = (WTF::StringImpl *)v17;
    WebCore::TrackPrivateBase::notifyClients();
    if (v24)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
  }
  return WebCore::AudioTrackPrivate::setEnabled((_BYTE *)a1, *((unsigned __int8 *)a2 + 44));
}

unsigned __int8 *WebKit::AudioTrackPrivateRemote::setEnabled(WebKit::AudioTrackPrivateRemote *this, int a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  void *v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  void *v35;
  uint64_t v36;
  IPC::Encoder *v37;

  result = (unsigned __int8 *)*((_QWORD *)this + 11);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 12), &v36);
    if (v36)
    {
      if ((*((_BYTE *)this + 48) != 0) == a2)
      {
LABEL_10:
        result = WebCore::AudioTrackPrivate::setEnabled(this, a2);
        v27 = v36;
        v36 = 0;
        if (v27)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v27 + 16), v26);
        return result;
      }
      v5 = *(_QWORD *)(v36 + 24);
      v6 = *((_QWORD *)this + 14);
      v7 = *((_QWORD *)this + 20);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 1123;
      *(_QWORD *)(v8 + 8) = v7;
      v9 = (void *)(v8 + 16);
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v37 = (IPC::Encoder *)v8;
      v10 = *(_QWORD *)(v8 + 544);
      v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
      v12 = v11 + 8;
      v13 = *(_QWORD *)(v8 + 552);
      if (v13 < v11 + 8)
      {
        v28 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v29 = v28;
          v28 *= 2;
        }
        while (v29 < v12);
        v30 = (char *)mmap(0, v29, 3, 4098, -1, 0);
        if (v30 == (char *)-1)
          goto LABEL_25;
        v14 = v30;
        memcpy(v30, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
        v31 = *(void **)(v8 + 528);
        if (v31 != v9)
          munmap(v31, *(_QWORD *)(v8 + 552));
        *(_QWORD *)(v8 + 528) = v14;
        *(_QWORD *)(v8 + 552) = v29;
        v10 = *(_QWORD *)(v8 + 544);
      }
      else
      {
        v14 = *(char **)(v8 + 528);
      }
      bzero(&v14[v10], v11 - v10);
      *(_QWORD *)(v8 + 544) = v12;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 528) + v11);
      *(_QWORD *)(v8 + 536) = v15 + 1;
      *v15 = v6;
      v16 = *(_QWORD *)(v8 + 544);
      v17 = v16 + 1;
      v18 = *(_QWORD *)(v8 + 552);
      if (v18 >= v16 + 1)
      {
        v19 = *(char **)(v8 + 528);
        v20 = *(_QWORD *)(v8 + 544);
LABEL_8:
        bzero(&v19[v20], v16 - v20);
        *(_QWORD *)(v8 + 544) = v17;
        v21 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v16);
        *(_QWORD *)(v8 + 536) = v21 + 1;
        *v21 = a2;
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v37, 0, 0);
        v23 = v37;
        v37 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v22);
          WTF::fastFree(v24, v25);
        }
        goto LABEL_10;
      }
      v32 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v33 = v32;
        v32 *= 2;
      }
      while (v33 < v17);
      v34 = (char *)mmap(0, v33, 3, 4098, -1, 0);
      if (v34 != (char *)-1)
      {
        v19 = v34;
        memcpy(v34, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
        v35 = *(void **)(v8 + 528);
        if (v35 != v9)
          munmap(v35, *(_QWORD *)(v8 + 552));
        *(_QWORD *)(v8 + 528) = v19;
        *(_QWORD *)(v8 + 552) = v33;
        v20 = *(_QWORD *)(v8 + 544);
        goto LABEL_8;
      }
LABEL_25:
      __break(0xC471u);
      JUMPOUT(0x197570458);
    }
  }
  return result;
}

_BYTE *WebCore::AudioTrackPrivate::setEnabled(_BYTE *this, int a2)
{
  char v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  if (this[48] != a2)
  {
    v2 = a2;
    v3 = this;
    this[48] = a2;
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34E5F10;
    *(_BYTE *)(v4 + 8) = v2;
    v5 = v4;
    WebCore::TrackPrivateBase::notifyClients();
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    this = (_BYTE *)*((_QWORD *)v3 + 10);
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *, _QWORD))(*(_QWORD *)this + 16))(this, v3, v3[48]);
  }
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::currentTimeWithLockHeld(WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator *this)
{
  unsigned __int8 v2;
  double v4;
  WTF::MediaTime *v5;
  double v6;
  uint64_t v7;
  WTF::MediaTime *v8;
  const WTF::MediaTime *v9;
  const WTF::MediaTime *v10;
  _QWORD *v11;
  WebCore::MediaSourcePrivate *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::MediaTime *v18[2];

  v2 = atomic_load((unsigned __int8 *)this + 1);
  if ((v2 & 1) == 0)
    return *((_QWORD *)this + 1);
  v4 = *((double *)this + 4);
  v5 = (WTF::MediaTime *)WTF::MonotonicTime::now(this);
  v16 = WTF::MediaTime::createWithDouble(v5, v4 * (v6 - *((double *)this + 3)));
  v17 = v7;
  v18[0] = (WTF::MediaTime *)WTF::MediaTime::operator+();
  v18[1] = v8;
  v9 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v18[0]);
  v10 = (const WTF::MediaTime *)v18;
  if (WTF::MediaTime::compare((WTF::MediaTime *)v18, v9) == -1)
    v10 = v9;
  v11 = (_QWORD *)*((_QWORD *)this + 5);
  v12 = (WebCore::MediaSourcePrivate *)v11[59];
  if (v12)
  {
    v13 = WebCore::MediaSourcePrivate::duration(v12);
  }
  else
  {
    v13 = v11[27];
    v14 = v11[28];
  }
  v16 = v13;
  v17 = v14;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v16, v10) == -1)
    v15 = &v16;
  else
    v15 = (uint64_t *)v10;
  return *v15;
}

uint64_t WebKit::MediaPlayerPrivateRemote::duration(WebKit::MediaPlayerPrivateRemote *this)
{
  WebCore::MediaSourcePrivate *v2;

  v2 = (WebCore::MediaSourcePrivate *)*((_QWORD *)this + 59);
  if (v2)
    return WebCore::MediaSourcePrivate::duration(v2);
  else
    return *((_QWORD *)this + 27);
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime(unsigned __int8 *this, uint64_t *a2)
{
  unsigned __int8 *v3;
  uint64_t v5;

  v3 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v5 = *a2;
  *(_QWORD *)(v3 + 13) = *(uint64_t *)((char *)a2 + 5);
  *((_QWORD *)v3 + 1) = v5;
  *((_QWORD *)v3 + 3) = a2[3];
  atomic_store(*((_BYTE *)a2 + 16), v3 + 1);
  LODWORD(v5) = __ldxr(v3);
  if ((_DWORD)v5 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setRate(unsigned __int8 *this, double a2)
{
  unsigned __int8 *v3;
  int v5;

  v3 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  *((double *)v3 + 4) = a2;
  v5 = __ldxr(v3);
  if (v5 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::MediaPlayerPrivateRemote(uint64_t a1, WebCore::MediaPlayer *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  const WTF::Logger *v18;
  const void *v19;
  WebCore::VideoLayerManagerObjC *v20;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[4];

  WebCore::MediaPlayerPrivateInterface::MediaPlayerPrivateInterface((WebCore::MediaPlayerPrivateInterface *)a1);
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)a1 = off_1E34E53F8;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = &unk_1E34E5930;
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 10000000;
  *(_BYTE *)(a1 + 84) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_1978CE350;
  *(_QWORD *)(a1 + 104) = a1;
  v11 = WebCore::MediaPlayer::mediaPlayerLogger(a2);
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a1 + 120) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 664))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  v14 = *(WTF::ThreadSafeWeakPtrControlBlock **)a2;
  if (*(_QWORD *)a2)
    v14 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v14);
  *(_QWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 136) = a2;
  WebCore::MediaPlayer::createResourceLoader(a2);
  v15 = (unsigned int *)(v29[0] + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(a1 + 144) = v29[0];
  v17 = v29[0];
  v29[0] = 0;
  if (v17)
    WTF::ThreadSafeRefCounted<WebCore::PlatformMediaResourceLoader,(WTF::DestructionThread)1>::deref((unsigned int *)(v17 + 8));
  v18 = *(const WTF::Logger **)(a1 + 112);
  v19 = *(const void **)(a1 + 120);
  v20 = (WebCore::VideoLayerManagerObjC *)WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)(a1 + 152) = WebCore::VideoLayerManagerObjC::VideoLayerManagerObjC(v20, v18, v19);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a5;
  *(_BYTE *)(a1 + 176) = a3;
  *(_QWORD *)(a1 + 184) = a4;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 10000000;
  *(_BYTE *)(a1 + 228) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 10000000;
  *(_BYTE *)(a1 + 244) = 1;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 10000000;
  *(_BYTE *)(a1 + 260) = 1;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 10000000;
  *(_BYTE *)(a1 + 276) = 1;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 10000000;
  *(_BYTE *)(a1 + 292) = 1;
  *(_BYTE *)(a1 + 328) = 0;
  *(_WORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 338) = 0;
  *(_QWORD *)(a1 + 340) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 377) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_WORD *)(a1 + 432) = 257;
  *(_BYTE *)(a1 + 434) = 1;
  *(_DWORD *)(a1 + 435) = 0;
  *(_DWORD *)(a1 + 438) = 0;
  WebCore::PlatformTimeRanges::PlatformTimeRanges((WebCore::PlatformTimeRanges *)(a1 + 448));
  *(_BYTE *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 1065353216;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 1065353216;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 1065353216;
  WebCore::MediaPlayer::documentSecurityOrigin(a2);
  *(_QWORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 656) = 1;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_BYTE *)(a1 + 680) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 688) = _Q0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_DWORD *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  v26 = *(_QWORD *)(a1 + 112);
  v27 = *(_QWORD *)(a1 + 120);
  v29[0] = "MediaPlayerPrivateRemote";
  v29[1] = 25;
  v29[2] = "MediaPlayerPrivateRemote";
  v29[3] = v27;
  if (*(_BYTE *)(v26 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v29);
  return a1;
}

uint64_t WebKit::MediaPlayerPrivateRemote::logger(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t WebKit::MediaPlayerPrivateRemote::logIdentifier(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 15);
}

char *WebKit::MediaPlayerPrivateRemote::logChannel(WebKit::MediaPlayerPrivateRemote *this)
{
  return &WebKit2LogMedia;
}

const char *WebKit::MediaPlayerPrivateRemote::logClassName(WebKit::MediaPlayerPrivateRemote *this)
{
  return "MediaPlayerPrivateRemote";
}

void WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WebKit::RemoteAudioSourceProvider *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  WTF::StringImpl *v12;
  const char *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  double v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  _QWORD v69[2];
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;

  v2 = *((_QWORD *)this + 14);
  v3 = *((_QWORD *)this + 15);
  v70 = "MediaPlayerPrivateRemote";
  v71 = 25;
  v72 = "~MediaPlayerPrivateRemote";
  v73 = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v70);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 19) + 32))(*((_QWORD *)this + 19));
  WebKit::RemoteMediaPlayerManager::deleteRemoteMediaPlayer(*((uint64_t **)this + 21), *((_QWORD *)this + 23));
  v5 = (WebKit::RemoteAudioSourceProvider *)*((_QWORD *)this + 58);
  if (v5)
    WebKit::RemoteAudioSourceProvider::close(v5);
  v70 = (const char *)*((_QWORD *)this + 92);
  v71 = *((_QWORD *)this + 93);
  v69[0] = 0;
  *((_QWORD *)this + 92) = 0;
  v69[1] = 0;
  *((_QWORD *)this + 93) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v69, v4);
  if (HIDWORD(v71))
  {
    v7 = v70;
    v8 = 8 * HIDWORD(v71);
    do
    {
      v9 = *(_QWORD *)v7;
      *(_QWORD *)v7 = 0;
      v7 += 8;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v8 -= 8;
    }
    while (v8);
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v70, v6);
  v10 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  v11 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = &off_1E34E6080;
  *((_QWORD *)v11 + 1) = v10;
  v70 = v11;
  WTF::ensureOnMainThread();
  v13 = v70;
  v70 = 0;
  if (v13)
    (*(void (**)(const char *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 736, v12);
  v17 = (unsigned int *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  v21 = (unsigned int *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v21)
  {
    v22 = v21 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v21 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  v25 = *((_QWORD *)this + 81);
  if (v25)
  {
    v26 = *(unsigned int *)(v25 - 4);
    if ((_DWORD)v26)
    {
      v27 = (unsigned int *)*((_QWORD *)this + 81);
      do
      {
        v28 = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v27);
        if ((v29 & 1) == 0)
        {
          v30 = v27[6];
          if ((_DWORD)v30 != -1)
            ((void (*)(const char **, unsigned int *, double))off_1E34E5F50[v30])(&v70, v27, v28);
          v27[6] = -1;
        }
        v27 += 10;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)(v25 - 16), v16);
  }
  v31 = *((unsigned int *)this + 160);
  if ((_DWORD)v31 != -1)
    ((void (*)(const char **, char *))off_1E34E5F50[v31])(&v70, (char *)this + 616);
  *((_DWORD *)this + 160) = -1;
  v32 = (WTF *)*((_QWORD *)this + 74);
  while (v32)
  {
    v33 = v32;
    v32 = *(WTF **)v32;
    v34 = (unsigned int *)*((_QWORD *)v33 + 3);
    *((_QWORD *)v33 + 3) = 0;
    if (v34)
    {
      v35 = v34 + 2;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v34 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
      }
    }
    WTF::fastFree(v33, v16);
  }
  v38 = (WTF *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v38)
    WTF::fastFree(v38, v16);
  v39 = (WTF *)*((_QWORD *)this + 69);
  while (v39)
  {
    v40 = v39;
    v39 = *(WTF **)v39;
    v41 = (unsigned int *)*((_QWORD *)v40 + 3);
    *((_QWORD *)v40 + 3) = 0;
    if (v41)
    {
      v42 = v41 + 2;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v41 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
      }
    }
    WTF::fastFree(v40, v16);
  }
  v45 = (WTF *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v45)
    WTF::fastFree(v45, v16);
  v46 = (WTF *)*((_QWORD *)this + 64);
  while (v46)
  {
    v47 = v46;
    v46 = *(WTF **)v46;
    v48 = (unsigned int *)*((_QWORD *)v47 + 3);
    *((_QWORD *)v47 + 3) = 0;
    if (v48)
    {
      v49 = v48 + 2;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v48 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
      }
    }
    WTF::fastFree(v47, v16);
  }
  v52 = (WTF *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v52)
    WTF::fastFree(v52, v16);
  v53 = *((_QWORD *)this + 61);
  if (v53)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v53, v16);
  v54 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v54)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v54 + 8), v16);
  v55 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v55)
    WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v55 + 8));
  v56 = (WTF *)*((_QWORD *)this + 56);
  if (v56)
  {
    *((_QWORD *)this + 56) = 0;
    *((_DWORD *)this + 114) = 0;
    WTF::fastFree(v56, v16);
  }
  if (*((_BYTE *)this + 328))
  {
    v57 = (WTF *)*((_QWORD *)this + 39);
    if (v57)
    {
      *((_QWORD *)this + 39) = 0;
      *((_DWORD *)this + 80) = 0;
      WTF::fastFree(v57, v16);
    }
  }
  v58 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v61)
    CFRelease(v61);
  v62 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v63)
    WTF::ThreadSafeRefCounted<WebCore::PlatformMediaResourceLoader,(WTF::DestructionThread)1>::deref((unsigned int *)(v63 + 8));
  v64 = (unsigned __int8 *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v64)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v64, v16);
  v65 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v65)
  {
    v66 = v65 + 2;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v65 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  WebCore::MediaPlayerPrivateInterface::~MediaPlayerPrivateInterface(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote(WebKit::MediaPlayerPrivateRemote *this)
{
  WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote((WebKit::MediaPlayerPrivateRemote *)((char *)this - 56));
}

{
  WTF *v1;
  void *v2;

  WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote((WebKit::MediaPlayerPrivateRemote *)((char *)this - 56));
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::prepareForPlayback(uint64_t a1, char a2, char a3, char a4, char a5, char a6)
{
  unsigned __int8 *result;
  float v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  size_t v55;
  unint64_t v56;
  char *v57;
  float *v58;
  uint64_t v59;
  size_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  _BYTE *v64;
  void *v65;
  WTF *v66;
  void *v67;
  unsigned __int8 **v68;
  unint64_t v69;
  size_t v70;
  char *v71;
  void *v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  void *v76;
  unint64_t v77;
  size_t v78;
  char *v79;
  void *v80;
  unint64_t v81;
  size_t v82;
  char *v83;
  void *v84;
  unint64_t v85;
  size_t v86;
  char *v87;
  void *v88;
  unint64_t v89;
  size_t v90;
  char *v91;
  void *v92;
  unint64_t v93;
  size_t v94;
  char *v95;
  void *v96;
  unint64_t v97;
  size_t v98;
  char *v99;
  void *v100;
  size_t v101;
  void *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  IPC::Encoder *v107;

  result = *(unsigned __int8 **)(a1 + 128);
  if (!result)
    return result;
  result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), &v106);
  if (!v106)
    return result;
  v13 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v106 + 8) + 8) + 280))(*(_QWORD *)(*(_QWORD *)(v106 + 8) + 8));
  v104 = *(_BYTE *)(v106 + 233);
  v105 = *(_QWORD *)(v106 + 200);
  v14 = *(_BYTE *)(v106 + 234);
  v103 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                   + 24);
  v15 = *(_QWORD *)(a1 + 184);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 1143;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  v102 = (void *)(v16 + 16);
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v107 = (IPC::Encoder *)v16;
  v17 = *(_QWORD *)(v16 + 544);
  v18 = v17 + 1;
  v19 = *(_QWORD *)(v16 + 552);
  if (v19 < v17 + 1)
  {
    v69 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v70 = v69;
      v69 *= 2;
    }
    while (v70 < v18);
    v101 = v70;
    v71 = (char *)mmap(0, v70, 3, 4098, -1, 0);
    if (v71 == (char *)-1)
    {
      __break(0xC471u);
      goto LABEL_80;
    }
    v20 = v71;
    memcpy(v71, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
    v72 = *(void **)(v16 + 528);
    if (v72 != v102)
      munmap(v72, *(_QWORD *)(v16 + 552));
    *(_QWORD *)(v16 + 528) = v20;
    *(_QWORD *)(v16 + 552) = v101;
    v21 = *(_QWORD *)(v16 + 544);
  }
  else
  {
    v20 = *(char **)(v16 + 528);
    v21 = *(_QWORD *)(v16 + 544);
  }
  bzero(&v20[v21], v17 - v21);
  *(_QWORD *)(v16 + 544) = v18;
  v22 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v17);
  *(_QWORD *)(v16 + 536) = v22 + 1;
  *v22 = a2;
  v23 = *(_QWORD *)(v16 + 544);
  v24 = v23 + 1;
  v25 = *(_QWORD *)(v16 + 552);
  if (v25 < v23 + 1)
  {
    v73 = (2 * v25 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v74 = v73;
      v73 *= 2;
    }
    while (v74 < v24);
    v75 = (char *)mmap(0, v74, 3, 4098, -1, 0);
    if (v75 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1975716C4);
    }
    v26 = v75;
    memcpy(v75, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
    v76 = *(void **)(v16 + 528);
    if (v76 != v102)
      munmap(v76, *(_QWORD *)(v16 + 552));
    *(_QWORD *)(v16 + 528) = v26;
    *(_QWORD *)(v16 + 552) = v74;
    v27 = *(_QWORD *)(v16 + 544);
  }
  else
  {
    v26 = *(char **)(v16 + 528);
    v27 = *(_QWORD *)(v16 + 544);
  }
  bzero(&v26[v27], v23 - v27);
  *(_QWORD *)(v16 + 544) = v24;
  v28 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v23);
  *(_QWORD *)(v16 + 536) = v28 + 1;
  *v28 = a3;
  v29 = *(_QWORD *)(v16 + 544);
  v30 = v29 + 1;
  v31 = *(_QWORD *)(v16 + 552);
  if (v31 < v29 + 1)
  {
    v77 = (2 * v31 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v78 = v77;
      v77 *= 2;
    }
    while (v78 < v30);
    v79 = (char *)mmap(0, v78, 3, 4098, -1, 0);
    if (v79 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1975716CCLL);
    }
    v32 = v79;
    memcpy(v79, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
    v80 = *(void **)(v16 + 528);
    if (v80 != v102)
      munmap(v80, *(_QWORD *)(v16 + 552));
    *(_QWORD *)(v16 + 528) = v32;
    *(_QWORD *)(v16 + 552) = v78;
    v33 = *(_QWORD *)(v16 + 544);
  }
  else
  {
    v32 = *(char **)(v16 + 528);
    v33 = *(_QWORD *)(v16 + 544);
  }
  bzero(&v32[v33], v29 - v33);
  *(_QWORD *)(v16 + 544) = v30;
  v34 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v29);
  *(_QWORD *)(v16 + 536) = v34 + 1;
  *v34 = a4;
  v35 = *(_QWORD *)(v16 + 544);
  v36 = v35 + 1;
  v37 = *(_QWORD *)(v16 + 552);
  if (v37 < v35 + 1)
  {
    v81 = (2 * v37 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v82 = v81;
      v81 *= 2;
    }
    while (v82 < v36);
    v83 = (char *)mmap(0, v82, 3, 4098, -1, 0);
    if (v83 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1975716D4);
    }
    v38 = v83;
    memcpy(v83, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
    v84 = *(void **)(v16 + 528);
    if (v84 != v102)
      munmap(v84, *(_QWORD *)(v16 + 552));
    *(_QWORD *)(v16 + 528) = v38;
    *(_QWORD *)(v16 + 552) = v82;
    v39 = *(_QWORD *)(v16 + 544);
  }
  else
  {
    v38 = *(char **)(v16 + 528);
    v39 = *(_QWORD *)(v16 + 544);
  }
  bzero(&v38[v39], v35 - v39);
  *(_QWORD *)(v16 + 544) = v36;
  v40 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v35);
  *(_QWORD *)(v16 + 536) = v40 + 1;
  *v40 = v14;
  v41 = *(_QWORD *)(v16 + 544);
  v42 = v41 + 1;
  v43 = *(_QWORD *)(v16 + 552);
  if (v43 < v41 + 1)
  {
    v85 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v86 = v85;
      v85 *= 2;
    }
    while (v86 < v42);
    v87 = (char *)mmap(0, v86, 3, 4098, -1, 0);
    if (v87 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1975716DCLL);
    }
    v44 = v87;
    memcpy(v87, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
    v88 = *(void **)(v16 + 528);
    if (v88 != v102)
      munmap(v88, *(_QWORD *)(v16 + 552));
    *(_QWORD *)(v16 + 528) = v44;
    *(_QWORD *)(v16 + 552) = v86;
    v45 = *(_QWORD *)(v16 + 544);
  }
  else
  {
    v44 = *(char **)(v16 + 528);
    v45 = *(_QWORD *)(v16 + 544);
  }
  bzero(&v44[v45], v41 - v45);
  *(_QWORD *)(v16 + 544) = v42;
  v46 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v41);
  *(_QWORD *)(v16 + 536) = v46 + 1;
  *v46 = a5;
  v47 = *(_QWORD *)(v16 + 544);
  v48 = v47 + 1;
  v49 = *(_QWORD *)(v16 + 552);
  if (v49 < v47 + 1)
  {
    v89 = (2 * v49 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v90 = v89;
      v89 *= 2;
    }
    while (v90 < v48);
    v91 = (char *)mmap(0, v90, 3, 4098, -1, 0);
    if (v91 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1975716E4);
    }
    v50 = v91;
    memcpy(v91, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
    v92 = *(void **)(v16 + 528);
    if (v92 != v102)
      munmap(v92, *(_QWORD *)(v16 + 552));
    *(_QWORD *)(v16 + 528) = v50;
    *(_QWORD *)(v16 + 552) = v90;
    v51 = *(_QWORD *)(v16 + 544);
  }
  else
  {
    v50 = *(char **)(v16 + 528);
    v51 = *(_QWORD *)(v16 + 544);
  }
  bzero(&v50[v51], v47 - v51);
  *(_QWORD *)(v16 + 544) = v48;
  v52 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v47);
  *(_QWORD *)(v16 + 536) = v52 + 1;
  *v52 = a6;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v16, &v105);
  v53 = *(_QWORD *)(v16 + 544);
  v54 = (v53 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v55 = v54 + 4;
  v56 = *(_QWORD *)(v16 + 552);
  if (v56 < v54 + 4)
  {
    v93 = (2 * v56 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v94 = v93;
      v93 *= 2;
    }
    while (v94 < v55);
    v95 = (char *)mmap(0, v94, 3, 4098, -1, 0);
    if (v95 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1975716ECLL);
    }
    v57 = v95;
    memcpy(v95, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
    v96 = *(void **)(v16 + 528);
    if (v96 != v102)
      munmap(v96, *(_QWORD *)(v16 + 552));
    *(_QWORD *)(v16 + 528) = v57;
    *(_QWORD *)(v16 + 552) = v94;
    v53 = *(_QWORD *)(v16 + 544);
  }
  else
  {
    v57 = *(char **)(v16 + 528);
  }
  bzero(&v57[v53], v54 - v53);
  *(_QWORD *)(v16 + 544) = v55;
  v58 = (float *)(*(_QWORD *)(v16 + 528) + v54);
  *(_QWORD *)(v16 + 536) = v58 + 1;
  *v58 = v13;
  v59 = *(_QWORD *)(v16 + 544);
  v60 = v59 + 1;
  v61 = *(_QWORD *)(v16 + 552);
  if (v61 < v59 + 1)
  {
    v97 = (2 * v61 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v98 = v97;
      v97 *= 2;
    }
    while (v98 < v60);
    v99 = (char *)mmap(0, v98, 3, 4098, -1, 0);
    if (v99 != (char *)-1)
    {
      v62 = v99;
      memcpy(v99, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
      v100 = *(void **)(v16 + 528);
      if (v100 != v102)
        munmap(v100, *(_QWORD *)(v16 + 552));
      *(_QWORD *)(v16 + 528) = v62;
      *(_QWORD *)(v16 + 552) = v98;
      v63 = *(_QWORD *)(v16 + 544);
      goto LABEL_19;
    }
    __break(0xC471u);
LABEL_80:
    JUMPOUT(0x1975716BCLL);
  }
  v62 = *(char **)(v16 + 528);
  v63 = *(_QWORD *)(v16 + 544);
LABEL_19:
  bzero(&v62[v63], v59 - v63);
  *(_QWORD *)(v16 + 544) = v60;
  v64 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v59);
  *(_QWORD *)(v16 + 536) = v64 + 1;
  *v64 = v104;
  IPC::Connection::sendMessageImpl(v103, (uint64_t *)&v107, 0, 0);
  result = (unsigned __int8 *)v107;
  v107 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v65);
    result = (unsigned __int8 *)WTF::fastFree(v66, v67);
  }
  v68 = (unsigned __int8 **)v106;
  v106 = 0;
  if (v68)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v68);
  return result;
}

void WebKit::MediaPlayerPrivateRemote::load(WebKit::MediaPlayerPrivateRemote *this, const WTF::URL *a2, const WebCore::ContentType *a3, const WTF::String *a4)
{
  uint64_t v8;
  WebKit::SandboxExtensionImpl *v9;
  unint64_t v10;
  IPC::Encoder *v11;
  WTF::StringImpl *v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  int v15;
  os_unfair_lock_s *v16;
  char v17;
  WTF::ThreadSafeWeakPtrControlBlock *v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  unsigned __int8 **v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  void *v39;
  WTF::StringImpl *v40;
  const char **v41;
  WebKit::SandboxExtensionImpl *v42;
  char v43;
  _BYTE v44[32];
  IPC::Encoder *v45;
  char v46;

  LOBYTE(v42) = 0;
  v43 = 0;
  if (!WTF::URL::protocolIs())
    goto LABEL_20;
  v41 = 0;
  WTF::URL::fileSystemPath(a2);
  v8 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this + 21));
  if (WebKit::GPUProcessConnection::waitForDidInitialize((WebKit::GPUProcessConnection *)v8)
    && *(_BYTE *)(v8 + 104))
  {
    if (v40)
    {
      v9 = (WebKit::SandboxExtensionImpl *)*((_QWORD *)v40 + 1);
      v10 = *((unsigned int *)v40 + 1) | ((unint64_t)((*((_DWORD *)v40 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    v44[0] = *(_BYTE *)(v8 + 72);
    *(_OWORD *)&v44[1] = *(_OWORD *)(v8 + 73);
    *(_OWORD *)&v44[16] = *(_OWORD *)(v8 + 88);
    WebKit::SandboxExtension::createHandleForReadByAuditToken(v9, (WebKit::SandboxExtensionImpl *)v10, v44, (uint64_t)&v45);
  }
  else
  {
    WebKit::SandboxExtension::createHandle(0, (uint64_t)&v45);
  }
  if (v46)
  {
    v11 = v45;
    v45 = 0;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v45);
    v41 = 0;
    v42 = v11;
    v15 = 1;
    v43 = 1;
  }
  else
  {
    WTFLogAlways();
    *((_BYTE *)this + 336) = 4;
    v13 = (unsigned __int8 *)*((_QWORD *)this + 16);
    if (v13)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v13, *((_QWORD *)this + 17), v44);
      if (*(_QWORD *)v44)
      {
        WebCore::MediaPlayer::networkStateChanged(*(WebCore::MediaPlayer **)v44);
        v14 = *(unsigned __int8 ***)v44;
        *(_QWORD *)v44 = 0;
        if (v14)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v14);
      }
    }
    v15 = 0;
  }
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v12);
    else
      *(_DWORD *)v40 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v41);
  if (v15)
  {
LABEL_20:
    v16 = *(os_unfair_lock_s **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                                        + 21))
                               + 24);
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*((unsigned __int8 **)this + 16), *((_QWORD *)this + 17), &v41);
    v17 = *((_BYTE *)v41 + 266);
    v18 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 6);
    if (v18)
      v19 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v18);
    else
      v19 = 0;
    v20 = *((_QWORD *)this + 23);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v21 = &off_1E34E60A8;
    v21[1] = v19;
    v21[2] = this;
    v21[3] = this;
    v22 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v23 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v23 = 1133;
    *(_QWORD *)(v23 + 8) = v20;
    *(_QWORD *)(v23 + 528) = v23 + 16;
    *(_QWORD *)(v23 + 536) = v23 + 16;
    *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v23 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
    v45 = (IPC::Encoder *)v23;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v23, (uint64_t *)a2);
    IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>((IPC::Encoder *)v23, (uint64_t)&v42);
    IPC::ArgumentCoder<WebCore::ContentType,void>::encode((IPC::Encoder *)v23, (uint64_t *)a3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v23, (uint64_t *)a4);
    v24 = *(_QWORD *)(v23 + 544);
    v25 = v24 + 1;
    v26 = *(_QWORD *)(v23 + 552);
    if (v26 < v24 + 1)
    {
      v36 = (2 * v26 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v37 = v36;
        v36 *= 2;
      }
      while (v37 < v25);
      v38 = (char *)mmap(0, v37, 3, 4098, -1, 0);
      if (v38 == (char *)-1)
      {
        __break(0xC471u);
        return;
      }
      v27 = v38;
      memcpy(v38, *(const void **)(v23 + 528), *(_QWORD *)(v23 + 544));
      v39 = *(void **)(v23 + 528);
      if (v39 != (void *)(v23 + 16))
        munmap(v39, *(_QWORD *)(v23 + 552));
      *(_QWORD *)(v23 + 528) = v27;
      *(_QWORD *)(v23 + 552) = v37;
      v28 = *(_QWORD *)(v23 + 544);
    }
    else
    {
      v27 = *(char **)(v23 + 528);
      v28 = *(_QWORD *)(v23 + 544);
    }
    bzero(&v27[v28], v24 - v28);
    *(_QWORD *)(v23 + 544) = v25;
    v29 = (_BYTE *)(*(_QWORD *)(v23 + 528) + v24);
    *(_QWORD *)(v23 + 536) = v29 + 1;
    *v29 = v17;
    *(_QWORD *)v44 = v21;
    *(_QWORD *)&v44[8] = v22;
    IPC::Connection::sendMessageWithAsyncReply(v16, &v45, (uint64_t *)v44, 0, 0);
    v31 = *(_QWORD *)v44;
    *(_QWORD *)v44 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v45;
    v45 = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v30);
      WTF::fastFree(v33, v34);
    }
    v35 = (unsigned __int8 **)v41;
    v41 = 0;
    if (v35)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v35);
  }
  if (v43)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v42);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::cancelLoad(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1125;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::prepareToPlay(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1145;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::play(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  *((_BYTE *)this + 434) = 0;
  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 24);
  v3 = *((_QWORD *)this + 23);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1140;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::pause(WebKit::MediaPlayerPrivateRemote *this)
{
  WebKit::MediaPlayerPrivateRemote *v1;
  unsigned __int8 *v2;
  unsigned __int8 v4;
  WTF::MediaTime *v5;
  double v6;
  double v7;
  IPC::Encoder *v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  IPC::Encoder *v19[2];

  v1 = this;
  *((_BYTE *)this + 434) = 1;
  v2 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  this = (WebKit::MediaPlayerPrivateRemote *)MEMORY[0x19AEABB3C]((char *)this + 64);
LABEL_5:
  v4 = atomic_load((unsigned __int8 *)v1 + 65);
  if ((v4 & 1) != 0)
  {
    v5 = (WTF::MediaTime *)WTF::MonotonicTime::now(this);
    v7 = v6;
    v19[0] = (IPC::Encoder *)WTF::MediaTime::createWithDouble(v5, *((double *)v1 + 12) * (v6 - *((double *)v1 + 11)));
    v19[1] = v8;
    *((_QWORD *)v1 + 9) = WTF::MediaTime::operator+();
    *((_DWORD *)v1 + 20) = v9;
    *((_BYTE *)v1 + 84) = v10;
    *((double *)v1 + 11) = v7;
    atomic_store(0, (unsigned __int8 *)v1 + 65);
  }
  v11 = __ldxr(v2);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v2))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v12 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)v1 + 21))
                  + 24);
  v13 = *((_QWORD *)v1 + 23);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 1137;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v19[0] = (IPC::Encoder *)v14;
  IPC::Connection::sendMessageImpl(v12, (uint64_t *)v19, 0, 0);
  result = v19[0];
  v19[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setPreservesPitch(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1156;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setPitchCorrectionAlgorithm(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 24);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1152;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setVolumeDouble(WebKit::RemoteMediaPlayerManager **this, double a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  double *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1170;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v10 = *(_QWORD *)(v6 + 552);
  if (v10 < v8 + 8)
  {
    v17 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v9);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v11;
    *(_QWORD *)(v6 + 552) = v18;
    v7 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v11 = *(char **)(v6 + 528);
  }
  bzero(&v11[v7], v8 - v7);
  *(_QWORD *)(v6 + 544) = v9;
  v12 = (double *)(*(_QWORD *)(v6 + 528) + v8);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setMuted(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1150;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setPreload(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 24);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1154;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setPrivateBrowsingMode(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1157;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::currentTime(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 64);
LABEL_5:
  WebKit::MediaPlayerPrivateRemote::currentTimeWithLockHeld(this);
  v5 = v4;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

double WebKit::MediaPlayerPrivateRemote::currentTimeWithLockHeld(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 v2;
  double result;
  uint64_t v4;
  WebCore::MediaSourcePrivate *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::MediaSourcePrivate *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t v22;
  int64x2_t v23;
  WTF *v24;
  double v25;
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  WTF *v32;
  uint64_t v33;
  _QWORD v34[2];

  if (!*((_QWORD *)this + 59) || (v2 = atomic_load((unsigned __int8 *)this + 65), (v2 & 1) == 0))
  {
    WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::currentTimeWithLockHeld((WebKit::MediaPlayerPrivateRemote *)((char *)this + 64));
    return result;
  }
  if ((WebCore::MediaSourcePrivate::hasBufferedData(*((WebCore::MediaSourcePrivate **)this + 59)) & 1) != 0)
  {
    v34[0] = WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::currentTimeWithLockHeld((WebKit::MediaPlayerPrivateRemote *)((char *)this + 64));
    v34[1] = v4;
    v5 = (WebCore::MediaSourcePrivate *)*((_QWORD *)this + 59);
    if (v5)
    {
      v6 = WebCore::MediaSourcePrivate::duration(v5);
    }
    else
    {
      v6 = *((_QWORD *)this + 27);
      v7 = *((_QWORD *)this + 28);
    }
    v32 = (WTF *)v6;
    v33 = v7;
    if ((WTF::MediaTime::compare((WTF::MediaTime *)v34, (const WTF::MediaTime *)&v32) & 0x80000000) == 0)
    {
      v8 = (WebCore::MediaSourcePrivate *)*((_QWORD *)this + 59);
      if (v8)
        WebCore::MediaSourcePrivate::duration(v8);
      return result;
    }
    WebCore::MediaSourcePrivate::buffered(*((WebCore::MediaSourcePrivate **)this + 59));
    v31.i64[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
    v31.i64[1] = v9;
    if ((int)WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)v34) < 1)
    {
      v31.i64[0] = WebCore::PlatformTimeRanges::maximumBufferedTime((WebCore::PlatformTimeRanges *)&v32);
      v31.i64[1] = v19;
      if ((int)WTF::MediaTime::compare((WTF::MediaTime *)v34, (const WTF::MediaTime *)&v31) <= 0)
      {
LABEL_28:
        result = *(double *)v34;
LABEL_29:
        v24 = v32;
        if (v32)
        {
          v32 = 0;
          LODWORD(v33) = 0;
          v25 = result;
          WTF::fastFree(v24, v13);
          return v25;
        }
        return result;
      }
      v20 = WebCore::PlatformTimeRanges::maximumBufferedTime((WebCore::PlatformTimeRanges *)&v32);
    }
    else
    {
      if (HIDWORD(v33))
      {
        v10 = 0;
        while (1)
        {
          v31.i64[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
          v31.i64[1] = v11;
          if ((int)WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)v34) <= 0)
          {
            v30.i64[0] = WebCore::PlatformTimeRanges::end((WebCore::PlatformTimeRanges *)&v32);
            v30.i64[1] = v12;
            if ((int)WTF::MediaTime::compare((WTF::MediaTime *)v34, (const WTF::MediaTime *)&v30) <= 0)
              goto LABEL_28;
          }
          if (v10 < HIDWORD(v33) - 1)
          {
            v30.i64[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
            v30.i64[1] = v14;
            v28 = WebCore::PlatformTimeRanges::end((WebCore::PlatformTimeRanges *)&v32);
            v29 = v15;
            v31.i64[0] = WTF::MediaTime::operator-();
            v31.i64[1] = v16;
            v27 = *(_OWORD *)(*((_QWORD *)this + 59) + 128);
            if ((int)WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)&v27) <= 0)
            {
              v26[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
              v26[1] = v17;
              if ((WTF::MediaTime::compare((WTF::MediaTime *)v26, (const WTF::MediaTime *)v34) & 0x80000000) == 0)
                goto LABEL_28;
            }
          }
          v31.i64[0] = WebCore::PlatformTimeRanges::start((WebCore::PlatformTimeRanges *)&v32);
          v31.i64[1] = v18;
          if (WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)v34) != 1
            && ++v10 < HIDWORD(v33))
          {
            continue;
          }
          break;
        }
      }
      v20 = WebCore::PlatformTimeRanges::end((WebCore::PlatformTimeRanges *)&v32);
    }
    v31.i64[0] = v20;
    v31.i32[2] = v21;
    v31.i8[12] = BYTE4(v21);
    v30 = *(int8x16_t *)((char *)this + 72);
    v22 = vdup_n_s32(WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)&v30) == -1);
    v23.i64[0] = v22.u32[0];
    v23.i64[1] = v22.u32[1];
    *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v23, 0x3FuLL)), v30, v31).u64[0];
    goto LABEL_29;
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::timeIsProgressing(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 65);
  return v1 & 1;
}

uint64_t WebKit::MediaPlayerPrivateRemote::willSeekToTarget(uint64_t this, const WTF::MediaTime *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;

  v3 = this;
  v4 = (unsigned __int8 *)(this + 64);
  if (__ldaxr((unsigned __int8 *)(this + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](this + 64);
LABEL_5:
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(v3 + 37) = *(_QWORD *)((char *)a2 + 5);
  *(_QWORD *)(v3 + 32) = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::pendingSeekTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *(_QWORD *)WTF::MediaTime::invalidTime(this);
}

uint64_t WebKit::MediaPlayerPrivateRemote::currentOrPendingSeekTime(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 64);
LABEL_5:
  if ((*((_QWORD *)this + 5) & 0x100000000) != 0)
  {
    v5 = *((_QWORD *)this + 4);
  }
  else
  {
    WebKit::MediaPlayerPrivateRemote::currentTimeWithLockHeld(this);
    v5 = v4;
  }
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::seekToTarget(WebKit::MediaPlayerPrivateRemote *this, const WebCore::SeekTarget *a2)
{
  WebKit::MediaPlayerPrivateRemote *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  __int128 v14;
  const char *v15;
  uint64_t v16;

  v3 = this;
  v4 = *((_QWORD *)this + 14);
  v5 = *((_QWORD *)this + 15);
  *(_QWORD *)&v14 = "MediaPlayerPrivateRemote";
  *((_QWORD *)&v14 + 1) = 25;
  v15 = "seekToTarget";
  v16 = v5;
  if (*(_BYTE *)(v4 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::SeekTarget>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v14, a2);
  atomic_store(1u, (unsigned __int8 *)v3 + 713);
  *(_QWORD *)&v14 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v14 + 5) = *(_QWORD *)((char *)a2 + 5);
  LOBYTE(v15) = 0;
  WTF::MonotonicTime::now(this);
  v16 = v6;
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((unsigned __int8 *)v3 + 64, (uint64_t *)&v14);
  v7 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)v3 + 21))
                 + 24);
  v8 = *((_QWORD *)v3 + 23);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1147;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  *(_QWORD *)&v14 = v9;
  IPC::ArgumentCoder<WebCore::SeekTarget,void>::encode((IPC::Encoder *)v9, a2);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v14, 0, 0);
  result = (IPC::Encoder *)v14;
  *(_QWORD *)&v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::didLoadingProgress(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::didLoadingProgressAsync(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15[2];
  IPC::Encoder *v16;

  v4 = *(os_unfair_lock_s **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                            + 24);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = *a2;
  *a2 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34E60D0;
  v7[1] = v6;
  v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1129;
  *(_QWORD *)(v9 + 8) = v5;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v15[1] = v8;
  v16 = (IPC::Encoder *)v9;
  v15[0] = (uint64_t)v7;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v16, v15, 0, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::hasVideo(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 437);
}

uint64_t WebKit::MediaPlayerPrivateRemote::hasAudio(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 436);
}

uint64_t WebKit::MediaPlayerPrivateRemote::buffered(WebKit::MediaPlayerPrivateRemote *this)
{
  return (uint64_t)this + 448;
}

uint64_t WebKit::MediaPlayerPrivateRemote::movieLoadType(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 337);
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::networkStateChanged(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v4;
  WebCore::MediaPlayer *v5;

  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), &v5);
    result = (unsigned __int8 *)v5;
    if (v5)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::networkStateChanged(v5);
      v4 = (unsigned __int8 **)v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
    }
  }
  return result;
}

WTF::MonotonicTime *WebKit::MediaPlayerPrivateRemote::updateCachedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  WTF::MonotonicTime *result;
  __int128 v12;
  __int128 v13;
  double v14;

  v4 = *a2;
  *(_QWORD *)(a1 + 221) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)(a1 + 216) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 237) = *(uint64_t *)((char *)a2 + 21);
  *(_QWORD *)(a1 + 232) = v5;
  v6 = a2[4];
  *(_QWORD *)(a1 + 253) = *(uint64_t *)((char *)a2 + 37);
  *(_QWORD *)(a1 + 248) = v6;
  *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 120);
  *(_BYTE *)(a1 + 434) = *((_BYTE *)a2 + 218);
  v7 = *((float *)a2 + 31);
  v8 = *((float *)a2 + 32);
  if (*(float *)(a1 + 340) != v7 || *(float *)(a1 + 344) != v8)
    WebKit::MediaPlayerPrivateRemote::sizeChanged(a1, v7, v8);
  *(_WORD *)(a1 + 337) = *(_WORD *)((char *)a2 + 121);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 304), (WTF::StringImpl *)(a2 + 11));
  v9 = a2[6];
  *(_QWORD *)(a1 + 269) = *(uint64_t *)((char *)a2 + 53);
  *(_QWORD *)(a1 + 264) = v9;
  v10 = *(uint64_t *)((char *)a2 + 69);
  *(_QWORD *)(a1 + 280) = a2[8];
  *(_QWORD *)(a1 + 285) = v10;
  result = (WTF::MonotonicTime *)WTF::String::operator=((WTF::StringImpl **)(a1 + 296), (WTF::StringImpl *)(a2 + 10));
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 19);
  *(_BYTE *)(a1 + 435) = *((_BYTE *)a2 + 219);
  *(_WORD *)(a1 + 436) = *((_WORD *)a2 + 110);
  if (*((_BYTE *)a2 + 208))
  {
    v12 = *((_OWORD *)a2 + 11);
    v13 = *((_OWORD *)a2 + 12);
    *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 208);
    *(_OWORD *)(a1 + 392) = v12;
    *(_OWORD *)(a1 + 408) = v13;
  }
  if (*(double *)(a1 + 672) != 0.0)
  {
    result = (WTF::MonotonicTime *)WTF::MonotonicTime::now(result);
    if (v14 - *(double *)(a1 + 664) > 30.0)
      result = (WTF::MonotonicTime *)WebKit::MediaPlayerPrivateRemote::updateVideoPlaybackMetricsUpdateInterval((WebKit::MediaPlayerPrivateRemote *)a1, 0);
  }
  *(_DWORD *)(a1 + 438) = *(_DWORD *)((char *)a2 + 222);
  *(_WORD *)(a1 + 432) = *((_WORD *)a2 + 108);
  if (*((_BYTE *)a2 + 112))
    return (WTF::MonotonicTime *)WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 448, (uint64_t)(a2 + 12));
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::setReadyState(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[4];
  char v9;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v8[0] = "MediaPlayerPrivateRemote";
  v8[1] = 25;
  v8[2] = "setReadyState";
  v8[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerReadyState>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 48));
  v5 = v9;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34E60F8;
  *(_QWORD *)(v6 + 8) = a1;
  *(_QWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 24) = v5;
  v8[0] = v6;
  WTF::ensureOnMainRunLoop();
  result = v8[0];
  v8[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::readyStateChanged(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  char v9;

  v9 = a3;
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v8[0] = "MediaPlayerPrivateRemote";
  v8[1] = 25;
  v8[2] = "readyStateChanged";
  v8[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerReadyState>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  return WebKit::MediaPlayerPrivateRemote::setReadyState(a1, v9);
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::volumeChanged(WebKit::MediaPlayerPrivateRemote *this, double a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v5;
  WebCore::MediaPlayer *v6;

  *((double *)this + 86) = a2;
  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), &v6);
    result = (unsigned __int8 *)v6;
    if (v6)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::volumeChanged(v6, a2);
      v5 = (unsigned __int8 **)v6;
      v6 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::muteChanged(WebKit::MediaPlayerPrivateRemote *this, char a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v4;
  WebCore::MediaPlayer *v5;

  *((_BYTE *)this + 712) = a2;
  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), &v5);
    result = (unsigned __int8 *)v5;
    if (v5)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::muteChanged(v5);
      v4 = (unsigned __int8 **)v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::seeked(uint64_t a1, WTF::MediaTime *a2)
{
  uint64_t v4;
  WebCore::MediaPlayer *v5;
  unsigned __int8 *result;
  unsigned __int8 **v7;
  WebCore::MediaPlayer *v8[4];

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(WebCore::MediaPlayer **)(a1 + 120);
  v8[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v8[1] = (WebCore::MediaPlayer *)25;
  v8[2] = (WebCore::MediaPlayer *)"seeked";
  v8[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8, a2);
  atomic_store(0, (unsigned __int8 *)(a1 + 713));
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((unsigned __int8 *)(a1 + 64), (uint64_t *)a2);
  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), v8);
    result = (unsigned __int8 *)v8[0];
    if (v8[0])
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::seeked(v8[0], a2);
      v7 = (unsigned __int8 **)v8[0];
      v8[0] = 0;
      if (v7)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v7);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::timeChanged(uint64_t a1, uint64_t *a2, WTF::MediaTime *a3)
{
  uint64_t v6;
  WebCore::MediaPlayer *v7;
  unsigned __int8 *result;
  unsigned __int8 **v9;
  WebCore::MediaPlayer *v10[4];

  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(WebCore::MediaPlayer **)(a1 + 120);
  v10[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v10[1] = (WebCore::MediaPlayer *)25;
  v10[2] = (WebCore::MediaPlayer *)"timeChanged";
  v10[3] = v7;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v10, a3);
  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((unsigned __int8 *)(a1 + 64), (uint64_t *)a3);
  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), v10);
    result = (unsigned __int8 *)v10[0];
    if (v10[0])
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::timeChanged(v10[0]);
      v9 = (unsigned __int8 **)v10[0];
      v10[0] = 0;
      if (v9)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v9);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::durationChanged(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v4;
  WebCore::MediaPlayer *v5;

  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), &v5);
    result = (unsigned __int8 *)v5;
    if (v5)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::durationChanged(v5);
      v4 = (unsigned __int8 **)v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::seeking(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 713);
  return v1 & 1;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::rateChanged(uint64_t a1, WTF::MediaTime *a2, double a3)
{
  uint64_t v5;
  WebCore::MediaPlayer *v6;
  unsigned __int8 *result;
  unsigned __int8 **v9;
  WebCore::MediaPlayer *v10[4];
  double v11;

  v11 = a3;
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(WebCore::MediaPlayer **)(a1 + 120);
  v10[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v10[1] = (WebCore::MediaPlayer *)25;
  v10[2] = (WebCore::MediaPlayer *)"rateChanged";
  v10[3] = v6;
  if (*(_BYTE *)(v5 + 12))
  {
    if (WebKit2LogMedia && byte_1ECE71338 >= 3u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [6],double,char [14],WTF::MediaTime,char [20],BOOL>((uint64_t)&WebKit2LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v10, "rate:", &v11, " currentTime:", a2, " timeIsProgressing:", (uint64_t)a2 + 16);
      a3 = v11;
    }
  }
  *(double *)(a1 + 696) = a3;
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setRate((unsigned __int8 *)(a1 + 64), a3);
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((unsigned __int8 *)(a1 + 64), (uint64_t *)a2);
  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), v10);
    result = (unsigned __int8 *)v10[0];
    if (v10[0])
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::rateChanged(v10[0]);
      v9 = (unsigned __int8 **)v10[0];
      v10[0] = 0;
      if (v9)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v9);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::playbackStateChanged(uint64_t a1, char a2, WTF::MediaTime *a3)
{
  uint64_t v6;
  WebCore::MediaPlayer *v7;
  unsigned __int8 *result;
  unsigned __int8 **v10;
  WebCore::MediaPlayer *v11[4];

  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(WebCore::MediaPlayer **)(a1 + 120);
  v11[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v11[1] = (WebCore::MediaPlayer *)25;
  v11[2] = (WebCore::MediaPlayer *)"playbackStateChanged";
  v11[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebKit2LogMedia && byte_1ECE71338 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebKit2LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v11, a3);
  }
  *(_BYTE *)(a1 + 434) = a2;
  WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime((unsigned __int8 *)(a1 + 64), (uint64_t *)a3);
  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), v11);
    result = (unsigned __int8 *)v11[0];
    if (v11[0])
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::playbackStateChanged(v11[0]);
      v10 = (unsigned __int8 **)v11[0];
      v11[0] = 0;
      if (v10)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v10);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::engineFailedToLoad(WebKit::MediaPlayerPrivateRemote *this, uint64_t a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v4;
  WebCore::MediaPlayer *v5;

  *((_QWORD *)this + 88) = a2;
  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), &v5);
    result = (unsigned __int8 *)v5;
    if (v5)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::remoteEngineFailedToLoad(v5);
      v4 = (unsigned __int8 **)v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::characteristicChanged(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v4;
  WebCore::MediaPlayer *v5;

  WebKit::MediaPlayerPrivateRemote::updateCachedState(a1, a2);
  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), &v5);
    result = (unsigned __int8 *)v5;
    if (v5)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::characteristicChanged(v5);
      v4 = (unsigned __int8 **)v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::sizeChanged(uint64_t a1, float a2, float a3)
{
  unsigned __int8 *result;
  unsigned __int8 **v5;
  WebCore::MediaPlayer *v6;

  *(float *)(a1 + 340) = a2;
  *(float *)(a1 + 344) = a3;
  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), &v6);
    result = (unsigned __int8 *)v6;
    if (v6)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::sizeChanged(v6);
      v5 = (unsigned __int8 **)v6;
      v6 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::currentTimeChanged(unsigned __int8 *result, WTF::MediaTime *this)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  WTF *v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t i;
  WTF::StringImpl *v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 *v31;
  __int128 v33;
  int v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  NSObject *v44;
  WTF *v45;
  void *v46;
  char *v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t j;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  unsigned __int8 **v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::MediaTime *v64[2];
  WTF::StringImpl *v65[2];
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  WTF *v70[2];
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  _BYTE buf[12];
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;

  v3 = result;
  v88 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 14);
  v5 = *((_QWORD *)result + 15);
  v66 = "MediaPlayerPrivateRemote";
  v67 = 25;
  v68 = "currentTimeChanged";
  v69 = v5;
  v6 = result + 713;
  v7 = atomic_load(result + 713);
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebKit2LogMedia && byte_1ECE71338 >= 3u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v66);
      WTF::MediaTime::toJSONString(this);
      WTF::String::String((WTF::String *)&v77, " seeking:");
      WTF::LogArgument<BOOL>::toString<BOOL>(&v76);
      WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, v65);
      v10 = v76;
      v76 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v77;
      v77 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v78;
      v78 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v79;
      v79 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = qword_1ECE71348;
      v15 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v15)
      {
        WTF::String::utf8();
        v17 = v70[0] ? (char *)v70[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v15 = v70[0];
        v70[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
            v15 = (WTF *)WTF::fastFree(v15, v16);
          else
            --*(_DWORD *)v15;
        }
      }
      if (WebKit2LogMedia && byte_1ECE71338 >= 3u)
      {
        v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v19 = *v18;
          if ((v19 & 1) != 0)
            break;
          v20 = __ldaxr(v18);
          if (v20 == v19)
          {
            if (!__stxr(v19 | 1, v18))
            {
              v61 = v6;
              v21 = WTF::Logger::observers(v15);
              v22 = *(unsigned int *)(v21 + 12);
              if ((_DWORD)v22)
              {
                v23 = *(uint64_t **)v21;
                v62 = *(_QWORD *)v21 + 8 * v22;
                do
                {
                  v24 = v7;
                  v25 = *v23;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v66);
                  v81 = 1;
                  WTF::MediaTime::toJSONString(this);
                  v83 = 0;
                  WTF::String::String((WTF::String *)&v84, " seeking:");
                  v85 = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v86);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v70, (uint64_t)buf, 4uLL);
                  (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(_QWORD *)v25 + 16))(v25, &WebKit2LogMedia, 3, v70);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v70, v26);
                  for (i = 56; i != -8; i -= 16)
                  {
                    v28 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v28)
                    {
                      if (*(_DWORD *)v28 == 2)
                        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v16);
                      else
                        *(_DWORD *)v28 -= 2;
                    }
                  }
                  ++v23;
                  v7 = v24;
                }
                while (v23 != (uint64_t *)v62);
              }
              v29 = __ldxr(v18);
              if (v29 == 1)
              {
                v6 = v61;
                if (!__stlxr(0, v18))
                  break;
              }
              else
              {
                __clrex();
                v6 = v61;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = (unsigned __int8 *)v65[0];
      v65[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  v30 = atomic_load(v6);
  if ((v30 & 1) != 0)
    return result;
  v31 = v3 + 64;
  if (__ldaxr(v3 + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v31))
  {
    goto LABEL_62;
  }
  MEMORY[0x19AEABB3C](v3 + 64);
LABEL_62:
  v33 = *(_OWORD *)(v3 + 72);
  v34 = __ldxr(v31);
  if (v34 == 1)
  {
    if (!__stlxr(0, v31))
      goto LABEL_67;
  }
  else
  {
    __clrex();
  }
  *(_OWORD *)v64 = v33;
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 64));
  v33 = *(_OWORD *)v64;
LABEL_67:
  *(_OWORD *)v65 = v33;
  v35 = atomic_load(v3 + 65);
  if (WTF::MediaTime::compare(this, (const WTF::MediaTime *)v65) == -1)
  {
    v36 = *((_QWORD *)v3 + 14);
    v37 = *((_QWORD *)v3 + 15);
    v66 = "MediaPlayerPrivateRemote";
    v67 = 25;
    v68 = "currentTimeChanged";
    v69 = v37;
    if (*(_BYTE *)(v36 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v66);
      WTF::String::String((WTF::String *)&v74, "time jumped backwards, was ");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)v65);
      WTF::String::String((WTF::String *)&v72, ", is now ");
      WTF::MediaTime::toJSONString(this);
      v70[0] = v74;
      v79 = v73;
      *(_QWORD *)buf = v75;
      v77 = v71;
      v78 = v72;
      result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v70, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, &v76);
      if (!v76)
      {
        __break(0xC471u);
        return result;
      }
      v39 = v71;
      v71 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v38);
        else
          *(_DWORD *)v39 -= 2;
      }
      v40 = v72;
      v72 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v38);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v73;
      v73 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v38);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = v74;
      v74 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v38);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = v75;
      v75 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v38);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = qword_1ECE71348;
      v45 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v45)
      {
        WTF::String::utf8();
        v47 = v70[0] ? (char *)v70[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v47;
        _os_log_impl(&dword_196BCC000, v44, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v45 = v70[0];
        v70[0] = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 1)
            v45 = (WTF *)WTF::fastFree(v45, v46);
          else
            --*(_DWORD *)v45;
        }
      }
      if (WebKit2LogMedia)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v45);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v63 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v54 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v66);
                  v81 = 0;
                  WTF::String::String((WTF::String *)&v82, "time jumped backwards, was ");
                  v83 = 1;
                  WTF::MediaTime::toJSONString((WTF::MediaTime *)v65);
                  v85 = 0;
                  WTF::String::String((WTF::String *)&v86, ", is now ");
                  v87 = 1;
                  WTF::MediaTime::toJSONString(this);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v70, (uint64_t)buf, 5uLL);
                  (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v54 + 16))(v54, &WebKit2LogMedia, 0, v70);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v70, v55);
                  for (j = 72; j != -8; j -= 16)
                  {
                    v57 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v57)
                    {
                      if (*(_DWORD *)v57 == 2)
                        WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v46);
                      else
                        *(_DWORD *)v57 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v63);
              }
              v58 = __ldxr(v48);
              if (v58 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v59 = v76;
      v76 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v46);
        else
          *(_DWORD *)v59 -= 2;
      }
    }
    WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime(v31, (uint64_t *)this);
  }
  else
  {
    result = WebKit::MediaPlayerPrivateRemote::TimeProgressEstimator::setTime(v3 + 64, (uint64_t *)this);
    if (*((_BYTE *)this + 16) == (v35 & 1))
      return result;
    result = (unsigned __int8 *)WTF::MediaTime::compare(this, (const WTF::MediaTime *)v65);
    if (!(_DWORD)result || v3[434])
      return result;
  }
  result = (unsigned __int8 *)*((_QWORD *)v3 + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)v3 + 17), buf);
    result = *(unsigned __int8 **)buf;
    if (*(_QWORD *)buf)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::timeChanged(*(WebCore::MediaPlayer **)buf);
      v60 = *(unsigned __int8 ***)buf;
      *(_QWORD *)buf = 0;
      if (v60)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v60);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::firstVideoFrameAvailable(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t v2;
  WebCore::MediaPlayer *v3;
  unsigned __int8 *result;
  unsigned __int8 **v5;
  WebCore::MediaPlayer *v6[4];

  v2 = *((_QWORD *)this + 14);
  v3 = (WebCore::MediaPlayer *)*((_QWORD *)this + 15);
  v6[0] = (WebCore::MediaPlayer *)"MediaPlayerPrivateRemote";
  v6[1] = (WebCore::MediaPlayer *)25;
  v6[2] = (WebCore::MediaPlayer *)"firstVideoFrameAvailable";
  v6[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), v6);
    result = (unsigned __int8 *)v6[0];
    if (v6[0])
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::firstVideoFrameAvailable(v6[0]);
      v5 = (unsigned __int8 **)v6[0];
      v6[0] = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::renderingModeChanged(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *result;
  unsigned __int8 **v5;
  _QWORD v6[4];

  v2 = *((_QWORD *)this + 14);
  v3 = *((_QWORD *)this + 15);
  v6[0] = "MediaPlayerPrivateRemote";
  v6[1] = 25;
  v6[2] = "renderingModeChanged";
  v6[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), v6);
    if (v6[0])
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6[0] + 8) + 8)
                                                                    + 144))(*(_QWORD *)(*(_QWORD *)(v6[0] + 8) + 8));
      v5 = (unsigned __int8 **)v6[0];
      v6[0] = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::engineDescription@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 192);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsScanning(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 208);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsFullscreen(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 209);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsPictureInPicture(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 210);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsAcceleratedRendering(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 211);
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::acceleratedRenderingStateChanged(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  WTF *v14;
  void *v15;
  unsigned __int8 **v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  IPC::Encoder *v21;

  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), &v20);
    if (v20)
    {
      v3 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                              + 21))
                     + 24);
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v20 + 8) + 8) + 136))(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8));
      v5 = *((_QWORD *)this + 23);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1119;
      *(_QWORD *)(v6 + 8) = v5;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v21 = (IPC::Encoder *)v6;
      v7 = *(_QWORD *)(v6 + 544);
      v8 = v7 + 1;
      v9 = *(_QWORD *)(v6 + 552);
      if (v9 < v7 + 1)
      {
        v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v18 = v17;
          v17 *= 2;
        }
        while (v18 < v8);
        result = (unsigned __int8 *)mmap(0, v18, 3, 4098, -1, 0);
        if (result == (unsigned __int8 *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v10 = result;
        memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
        v19 = *(void **)(v6 + 528);
        if (v19 != (void *)(v6 + 16))
          munmap(v19, *(_QWORD *)(v6 + 552));
        *(_QWORD *)(v6 + 528) = v10;
        *(_QWORD *)(v6 + 552) = v18;
        v11 = *(_QWORD *)(v6 + 544);
      }
      else
      {
        v10 = *(unsigned __int8 **)(v6 + 528);
        v11 = *(_QWORD *)(v6 + 544);
      }
      bzero(&v10[v11], v7 - v11);
      *(_QWORD *)(v6 + 544) = v8;
      v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
      *(_QWORD *)(v6 + 536) = v12 + 1;
      *v12 = v4;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
      result = (unsigned __int8 *)v21;
      v21 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
        result = (unsigned __int8 *)WTF::fastFree(v14, v15);
      }
      v16 = (unsigned __int8 **)v20;
      v20 = 0;
      if (v16)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v16);
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::canPlayToWirelessPlaybackTarget(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 214);
}

char *WebKit::MediaPlayerPrivateRemote::updateVideoPlaybackMetricsUpdateInterval(WebKit::MediaPlayerPrivateRemote *this, const WTF::Seconds *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  *((_QWORD *)this + 84) = a2;
  v3 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 24);
  v4 = *((_QWORD *)this + 84);
  v5 = *((_QWORD *)this + 23);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1169;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v10 = *(_QWORD *)(v6 + 552);
  if (v10 < v8 + 8)
  {
    v17 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v9);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v11;
    *(_QWORD *)(v6 + 552) = v18;
    v7 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v11 = *(char **)(v6 + 528);
  }
  bzero(&v11[v7], v8 - v7);
  *(_QWORD *)(v6 + 544) = v9;
  v12 = (_QWORD *)(*(_QWORD *)(v6 + 528) + v8);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = v4;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::shouldIgnoreIntrinsicSize(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 215);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::prepareForRendering(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1144;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setPageIsVisible(IPC::Encoder *this, int a2)
{
  BOOL v2;
  IPC::Encoder *v3;
  uint64_t v4;
  IPC::Encoder *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  IPC::Encoder *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  void *v16;
  WTF *v17;
  void *v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  IPC::Encoder *v22[4];
  unsigned __int8 v23;

  v23 = a2;
  if (*((_BYTE *)this + 719))
    v2 = *((unsigned __int8 *)this + 718) == a2;
  else
    v2 = 0;
  if (!v2)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 14);
    v5 = (IPC::Encoder *)*((_QWORD *)this + 15);
    v22[0] = (IPC::Encoder *)"MediaPlayerPrivateRemote";
    v22[1] = (IPC::Encoder *)25;
    v22[2] = (IPC::Encoder *)"setPageIsVisible";
    v22[3] = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v22);
      LOWORD(a2) = v23;
    }
    *((_WORD *)v3 + 359) = a2 | 0x100;
    v6 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)v3
                                                                            + 21))
                   + 24);
    v7 = v23;
    v8 = *((_QWORD *)v3 + 23);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1151;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v22[0] = (IPC::Encoder *)v9;
    v10 = *(_QWORD *)(v9 + 544);
    v11 = v10 + 1;
    v12 = *(_QWORD *)(v9 + 552);
    if (v12 < v10 + 1)
    {
      v19 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v20 = v19;
        v19 *= 2;
      }
      while (v20 < v11);
      this = (IPC::Encoder *)mmap(0, v20, 3, 4098, -1, 0);
      if (this == (IPC::Encoder *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v13 = this;
      memcpy(this, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
      v21 = *(void **)(v9 + 528);
      if (v21 != (void *)(v9 + 16))
        munmap(v21, *(_QWORD *)(v9 + 552));
      *(_QWORD *)(v9 + 528) = v13;
      *(_QWORD *)(v9 + 552) = v20;
      v14 = *(_QWORD *)(v9 + 544);
    }
    else
    {
      v13 = *(IPC::Encoder **)(v9 + 528);
      v14 = *(_QWORD *)(v9 + 544);
    }
    bzero((char *)v13 + v14, v10 - v14);
    *(_QWORD *)(v9 + 544) = v11;
    v15 = (unsigned __int8 *)(*(_QWORD *)(v9 + 528) + v10);
    *(_QWORD *)(v9 + 536) = v15 + 1;
    *v15 = v7;
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)v22, 0, 0);
    this = v22[0];
    v22[0] = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v16);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  return this;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::setShouldMaintainAspectRatio(unsigned __int8 *this, int a2)
{
  BOOL v2;
  char v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  if (this[717])
    v2 = this[716] == a2;
  else
    v2 = 0;
  if (!v2)
  {
    v3 = a2;
    v4 = this;
    *((_WORD *)this + 358) = a2 | 0x100;
    v5 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                            + 21))
                   + 24);
    v6 = *((_QWORD *)v4 + 23);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 1164;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v20 = (IPC::Encoder *)v7;
    v8 = *(_QWORD *)(v7 + 544);
    v9 = v8 + 1;
    v10 = *(_QWORD *)(v7 + 552);
    if (v10 < v8 + 1)
    {
      v17 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v18 = v17;
        v17 *= 2;
      }
      while (v18 < v9);
      this = (unsigned __int8 *)mmap(0, v18, 3, 4098, -1, 0);
      if (this == (unsigned __int8 *)-1)
      {
        __break(0xC471u);
        return this;
      }
      v11 = (char *)this;
      memcpy(this, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
      v19 = *(void **)(v7 + 528);
      if (v19 != (void *)(v7 + 16))
        munmap(v19, *(_QWORD *)(v7 + 552));
      *(_QWORD *)(v7 + 528) = v11;
      *(_QWORD *)(v7 + 552) = v18;
      v12 = *(_QWORD *)(v7 + 544);
    }
    else
    {
      v11 = *(char **)(v7 + 528);
      v12 = *(_QWORD *)(v7 + 544);
    }
    bzero(&v11[v12], v8 - v12);
    *(_QWORD *)(v7 + 544) = v9;
    v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
    *(_QWORD *)(v7 + 536) = v13 + 1;
    *v13 = v3;
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v20, 0, 0);
    this = (unsigned __int8 *)v20;
    v20 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v14);
      return (unsigned __int8 *)WTF::fastFree(v15, v16);
    }
  }
  return this;
}

char *WebKit::MediaPlayerPrivateRemote::setShouldDisableSleep(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1162;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

float WebKit::MediaPlayerPrivateRemote::naturalSize(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((float *)this + 85);
}

unsigned int *WebKit::MediaPlayerPrivateRemote::addRemoteAudioTrack(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned __int8 **v15;
  WebCore::MediaPlayer *v16;

  v4 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 480);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((_QWORD *)(a1 + 496), a2);
  v6 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  v7 = *(_QWORD *)(a1 + 184);
  v8 = WTF::fastMalloc((WTF *)0xA8);
  v16 = (WebCore::MediaPlayer *)WebKit::AudioTrackPrivateRemote::AudioTrackPrivateRemote(v8, v6, v7, (uint64_t *)a2);
  v9 = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>(a1 + 496, a2, (uint64_t *)a2, (uint64_t *)&v16);
  result = (unsigned int *)v16;
  v16 = 0;
  if (result)
  {
    v11 = result + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (!*(_QWORD *)(a1 + 472))
  {
    result = *(unsigned int **)(a1 + 128);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)result, *(_QWORD *)(a1 + 136), &v16);
      result = (unsigned int *)v16;
      if (v16)
      {
        result = (unsigned int *)WebCore::MediaPlayer::addAudioTrack(v16, (WebCore::AudioTrackPrivate *)v9[3]);
        v15 = (unsigned __int8 **)v16;
        v16 = 0;
        if (v15)
          result = (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v15);
      }
    }
  }
  v14 = __ldxr(v4);
  if (v14 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_QWORD *WebKit::MediaPlayerPrivateRemote::removeRemoteAudioTrack(WebKit::MediaPlayerPrivateRemote *this, unint64_t a2)
{
  unsigned __int8 *v3;
  _QWORD *result;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  int v9;
  WebCore::MediaPlayer *v10;
  unint64_t v11;

  v11 = a2;
  v3 = (unsigned __int8 *)this + 480;
  if (__ldaxr((unsigned __int8 *)this + 480))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 480);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)this + 62, &v11);
  if (result)
  {
    v6 = (uint64_t)result;
    v7 = (unsigned __int8 *)*((_QWORD *)this + 16);
    if (v7)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v7, *((_QWORD *)this + 17), &v10);
      if (v10)
      {
        WebCore::MediaPlayer::removeAudioTrack(v10, *(WebCore::AudioTrackPrivate **)(v6 + 24));
        v8 = (unsigned __int8 **)v10;
        v10 = 0;
        if (v8)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v8);
      }
    }
    result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((_QWORD *)this + 62, &v11);
  }
  v9 = __ldxr(v3);
  if (v9 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::remoteAudioTrackConfigurationChanged(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  _QWORD *v7;
  uint64_t result;
  const WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  int v16;
  _QWORD *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  unint64_t v21;
  _QWORD *v22;

  v21 = a2;
  v5 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 480);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v7 = (_QWORD *)(a1 + 496);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>(v7, &v21);
  if (result)
  {
    v10 = (_QWORD *)result;
    v11 = *(_QWORD *)(result + 24);
    v12 = *(_QWORD *)(v11 + 112);
    v13 = *a3;
    result = (uint64_t)WebKit::AudioTrackPrivateRemote::updateConfiguration(v11, a3, v9);
    if (v12 != v13)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove(v7, v10, (uint64_t)&v22);
      v14 = v22;
      HIBYTE(v20) = 1;
      v22[2] = *(_QWORD *)(v11 + 112);
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__node_insert_unique(v7, v14);
      if ((v15 & 1) != 0)
      {
        v14 = 0;
        HIBYTE(v20) = 0;
      }
      v17 = v14;
      v18 = v20;
      v19 = 0;
      if (v20 >= 0x100u)
        HIBYTE(v20) = 0;
      std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v17);
      result = std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v19);
    }
  }
  v16 = __ldxr(v5);
  if (v16 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t WebKit::AudioTrackPrivateRemote::id(WebKit::AudioTrackPrivateRemote *this)
{
  return *((_QWORD *)this + 14);
}

unsigned int *WebKit::MediaPlayerPrivateRemote::addRemoteTextTrack(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned __int8 **v15;
  WebCore::MediaPlayer *v16;

  v4 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 480);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((_QWORD *)(a1 + 576), a2);
  v6 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  v7 = *(_QWORD *)(a1 + 184);
  v8 = WTF::fastMalloc((WTF *)0x90);
  v16 = (WebCore::MediaPlayer *)WebKit::TextTrackPrivateRemote::TextTrackPrivateRemote(v8, v6, v7, (uint64_t)a2);
  v9 = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>(a1 + 576, a2, (uint64_t *)a2, (uint64_t *)&v16);
  result = (unsigned int *)v16;
  v16 = 0;
  if (result)
  {
    v11 = result + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (!*(_QWORD *)(a1 + 472))
  {
    result = *(unsigned int **)(a1 + 128);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)result, *(_QWORD *)(a1 + 136), &v16);
      result = (unsigned int *)v16;
      if (v16)
      {
        result = (unsigned int *)WebCore::MediaPlayer::addTextTrack(v16, (WebCore::InbandTextTrackPrivate *)v9[3]);
        v15 = (unsigned __int8 **)v16;
        v16 = 0;
        if (v15)
          result = (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v15);
      }
    }
  }
  v14 = __ldxr(v4);
  if (v14 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_QWORD *WebKit::MediaPlayerPrivateRemote::removeRemoteTextTrack(WebKit::MediaPlayerPrivateRemote *this, unint64_t a2)
{
  unsigned __int8 *v3;
  _QWORD *result;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  int v9;
  WebCore::MediaPlayer *v10;
  unint64_t v11;

  v11 = a2;
  v3 = (unsigned __int8 *)this + 480;
  if (__ldaxr((unsigned __int8 *)this + 480))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 480);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)this + 72, &v11);
  if (result)
  {
    v6 = (uint64_t)result;
    v7 = (unsigned __int8 *)*((_QWORD *)this + 16);
    if (v7)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v7, *((_QWORD *)this + 17), &v10);
      if (v10)
      {
        WebCore::MediaPlayer::removeTextTrack(v10, *(WebCore::InbandTextTrackPrivate **)(v6 + 24));
        v8 = (unsigned __int8 **)v10;
        v10 = 0;
        if (v8)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v8);
      }
    }
    result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((_QWORD *)this + 72, &v11);
  }
  v9 = __ldxr(v3);
  if (v9 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::remoteTextTrackConfigurationChanged(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  _QWORD *v7;
  uint64_t result;
  const WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  int v16;
  _QWORD *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  unint64_t v21;
  _QWORD *v22;

  v21 = a2;
  v5 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 480);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v7 = (_QWORD *)(a1 + 576);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>(v7, &v21);
  if (result)
  {
    v10 = (_QWORD *)result;
    v11 = *(_QWORD *)(result + 24);
    v12 = *(_QWORD *)(v11 + 120);
    v13 = *a3;
    result = (uint64_t)WebKit::TextTrackPrivateRemote::updateConfiguration(v11, a3, v9);
    if (v12 != v13)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove(v7, v10, (uint64_t)&v22);
      v14 = v22;
      HIBYTE(v20) = 1;
      v22[2] = *(_QWORD *)(v11 + 120);
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__node_insert_unique(v7, v14);
      if ((v15 & 1) != 0)
      {
        v14 = 0;
        HIBYTE(v20) = 0;
      }
      v17 = v14;
      v18 = v20;
      v19 = 0;
      if (v20 >= 0x100u)
        HIBYTE(v20) = 0;
      std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v17);
      result = std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v19);
    }
  }
  v16 = __ldxr(v5);
  if (v16 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::parseWebVTTFileHeader(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  uint64_t result;
  int v8;
  unint64_t v9;

  v9 = a2;
  v5 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v9);
  if (result)
    result = WebKit::TextTrackPrivateRemote::parseWebVTTFileHeader(*(_QWORD *)(result + 24), a3);
  v8 = __ldxr(v5);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::parseWebVTTCueData(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v7;
  uint64_t result;
  int v10;
  unint64_t v11;

  v11 = a2;
  v7 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v11);
  if (result)
    result = WebKit::TextTrackPrivateRemote::parseWebVTTCueData(*(_QWORD *)(result + 24), a3, a4);
  v10 = __ldxr(v7);
  if (v10 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  if (__stlxr(0, v7))
    return WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::parseWebVTTCueDataStruct(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  uint64_t result;
  int v8;
  unint64_t v9;

  v9 = a2;
  v5 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v9);
  if (result)
    result = WebKit::TextTrackPrivateRemote::parseWebVTTCueDataStruct(*(_QWORD *)(result + 24), a3);
  v8 = __ldxr(v5);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::addDataCue(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v11;
  uint64_t result;
  int v14;
  unint64_t v15;

  v15 = a2;
  v11 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v15);
  if (result)
    result = WebKit::TextTrackPrivateRemote::addDataCue(*(_QWORD *)(result + 24), a3, a4, a5, a6);
  v14 = __ldxr(v11);
  if (v14 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
  if (__stlxr(0, v11))
    return WTF::Lock::unlockSlow((WTF::Lock *)v11);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::addDataCueWithType(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v11;
  uint64_t result;
  int v14;
  unint64_t v15;

  v15 = a2;
  v11 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v15);
  if (result)
    result = WebKit::TextTrackPrivateRemote::addDataCueWithType(*(_QWORD *)(result + 24), a3, a4, a5, a6);
  v14 = __ldxr(v11);
  if (v14 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
  if (__stlxr(0, v11))
    return WTF::Lock::unlockSlow((WTF::Lock *)v11);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::updateDataCue(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t result;
  int v12;
  unint64_t v13;

  v13 = a2;
  v9 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v13);
  if (result)
    result = WebKit::TextTrackPrivateRemote::updateDataCue(*(_QWORD *)(result + 24), a3, a4, a5);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  if (__stlxr(0, v9))
    return WTF::Lock::unlockSlow((WTF::Lock *)v9);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::removeDataCue(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t result;
  int v12;
  unint64_t v13;

  v13 = a2;
  v9 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v13);
  if (result)
    result = WebKit::TextTrackPrivateRemote::removeDataCue(*(_QWORD *)(result + 24), a3, a4, a5);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  if (__stlxr(0, v9))
    return WTF::Lock::unlockSlow((WTF::Lock *)v9);
  return result;
}

_QWORD *WebKit::MediaPlayerPrivateRemote::addGenericCue(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unsigned __int8 *v5;
  _QWORD *result;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;

  v13 = a2;
  v5 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v13);
  if (result)
  {
    v8 = result[3];
    v9 = (_DWORD *)WTF::fastMalloc((WTF *)0x90);
    v12 = WebCore::InbandGenericCue::InbandGenericCue((uint64_t)v9, a3);
    WebKit::TextTrackPrivateRemote::addGenericCue(v8, &v12);
    v12 = 0;
    result = WTF::RefCounted<WebCore::InbandGenericCue>::deref(v9, v10);
  }
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

_QWORD *WebKit::MediaPlayerPrivateRemote::updateGenericCue(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unsigned __int8 *v5;
  _QWORD *result;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;

  v13 = a2;
  v5 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v13);
  if (result)
  {
    v8 = result[3];
    v9 = (_DWORD *)WTF::fastMalloc((WTF *)0x90);
    v12 = WebCore::InbandGenericCue::InbandGenericCue((uint64_t)v9, a3);
    WebKit::TextTrackPrivateRemote::updateGenericCue(v8, &v12);
    v12 = 0;
    result = WTF::RefCounted<WebCore::InbandGenericCue>::deref(v9, v10);
  }
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

_QWORD *WebKit::MediaPlayerPrivateRemote::removeGenericCue(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unsigned __int8 *v5;
  _QWORD *result;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;

  v13 = a2;
  v5 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 480);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)(a1 + 576), &v13);
  if (result)
  {
    v8 = result[3];
    v9 = (_DWORD *)WTF::fastMalloc((WTF *)0x90);
    v12 = WebCore::InbandGenericCue::InbandGenericCue((uint64_t)v9, a3);
    WebKit::TextTrackPrivateRemote::removeGenericCue(v8, &v12);
    v12 = 0;
    result = WTF::RefCounted<WebCore::InbandGenericCue>::deref(v9, v10);
  }
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

unsigned int *WebKit::MediaPlayerPrivateRemote::addRemoteVideoTrack(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned __int8 **v15;
  WebCore::MediaPlayer *v16;

  v4 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 480);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((_QWORD *)(a1 + 536), a2);
  v6 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  v7 = *(_QWORD *)(a1 + 184);
  v8 = WTF::fastMalloc((WTF *)0xB8);
  v16 = (WebCore::MediaPlayer *)WebKit::VideoTrackPrivateRemote::VideoTrackPrivateRemote(v8, v6, v7, (uint64_t *)a2);
  v9 = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>(a1 + 536, a2, (uint64_t *)a2, (uint64_t *)&v16);
  result = (unsigned int *)v16;
  v16 = 0;
  if (result)
  {
    v11 = result + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (!*(_QWORD *)(a1 + 472))
  {
    result = *(unsigned int **)(a1 + 128);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)result, *(_QWORD *)(a1 + 136), &v16);
      result = (unsigned int *)v16;
      if (v16)
      {
        result = (unsigned int *)WebCore::MediaPlayer::addVideoTrack(v16, (WebCore::VideoTrackPrivate *)v9[3]);
        v15 = (unsigned __int8 **)v16;
        v16 = 0;
        if (v15)
          result = (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v15);
      }
    }
  }
  v14 = __ldxr(v4);
  if (v14 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_QWORD *WebKit::MediaPlayerPrivateRemote::removeRemoteVideoTrack(WebKit::MediaPlayerPrivateRemote *this, unint64_t a2)
{
  unsigned __int8 *v3;
  _QWORD *result;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  int v9;
  WebCore::MediaPlayer *v10;
  unint64_t v11;

  v11 = a2;
  v3 = (unsigned __int8 *)this + 480;
  if (__ldaxr((unsigned __int8 *)this + 480))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 480);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)this + 67, &v11);
  if (result)
  {
    v6 = (uint64_t)result;
    v7 = (unsigned __int8 *)*((_QWORD *)this + 16);
    if (v7)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v7, *((_QWORD *)this + 17), &v10);
      if (v10)
      {
        WebCore::MediaPlayer::removeVideoTrack(v10, *(WebCore::VideoTrackPrivate **)(v6 + 24));
        v8 = (unsigned __int8 **)v10;
        v10 = 0;
        if (v8)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v8);
      }
    }
    result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>((_QWORD *)this + 67, &v11);
  }
  v9 = __ldxr(v3);
  if (v9 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::remoteVideoTrackConfigurationChanged(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  _QWORD *v7;
  uint64_t result;
  const WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  int v16;
  _QWORD *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  unint64_t v21;
  _QWORD *v22;

  v21 = a2;
  v5 = (unsigned __int8 *)(a1 + 480);
  if (__ldaxr((unsigned __int8 *)(a1 + 480)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 480);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v7 = (_QWORD *)(a1 + 536);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>(v7, &v21);
  if (result)
  {
    v10 = (_QWORD *)result;
    v11 = *(_QWORD *)(result + 24);
    v12 = *(_QWORD *)(v11 + 168);
    v13 = *a3;
    result = (uint64_t)WebKit::VideoTrackPrivateRemote::updateConfiguration(v11, a3, v9);
    if (v12 != v13)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove(v7, v10, (uint64_t)&v22);
      v14 = v22;
      HIBYTE(v20) = 1;
      v22[2] = *(_QWORD *)(v11 + 168);
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__node_insert_unique(v7, v14);
      if ((v15 & 1) != 0)
      {
        v14 = 0;
        HIBYTE(v20) = 0;
      }
      v17 = v14;
      v18 = v20;
      v19 = 0;
      if (v20 >= 0x100u)
        HIBYTE(v20) = 0;
      std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v17);
      result = std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100]((uint64_t)&v19);
    }
  }
  v16 = __ldxr(v5);
  if (v16 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::load(WebKit::MediaPlayerPrivateRemote *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  WebCore::DeprecatedGlobalSettings *v8;
  os_unfair_lock_s *v9;
  char v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  const char *v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  WebKit::RemoteMediaPlayerMIMETypeCache *v29;
  char *v30;
  WTF::ThreadSafeWeakPtrControlBlock *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF::ThreadSafeWeakPtrControlBlock *v34;
  WTF::ThreadSafeWeakPtrControlBlock *v35;
  WTF::StringImpl *v36;
  WebCore::PlatformStrategies *v37;
  WebCore::MediaStrategy *v38;
  WTF::ThreadSafeWeakPtrControlBlock *v39;
  WTF::ThreadSafeWeakPtrControlBlock *v40;
  char *v41;
  unsigned __int8 *result;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  unint64_t v51;
  size_t v52;
  void *v53;
  size_t v54;
  char v55;
  uint64_t v56;
  uint64_t IdentifierInternal;
  IPC::Encoder *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;

  if (*((_BYTE *)this + 176) == 1
    || (v37 = (WebCore::PlatformStrategies *)WebCore::platformStrategies(this),
        v38 = (WebCore::MediaStrategy *)WebCore::PlatformStrategies::mediaStrategy(v37),
        WebCore::MediaStrategy::mockMediaSourceEnabled(v38))
    && *((_BYTE *)this + 176) == 8)
  {
    IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    v8 = (WebCore::DeprecatedGlobalSettings *)WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this + 21));
    v9 = (os_unfair_lock_s *)*((_QWORD *)v8 + 3);
    v10 = *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(v8) + 32);
    v11 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 6);
    v56 = IdentifierInternal;
    v55 = v10;
    if (v11)
      v12 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
    else
      v12 = 0;
    v13 = *((_QWORD *)this + 23);
    v14 = (char *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v14 = &off_1E34E6120;
    *((_QWORD *)v14 + 1) = v12;
    *((_QWORD *)v14 + 2) = this;
    *((_QWORD *)v14 + 3) = this;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 1134;
    *(_QWORD *)(v16 + 8) = v13;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v58 = (IPC::Encoder *)v16;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)a2);
    IPC::ArgumentCoder<WebCore::ContentType,void>::encode((IPC::Encoder *)v16, (uint64_t *)a3);
    v17 = *(_QWORD *)(v16 + 544);
    v18 = v17 + 1;
    v19 = *(_QWORD *)(v16 + 552);
    if (v19 < v17 + 1)
    {
      v51 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v52 = v51;
        v51 *= 2;
      }
      while (v52 < v18);
      v54 = v52;
      result = (unsigned __int8 *)mmap(0, v52, 3, 4098, -1, 0);
      if (result == (unsigned __int8 *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v20 = result;
      memcpy(result, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
      v53 = *(void **)(v16 + 528);
      if (v53 != (void *)(v16 + 16))
        munmap(v53, *(_QWORD *)(v16 + 552));
      *(_QWORD *)(v16 + 528) = v20;
      *(_QWORD *)(v16 + 552) = v54;
      v21 = *(_QWORD *)(v16 + 544);
    }
    else
    {
      v20 = *(unsigned __int8 **)(v16 + 528);
      v21 = *(_QWORD *)(v16 + 544);
    }
    bzero(&v20[v21], v17 - v21);
    *(_QWORD *)(v16 + 544) = v18;
    v22 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v17);
    *(_QWORD *)(v16 + 536) = v22 + 1;
    *v22 = v55;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v16, &IdentifierInternal);
    v59 = v14;
    v60 = v15;
    IPC::Connection::sendMessageWithAsyncReply(v9, &v58, (uint64_t *)&v59, 0, 0);
    v24 = v59;
    v59 = 0;
    if (v24)
      (*(void (**)(const char *))(*(_QWORD *)v24 + 8))(v24);
    v25 = v58;
    v58 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v23);
      WTF::fastFree(v26, v27);
    }
    v28 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this + 21));
    v29 = WebKit::RemoteMediaPlayerManager::typeCache(*((_QWORD *)this + 21), *((_BYTE *)this + 176));
    v30 = (char *)WTF::fastMalloc((WTF *)0x100);
    WebKit::MediaSourcePrivateRemote::queue((WebKit::MediaSourcePrivateRemote *)v30);
    WebCore::MediaSourcePrivate::MediaSourcePrivate();
    *(_QWORD *)v30 = off_1E34E5970;
    *((_QWORD *)v30 + 20) = &unk_1E34E5A28;
    v31 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v28 + 16);
    if (v31)
      v31 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v31);
    *((_QWORD *)v30 + 21) = v31;
    *((_QWORD *)v30 + 22) = v28;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v32 = &off_1E34B0558;
    v32[1] = 0;
    v33 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v33 = 0;
    *(_OWORD *)(v33 + 8) = xmmword_1978CE9C0;
    *(_QWORD *)(v33 + 24) = v32;
    v32[2] = v33;
    *v32 = off_1E34B0628;
    v34 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)v30 + 1);
    if (v34)
      v34 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v34);
    v32[3] = v34;
    v32[4] = v30;
    *((_QWORD *)v30 + 23) = v32;
    *((_QWORD *)v30 + 24) = v56;
    *((_QWORD *)v30 + 25) = v29;
    v35 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 6);
    if (v35)
      v35 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v35);
    *((_QWORD *)v30 + 26) = v35;
    *((_QWORD *)v30 + 27) = this;
    *((_WORD *)v30 + 112) = 0;
    if ((*(uint64_t (**)(WebCore::MediaSourcePrivateClient *))(*(_QWORD *)a4 + 48))(a4))
      v36 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaSourcePrivateClient *))(*(_QWORD *)a4 + 48))(a4);
    else
      v36 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    v43 = (unsigned int *)((char *)v36 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    *((_QWORD *)v30 + 29) = v36;
    v45 = *((_QWORD *)this + 15);
    *((_QWORD *)v30 + 30) = v45;
    *((_QWORD *)v30 + 31) = 0;
    v59 = "MediaSourcePrivateRemote";
    v60 = 25;
    v61 = "MediaSourcePrivateRemote";
    v62 = v45;
    if (*((_BYTE *)v36 + 12))
      v36 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v59);
    v46 = *(_QWORD *)(v28 + 24);
    v47 = WebKit::MediaSourcePrivateRemote::queue(v36);
    IPC::Connection::addWorkQueueMessageReceiver(v46, 0x17u, v47, *((_QWORD *)v30 + 23), *((_QWORD *)v30 + 24));
    (*(void (**)(WebCore::MediaSourcePrivateClient *, _QWORD))(*(_QWORD *)a4 + 40))(a4, *((_QWORD *)v30 + 30));
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*((unsigned __int8 **)v30 + 1));
    v59 = v30;
    result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::MediaSourcePrivateClient *, const char **))(*(_QWORD *)a4 + 16))(a4, &v59);
    v49 = v59;
    v59 = 0;
    if (v49)
      result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v49 + 1), v48);
    v50 = *((_QWORD *)this + 59);
    *((_QWORD *)this + 59) = v30;
    if (v50)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v50 + 8), v48);
  }
  else
  {
    v39 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 6);
    if (v39)
      v40 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v39);
    else
      v40 = 0;
    v41 = (char *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v41 = &off_1E34E6148;
    *((_QWORD *)v41 + 1) = v40;
    *((_QWORD *)v41 + 2) = this;
    *((_QWORD *)v41 + 3) = this;
    v59 = v41;
    WTF::callOnMainRunLoop();
    result = (unsigned __int8 *)v59;
    v59 = 0;
    if (result)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::PlatformStrategies::mediaStrategy(WebCore::PlatformStrategies *this)
{
  unint64_t *v2;
  unint64_t v3;
  WebCore::PlatformStrategies *v5;
  WebCore::PlatformStrategies ***v6;
  WebCore::PlatformStrategies **v7;

  v2 = (unint64_t *)((char *)this + 24);
  v5 = this;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformStrategies::mediaStrategy(void)::{lambda(void)#1} &&>>);
  }
  return *((_QWORD *)this + 4);
}

uint64_t WebKit::MediaPlayerPrivateRemote::load(WebKit::MediaPlayerPrivateRemote *this, WebCore::MediaStreamPrivate *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v3;
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v3 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 6);
  if (v3)
    v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v3);
  else
    v4 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34E6170;
  v5[1] = v4;
  v5[2] = this;
  v5[3] = this;
  v7 = (uint64_t)v5;
  WTF::callOnMainRunLoop();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::platformLayer(WebKit::MediaPlayerPrivateRemote *this)
{
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  CFTypeRef cf;

  if (!*((_QWORD *)this + 20) && *((_DWORD *)this + 188))
  {
    v2 = ceilf(WebKit::MediaPlayerPrivateRemote::videoLayerSize(this));
    if (v2 >= 2147500000.0)
    {
      v4 = 0x7FFFFFFFLL;
    }
    else if (v2 <= -2147500000.0)
    {
      v4 = 0x80000000;
    }
    else
    {
      v4 = (int)v2;
    }
    v5 = ceilf(v3);
    if (v5 >= 2147500000.0)
    {
      v6 = 0x7FFFFFFF00000000;
    }
    else if (v5 <= -2147500000.0)
    {
      v6 = 0x8000000000000000;
    }
    else
    {
      v6 = (unint64_t)(int)v5 << 32;
    }
    v7 = HIDWORD(v6);
    WebKit::createVideoLayerRemote((uint64_t)this, (WebKit::LayerHostingContext *)*((unsigned int *)this + 188), *((unsigned __int8 *)this + 656), v6 | v4, (WKVideoLayerRemote **)&cf);
    v8 = cf;
    cf = 0;
    v9 = (const void *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v8;
    if (v9)
    {
      CFRelease(v9);
      v10 = cf;
      cf = 0;
      if (v10)
        CFRelease(v10);
    }
    (*(void (**)(_QWORD, _QWORD, float, float))(**((_QWORD **)this + 19) + 24))(*((_QWORD *)this + 19), *((_QWORD *)this + 20), (float)(int)v4, (float)(int)v7);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 16))(*((_QWORD *)this + 19));
}

void WebKit::MediaPlayerPrivateRemote::setVideoFullscreenLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 152);
  cf = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)v3 + 48))(v3, a2, a3, &cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::updateVideoFullscreenInlineImage(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1177;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::setVideoFullscreenFrame(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  WTF::String *v12;
  WTF::String *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  WTF *v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::String *v33;
  WTF::String *v34;
  void *v35;
  uint64_t i;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  _QWORD v40[4];
  WTF *v41[2];
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint8_t buf[16];
  int v52;
  _DWORD v53[8];
  _DWORD v54[6];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 120);
  v40[0] = "MediaPlayerPrivateRemote";
  v40[1] = 25;
  v40[2] = "setVideoFullscreenFrame";
  v40[3] = v11;
  if (!*(_BYTE *)(v10 + 12))
    return (*(uint64_t (**)(_QWORD, float, float, float, float))(**(_QWORD **)(a1 + 152) + 64))(*(_QWORD *)(a1 + 152), a2, a3, a4, a5);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v40);
  v12 = (WTF::String *)WTF::String::String((WTF::String *)&v45, "width = ");
  WTF::String::number(v12, a4);
  v13 = (WTF::String *)WTF::String::String((WTF::String *)&v43, ", height = ");
  WTF::String::number(v13, a5);
  v41[0] = v45;
  v50 = v44;
  *(_QWORD *)buf = v46;
  v48 = v42;
  v49 = v43;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v41, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, &v47);
  if (v47)
  {
    v16 = v42;
    v42 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v43;
    v43 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v44;
    v44 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v45;
    v45 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v46;
    v46 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v15);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = qword_1ECE71348;
    v22 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v41[0] ? (char *)v41[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v22 = v41[0];
      v41[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = (WTF *)WTF::fastFree(v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (WebKit2LogMedia)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers(v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v31 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v32 = *v30;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v40);
                v52 = 0;
                v33 = (WTF::String *)WTF::String::String((WTF::String *)v53, "width = ");
                v53[2] = 0;
                WTF::String::number(v33, a4);
                v53[6] = 0;
                v34 = (WTF::String *)WTF::String::String((WTF::String *)v54, ", height = ");
                v54[2] = 0;
                WTF::String::number(v34, a5);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v41, (uint64_t)buf, 5uLL);
                (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v32 + 16))(v32, &WebKit2LogMedia, 0, v41);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v35);
                for (i = 72; i != -8; i -= 16)
                {
                  v37 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v31);
            }
            v38 = __ldxr(v25);
            if (v38 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v39 = v47;
    v47 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v39 -= 2;
    }
    return (*(uint64_t (**)(_QWORD, float, float, float, float))(**(_QWORD **)(a1 + 152) + 64))(*(_QWORD *)(a1 + 152), a2, a3, a4, a5);
  }
  __break(0xC471u);
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setVideoFullscreenGravity(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  *(_BYTE *)(a1 + 656) = a2;
  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 24);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1166;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setVideoFullscreenMode(WebKit::RemoteMediaPlayerManager **this, int a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1167;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v8 + 4;
  v10 = *(_QWORD *)(v6 + 552);
  if (v10 < v8 + 4)
  {
    v17 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v9);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v11;
    *(_QWORD *)(v6 + 552) = v18;
    v7 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v11 = *(char **)(v6 + 528);
  }
  bzero(&v11[v7], v8 - v7);
  *(_QWORD *)(v6 + 544) = v9;
  v12 = (_DWORD *)(*(_QWORD *)(v6 + 528) + v8);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::videoFullscreenStandbyChanged(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  char isVideoFullscreenStandby;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  WTF *v14;
  void *v15;
  unsigned __int8 **v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  WebCore::MediaPlayer *v20;
  IPC::Encoder *v21;

  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), &v20);
    if (v20)
    {
      v3 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                              + 21))
                     + 24);
      isVideoFullscreenStandby = WebCore::MediaPlayer::isVideoFullscreenStandby(v20);
      v5 = *((_QWORD *)this + 23);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1178;
      *(_QWORD *)(v6 + 8) = v5;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v21 = (IPC::Encoder *)v6;
      v7 = *(_QWORD *)(v6 + 544);
      v8 = v7 + 1;
      v9 = *(_QWORD *)(v6 + 552);
      if (v9 < v7 + 1)
      {
        v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v18 = v17;
          v17 *= 2;
        }
        while (v18 < v8);
        result = (unsigned __int8 *)mmap(0, v18, 3, 4098, -1, 0);
        if (result == (unsigned __int8 *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v10 = result;
        memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
        v19 = *(void **)(v6 + 528);
        if (v19 != (void *)(v6 + 16))
          munmap(v19, *(_QWORD *)(v6 + 552));
        *(_QWORD *)(v6 + 528) = v10;
        *(_QWORD *)(v6 + 552) = v18;
        v11 = *(_QWORD *)(v6 + 544);
      }
      else
      {
        v10 = *(unsigned __int8 **)(v6 + 528);
        v11 = *(_QWORD *)(v6 + 544);
      }
      bzero(&v10[v11], v7 - v11);
      *(_QWORD *)(v6 + 544) = v8;
      v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
      *(_QWORD *)(v6 + 536) = v12 + 1;
      *v12 = isVideoFullscreenStandby;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
      result = (unsigned __int8 *)v21;
      v21 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
        result = (unsigned __int8 *)WTF::fastFree(v14, v15);
      }
      v16 = (unsigned __int8 **)v20;
      v20 = 0;
      if (v16)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v16);
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::timedMetadata(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::accessLog@<X0>(WebKit::RemoteMediaPlayerManager **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  void *v8;
  uint64_t *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  int v13;
  int v14;
  uint64_t result;
  WebKit::MediaPlayerPrivateRemote *v16;
  uint64_t *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  uint64_t *v22;
  int v23;
  IPC::Encoder *v24;
  uint64_t v25;

  v2 = (WTF::StringImpl *)this;
  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = *((_QWORD *)v2 + 23);
  v25 = 0;
  IPC::Connection::createSyncMessageEncoder(3633, v5, &v25, (uint64_t *)&v24);
  IPC::Connection::sendSyncMessage(v4, v25, (uint64_t *)&v24, 0, (uint64_t)&v22, INFINITY);
  if (!v23)
  {
    LOBYTE(v20) = 0;
    v21 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v22, &v20);
    if (!v21)
    {
      LOBYTE(v17) = 13;
      v6 = 1;
      v19 = 1;
      v7 = v23;
      if (v23 == -1)
        goto LABEL_9;
      goto LABEL_8;
    }
    v7 = v23;
    if (!v23)
    {
      v6 = 0;
      v9 = v22;
      v22 = 0;
      v2 = v20;
      v17 = v9;
      v18 = v20;
      v19 = 0;
      goto LABEL_8;
    }
LABEL_22:
    v16 = (WebKit::MediaPlayerPrivateRemote *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::MediaPlayerPrivateRemote::errorLog(v16);
  }
  if (v23 != 1)
    goto LABEL_22;
  LOBYTE(v17) = (_BYTE)v22;
  v6 = 1;
  v19 = 1;
  v7 = 1;
LABEL_8:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E6188[v7])(&v20, &v22);
LABEL_9:
  v10 = v24;
  v24 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  if (v6)
  {
    v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      v13 = *(_DWORD *)v2;
      *(_DWORD *)v2 += 4;
      v14 = v13 + 2;
      goto LABEL_16;
    }
LABEL_21:
    *a2 = 0;
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34E5F60[v6])(&v22, &v17);
  }
  v18 = 0;
  if (!v2)
    goto LABEL_21;
  v14 = *(_DWORD *)v2;
  *(_DWORD *)v2 += 2;
LABEL_16:
  *a2 = v2;
  if (v14)
  {
    *(_DWORD *)v2 = v14;
  }
  else
  {
    result = WTF::StringImpl::destroy(v2, (WTF::StringImpl *)v8);
    v6 = v19;
    if (v19 == -1)
      return result;
  }
  return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34E5F60[v6])(&v22, &v17);
}

uint64_t WebKit::MediaPlayerPrivateRemote::errorLog@<X0>(WebKit::RemoteMediaPlayerManager **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  void *v8;
  uint64_t *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  int v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  uint64_t *v22;
  int v23;
  IPC::Encoder *v24;
  uint64_t v25;

  v2 = (WTF::StringImpl *)this;
  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = *((_QWORD *)v2 + 23);
  v25 = 0;
  IPC::Connection::createSyncMessageEncoder(3635, v5, &v25, (uint64_t *)&v24);
  IPC::Connection::sendSyncMessage(v4, v25, (uint64_t *)&v24, 0, (uint64_t)&v22, INFINITY);
  if (!v23)
  {
    LOBYTE(v20) = 0;
    v21 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v22, &v20);
    if (!v21)
    {
      LOBYTE(v17) = 13;
      v6 = 1;
      v19 = 1;
      v7 = v23;
      if (v23 == -1)
        goto LABEL_9;
      goto LABEL_8;
    }
    v7 = v23;
    if (!v23)
    {
      v6 = 0;
      v9 = v22;
      v22 = 0;
      v2 = v20;
      v17 = v9;
      v18 = v20;
      v19 = 0;
      goto LABEL_8;
    }
LABEL_22:
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::MediaPlayerPrivateRemote::setBufferingPolicy(v16);
  }
  if (v23 != 1)
    goto LABEL_22;
  LOBYTE(v17) = (_BYTE)v22;
  v6 = 1;
  v19 = 1;
  v7 = 1;
LABEL_8:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E6188[v7])(&v20, &v22);
LABEL_9:
  v10 = v24;
  v24 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  if (v6)
  {
    v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      v13 = *(_DWORD *)v2;
      *(_DWORD *)v2 += 4;
      v14 = v13 + 2;
      goto LABEL_16;
    }
LABEL_21:
    *a2 = 0;
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34E5F70[v6])(&v22, &v17);
  }
  v18 = 0;
  if (!v2)
    goto LABEL_21;
  v14 = *(_DWORD *)v2;
  *(_DWORD *)v2 += 2;
LABEL_16:
  *a2 = v2;
  if (v14)
  {
    *(_DWORD *)v2 = v14;
  }
  else
  {
    result = WTF::StringImpl::destroy(v2, (WTF::StringImpl *)v8);
    v6 = v19;
    if (v19 == -1)
      return result;
  }
  return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34E5F70[v6])(&v22, &v17);
}

char *WebKit::MediaPlayerPrivateRemote::setBufferingPolicy(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 24);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1148;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::canSaveMediaData(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 435);
}

uint64_t WebKit::MediaPlayerPrivateRemote::getStartDate(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t WebKit::MediaPlayerPrivateRemote::startTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 35);
}

char *WebKit::MediaPlayerPrivateRemote::setRateDouble(WebKit::RemoteMediaPlayerManager **this, double a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  double *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1158;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v10 = *(_QWORD *)(v6 + 552);
  if (v10 < v8 + 8)
  {
    v17 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v9);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v11;
    *(_QWORD *)(v6 + 552) = v18;
    v7 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v11 = *(char **)(v6 + 528);
  }
  bzero(&v11[v7], v8 - v7);
  *(_QWORD *)(v6 + 544) = v9;
  v12 = (double *)(*(_QWORD *)(v6 + 528) + v8);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::hasClosedCaptions(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 438);
}

double WebKit::MediaPlayerPrivateRemote::maxFastForwardRate(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 44);
}

double WebKit::MediaPlayerPrivateRemote::minFastReverseRate(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 45);
}

uint64_t WebKit::MediaPlayerPrivateRemote::maxTimeSeekable(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 31);
}

uint64_t WebKit::MediaPlayerPrivateRemote::minTimeSeekable(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 29);
}

double WebKit::MediaPlayerPrivateRemote::seekableTimeRangesLastModifiedTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 46);
}

double WebKit::MediaPlayerPrivateRemote::liveUpdateInterval(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 47);
}

uint64_t WebKit::MediaPlayerPrivateRemote::totalBytes(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setPresentationSize(WebKit::RemoteMediaPlayerManager **this, const WebCore::IntSize *a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1155;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::paintCurrentFrameInContext(WebKit::MediaPlayerPrivateRemote *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3)
{
  uint64_t result;
  void *v5;
  WebCore::NativeImage *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  WebCore::NativeImage *v15;

  result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2);
  if ((result & 1) != 0)
    return result;
  result = WebKit::MediaPlayerPrivateRemote::nativeImageForCurrentTime((uint64_t)this, &v15);
  if (!v15)
    return result;
  WebCore::NativeImage::size(v15);
  result = WebCore::GraphicsContext::drawNativeImage();
  v6 = v15;
  v15 = 0;
  if (!v6)
    return result;
  v7 = *((_QWORD *)v6 + 1);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_8;
  }
  result = MEMORY[0x19AEABB3C](v7);
LABEL_8:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v14 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v14 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
LABEL_15:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      return result;
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
    goto LABEL_15;
  if (v10)
    return result;
LABEL_16:
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v12)
    return WTF::fastFree((WTF *)v7, v5);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::videoFrameForCurrentTime@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  WTF *v23;
  void *v24;
  int v25;
  uint64_t v26;
  unsigned __int8 **v27;
  WebKit::GPUProcessConnection *v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  _BYTE v41[72];
  uint64_t v42;
  int v43;
  uint64_t *v44;
  int v45;
  IPC::Encoder *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[32];
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(this + 680) <= 1u)
  {
    *a2 = 0;
    return this;
  }
  v3 = this;
  v4 = *(uint64_t **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(this + 168))
                   + 24);
  v5 = *(_QWORD *)(v3 + 184);
  v47 = 0;
  IPC::Connection::createSyncMessageEncoder(3638, v5, &v47, (uint64_t *)&v46);
  IPC::Connection::sendSyncMessage((uint64_t)v4, v47, (uint64_t *)&v46, 0, (uint64_t)&v44, INFINITY);
  if (!v45)
  {
    v4 = v44;
    IPC::Decoder::decode<std::optional<WebKit::RemoteVideoFrameProxyProperties>>(v44, (uint64_t)v41);
    if (!v41[64])
      goto LABEL_15;
    v8 = v4[1];
    v9 = *v4;
    v10 = v4[2] - *v4;
    if (v8 <= v10)
    {
      v14 = 0;
      v15 = 0;
      *v4 = 0;
      v4[1] = 0;
      v16 = v4[3];
      if (v16)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
          v15 = *v4;
          v14 = v4[1];
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
      }
    }
    else
    {
      v11 = (unsigned __int8 *)(v9 + v10);
      v4[2] = (uint64_t)(v11 + 1);
      if (v9)
      {
        v12 = *v11;
        if (v12 < 2)
        {
          v48 = *(_OWORD *)&v41[1];
          v49 = *(_OWORD *)&v41[17];
          *(_OWORD *)v50 = *(_OWORD *)&v41[33];
          *(_OWORD *)&v50[15] = *(_OWORD *)&v41[48];
          v7 = v45;
          if (!v45)
          {
            v6 = 0;
            *(_OWORD *)&v41[9] = v48;
            *(_OWORD *)&v41[25] = v49;
            v41[8] = v41[0];
            LOBYTE(v42) = v12 != 0;
            v13 = v44;
            v44 = 0;
            *(_OWORD *)&v41[41] = *(_OWORD *)v50;
            *(_OWORD *)&v41[56] = *(_OWORD *)&v50[15];
            *(_QWORD *)v41 = v13;
            v43 = 0;
            goto LABEL_21;
          }
          goto LABEL_45;
        }
LABEL_14:
        *v4 = 0;
        v4[1] = 0;
        v18 = v4[3];
        if (!v18)
          goto LABEL_15;
        goto LABEL_46;
      }
      v14 = v8;
      v15 = 0;
    }
    v8 = 0;
    v9 = 0;
    *v4 = 0;
    v4[1] = 0;
    v17 = v4[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v9 = *v4;
        v8 = v4[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_14;
  }
  if (v45 == 1)
  {
    v41[0] = (_BYTE)v44;
    v6 = 1;
    v43 = 1;
    v7 = 1;
LABEL_21:
    ((void (*)(__int128 *, uint64_t **))off_1E34E6188[v7])(&v48, &v44);
    goto LABEL_22;
  }
LABEL_45:
  v18 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_46:
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v9);
LABEL_15:
  v19 = (void *)*v4;
  v20 = v4[1];
  *v4 = 0;
  v4[1] = 0;
  v21 = v4[3];
  if (v21)
    v22 = v20 == 0;
  else
    v22 = 1;
  if (!v22)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v21 + 16))(v21, v19);
  v41[0] = 13;
  v6 = 1;
  v43 = 1;
  v7 = v45;
  if (v45 != -1)
    goto LABEL_21;
LABEL_22:
  this = (uint64_t)v46;
  v46 = 0;
  if (this)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)this, v19);
    this = WTF::fastFree(v23, v24);
  }
  if (v6)
  {
    *a2 = 0;
    v25 = 1;
    return ((uint64_t (*)(__int128 *, _BYTE *))off_1E34E5F80[v25])(&v48, v41);
  }
  v49 = *(_OWORD *)&v41[24];
  *(_OWORD *)v50 = *(_OWORD *)&v41[40];
  *(_OWORD *)&v50[16] = *(_OWORD *)&v41[56];
  v51 = v42;
  v48 = *(_OWORD *)&v41[8];
  if ((_BYTE)v42)
  {
    if (v50[24])
    {
      v26 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(v3 + 168));
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v44, (uint64_t **)(v26 + 24));
      v27 = (unsigned __int8 **)v44;
      v28 = (WebKit::GPUProcessConnection *)WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(v3 + 168));
      v29 = (unsigned int *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v28);
      v30 = WTF::fastMalloc((WTF *)0x88);
      WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(v30, v27, v29, (uint64_t)&v48);
      v31 = *(unsigned int **)(v3 + 720);
      *(_QWORD *)(v3 + 720) = v30;
      if (v31)
      {
        v32 = v31 + 2;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v31 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
        }
      }
      this = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v44);
    }
    else
    {
      this = *(_QWORD *)(v3 + 720);
      *(_QWORD *)(v3 + 720) = 0;
      if (this)
      {
        v35 = (unsigned int *)(this + 8);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, (unsigned int *)(this + 8));
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        }
      }
    }
  }
  v38 = *(_QWORD *)(v3 + 720);
  if (v38)
  {
    v39 = (unsigned int *)(v38 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
  }
  *a2 = v38;
  v25 = v43;
  if (v43 != -1)
    return ((uint64_t (*)(__int128 *, _BYTE *))off_1E34E5F80[v25])(&v48, v41);
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::readyState(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 680);
}

uint64_t WebKit::MediaPlayerPrivateRemote::hasAvailableVideoFrame(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 439);
}

uint64_t WebKit::MediaPlayerPrivateRemote::wirelessPlaybackTargetName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 304);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::wirelessPlaybackTargetType(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 338);
}

uint64_t WebKit::MediaPlayerPrivateRemote::wirelessVideoPlaybackDisabled(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 440);
}

char *WebKit::MediaPlayerPrivateRemote::setWirelessVideoPlaybackDisabled(WebKit::MediaPlayerPrivateRemote *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  *((_BYTE *)this + 440) = a2;
  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 24);
  v5 = *((_QWORD *)this + 23);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1172;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::currentPlaybackTargetIsWirelessChanged(WebKit::MediaPlayerPrivateRemote *this, char a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v4;
  WebCore::MediaPlayer *v5;

  *((_BYTE *)this + 714) = a2;
  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), &v5);
    result = (unsigned __int8 *)v5;
    if (v5)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::currentPlaybackTargetIsWirelessChanged(v5);
      v4 = (unsigned __int8 **)v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::isCurrentPlaybackTargetWireless(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 714);
}

WTF::StringImpl *WebKit::MediaPlayerPrivateRemote::setWirelessPlaybackTarget(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  _BYTE v15[16];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 24);
  v5 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  WebKit::MediaPlaybackTargetContextSerialized::MediaPlaybackTargetContextSerialized((uint64_t)v15, v5);
  v6 = *(_QWORD *)(a1 + 184);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1171;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v19 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::encode((IPC::Encoder *)v7, (uint64_t)v15);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v19, 0, 0);
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v10, v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setShouldPlayToPlaybackTarget(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1165;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::didPassCORSAccessCheck(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 441);
}

uint64_t WebKit::MediaPlayerPrivateRemote::isCrossOrigin(WebKit::MediaPlayerPrivateRemote *this, const WebCore::SecurityOrigin *a2)
{
  char *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::SecurityOriginData *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  uint64_t *v17;
  int v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  WebCore::SecurityOriginData *v26;
  WebCore::SecurityOriginData *v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int16 v40;
  int v41;
  uint64_t *v42;
  int v43;
  IPC::Encoder *v44;
  uint64_t v45;
  char v46;

  v3 = (char *)a2 + 8;
  if (WebCore::operator==())
  {
    v4 = *((unsigned __int16 *)this + 216);
    v5 = v4 >> 8;
    return v4 | (v5 << 8);
  }
  v6 = *((_QWORD *)this + 81);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    LODWORD(v39) = -1640531527;
    WORD2(v39) = 0;
    BYTE6(v39) = 0;
    WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v39, (uint64_t)v3);
    v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v39) & v7;
    v9 = (WebCore::SecurityOriginData *)(v6 + 40 * v8);
    if ((WebCore::SecurityOriginData::isNull(v9) & 1) == 0)
    {
      v10 = 1;
      while (1)
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v9);
        if ((v11 & 1) == 0 && (WebCore::operator==() & 1) != 0)
          break;
        v8 = ((_DWORD)v8 + v10) & v7;
        v9 = (WebCore::SecurityOriginData *)(v6 + 40 * v8);
        ++v10;
        if ((WebCore::SecurityOriginData::isNull(v9) & 1) != 0)
          goto LABEL_9;
      }
      v4 = *(unsigned __int16 *)(v6 + 40 * v8 + 32);
      v5 = v4 >> 8;
      if (v4 >> 8)
        return v4 | (v5 << 8);
    }
  }
LABEL_9:
  v12 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                           + 21))
                  + 24);
  v13 = *((_QWORD *)this + 23);
  v45 = 0;
  IPC::Connection::createSyncMessageEncoder(3636, v13, &v45, (uint64_t *)&v44);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v44, (uint64_t)v3);
  IPC::Connection::sendSyncMessage(v12, v45, (uint64_t *)&v44, 0, (uint64_t)&v42, INFINITY);
  v14 = v43;
  if (v43)
  {
    if (v43 == 1)
    {
      LOBYTE(v39) = (_BYTE)v42;
LABEL_15:
      v41 = v14;
      v18 = v14;
      goto LABEL_16;
    }
  }
  else
  {
    v15 = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(v42);
    if ((v15 & 0xFF0000) == 0)
    {
      LOBYTE(v39) = 13;
      v14 = 1;
      v41 = 1;
      v18 = v43;
      if (v43 == -1)
      {
LABEL_17:
        v19 = v44;
        v44 = 0;
        if (v19)
        {
          IPC::Encoder::~Encoder(v19, v16);
          WTF::fastFree(v20, v21);
        }
        v5 = 0;
        if (v14)
          LOWORD(v4) = 0;
        else
          LOWORD(v4) = v12;
        if ((unsigned __int16)v4 < 0x100u)
          goto LABEL_46;
        v22 = (uint64_t *)((char *)this + 648);
        v23 = *v22;
        if (*v22
          || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::optional<BOOL>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::optional<BOOL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v22, 0), (v23 = *v22) != 0))
        {
          v24 = *(_DWORD *)(v23 - 8);
        }
        else
        {
          v24 = 0;
        }
        LODWORD(v42) = -1640531527;
        WORD2(v42) = 0;
        BYTE6(v42) = 0;
        WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v42, (uint64_t)v3);
        v25 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42) & v24;
        v26 = (WebCore::SecurityOriginData *)(v23 + 40 * v25);
        if ((WebCore::SecurityOriginData::isNull(v26) & 1) == 0)
        {
          v27 = 0;
          v28 = 1;
          do
          {
            WebCore::SecurityOriginData::isHashTableDeletedValue(v26);
            if ((v29 & 1) != 0)
            {
              v27 = v26;
            }
            else if ((WebCore::operator==() & 1) != 0)
            {
              goto LABEL_45;
            }
            v25 = (v25 + v28) & v24;
            v26 = (WebCore::SecurityOriginData *)(v23 + 40 * v25);
            ++v28;
          }
          while (!WebCore::SecurityOriginData::isNull(v26));
          if (v27)
          {
            *((_WORD *)v27 + 16) = 0;
            *(_OWORD *)v27 = 0u;
            *((_OWORD *)v27 + 1) = 0u;
            --*(_DWORD *)(*v22 - 16);
            v26 = v27;
          }
        }
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v26, (uint64_t)v3);
        *((_WORD *)v26 + 16) = v4;
        v30 = *v22;
        if (*v22)
          v31 = *(_DWORD *)(v30 - 12) + 1;
        else
          v31 = 1;
        *(_DWORD *)(v30 - 12) = v31;
        v32 = *v22;
        if (*v22)
          v33 = *(_DWORD *)(v32 - 12);
        else
          v33 = 0;
        v34 = (*(_DWORD *)(v32 - 16) + v33);
        v35 = *(unsigned int *)(v32 - 4);
        if (v35 > 0x400)
        {
          if (v35 > 2 * v34)
          {
LABEL_45:
            v14 = v41;
            v5 = BYTE1(v4);
            if (v41 == -1)
              return v4 | (v5 << 8);
LABEL_46:
            ((void (*)(uint64_t **, uint64_t **))off_1E34E5F90[v14])(&v42, &v39);
            return v4 | (v5 << 8);
          }
        }
        else if (3 * v35 > 4 * v34)
        {
          goto LABEL_45;
        }
        WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::optional<BOOL>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::optional<BOOL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v22, (unsigned int *)v26);
        goto LABEL_45;
      }
LABEL_16:
      ((void (*)(char *, uint64_t **))off_1E34E6188[v18])(&v46, &v42);
      goto LABEL_17;
    }
    if (!v43)
    {
      LOWORD(v12) = v15;
      v17 = v42;
      v42 = 0;
      v39 = v17;
      v40 = v15;
      goto LABEL_15;
    }
  }
  v37 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::MediaPlayerPrivateRemote::mediaTimeForTimeValue(v37, v38);
}

uint64_t WebKit::MediaPlayerPrivateRemote::mediaTimeForTimeValue(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

double WebKit::MediaPlayerPrivateRemote::maximumDurationToCacheMediaTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 25);
}

uint64_t WebKit::MediaPlayerPrivateRemote::decodedFrameCount(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::droppedFrameCount(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::audioDecodedByteCount(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::videoDecodedByteCount(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::audioSourceProvider(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *((_QWORD *)this + 58);
  if (!result)
  {
    WebKit::RemoteAudioSourceProvider::create(*((_QWORD *)this + 23), (uint64_t)this + 56, &v4);
    result = v4;
    v3 = *((_QWORD *)this + 58);
    *((_QWORD *)this + 58) = v4;
    if (v3)
    {
      WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      return *((_QWORD *)this + 58);
    }
  }
  return result;
}

void WebKit::MediaPlayerPrivateRemote::createSession(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::setCDM(uint64_t this, WebCore::LegacyCDM *a2)
{
  uint64_t v3;
  WebKit::WebProcess *v4;
  const char *v5;
  WebKit::WebProcess *v6;

  if (a2)
  {
    v3 = this;
    {
      v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v4 = WebKit::WebProcess::WebProcess(v6);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
    }
    v5 = WebKit::WebProcess::supplement<WebKit::RemoteLegacyCDMFactory>((uint64_t)v4);
    this = WebKit::RemoteLegacyCDMFactory::findCDM((uint64_t)v5, *((_QWORD *)a2 + 1));
    if (this)
      return WebKit::RemoteLegacyCDM::setPlayerId(this, *(_QWORD *)(v3 + 184));
  }
  return this;
}

char *WebKit::MediaPlayerPrivateRemote::setCDMSession(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t *v8;

  if (a2 && (*(unsigned int (**)(_QWORD *))(*a2 + 16))(a2) == 4)
  {
    v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                   + 24);
    v6 = a2[4];
    v7 = 1;
  }
  else
  {
    v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                   + 24);
    LOBYTE(v6) = 0;
    v7 = 0;
  }
  v8 = &v6;
  return IPC::Connection::send<Messages::RemoteMediaPlayerProxy::SetLegacyCDMSession>(v4, (uint64_t *)&v8, *(_QWORD *)(a1 + 184));
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::keyAdded(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1132;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::mediaPlayerKeyNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *result;
  void *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  _QWORD v8[3];

  v8[1] = a2;
  v8[2] = a3;
  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), v8);
    if (v8[0])
    {
      WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(&v7);
      WebCore::MediaPlayer::keyNeeded();
      result = v7;
      v7 = 0;
      if (result)
        result = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v5);
      v6 = (unsigned __int8 **)v8[0];
      v8[0] = 0;
      if (v6)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v6);
    }
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::cdmInstanceAttached(WebKit::RemoteMediaPlayerManager **this, WebCore::CDMInstance *a2)
{
  IPC::Encoder *result;
  uint64_t v5;
  WebKit::RemoteMediaPlayerManager *v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  result = (IPC::Encoder *)(*(uint64_t (**)(WebCore::CDMInstance *))(*(_QWORD *)a2 + 40))(a2);
  if ((_DWORD)result == 3)
  {
    v5 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
    v6 = this[23];
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 1126;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v11 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, (uint64_t *)a2 + 5);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::cdmInstanceDetached(WebKit::RemoteMediaPlayerManager **this, WebCore::CDMInstance *a2)
{
  IPC::Encoder *result;
  uint64_t v5;
  WebKit::RemoteMediaPlayerManager *v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  result = (IPC::Encoder *)(*(uint64_t (**)(WebCore::CDMInstance *))(*(_QWORD *)a2 + 40))(a2);
  if ((_DWORD)result == 3)
  {
    v5 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
    v6 = this[23];
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 1127;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v11 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, (uint64_t *)a2 + 5);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::attemptToDecryptWithInstance(WebKit::RemoteMediaPlayerManager **this, WebCore::CDMInstance *a2)
{
  IPC::Encoder *result;
  uint64_t v5;
  WebKit::RemoteMediaPlayerManager *v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  result = (IPC::Encoder *)(*(uint64_t (**)(WebCore::CDMInstance *))(*(_QWORD *)a2 + 40))(a2);
  if ((_DWORD)result == 3)
  {
    v5 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
    v6 = this[23];
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 1122;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v11 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, (uint64_t *)a2 + 5);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::waitingForKeyChanged(WebKit::MediaPlayerPrivateRemote *this, char a2)
{
  unsigned __int8 *result;
  unsigned __int8 **v4;
  WebCore::MediaPlayer *v5;

  *((_BYTE *)this + 715) = a2;
  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), &v5);
    result = (unsigned __int8 *)v5;
    if (v5)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::waitingForKeyChanged(v5);
      v4 = (unsigned __int8 **)v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
    }
  }
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::MediaPlayerPrivateRemote::initializationDataEncountered(uint64_t a1)
{
  unsigned __int8 *v2;
  WTF::DeferrableRefCountedBase *v3;
  unsigned __int8 **v4;
  WTF::DeferrableRefCountedBase *result;
  WTF::DeferrableRefCountedBase *v6;
  unsigned __int8 **v7;
  WTF::DeferrableRefCountedBase *v8;

  JSC::ArrayBuffer::create();
  v2 = *(unsigned __int8 **)(a1 + 128);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v2, *(_QWORD *)(a1 + 136), &v7);
    if (v7)
    {
      v3 = v8;
      v8 = 0;
      v6 = v3;
      WebCore::MediaPlayer::initializationDataEncountered();
      if (v6)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
      v4 = v7;
      v7 = 0;
      if (v4)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
    }
  }
  result = v8;
  v8 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::waitingForKey(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 715);
}

char *WebKit::MediaPlayerPrivateRemote::setShouldContinueAfterKeyNeeded(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1160;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::setTextTrackRepresentation(uint64_t a1, uint64_t a2)
{
  if (a2)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 80))(*(_QWORD *)(a1 + 152), a2);
}

uint64_t WebKit::MediaPlayerPrivateRemote::syncTextTrackBounds(WebKit::MediaPlayerPrivateRemote *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 88))(*((_QWORD *)this + 19));
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::tracksChanged(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1176;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::beginSimulatedHDCPError(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1124;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::endSimulatedHDCPError(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1130;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::languageOfPrimaryAudioTrack@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 296);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::MediaPlayerPrivateRemote::extraMemoryCost(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

__n128 WebKit::MediaPlayerPrivateRemote::videoPlaybackQualityMetrics@<Q0>(WebKit::MediaPlayerPrivateRemote *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  __n128 result;
  __int128 v9;

  WTF::MonotonicTime::now(this);
  v5 = v4;
  v6 = *((double *)this + 84);
  if (v6 == 0.0)
  {
    v7 = 1.0;
    goto LABEL_5;
  }
  if (vabdd_f64(v4 - *((double *)this + 83), v6) > 0.25)
  {
    v7 = v4 - *((double *)this + 83);
LABEL_5:
    WebKit::MediaPlayerPrivateRemote::updateVideoPlaybackMetricsUpdateInterval(this, *(const WTF::Seconds **)&v7);
  }
  *((double *)this + 83) = v5;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 53);
  result = *(__n128 *)((char *)this + 392);
  v9 = *(_OWORD *)((char *)this + 408);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v9;
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::notifyTrackModeChanged(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1136;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::notifyActiveSourceBuffersChanged(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1135;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::applicationWillResignActive(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1121;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::applicationDidBecomeActive(WebKit::RemoteMediaPlayerManager **this)
{
  uint64_t v2;
  WebKit::RemoteMediaPlayerManager *v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v3 = this[23];
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1120;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setPreferredDynamicRangeMode(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 24);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1153;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::performTaskAtTime(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  WTF::ThreadSafeWeakPtrControlBlock *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v20[2];
  IPC::Encoder *v21;

  v6 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 48);
  if (v6)
    v7 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
  else
    v7 = 0;
  v8 = *a2;
  *a2 = 0;
  v9 = *(os_unfair_lock_s **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                            + 24);
  v10 = *(_QWORD *)(a1 + 184);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E34E61A8;
  v11[1] = v7;
  v11[2] = a1;
  v11[3] = v8;
  v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 1139;
  *(_QWORD *)(v13 + 8) = v10;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v21 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v13, a3);
  v20[0] = (uint64_t)v11;
  v20[1] = v12;
  IPC::Connection::sendMessageWithAsyncReply(v9, &v21, v20, 0, 0);
  v15 = v20[0];
  v20[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v14);
    WTF::fastFree(v17, v18);
  }
  return 1;
}

char *WebKit::MediaPlayerPrivateRemote::playAtHostTime(WebKit::MediaPlayerPrivateRemote *this, const WTF::MonotonicTime *a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  char *result;
  unint64_t v20;
  size_t v21;
  void *v22;
  IPC::Encoder *v23;

  v2 = *((unsigned __int8 *)this + 212);
  if (!*((_BYTE *)this + 212))
    return (char *)(v2 != 0);
  v5 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 24);
  v6 = *((_QWORD *)this + 23);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1141;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v23 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(v7 + 544);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  v12 = *(_QWORD *)(v7 + 552);
  if (v12 >= v10 + 8)
  {
    v13 = *(char **)(v7 + 528);
LABEL_4:
    bzero(&v13[v9], v10 - v9);
    *(_QWORD *)(v7 + 544) = v11;
    v14 = (_QWORD *)(*(_QWORD *)(v7 + 528) + v10);
    *(_QWORD *)(v7 + 536) = v14 + 1;
    *v14 = v8;
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v15);
      WTF::fastFree(v17, v18);
    }
    return (char *)(v2 != 0);
  }
  v20 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v21 = v20;
    v20 *= 2;
  }
  while (v21 < v11);
  result = (char *)mmap(0, v21, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v13 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v22 = *(void **)(v7 + 528);
    if (v22 != (void *)(v7 + 16))
      munmap(v22, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v13;
    *(_QWORD *)(v7 + 552) = v21;
    v9 = *(_QWORD *)(v7 + 544);
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::pauseAtHostTime(WebKit::MediaPlayerPrivateRemote *this, const WTF::MonotonicTime *a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  char *result;
  unint64_t v20;
  size_t v21;
  void *v22;
  IPC::Encoder *v23;

  v2 = *((unsigned __int8 *)this + 213);
  if (!*((_BYTE *)this + 213))
    return (char *)(v2 != 0);
  v5 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 24);
  v6 = *((_QWORD *)this + 23);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1138;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v23 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(v7 + 544);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  v12 = *(_QWORD *)(v7 + 552);
  if (v12 >= v10 + 8)
  {
    v13 = *(char **)(v7 + 528);
LABEL_4:
    bzero(&v13[v9], v10 - v9);
    *(_QWORD *)(v7 + 544) = v11;
    v14 = (_QWORD *)(*(_QWORD *)(v7 + 528) + v10);
    *(_QWORD *)(v7 + 536) = v14 + 1;
    *v14 = v8;
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v15);
      WTF::fastFree(v17, v18);
    }
    return (char *)(v2 != 0);
  }
  v20 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v21 = v20;
    v20 *= 2;
  }
  while (v21 < v11);
  result = (char *)mmap(0, v21, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v13 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v22 = *(void **)(v7 + 528);
    if (v22 != (void *)(v7 + 16))
      munmap(v22, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v13;
    *(_QWORD *)(v7 + 552) = v21;
    v9 = *(_QWORD *)(v7 + 544);
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

__n128 WebKit::MediaPlayerPrivateRemote::videoFrameMetadata@<Q0>(WebKit::MediaPlayerPrivateRemote *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  *(_QWORD *)(a2 + 96) = *((_QWORD *)this + 107);
  v2 = *(_OWORD *)((char *)this + 840);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 824);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *(_OWORD *)((char *)this + 776);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 760);
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)((char *)this + 808);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 792);
  *(__n128 *)(a2 + 48) = result;
  *((_BYTE *)this + 760) = 0;
  *((_BYTE *)this + 856) = 0;
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::startVideoFrameMetadataGathering(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  *((_BYTE *)this + 864) = 1;
  v2 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 24);
  v3 = *((_QWORD *)this + 23);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1173;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::stopVideoFrameMetadataGathering(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  *((_BYTE *)this + 864) = 0;
  v2 = (unsigned int *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  v6 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*((WebKit::RemoteMediaPlayerManager **)this
                                                                          + 21))
                 + 24);
  v7 = *((_QWORD *)this + 23);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1174;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::playerContentBoxRectChanged(WebKit::RemoteMediaPlayerManager **this, const WebCore::LayoutRect *a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1142;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode((IPC::Encoder *)v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setShouldDisableHDR(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1161;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::requestResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *result;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  CFTypeRef v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  __int16 v45;
  CFTypeRef cf;
  char v47;
  unsigned __int8 **v48[2];
  uint64_t v49;
  uint64_t v50;

  v50 = a2;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 144) + 32))(&v49, *(_QWORD *)(a1 + 144), a3, a4);
  v6 = v49;
  if (v49)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    v8 = *(unsigned __int8 ***)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                              + 24);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v8);
    v9 = v49;
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = off_1E34E6E00;
    v48[0] = 0;
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(v7 + 24) = v9;
    *(_QWORD *)(v7 + 32) = a2;
    v41 = (WTF::StringImpl *)v7;
    WebCore::PlatformMediaResource::setClient(v6, (uint64_t *)&v41);
    v10 = (unsigned int *)v41;
    v41 = 0;
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    result = (unsigned __int8 *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v48);
    v16 = (uint64_t *)(a1 + 488);
    v17 = *(_QWORD *)(a1 + 488);
    if (v17
      || (result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 488), 0), (v17 = *v16) != 0))
    {
      v18 = *(_DWORD *)(v17 - 8);
    }
    else
    {
      v18 = 0;
    }
    v19 = v50;
    v20 = (v19 + ~(v19 << 32)) ^ ((unint64_t)(v19 + ~(v19 << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v18 & ((v22 >> 31) ^ v22);
    v24 = (uint64_t *)(v17 + 16 * v23);
    v25 = *v24;
    if (!*v24)
    {
LABEL_18:
      *v24 = v19;
      v28 = v49;
      v49 = 0;
      v29 = v24[1];
      v24[1] = v28;
      if (v29)
        result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v29 + 8), v15);
      v30 = *v16;
      if (*v16)
        v31 = *(_DWORD *)(v30 - 12) + 1;
      else
        v31 = 1;
      *(_DWORD *)(v30 - 12) = v31;
      v35 = *v16;
      if (*v16)
        v36 = *(_DWORD *)(v35 - 12);
      else
        v36 = 0;
      v37 = (*(_DWORD *)(v35 - 16) + v36);
      v38 = *(unsigned int *)(v35 - 4);
      if (v38 > 0x400)
      {
        if (v38 > 2 * v37)
          goto LABEL_43;
      }
      else if (3 * v38 > 4 * v37)
      {
        goto LABEL_43;
      }
      result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v16, v24);
      goto LABEL_43;
    }
    v26 = 0;
    v27 = 1;
    while (v25 != v50)
    {
      if (v25 == -1)
        v26 = v24;
      v23 = (v23 + v27) & v18;
      v24 = (uint64_t *)(v17 + 16 * v23);
      v25 = *v24;
      ++v27;
      if (!*v24)
      {
        if (v26)
        {
          *v26 = 0;
          v26[1] = 0;
          --*(_DWORD *)(*v16 - 16);
          v24 = v26;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
    v32 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                    + 24);
    v41 = 0;
    v42 = 0;
    WTF::URL::invalidate((WTF::URL *)&v42);
    v43 = 0;
    v44 = 0;
    v45 = 3;
    cf = 0;
    v47 = 1;
    v48[0] = (unsigned __int8 **)&v50;
    v48[1] = (unsigned __int8 **)&v41;
    IPC::Connection::send<Messages::RemoteMediaResourceManager::LoadFailed>(v32, (uint64_t)v48, 0, 0, 0);
    v33 = cf;
    cf = 0;
    if (v33)
      CFRelease(v33);
    v34 = v43;
    v43 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v34 -= 2;
    }
    v39 = v42;
    v42 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v39 -= 2;
    }
    result = (unsigned __int8 *)v41;
    v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_43:
  v40 = v49;
  v49 = 0;
  if (v40)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v40 + 8), v15);
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteMediaResourceManager::LoadFailed>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1194;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v10, *(WebCore::ResourceError **)(a2 + 8));
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::MediaPlayerPrivateRemote::sendH2Ping(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144));
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::removeResource(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  unsigned __int8 *result;
  void *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;

  v8 = a2;
  v2 = (uint64_t *)(a1 + 488);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 488), &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::take(v2, v3, &v7);
  result = v7;
  if (v7)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v7 + 24))(v7);
    v6 = v7;
    v7 = 0;
    if (v6)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((unsigned __int8 **)v6 + 1), v5);
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::resourceNotSupported(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 *result;
  unsigned __int8 **v3;
  uint64_t v4;

  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), &v4);
    if (v4)
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 88))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8));
      v3 = (unsigned __int8 **)v4;
      v4 = 0;
      if (v3)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::activeSourceBuffersChanged(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 *result;
  unsigned __int8 **v3;
  uint64_t v4;

  result = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 17), &v4);
    if (v4)
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 160))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8));
      v3 = (unsigned __int8 **)v4;
      v4 = 0;
      if (v3)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::getRawCookies(uint64_t a1)
{
  unsigned __int8 *result;
  unsigned __int8 **v3;
  unsigned __int8 *v4;

  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), &v4);
    result = v4;
    if (v4)
    {
      result = (unsigned __int8 *)WebCore::MediaPlayer::getRawCookies();
      v3 = (unsigned __int8 **)v4;
      v4 = 0;
      if (v3)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
    }
  }
  return result;
}

char *`non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::logChannel(WebKit::MediaPlayerPrivateRemote *this)
{
  return &WebKit2LogMedia;
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::requestHostingContextID(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  IPC::Encoder *result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21[2];
  IPC::Encoder *v22;

  v2 = a2;
  if (*(_DWORD *)(a1 + 752))
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 736);
    v7 = *(unsigned int *)(a1 + 748);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 744))
    {
      v2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)a2);
      v7 = *(unsigned int *)(a1 + 748);
      v8 = (_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v7);
    }
    else
    {
      v8 = (_QWORD *)(*v6 + 8 * v7);
    }
    v9 = *v2;
    *v2 = 0;
    *v8 = v9;
    *(_DWORD *)(a1 + 748) = v7 + 1;
    v10 = *(os_unfair_lock_s **)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                               + 24);
    v11 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 48);
    if (v11)
      v12 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
    else
      v12 = 0;
    v13 = *(_QWORD *)(a1 + 184);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = &off_1E34E61D0;
    v14[1] = v12;
    v14[2] = a1;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 1146;
    *(_QWORD *)(v16 + 8) = v13;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v21[1] = v15;
    v22 = (IPC::Encoder *)v16;
    v21[0] = (uint64_t)v14;
    IPC::Connection::sendMessageWithAsyncReply(v10, &v22, v21, 0, 0);
    v18 = v21[0];
    v21[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    result = v22;
    v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v17);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::hostingContextID(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned int *)this + 188);
}

uint64_t WebKit::MediaPlayerPrivateRemote::setLayerHostingContextID(uint64_t this, void *a2)
{
  uint64_t v3;
  const void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD *v11;
  int v12;
  int v13;

  if (*(_DWORD *)(this + 752) != (_DWORD)a2)
  {
    v3 = this;
    *(_DWORD *)(this + 752) = (_DWORD)a2;
    v4 = *(const void **)(this + 160);
    *(_QWORD *)(v3 + 160) = 0;
    if (v4)
      CFRelease(v4);
    v5 = *(_QWORD **)(v3 + 736);
    v11 = v5;
    v6 = *(unsigned int *)(v3 + 748);
    v12 = *(_DWORD *)(v3 + 744);
    v13 = v6;
    v10[0] = 0;
    *(_QWORD *)(v3 + 736) = 0;
    v10[1] = 0;
    *(_QWORD *)(v3 + 744) = 0;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, a2);
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      do
      {
        v9 = *v5;
        *v5++ = 0;
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v9 + 16))(v9, a2);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v8 -= 8;
      }
      while (v8);
    }
    return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v7);
  }
  return this;
}

_QWORD *WebKit::MediaPlayerPrivateRemote::audioTrackPrivateRemote@<X0>(WebKit::MediaPlayerPrivateRemote *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  _QWORD *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;

  v12 = a2;
  v5 = (unsigned __int8 *)this + 480;
  if (__ldaxr((unsigned __int8 *)this + 480))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 480);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)this + 62, &v12);
  if (result)
  {
    v8 = result[3];
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

_QWORD *WebKit::MediaPlayerPrivateRemote::videoTrackPrivateRemote@<X0>(WebKit::MediaPlayerPrivateRemote *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  _QWORD *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;

  v12 = a2;
  v5 = (unsigned __int8 *)this + 480;
  if (__ldaxr((unsigned __int8 *)this + 480))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 480);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)this + 67, &v12);
  if (result)
  {
    v8 = result[3];
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

_QWORD *WebKit::MediaPlayerPrivateRemote::textTrackPrivateRemote@<X0>(WebKit::MediaPlayerPrivateRemote *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  _QWORD *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;

  v12 = a2;
  v5 = (unsigned __int8 *)this + 480;
  if (__ldaxr((unsigned __int8 *)this + 480))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 480);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>((_QWORD *)this + 72, &v12);
  if (result)
  {
    v8 = result[3];
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::setShouldCheckHardwareSupport(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1159;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

char *WebKit::MediaPlayerPrivateRemote::isInFullscreenOrPictureInPictureChanged(WebKit::RemoteMediaPlayerManager **this, char a2)
{
  uint64_t v4;
  WebKit::RemoteMediaPlayerManager *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
  v5 = this[23];
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1131;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::commitAllTransactions(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::MediaSourcePrivateRemote::queue(WebKit::MediaSourcePrivateRemote *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebKit::MediaSourcePrivateRemote::queue(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebKit::MediaSourcePrivateRemote::queue(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::MediaSourcePrivateRemote::queue(void)::$_0 &&>>);
  }
  return WebKit::MediaSourcePrivateRemote::queue(void)::workQueue;
}

uint64_t WebKit::MediaSourcePrivateRemote::logger(WebKit::MediaSourcePrivateRemote *this)
{
  return *((_QWORD *)this + 29);
}

char *WebKit::MediaSourcePrivateRemote::logChannel(WebKit::MediaSourcePrivateRemote *this)
{
  return &WebKit2LogMedia;
}

const char *WebKit::MediaSourcePrivateRemote::logClassName(WebKit::MediaSourcePrivateRemote *this)
{
  return "MediaSourcePrivateRemote";
}

uint64_t WebKit::MediaSourcePrivateRemote::logIdentifier(WebKit::MediaSourcePrivateRemote *this)
{
  return *((_QWORD *)this + 30);
}

void WebKit::MediaSourcePrivateRemote::~MediaSourcePrivateRemote(WebKit::MediaSourcePrivateRemote *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _QWORD v14[4];

  v3 = *((_QWORD *)this + 29);
  v4 = *((_QWORD *)this + 30);
  v14[0] = "MediaSourcePrivateRemote";
  v14[1] = 25;
  v14[2] = "~MediaSourcePrivateRemote";
  v14[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 21);
  if (v5)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v5, *((_QWORD *)this + 22), v14);
    if (v14[0])
    {
      IPC::Connection::removeWorkQueueMessageReceiver(*(_QWORD *)(v14[0] + 24), 0x17u, *((_QWORD *)this + 24));
      v6 = v14[0];
      v14[0] = 0;
      if (v6)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  v11 = (unsigned __int8 *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2);
  v12 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), a2);
  v13 = (unsigned __int8 *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  WebCore::MediaSourcePrivate::~MediaSourcePrivate(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::MediaSourcePrivateRemote::~MediaSourcePrivateRemote(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::MediaSourcePrivateRemote::~MediaSourcePrivateRemote(WebKit::MediaSourcePrivateRemote *this, void *a2)
{
  WebKit::MediaSourcePrivateRemote::~MediaSourcePrivateRemote((WebKit::MediaSourcePrivateRemote *)((char *)this - 160), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::MediaSourcePrivateRemote::~MediaSourcePrivateRemote((WebKit::MediaSourcePrivateRemote *)((char *)this - 160), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::MediaSourcePrivateRemote::addSourceBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF *v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t i;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[4];
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60[2];
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint8_t buf[16];
  uint64_t *v65;
  WTF::StringImpl *v66[2];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 **)(a1 + 208);
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v7, *(_QWORD *)(a1 + 216), &v59);
  else
    v59 = 0;
  v8 = *(unsigned __int8 **)(a1 + 168);
  if (v8)
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v8, *(_QWORD *)(a1 + 176), &v58);
  else
    v58 = 0;
  v9 = atomic_load((unsigned __int8 *)(a1 + 224));
  if ((v9 & 1) != 0)
  {
    v16 = 1;
    goto LABEL_91;
  }
  v10 = v58;
  if (!v58)
  {
    v16 = 1;
    goto LABEL_93;
  }
  if (!v59)
  {
    v58 = 0;
    v16 = 1;
LABEL_92:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), a2);
    goto LABEL_93;
  }
  v57 = 0;
  v55 = 0;
  v56 = 0;
  v11 = *(_QWORD *)(a1 + 232);
  v12 = *(_QWORD *)(a1 + 240);
  v54[0] = "MediaSourcePrivateRemote";
  v54[1] = 25;
  v54[2] = "addSourceBuffer";
  v54[3] = v12;
  if (*(_BYTE *)(v11 + 12) && WebKit2LogMedia && byte_1ECE71338 >= 4u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v54);
    WebCore::ContentType::toJSONString((WebCore::ContentType *)a2);
    *(_QWORD *)buf = v62;
    v60[0] = v61;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v60, &v63);
    if (!v63)
    {
      __break(0xC471u);
      return result;
    }
    v15 = v61;
    v61 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v17 = v62;
    v62 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = qword_1ECE71348;
    v19 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v19)
    {
      WTF::String::utf8();
      v21 = v60[0] ? (char *)v60[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v19 = v60[0];
      v60[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          v19 = (WTF *)WTF::fastFree(v19, v20);
        else
          --*(_DWORD *)v19;
      }
    }
    if (WebKit2LogMedia && byte_1ECE71338 >= 4u)
    {
      v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v23 = *v22;
        if ((v23 & 1) != 0)
          break;
        v24 = __ldaxr(v22);
        if (v24 == v23)
        {
          if (!__stxr(v23 | 1, v22))
          {
            v25 = WTF::Logger::observers(v19);
            v26 = *(unsigned int *)(v25 + 12);
            if ((_DWORD)v26)
            {
              v27 = *(uint64_t **)v25;
              v28 = *(_QWORD *)v25 + 8 * v26;
              do
              {
                v29 = *v27;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v54);
                LODWORD(v65) = 1;
                WebCore::ContentType::toJSONString((WebCore::ContentType *)a2);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v60, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(_QWORD *)v29 + 16))(v29, &WebKit2LogMedia, 4, v60);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v30);
                for (i = 24; i != -8; i -= 16)
                {
                  v32 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                }
                ++v27;
              }
              while (v27 != (uint64_t *)v28);
            }
            v33 = __ldxr(v22);
            if (v33 == 1)
            {
              if (!__stlxr(0, v22))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v34 = v63;
    v63 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  *(_QWORD *)buf = a1;
  *(_QWORD *)&buf[8] = &v57;
  v65 = &v56;
  WTF::String::isolatedCopy();
  v66[1] = (WTF::StringImpl *)&v55;
  v35 = v59;
  if (v59)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v59 + 48));
  v67 = v35;
  v36 = v58;
  if (!v58)
    goto LABEL_71;
  v37 = *(_QWORD *)(v58 + 16);
  if (__ldaxr((unsigned __int8 *)v37))
  {
    __clrex();
LABEL_65:
    MEMORY[0x19AEABB3C](v37);
    goto LABEL_66;
  }
  if (__stxr(1u, (unsigned __int8 *)v37))
    goto LABEL_65;
LABEL_66:
  ++*(_QWORD *)(v37 + 8);
  v39 = __ldxr((unsigned __int8 *)v37);
  if (v39 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v37))
      goto LABEL_71;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v37);
LABEL_71:
  v68 = v36;
  v40 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v40 = &off_1E34E61F8;
  v41 = *(_OWORD *)buf;
  *(_QWORD *)(v40 + 24) = v65;
  *(_OWORD *)(v40 + 8) = v41;
  *(_OWORD *)(v40 + 32) = *(_OWORD *)v66;
  *(_QWORD *)(v40 + 48) = v67;
  v42 = v68;
  v66[0] = 0;
  v67 = 0;
  v68 = 0;
  *(_QWORD *)(v40 + 56) = v42;
  v54[0] = v40;
  WTF::callOnMainRunLoopAndWait();
  v43 = v54[0];
  v54[0] = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = v68;
  v68 = 0;
  if (v44)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v44 + 16), a2);
  v45 = v67;
  v67 = 0;
  if (v45)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v45 + 48));
  v46 = v66[0];
  v66[0] = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v46 -= 2;
  }
  v16 = v57;
  if (!v57)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(a1 + 8));
    v47 = v55;
    if (v55)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v55 + 8));
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v48 = &off_1E34E6230;
    v48[1] = a1;
    v48[2] = a1;
    v48[3] = v47;
    *(_QWORD *)buf = v48;
    WebCore::MediaSourcePrivate::ensureOnDispatcher();
    v49 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v55;
    v55 = 0;
    v51 = *a4;
    *a4 = v50;
    if (v51)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v51 + 8));
    v16 = v57;
  }
  v52 = v55;
  v55 = 0;
  if (v52)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v52 + 8));
LABEL_91:
  v10 = v58;
  v58 = 0;
  if (v10)
    goto LABEL_92;
LABEL_93:
  v53 = v59;
  v59 = 0;
  if (v53)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v53 + 48));
  return v16;
}

unsigned __int8 *WebKit::MediaSourcePrivateRemote::player@<X0>(WebKit::MediaSourcePrivateRemote *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;

  result = (unsigned __int8 *)*((_QWORD *)this + 26);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 27), &v6);
    v5 = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::durationChanged(unsigned __int8 **this, const WTF::MediaTime *a2)
{
  _QWORD *v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  WebCore::MediaSourcePrivate::durationChanged((WebCore::MediaSourcePrivate *)this, a2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
  *(_QWORD *)&v6 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v6 + 5) = *(_QWORD *)((char *)a2 + 5);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v4 = &off_1E34E6258;
  v4[1] = this;
  v4[2] = this;
  v4[3] = v6;
  *(_QWORD *)((char *)v4 + 29) = *(_QWORD *)((char *)&v6 + 5);
  v7 = (uint64_t)v4;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

WTF *WebKit::MediaSourcePrivateRemote::bufferedChanged(unsigned __int8 **this, const WebCore::PlatformTimeRanges *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WTF *result;
  __int128 v8;
  WTF *v9;
  int v10;
  uint64_t v11;

  WebCore::MediaSourcePrivate::bufferedChanged();
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
  *(_QWORD *)&v8 = this;
  *((_QWORD *)&v8 + 1) = this;
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v9, (uint64_t)a2);
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = &off_1E34E6280;
  *(_OWORD *)(v4 + 8) = v8;
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 24, (uint64_t)&v9);
  v11 = v4;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  v6 = v11;
  v11 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = v9;
  if (v9)
  {
    v9 = 0;
    v10 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::markEndOfStream(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  atomic_store(1u, (unsigned __int8 *)(a1 + 48));
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(a1 + 8));
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v4 = &off_1E34E62A8;
  *(_QWORD *)(v4 + 8) = a1;
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = a2;
  v6 = v4;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::unmarkEndOfStream(WebKit::MediaSourcePrivateRemote *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  atomic_store(0, (unsigned __int8 *)this + 48);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*((unsigned __int8 **)this + 1));
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = &off_1E34E62D0;
  v2[1] = this;
  v2[2] = this;
  v4 = (uint64_t)v2;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::mediaPlayerReadyState(WebKit::MediaSourcePrivateRemote *this)
{
  return atomic_load((unsigned __int8 *)this + 225);
}

uint64_t WebKit::MediaSourcePrivateRemote::setMediaPlayerReadyState(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  uint64_t i;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  _QWORD v40[2];
  WTF *v41;
  int v42;
  _QWORD v43[2];
  unsigned __int8 *v44;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _BYTE buf[12];
  int v60;
  _DWORD v61[8];
  _DWORD v62[8];
  _DWORD v63[6];
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(a1 + 225);
  v5 = atomic_load((unsigned __int8 *)(a1 + 225));
  if (a2 == 2 && v5 >= 3)
  {
    v6 = *(unsigned __int8 **)(a1 + 208);
    if (v6)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v6, *(_QWORD *)(a1 + 216), &v44);
      v6 = v44;
    }
    else
    {
      v44 = 0;
    }
    v43[0] = WebKit::MediaPlayerPrivateRemote::currentTime((WebKit::MediaPlayerPrivateRemote *)v6);
    v43[1] = v7;
    WebCore::MediaSourcePrivate::buffered((WebCore::MediaSourcePrivate *)a1);
    v40[0] = WebCore::MediaSourcePrivate::duration((WebCore::MediaSourcePrivate *)a1);
    v40[1] = v8;
    v9 = *(_QWORD *)(a1 + 232);
    v10 = *(_QWORD *)(a1 + 240);
    v39[0] = "MediaSourcePrivateRemote";
    v39[1] = 25;
    v39[2] = "setMediaPlayerReadyState";
    v39[3] = v10;
    if (*(_BYTE *)(v9 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v39);
      WTF::String::String((WTF::String *)&v51, "stall detected at:");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)v43);
      WTF::String::String((WTF::String *)&v49, " duration:");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)v40);
      WTF::String::String((WTF::String *)&v47, " buffered:");
      WebCore::PlatformTimeRanges::toString((WebCore::PlatformTimeRanges *)&v41);
      v45[0] = v51;
      v58 = v50;
      *(_QWORD *)buf = v52;
      v57 = v49;
      v55 = v47;
      v56 = v48;
      v54 = v46;
      result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v45, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, &v53);
      if (!v53)
      {
        __break(0xC471u);
        return result;
      }
      v13 = v46;
      v46 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v47;
      v47 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v48;
      v48 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v49;
      v49 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v12);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v50;
      v50 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v12);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v51;
      v51 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v12);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v52;
      v52 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v12);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = qword_1ECE71348;
      v21 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v21)
      {
        WTF::String::utf8();
        v22 = v45[0] ? (char *)v45[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v22;
        _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v21 = v45[0];
        v45[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            v21 = (WTF *)WTF::fastFree(v21, v8);
          else
            --*(_DWORD *)v21;
        }
      }
      if (WebKit2LogMedia)
      {
        v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v24 = *v23;
          if ((v24 & 1) != 0)
            break;
          v25 = __ldaxr(v23);
          if (v25 == v24)
          {
            if (!__stxr(v24 | 1, v23))
            {
              v26 = WTF::Logger::observers(v21);
              v27 = *(unsigned int *)(v26 + 12);
              if ((_DWORD)v27)
              {
                v28 = *(uint64_t **)v26;
                v38 = *(_QWORD *)v26 + 8 * v27;
                do
                {
                  v29 = *v28;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v39);
                  v60 = 0;
                  WTF::String::String((WTF::String *)v61, "stall detected at:");
                  v61[2] = 1;
                  WTF::MediaTime::toJSONString((WTF::MediaTime *)v43);
                  v61[6] = 0;
                  WTF::String::String((WTF::String *)v62, " duration:");
                  v62[2] = 1;
                  WTF::MediaTime::toJSONString((WTF::MediaTime *)v40);
                  v62[6] = 0;
                  WTF::String::String((WTF::String *)v63, " buffered:");
                  v63[2] = 0;
                  WebCore::PlatformTimeRanges::toString((WebCore::PlatformTimeRanges *)&v41);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 7uLL);
                  (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v29 + 16))(v29, &WebKit2LogMedia, 0, v45);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v30);
                  for (i = 104; i != -8; i -= 16)
                  {
                    v32 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v32)
                    {
                      if (*(_DWORD *)v32 == 2)
                        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v8);
                      else
                        *(_DWORD *)v32 -= 2;
                    }
                  }
                  ++v28;
                }
                while (v28 != (uint64_t *)v38);
              }
              v33 = __ldxr(v23);
              if (v33 == 1)
              {
                if (!__stlxr(0, v23))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v34 = v53;
      v53 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    v35 = v41;
    if (v41)
    {
      v41 = 0;
      v42 = 0;
      WTF::fastFree(v35, v8);
    }
    v36 = v44;
    v44 = 0;
    if (v36)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((unsigned __int8 **)v36 + 6));
  }
  atomic_store(v2, v4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(a1 + 8));
  v37 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v37 = &off_1E34E62F8;
  *(_QWORD *)(v37 + 8) = a1;
  *(_QWORD *)(v37 + 16) = a1;
  *(_BYTE *)(v37 + 24) = v2;
  *(_QWORD *)buf = v37;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::setTimeFudgeFactor(unsigned __int8 **this, const WTF::MediaTime *a2)
{
  _QWORD *v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
  *(_QWORD *)&v6 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v6 + 5) = *(_QWORD *)((char *)a2 + 5);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v4 = &off_1E34E6320;
  v4[1] = this;
  v4[2] = this;
  v4[3] = v6;
  *(_QWORD *)((char *)v4 + 29) = *(_QWORD *)((char *)&v6 + 5);
  v7 = (uint64_t)v4;
  WebCore::MediaSourcePrivate::ensureOnDispatcher();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

unsigned __int8 *WebKit::MediaSourcePrivateRemote::MessageReceiver::client(unsigned __int8 *this, uint64_t a2)
{
  unsigned __int8 *v3;
  WTF::Lock *v4;
  WebCore::MediaSourcePrivate *v5;
  void *v6;
  WebCore::MediaSourcePrivate *v7;

  v3 = this;
  v4 = *(WTF::Lock **)(a2 + 24);
  if (v4)
  {
    this = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v7, v4, *(_QWORD *)(a2 + 32));
    v5 = v7;
    if (v7)
    {
      WebCore::MediaSourcePrivate::client(v7);
      if (*(_QWORD *)v3)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v5 + 1), v6);
      *(_QWORD *)v3 = 0;
      this = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v5 + 1), v6);
    }
  }
  *(_QWORD *)v3 = 0;
  return this;
}

unsigned int *WebKit::MediaSourcePrivateRemote::MessageReceiver::proxyWaitForTarget(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::MediaSourcePrivateRemote *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  const char *v17;
  uint64_t v18;
  unsigned int *v19;
  __n128 v20[3];
  uint64_t v21;

  WebKit::MediaSourcePrivateRemote::queue(a1);
  WebKit::MediaSourcePrivateRemote::MessageReceiver::client((unsigned __int8 *)&v21, (uint64_t)a1);
  if (v21)
  {
    v6 = (WebKit::MediaSourcePrivateRemote *)(*(_QWORD *(**)(unsigned int **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(&v19, v21, a2);
    v7 = (unint64_t)v19;
    v8 = WebKit::MediaSourcePrivateRemote::queue(v6);
    v16 = 0uLL;
    v17 = "proxyWaitForTarget";
    v18 = 0;
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&)>>(v7, v8 + 32, a3, &v16, v20);
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v20);
    result = v19;
    v19 = 0;
    if (result)
    {
      v11 = result + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
    }
    v14 = v21;
    v21 = 0;
    if (v14)
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 8), v9);
  }
  else
  {
    v16.n128_u8[0] = 1;
    LODWORD(v17) = 1;
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v15 + 16))(v15, &v16);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

unsigned int *WebKit::MediaSourcePrivateRemote::MessageReceiver::proxySeekToTime(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::MediaSourcePrivateRemote *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  const char *v17;
  uint64_t v18;
  unsigned int *v19;
  __n128 v20[3];
  uint64_t v21;

  WebKit::MediaSourcePrivateRemote::queue(a1);
  WebKit::MediaSourcePrivateRemote::MessageReceiver::client((unsigned __int8 *)&v21, (uint64_t)a1);
  if (v21)
  {
    v6 = (WebKit::MediaSourcePrivateRemote *)(*(_QWORD *(**)(unsigned int **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(&v19, v21, a2);
    v7 = (unint64_t)v19;
    v8 = WebKit::MediaSourcePrivateRemote::queue(v6);
    v16 = 0uLL;
    v17 = "proxySeekToTime";
    v18 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&)>>(v7, v8 + 32, a3, &v16, v20);
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v20);
    result = v19;
    v19 = 0;
    if (result)
    {
      v11 = result + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
    }
    v14 = v21;
    v21 = 0;
    if (v14)
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 8), v9);
  }
  else
  {
    v16.n128_u16[0] = 259;
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v15 + 16))(v15, &v16);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

__n128 WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&)>>@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  unsigned int *v13;
  unsigned int v14;
  __n128 result;
  __n128 v16;

  v9 = *a3;
  *a3 = 0;
  v10 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34E6438;
  v11[1] = v9;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E34BB858;
  *(_QWORD *)(v10 + 16) = a2;
  v12 = *a4;
  *(__n128 *)(v10 + 40) = a4[1];
  *(__n128 *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 56) = 0;
  *(_QWORD *)v10 = off_1E34BB828;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = v11;
  v13 = (unsigned int *)(a1 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  a5->n128_u64[0] = a1;
  a5->n128_u64[1] = v10;
  result = *a4;
  v16 = a4[1];
  a5[1] = *a4;
  a5[2] = v16;
  return result;
}

uint64_t WebKit::MediaSourcePrivateRemote::MessageReceiver::mediaSourcePrivateShuttingDown(WebKit::MediaSourcePrivateRemote *a1, uint64_t *a2)
{
  WTF::Lock *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  WebKit::MediaSourcePrivateRemote::queue(a1);
  v4 = (WTF::Lock *)*((_QWORD *)a1 + 3);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v9, v4, *((_QWORD *)a1 + 4));
    v6 = v9;
    if (v9)
    {
      atomic_store(1u, (unsigned __int8 *)(v9 + 224));
      atomic_store(0, (unsigned __int8 *)(v6 + 225));
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), v5);
    }
  }
  v7 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

char *`non-virtual thunk to'WebKit::MediaSourcePrivateRemote::logChannel(WebKit::MediaSourcePrivateRemote *this)
{
  return &WebKit2LogMedia;
}

uint64_t WebKit::RemoteAudioDestinationProxy::RemoteAudioDestinationProxy(uint64_t a1, uint64_t a2, _DWORD **a3, int a4)
{
  uint64_t v7;
  WebCore::AudioDestination *v8;
  _DWORD *v9;
  int v10;

  WebCore::AudioDestination::hardwareSampleRate((WebCore::AudioDestination *)a1);
  WebCore::AudioDestinationResampler::AudioDestinationResampler();
  *(_QWORD *)(a1 + 144) = off_1E34E6488;
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v7 = 0;
  *(_OWORD *)(v7 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)a1 = off_1E34E5A68;
  *(_QWORD *)(a1 + 144) = &unk_1E34E5AE0;
  *(_QWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v8 = (WebCore::AudioDestination *)semaphore_create(*MEMORY[0x1E0C83DA0], (semaphore_t *)(a1 + 212), 0, 0);
  v9 = *a3;
  if (*a3)
    *v9 += 2;
  *(_QWORD *)(a1 + 216) = v9;
  *(_DWORD *)(a1 + 224) = a4;
  WebCore::AudioDestination::hardwareSampleRate(v8);
  *(_DWORD *)(a1 + 228) = v10;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 246) = 0;
  return a1;
}

unsigned int **WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=<WTF::Thread>(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::Thread *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (WTF::Thread *)v4;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8);
    }
  }
  return a1;
}

unsigned int **WebKit::RemoteAudioDestinationProxy::stopRenderingThread(unsigned int **this)
{
  unsigned int **v1;
  unsigned int **v2;

  v1 = this + 29;
  if (this[29])
  {
    v2 = this;
    atomic_store(1u, (unsigned __int8 *)this + 252);
    MEMORY[0x19AEBA1A0](*((unsigned int *)this + 53));
    WTF::Thread::waitForCompletion((WTF::Thread *)v2[29]);
    this = WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=(v1);
    if (*((_BYTE *)v2 + 253))
    {
      --WebKit::RemoteAudioDestinationProxy::s_realtimeThreadCount;
      *((_BYTE *)v2 + 253) = 0;
    }
  }
  return this;
}

unsigned int **WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF::Thread *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (WTF::Thread *)v2;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v6);
    }
  }
  return a1;
}

void WebKit::RemoteAudioDestinationProxy::~RemoteAudioDestinationProxy(WebKit::RemoteAudioDestinationProxy *this)
{
  unsigned __int8 *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WebCore::CARingBuffer *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  IPC::Encoder *v20;

  *(_QWORD *)this = off_1E34E5A68;
  *((_QWORD *)this + 18) = &unk_1E34E5AE0;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 21);
  if (!v2)
    goto LABEL_10;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v2, *((_QWORD *)this + 22), &v19);
  v4 = v19;
  if (!v19)
    goto LABEL_10;
  if (!*((_QWORD *)this + 20))
  {
    v19 = 0;
LABEL_9:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), v3);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v19 + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 680;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, (uint64_t *)this + 20);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v20, 0, 0);
  v7 = v20;
  v20 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v3);
    WTF::fastFree(v8, v9);
  }
  v4 = v19;
  v19 = 0;
  if (v4)
    goto LABEL_9;
LABEL_10:
  WebKit::RemoteAudioDestinationProxy::stopRenderingThread((unsigned int **)this);
  v11 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v11)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v11);
  v12 = (unsigned int *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v20 = (IPC::Encoder *)v12;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v20);
    }
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v10);
    else
      *(_DWORD *)v15 -= 2;
  }
  IPC::Semaphore::destroy((WebKit::RemoteAudioDestinationProxy *)((char *)this + 208));
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteAudioDestinationProxy *)((char *)this + 208));
  v16 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v16)
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((_DWORD)this + 192, v16);
  v17 = (WebCore::CARingBuffer *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v17)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 184, v17);
  v18 = (unsigned __int8 *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v18)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, v17);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioDestinationProxy::~RemoteAudioDestinationProxy(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::~RemoteAudioDestinationProxy(WebKit::RemoteAudioDestinationProxy *this)
{
  WebKit::RemoteAudioDestinationProxy::~RemoteAudioDestinationProxy((WebKit::RemoteAudioDestinationProxy *)((char *)this - 144));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioDestinationProxy::~RemoteAudioDestinationProxy((WebKit::RemoteAudioDestinationProxy *)((char *)this - 144));
  WTF::fastFree(v1, v2);
}

unsigned __int8 **WebKit::RemoteAudioDestinationProxy::startRendering(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  WTF::RunLoop *v6;
  void *v7;
  uint64_t v8;
  WebKit::WebProcess *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  IPC::Encoder *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  char *v49;
  _DWORD *v50;
  void *v51;
  IPC::Encoder *v52;
  WTF *v53;
  void *v54;
  const WebCore::CAAudioStreamDescription *v55;
  WebCore::CARingBuffer *v56;
  WebCore::CARingBuffer *v57;
  WebCore::CARingBuffer *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  IPC::Encoder *v62;
  WTF *v63;
  void *v64;
  WebCore::WebAudioBufferList *v65;
  WTF *v66;
  unsigned int v67;
  _QWORD *v68;
  unsigned int *v69;
  _QWORD *v70;
  WebCore::CARingBuffer *v71;
  uint64_t *v72;
  unsigned __int8 **v73;
  uint64_t v74;
  IPC::Encoder *v75;
  IPC::Encoder *v76;
  uint64_t v77;
  void *v78;
  IPC::Encoder *v79;
  Float64 mSampleRate;
  WTF *v81;
  void *v82;
  unsigned __int8 **result;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  IPC::Encoder *v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  void *v91;
  unint64_t v92;
  size_t v93;
  char *v94;
  void *v95;
  unint64_t v96;
  size_t v97;
  char *v98;
  void *v99;
  unint64_t v100;
  size_t v101;
  char *v102;
  void *v103;
  WebKit::WebProcess *v104;
  size_t v105;
  uint64_t v106;
  WebCore::CARingBuffer *v107;
  _BYTE v108[24];
  _QWORD v109[2];
  __int128 v110;
  char v111;
  AudioStreamBasicDescription v112;
  _BYTE v113[16];
  char v114;
  uint64_t v115;
  IPC::Encoder *v116[2];
  char v117;
  _QWORD *v118;
  unsigned int *v119;

  v5 = a1 + 168;
  v4 = *(unsigned __int8 **)(a1 + 168);
  if (v4)
  {
    v6 = (WTF::RunLoop *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v4, *(_QWORD *)(a1 + 176), &v115);
    v8 = v115;
    if (v115)
      goto LABEL_54;
  }
  else
  {
    v115 = 0;
  }
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v104 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v104);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v11 = WebKit::WebProcess::ensureGPUProcessConnection(v9);
  v12 = *(_QWORD *)(v11 + 16);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEABB3C](v12);
LABEL_11:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
  v15 = v115;
  v115 = v11;
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v15 + 16), v10);
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>(v5, &v115);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v115 + 176, a1 + 144);
  *(_QWORD *)(a1 + 160) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_DWORD *)(a1 + 248) = 0;
  v113[0] = 0;
  v114 = 0;
  WebCore::SharedMemory::allocate((WebCore::SharedMemory *)4);
  v16 = v116[0];
  v116[0] = 0;
  v17 = *(unsigned int **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v16;
  if (v17
    && (WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v17),
        v18 = (unsigned int *)v116[0],
        v16 = *(IPC::Encoder **)(a1 + 240),
        v116[0] = 0,
        v18))
  {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v18);
    if (!v16)
      goto LABEL_23;
  }
  else if (!v16)
  {
    goto LABEL_23;
  }
  WebCore::SharedMemory::createHandle();
  std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)v113, (uint64_t)v116);
  if (v117)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v116);
LABEL_23:
  if (!v114)
  {
    __break(0xC471u);
    goto LABEL_96;
  }
  v19 = *(_QWORD *)(v115 + 24);
  v20 = *(_DWORD *)(a1 + 224);
  v21 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 28);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (!v114)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  v23 = v22;
  v106 = v19;
  v24 = *(_DWORD *)(a1 + 228);
  v25 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v25 = 679;
  *(_QWORD *)(v25 + 8) = 0;
  v26 = (void *)(v25 + 16);
  *(_QWORD *)(v25 + 528) = v25 + 16;
  *(_QWORD *)(v25 + 536) = v25 + 16;
  *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v25 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
  v116[0] = (IPC::Encoder *)v25;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v25, (uint64_t *)(a1 + 160));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)(a1 + 216));
  v27 = *(_QWORD *)(v25 + 544);
  v28 = (v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v29 = v28 + 4;
  v30 = *(_QWORD *)(v25 + 552);
  if (v30 < v28 + 4)
  {
    v88 = (2 * v30 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v89 = v88;
      v88 *= 2;
    }
    while (v89 < v29);
    v105 = v89;
    v90 = (char *)mmap(0, v89, 3, 4098, -1, 0);
    if (v90 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x19757C61CLL);
    }
    v31 = v90;
    memcpy(v90, *(const void **)(v25 + 528), *(_QWORD *)(v25 + 544));
    v91 = *(void **)(v25 + 528);
    if (v91 != v26)
      munmap(v91, *(_QWORD *)(v25 + 552));
    *(_QWORD *)(v25 + 528) = v31;
    *(_QWORD *)(v25 + 552) = v105;
    v27 = *(_QWORD *)(v25 + 544);
  }
  else
  {
    v31 = *(char **)(v25 + 528);
  }
  bzero(&v31[v27], v28 - v27);
  *(_QWORD *)(v25 + 544) = v29;
  v32 = (_DWORD *)(*(_QWORD *)(v25 + 528) + v28);
  *(_QWORD *)(v25 + 536) = v32 + 1;
  *v32 = v20;
  v33 = *(_QWORD *)(v25 + 544);
  v34 = (v33 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v35 = v34 + 4;
  v36 = *(_QWORD *)(v25 + 552);
  if (v36 < v34 + 4)
  {
    v92 = (2 * v36 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v93 = v92;
      v92 *= 2;
    }
    while (v93 < v35);
    v94 = (char *)mmap(0, v93, 3, 4098, -1, 0);
    if (v94 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x19757C624);
    }
    v37 = v94;
    memcpy(v94, *(const void **)(v25 + 528), *(_QWORD *)(v25 + 544));
    v95 = *(void **)(v25 + 528);
    if (v95 != v26)
      munmap(v95, *(_QWORD *)(v25 + 552));
    *(_QWORD *)(v25 + 528) = v37;
    *(_QWORD *)(v25 + 552) = v93;
    v33 = *(_QWORD *)(v25 + 544);
  }
  else
  {
    v37 = *(char **)(v25 + 528);
  }
  bzero(&v37[v33], v34 - v33);
  *(_QWORD *)(v25 + 544) = v35;
  v38 = (_DWORD *)(*(_QWORD *)(v25 + 528) + v34);
  *(_QWORD *)(v25 + 536) = v38 + 1;
  *v38 = v21;
  v39 = *(_QWORD *)(v25 + 544);
  v40 = (v39 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v41 = v40 + 4;
  v42 = *(_QWORD *)(v25 + 552);
  if (v42 < v40 + 4)
  {
    v96 = (2 * v42 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v97 = v96;
      v96 *= 2;
    }
    while (v97 < v41);
    v98 = (char *)mmap(0, v97, 3, 4098, -1, 0);
    if (v98 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x19757C62CLL);
    }
    v43 = v98;
    memcpy(v98, *(const void **)(v25 + 528), *(_QWORD *)(v25 + 544));
    v99 = *(void **)(v25 + 528);
    if (v99 != v26)
      munmap(v99, *(_QWORD *)(v25 + 552));
    *(_QWORD *)(v25 + 528) = v43;
    *(_QWORD *)(v25 + 552) = v97;
    v39 = *(_QWORD *)(v25 + 544);
  }
  else
  {
    v43 = *(char **)(v25 + 528);
  }
  bzero(&v43[v39], v40 - v39);
  *(_QWORD *)(v25 + 544) = v41;
  v44 = (_DWORD *)(*(_QWORD *)(v25 + 528) + v40);
  *(_QWORD *)(v25 + 536) = v44 + 1;
  *v44 = v23;
  v45 = *(_QWORD *)(v25 + 544);
  v46 = (v45 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v47 = v46 + 4;
  v48 = *(_QWORD *)(v25 + 552);
  if (v48 < v46 + 4)
  {
    v100 = (2 * v48 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v101 = v100;
      v100 *= 2;
    }
    while (v101 < v47);
    v102 = (char *)mmap(0, v101, 3, 4098, -1, 0);
    if (v102 == (char *)-1)
    {
      __break(0xC471u);
LABEL_103:
      JUMPOUT(0x19757C5C4);
    }
    v49 = v102;
    memcpy(v102, *(const void **)(v25 + 528), *(_QWORD *)(v25 + 544));
    v103 = *(void **)(v25 + 528);
    if (v103 != v26)
      munmap(v103, *(_QWORD *)(v25 + 552));
    *(_QWORD *)(v25 + 528) = v49;
    *(_QWORD *)(v25 + 552) = v101;
    v45 = *(_QWORD *)(v25 + 544);
  }
  else
  {
    v49 = *(char **)(v25 + 528);
  }
  bzero(&v49[v45], v46 - v45);
  *(_QWORD *)(v25 + 544) = v47;
  v50 = (_DWORD *)(*(_QWORD *)(v25 + 528) + v46);
  *(_QWORD *)(v25 + 536) = v50 + 1;
  *v50 = v24;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v25, (IPC::Semaphore *)(a1 + 208));
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v25, (unint64_t)v113);
  IPC::Connection::sendMessageImpl(v106, (uint64_t *)v116, 0, 0);
  v52 = v116[0];
  v116[0] = 0;
  if (v52)
  {
    IPC::Encoder::~Encoder(v52, v51);
    WTF::fastFree(v53, v54);
  }
  *(_QWORD *)(a1 + 200) = 0;
  memset(&v112, 0, sizeof(v112));
  WebCore::audioStreamBasicDescriptionForAudioBus();
  v55 = (const WebCore::CAAudioStreamDescription *)(float)(*(float *)(a1 + 228) + *(float *)(a1 + 228));
  WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v116, &v112);
  WebKit::ProducerSharedCARingBuffer::allocate((WebKit::ProducerSharedCARingBuffer *)v116, v55, (uint64_t)v109);
  WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v116);
  if (!v111)
  {
LABEL_97:
    __break(0xC471u);
    goto LABEL_103;
  }
  v56 = (WebCore::CARingBuffer *)v109[0];
  v109[0] = 0;
  v107 = v56;
  WTF::MachSendRight::MachSendRight();
  *(_OWORD *)&v108[8] = v110;
  v57 = *(WebCore::CARingBuffer **)(a1 + 184);
  v58 = v107;
  v107 = 0;
  *(_QWORD *)(a1 + 184) = v58;
  if (v57)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 184, v57);
  v59 = *(_QWORD *)(v115 + 24);
  v60 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v60 = 678;
  *(_QWORD *)(v60 + 8) = 0;
  *(_QWORD *)(v60 + 528) = v60 + 16;
  *(_QWORD *)(v60 + 536) = v60 + 16;
  *(_OWORD *)(v60 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v60 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v60);
  v116[0] = (IPC::Encoder *)v60;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v60, (uint64_t *)(a1 + 160));
  IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode((IPC::Encoder *)v60, (unint64_t)v108);
  IPC::Connection::sendMessageImpl(v59, (uint64_t *)v116, 0, 0);
  v62 = v116[0];
  v116[0] = 0;
  if (v62)
  {
    IPC::Encoder::~Encoder(v62, v61);
    WTF::fastFree(v63, v64);
  }
  v65 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
  WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v116, &v112);
  MEMORY[0x19AEB018C](v65, v116);
  WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v116);
  v66 = *(WTF **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v65;
  if (v66)
  {
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](a1 + 192, v66);
    v65 = *(WebCore::WebAudioBufferList **)(a1 + 192);
  }
  WebCore::WebAudioBufferList::setSampleCount(v65);
  v67 = WebKit::RemoteAudioDestinationProxy::s_realtimeThreadCount;
  if (WebKit::RemoteAudioDestinationProxy::s_realtimeThreadCount <= 2u)
  {
    *(_BYTE *)(a1 + 253) = 1;
    WebKit::RemoteAudioDestinationProxy::s_realtimeThreadCount = v67 + 1;
  }
  v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v68 = off_1E34E6348;
  v68[1] = a1;
  v118 = v68;
  WTF::Thread::create();
  WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=<WTF::Thread>((unsigned int **)(a1 + 232), &v119);
  v69 = v119;
  v119 = 0;
  if (v69)
  {
    do
    {
      v84 = __ldaxr(v69);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v69));
    if (!v85)
    {
      atomic_store(1u, v69);
      v116[0] = (IPC::Encoder *)v69;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v116);
    }
  }
  v70 = v118;
  v118 = 0;
  if (v70)
    (*(void (**)(_QWORD *))(*v70 + 8))(v70);
  if (v67 <= 2)
    WTF::Thread::setThreadTimeConstraints();
  WTF::Thread::changePriority(*(WTF::Thread **)(a1 + 232));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v108);
  v71 = v107;
  v107 = 0;
  if (v71)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v107, v71);
  v6 = (WTF::RunLoop *)std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109);
  if (v114)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v113);
  v8 = v115;
LABEL_54:
  v72 = (uint64_t *)(a1 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    v115 = 0;
    v73 = *(unsigned __int8 ***)(v8 + 24);
    v6 = (WTF::RunLoop *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v8 + 16), v7);
    if (v73)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v73);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(a1 + 152));
      v74 = *a2;
      *a2 = 0;
      v75 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v75 = &off_1E34E6398;
      *((_QWORD *)v75 + 1) = a1;
      *((_QWORD *)v75 + 2) = v74;
      v76 = (IPC::Encoder *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v77 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v77 = 681;
      *(_QWORD *)(v77 + 8) = 0;
      *(_QWORD *)(v77 + 528) = v77 + 16;
      *(_QWORD *)(v77 + 536) = v77 + 16;
      *(_OWORD *)(v77 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v77 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v77);
      *(_QWORD *)&v112.mSampleRate = v77;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v77, v72);
      v116[0] = v75;
      v116[1] = v76;
      IPC::Connection::sendMessageWithAsyncReply((os_unfair_lock_s *)v73, (IPC::Encoder **)&v112, (uint64_t *)v116, 0, 0);
      v79 = v116[0];
      v116[0] = 0;
      if (v79)
        (*(void (**)(IPC::Encoder *))(*(_QWORD *)v79 + 8))(v79);
      mSampleRate = v112.mSampleRate;
      v112.mSampleRate = 0.0;
      if (mSampleRate != 0.0)
      {
        IPC::Encoder::~Encoder(*(IPC::Encoder **)&mSampleRate, v78);
        WTF::fastFree(v81, v82);
      }
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v73);
    }
  }
  else
  {
    v115 = 0;
    if (v8)
      v6 = (WTF::RunLoop *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v8 + 16), v7);
  }
  WTF::RunLoop::current(v6);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(a1 + 152));
  v86 = *a2;
  *a2 = 0;
  v87 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v87 = &off_1E34E6370;
  *((_QWORD *)v87 + 1) = a1;
  *((_QWORD *)v87 + 2) = v86;
  v116[0] = v87;
  WTF::RunLoop::dispatch();
  result = (unsigned __int8 **)v116[0];
  v116[0] = 0;
  if (result)
    return (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 1))(result);
  return result;
}

IPC::Encoder *WebKit::RemoteAudioDestinationProxy::stopRendering(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  v4 = *(unsigned __int8 **)(a1 + 168);
  if (v4
    && (v4 = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v4, *(_QWORD *)(a1 + 176), v20), (v6 = v20[0]) != 0)&& ((v7 = (uint64_t *)(a1 + 160), !*(_QWORD *)(a1 + 160)) ? (v8 = 0) : (v8 = *(os_unfair_lock_s **)(v20[0] + 24)), v20[0] = 0, v4 = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v5), v8))
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(a1 + 152));
    v9 = *a2;
    *a2 = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E34E63E8;
    v10[1] = a1;
    v10[2] = v9;
    v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 682;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v21 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, v7);
    v20[0] = (uint64_t)v10;
    v20[1] = v11;
    IPC::Connection::sendMessageWithAsyncReply(v8, &v21, v20, 0, 0);
    v14 = v20[0];
    v20[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    result = v21;
    v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  else
  {
    WTF::RunLoop::current((WTF::RunLoop *)v4);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(a1 + 152));
    v18 = *a2;
    *a2 = 0;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v19 = &off_1E34E63C0;
    v19[1] = a1;
    v19[2] = v18;
    v20[0] = (uint64_t)v19;
    WTF::RunLoop::dispatch();
    result = (IPC::Encoder *)v20[0];
    v20[0] = 0;
    if (result)
      return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unsigned __int8 *WebKit::RemoteAudioDestinationProxy::gpuProcessConnectionDidClose(WebKit::RemoteAudioDestinationProxy *this, WebKit::GPUProcessConnection *a2)
{
  void *v3;
  unsigned __int8 *result;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  WebKit::RemoteAudioDestinationProxy::stopRenderingThread((unsigned int **)this);
  result = (unsigned __int8 *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  v5 = atomic_load((unsigned __int8 *)this + 136);
  if ((v5 & 1) != 0)
  {
    v6 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E34E6410;
    v7 = v6;
    (*(void (**)(WebKit::RemoteAudioDestinationProxy *, unsigned __int8 **))(*(_QWORD *)this + 72))(this, &v7);
    result = v7;
    v7 = 0;
    if (result)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::AudioDestinationResampler::isPlaying(WebCore::AudioDestinationResampler *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 136);
  return v1 & 1;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::gpuProcessConnectionDidClose(WebKit::RemoteAudioDestinationProxy *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteAudioDestinationProxy::gpuProcessConnectionDidClose((WebKit::RemoteAudioDestinationProxy *)((char *)this - 144), a2);
}

_QWORD *WebKit::RemoteAudioHardwareListener::RemoteAudioHardwareListener(_QWORD *a1)
{
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WebKit::WebProcess *v17;
  uint64_t v18;
  IPC::Encoder *v19[3];
  uint64_t v20[2];

  WebCore::AudioHardwareListener::AudioHardwareListener();
  a1[5] = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  a1[6] = off_1E34E6488;
  a1[7] = &off_1E34B0558;
  a1[8] = 0;
  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v2 + 24) = a1;
  a1[9] = v2;
  *a1 = off_1E34E5B20;
  a1[6] = &unk_1E34E5B68;
  a1[7] = &unk_1E34E5BA8;
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::ensureGPUProcessConnection(v3);
  v5 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v4 + 16);
  if (v5)
  {
    v6 = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::weakRef(v5);
    a1[10] = v6;
    a1[11] = v4;
    if (v6)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v6, v4, &v18);
      v7 = v18;
      goto LABEL_8;
    }
  }
  else
  {
    a1[10] = 0;
    a1[11] = v4;
  }
  v7 = 0;
  v18 = 0;
LABEL_8:
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v7 + 176, (uint64_t)(a1 + 6));
  v8 = a1[5];
  v20[0] = 54;
  v20[1] = v8;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v18 + 40), (unsigned __int8 *)v20, (uint64_t)(a1 + 7), (unsigned int **)v19);
  v9 = *(_QWORD *)(v18 + 24);
  v20[0] = a1[5];
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 35;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v19[0] = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, v20);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)v19, 0, 0);
  v12 = v19[0];
  v19[0] = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v13, v14);
  }
  v15 = v18;
  v18 = 0;
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v15 + 16), v11);
  return a1;
}

void WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener(WebKit::RemoteAudioHardwareListener *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 10);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v3, *((_QWORD *)this + 11), &v9);
    if (v9)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(v9 + 32), (WebKit::RemoteAudioHardwareListener *)((char *)this + 56));
      v4 = *(_QWORD *)(v9 + 24);
      v7 = *((_QWORD *)this + 5);
      v8 = &v7;
      IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseAudioHardwareListener>(v4, &v8, 0, 0, 0);
      v5 = v9;
      v9 = 0;
      if (v5)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
    }
    v6 = (unsigned __int8 *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v6)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }
  else
  {
    *((_QWORD *)this + 10) = 0;
  }
  *((_QWORD *)this + 7) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 8, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseAudioHardwareListener>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 44;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void `non-virtual thunk to'WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener(WebKit::RemoteAudioHardwareListener *this, void *a2)
{
  WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener((WebKit::RemoteAudioHardwareListener *)((char *)this - 48), a2);
}

{
  WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener((WebKit::RemoteAudioHardwareListener *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener((WebKit::RemoteAudioHardwareListener *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener((WebKit::RemoteAudioHardwareListener *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteAudioHardwareListener::gpuProcessConnectionDidClose(WebKit::RemoteAudioHardwareListener *this, WebKit::GPUProcessConnection *a2)
{
  unsigned __int8 *result;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *((_DWORD *)this + 4) = 2;
  (*(void (**)(_QWORD, WebKit::GPUProcessConnection *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), a2);
  result = (unsigned __int8 *)*((_QWORD *)this + 10);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 11), &v6);
    if (v6)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(v6 + 32), (WebKit::RemoteAudioHardwareListener *)((char *)this + 56));
      result = (unsigned __int8 *)*((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (result)
        result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v4);
      *((_QWORD *)this + 11) = 0;
      v5 = v6;
      v6 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
    }
  }
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteAudioHardwareListener::gpuProcessConnectionDidClose(WebKit::RemoteAudioHardwareListener *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteAudioHardwareListener::gpuProcessConnectionDidClose((WebKit::RemoteAudioHardwareListener *)((char *)this - 48), a2);
}

void WebKit::ImageBufferRemoteIOSurfaceBackend::~ImageBufferRemoteIOSurfaceBackend(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this + 48));
  WebCore::ImageBufferBackend::~ImageBufferBackend(this);
}

{
  bmalloc::api *v2;
  void *v3;

  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this + 48));
  WebCore::ImageBufferBackend::~ImageBufferBackend(this);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::volatilityState(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  return *((unsigned __int8 *)this + 52);
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::setVolatilityState(uint64_t result, char a2)
{
  *(_BYTE *)(result + 52) = a2;
  return result;
}

void WebCore::ImageBufferBackend::createFlusher(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::ImageBufferRemoteIOSurfaceBackend::toBackendSharing(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  return (uint64_t)this + 40;
}

void `non-virtual thunk to'WebKit::ImageBufferRemoteIOSurfaceBackend::~ImageBufferRemoteIOSurfaceBackend(WebKit::ImageBufferRemoteIOSurfaceBackend *this)
{
  WebCore::ImageBufferBackend *v1;

  v1 = (WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this - 40);
  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this + 8));
  WebCore::ImageBufferBackend::~ImageBufferBackend(v1);
}

{
  WebCore::ImageBufferBackend *v1;
  bmalloc::api *v2;
  void *v3;

  v1 = (WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this - 40);
  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferRemoteIOSurfaceBackend *)((char *)this + 8));
  WebCore::ImageBufferBackend::~ImageBufferBackend(v1);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebKit::ImageBufferBackendHandleSharing::bitmap(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'WebKit::ImageBufferShareableMappedIOSurfaceBackend::~ImageBufferShareableMappedIOSurfaceBackend(WebKit::ImageBufferShareableMappedIOSurfaceBackend *this)
{
  WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend((WebKit::ImageBufferShareableMappedIOSurfaceBackend *)((char *)this - 88));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend((WebKit::ImageBufferShareableMappedIOSurfaceBackend *)((char *)this - 88));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::toBackendSharing(WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend *this)
{
  return (uint64_t)this + 48;
}

void WebKit::AudioTrackPrivateRemote::~AudioTrackPrivateRemote(WebKit::AudioTrackPrivateRemote *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::AudioTrackPrivateRemote::~AudioTrackPrivateRemote(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  *(_QWORD *)this = off_1E34E5E68;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

uint64_t WebCore::TrackPrivateBase::logger(WebCore::TrackPrivateBase *this)
{
  return *((_QWORD *)this + 4);
}

const char *WebCore::AudioTrackPrivate::logClassName(WebCore::AudioTrackPrivate *this)
{
  return "AudioTrackPrivate";
}

uint64_t WebCore::TrackPrivateBase::logIdentifier(WebCore::TrackPrivateBase *this)
{
  return *((_QWORD *)this + 5);
}

WTF::AtomString *WebKit::AudioTrackPrivateRemote::label@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 15);
}

WTF::AtomString *WebKit::AudioTrackPrivateRemote::language@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 16);
}

uint64_t WebKit::AudioTrackPrivateRemote::trackIndex(WebKit::AudioTrackPrivateRemote *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t WebKit::AudioTrackPrivateRemote::startTimeVariance(WebKit::AudioTrackPrivateRemote *this)
{
  return *((_QWORD *)this + 18);
}

uint64_t WebCore::AudioTrackPrivate::type(WebCore::AudioTrackPrivate *this)
{
  return 1;
}

uint64_t WebKit::AudioTrackPrivateRemote::kind(WebKit::AudioTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t WebCore::AudioTrackPrivate::isBackedByMediaStreamTrack(WebCore::AudioTrackPrivate *this)
{
  return 0;
}

unsigned __int8 **WebKit::MediaPlayerPrivateRemote::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 6);
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(this[6]);
}

uint64_t WebKit::MediaPlayerPrivateRemote::platformErrorCode(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 88);
}

uint64_t WebCore::MediaPlayerPrivateInterface::supportsProgressMonitoring(WebCore::MediaPlayerPrivateInterface *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::requiresImmediateCompositing(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::setVisibleForCanvas(WebCore::MediaPlayerPrivateInterface *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 312))(this);
}

uint64_t WebCore::MediaPlayerPrivateInterface::setCurrentTimeDidChangeCallback()
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::initialTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

double WebKit::MediaPlayerPrivateRemote::rate(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((double *)this + 87);
}

uint64_t WebCore::MediaPlayerPrivateInterface::effectiveRate(WebCore::MediaPlayerPrivateInterface *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 448))(this);
}

uint64_t WebKit::MediaPlayerPrivateRemote::paused(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 434);
}

float WebKit::MediaPlayerPrivateRemote::volume(WebKit::MediaPlayerPrivateRemote *this)
{
  return 1.0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::networkState(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 336);
}

uint64_t WebKit::MediaPlayerPrivateRemote::shouldGetNativeImageForCanvasDrawing(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::fileSize(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::ended(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::objCAVFoundationAVPlayer(WebKit::MediaPlayerPrivateRemote *this)
{
  return 0;
}

uint64_t WebKit::MediaPlayerPrivateRemote::identifier(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsPlayAtHostTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 212);
}

uint64_t WebKit::MediaPlayerPrivateRemote::supportsPauseAtHostTime(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 213);
}

void WebCore::MediaPlayerPrivateInterface::errorMessage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t `non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::logger(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 7);
}

const char *`non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::logClassName(WebKit::MediaPlayerPrivateRemote *this)
{
  return "MediaPlayerPrivateRemote";
}

uint64_t `non-virtual thunk to'WebKit::MediaPlayerPrivateRemote::logIdentifier(WebKit::MediaPlayerPrivateRemote *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t WebKit::MediaSourcePrivateRemote::platformType(WebKit::MediaSourcePrivateRemote *this)
{
  return 3;
}

uint64_t WebCore::MediaSourcePrivate::readyState(WebCore::MediaSourcePrivate *this)
{
  return atomic_load((unsigned int *)this + 13);
}

uint64_t WebCore::MediaSourcePrivate::setReadyState(uint64_t result, unsigned int a2)
{
  atomic_store(a2, (unsigned int *)(result + 52));
  return result;
}

uint64_t `non-virtual thunk to'WebKit::MediaSourcePrivateRemote::logger(WebKit::MediaSourcePrivateRemote *this)
{
  return *((_QWORD *)this + 9);
}

const char *`non-virtual thunk to'WebKit::MediaSourcePrivateRemote::logClassName(WebKit::MediaSourcePrivateRemote *this)
{
  return "MediaSourcePrivateRemote";
}

uint64_t `non-virtual thunk to'WebKit::MediaSourcePrivateRemote::logIdentifier(WebKit::MediaSourcePrivateRemote *this)
{
  return *((_QWORD *)this + 10);
}

unsigned __int8 *WebKit::RemoteAudioDestinationProxy::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[19]);
}

unsigned __int8 *WebKit::RemoteAudioDestinationProxy::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(this[19], a2);
}

float WebCore::AudioDestination::sampleRate(WebCore::AudioDestination *this)
{
  return *((float *)this + 6);
}

uint64_t WebKit::RemoteAudioDestinationProxy::controlBlock(WebKit::RemoteAudioDestinationProxy *this)
{
  return *((_QWORD *)this + 19);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(this[1], a2);
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioDestinationProxy::controlBlock(WebKit::RemoteAudioDestinationProxy *this)
{
  return *((_QWORD *)this + 1);
}

unsigned __int8 **WebKit::RemoteAudioHardwareListener::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 9);
}

unsigned __int8 *WebKit::RemoteAudioHardwareListener::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(this[9], a2);
}

uint64_t WebKit::RemoteAudioHardwareListener::controlBlock(WebKit::RemoteAudioHardwareListener *this)
{
  return *((_QWORD *)this + 9);
}

unsigned __int8 **`non-virtual thunk to'WebKit::RemoteAudioHardwareListener::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 3);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteAudioHardwareListener::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(this[3], a2);
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioHardwareListener::controlBlock(WebKit::RemoteAudioHardwareListener *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t std::__optional_destruct_base<WebCore::IOSurface::LockAndContext,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v2)
      CFRelease(v2);
    WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker((__IOSurface **)a1);
  }
  return a1;
}

__IOSurface **WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>::~Locker(__IOSurface **a1)
{
  __IOSurface *v2;
  __IOSurface *v4;

  v2 = *a1;
  if (v2)
  {
    IOSurfaceUnlock(v2, 0, 0);
    v4 = *a1;
    *a1 = 0;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::GraphicsContextCG,CGContext *>(uint64_t *a1)
{
  uint64_t result;

  WTF::fastMalloc((WTF *)0x2F0);
  result = WebCore::GraphicsContextCG::GraphicsContextCG();
  *a1 = result;
  return result;
}

void WebCore::AudioTrackPrivate::~AudioTrackPrivate(WebCore::AudioTrackPrivate *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E34E5E68;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34E5E68;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::TrackPrivateBase::id(WebCore::TrackPrivateBase *this)
{
  return 0;
}

void WebCore::TrackPrivateBase::label(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::TrackPrivateBase::language(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::TrackPrivateBase::trackIndex(WebCore::TrackPrivateBase *this)
{
  return 0;
}

uint64_t WebCore::TrackPrivateBase::startTimeVariance(WebCore::TrackPrivateBase *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::AudioTrackPrivate::kind(WebCore::AudioTrackPrivate *this)
{
  return 6;
}

void WebCore::TrackPrivateBase::~TrackPrivateBase(WebCore::TrackPrivateBase *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = MEMORY[0x1E0DD8F98] + 16;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

uint64_t WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>>::destruct(*(WTF **)a1, (WTF *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>>::destruct(WTF *result, WTF *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          WTF::fastFree((WTF *)v4, a2);
        }
      }
      result = *(WTF **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,(WTF::DestructionThread)0>::deref(result, a2);
      v3 = (WTF *)((char *)v3 + 24);
    }
    while (v3 != a2);
  }
  return result;
}

WTF *WTF::ThreadSafeRefCounted<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,(WTF::DestructionThread)0>::deref(WTF *this, void *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = *((_QWORD *)this + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate10setEnabledEbEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callES8_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 1)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(unsigned __int8 *)(a1 + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate16setConfigurationEONS2_31PlatformAudioTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E5F38;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate16setConfigurationEONS2_31PlatformAudioTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E5F38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate16setConfigurationEONS2_31PlatformAudioTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callESA_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1 + 8);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 8), a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::InbandGenericCue::InbandGenericCue(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;

  *(_DWORD *)a1 = 1;
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 37) = *(_QWORD *)((char *)a2 + 29);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  *(_QWORD *)(a1 + 64) = v8;
  v9 = a2[4];
  v10 = a2[5];
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  WebCore::Color::Color();
  WebCore::Color::Color();
  WebCore::Color::Color();
  v11 = *((_WORD *)a2 + 64);
  *(_BYTE *)(a1 + 138) = *((_BYTE *)a2 + 130);
  *(_WORD *)(a1 + 136) = v11;
  return a1;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformStrategies::mediaStrategy(void)::{lambda(void)#1} &&>>(_QWORD ***a1)
{
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)***a1;
  result = (*(uint64_t (**)(_QWORD *))(*v1 + 32))(v1);
  v1[4] = result;
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy9AccessLogEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy8ErrorLogEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy33VideoFrameForCurrentTimeIfChangedEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy13IsCrossOriginEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS4_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSC_E_vJSC_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E6438;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS4_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSC_E_vJSC_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6438;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvS4_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSC_E_vJSC_EE4callESC_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_DWORD *WTF::RefCounted<WebCore::InbandGenericCue>::deref(_DWORD *result, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)result;
  if (*result == 1)
  {
    WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)(result + 2), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E6008;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6008;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 32))(a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E6030;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6030;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::AudioTrackPrivateRemote::updateConfiguration(WebKit::AudioTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 40))(a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::PlatformMediaResourceLoader,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34E6058;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::PlatformMediaResourceLoader,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34E6460;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 32))(*(_QWORD *)(a1 + 8) - 8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote()::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34E6080;
  v3 = a1[1];
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34E6080;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote()::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 8);
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = v1 + 16 * v2;
    goto LABEL_11;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = v1 + 16 * v2;
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = v1 + 16 * v2;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(result + 8);
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    v4 = *(_QWORD *)(result + 8);
    while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
    {
      v4 += 16;
      v5 -= 16;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v6 = v1 + 16 * *(unsigned int *)(v1 - 4);
  else
    v6 = 0;
  while (v4 != v6)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 24))(*(_QWORD *)(v4 + 8));
    v7 = v4 + 16;
    v4 = v3;
    if (v7 != v3)
    {
      v4 = v7;
      while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
      {
        v4 += 16;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34E60A8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E60A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5[3];
  char v6;

  v2 = a1 + 8;
  if (!a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(v2);
  IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerConfiguration>>((uint64_t)v5, a2);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(v2);
  result = (WTF::StringImpl *)WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1::operator()<WebKit::RemoteMediaPlayerConfiguration>(v2, (uint64_t)v5);
  if (v6)
  {
    result = v5[0];
    v5[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(uint64_t a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3[3];

  memset(v3, 0, sizeof(v3));
  WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1::operator()<WebKit::RemoteMediaPlayerConfiguration>(a1, (uint64_t)v3);
  result = v3[0];
  v3[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerConfiguration>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;

  result = IPC::ArgumentCoder<WebKit::RemoteMediaPlayerConfiguration,void>::decode(a2, (uint64_t)&v11);
  if (v13
    || ((v5 = *a2, v6 = a2[1], *a2 = 0, a2[1] = 0, (v7 = a2[3]) != 0) ? (v8 = v6 == 0) : (v8 = 1),
        !v8 && (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5), v13)))
  {
    *(_QWORD *)a1 = v11;
    *(_OWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v10)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
    }
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1::operator()<WebKit::RemoteMediaPlayerConfiguration>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *(unsigned __int8 **)a1;
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 16);
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 8), &v9);
    if (v9)
    {
      result = *(unsigned __int8 **)(v5 + 128);
      if (result)
      {
        result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v5 + 136), &v8);
        if (v8)
        {
          WTF::String::operator=((WTF::StringImpl **)(v5 + 192), (WTF::StringImpl *)a2);
          *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 8);
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8)
                                                                        + 112))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8));
          v6 = (unsigned __int8 **)v8;
          v8 = 0;
          if (v6)
            result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v6);
        }
      }
      v7 = v9;
      v9 = 0;
      if (v7)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 48));
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::DidLoadingProgress,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E60D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::DidLoadingProgress,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E60D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::DidLoadingProgress,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::setReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E60F8;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 48));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::setReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E60F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 48));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::setReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  unsigned __int8 **v28;
  _QWORD v29[4];
  WTF *v30[2];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _BYTE buf[12];
  int v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 2);
  v2 = *(unsigned __int8 *)(v1 + 680);
  v3 = result[24];
  *(_BYTE *)(v1 + 680) = v3;
  v4 = result[24];
  if (v2 != v4)
  {
    if (v4 >= 3 && v3 == 2)
    {
      v6 = *(_QWORD *)(v1 + 112);
      v7 = *(_QWORD *)(v1 + 120);
      v29[0] = "MediaPlayerPrivateRemote";
      v29[1] = 25;
      v29[2] = "operator()";
      v29[3] = v7;
      if (*(_BYTE *)(v6 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v29);
        WTF::String::String((WTF::String *)&v31, "stall detected");
        *(_QWORD *)buf = v32;
        v30[0] = v31;
        result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v30, &v33);
        if (!v33)
        {
          __break(0xC471u);
          return result;
        }
        v9 = v31;
        v31 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v8);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = v32;
        v32 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = qword_1ECE71348;
        v12 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v12)
        {
          WTF::String::utf8();
          v14 = v30[0] ? (char *)v30[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v14;
          _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v12 = v30[0];
          v30[0] = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
              v12 = (WTF *)WTF::fastFree(v12, v13);
            else
              --*(_DWORD *)v12;
          }
        }
        if (WebKit2LogMedia)
        {
          v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v16 = *v15;
            if ((v16 & 1) != 0)
              break;
            v17 = __ldaxr(v15);
            if (v17 == v16)
            {
              if (!__stxr(v16 | 1, v15))
              {
                v18 = WTF::Logger::observers(v12);
                v19 = *(unsigned int *)(v18 + 12);
                if ((_DWORD)v19)
                {
                  v20 = *(uint64_t **)v18;
                  v21 = *(_QWORD *)v18 + 8 * v19;
                  do
                  {
                    v22 = *v20;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v29);
                    v35 = 0;
                    WTF::String::String((WTF::String *)v36, "stall detected");
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 2uLL);
                    (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v22 + 16))(v22, &WebKit2LogMedia, 0, v30);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v23);
                    for (i = 24; i != -8; i -= 16)
                    {
                      v25 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v25)
                      {
                        if (*(_DWORD *)v25 == 2)
                          WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                        else
                          *(_DWORD *)v25 -= 2;
                      }
                    }
                    ++v20;
                  }
                  while (v20 != (uint64_t *)v21);
                }
                v26 = __ldxr(v15);
                if (v26 == 1)
                {
                  if (!__stlxr(0, v15))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v27 = v33;
        v33 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v13);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
    }
    result = *(unsigned __int8 **)(v1 + 128);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v1 + 136), buf);
      result = *(unsigned __int8 **)buf;
      if (*(_QWORD *)buf)
      {
        result = (unsigned __int8 *)WebCore::MediaPlayer::readyStateChanged(*(WebCore::MediaPlayer **)buf);
        v28 = *(unsigned __int8 ***)buf;
        *(_QWORD *)buf = 0;
        if (v28)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v28);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [6],double,char [14],WTF::MediaTime,char [20],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, double *a5, const char *a6, WTF::MediaTime *a7, const char *a8, uint64_t a9)
{
  WTF::String *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  WTF *v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  WTF::String *v36;
  double v37;
  void *v38;
  uint64_t i;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  char *v44;
  char *v45;
  WTF *v47[2];
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  _BYTE buf[12];
  int v62;
  _DWORD v63[8];
  _DWORD v64[8];
  _DWORD v65[4];
  _QWORD v66[3];

  v66[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v44 = (char *)a4;
  v15 = (WTF::String *)WTF::String::String((WTF::String *)&v53, a4);
  WTF::String::number(v15, *a5);
  WTF::String::String((WTF::String *)&v51, a6);
  WTF::MediaTime::toJSONString(a7);
  v45 = (char *)a8;
  WTF::String::String((WTF::String *)&v49, a8);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v48);
  v47[0] = v53;
  v60 = v52;
  *(_QWORD *)buf = v54;
  v58 = v50;
  v59 = v51;
  v56 = v48;
  v57 = v49;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v47, (uint64_t *)&v60, (uint64_t *)&v59, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, &v55);
  if (v55)
  {
    v18 = v48;
    v48 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v49;
    v49 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v50;
    v50 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v51;
    v51 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v52;
    v52 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v17);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v53;
    v53 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v54;
    v54 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = *(NSObject **)(a1 + 32);
    v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v26)
    {
      WTF::String::utf8();
      v28 = v47[0] ? (char *)v47[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v26 = v47[0];
      v47[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          v26 = (WTF *)WTF::fastFree(v26, v27);
        else
          --*(_DWORD *)v26;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v30 = *v29;
        if ((v30 & 1) != 0)
          break;
        v31 = __ldaxr(v29);
        if (v31 == v30)
        {
          if (!__stxr(v30 | 1, v29))
          {
            v32 = WTF::Logger::observers(v26);
            v33 = *(unsigned int *)(v32 + 12);
            if ((_DWORD)v33)
            {
              v34 = *(uint64_t **)v32;
              v42 = *(_QWORD *)v32 + 8 * v33;
              do
              {
                v35 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v62 = 0;
                v36 = (WTF::String *)WTF::String::String((WTF::String *)v63, v44);
                v37 = *a5;
                v63[2] = 0;
                WTF::String::number(v36, v37);
                v63[6] = 0;
                WTF::String::String((WTF::String *)v64, a6);
                v64[2] = 1;
                WTF::MediaTime::toJSONString(a7);
                v64[6] = 0;
                WTF::String::String((WTF::String *)v65, v45);
                v65[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(v66);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v47, (uint64_t)buf, 7uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v35 + 16))(v35, a1, a2, v47);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v38);
                for (i = 104; i != -8; i -= 16)
                {
                  v40 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v42);
            }
            v41 = __ldxr(v29);
            if (v41 == 1)
            {
              if (!__stlxr(0, v29))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v55;
    v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::erase(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;

  if (a2)
  {
    v2 = *a2;
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove(result, a2, (uint64_t)&v4);
    v3 = v4;
    v4 = 0;
    if (v3)
      std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>::operator()[abi:sn180100]((uint64_t)&v5, v3);
    return (_QWORD *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>::operator()[abi:sn180100](uint64_t result, WTF *this)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*(_BYTE *)(result + 8))
  {
    v3 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  else if (!this)
  {
    return result;
  }
  return WTF::fastFree(this, this);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *i = 0;
  i[1] = v8;
  v14 = *a3;
  v15 = *a4;
  *a4 = 0;
  i[2] = v14;
  i[3] = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>((WTF *)a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

WTF *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>(WTF *result, size_t __n)
{
  WTF *v2;
  unint64_t v3;
  int8x8_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  WTF *v12;
  _QWORD *v13;
  unint64_t v14;

  v2 = result;
  if (__n == 1)
  {
    v3 = 2;
  }
  else
  {
    v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      result = (WTF *)std::__next_prime(__n);
      v3 = (unint64_t)result;
    }
  }
  v4 = *(int8x8_t *)((char *)v2 + 8);
  if (v3 <= *(_QWORD *)&v4)
  {
    if (v3 >= *(_QWORD *)&v4)
      return result;
    result = (WTF *)vcvtps_u32_f32((float)*((unint64_t *)v2 + 3) / *((float *)v2 + 8));
    if (*(_QWORD *)&v4 < 3uLL || (v11 = (uint8x8_t)vcnt_s8(v4), v11.i16[0] = vaddlv_u8(v11), v11.u32[0] > 1uLL))
    {
      result = (WTF *)std::__next_prime((size_t)result);
    }
    else
    {
      v12 = (WTF *)(1 << -(char)__clz((unint64_t)result - 1));
      if ((unint64_t)result >= 2)
        result = v12;
    }
    if (v3 <= (unint64_t)result)
      v3 = (unint64_t)result;
    if (v3 >= *(_QWORD *)&v4)
      return result;
    if (!v3)
    {
      result = *(WTF **)v2;
      *(_QWORD *)v2 = 0;
      if (result)
        result = (WTF *)WTF::fastFree(result, (void *)__n);
      *((_QWORD *)v2 + 1) = 0;
      return result;
    }
  }
  v6 = WTF::fastMalloc((WTF *)(8 * v3));
  result = *(WTF **)v2;
  *(_QWORD *)v2 = v6;
  if (result)
    result = (WTF *)WTF::fastFree(result, v5);
  v7 = 0;
  *((_QWORD *)v2 + 1) = v3;
  do
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v7++) = 0;
  while (v3 != v7);
  v8 = (_QWORD *)*((_QWORD *)v2 + 2);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= v3)
        v9 %= v3;
    }
    else
    {
      v9 &= v3 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v9) = (char *)v2 + 16;
    v13 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v14 = v13[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v14 >= v3)
            v14 %= v3;
        }
        else
        {
          v14 &= v3 - 1;
        }
        if (v14 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)v2 + 8 * v14))
          {
            *(_QWORD *)(*(_QWORD *)v2 + 8 * v14) = v8;
            goto LABEL_30;
          }
          *v8 = *v13;
          *v13 = **(_QWORD **)(*(_QWORD *)v2 + 8 * v14);
          **(_QWORD **)(*(_QWORD *)v2 + 8 * v14) = v13;
          v13 = v8;
        }
        v14 = v9;
LABEL_30:
        v8 = v13;
        v13 = (_QWORD *)*v13;
        v9 = v14;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>,WTF::FastAllocator<std::pair<unsigned long long const,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>,std::__map_node_handle_specifics>::__destroy_node_pointer[abi:sn180100](uint64_t result)
{
  WTF *v1;
  _QWORD *v2;
  char *v3;
  char v4;
  char v5;

  v1 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    v2 = (_QWORD *)result;
    if (*(_BYTE *)(result + 9))
    {
      v3 = &v5;
      v4 = 1;
      result = std::__hash_node_destructor<WTF::FastAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,void *>>>::operator()[abi:sn180100]((uint64_t)&v3, v1);
      *v2 = 0;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = a2;
  v5 = a2 + 2;
  v4 = a2[2];
  *(v5 - 1) = v4;
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__node_insert_unique_prepare[abi:sn180100]((uint64_t)a1, v4, v5);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__node_insert_unique_perform[abi:sn180100](a1, v2);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__node_insert_unique_prepare[abi:sn180100](uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  _BOOL8 v12;
  size_t v13;
  unint64_t v14;
  size_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
      v5 = v3 <= a2 ? a2 % v3 : a2;
    else
      v5 = (v3 - 1) & a2;
    v6 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v6)
    {
      for (i = (_QWORD *)*v6; i; i = (_QWORD *)*i)
      {
        v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == *a3)
            return i;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3)
              v8 %= v3;
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5)
            break;
        }
      }
    }
  }
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    v11 = 2 * v3;
    v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    v13 = v12 | v11;
    v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14)
      v15 = v14;
    else
      v15 = v13;
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__rehash<true>((WTF *)a1, v15);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebKit::AudioTrackPrivateRemote,WTF::RawPtrTraits<WebKit::AudioTrackPrivateRemote>,WTF::DefaultRefDerefTraits<WebKit::AudioTrackPrivateRemote>>>>>::__node_insert_unique_perform[abi:sn180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::LoadMediaSource,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34E6120;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::LoadMediaSource,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6120;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::LoadMediaSource,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0>(WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5[3];
  char v6;

  v2 = a1 + 8;
  if (!a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(v2);
  IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerConfiguration>>((uint64_t)v5, a2);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::Load,WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1>(v2);
  result = (WTF::StringImpl *)WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WTF::String const&)::$_1::operator()<WebKit::RemoteMediaPlayerConfiguration>(v2, (uint64_t)v5);
  if (v6)
  {
    result = v5[0];
    v5[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34E6148;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6148;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_1,void>::call(_QWORD *a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  WebCore::MediaPlayer *v6;
  uint64_t v7;

  result = (unsigned __int8 *)a1[1];
  if (result)
  {
    v3 = a1[3];
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, a1[2], &v7);
    if (v7)
    {
      result = *(unsigned __int8 **)(v3 + 128);
      if (result)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v3 + 136), &v6);
        result = (unsigned __int8 *)v6;
        if (v6)
        {
          *(_BYTE *)(v3 + 336) = 4;
          result = (unsigned __int8 *)WebCore::MediaPlayer::networkStateChanged((WebCore::MediaPlayer *)result);
          v4 = (unsigned __int8 **)v6;
          v6 = 0;
          if (v4)
            result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
        }
      }
      v5 = v7;
      v7 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 48));
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WebCore::MediaStreamPrivate &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34E6170;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WebCore::MediaStreamPrivate &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6170;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::MediaPlayerPrivateRemote::load(WebCore::MediaStreamPrivate &)::$_0,void>::call(_QWORD *a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  WebCore::MediaPlayer *v6;
  uint64_t v7;

  result = (unsigned __int8 *)a1[1];
  if (result)
  {
    v3 = a1[3];
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, a1[2], &v7);
    if (v7)
    {
      result = *(unsigned __int8 **)(v3 + 128);
      if (result)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v3 + 136), &v6);
        result = (unsigned __int8 *)v6;
        if (v6)
        {
          *(_BYTE *)(v3 + 336) = 4;
          result = (unsigned __int8 *)WebCore::MediaPlayer::networkStateChanged((WebCore::MediaPlayer *)result);
          v4 = (unsigned __int8 **)v6;
          v6 = 0;
          if (v4)
            result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
        }
      }
      v5 = v7;
      v7 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 48));
    }
  }
  return result;
}

void WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::optional<BOOL>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::optional<BOOL>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::optional<BOOL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  int isNull;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v27;
  char v28;
  char v29;
  char v30;
  int v31;
  __int16 v32;
  char v33;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  if (v5)
  {
    v8 = v5;
    v9 = v6 + 16;
    do
    {
      *(_WORD *)(v9 + 32) = 0;
      *(_OWORD *)v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      v9 += 40;
      --v8;
    }
    while (v8);
  }
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    v12 = v3;
    do
    {
      v13 = (unsigned int *)(v2 + 40 * v10);
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v13);
      if ((v14 & 1) == 0)
      {
        if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 40 * v10)))
        {
          v15 = v13[6];
          if ((_DWORD)v15 != -1)
            ((void (*)(char *, uint64_t))off_1E34E5F50[v15])(&v28, v2 + 40 * v10);
          v13[6] = -1;
        }
        else
        {
          v16 = *a1;
          v27 = v11;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v31 = -1640531527;
          v32 = 0;
          v33 = 0;
          WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v31, v2 + 40 * v10);
          v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          v19 = 0;
          do
          {
            v20 = v18 & v17;
            v21 = (unsigned int *)(v16 + 40 * (v18 & v17));
            isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v21);
            v18 = ++v19 + v20;
          }
          while (!isNull);
          v23 = v21[6];
          if ((_DWORD)v23 != -1)
            ((void (*)(char *, uint64_t))off_1E34E5F50[v23])(&v29, v16 + 40 * v20);
          *(_BYTE *)v21 = 0;
          v21[6] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v16 + 40 * v20, v2 + 40 * v10);
          *(_WORD *)(v16 + 40 * v20 + 32) = *(_WORD *)(v2 + 40 * v10 + 32);
          v24 = v13[6];
          if ((_DWORD)v24 != -1)
            ((void (*)(char *, uint64_t))off_1E34E5F50[v24])(&v30, v2 + 40 * v10);
          v13[6] = -1;
          v11 = v27;
          if (v13 == a2)
            v11 = v21;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  if (v2)
    WTF::fastFree((WTF *)(v2 - 16), v7);
}

char *IPC::Connection::send<Messages::RemoteMediaPlayerProxy::SetLegacyCDMSession>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  char *result;
  WTF *v17;
  void *v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  IPC::Encoder *v22;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1149;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v22 = (IPC::Encoder *)v6;
  v7 = *a2;
  v8 = *(unsigned __int8 *)(*a2 + 8);
  v9 = *(_QWORD *)(v6 + 544);
  v10 = v9 + 1;
  v11 = *(_QWORD *)(v6 + 552);
  if (v11 < v9 + 1)
  {
    v19 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v20 = v19;
      v19 *= 2;
    }
    while (v20 < v10);
    result = (char *)mmap(0, v20, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_17;
    v12 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v21 = *(void **)(v6 + 528);
    if (v21 != (void *)(v6 + 16))
      munmap(v21, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v12;
    *(_QWORD *)(v6 + 552) = v20;
    v13 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v12 = *(char **)(v6 + 528);
    v13 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v12[v13], v9 - v13);
  *(_QWORD *)(v6 + 544) = v10;
  v14 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v9);
  *(_QWORD *)(v6 + 536) = v14 + 1;
  if (v8)
  {
    *v14 = 1;
    if (*(_BYTE *)(v7 + 8))
    {
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, (uint64_t *)v7);
      goto LABEL_7;
    }
    result = (char *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_17:
    __break(0xC471u);
    return result;
  }
  *v14 = 0;
LABEL_7:
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v22, 0, 0);
  result = (char *)v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
    return (char *)WTF::fastFree(v17, v18);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;

  *a1 = &off_1E34E61A8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 *)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;

  *(_QWORD *)this = &off_1E34E61A8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  unsigned int v7;
  unsigned __int8 *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;

  if (!a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v4, v5);
        v10 = 0;
        v20 = *a2;
        v21 = a2[1];
        v22 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v11 = 0;
        if (v22 && v21)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v21);
          v11 = *a2;
          v10 = a2[1];
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_16;
  }
  v6 = (_BYTE *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v10 = v5;
    v11 = v4;
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
    goto LABEL_17;
  }
  if (*v6)
  {
    IPC::Decoder::decode<WTF::MediaTime>(a2, (uint64_t)v23);
    if (!v24)
    {
LABEL_17:
      v14 = *a2;
      v15 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v16 = a2[3];
      if (v16)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
          v17 = *a2;
          v18 = a2[1];
          v19 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v19)
          {
            if (v18)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
          }
        }
      }
      return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
  }
  result = *(unsigned __int8 **)(a1 + 8);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 16), v23);
    v9 = v23[0];
    if (v23[0])
    {
      if (v7)
      {
        result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
        v9 = v23[0];
        v23[0] = 0;
        if (!v9)
          return result;
      }
      else
      {
        v23[0] = 0;
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 48));
    }
  }
  return result;
}

unsigned __int8 *IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::PerformTaskAtTime,WebKit::MediaPlayerPrivateRemote::performTaskAtTime(WTF::Function<void ()(void)> &&,WTF::MediaTime const&)::$_0>(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, a2, &v3);
    v2 = v3;
    if (v3)
    {
      v3 = 0;
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 48));
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v27 + 8), v10);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v30 + 8), v10);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v16 + 8), v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*result;
  if (*result)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return result;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*result)
  {
    v5 = (_QWORD *)(*result + 16 * *(unsigned int *)(*result - 4));
    if (v5 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v5 = 0;
  }
  if (v5 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, a2);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = result;
  v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
    result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformMediaResource,WTF::RawPtrTraits<WebCore::PlatformMediaResource>,WTF::DefaultRefDerefTraits<WebCore::PlatformMediaResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0>(WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34E61D0;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0>(WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E61D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0>(WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  unsigned __int8 *result;
  WebKit::MediaPlayerPrivateRemote *v6;
  WebKit::MediaPlayerPrivateRemote *v7;

  if (!a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()> &&)::$_0>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16));
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()> &&)::$_0>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v3 = IPC::Decoder::decode<std::tuple<float>>(a2);
  if ((v3 & 0xFF00000000) == 0)
    return IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()> &&)::$_0>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = (void *)v3;
  result = *(unsigned __int8 **)(a1 + 8);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 16), &v7);
    result = (unsigned __int8 *)v7;
    if (v7)
    {
      result = (unsigned __int8 *)WebKit::MediaPlayerPrivateRemote::setLayerHostingContextID((uint64_t)v7, v4);
      v6 = v7;
      v7 = 0;
      if (v6)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 6));
    }
  }
  return result;
}

unsigned __int8 *IPC::Connection::cancelReply<Messages::RemoteMediaPlayerProxy::RequestHostingContextID,WebKit::MediaPlayerPrivateRemote::requestHostingContextID(WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0>(unsigned __int8 *result, uint64_t a2)
{
  WebKit::MediaPlayerPrivateRemote *v2;
  WebKit::MediaPlayerPrivateRemote *v3;

  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, a2, &v3);
    result = (unsigned __int8 *)v3;
    if (v3)
    {
      result = (unsigned __int8 *)WebKit::MediaPlayerPrivateRemote::setLayerHostingContextID((uint64_t)v3, 0);
      v2 = v3;
      v3 = 0;
      if (v2)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((unsigned __int8 **)v2 + 6));
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::MediaSourcePrivateRemote::queue(void)::$_0 &&>>()
{
  uint64_t result;
  uint64_t v1;

  result = WTF::WorkQueue::create();
  WebKit::MediaSourcePrivateRemote::queue(void)::workQueue = v1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34E61F8;
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  v4 = a1[6];
  a1[6] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 48));
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34E61F8;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 48));
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unint64_t v15;
  char v16;
  int v17;
  void *v18;
  int v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  char v46;
  int v47;
  WTF::StringImpl *v48;
  char v49;
  uint64_t v50[5];
  __int16 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  WTF::StringImpl *v65;
  char v66;
  _QWORD *v67;
  int v68;
  IPC::Encoder *v69;
  uint64_t v70;
  char v71;

  v3 = *(_QWORD *)(a1 + 8);
  WebCore::ContentType::ContentType((WebCore::ContentType *)&v65, (const WTF::String *)(a1 + 32));
  v48 = 0;
  v49 = 0;
  v50[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v50);
  v52 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v51 = 1;
  WTF::String::operator=(&v48, (WTF::StringImpl *)&v65);
  v49 = v66;
  if (!WebKit::RemoteMediaPlayerMIMETypeCache::supportsTypeAndCodecs(*(WebKit::RemoteMediaPlayerMIMETypeCache **)(v3 + 200), (const WebCore::MediaEngineSupportParameters *)&v48))
  {
    **(_BYTE **)(a1 + 16) = 1;
    goto LABEL_29;
  }
  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 24);
  v6 = *(_QWORD *)(v3 + 192);
  v70 = 0;
  IPC::Connection::createSyncMessageEncoder(3639, v6, &v70, (uint64_t *)&v69);
  IPC::ArgumentCoder<WebCore::ContentType,void>::encode(v69, (uint64_t *)&v65);
  IPC::Connection::sendSyncMessage((uint64_t)v5, v70, (uint64_t *)&v69, 0, (uint64_t)&v67, INFINITY);
  v7 = v68;
  if (!v68)
  {
    v5 = v67;
    v10 = v67[1];
    v11 = *v67;
    v12 = v5[2] - *v5;
    if (v10 <= v12)
    {
      v31 = 0;
      v32 = 0;
      *v67 = 0;
      v5[1] = 0;
      v20 = (IPC::Encoder *)v5[3];
      if (v20)
        goto LABEL_53;
      goto LABEL_35;
    }
    v13 = (unsigned __int8 *)(v11 + v12);
    v67[2] = v13 + 1;
    if (!v11)
    {
      v31 = v10;
      v32 = 0;
      goto LABEL_35;
    }
    v9 = (_QWORD *)*v13;
    if (v9 >= 3)
      goto LABEL_44;
    if (v10 <= (unint64_t)&v13[-v11 + 1])
    {
      v31 = 0;
      v32 = 0;
      *v5 = 0;
      v5[1] = 0;
      v34 = v5[3];
      if (!v34)
        goto LABEL_39;
      goto LABEL_56;
    }
    v5[2] = v13 + 2;
    v14 = v13[1];
    if (v14 >= 2)
    {
      v31 = v10;
      v32 = v11;
      goto LABEL_39;
    }
    if (v14)
    {
      v15 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(v5);
      if (!v16)
      {
        v35 = (void *)*v5;
        v36 = v5[1];
        *v5 = 0;
        v5[1] = 0;
        v37 = v5[3];
        if (v37 && v36)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v37 + 16))(v37, v35);
        goto LABEL_43;
      }
      if (v68)
        goto LABEL_55;
      v1 = v15;
      v8 = 1;
      v5 = v67;
    }
    else
    {
      v8 = 0;
      v1 = 0;
    }
    v67 = 0;
    v44 = (char)v9;
    v45 = v1;
    v46 = v8;
    v43 = v5;
    goto LABEL_17;
  }
  if (v68 != 1)
  {
LABEL_55:
    v34 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_56:
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
    v31 = 0;
    v40 = *v5;
    v41 = v5[1];
    v42 = v5[3];
    *v5 = 0;
    v5[1] = 0;
    v32 = 0;
    if (v42 && v41)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40);
      v32 = *v5;
      v31 = v5[1];
    }
LABEL_39:
    *v5 = 0;
    v5[1] = 0;
    v33 = v5[3];
    if (!v33 || !v31)
      goto LABEL_43;
    goto LABEL_41;
  }
  v8 = 0;
  v9 = 0;
  LOBYTE(v43) = (_BYTE)v67;
LABEL_17:
  v47 = v7;
  v17 = v7;
LABEL_18:
  ((void (*)(char *, _QWORD **))off_1E34E6188[v17])(&v71, &v67);
  v19 = v8;
  v5 = v9;
  while (1)
  {
    v20 = v69;
    v69 = 0;
    if (v20)
    {
      IPC::Encoder::~Encoder(v20, v18);
      v20 = (IPC::Encoder *)WTF::fastFree(v21, v22);
    }
    if (v7)
    {
      LOBYTE(v5) = 1;
      goto LABEL_28;
    }
    if ((_DWORD)v5)
      goto LABEL_28;
    if (v19)
      break;
    __break(1u);
LABEL_53:
    if (v10)
    {
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)v20 + 16))(v20);
      v32 = *v5;
      v31 = v5[1];
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
LABEL_35:
    v10 = 0;
    v11 = 0;
    *v5 = 0;
    v5[1] = 0;
    v33 = v5[3];
    if (v33)
    {
      if (v31)
      {
LABEL_41:
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v32, v31);
LABEL_43:
        v11 = *v5;
        v10 = v5[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
LABEL_44:
    *v5 = 0;
    v5[1] = 0;
    v38 = v5[3];
    if (v38 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v11);
    v18 = (void *)*v5;
    v10 = v5[1];
    *v5 = 0;
    v5[1] = 0;
    v39 = v5[3];
    if (v39 && v10)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v39 + 16))(v39, v18);
    v8 = 0;
    v9 = 0;
    v19 = 0;
    v5 = 0;
    LOBYTE(v43) = 13;
    v7 = 1;
    v47 = 1;
    v17 = v68;
    if (v68 != -1)
      goto LABEL_18;
  }
  **(_QWORD **)(a1 + 24) = v1;
  v24 = *(_QWORD *)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 56);
  v25 = WTF::fastMalloc((WTF *)0x1A0);
  v26 = WebKit::SourceBufferPrivateRemote::SourceBufferPrivateRemote(v25, v23, v1, (_QWORD *)v3, v24);
  v27 = *(uint64_t **)(a1 + 40);
  v28 = *v27;
  *v27 = v26;
  if (v28)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v28 + 8));
  LOBYTE(v5) = 0;
LABEL_28:
  **(_BYTE **)(a1 + 16) = (_BYTE)v5;
  ((void (*)(_QWORD **, _QWORD **))off_1E34E6210[v7])(&v67, &v43);
LABEL_29:
  WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v48, v4);
  result = v65;
  v65 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaSourceProxy15AddSourceBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34E6230;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E6230;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::addSourceBuffer(WebCore::ContentType const&,BOOL,WTF::RefPtr<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = (uint64_t *)(v2 + 16);
  v4 = (uint64_t *)(a1 + 24);
  v5 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v5 == *(_DWORD *)(v2 + 24))
  {
    result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, (unint64_t)v4);
    v4 = result;
    v5 = *(unsigned int *)(v2 + 28);
    v6 = (_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v4;
  *v4 = 0;
  *v6 = v7;
  *(_DWORD *)(v2 + 28) = v5 + 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::durationChanged(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34E6258;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::durationChanged(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6258;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::durationChanged(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *result;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 **)(v3 + 168);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v3 + 176), &v12);
  else
    v12 = 0;
  v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v12)
      return result;
    v6 = *(_QWORD *)(v12 + 24);
    v7 = *(_QWORD *)(v3 + 192);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1226;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v13 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v8, (_QWORD *)(a1 + 24));
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
    result = (unsigned __int8 *)v13;
    v13 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      result = (unsigned __int8 *)WTF::fastFree(v9, v10);
    }
  }
  v11 = v12;
  v12 = 0;
  if (v11)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::bufferedChanged(WebCore::PlatformTimeRanges const&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34E6280;
  v3 = *(WTF **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::bufferedChanged(WebCore::PlatformTimeRanges const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E6280;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::bufferedChanged(WebCore::PlatformTimeRanges const&)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *result;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 **)(v3 + 168);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v3 + 176), &v12);
  else
    v12 = 0;
  v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v12)
      return result;
    v6 = *(_QWORD *)(v12 + 24);
    v7 = *(_QWORD *)(v3 + 192);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1225;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v13 = (IPC::Encoder *)v8;
    IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, a1 + 24);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
    result = (unsigned __int8 *)v13;
    v13 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      result = (unsigned __int8 *)WTF::fastFree(v9, v10);
    }
  }
  v11 = v12;
  v12 = 0;
  if (v11)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::markEndOfStream(WebCore::MediaSourcePrivateEndOfStreamStatus)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34E62A8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::markEndOfStream(WebCore::MediaSourcePrivateEndOfStreamStatus)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E62A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::markEndOfStream(WebCore::MediaSourcePrivateEndOfStreamStatus)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *result;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _BYTE *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 **)(v3 + 168);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v3 + 176), &v22);
  else
    v22 = 0;
  v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v22)
      return result;
    v6 = *(_QWORD *)(v22 + 24);
    v7 = *(_BYTE *)(a1 + 24);
    v8 = *(_QWORD *)(v3 + 192);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1227;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v23 = (IPC::Encoder *)v9;
    v10 = *(_QWORD *)(v9 + 544);
    v11 = v10 + 1;
    v12 = *(_QWORD *)(v9 + 552);
    if (v12 < v10 + 1)
    {
      v19 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v20 = v19;
        v19 *= 2;
      }
      while (v20 < v11);
      result = (unsigned __int8 *)mmap(0, v20, 3, 4098, -1, 0);
      if (result == (unsigned __int8 *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v13 = result;
      memcpy(result, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
      v21 = *(void **)(v9 + 528);
      if (v21 != (void *)(v9 + 16))
        munmap(v21, *(_QWORD *)(v9 + 552));
      *(_QWORD *)(v9 + 528) = v13;
      *(_QWORD *)(v9 + 552) = v20;
      v14 = *(_QWORD *)(v9 + 544);
    }
    else
    {
      v13 = *(unsigned __int8 **)(v9 + 528);
      v14 = *(_QWORD *)(v9 + 544);
    }
    bzero(&v13[v14], v10 - v14);
    *(_QWORD *)(v9 + 544) = v11;
    v15 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v10);
    *(_QWORD *)(v9 + 536) = v15 + 1;
    *v15 = v7;
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v23, 0, 0);
    result = (unsigned __int8 *)v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      result = (unsigned __int8 *)WTF::fastFree(v16, v17);
    }
  }
  v18 = v22;
  v22 = 0;
  if (v18)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v18 + 16), a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::unmarkEndOfStream(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34E62D0;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::unmarkEndOfStream(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E62D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::unmarkEndOfStream(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v2 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 **)(v2 + 168);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v2 + 176), &v11);
  else
    v11 = 0;
  v4 = atomic_load((unsigned __int8 *)(v2 + 224));
  if ((v4 & 1) == 0)
  {
    if (!v11)
      return result;
    v5 = *(_QWORD *)(v11 + 24);
    v6 = *(_QWORD *)(v2 + 192);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 1230;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v12 = (IPC::Encoder *)v7;
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
    result = (unsigned __int8 *)v12;
    v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      result = (unsigned __int8 *)WTF::fastFree(v8, v9);
    }
  }
  v10 = v11;
  v11 = 0;
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setMediaPlayerReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34E62F8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setMediaPlayerReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E62F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setMediaPlayerReadyState(WebCore::MediaPlayerReadyState)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *result;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _BYTE *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 **)(v3 + 168);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v3 + 176), &v22);
  else
    v22 = 0;
  v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v22)
      return result;
    v6 = *(_QWORD *)(v22 + 24);
    v7 = *(_BYTE *)(a1 + 24);
    v8 = *(_QWORD *)(v3 + 192);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1228;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v23 = (IPC::Encoder *)v9;
    v10 = *(_QWORD *)(v9 + 544);
    v11 = v10 + 1;
    v12 = *(_QWORD *)(v9 + 552);
    if (v12 < v10 + 1)
    {
      v19 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v20 = v19;
        v19 *= 2;
      }
      while (v20 < v11);
      result = (unsigned __int8 *)mmap(0, v20, 3, 4098, -1, 0);
      if (result == (unsigned __int8 *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v13 = result;
      memcpy(result, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
      v21 = *(void **)(v9 + 528);
      if (v21 != (void *)(v9 + 16))
        munmap(v21, *(_QWORD *)(v9 + 552));
      *(_QWORD *)(v9 + 528) = v13;
      *(_QWORD *)(v9 + 552) = v20;
      v14 = *(_QWORD *)(v9 + 544);
    }
    else
    {
      v13 = *(unsigned __int8 **)(v9 + 528);
      v14 = *(_QWORD *)(v9 + 544);
    }
    bzero(&v13[v14], v10 - v14);
    *(_QWORD *)(v9 + 544) = v11;
    v15 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v10);
    *(_QWORD *)(v9 + 536) = v15 + 1;
    *v15 = v7;
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v23, 0, 0);
    result = (unsigned __int8 *)v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      result = (unsigned __int8 *)WTF::fastFree(v16, v17);
    }
  }
  v18 = v22;
  v22 = 0;
  if (v18)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v18 + 16), a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setTimeFudgeFactor(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34E6320;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setTimeFudgeFactor(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6320;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::MediaSourcePrivateRemote::setTimeFudgeFactor(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *result;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  IPC::Encoder *v15;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 **)(v3 + 168);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v3 + 176), &v14);
  else
    v14 = 0;
  v5 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v5 & 1) == 0)
  {
    if (!v14)
      return result;
    v6 = *(_QWORD *)(v14 + 24);
    v7 = (uint64_t *)(a1 + 24);
    v8 = *(_QWORD *)(v3 + 192);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1229;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v15 = (IPC::Encoder *)v9;
    IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v9, v7);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v15, 0, 0);
    result = (unsigned __int8 *)v15;
    v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, a2);
      result = (unsigned __int8 *)WTF::fastFree(v10, v11);
    }
    v12 = *v7;
    *(_QWORD *)(v3 + 133) = *(uint64_t *)((char *)v7 + 5);
    *(_QWORD *)(v3 + 128) = v12;
  }
  v13 = v14;
  v14 = 0;
  if (v13)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v13 + 16), a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::startRenderingThread(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int i;
  WTF::MonotonicTime *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  float **v15;
  unsigned __int8 v16;

  v1 = *(_QWORD *)(a1 + 8);
  do
  {
    result = MEMORY[0x19AEBA1B8](*(unsigned int *)(v1 + 212));
    v3 = atomic_load((unsigned __int8 *)(v1 + 252));
    if ((v3 & 1) != 0)
      break;
    v4 = *(_QWORD *)(v1 + 240);
    if (!v4)
      break;
    if (*(_QWORD *)(v4 + 8) != 4)
    {
      result = 81;
      __break(0xC471u);
      return result;
    }
    v5 = atomic_load(*(unsigned int **)(v4 + 16));
    v6 = *(_DWORD *)(v1 + 248);
    if (v5 < v6)
      v7 = ~v6;
    else
      v7 = -v6;
    *(_DWORD *)(v1 + 248) = v5;
    for (i = v7 + v5; i; *(_QWORD *)(v1 + 200) += v10)
    {
      v9 = (WTF::MonotonicTime *)mach_absolute_time();
      WTF::MonotonicTime::fromMachAbsoluteTime(v9);
      if (i >= 0x1000)
        v10 = 4096;
      else
        v10 = i;
      v11 = *(unsigned int **)(*(_QWORD *)(v1 + 192) + 40);
      v12 = *(_DWORD *)(*(_QWORD *)(v1 + 32) + 28);
      if (v12 >= *v11)
        v13 = *v11;
      else
        v13 = v12;
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = (float **)(v11 + 4);
        do
        {
          WebCore::AudioBus::setChannelMemory(*(WebCore::AudioBus **)(v1 + 32), v14++, *v15);
          v15 += 2;
        }
        while (v13 != v14);
      }
      i -= v10;
      WebCore::AudioDestinationResampler::pullRendered((WebCore::AudioDestinationResampler *)v1);
      WebCore::CARingBuffer::store(*(WebCore::CARingBuffer **)(v1 + 184), *(const AudioBufferList **)(*(_QWORD *)(v1 + 192) + 40));
      result = WebCore::AudioDestinationResampler::render();
    }
    v16 = atomic_load((unsigned __int8 *)(v1 + 252));
  }
  while ((v16 & 1) == 0);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34E6370;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 152), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E6370;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 152), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;

  WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StartAudioDestination,WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34E6398;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 152), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StartAudioDestination,WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E6398;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 152), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StartAudioDestination,WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;
  _BOOL8 v5;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v5 = v3 != 0;
    WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v4 + 16))(v4, v5);
  }
  else
  {
    WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34E63C0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 152), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E63C0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 152), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;

  WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StopAudioDestination,WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34E63E8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 152), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StopAudioDestination,WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E63E8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 152), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioDestinationManager::StopAudioDestination,WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::RemoteAudioDestinationProxy::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;
  _BOOL8 v5;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v5 = v3 == 0;
    WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v4 + 16))(v4, v5);
  }
  else
  {
    WebCore::AudioDestinationResampler::setIsPlaying(*(WebCore::AudioDestinationResampler **)(a1 + 8));
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void WebKit::RemoteAudioSession::~RemoteAudioSession(WebKit::RemoteAudioSession *this)
{
  unsigned __int8 *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 25);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v2, *((_QWORD *)this + 26), &v10);
    if (v10)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v10 + 32), 0x38u);
      v4 = v10;
      v10 = 0;
      if (v4)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), v3);
    }
  }
  WebCore::AudioSession::removeInterruptionObserver(this, (WebKit::RemoteAudioSession *)((char *)this + 48));
  v6 = (unsigned __int8 *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 120, (WTF::StringImpl *)v5);
  v8 = *((_QWORD *)this + 12);
  if (v8)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, v7);
  *((_QWORD *)this + 9) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, v7);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v9);
  WebCore::AudioSession::~AudioSession(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioSession::~RemoteAudioSession(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::RemoteAudioSession::~RemoteAudioSession(WebKit::RemoteAudioSession *this)
{
  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 48));
}

{
  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 64));
}

{
  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 72));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 48));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 64));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioSession::~RemoteAudioSession((WebKit::RemoteAudioSession *)((char *)this - 72));
  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::RemoteAudioSession::gpuProcessConnectionDidClose(WebKit::RemoteAudioSession *this, WebKit::GPUProcessConnection *a2)
{
  unsigned __int8 *v4;

  v4 = (unsigned __int8 *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  *((_QWORD *)this + 26) = 0;
  return IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)a2 + 4, 0x38u);
}

unsigned int *`non-virtual thunk to'WebKit::RemoteAudioSession::gpuProcessConnectionDidClose(WebKit::RemoteAudioSession *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteAudioSession::gpuProcessConnectionDidClose((WebKit::RemoteAudioSession *)((char *)this - 64), a2);
}

IPC::Encoder *WebKit::RemoteAudioSession::setCategory(IPC::Encoder *result, int a2, int a3, int a4)
{
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  WTF *v29;
  void *v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  void *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  void *v42;
  IPC::Encoder *v43;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  if (*((unsigned __int8 *)result + 112) != a2
    || *((unsigned __int8 *)result + 113) != a3
    || *((unsigned __int8 *)result + 114) != a4
    || *((_BYTE *)result + 115))
  {
    *((_BYTE *)result + 112) = a2;
    *((_BYTE *)result + 113) = a3;
    *((_WORD *)result + 57) = a4;
    v7 = WebKit::RemoteAudioSession::ensureConnection(result);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 693;
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (void *)(v8 + 16);
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v43 = (IPC::Encoder *)v8;
    v10 = *(_QWORD *)(v8 + 544);
    v11 = v10 + 1;
    v12 = *(_QWORD *)(v8 + 552);
    if (v12 < v10 + 1)
    {
      v31 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v32 = v31;
        v31 *= 2;
      }
      while (v32 < v11);
      v33 = (char *)mmap(0, v32, 3, 4098, -1, 0);
      if (v33 == (char *)-1)
        goto LABEL_34;
      v13 = v33;
      memcpy(v33, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
      v34 = *(void **)(v8 + 528);
      if (v34 != v9)
        munmap(v34, *(_QWORD *)(v8 + 552));
      *(_QWORD *)(v8 + 528) = v13;
      *(_QWORD *)(v8 + 552) = v32;
      v14 = *(_QWORD *)(v8 + 544);
    }
    else
    {
      v13 = *(char **)(v8 + 528);
      v14 = *(_QWORD *)(v8 + 544);
    }
    bzero(&v13[v14], v10 - v14);
    *(_QWORD *)(v8 + 544) = v11;
    v15 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v10);
    *(_QWORD *)(v8 + 536) = v15 + 1;
    *v15 = v6;
    v16 = *(_QWORD *)(v8 + 544);
    v17 = v16 + 1;
    v18 = *(_QWORD *)(v8 + 552);
    if (v18 < v16 + 1)
    {
      v35 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v36 = v35;
        v35 *= 2;
      }
      while (v36 < v17);
      v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
      if (v37 == (char *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x197581D48);
      }
      v19 = v37;
      memcpy(v37, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
      v38 = *(void **)(v8 + 528);
      if (v38 != v9)
        munmap(v38, *(_QWORD *)(v8 + 552));
      *(_QWORD *)(v8 + 528) = v19;
      *(_QWORD *)(v8 + 552) = v36;
      v20 = *(_QWORD *)(v8 + 544);
    }
    else
    {
      v19 = *(char **)(v8 + 528);
      v20 = *(_QWORD *)(v8 + 544);
    }
    bzero(&v19[v20], v16 - v20);
    *(_QWORD *)(v8 + 544) = v17;
    v21 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v16);
    *(_QWORD *)(v8 + 536) = v21 + 1;
    *v21 = v5;
    v22 = *(_QWORD *)(v8 + 544);
    v23 = v22 + 1;
    v24 = *(_QWORD *)(v8 + 552);
    if (v24 >= v22 + 1)
    {
      v25 = *(char **)(v8 + 528);
      v26 = *(_QWORD *)(v8 + 544);
LABEL_11:
      bzero(&v25[v26], v22 - v26);
      *(_QWORD *)(v8 + 544) = v23;
      v27 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v22);
      *(_QWORD *)(v8 + 536) = v27 + 1;
      *v27 = v4;
      IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v43, 0, 0);
      result = v43;
      v43 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v28);
        return (IPC::Encoder *)WTF::fastFree(v29, v30);
      }
      return result;
    }
    v39 = (2 * v24 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v40 = v39;
      v39 *= 2;
    }
    while (v40 < v23);
    v41 = (char *)mmap(0, v40, 3, 4098, -1, 0);
    if (v41 != (char *)-1)
    {
      v25 = v41;
      memcpy(v41, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
      v42 = *(void **)(v8 + 528);
      if (v42 != v9)
        munmap(v42, *(_QWORD *)(v8 + 552));
      *(_QWORD *)(v8 + 528) = v25;
      *(_QWORD *)(v8 + 552) = v40;
      v26 = *(_QWORD *)(v8 + 544);
      goto LABEL_11;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x197581D40);
  }
  return result;
}

char *WebKit::RemoteAudioSession::setPreferredBufferSize(WebKit::RemoteAudioSession *this, uint64_t a2)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  unint64_t v5;
  size_t v6;
  WebKit::RemoteAudioSession *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  IPC::Encoder *v18;

  v8 = this;
  if (!*((_BYTE *)this + 192))
  {
    v9 = (void *)WebKit::RemoteAudioSession::ensureConnection(this);
    if (!*((_BYTE *)v8 + 192))
    {
      __break(1u);
LABEL_14:
      munmap(v9, *(_QWORD *)(v2 + 552));
      goto LABEL_12;
    }
  }
  *((_QWORD *)v8 + 20) = a2;
  v8 = (WebKit::RemoteAudioSession *)WebKit::RemoteAudioSession::ensureConnection(v8);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 695;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v18 = (IPC::Encoder *)v2;
  v10 = *(_QWORD *)(v2 + 544);
  v5 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v11 = *(_QWORD *)(v2 + 552);
  if (v11 >= v5 + 8)
  {
    v4 = *(char **)(v2 + 528);
    goto LABEL_5;
  }
  v17 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v3 = v17;
    v17 *= 2;
  }
  while (v3 < v6);
  result = (char *)mmap(0, v3, 3, 4098, -1, 0);
  if (result == (char *)-1)
  {
    __break(0xC471u);
    return result;
  }
  v4 = result;
  memcpy(result, *(const void **)(v2 + 528), *(_QWORD *)(v2 + 544));
  v9 = *(void **)(v2 + 528);
  if (v9 != (void *)(v2 + 16))
    goto LABEL_14;
LABEL_12:
  *(_QWORD *)(v2 + 528) = v4;
  *(_QWORD *)(v2 + 552) = v3;
  v10 = *(_QWORD *)(v2 + 544);
LABEL_5:
  bzero(&v4[v10], v5 - v10);
  *(_QWORD *)(v2 + 544) = v6;
  v12 = (_QWORD *)(*(_QWORD *)(v2 + 528) + v5);
  *(_QWORD *)(v2 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl((uint64_t)v8, (uint64_t *)&v18, 0, 0);
  result = (char *)v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

char *WebKit::RemoteAudioSession::tryToSetActiveInternal(WebKit::RemoteAudioSession *this, int a2)
{
  char v2;
  _BOOL8 v4;
  uint64_t v5;
  IPC::Encoder *v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t i;
  _BYTE *v12;
  size_t v13;
  int v14;
  void *v15;
  int v16;
  uint64_t *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  char *v21;
  char *result;
  unint64_t v23;
  uint64_t *v24;
  char v25;
  int v26;
  uint64_t *v27;
  unsigned int v28;
  IPC::Encoder *v29;
  uint64_t v30;
  char v31;

  v2 = a2;
  if (a2 && *((_BYTE *)this + 216))
    return 0;
  v5 = WebKit::RemoteAudioSession::ensureConnection(this);
  v30 = 0;
  IPC::Connection::createSyncMessageEncoder(3535, 0, &v30, (uint64_t *)&v29);
  v6 = v29;
  v7 = *((_QWORD *)v29 + 68);
  v8 = v7 + 1;
  v9 = *((_QWORD *)v29 + 69);
  if (v9 >= v7 + 1)
  {
    v10 = (char *)*((_QWORD *)v29 + 66);
    for (i = *((_QWORD *)v29 + 68); ; i = *((_QWORD *)v6 + 68))
    {
      bzero(&v10[i], v7 - i);
      *((_QWORD *)v6 + 68) = v8;
      v12 = (_BYTE *)(*((_QWORD *)v6 + 66) + v7);
      *((_QWORD *)v6 + 67) = v12 + 1;
      *v12 = v2;
      IPC::Connection::sendSyncMessage(v5, v30, (uint64_t *)&v29, 0, (uint64_t)&v27, INFINITY);
      v13 = v28;
      if (v28)
        break;
      v14 = IPC::Decoder::decode<std::tuple<BOOL>>(v27);
      if ((unsigned __int16)v14 >= 0x100u)
      {
        if (v28)
        {
LABEL_34:
          result = (char *)std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_35;
        }
        LODWORD(v5) = v14;
        v17 = v27;
        v27 = 0;
        v24 = v17;
        v25 = v14;
        goto LABEL_14;
      }
      LOBYTE(v24) = 13;
      v13 = 1;
      v26 = 1;
      v16 = v28;
      if (v28 != -1)
        goto LABEL_15;
LABEL_16:
      v18 = v29;
      v29 = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v15);
        WTF::fastFree(v19, v20);
      }
      if ((_DWORD)v13)
        v5 = 0;
      else
        v5 = v5;
      if (!(_BYTE)v5)
        goto LABEL_25;
      if (*((_BYTE *)this + 192)
        || (v21 = (char *)WebKit::RemoteAudioSession::ensureConnection(this), *((_BYTE *)this + 192)))
      {
        *((_BYTE *)this + 169) = v2;
LABEL_25:
        v4 = v5 != 0;
        ((void (*)(uint64_t **, uint64_t **))off_1E34E6AC8[v13])(&v27, &v24);
        return (char *)v4;
      }
      __break(1u);
LABEL_33:
      munmap(v21, *((_QWORD *)v6 + 69));
LABEL_31:
      *((_QWORD *)v6 + 66) = v10;
      *((_QWORD *)v6 + 69) = v13;
    }
    if (v28 != 1)
      goto LABEL_34;
    LOBYTE(v24) = (_BYTE)v27;
LABEL_14:
    v26 = v13;
    v16 = v13;
LABEL_15:
    ((void (*)(char *, uint64_t **))off_1E34E6B88[v16])(&v31, &v27);
    goto LABEL_16;
  }
  v23 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v13 = v23;
    v23 *= 2;
  }
  while (v13 < v8);
  result = (char *)mmap(0, v13, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v10 = result;
    memcpy(result, *((const void **)v6 + 66), *((_QWORD *)v6 + 68));
    v21 = (char *)*((_QWORD *)v6 + 66);
    if (v21 != (char *)v6 + 16)
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_35:
  __break(0xC471u);
  return result;
}

unsigned int *WebKit::RemoteAudioSession::addConfigurationChangeObserver(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  unsigned int *result;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;

  v3 = (uint64_t *)(a1 + 96);
  v4 = *(_DWORD *)(a1 + 108);
  v5 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v5;
  if (v5 <= v4)
    goto LABEL_31;
  v7 = *v3;
  if (!*v3)
    goto LABEL_26;
  v8 = *(_DWORD *)(v7 - 4);
  if (!v8)
  {
LABEL_25:
    *(_DWORD *)(a1 + 104) = 0;
    goto LABEL_28;
  }
  v9 = 0;
  do
  {
    while (1)
    {
      v10 = *(_QWORD *)(v7 + 8 * --v8);
      if ((unint64_t)(v10 + 1) >= 2 && !*(_QWORD *)(v10 + 8))
        break;
      if (!v8)
        goto LABEL_14;
    }
    *(_QWORD *)(v7 + 8 * v8) = 0;
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      WTF::fastFree((WTF *)v10, a2);
    }
    *(_QWORD *)(v7 + 8 * v8) = -1;
    ++v9;
  }
  while (v8);
LABEL_14:
  v7 = *v3;
  if (v9)
  {
    *(_DWORD *)(v7 - 16) += v9;
    v13 = *v3;
    if (*v3)
      v14 = *(_DWORD *)(v13 - 12);
    else
      v14 = 0;
    *(_DWORD *)(v13 - 12) = v14 - v9;
    v7 = *v3;
  }
  if (!v7)
  {
LABEL_26:
    v17 = 0;
    *(_DWORD *)(a1 + 104) = 0;
LABEL_29:
    v18 = v17;
    goto LABEL_30;
  }
  v15 = *(_DWORD *)(v7 - 4);
  if (v15 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v15)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
  v7 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 104) = 0;
  if (!v7)
  {
    v17 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v17 = *(_DWORD *)(v7 - 12);
  v18 = 0x7FFFFFFF;
  if (v17 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *(_DWORD *)(a1 + 108) = 2 * v18;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  v19 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v29 = (WTF *)v19;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v3, &v29, (uint64_t)&v28);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v26 = __ldaxr(result);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, result));
    if (!v27)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v22);
    }
  }
  if (v19)
  {
    do
    {
      v24 = __ldaxr(v19);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v19));
    if (!v25)
    {
      atomic_store(1u, v19);
      return (unsigned int *)WTF::fastFree((WTF *)v19, v22);
    }
  }
  return result;
}

uint64_t *WebKit::RemoteAudioSession::removeConfigurationChangeObserver(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result + 12;
  v4 = *((_DWORD *)result + 27);
  v5 = *((_DWORD *)result + 26) + 1;
  *((_DWORD *)result + 26) = v5;
  if (v5 > v4)
  {
    v6 = result;
    v7 = *v3;
    if (*v3)
    {
      v8 = *(_DWORD *)(v7 - 4);
      if (!v8)
        goto LABEL_25;
      v9 = 0;
      do
      {
        while (1)
        {
          result = *(uint64_t **)(v7 + 8 * --v8);
          if ((unint64_t)result + 1 >= 2 && !result[1])
            break;
          if (!v8)
            goto LABEL_14;
        }
        *(_QWORD *)(v7 + 8 * v8) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)result);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)result));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        }
        *(_QWORD *)(v7 + 8 * v8) = -1;
        ++v9;
      }
      while (v8);
LABEL_14:
      v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        v12 = *v3;
        if (*v3)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v9;
        v7 = *v3;
      }
      if (v7)
      {
        v14 = *(_DWORD *)(v7 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v14)
        {
          result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          v7 = v6[12];
          *((_DWORD *)v6 + 26) = 0;
          if (!v7)
          {
            v16 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *((_DWORD *)v6 + 26) = 0;
LABEL_28:
        v16 = *(_DWORD *)(v7 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_30:
          *((_DWORD *)v6 + 27) = 2 * v17;
          goto LABEL_31;
        }
LABEL_29:
        v17 = v16;
        goto LABEL_30;
      }
    }
    v16 = 0;
    *((_DWORD *)v6 + 26) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v18 = a2[1];
  if (v18 && *(_QWORD *)(v18 + 8))
  {
    v20 = a2[1];
    result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20);
    if (*v3)
    {
      v19 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v19 == result)
        return result;
    }
    else
    {
      if (!result)
        return result;
      v19 = 0;
    }
    if ((uint64_t *)v19 != result)
      return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v3, (unsigned int **)result);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteAudioSession::setIsPlayingToBluetoothOverride(WebKit::RemoteAudioSession *a1, __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  __int16 v8;
  IPC::Encoder *v9;

  v8 = a2;
  *((_BYTE *)a1 + 115) = 1;
  v2 = WebKit::RemoteAudioSession::ensureConnection(a1);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 694;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v9 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>((IPC::Encoder *)v3, (char *)&v8);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSession::category(WebKit::RemoteAudioSession *this)
{
  return *((unsigned __int8 *)this + 112);
}

uint64_t WebKit::RemoteAudioSession::mode(WebKit::RemoteAudioSession *this)
{
  return *((unsigned __int8 *)this + 113);
}

uint64_t WebKit::RemoteAudioSession::configurationChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  _BOOL4 v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;

  v3 = a1 + 120;
  if (*(_BYTE *)(a1 + 192))
  {
    v4 = *(unsigned __int8 *)(a2 + 48) != *(unsigned __int8 *)(a1 + 168);
    v5 = *(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 136);
    v6 = *(float *)(a2 + 8) != *(float *)(a1 + 128);
    v7 = *(unsigned __int8 *)(a2 + 49) != *(unsigned __int8 *)(a1 + 169);
  }
  else
  {
    v4 = 1;
    v5 = 1;
    v6 = 1;
    v7 = 1;
  }
  v13 = v4;
  v12 = v5;
  v11 = v6;
  std::optional<WebKit::RemoteAudioSessionConfiguration>::operator=[abi:sn180100]<WebKit::RemoteAudioSessionConfiguration,void>(v3, (uint64_t *)a2);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v8 = off_1E34E6BA8;
  v8[1] = &v13;
  v8[2] = a1;
  v8[3] = &v12;
  v8[4] = &v11;
  v10 = v8;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(a1 + 96), &v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v7)
    return WebCore::AudioSession::activeStateChanged((WebCore::AudioSession *)a1);
  return result;
}

uint64_t std::optional<WebKit::RemoteAudioSessionConfiguration>::operator=[abi:sn180100]<WebKit::RemoteAudioSessionConfiguration,void>(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 72))
  {
    WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
    v4 = *(_OWORD *)((char *)a2 + 34);
    v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 34) = v4;
    WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 7));
    v6 = *((_BYTE *)a2 + 64);
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v7;
    v8 = *(_OWORD *)(a2 + 1);
    v9 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 34) = *(_OWORD *)((char *)a2 + 34);
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 8) = v8;
    v10 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(a1 + 56) = v10;
    v6 = *((_BYTE *)a2 + 64);
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_BYTE *)(a1 + 64) = v6;
  return a1;
}

uint64_t WebKit::RemoteAudioSession::beginInterruptionRemote(WebKit::RemoteAudioSession *this)
{
  WebCore::AudioSessionInterruptionObserver *v2;

  v2 = (WebKit::RemoteAudioSession *)((char *)this + 48);
  WebCore::AudioSession::removeInterruptionObserver(this, (WebKit::RemoteAudioSession *)((char *)this + 48));
  WebCore::AudioSession::beginInterruption(this);
  return WebCore::AudioSession::addInterruptionObserver(this, v2);
}

uint64_t WebKit::RemoteAudioSession::endInterruptionRemote(uint64_t a1)
{
  WebCore::AudioSessionInterruptionObserver *v2;

  v2 = (WebCore::AudioSessionInterruptionObserver *)(a1 + 48);
  WebCore::AudioSession::removeInterruptionObserver((WebCore::AudioSession *)a1, (WebCore::AudioSessionInterruptionObserver *)(a1 + 48));
  WebCore::AudioSession::endInterruption();
  return WebCore::AudioSession::addInterruptionObserver((WebCore::AudioSession *)a1, v2);
}

IPC::Encoder *WebKit::RemoteAudioSession::beginAudioSessionInterruption(WebKit::RemoteAudioSession *this)
{
  uint64_t v1;

  v1 = WebKit::RemoteAudioSession::ensureConnection(this);
  return IPC::Connection::send<Messages::RemoteAudioSessionProxy::BeginInterruptionRemote>(v1);
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteAudioSessionProxy::BeginInterruptionRemote>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 691;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteAudioSession::beginAudioSessionInterruption(WebKit::RemoteAudioSession *this)
{
  uint64_t v1;

  v1 = WebKit::RemoteAudioSession::ensureConnection((WebKit::RemoteAudioSession *)((char *)this - 48));
  return IPC::Connection::send<Messages::RemoteAudioSessionProxy::BeginInterruptionRemote>(v1);
}

char *WebKit::RemoteAudioSession::endAudioSessionInterruption(WebKit::RemoteAudioSession *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  char *result;
  WTF *v13;
  void *v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  IPC::Encoder *v18;

  v3 = WebKit::RemoteAudioSession::ensureConnection(a1);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 692;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v18 = (IPC::Encoder *)v4;
  v5 = *(_QWORD *)(v4 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(v4 + 552);
  if (v7 < v5 + 1)
  {
    v15 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v16 = v15;
      v15 *= 2;
    }
    while (v16 < v6);
    result = (char *)mmap(0, v16, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v8 = result;
    memcpy(result, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v17 = *(void **)(v4 + 528);
    if (v17 != (void *)(v4 + 16))
      munmap(v17, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v8;
    *(_QWORD *)(v4 + 552) = v16;
    v9 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v8 = *(char **)(v4 + 528);
    v9 = *(_QWORD *)(v4 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(v4 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(v4 + 528) + v5);
  *(_QWORD *)(v4 + 536) = v10 + 1;
  *v10 = a2;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v18, 0, 0);
  result = (char *)v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
    return (char *)WTF::fastFree(v13, v14);
  }
  return result;
}

char *`non-virtual thunk to'WebKit::RemoteAudioSession::endAudioSessionInterruption(uint64_t a1, char a2)
{
  return WebKit::RemoteAudioSession::endAudioSessionInterruption((WebKit::RemoteAudioSession *)(a1 - 48), a2);
}

IPC::Encoder *WebKit::RemoteAudioSession::beginInterruptionForTesting(WebKit::RemoteAudioSession *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  *((_BYTE *)this + 216) = 1;
  v1 = WebKit::RemoteAudioSession::ensureConnection(this);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 698;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteAudioSession::endInterruptionForTesting(IPC::Encoder *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  WTF *v4;
  void *v5;
  IPC::Encoder *v6;

  if (*((_BYTE *)this + 216))
  {
    *((_BYTE *)this + 216) = 0;
    v1 = WebKit::RemoteAudioSession::ensureConnection(this);
    v2 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v2 = 699;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 528) = v2 + 16;
    *(_QWORD *)(v2 + 536) = v2 + 16;
    *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v2 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
    v6 = (IPC::Encoder *)v2;
    IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v6, 0, 0);
    this = v6;
    v6 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v3);
      return (IPC::Encoder *)WTF::fastFree(v4, v5);
    }
  }
  return this;
}

IPC::Encoder *WebKit::RemoteAudioSession::setSceneIdentifier(WTF::StringImpl **this, const WTF::String *a2)
{
  IPC::Encoder *result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  if (*((_BYTE *)this + 192)
    || (result = (IPC::Encoder *)WebKit::RemoteAudioSession::ensureConnection((WebKit::RemoteAudioSession *)this),
        *((_BYTE *)this + 192)))
  {
    WTF::String::operator=(this + 22, a2);
    v5 = WebKit::RemoteAudioSession::ensureConnection((WebKit::RemoteAudioSession *)this);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 696;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v10 = (IPC::Encoder *)v6;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, (uint64_t *)a2);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v10, 0, 0);
    result = v10;
    v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *WebKit::RemoteAudioSession::setSoundStageSize(WebKit::RemoteAudioSession *this, char a2)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  size_t v6;
  WebKit::RemoteAudioSession *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  IPC::Encoder *v18;

  v8 = this;
  if (!*((_BYTE *)this + 192))
  {
    v9 = (void *)WebKit::RemoteAudioSession::ensureConnection(this);
    if (!*((_BYTE *)v8 + 192))
    {
      __break(1u);
LABEL_14:
      munmap(v9, *(_QWORD *)(v2 + 552));
      goto LABEL_12;
    }
  }
  *((_BYTE *)v8 + 184) = a2;
  v8 = (WebKit::RemoteAudioSession *)WebKit::RemoteAudioSession::ensureConnection(v8);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 697;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v18 = (IPC::Encoder *)v2;
  v5 = *(_QWORD *)(v2 + 544);
  v6 = v5 + 1;
  v10 = *(_QWORD *)(v2 + 552);
  if (v10 >= v5 + 1)
  {
    v4 = *(char **)(v2 + 528);
    v11 = *(_QWORD *)(v2 + 544);
    goto LABEL_5;
  }
  v17 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v3 = v17;
    v17 *= 2;
  }
  while (v3 < v6);
  result = (char *)mmap(0, v3, 3, 4098, -1, 0);
  if (result == (char *)-1)
  {
    __break(0xC471u);
    return result;
  }
  v4 = result;
  memcpy(result, *(const void **)(v2 + 528), *(_QWORD *)(v2 + 544));
  v9 = *(void **)(v2 + 528);
  if (v9 != (void *)(v2 + 16))
    goto LABEL_14;
LABEL_12:
  *(_QWORD *)(v2 + 528) = v4;
  *(_QWORD *)(v2 + 552) = v3;
  v11 = *(_QWORD *)(v2 + 544);
LABEL_5:
  bzero(&v4[v11], v5 - v11);
  *(_QWORD *)(v2 + 544) = v6;
  v12 = (_BYTE *)(*(_QWORD *)(v2 + 528) + v5);
  *(_QWORD *)(v2 + 536) = v12 + 1;
  *v12 = a2;
  IPC::Connection::sendMessageImpl((uint64_t)v8, (uint64_t *)&v18, 0, 0);
  result = (char *)v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteCDM::setLogIdentifier(IPC::Encoder *this, const void *a2)
{
  uint64_t v2;
  IPC::Encoder *v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  v2 = *((_QWORD *)this + 2);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = this;
    {
      v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v5 = WebKit::WebProcess::WebProcess(v12);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
    }
    v6 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v5) + 24);
    v7 = *((_QWORD *)v4 + 3);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 734;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v13 = (IPC::Encoder *)v8;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
    this = v13;
    v13 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v9);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return this;
}

IPC::Encoder *WebKit::RemoteCDM::getSupportedConfiguration(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v5;
  WebKit::WebProcess *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *result;
  WTF *v19;
  void *v20;
  void *v21;
  WebKit::WebProcess *v22;
  _BYTE v23[88];
  uint64_t v24[2];
  IPC::Encoder *v25;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v9 = WebKit::WebProcess::WebProcess(v22);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
    }
    v10 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v9) + 24);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *a4;
    *a4 = 0;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = &off_1E34E6BD0;
    v13[1] = v12;
    v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v15 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v15 = 732;
    *(_QWORD *)(v15 + 8) = v11;
    *(_QWORD *)(v15 + 528) = v15 + 16;
    *(_QWORD *)(v15 + 536) = v15 + 16;
    *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v15 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
    v25 = (IPC::Encoder *)v15;
    IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::encode((IPC::Encoder *)v15, a2);
    *IPC::Encoder::grow((IPC::Encoder *)v15, 1uLL, 1) = a3;
    v24[0] = (uint64_t)v13;
    v24[1] = v14;
    IPC::Connection::sendMessageWithAsyncReply(v10, &v25, v24, 0, 0);
    v17 = v24[0];
    v24[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    result = v25;
    v25 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  else
  {
    v23[0] = 0;
    v23[80] = 0;
    WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(a4, (uint64_t)v23);
    return (IPC::Encoder *)std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v21);
  }
  return result;
}

uint64_t WebKit::RemoteCDM::supportsConfiguration()
{
  return 0;
}

uint64_t WebKit::RemoteCDM::supportsConfigurationWithRestrictions()
{
  return 0;
}

uint64_t WebKit::RemoteCDM::supportsSessionTypeWithConfiguration()
{
  return 0;
}

uint64_t WebKit::RemoteCDM::supportsInitData()
{
  return 1;
}

uint64_t WebKit::RemoteCDM::distinctiveIdentifiersRequirement()
{
  return 2;
}

uint64_t WebKit::RemoteCDM::persistentStateRequirement()
{
  return 2;
}

uint64_t WebKit::RemoteCDM::distinctiveIdentifiersAreUniquePerOriginAndClearable()
{
  return 0;
}

uint64_t WebKit::RemoteCDM::createInstance@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  char v11;
  unsigned int *v12;
  int v13;
  void *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WebKit::WebProcess *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebKit::WebProcess *v33;
  WebKit::WebProcess *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  IPC::Encoder *v39;
  char v40;
  unsigned int *v41;
  int v42;
  uint64_t v43[2];

  v4 = *(_QWORD *)(this + 16);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    *a2 = 0;
    return this;
  }
  v5 = this;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v33);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v6) + 24);
  v8 = *(_QWORD *)(v5 + 24);
  v43[0] = 0;
  IPC::Connection::createSyncMessageEncoder(3540, v8, v43, (uint64_t *)&v39);
  IPC::Connection::sendSyncMessage(v7, v43[0], (uint64_t *)&v39, 0, (uint64_t)&v41, INFINITY);
  v9 = v42;
  if (v42)
  {
    if (v42 == 1)
    {
      LOBYTE(v35) = (_BYTE)v41;
LABEL_13:
      v38 = v9;
      v13 = v9;
LABEL_14:
      ((void (*)(char *, unsigned int **))off_1E34E6B88[v13])(&v40, &v41);
      goto LABEL_15;
    }
  }
  else
  {
    v2 = (uint64_t *)v41;
    v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v41);
    if (!v11)
      goto LABEL_46;
    v7 = v10;
    IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(v2, (uint64_t)&v35);
    if (!(_BYTE)v36)
    {
      v28 = *v2;
      v29 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v30 = v2[3];
      if (!v30)
        goto LABEL_46;
      goto LABEL_53;
    }
    if (!v42)
    {
      v2 = v35;
      v12 = v41;
      v41 = 0;
      v35 = (uint64_t *)v12;
      v36 = v7;
      v37 = v2;
      goto LABEL_13;
    }
  }
  v30 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_53:
  if (v29)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
LABEL_46:
  v14 = (void *)*v2;
  v31 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v32 = v2[3];
  if (v32 && v31)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v32 + 16))(v32, v14);
  LOBYTE(v35) = 13;
  v9 = 1;
  v38 = 1;
  v13 = v42;
  if (v42 != -1)
    goto LABEL_14;
LABEL_15:
  this = (uint64_t)v39;
  v39 = 0;
  if (this)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)this, v14);
    this = WTF::fastFree(v15, v16);
  }
  if (v9)
    v17 = 0;
  else
    v17 = v7;
  if (v9)
    v18 = 0;
  else
    v18 = (WTF::StringImpl *)v2;
  if (v9)
  {
    if (v17)
      goto LABEL_25;
LABEL_38:
    *a2 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        this = WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v18 -= 2;
    }
    goto LABEL_42;
  }
  v37 = 0;
  if (!v17)
    goto LABEL_38;
LABEL_25:
  v19 = *(_QWORD *)(v5 + 16);
  if (v19 && (v20 = *(_QWORD *)(v19 + 8)) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v20 + 16), *(_QWORD *)(v19 + 8));
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      do
        v22 = __ldaxr((unsigned int *)v21);
      while (__stlxr(v22 + 1, (unsigned int *)v21));
    }
  }
  else
  {
    v21 = 0;
  }
  this = WTF::fastMalloc((WTF *)0x40);
  v23 = this;
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)(this + 16) = &unk_1E34E6870;
  v24 = this + 16;
  *(_QWORD *)this = off_1E34E67F8;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = v21;
  *(_QWORD *)(this + 40) = v17;
  *(_QWORD *)(this + 48) = v18;
  *(_QWORD *)(this + 56) = 0;
  if (v21 && *(_QWORD *)(v21 + 8))
  {
    {
      v25 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v25 = WebKit::WebProcess::WebProcess(v34);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v25;
    }
    v26 = WebKit::WebProcess::ensureGPUProcessConnection(v25);
    v27 = *(_QWORD *)(v23 + 40);
    v43[0] = 64;
    v43[1] = v27;
    this = (uint64_t)WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v26 + 40), (unsigned __int8 *)v43, v24, &v41);
  }
  *a2 = v23;
LABEL_42:
  if (v38 != -1)
    return ((uint64_t (*)(unsigned int **, uint64_t **))off_1E34E6AD8[v38])(&v41, &v35);
  return this;
}

IPC::Encoder *WebKit::RemoteCDM::loadAndInitialize(IPC::Encoder *this)
{
  uint64_t v1;
  IPC::Encoder *v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  WebKit::WebProcess *v10;
  IPC::Encoder *v11;

  v1 = *((_QWORD *)this + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = this;
    {
      v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v3 = WebKit::WebProcess::WebProcess(v10);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
    }
    v4 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v3) + 24);
    v5 = *((_QWORD *)v2 + 3);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 733;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v11 = (IPC::Encoder *)v6;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
    this = v11;
    v11 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return this;
}

uint64_t WebKit::RemoteCDM::sanitizeResponse(WebKit::RemoteCDM *this, const WebCore::SharedBuffer *a2)
{
  return WebCore::FragmentedSharedBuffer::makeContiguous(a2);
}

void WebKit::RemoteCDM::sanitizeSessionId(const WTF::String *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 1;
}

void WebKit::RemoteCDMFactory::~RemoteCDMFactory(WebKit::RemoteCDMFactory *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::RemoteCDM **v5;
  WebKit::RemoteCDM *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WebKit::RemoteCDM **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WebKit::RemoteCDM *)-1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            WebKit::RemoteCDM::~RemoteCDM(v6, a2);
            MEMORY[0x19AEB936C]();
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)(v7 + 16 * i) != -1)
        {
          v10 = v7 + 16 * i;
          v11 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              WTF::fastFree((WTF *)v11, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCDMFactory::~RemoteCDMFactory(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteCDMFactory::~RemoteCDMFactory(WebKit::RemoteCDMFactory *this, void *a2)
{
  WebKit::RemoteCDMFactory::~RemoteCDMFactory((WebKit::RemoteCDMFactory *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCDMFactory::~RemoteCDMFactory((WebKit::RemoteCDMFactory *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteCDMFactory::supportsKeySystem(WebKit::RemoteCDMFactory *this, const WTF::String *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned __int16 v7;
  void *v8;
  int v9;
  int v10;
  uint64_t *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  BOOL v15;
  WebKit::WebProcess *v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  int v21;
  uint64_t *v22;
  int v23;
  IPC::Encoder *v24;
  uint64_t v25;
  char v26;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v3) + 24);
  v25 = 0;
  IPC::Connection::createSyncMessageEncoder(3538, 0, &v25, (uint64_t *)&v24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v24, (uint64_t *)a2);
  IPC::Connection::sendSyncMessage(v4, v25, (uint64_t *)&v24, 0, (uint64_t)&v22, INFINITY);
  v5 = v23;
  if (!v23)
  {
    v7 = IPC::Decoder::decode<std::tuple<BOOL>>(v22);
    if (v7 < 0x100u)
    {
      v6 = 0;
      v9 = 0;
      LOBYTE(v19) = 13;
      v5 = 1;
      v21 = 1;
      v10 = v23;
      if (v23 == -1)
        goto LABEL_13;
      goto LABEL_12;
    }
    if (!v23)
    {
      v6 = v7;
      v11 = v22;
      v22 = 0;
      v19 = v11;
      v20 = v7;
      goto LABEL_11;
    }
LABEL_22:
    v18 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::RemoteCDMFactory::createCDM(v18);
  }
  if (v23 != 1)
    goto LABEL_22;
  v6 = 0;
  LOBYTE(v19) = (_BYTE)v22;
LABEL_11:
  v21 = v5;
  v10 = v5;
LABEL_12:
  ((void (*)(char *, uint64_t **))off_1E34E6B88[v10])(&v26, &v22);
  v9 = v6;
LABEL_13:
  v12 = v24;
  v24 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v8);
    WTF::fastFree(v13, v14);
  }
  ((void (*)(uint64_t **, uint64_t **))off_1E34E6AE8[v5])(&v22, &v19);
  if (v5)
    v15 = 1;
  else
    v15 = v9 == 0;
  return !v15;
}

uint64_t WebKit::RemoteCDMFactory::createCDM@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v3;
  unint64_t v4;
  uint64_t v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  char v14;
  void *v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  IPC::Decoder *v27;
  WTF *v28;
  void *v29;
  void *v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t *v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  void *v44;
  void *v45;
  unsigned int *v46;
  unsigned int v47;
  WebCore::CDMPrivate *v48;
  uint64_t v49;
  void *v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  WebKit::WebProcess *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE v71[24];
  int v72;
  _BYTE v73[56];
  char v74;
  _QWORD *v75;
  int v76;
  IPC::Encoder *v77;
  uint64_t v78;
  IPC::Decoder *v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  _BYTE v83[32];

  v8 = (uint64_t)&_MergedGlobals_106;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v61 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v61);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v9) + 24);
  v78 = 0;
  IPC::Connection::createSyncMessageEncoder(3537, 0, &v78, (uint64_t *)&v77);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v77, a2);
  IPC::Connection::sendSyncMessage(v10, v78, (uint64_t *)&v77, 0, (uint64_t)&v75, INFINITY);
  v63 = a1;
  v65 = a3;
  if (v76)
  {
    if (v76 == 1)
    {
      LOBYTE(v66) = (_BYTE)v75;
      v11 = 1;
      v72 = 1;
      v12 = 1;
LABEL_13:
      ((void (*)(IPC::Decoder **, _QWORD **))off_1E34E6B88[v12])(&v79, &v75);
      goto LABEL_14;
    }
    while (1)
    {
      v57 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_38:
      if (!v56)
        break;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55);
      if (!v83[16])
        break;
LABEL_8:
      v66 = (_QWORD *)v10;
      v16 = (uint64_t *)v79;
      v79 = 0;
      a3 = (uint64_t *)&v79;
      v17 = v80;
      v3 = HIDWORD(v80);
      v80 = 0;
      v18 = v8 + 16;
      v4 = v81;
      v81 = 0;
      v20 = v82;
      v19 = HIDWORD(v82);
      v82 = 0;
      *(_OWORD *)v71 = *(_OWORD *)v83;
      v8 = 1;
      v71[16] = 1;
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, v15);
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v21);
      *(_QWORD *)v73 = v10;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      *(_OWORD *)&v73[40] = *(_OWORD *)v71;
      v74 = 1;
      std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::RemoteCDMConfiguration>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v22);
      if (!v76)
      {
        v24 = v75;
        v75 = 0;
        v8 = *(_QWORD *)v73;
        memset(&v73[8], 0, 32);
        *(_OWORD *)&v83[16] = *(_OWORD *)&v73[40];
        v79 = 0;
        v80 = *(uint64_t **)v73;
        v66 = v24;
        v67 = *(_QWORD *)v73;
        v81 = 0;
        v68 = v16;
        v82 = 0;
        v69 = __PAIR64__(v3, v17);
        v64 = v3;
        *(_QWORD *)v83 = 0;
        v62 = v4;
        v70 = v4;
        *(_QWORD *)&v83[8] = 0;
        LODWORD(v4) = v20;
        *(_DWORD *)v71 = v20;
        *(_DWORD *)&v71[4] = v19;
        v3 = v19;
        *(_OWORD *)&v71[8] = *(_OWORD *)&v73[40];
        v72 = 0;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v83, v23);
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v25);
        v27 = v79;
        v79 = 0;
        LODWORD(v10) = v17;
        if (v27)
        {
          IPC::Decoder::~Decoder(v27);
          WTF::fastFree(v28, v29);
        }
        v11 = 0;
        a2 = v16;
        a3 = v65;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v73[0] = 0;
    v74 = 0;
    a2 = v75;
    v13 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(v75);
    if (v14)
    {
      v10 = v13;
      v8 = (uint64_t)&v79;
      IPC::ArgumentCoder<WebKit::RemoteCDMConfiguration,void>::decode(a2, (uint64_t)&v79);
      if (v83[16])
        goto LABEL_8;
      v55 = *a2;
      v56 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v57 = a2[3];
      if (v57)
        goto LABEL_38;
    }
    else
    {
      v52 = *a2;
      v53 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v54 = a2[3];
      if (v54 && v53)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v52);
    }
  }
  LOBYTE(v66) = 0;
  v71[16] = 0;
  v58 = (void *)*a2;
  v59 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v60 = a2[3];
  if (v60 && v59)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v60 + 16))(v60, v58);
  std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::RemoteCDMConfiguration>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v58);
  LOBYTE(v66) = 13;
  v11 = 1;
  v72 = 1;
LABEL_12:
  std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::RemoteCDMConfiguration>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v73, v26);
  v12 = v76;
  if (v76 != -1)
    goto LABEL_13;
LABEL_14:
  v31 = v77;
  v77 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v30);
    WTF::fastFree(v32, v33);
  }
  *(_QWORD *)&v73[40] = 0;
  memset(v73, 0, 34);
  if (v11)
  {
    LODWORD(v10) = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v8 = 0;
    v37 = 0;
    v38 = 0;
    v79 = 0;
    v80 = 0;
    *(_OWORD *)&v83[8] = *(_OWORD *)&v73[32];
  }
  else
  {
    v68 = 0;
    v69 = 0;
    v79 = (IPC::Decoder *)v8;
    v80 = a2;
    v36 = a2;
    v70 = 0;
    *(_QWORD *)v71 = 0;
    *(_OWORD *)&v83[8] = *(_OWORD *)&v71[8];
    v34 = v64;
    v35 = v62;
    v37 = v4;
    v38 = v3;
  }
  v39 = v10;
  v81 = __PAIR64__(v34, v10);
  v40 = v34;
  v41 = v35;
  v82 = v35;
  v42 = v37;
  *(_DWORD *)v83 = v37;
  *(_DWORD *)&v83[4] = v38;
  v43 = v38;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73[16], v30);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v73, v44);
  if (v8)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v63 + 16), v63);
    v46 = *(unsigned int **)(v63 + 16);
    if (v46)
    {
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
      v8 = (uint64_t)v79;
      v36 = v80;
      v39 = v81;
      v40 = HIDWORD(v81);
      v41 = v82;
      v42 = *(_DWORD *)v83;
      v43 = *(_DWORD *)&v83[4];
      v11 = v72;
    }
    v48 = (WebCore::CDMPrivate *)operator new();
    v49 = WebCore::CDMPrivate::CDMPrivate(v48);
    *(_QWORD *)v49 = &off_1E34E66E8;
    *(_QWORD *)(v49 + 16) = v46;
    *(_QWORD *)(v49 + 24) = v8;
    v80 = 0;
    *(_QWORD *)(v49 + 32) = v36;
    v81 = 0;
    *(_DWORD *)(v49 + 40) = v39;
    *(_DWORD *)(v49 + 44) = v40;
    v82 = 0;
    *(_QWORD *)(v49 + 48) = v41;
    *(_QWORD *)v83 = 0;
    *(_DWORD *)(v49 + 56) = v42;
    *(_DWORD *)(v49 + 60) = v43;
    *(_OWORD *)(v49 + 64) = *(_OWORD *)&v83[8];
    a3 = v65;
  }
  else
  {
    v49 = 0;
  }
  *a3 = v49;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v45);
  result = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v50);
  if (v11 != -1)
    return ((uint64_t (*)(IPC::Decoder **, _QWORD **))off_1E34E6AF8[v11])(&v79, &v66);
  return result;
}

unsigned int *WebKit::RemoteCDMFactory::didReceiveSessionMessage(unsigned int **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  void *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;

  v9 = *((_QWORD *)a3 + 8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(this + 3, &v9, (unsigned int **)&v10);
  result = (unsigned int *)v10;
  if (v10)
  {
    if (*((_QWORD *)v10 + 1))
    {
      WebKit::RemoteCDMInstanceSession::didReceiveMessage(*((WebKit::RemoteCDMInstanceSession **)v10 + 1), a2, a3);
      result = (unsigned int *)v10;
      v10 = 0;
      if (!result)
        return result;
    }
    else
    {
      v10 = 0;
    }
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void WebKit::RemoteCDMInstance::~RemoteCDMInstance(WebKit::RemoteCDMInstance *this, void *a2)
{
  uint64_t v3;
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WebKit::WebProcess *v20;
  WebKit::WebProcess *v21;
  uint64_t v22;
  IPC::Encoder *v23;

  v3 = *((_QWORD *)this + 4);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v22 = *((_QWORD *)this + 5);
    {
      v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v4 = WebKit::WebProcess::WebProcess(v20);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
    }
    v5 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v4) + 24);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 716;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v23 = (IPC::Encoder *)v6;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, &v22);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
    v8 = v23;
    v23 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v21);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
    }
    v12 = WebKit::WebProcess::ensureGPUProcessConnection(v11);
    IPC::MessageReceiverMap::removeMessageReceiver(v12 + 32, 0x40u, *((_QWORD *)this + 5));
  }
  v13 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCDMInstance::~RemoteCDMInstance(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteCDMInstance::~RemoteCDMInstance(WebKit::RemoteCDMInstance *this, void *a2)
{
  WebKit::RemoteCDMInstance::~RemoteCDMInstance((WebKit::RemoteCDMInstance *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCDMInstance::~RemoteCDMInstance((WebKit::RemoteCDMInstance *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::RemoteCDMInstance::initializeWithConfiguration(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t *a5)
{
  uint64_t v6;
  WebKit::WebProcess *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  uint64_t v23;
  WebKit::WebProcess *v24;
  uint64_t v25[2];
  IPC::Encoder *v26;

  v6 = *(_QWORD *)(a1 + 32);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v24);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
    }
    v12 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v11) + 24);
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *a5;
    *a5 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = &off_1E34E6BF8;
    v15[1] = v14;
    v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 718;
    *(_QWORD *)(v17 + 8) = v13;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v26 = (IPC::Encoder *)v17;
    IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::encode((IPC::Encoder *)v17, a2);
    *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a3;
    *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a4;
    v25[0] = (uint64_t)v15;
    v25[1] = v16;
    IPC::Connection::sendMessageWithAsyncReply(v12, &v26, v25, 0, 0);
    v19 = v25[0];
    v25[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    result = v26;
    v26 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v18);
      return (IPC::Encoder *)WTF::fastFree(v21, v22);
    }
  }
  else
  {
    v23 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteCDMInstance::setServerCertificate(uint64_t a1, WebCore::FragmentedSharedBuffer **a2, uint64_t *a3)
{
  uint64_t v4;
  WebKit::WebProcess *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WebKit::WebProcess *v20;
  uint64_t v21[2];
  IPC::Encoder *v22;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    {
      v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v7 = WebKit::WebProcess::WebProcess(v20);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
    }
    v8 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v7) + 24);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *a3;
    *a3 = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E34E6C20;
    v11[1] = v10;
    v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 719;
    *(_QWORD *)(v13 + 8) = v9;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v22 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode((IPC::Encoder *)v13, *a2);
    v21[0] = (uint64_t)v11;
    v21[1] = v12;
    IPC::Connection::sendMessageWithAsyncReply(v8, &v22, v21, 0, 0);
    v15 = v21[0];
    v21[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    result = v22;
    v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  else
  {
    v19 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteCDMInstance::setStorageDirectory(IPC::Encoder *this, const WTF::String *a2)
{
  uint64_t v2;
  IPC::Encoder *v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  v2 = *((_QWORD *)this + 4);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = this;
    {
      v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v5 = WebKit::WebProcess::WebProcess(v12);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
    }
    v6 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v5) + 24);
    v7 = *((_QWORD *)v4 + 5);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 720;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v13 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)a2);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
    this = v13;
    v13 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v9);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return this;
}

void WebKit::RemoteCDMInstance::createSession(WebKit::RemoteCDMInstance *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  int v19;
  unint64_t v20;
  void *v21;
  uint64_t *v22;
  int v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  size_t *v45;
  size_t v46;
  size_t *v47;
  int v48;
  void *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  void *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  WebKit::WebProcess *v70;
  _QWORD v71[2];
  int v72;
  uint64_t *v73;
  int v74;
  IPC::Encoder *v75;
  uint64_t v76;
  char v77;

  v3 = *((_QWORD *)this + 4);
  if (!v3 || !*(_QWORD *)(v3 + 8))
  {
    *a2 = 0;
    return;
  }
  v5 = *((_QWORD *)this + 7);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  else
    v7 = 0;
  v8 = (size_t)&_MergedGlobals_106;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v70 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v70);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v9) + 24);
  v11 = *((_QWORD *)this + 5);
  v76 = 0;
  IPC::Connection::createSyncMessageEncoder(3539, v11, &v76, (uint64_t *)&v75);
  v12 = v75;
  v13 = *((_QWORD *)v75 + 68);
  v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = v14 + 8;
  v16 = *((_QWORD *)v75 + 69);
  if (v16 < v14 + 8)
  {
    v67 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v8 = v67;
      v67 *= 2;
    }
    while (v8 < v15);
    v68 = (char *)mmap(0, v8, 3, 4098, -1, 0);
    if (v68 == (char *)-1)
      goto LABEL_84;
    v17 = v68;
    memcpy(v68, *((const void **)v12 + 66), *((_QWORD *)v12 + 68));
    v69 = (char *)*((_QWORD *)v12 + 66);
    if (v69 != (char *)v12 + 16)
      munmap(v69, *((_QWORD *)v12 + 69));
    *((_QWORD *)v12 + 66) = v17;
    *((_QWORD *)v12 + 69) = v8;
    v13 = *((_QWORD *)v12 + 68);
  }
  else
  {
    v17 = (char *)*((_QWORD *)v75 + 66);
  }
  bzero(&v17[v13], v14 - v13);
  *((_QWORD *)v12 + 68) = v15;
  v18 = (uint64_t *)(*((_QWORD *)v12 + 66) + v14);
  *((_QWORD *)v12 + 67) = v18 + 1;
  *v18 = v7;
  IPC::Connection::sendSyncMessage(v10, v76, (uint64_t *)&v75, 0, (uint64_t)&v73, INFINITY);
  v19 = v74;
  if (v74)
  {
    if (v74 == 1)
    {
      LOBYTE(v71[0]) = (_BYTE)v73;
LABEL_18:
      v72 = v19;
      v23 = v19;
LABEL_19:
      ((void (*)(char *, uint64_t **))off_1E34E6B88[v23])(&v77, &v73);
      goto LABEL_20;
    }
LABEL_83:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_84:
    __break(0xC471u);
    return;
  }
  v20 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v73);
  if ((_BYTE)v21)
  {
    if (!v74)
    {
      v8 = v20;
      v22 = v73;
      v73 = 0;
      v71[0] = v22;
      v71[1] = v20;
      goto LABEL_18;
    }
    goto LABEL_83;
  }
  LOBYTE(v71[0]) = 13;
  v19 = 1;
  v72 = 1;
  v23 = v74;
  if (v74 != -1)
    goto LABEL_19;
LABEL_20:
  v24 = v75;
  v75 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v21);
    WTF::fastFree(v25, v26);
  }
  v27 = 0;
  if (v19 || !v8)
    goto LABEL_70;
  v28 = *((_QWORD *)this + 4);
  if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v29 + 16), *(_QWORD *)(v28 + 8));
    v30 = *(unsigned int **)(v29 + 16);
    if (v30)
    {
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
  }
  else
  {
    v30 = 0;
  }
  v32 = WTF::fastMalloc((WTF *)0x38);
  v33 = v32;
  *(_QWORD *)(v32 + 8) = 0;
  v34 = (unsigned int *)(v32 + 8);
  *(_QWORD *)(v32 + 16) = &unk_1E34E6928;
  v27 = v32 + 16;
  *(_QWORD *)v32 = off_1E34E68A8;
  *(_QWORD *)(v32 + 32) = v30;
  *(_QWORD *)(v32 + 40) = v8;
  *(_QWORD *)(v32 + 48) = 0;
  v35 = *((_QWORD *)this + 4);
  if (v35)
    v36 = *(_QWORD *)(v35 + 8);
  else
    v36 = 0;
  *(_DWORD *)(v32 + 24) = 2;
  v39 = *(_QWORD *)(v36 + 24);
  v38 = (uint64_t *)(v36 + 24);
  v37 = v39;
  if (v39
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v38),
        (v37 = *v38) != 0))
  {
    v40 = *(_DWORD *)(v37 - 8);
  }
  else
  {
    v40 = 0;
  }
  v41 = (v8 + ~(v8 << 32)) ^ ((v8 + ~(v8 << 32)) >> 22);
  v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
  v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
  v44 = v40 & ((v43 >> 31) ^ v43);
  v45 = (size_t *)(v37 + 16 * v44);
  v46 = *v45;
  if (*v45)
  {
    v47 = 0;
    v48 = 1;
    while (v46 != v8)
    {
      if (v46 == -1)
        v47 = v45;
      v44 = (v44 + v48) & v40;
      v45 = (size_t *)(v37 + 16 * v44);
      v46 = *v45;
      ++v48;
      if (!*v45)
      {
        if (v47)
        {
          *v47 = 0;
          v47[1] = 0;
          --*(_DWORD *)(*v38 - 16);
          v45 = v47;
        }
        goto LABEL_46;
      }
    }
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v34, v33);
    v58 = *(unsigned int **)(v33 + 8);
    if (v58)
    {
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
    }
    v60 = (unsigned int *)v45[1];
    v45[1] = (size_t)v58;
    if (v60)
    {
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        atomic_store(1u, v60);
        WTF::fastFree((WTF *)v60, v57);
      }
    }
    goto LABEL_67;
  }
LABEL_46:
  *v45 = v8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v34, v33);
  v50 = *(unsigned int **)(v33 + 8);
  if (v50)
  {
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 + 1, v50));
  }
  v52 = (unsigned int *)v45[1];
  v45[1] = (size_t)v50;
  if (v52)
  {
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v52);
      WTF::fastFree((WTF *)v52, v49);
    }
  }
  v55 = *v38;
  if (*v38)
    v56 = *(_DWORD *)(v55 - 12) + 1;
  else
    v56 = 1;
  *(_DWORD *)(v55 - 12) = v56;
  v63 = *v38;
  if (*v38)
    v64 = *(_DWORD *)(v63 - 12);
  else
    v64 = 0;
  v65 = (*(_DWORD *)(v63 - 16) + v64);
  v66 = *(unsigned int *)(v63 - 4);
  if (v66 <= 0x400)
  {
    if (3 * v66 > 4 * v65)
      goto LABEL_67;
    goto LABEL_66;
  }
  if (v66 <= 2 * v65)
LABEL_66:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v38);
LABEL_67:
  if (*(_DWORD *)(v33 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  else
    --*(_DWORD *)(v33 + 24);
LABEL_70:
  *a2 = v27;
  if (v72 != -1)
    ((void (*)(uint64_t **, _QWORD *))off_1E34E6B08[v72])(&v73, v71);
}

void WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession(WebKit::RemoteCDMInstanceSession *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  WebKit::WebProcess *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WebKit::WebProcess *v39;
  IPC::Encoder *v40;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 5);
  v8 = *(_QWORD *)(v4 + 24);
  v7 = (uint64_t *)(v4 + 24);
  v6 = v8;
  if (v8)
  {
    v9 = *(_DWORD *)(v6 - 8);
    v10 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v6 + 16 * v13);
    if (v14 != v5)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v6 + 16 * v13);
        ++v15;
        if (v14 == v5)
          goto LABEL_11;
      }
      v13 = *(unsigned int *)(v6 - 4);
    }
LABEL_11:
    if (v13 != *(_DWORD *)(v6 - 4))
    {
      v16 = (_QWORD *)(v6 + 16 * v13);
      v17 = (unsigned int *)v16[1];
      *v16 = -1;
      v16[1] = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
        }
      }
      ++*(_DWORD *)(*v7 - 16);
      v20 = *v7;
      if (*v7)
        v21 = *(_DWORD *)(v20 - 12) - 1;
      else
        v21 = -1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *v7;
      if (*v7)
      {
        v23 = 6 * *(_DWORD *)(v22 - 12);
        v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9)
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v7, v24 >> 1);
      }
    }
  }
  {
    v26 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v39 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v26 = WebKit::WebProcess::WebProcess(v39);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v26;
  }
  v27 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v26) + 24);
  v28 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v28 = 717;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 528) = v28 + 16;
  *(_QWORD *)(v28 + 536) = v28 + 16;
  *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v28 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
  v40 = (IPC::Encoder *)v28;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v28, 8uLL, 8) = v5;
  IPC::Connection::sendMessageImpl(v27, (uint64_t *)&v40, 0, 0);
  v30 = v40;
  v40 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  v33 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v29);
    }
  }
  v36 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v36)
  {
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      WTF::fastFree((WTF *)v36, v29);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v29);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession(WebKit::RemoteCDMInstanceSession *this, void *a2)
{
  WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession((WebKit::RemoteCDMInstanceSession *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCDMInstanceSession::~RemoteCDMInstanceSession((WebKit::RemoteCDMInstanceSession *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::RemoteCDMInstanceSession::setLogIdentifier(WebKit::RemoteCDMInstanceSession *this, const void *a2)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v4) + 24);
  v6 = *((_QWORD *)this + 5);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 725;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteCDMInstanceSession::setLogIdentifier(WebKit::RemoteCDMInstanceSession *this, const void *a2)
{
  return WebKit::RemoteCDMInstanceSession::setLogIdentifier((WebKit::RemoteCDMInstanceSession *)((char *)this - 16), a2);
}

unsigned int *WebKit::RemoteCDMInstanceSession::requestLicense(uint64_t a1, char a2, char a3, uint64_t *a4, WebCore::FragmentedSharedBuffer **a5, uint64_t *a6)
{
  uint64_t v7;
  WebKit::WebProcess *v13;
  os_unfair_lock_s *v14;
  WebCore::FragmentedSharedBuffer *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  unsigned int *result;
  WebCore::SharedBuffer *v27;
  uint64_t v28;
  WebKit::WebProcess *v29;
  WebCore::FragmentedSharedBuffer *v30;
  uint64_t v31[2];
  IPC::Encoder *v32;

  v7 = *(_QWORD *)(a1 + 32);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    {
      v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v13 = WebKit::WebProcess::WebProcess(v29);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
    }
    v14 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v13) + 24);
    v15 = *a5;
    *a5 = 0;
    v30 = v15;
    v16 = *a6;
    *a6 = 0;
    v17 = *(_QWORD *)(a1 + 40);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = &off_1E34E6C48;
    v18[1] = v16;
    v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v20 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v20 = 724;
    *(_QWORD *)(v20 + 8) = v17;
    *(_QWORD *)(v20 + 528) = v20 + 16;
    *(_QWORD *)(v20 + 536) = v20 + 16;
    *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v20 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
    v32 = (IPC::Encoder *)v20;
    *IPC::Encoder::grow((IPC::Encoder *)v20, 1uLL, 1) = a2;
    *IPC::Encoder::grow((IPC::Encoder *)v20, 1uLL, 1) = a3;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v20, a4);
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v20, &v30);
    v31[0] = (uint64_t)v18;
    v31[1] = v19;
    IPC::Connection::sendMessageWithAsyncReply(v14, &v32, v31, 0, 0);
    v22 = v31[0];
    v31[0] = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v21);
      WTF::fastFree(v24, v25);
    }
    result = (unsigned int *)v30;
    v30 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v21);
  }
  else
  {
    v27 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
    v31[0] = WebCore::SharedBuffer::SharedBuffer(v27);
    v28 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v28 + 16))(v28, v31, MEMORY[0x1E0CBF738], 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    result = (unsigned int *)v31[0];
    v31[0] = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v21);
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebKit::RemoteCDMInstanceSession::requestLicense(uint64_t a1, char a2, char a3, uint64_t *a4, WebCore::FragmentedSharedBuffer **a5, uint64_t *a6)
{
  return WebKit::RemoteCDMInstanceSession::requestLicense(a1 - 16, a2, a3, a4, a5, a6);
}

unsigned int *WebKit::RemoteCDMInstanceSession::updateLicense(uint64_t a1, uint64_t *a2, char a3, WebCore::FragmentedSharedBuffer **a4, uint64_t *a5)
{
  uint64_t v6;
  WebKit::WebProcess *v11;
  os_unfair_lock_s *v12;
  WebCore::FragmentedSharedBuffer *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  unsigned int *result;
  uint64_t v25;
  void *v26;
  WebKit::WebProcess *v27;
  IPC::Encoder *v28;
  unsigned int *v29;
  char v30;
  WebCore::FragmentedSharedBuffer *v31;
  char v32;
  uint64_t v33[2];
  char v34;

  v6 = *(_QWORD *)(a1 + 32);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v27);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
    }
    v12 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v11) + 24);
    v13 = *a4;
    *a4 = 0;
    v31 = v13;
    v14 = *a5;
    *a5 = 0;
    v15 = *(_QWORD *)(a1 + 40);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = &off_1E34E6C70;
    v16[1] = v14;
    v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 727;
    *(_QWORD *)(v18 + 8) = v15;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v28 = (IPC::Encoder *)v18;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, a2);
    *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a3;
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v18, &v31);
    v33[0] = (uint64_t)v16;
    v33[1] = v17;
    IPC::Connection::sendMessageWithAsyncReply(v12, &v28, v33, 0, 0);
    v20 = v33[0];
    v33[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v28;
    v28 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v19);
      WTF::fastFree(v22, v23);
    }
    result = (unsigned int *)v31;
    v31 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v19);
  }
  else
  {
    LOBYTE(v33[0]) = 0;
    v34 = 0;
    LOBYTE(v31) = 0;
    v32 = 0;
    LOBYTE(v28) = 0;
    v30 = 0;
    v25 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t *, WebCore::FragmentedSharedBuffer **, IPC::Encoder **, _QWORD))(*(_QWORD *)v25 + 16))(v25, 0, v33, &v31, &v28, 0);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    if (v30)
    {
      result = v29;
      v29 = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v26);
    }
    if (v34)
      return (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v26);
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebKit::RemoteCDMInstanceSession::updateLicense(uint64_t a1, uint64_t *a2, char a3, WebCore::FragmentedSharedBuffer **a4, uint64_t *a5)
{
  return WebKit::RemoteCDMInstanceSession::updateLicense(a1 - 16, a2, a3, a4, a5);
}

char *WebKit::RemoteCDMInstanceSession::loadSession(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  uint64_t v24;
  char *result;
  WTF *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  size_t v31;
  void *v32;
  WebKit::WebProcess *v33;
  size_t v34;
  os_unfair_lock_s *v35;
  IPC::Encoder *v36;
  char *v37;
  char v38;
  _BYTE v39[16];
  uint64_t v40[2];
  char v41;

  v6 = *(_QWORD *)(a1 + 32);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v33);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
    }
    v35 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v11) + 24);
    v12 = *a5;
    *a5 = 0;
    v13 = *(_QWORD *)(a1 + 40);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = &off_1E34E6C98;
    v14[1] = v12;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 722;
    *(_QWORD *)(v16 + 8) = v13;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v36 = (IPC::Encoder *)v16;
    v17 = *(_QWORD *)(v16 + 544);
    v18 = v17 + 1;
    v19 = *(_QWORD *)(v16 + 552);
    if (v19 < v17 + 1)
    {
      v30 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v31 = v30;
        v30 *= 2;
      }
      while (v31 < v18);
      v34 = v31;
      result = (char *)mmap(0, v31, 3, 4098, -1, 0);
      if (result == (char *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v20 = result;
      memcpy(result, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
      v32 = *(void **)(v16 + 528);
      if (v32 != (void *)(v16 + 16))
        munmap(v32, *(_QWORD *)(v16 + 552));
      *(_QWORD *)(v16 + 528) = v20;
      *(_QWORD *)(v16 + 552) = v34;
      v21 = *(_QWORD *)(v16 + 544);
    }
    else
    {
      v20 = *(char **)(v16 + 528);
      v21 = *(_QWORD *)(v16 + 544);
    }
    bzero(&v20[v21], v17 - v21);
    *(_QWORD *)(v16 + 544) = v18;
    v22 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v17);
    *(_QWORD *)(v16 + 536) = v22 + 1;
    *v22 = a2;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a4);
    v40[0] = (uint64_t)v14;
    v40[1] = v15;
    IPC::Connection::sendMessageWithAsyncReply(v35, &v36, v40, 0, 0);
    v24 = v40[0];
    v40[0] = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    result = (char *)v36;
    v36 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v23);
      return (char *)WTF::fastFree(v26, v27);
    }
  }
  else
  {
    LOBYTE(v40[0]) = 0;
    v41 = 0;
    v39[0] = 0;
    v39[8] = 0;
    LOBYTE(v36) = 0;
    v38 = 0;
    v28 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *, _BYTE *, IPC::Encoder **, _QWORD, uint64_t))(*(_QWORD *)v28 + 16))(v28, v40, v39, &v36, 0, 4);
    result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (v38)
    {
      result = v37;
      v37 = 0;
      if (result)
        result = (char *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v29);
    }
    if (v41)
      return (char *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v29);
  }
  return result;
}

char *`non-virtual thunk to'WebKit::RemoteCDMInstanceSession::loadSession(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  return WebKit::RemoteCDMInstanceSession::loadSession(a1 - 16, a2, a3, a4, a5);
}

IPC::Encoder *WebKit::RemoteCDMInstanceSession::closeSession(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  WebKit::WebProcess *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WebKit::WebProcess *v20;
  uint64_t v21[2];
  IPC::Encoder *v22;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    {
      v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v7 = WebKit::WebProcess::WebProcess(v20);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
    }
    v8 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v7) + 24);
    v9 = *a3;
    *a3 = 0;
    v10 = *(_QWORD *)(a1 + 40);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E34E6CC0;
    v11[1] = v9;
    v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 721;
    *(_QWORD *)(v13 + 8) = v10;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v22 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2);
    v21[0] = (uint64_t)v11;
    v21[1] = v12;
    IPC::Connection::sendMessageWithAsyncReply(v8, &v22, v21, 0, 0);
    v15 = v21[0];
    v21[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    result = v22;
    v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  else
  {
    v19 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteCDMInstanceSession::closeSession(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return WebKit::RemoteCDMInstanceSession::closeSession(a1 - 16, a2, a3);
}

char *WebKit::RemoteCDMInstanceSession::removeSessionData(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  uint64_t v5;
  WebKit::WebProcess *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  void *v22;
  uint64_t v23;
  char *result;
  WTF *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unint64_t v30;
  size_t v31;
  void *v32;
  WebKit::WebProcess *v33;
  _QWORD *v34;
  uint64_t v35;
  IPC::Encoder *v36;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v9 = WebKit::WebProcess::WebProcess(v33);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
    }
    v10 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v9) + 24);
    v11 = *a4;
    *a4 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = &off_1E34E6CE8;
    v13[1] = v11;
    v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v15 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v15 = 723;
    *(_QWORD *)(v15 + 8) = v12;
    *(_QWORD *)(v15 + 528) = v15 + 16;
    *(_QWORD *)(v15 + 536) = v15 + 16;
    *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v15 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
    v36 = (IPC::Encoder *)v15;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, a2);
    v16 = *(_QWORD *)(v15 + 544);
    v17 = v16 + 1;
    v18 = *(_QWORD *)(v15 + 552);
    if (v18 < v16 + 1)
    {
      v30 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v31 = v30;
        v30 *= 2;
      }
      while (v31 < v17);
      result = (char *)mmap(0, v31, 3, 4098, -1, 0);
      if (result == (char *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v19 = result;
      memcpy(result, *(const void **)(v15 + 528), *(_QWORD *)(v15 + 544));
      v32 = *(void **)(v15 + 528);
      if (v32 != (void *)(v15 + 16))
        munmap(v32, *(_QWORD *)(v15 + 552));
      *(_QWORD *)(v15 + 528) = v19;
      *(_QWORD *)(v15 + 552) = v31;
      v20 = *(_QWORD *)(v15 + 544);
    }
    else
    {
      v19 = *(char **)(v15 + 528);
      v20 = *(_QWORD *)(v15 + 544);
    }
    bzero(&v19[v20], v16 - v20);
    *(_QWORD *)(v15 + 544) = v17;
    v21 = (_BYTE *)(*(_QWORD *)(v15 + 528) + v16);
    *(_QWORD *)(v15 + 536) = v21 + 1;
    *v21 = a3;
    v34 = v13;
    v35 = v14;
    IPC::Connection::sendMessageWithAsyncReply(v10, &v36, (uint64_t *)&v34, 0, 0);
    v23 = (uint64_t)v34;
    v34 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    result = (char *)v36;
    v36 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v22);
      return (char *)WTF::fastFree(v25, v26);
    }
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v27 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD **, IPC::Encoder **, _QWORD))(*(_QWORD *)v27 + 16))(v27, &v34, &v36, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v29 = (unsigned int *)v36;
    v36 = 0;
    if (v29)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v29, v28);
    return (char *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v28);
  }
  return result;
}

char *`non-virtual thunk to'WebKit::RemoteCDMInstanceSession::removeSessionData(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  return WebKit::RemoteCDMInstanceSession::removeSessionData(a1 - 16, a2, a3, a4);
}

IPC::Encoder *WebKit::RemoteCDMInstanceSession::storeRecordOfKeyUsage(IPC::Encoder *this, const WTF::String *a2)
{
  uint64_t v2;
  IPC::Encoder *v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  WebKit::WebProcess *v12;
  IPC::Encoder *v13;

  v2 = *((_QWORD *)this + 4);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = this;
    {
      v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v5 = WebKit::WebProcess::WebProcess(v12);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
    }
    v6 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v5) + 24);
    v7 = *((_QWORD *)v4 + 5);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 726;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v13 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)a2);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
    this = v13;
    v13 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v9);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return this;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteCDMInstanceSession::storeRecordOfKeyUsage(WebKit::RemoteCDMInstanceSession *this, const WTF::String *a2)
{
  return WebKit::RemoteCDMInstanceSession::storeRecordOfKeyUsage((WebKit::RemoteCDMInstanceSession *)((char *)this - 16), a2);
}

unsigned int *WebKit::RemoteCDMInstanceSession::sendMessage(unsigned int *result, uint64_t a2, unsigned int **a3)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;

  v3 = *((_QWORD *)result + 6);
  if (v3)
  {
    result = *(unsigned int **)(v3 + 8);
    if (result)
    {
      if (*a3)
      {
        v5 = *a3;
        *a3 = 0;
        (*(void (**)(unsigned int *, uint64_t, unsigned int **))(*(_QWORD *)result + 24))(result, a2, &v5);
        result = v5;
        v5 = 0;
        if (result)
          return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v4);
      }
    }
  }
  return result;
}

void WebKit::RemoteLegacyCDM::~RemoteLegacyCDM(WebKit::RemoteLegacyCDM *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteLegacyCDM::~RemoteLegacyCDM(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteLegacyCDM::supportsMIMEType(WebKit::RemoteLegacyCDM *this, const WTF::String *a2)
{
  uint64_t v2;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  void *v12;
  int v13;
  int v14;
  uint64_t *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  BOOL v19;
  WebKit::WebProcess *v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  int v25;
  uint64_t *v26;
  int v27;
  IPC::Encoder *v28;
  uint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 2);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v5) + 24);
  v7 = *((_QWORD *)this + 3);
  v29 = 0;
  IPC::Connection::createSyncMessageEncoder(3626, v7, &v29, (uint64_t *)&v28);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v28, (uint64_t *)a2);
  IPC::Connection::sendSyncMessage(v6, v29, (uint64_t *)&v28, 0, (uint64_t)&v26, INFINITY);
  v8 = v27;
  if (v27)
  {
    if (v27 == 1)
    {
      v9 = 0;
      LOBYTE(v23) = (_BYTE)v26;
LABEL_14:
      v25 = v8;
      v14 = v8;
LABEL_15:
      ((void (*)(char *, uint64_t **))off_1E34E6B88[v14])(&v30, &v26);
      v13 = v9;
LABEL_16:
      v16 = v28;
      v28 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v12);
        WTF::fastFree(v17, v18);
      }
      if (v8)
        v19 = 1;
      else
        v19 = v13 == 0;
      v10 = !v19;
      ((void (*)(uint64_t **, uint64_t **))off_1E34E6B18[v8])(&v26, &v23);
      return v10;
    }
  }
  else
  {
    v11 = IPC::Decoder::decode<std::tuple<BOOL>>(v26);
    if (v11 < 0x100u)
    {
      v9 = 0;
      v13 = 0;
      LOBYTE(v23) = 13;
      v8 = 1;
      v25 = 1;
      v14 = v27;
      if (v27 == -1)
        goto LABEL_16;
      goto LABEL_15;
    }
    if (!v27)
    {
      v9 = v11;
      v15 = v26;
      v26 = 0;
      v23 = v15;
      v24 = v11;
      goto LABEL_14;
    }
  }
  v22 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::RemoteLegacyCDM::createSession(v22);
}

WTF::StringImpl *WebKit::RemoteLegacyCDM::createSession@<X0>(WTF::StringImpl *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t *v15;
  int v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *v22;
  _QWORD *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  WebKit::WebProcess *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  int v61;
  WTF::StringImpl *v62;
  uint64_t *v63;
  int v64;
  IPC::Encoder *v65;
  uint64_t v66;
  char v67;

  v4 = *((_QWORD *)result + 2);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    *a3 = 0;
    return result;
  }
  v6 = result;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a2 + 32))(&v62, a2);
  v7 = (*(uint64_t (**)(_QWORD *))(*a2 + 48))(a2);
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v57 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v57);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v8) + 24);
  v10 = *((_QWORD *)v6 + 3);
  v66 = 0;
  IPC::Connection::createSyncMessageEncoder(3625, v10, &v66, (uint64_t *)&v65);
  v11 = v65;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v65, (uint64_t *)&v62);
  *(_QWORD *)IPC::Encoder::grow(v11, 8uLL, 8) = v7;
  IPC::Connection::sendSyncMessage(v9, v66, (uint64_t *)&v65, 0, (uint64_t)&v63, INFINITY);
  v12 = v64;
  if (v64)
  {
    if (v64 == 1)
    {
      LOBYTE(v60[0]) = (_BYTE)v63;
LABEL_12:
      v61 = v12;
      v16 = v12;
LABEL_13:
      ((void (*)(char *, uint64_t **))off_1E34E6B88[v16])(&v67, &v63);
      goto LABEL_14;
    }
    goto LABEL_73;
  }
  v13 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v63);
  if ((_BYTE)v14)
  {
    if (!v64)
    {
      v7 = v13;
      v15 = v63;
      v63 = 0;
      v60[0] = v15;
      v60[1] = v13;
      goto LABEL_12;
    }
LABEL_73:
    v58 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebKit::RemoteLegacyCDM::setPlayerId(v58, v59);
  }
  LOBYTE(v60[0]) = 13;
  v12 = 1;
  v61 = 1;
  v16 = v64;
  if (v64 != -1)
    goto LABEL_13;
LABEL_14:
  v17 = v65;
  v65 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (!v12 && v7)
  {
    v20 = (unsigned int *)*((_QWORD *)v6 + 2);
    if (v20)
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    v23 = (_QWORD *)operator new();
    v23[1] = &unk_1E34E6A58;
    v23[2] = 0;
    v24 = (unsigned int *)(v23 + 2);
    *v23 = &off_1E34E6A00;
    v23[3] = v20;
    v23[4] = v7;
    v25 = a2[1];
    if (v25)
      goto LABEL_76;
    v25 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = a2;
    v26 = (unsigned int *)a2[1];
    a2[1] = v25;
    if (!v26)
      goto LABEL_76;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v22);
    }
    v25 = a2[1];
    if (v25)
    {
LABEL_76:
      do
        v29 = __ldaxr((unsigned int *)v25);
      while (__stlxr(v29 + 1, (unsigned int *)v25));
    }
    v23[6] = 0;
    v23[7] = 0;
    v23[5] = v25;
    v30 = v23[3];
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
      {
        v32 = (uint64_t *)(v31 + 16);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v24, (uint64_t)(v23 + 1));
        v33 = *(unsigned int **)v24;
        if (*(_QWORD *)v24)
        {
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
        }
        v35 = *v32;
        if (*v32
          || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v32),
              (v35 = *v32) != 0))
        {
          v36 = *(_DWORD *)(v35 - 8);
        }
        else
        {
          v36 = 0;
        }
        v37 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
        v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
        v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
        v40 = v36 & ((v39 >> 31) ^ v39);
        v22 = (uint64_t *)(v35 + 16 * v40);
        v41 = *v22;
        if (!*v22)
        {
LABEL_42:
          v44 = (unsigned int *)v22[1];
          *v22 = v7;
          v22[1] = (uint64_t)v33;
          if (v44)
          {
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              atomic_store(1u, v44);
              v56 = v22;
              WTF::fastFree((WTF *)v44, v22);
              v22 = v56;
            }
          }
          v47 = *v32;
          if (*v32)
            v48 = *(_DWORD *)(v47 - 12) + 1;
          else
            v48 = 1;
          *(_DWORD *)(v47 - 12) = v48;
          v52 = *v32;
          if (*v32)
            v53 = *(_DWORD *)(v52 - 12);
          else
            v53 = 0;
          v54 = (*(_DWORD *)(v52 - 16) + v53);
          v55 = *(unsigned int *)(v52 - 4);
          if (v55 > 0x400)
          {
            if (v55 > 2 * v54)
              goto LABEL_62;
          }
          else if (3 * v55 > 4 * v54)
          {
            goto LABEL_62;
          }
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v32);
          goto LABEL_62;
        }
        v42 = 0;
        v43 = 1;
        while (v41 != v7)
        {
          if (v41 == -1)
            v42 = v22;
          v40 = (v40 + v43) & v36;
          v22 = (uint64_t *)(v35 + 16 * v40);
          v41 = *v22;
          ++v43;
          if (!*v22)
          {
            if (v42)
            {
              *v42 = 0;
              v42[1] = 0;
              --*(_DWORD *)(*v32 - 16);
              v22 = v42;
            }
            goto LABEL_42;
          }
        }
        v49 = (unsigned int *)v22[1];
        v22[1] = (uint64_t)v33;
        if (v49)
        {
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
          {
            atomic_store(1u, v49);
            WTF::fastFree((WTF *)v49, v22);
          }
        }
      }
    }
LABEL_62:
    *a3 = v23;
    v12 = v61;
    if (v61 == -1)
      goto LABEL_64;
    goto LABEL_63;
  }
  *a3 = 0;
LABEL_63:
  ((void (*)(uint64_t **, _QWORD *))off_1E34E6B28[v12])(&v63, v60);
LABEL_64:
  result = v62;
  v62 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDM::setPlayerId(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebProcess *v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(result + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = result;
    LOBYTE(v8) = 0;
    v9 = 0;
    if (a2)
    {
      v9 = 1;
      v8 = a2;
    }
    {
      v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v4 = WebKit::WebProcess::WebProcess(v6);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
    }
    v5 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v4) + 24);
    v7 = &v8;
    return IPC::Connection::send<Messages::RemoteLegacyCDMProxy::SetPlayerId>(v5, (uint64_t *)&v7, *(_QWORD *)(v3 + 24), 0, 0);
  }
  return result;
}

void WebKit::RemoteLegacyCDMFactory::~RemoteLegacyCDMFactory(WebKit::RemoteLegacyCDMFactory *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 5);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
            {
              WTF::StringImpl::destroy(v7, a2);
              v6 = *v5;
            }
            else
            {
              *(_DWORD *)v7 -= 2;
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v8)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, a2);
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)(v9 + 16 * i) != -1)
        {
          v12 = v9 + 16 * i;
          v13 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      for (j = 0; j != v17; ++j)
      {
        if (*(_QWORD *)(v16 + 16 * j) != -1)
        {
          v19 = v16 + 16 * j;
          v20 = *(unsigned int **)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  v23 = *((_QWORD *)this + 1);
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 0;
    v24 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteLegacyCDMFactory::~RemoteLegacyCDMFactory(this, a2);
  WTF::fastFree(v2, v3);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::RemoteLegacyCDMFactoryProxy::SupportsKeySystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  IPC::Encoder *v6;
  int v7;
  unsigned __int16 v8;
  void *v9;
  uint64_t *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  IPC::Encoder *v18;
  uint64_t v19;
  char v20;

  v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3624, 0, &v19, (uint64_t *)&v18);
  v6 = v18;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v18, *(uint64_t **)a3);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)v6, *(_QWORD *)(a3 + 8));
  IPC::Connection::sendSyncMessage(a2, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, INFINITY);
  v7 = v17;
  if (v17)
  {
    if (v17 == 1)
    {
      *(_BYTE *)a1 = (_BYTE)v16;
LABEL_9:
      *(_DWORD *)(a1 + 16) = v7;
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  v8 = IPC::Decoder::decode<std::tuple<BOOL>>(v16);
  if (v8 >= 0x100u)
  {
    if (!v17)
    {
      v10 = v16;
      v16 = 0;
      *(_QWORD *)a1 = v10;
      *(_BYTE *)(a1 + 8) = v8;
      goto LABEL_9;
    }
LABEL_14:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::RemoteLegacyCDMFactory::findCDM(v14, v15);
  }
  *(_BYTE *)a1 = 13;
  *(_DWORD *)(a1 + 16) = 1;
  v7 = v17;
  if (v17 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t **))off_1E34E6B88[v7])(&v20, &v16);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDMFactory::findCDM(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 24));
  v6 = *(_QWORD **)(a1 + 24);
  if (v6)
    v6 += 2 * *((unsigned int *)v6 - 1);
  if (v6 == v4)
    return 0;
  while (1)
  {
    v7 = v4[1];
    if (v7)
      break;
    if (!a2)
      return a2;
LABEL_8:
    while (1)
    {
      v4 += 2;
      if (v4 == v5)
        break;
      if ((unint64_t)(*v4 + 1) > 1)
        goto LABEL_12;
    }
    v4 = v5;
LABEL_12:
    if (v4 == v6)
      return 0;
  }
  if (*(_QWORD *)(v7 + 8) != a2)
    goto LABEL_8;
  return a2;
}

void WebKit::RemoteLegacyCDMSession::~RemoteLegacyCDMSession(WebKit::RemoteLegacyCDMSession *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  WebKit::WebProcess *v26;
  uint64_t v27;
  uint64_t v28;
  IPC::Encoder *v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t *v40;
  WebKit::WebProcess *v41;
  IPC::Encoder *v42;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *((_QWORD *)this + 4);
      v8 = *(_QWORD *)(v4 + 16);
      v6 = (uint64_t *)(v4 + 16);
      v7 = v8;
      if (v8)
      {
        v9 = *(_DWORD *)(v7 - 8);
        v10 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = *(_QWORD *)(v7 + 16 * v13);
        if (v14 != v5)
        {
          v15 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v15) & v9;
            v14 = *(_QWORD *)(v7 + 16 * v13);
            ++v15;
            if (v14 == v5)
              goto LABEL_10;
          }
          v13 = *(unsigned int *)(v7 - 4);
        }
LABEL_10:
        if (v13 != *(_DWORD *)(v7 - 4))
        {
          v16 = (_QWORD *)(v7 + 16 * v13);
          v17 = (unsigned int *)v16[1];
          *v16 = -1;
          v16[1] = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              v40 = v6;
              WTF::fastFree((WTF *)v17, a2);
              v6 = v40;
            }
          }
          ++*(_DWORD *)(*v6 - 16);
          v20 = *v6;
          if (*v6)
            v21 = *(_DWORD *)(v20 - 12) - 1;
          else
            v21 = -1;
          *(_DWORD *)(v20 - 12) = v21;
          v22 = *v6;
          if (*v6)
          {
            v23 = 6 * *(_DWORD *)(v22 - 12);
            v24 = *(_DWORD *)(v22 - 4);
            if (v23 < v24 && v24 >= 9)
              WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v6, v24 >> 1);
          }
        }
      }
      {
        v26 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v26 = WebKit::WebProcess::WebProcess(v41);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v26;
      }
      v27 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v26) + 24);
      v28 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v28 = 1110;
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 528) = v28 + 16;
      *(_QWORD *)(v28 + 536) = v28 + 16;
      *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v28 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
      v42 = (IPC::Encoder *)v28;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v28, 8uLL, 8) = v5;
      IPC::Connection::sendMessageImpl(v27, (uint64_t *)&v42, 0, 0);
      v29 = v42;
      v42 = 0;
      if (v29)
      {
        IPC::Encoder::~Encoder(v29, a2);
        WTF::fastFree(v30, v31);
      }
    }
  }
  v32 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  if (v32)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v32, (WTF::StringImpl *)a2);
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, a2);
    }
  }
  v37 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v37)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      WTF::fastFree((WTF *)v37, a2);
    }
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WebKit::RemoteLegacyCDMSession::~RemoteLegacyCDMSession(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::RemoteLegacyCDMSession::~RemoteLegacyCDMSession(WebKit::RemoteLegacyCDMSession *this, void *a2)
{
  WebKit::RemoteLegacyCDMSession::~RemoteLegacyCDMSession((WebKit::RemoteLegacyCDMSession *)((char *)this - 8), a2);
}

{
  WebKit::RemoteLegacyCDMSession::~RemoteLegacyCDMSession((WebKit::RemoteLegacyCDMSession *)((char *)this - 8), a2);
  JUMPOUT(0x19AEB936CLL);
}

unsigned int *WebKit::RemoteLegacyCDMSession::generateKeyRequest@<X0>(JSC::ArrayBufferView *this@<X2>, unsigned int *result@<X0>, uint64_t *a3@<X1>, WTF::StringImpl **a4@<X3>, _WORD *a5@<X4>, _DWORD *a6@<X5>, _QWORD *a7@<X8>)
{
  WTF::StringImpl *v7;
  uint64_t v9;
  IPC::Encoder *v14;
  uint64_t v15;
  WebKit::WebProcess *v16;
  uint64_t v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int16 *v23;
  unint64_t v24;
  uint64_t *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unsigned int *v33;
  uint64_t *v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  void *v39;
  WTF::StringImpl *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebKit::WebProcess *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  WTF::StringImpl *v52;
  __int16 v53;
  int v54;
  int v55;
  WebCore::FragmentedSharedBuffer *v56;
  WTF::DeferrableRefCountedBase *v57[2];
  __int16 v58;
  int v59;
  char v60;
  uint64_t *v61;
  int v62;
  IPC::Encoder *v63;
  uint64_t v64;
  unsigned int *v65;
  char v66;
  WTF::StringImpl *v67;
  char v68;

  v9 = *((_QWORD *)result + 3);
  if (!v9 || !this || !*(_QWORD *)(v9 + 8))
  {
    *a7 = 0;
    return result;
  }
  v14 = (IPC::Encoder *)result;
  WebKit::convertToSharedBuffer<JSC::GenericTypedArrayView<JSC::Uint8Adaptor> *>(&v56, this);
  v15 = (uint64_t)&_MergedGlobals_106;
    goto LABEL_63;
  v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  while (1)
  {
    v15 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v16) + 24);
    v17 = *((_QWORD *)v14 + 4);
    v64 = 0;
    IPC::Connection::createSyncMessageEncoder(3628, v17, &v64, (uint64_t *)&v63);
    v14 = v63;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v63, a3);
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v14, &v56);
    IPC::Connection::sendSyncMessage(v15, v64, (uint64_t *)&v63, 0, (uint64_t)&v61, INFINITY);
    if (v62)
      break;
    LOBYTE(v57[0]) = 0;
    v60 = 0;
    a3 = v61;
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(v61, &v65);
    if (!v66)
    {
      LOBYTE(v50) = 0;
      LOBYTE(v53) = 0;
      goto LABEL_27;
    }
    IPC::Decoder::decode<WTF::String>(a3, &v67);
    if (!v68)
    {
      v27 = 0;
      LOBYTE(v50) = 0;
      LOBYTE(v53) = 0;
      goto LABEL_31;
    }
    v21 = a3[1];
    v20 = (WTF::StringImpl *)*a3;
    v22 = ((a3[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a3;
    if (v21 < v22 || v21 - v22 <= 1)
    {
      v42 = 0;
      v43 = 0;
      *a3 = 0;
      a3[1] = 0;
      v44 = a3[3];
      if (!v44)
        goto LABEL_57;
      goto LABEL_65;
    }
    v23 = (unsigned __int16 *)((char *)v20 + v22);
    a3[2] = (uint64_t)(v23 + 1);
    if (!v20)
    {
      v42 = v21;
      v43 = 0;
      goto LABEL_57;
    }
    v24 = (((unint64_t)v23 + 5) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v20;
    if (v21 < v24 || v21 - v24 <= 3)
    {
      *a3 = 0;
      a3[1] = 0;
      v46 = a3[3];
      if (v46)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
          v20 = (WTF::StringImpl *)*a3;
          v48 = a3[1];
          v49 = a3[3];
          *a3 = 0;
          a3[1] = 0;
          if (v49)
          {
            if (v48)
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v49 + 16))(v49, v20);
          }
        }
      }
      goto LABEL_61;
    }
    v15 = *v23;
    v14 = (IPC::Encoder *)*(unsigned int *)(((unint64_t)v23 + 5) & 0xFFFFFFFFFFFFFFFCLL);
    a3[2] = (((unint64_t)v23 + 5) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if (v66)
    {
      v26 = (uint64_t *)v65;
      v65 = 0;
      v7 = v67;
      v67 = 0;
      v50 = v26;
      v51 = (uint64_t *)v7;
      LOWORD(v52) = v15;
      HIDWORD(v52) = (_DWORD)v14;
      v27 = 1;
      goto LABEL_22;
    }
    __break(1u);
LABEL_63:
    v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v16 = WebKit::WebProcess::WebProcess(v47);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v16;
    *(_BYTE *)(v15 + 2488) = 1;
  }
  if (v62 == 1)
  {
    LOBYTE(v50) = (_BYTE)v61;
    v18 = 1;
    v55 = 1;
    v19 = 1;
    goto LABEL_38;
  }
  while (1)
  {
    v44 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_65:
    if (v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      v43 = *a3;
      v42 = a3[1];
    }
    else
    {
      v42 = 0;
      v43 = 0;
    }
LABEL_57:
    *a3 = 0;
    a3[1] = 0;
    v45 = a3[3];
    if (v45 && v42)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43, v42);
LABEL_61:
    v27 = 0;
    LOBYTE(v50) = 0;
LABEL_22:
    LOBYTE(v53) = v27;
    if (v68)
    {
      v28 = v67;
      v67 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v20);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
LABEL_31:
    if (v66)
    {
      v33 = v65;
      v65 = 0;
      if (v33)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v33, v20);
    }
    if (!v27)
      break;
    a3 = v50;
    v50 = 0;
    v51 = 0;
    v58 = v15;
    v59 = (int)v14;
    v60 = 1;
    std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v50, v20);
    if (!v62)
    {
      v18 = 0;
      v34 = v61;
      v61 = 0;
      v57[0] = 0;
      v57[1] = 0;
      v50 = v34;
      v51 = a3;
      v52 = v7;
      v53 = v15;
      v54 = (int)v14;
      goto LABEL_37;
    }
  }
LABEL_27:
  v29 = (WTF::StringImpl *)*a3;
  v30 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v31 = a3[3];
  if (v31 && v30)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v31 + 16))(v31, v29);
  std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v50, v29);
  LOBYTE(v50) = 13;
  v18 = 1;
LABEL_37:
  v55 = v18;
  std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, v32);
  v19 = v62;
  if (v62 != -1)
LABEL_38:
    ((void (*)(WTF::DeferrableRefCountedBase **, uint64_t **))off_1E34E6B88[v19])(v57, &v61);
  v36 = v63;
  v63 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v35);
    WTF::fastFree(v37, v38);
  }
  if (v18)
    goto LABEL_42;
  v51 = 0;
  v52 = 0;
  v40 = *a4;
  *a4 = v7;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v35);
    else
      *(_DWORD *)v40 -= 2;
  }
  *a5 = v15;
  *a6 = (_DWORD)v14;
  if (!a3)
  {
LABEL_42:
    *a7 = 0;
LABEL_43:
    ((void (*)(WTF::DeferrableRefCountedBase **, uint64_t **))off_1E34E6B58[v18])(v57, &v50);
    goto LABEL_44;
  }
  v57[0] = (WTF::DeferrableRefCountedBase *)a3;
  WebKit::convertToUint8Array(v57, a7);
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)a3, v41);
  v18 = v55;
  if (v55 != -1)
    goto LABEL_43;
LABEL_44:
  result = (unsigned int *)v56;
  v56 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v39);
  return result;
}

unsigned int *WebKit::convertToSharedBuffer<JSC::GenericTypedArrayView<JSC::Uint8Adaptor> *>(_QWORD *a1, JSC::ArrayBufferView *this)
{
  unsigned int *result;
  uint64_t v5;

  JSC::ArrayBufferView::baseAddress(this);
  JSC::ArrayBufferView::byteLength(this);
  result = WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>(&v5);
  *a1 = v5;
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::convertToUint8Array@<X0>(WTF::DeferrableRefCountedBase **a1@<X0>, _QWORD *a2@<X8>)
{
  WTF::DeferrableRefCountedBase *result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  result = *a1;
  if (result
    && (result = (WTF::DeferrableRefCountedBase *)WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(result), v6))
  {
    if (*(_BYTE *)(v6 + 64) && (v4 = *(_QWORD *)(v6 + 32)) != 0)
      v5 = *(_QWORD *)(v4 + 32);
    else
      v5 = *(_QWORD *)(v6 + 48);
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create(&v6, 0, v5, 1, a2);
    result = (WTF::DeferrableRefCountedBase *)v6;
    v6 = 0;
    if (result)
      return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDMSession::releaseKeys(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  WebKit::WebProcess *v11;
  IPC::Encoder *v12;

  v1 = *(_QWORD *)(this + 24);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = this;
    {
      v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v3 = WebKit::WebProcess::WebProcess(v11);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
    }
    v4 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v3) + 24);
    v5 = *(_QWORD *)(v2 + 32);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 1112;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v12 = (IPC::Encoder *)v6;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
    v8 = v12;
    v12 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    this = *(_QWORD *)(v2 + 56);
    if (this)
    {
      *(_QWORD *)(v2 + 56) = 0;
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)this, (WTF::StringImpl *)v7);
    }
  }
  return this;
}

BOOL WebKit::RemoteLegacyCDMSession::update(WTF::DeferrableRefCountedBase *a1, JSC::ArrayBufferView *a2, WTF::DeferrableRefCountedBase **a3, _WORD *a4, _DWORD *a5)
{
  int v5;
  __int16 v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v12;
  WebKit::WebProcess *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  int v27;
  int v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::DeferrableRefCountedBase *v37;
  int v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  int v42;
  void *v43;
  unsigned int *v44;
  void *v46;
  WTF::DeferrableRefCountedBase *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WebKit::WebProcess *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  WTF::DeferrableRefCountedBase *v57;
  char v58;
  WTF::DeferrableRefCountedBase *v59;
  __int16 v60;
  int v61;
  int v62;
  WebCore::FragmentedSharedBuffer *v63;
  WTF::DeferrableRefCountedBase *v64;
  int v65;
  IPC::Encoder *v66;
  WTF::DeferrableRefCountedBase *v67;
  char v68;

  v7 = *((_QWORD *)a1 + 3);
  if (!v7)
    return 0;
  v8 = 0;
  if (a2 && *(_QWORD *)(v7 + 8))
  {
    v12 = (unint64_t)a1;
    WebKit::convertToSharedBuffer<JSC::GenericTypedArrayView<JSC::Uint8Adaptor> *>(&v63, a2);
    {
      v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v53 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v13 = WebKit::WebProcess::WebProcess(v53);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
    }
    v14 = *(uint64_t **)(WebKit::WebProcess::ensureGPUProcessConnection(v13) + 24);
    v15 = *(_QWORD *)(v12 + 32);
    v67 = 0;
    IPC::Connection::createSyncMessageEncoder(3629, v15, (uint64_t *)&v67, (uint64_t *)&v66);
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v66, &v63);
    IPC::Connection::sendSyncMessage((uint64_t)v14, (uint64_t)v67, (uint64_t *)&v66, 0, (uint64_t)&v64, INFINITY);
    v16 = v65;
    if (v65)
    {
      if (v65 == 1)
      {
        LOBYTE(v57) = (_BYTE)v64;
LABEL_33:
        v62 = v16;
        v38 = v16;
      }
      else
      {
        while (1)
        {
          v34 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_63:
          if (v17)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v18);
LABEL_28:
          v28 = 0;
          v56 = 0;
LABEL_29:
          v23 = (char *)*v14;
          v35 = v14[1];
          *v14 = 0;
          v14[1] = 0;
          v36 = v14[3];
          if (v36 && v35)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v36 + 16))(v36, v23);
LABEL_30:
          if (!v28)
            break;
          if (!v65)
          {
            v37 = v64;
            v64 = 0;
            v57 = v37;
            LOBYTE(v14) = v56;
            v58 = v56;
            v59 = (WTF::DeferrableRefCountedBase *)v12;
            v60 = v6;
            v61 = v5;
            goto LABEL_33;
          }
        }
        LOBYTE(v57) = 13;
        v16 = 1;
        v62 = 1;
        v38 = v65;
        if (v65 == -1)
        {
LABEL_35:
          v39 = v66;
          v66 = 0;
          if (v39)
          {
            IPC::Encoder::~Encoder(v39, v23);
            WTF::fastFree(v40, v41);
          }
          if (v16)
          {
            v8 = 0;
            v42 = 1;
          }
          else
          {
            v59 = 0;
            *a4 = v6;
            *a5 = v5;
            if (v12)
            {
              v67 = (WTF::DeferrableRefCountedBase *)v12;
              WebKit::convertToUint8Array(&v67, &v64);
              v47 = *a3;
              *a3 = v64;
              if (v47)
              {
                if (*(_DWORD *)v47 == 1)
                  JSC::ArrayBufferView::operator delete();
                else
                  --*(_DWORD *)v47;
              }
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v12, v46);
              v42 = v62;
              v8 = v14 != 0;
              if (v62 == -1)
                goto LABEL_40;
            }
            else
            {
              v42 = 0;
              v8 = v14 != 0;
            }
          }
          ((void (*)(WTF::DeferrableRefCountedBase **, WTF::DeferrableRefCountedBase **))off_1E34E6B68[v42])(&v64, &v57);
LABEL_40:
          v44 = (unsigned int *)v63;
          v63 = 0;
          if (v44)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v44, v43);
          return v8;
        }
      }
      ((void (*)(char *, WTF::DeferrableRefCountedBase **))off_1E34E6B88[v38])(&v68, &v64);
      goto LABEL_35;
    }
    v14 = (uint64_t *)v64;
    v17 = *((_QWORD *)v64 + 1);
    v18 = *(_QWORD *)v64;
    v19 = *((_QWORD *)v64 + 2) - *(_QWORD *)v64;
    if (v17 <= v19)
    {
      v30 = 0;
      v31 = 0;
      *(_QWORD *)v64 = 0;
      v14[1] = 0;
      v32 = v14[3];
      if (v32)
      {
        if (v17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
          v31 = *v14;
          v30 = v14[1];
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
      }
    }
    else
    {
      v20 = (unsigned __int8 *)(v18 + v19);
      *((_QWORD *)v64 + 2) = v20 + 1;
      if (v18)
      {
        v21 = *v20;
        if (v21 < 2)
        {
          v12 = v21 != 0;
          IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(v14, &v57);
          if (!v58)
            goto LABEL_28;
          v22 = v14[1];
          v23 = (char *)*v14;
          v24 = ((v14[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *v14;
          if (v22 < v24 || v22 - v24 <= 1)
          {
            v48 = 0;
            v49 = 0;
            *v14 = 0;
            v14[1] = 0;
            v50 = v14[3];
            if (v50)
            {
              if (v22)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
                v49 = *v14;
                v48 = v14[1];
              }
              else
              {
                v48 = 0;
                v49 = 0;
              }
            }
          }
          else
          {
            v25 = &v23[v24];
            v14[2] = (uint64_t)(v25 + 2);
            if (v23)
            {
              v56 = v12;
              v26 = ((unint64_t)(v25 + 5) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v23;
              if (v22 >= v26 && v22 - v26 > 3)
              {
                v27 = 0;
                v6 = *(_WORD *)v25;
                v5 = *(_DWORD *)((unint64_t)(v25 + 5) & 0xFFFFFFFFFFFFFFFCLL);
                v14[2] = ((unint64_t)(v25 + 5) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                v12 = (unint64_t)v57;
                v57 = 0;
                v28 = 1;
                goto LABEL_20;
              }
              *v14 = 0;
              v14[1] = 0;
              v52 = v14[3];
              if (v52 && v22)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
                v56 = 0;
                v23 = (char *)*v14;
                v54 = v14[1];
                v55 = v14[3];
                v27 = 1;
                *v14 = 0;
                v14[1] = 0;
                if (v55)
                {
                  v28 = 0;
                  if (v54)
                  {
                    (*(void (**)(uint64_t, char *))(*(_QWORD *)v55 + 16))(v55, v23);
                    v56 = 0;
                    v28 = 0;
                  }
                }
                else
                {
                  v28 = 0;
                }
LABEL_20:
                if (v58)
                {
                  v29 = (unsigned int *)v57;
                  v57 = 0;
                  if (v29)
                    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v29, v23);
                }
                if (v27)
                  goto LABEL_29;
                goto LABEL_30;
              }
LABEL_60:
              v56 = 0;
              v28 = 0;
              v27 = 1;
              goto LABEL_20;
            }
            v48 = v22;
            v49 = 0;
          }
          *v14 = 0;
          v14[1] = 0;
          v51 = v14[3];
          if (v51 && v48)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49, v48);
          goto LABEL_60;
        }
LABEL_27:
        *v14 = 0;
        v14[1] = 0;
        v34 = v14[3];
        if (v34)
          goto LABEL_63;
        goto LABEL_28;
      }
      v30 = v17;
      v31 = 0;
    }
    v17 = 0;
    v18 = 0;
    *v14 = 0;
    v14[1] = 0;
    v33 = v14[3];
    if (v33)
    {
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
        v18 = *v14;
        v17 = v14[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_27;
  }
  return v8;
}

uint64_t WebKit::RemoteLegacyCDMSession::cachedKeyForKeyID@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, WTF **a4@<X8>)
{
  uint64_t v5;
  WebCore::FragmentedSharedBuffer *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  void *v23;
  uint64_t *v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  void *v28;
  const WTF::StringImpl *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  WTF **v34;
  int j;
  uint64_t v36;
  WTF **v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  WebKit::WebProcess *v48;
  unsigned int *v49;
  WTF::DeferrableRefCountedBase **v50;
  WTF::StringImpl **v51;
  uint64_t *v52;
  WebCore::FragmentedSharedBuffer *v53;
  int v54;
  WebCore::FragmentedSharedBuffer *v55;
  char v56;
  uint64_t *v57;
  int v58;
  IPC::Encoder *v59;
  uint64_t v60;

  v5 = *(_QWORD *)(this + 24);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    *a4 = 0;
    return this;
  }
  v7 = (WebCore::FragmentedSharedBuffer *)this;
  v8 = (uint64_t *)(this + 56);
  v9 = *(_QWORD *)(this + 56);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = *((_DWORD *)*a2 + 4);
    if (v11 >= 0x100)
      v12 = v11 >> 8;
    else
      v12 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v12 = i + v14)
    {
      v14 = v12 & v10;
      this = *(_QWORD *)(v9 + 16 * v14);
      if (this != -1)
      {
        if (!this)
        {
          v15 = *v8;
          if (!*v8)
            goto LABEL_21;
          v16 = v15 + 16 * *(unsigned int *)(v15 - 4);
          goto LABEL_16;
        }
        this = WTF::equal((WTF *)this, *a2, a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v16 = v9 + 16 * v14;
    v15 = *v8;
    if (!*v8)
      goto LABEL_17;
LABEL_16:
    v15 += 16 * *(unsigned int *)(v15 - 4);
LABEL_17:
    if (v15 != v16)
    {
      v17 = *(WTF **)(v16 + 8);
      if (v17)
        *(_DWORD *)v17 += 2;
      *a4 = v17;
      return this;
    }
  }
LABEL_21:
  {
    v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v18 = WebKit::WebProcess::WebProcess(v48);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v18;
  }
  v19 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v18) + 24);
  v20 = *((_QWORD *)v7 + 4);
  v60 = 0;
  IPC::Connection::createSyncMessageEncoder(3627, v20, &v60, (uint64_t *)&v59);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v59, (uint64_t *)a2);
  IPC::Connection::sendSyncMessage(v19, v60, (uint64_t *)&v59, 0, (uint64_t)&v57, INFINITY);
  if (v58)
  {
    if (v58 == 1)
    {
      LOBYTE(v52) = (_BYTE)v57;
      v21 = 1;
      v54 = 1;
      v22 = 1;
LABEL_30:
      ((void (*)(WebCore::FragmentedSharedBuffer **, uint64_t **))off_1E34E6B88[v22])(&v55, &v57);
      goto LABEL_31;
    }
    goto LABEL_75;
  }
  LOBYTE(v55) = 0;
  v56 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(v57, (unsigned int *)&v55);
  if (v56)
  {
    v22 = v58;
    if (!v58)
    {
      v21 = 0;
      v24 = v57;
      v57 = 0;
      v7 = v55;
      v52 = v24;
      v53 = v55;
      v54 = 0;
      goto LABEL_30;
    }
LABEL_75:
    v49 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t)WebKit::RemoteLegacyCDMSession::sendMessage(v49, v50, v51);
  }
  LOBYTE(v52) = 13;
  v21 = 1;
  v54 = 1;
  v22 = v58;
  if (v58 != -1)
    goto LABEL_30;
LABEL_31:
  v25 = v59;
  v59 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v23);
    WTF::fastFree(v26, v27);
  }
  if (v21 || (v53 = 0, !v7))
  {
    *a4 = 0;
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34E6B78[v21])(&v57, &v52);
  }
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(v7);
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v28);
  v30 = *v8;
  if (*v8
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v8),
        (v30 = *v8) != 0))
  {
    v31 = *(_DWORD *)(v30 - 8);
  }
  else
  {
    v31 = 0;
  }
  v32 = *((_DWORD *)*a2 + 4);
  if (v32 >= 0x100)
    v33 = v32 >> 8;
  else
    v33 = WTF::StringImpl::hashSlowCase(*a2);
  v34 = 0;
  for (j = 1; ; ++j)
  {
    v36 = v33 & v31;
    v37 = (WTF **)(v30 + 16 * v36);
    v38 = *v37;
    if (*v37 == (WTF *)-1)
    {
      v34 = (WTF **)(v30 + 16 * v36);
      goto LABEL_49;
    }
    if (!v38)
    {
      if (v34)
      {
        *v34 = 0;
        v34[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        v37 = v34;
      }
      WTF::String::operator=(v37, (WTF::StringImpl *)a2);
      v39 = *a4;
      if (*a4)
        *(_DWORD *)v39 += 2;
      this = (uint64_t)v37[1];
      v37[1] = v39;
      if (this)
        this = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)this);
      v40 = *v8;
      if (*v8)
        v41 = *(_DWORD *)(v40 - 12) + 1;
      else
        v41 = 1;
      *(_DWORD *)(v40 - 12) = v41;
      v44 = *v8;
      if (*v8)
        v45 = *(_DWORD *)(v44 - 12);
      else
        v45 = 0;
      v46 = (*(_DWORD *)(v44 - 16) + v45);
      v47 = *(unsigned int *)(v44 - 4);
      if (v47 > 0x400)
      {
        if (v47 > 2 * v46)
          goto LABEL_69;
      }
      else if (3 * v47 > 4 * v46)
      {
        goto LABEL_69;
      }
      this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v8);
      goto LABEL_69;
    }
    if (WTF::equal(v38, *a2, v29))
      break;
LABEL_49:
    v33 = j + v36;
  }
  v42 = (uint64_t *)(v30 + 16 * v36 + 8);
  v43 = *a4;
  if (*a4)
    *(_DWORD *)v43 += 2;
  this = *v42;
  *v42 = (uint64_t)v43;
  if (this)
    this = WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)this);
LABEL_69:
  v21 = v54;
  if (v54 != -1)
    return ((uint64_t (*)(uint64_t **, uint64_t **))off_1E34E6B78[v21])(&v57, &v52);
  return this;
}

unsigned int *WebKit::RemoteLegacyCDMSession::sendMessage(unsigned int *result, WTF::DeferrableRefCountedBase **a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::DeferrableRefCountedBase *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::DeferrableRefCountedBase *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;

  v3 = *((_QWORD *)result + 5);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = *a2;
      if (*a2)
      {
        *a2 = 0;
        v14 = v6;
        WebKit::convertToUint8Array(&v14, &v15);
        v7 = v15;
        v8 = *a3;
        if (*a3)
          *(_DWORD *)v8 += 2;
        v13 = v8;
        (*(void (**)(uint64_t, _DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, v7, &v13);
        v10 = v13;
        v13 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
          {
            WTF::StringImpl::destroy(v10, v9);
            if (!v7)
              return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v9);
LABEL_17:
            if (*v7 == 1)
              JSC::ArrayBufferView::operator delete();
            else
              --*v7;
            return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v9);
          }
          *(_DWORD *)v10 -= 2;
        }
        if (!v7)
          return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v9);
        goto LABEL_17;
      }
      v11 = *a3;
      if (*a3)
        *(_DWORD *)v11 += 2;
      v16 = v11;
      (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, 0, &v16);
      result = (unsigned int *)v16;
      v16 = 0;
      if (result)
      {
        if (*result == 2)
          return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
        else
          *result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteAudioSession::routeSharingPolicy(WebKit::RemoteAudioSession *this)
{
  return *((unsigned __int8 *)this + 114);
}

_BYTE *WebKit::RemoteAudioSession::routingContextUID@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  _DWORD *v4;

  v2 = this;
  if (this[192]
    || (this = (_BYTE *)WebKit::RemoteAudioSession::ensureConnection((WebKit::RemoteAudioSession *)this), v2[192]))
  {
    v4 = (_DWORD *)*((_QWORD *)v2 + 15);
    if (v4)
      *v4 += 2;
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return this;
}

_BYTE *WebKit::RemoteAudioSession::sampleRate(_BYTE *this)
{
  _BYTE *v1;

  v1 = this;
  if (!this[192])
  {
    this = (_BYTE *)WebKit::RemoteAudioSession::ensureConnection((WebKit::RemoteAudioSession *)this);
    if (!v1[192])
      __break(1u);
  }
  return this;
}

uint64_t WebKit::RemoteAudioSession::bufferSize(WebKit::RemoteAudioSession *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 192))
    return *((_QWORD *)this + 17);
  result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((_BYTE *)this + 192))
    return *((_QWORD *)this + 17);
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::numberOfOutputChannels(WebKit::RemoteAudioSession *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 192))
    return *((_QWORD *)this + 18);
  result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((_BYTE *)this + 192))
    return *((_QWORD *)this + 18);
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::maximumNumberOfOutputChannels(WebKit::RemoteAudioSession *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 192))
    return *((_QWORD *)this + 19);
  result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((_BYTE *)this + 192))
    return *((_QWORD *)this + 19);
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::isMuted(WebKit::RemoteAudioSession *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 192))
    return *((unsigned __int8 *)this + 168);
  result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((_BYTE *)this + 192))
    return *((unsigned __int8 *)this + 168);
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::clearInterruptionFlagForTesting(uint64_t this)
{
  *(_BYTE *)(this + 216) = 0;
  return this;
}

uint64_t WebKit::RemoteAudioSession::isActive(WebKit::RemoteAudioSession *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 192))
    return *((unsigned __int8 *)this + 169);
  result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((_BYTE *)this + 192))
    return *((unsigned __int8 *)this + 169);
  __break(1u);
  return result;
}

unsigned int **WebCore::AudioSession::setRoutingArbitrationClient(uint64_t a1, unsigned int **a2)
{
  return WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 32), a2);
}

uint64_t WebKit::RemoteAudioSession::sceneIdentifier(WebKit::RemoteAudioSession *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 192))
    return (uint64_t)this + 176;
  result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((_BYTE *)this + 192))
    return (uint64_t)this + 176;
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteAudioSession::soundStageSize(WebKit::RemoteAudioSession *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 192))
    return *((unsigned __int8 *)this + 184);
  result = WebKit::RemoteAudioSession::ensureConnection(this);
  if (*((_BYTE *)this + 192))
    return *((unsigned __int8 *)this + 184);
  __break(1u);
  return result;
}

unsigned __int8 *WebKit::RemoteAudioSession::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[11]);
}

unsigned __int8 *WebKit::RemoteAudioSession::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioSession,(WTF::DestructionThread)0>(this[11], a2);
}

uint64_t WebKit::RemoteAudioSession::controlBlock(WebKit::RemoteAudioSession *this)
{
  return *((_QWORD *)this + 11);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteAudioSession::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[3]);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteAudioSession::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioSession,(WTF::DestructionThread)0>(this[3], a2);
}

void WebKit::RemoteCDM::~RemoteCDM(WebKit::RemoteCDM *this, void *a2)
{
  WebKit::RemoteCDM::~RemoteCDM(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  char *v3;
  void *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (char *)this + 32;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v4);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  WebCore::CDMPrivate::~CDMPrivate(this);
}

uint64_t WebKit::RemoteCDM::supportedInitDataTypes@<X0>(WebKit::RemoteCDM *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 32);
}

uint64_t WebKit::RemoteCDM::supportedRobustnesses@<X0>(WebKit::RemoteCDM *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 48);
}

uint64_t WebKit::RemoteCDM::supportsServerCertificates(WebKit::RemoteCDM *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t WebKit::RemoteCDM::supportsSessions(WebKit::RemoteCDM *this)
{
  return *((unsigned __int8 *)this + 65);
}

unsigned int *WebKit::RemoteCDMInstance::setClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstance::clearClient(WebKit::RemoteCDMInstance *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteCDMInstance::implementationType(WebKit::RemoteCDMInstance *this)
{
  return 3;
}

uint64_t WebKit::RemoteCDMInstance::keySystem(WebKit::RemoteCDMInstance *this)
{
  return (uint64_t)this + 48;
}

uint64_t WebCore::CDMInstance::setHDCPStatus()
{
  return 0;
}

unsigned int *WebKit::RemoteCDMInstanceSession::setClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstanceSession::clearClient(WebKit::RemoteCDMInstanceSession *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebKit::RemoteCDMInstanceSession::setClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebKit::RemoteCDMInstanceSession::clearClient(WebKit::RemoteCDMInstanceSession *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDMSession::type(WebKit::RemoteLegacyCDMSession *this)
{
  return 4;
}

uint64_t WebKit::RemoteLegacyCDMSession::sessionId(WebKit::RemoteLegacyCDMSession *this)
{
  return (uint64_t)this + 48;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages25GPUConnectionToWebProcess18EnsureAudioSessionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteAudioSessionProxy14TryToSetActiveEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14RemoteCDMProxy14CreateInstanceEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages21RemoteCDMFactoryProxy17SupportsKeySystemEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages21RemoteCDMFactoryProxy9CreateCDMEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;

  v3 = (uint64_t)a2 + 16;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 32, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v4);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteCDMInstanceProxy13CreateSessionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages20RemoteLegacyCDMProxy16SupportsMIMETypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages20RemoteLegacyCDMProxy13CreateSessionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMFactoryProxy17SupportsKeySystemEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMFactoryProxy9CreateCDMEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::DeferrableRefCountedBase *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMSessionProxy18GenerateKeyRequestEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMSessionProxy6UpdateEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)a2[2];
  a2[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages27RemoteLegacyCDMSessionProxy17CachedKeyForKeyIDEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioSession,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WebKit::RemoteAudioSession *v6;
  BOOL v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *((_QWORD *)v2 + 2);
    v6 = (WebKit::RemoteAudioSession *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    WebKit::RemoteAudioSession::~RemoteAudioSession(v6);
    this = (unsigned __int8 *)WTF::fastFree(v9, v10);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSession::configurationChanged(WebKit::RemoteAudioSessionConfiguration &&)::$_0,void,WebCore::AudioSessionConfigurationChangeObserver &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (**(_BYTE **)(result + 8))
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  if (**(_BYTE **)(v3 + 24))
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
  if (**(_BYTE **)(v3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMProxy::GetSupportedConfiguration,WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>>(WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E6BD0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMProxy::GetSupportedConfiguration,WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>>(WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6BD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMProxy::GetSupportedConfiguration,WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>>(WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int16 v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int16 v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int16 v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  char v84;

  v8 = (uint64_t *)(a1 + 8);
  if (!a2 || (v9 = a2, (v10 = *a2) == 0))
  {
LABEL_15:
    LOBYTE(v64) = 0;
    v73 = 0;
    WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(v8, (uint64_t)&v64);
    v26 = (uint64_t *)&v64;
    return std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, v25);
  }
  v11 = a2[1];
  if (v11 <= a2[2] - v10)
  {
    v34 = 0;
    v35 = 0;
    *v9 = 0;
    v9[1] = 0;
    v36 = v9[3];
    if (v36)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v36 + 16))(v36, v10, v11);
        v34 = 0;
        v38 = *v9;
        v39 = v9[1];
        v40 = v9[3];
        *v9 = 0;
        v9[1] = 0;
        v35 = 0;
        if (v40 && v39)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38, v39);
          v35 = *v9;
          v34 = v9[1];
        }
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
    }
    goto LABEL_22;
  }
  v12 = (_BYTE *)a2[2];
  a2[2] = (uint64_t)(v12 + 1);
  v13 = *v12;
  if (v13 >= 2)
  {
    v34 = v11;
    v35 = v10;
LABEL_22:
    *v9 = 0;
    v9[1] = 0;
    v37 = v9[3];
    if (v37 && v34)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
    goto LABEL_13;
  }
  if (!*v12)
  {
    LOBYTE(v75) = 0;
    v84 = 0;
    LOBYTE(v64) = 0;
    v73 = 0;
    v74 = 1;
    std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, a2);
    LOBYTE(v52) = 0;
    v62 = 0;
    goto LABEL_9;
  }
  IPC::Decoder::decode<WebCore::CDMKeySystemConfiguration>(a2, (uint64_t)&v75);
  if (!v84)
  {
    std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v14);
LABEL_13:
    v27 = *v9;
    v28 = v9[1];
    *v9 = 0;
    v9[1] = 0;
    v29 = v9[3];
    if (v29 && v28)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
      v31 = *v9;
      v32 = v9[1];
      v33 = v9[3];
      *v9 = 0;
      v9[1] = 0;
      if (v33 && v32)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
    }
    else
    {
      *v9 = 0;
      v9[1] = 0;
    }
    goto LABEL_15;
  }
  v15 = *((_QWORD *)&v75 + 1);
  v50 = v75;
  v75 = 0u;
  v16 = v76;
  v43 = HIDWORD(v76);
  v76 = 0;
  v17 = v77;
  v77 = 0;
  v51 = v78;
  v44 = v8;
  v18 = HIDWORD(v78);
  v78 = 0;
  v19 = v79;
  v79 = 0;
  v4 = v80;
  v20 = HIDWORD(v80);
  v80 = 0;
  v3 = v81;
  v70 = v81;
  v41 = v82;
  v42 = v17;
  v82 = 0;
  v21 = v83;
  LODWORD(v9) = HIDWORD(v83);
  v83 = 0;
  v73 = 1;
  v74 = 1;
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v14);
  v64 = 0u;
  v52 = v50;
  v53 = v15;
  v49 = v15;
  v65 = 0;
  v45 = v16;
  v46 = v18;
  v54 = __PAIR64__(v43, v16);
  v6 = v43;
  v7 = v42;
  v66 = 0;
  v55 = v42;
  v67 = 0;
  v56 = __PAIR64__(v18, v51);
  v8 = v44;
  v68 = 0;
  v47 = v19;
  v57 = v19;
  v5 = v21;
  v2 = v41;
  v69 = 0;
  v58 = __PAIR64__(v20, v4);
  v48 = v20;
  v59 = v3;
  v71 = 0;
  v60 = v41;
  v72 = 0;
  v61 = __PAIR64__(v9, v5);
  v62 = 1;
LABEL_9:
  v63 = 1;
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v22);
  LOBYTE(v64) = 0;
  v73 = 0;
  if (v13)
  {
    v23 = v52;
    v52 = 0;
    v53 = 0;
    *(_QWORD *)&v64 = v23;
    *((_QWORD *)&v64 + 1) = v49;
    v54 = 0;
    v65 = __PAIR64__(v6, v45);
    v55 = 0;
    v66 = v7;
    v56 = 0;
    v67 = __PAIR64__(v46, v51);
    v57 = 0;
    v68 = v47;
    v58 = 0;
    v69 = __PAIR64__(v48, v4);
    v70 = v3;
    v60 = 0;
    v71 = v2;
    v61 = 0;
    v72 = __PAIR64__(v9, v5);
    v73 = 1;
  }
  WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(v8, (uint64_t)&v64);
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v24);
  v26 = &v52;
  return std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, v25);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::RemoteCDMConfiguration>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v3);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::InitializeWithConfiguration,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E6BF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::InitializeWithConfiguration,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6BF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::InitializeWithConfiguration,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, _QWORD *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2
    && *a2
    && (v3 = IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::SetServerCertificate,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E6C20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::SetServerCertificate,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6C20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceProxy::SetServerCertificate,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)>>(WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, _QWORD *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2
    && *a2
    && (v3 = IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0)#1},void,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E6C48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0)#1},void,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6C48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0)#1},void,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  BOOL v2;
  BOOL v3;
  uint64_t *v4;
  _QWORD *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  WebCore::SharedBuffer *v24;
  void *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  BOOL v37;
  BOOL v38;
  char v39;
  unsigned int *v40;
  unsigned __int8 v41;
  WTF::StringImpl *v42;
  char v43;

  v4 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, &v40);
  if (!v41)
  {
    LOBYTE(v35) = 0;
    v39 = 0;
    goto LABEL_18;
  }
  v6 = IPC::Decoder::decode<WTF::String>(a2, &v42);
  if (!v43)
  {
    v16 = 0;
    LOBYTE(v35) = 0;
    v39 = 0;
    goto LABEL_22;
  }
  v8 = a2[1];
  v7 = (WTF::StringImpl *)*a2;
  v9 = a2[2] - *a2;
  if (v8 <= v9)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
LABEL_36:
    v8 = 0;
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v6 = (_QWORD *)a2[3];
    if (!v6)
      goto LABEL_37;
    goto LABEL_44;
  }
  v10 = (unsigned __int8 *)v7 + v9;
  a2[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    v12 = v8;
    v13 = 0;
    goto LABEL_36;
  }
  v11 = *v10;
  if (v11 >= 2)
    goto LABEL_37;
  v2 = v11 != 0;
  if (v8 <= v10 + 1 - (unsigned __int8 *)v7)
  {
    v29 = 0;
    v30 = 0;
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      v29 = 0;
      v7 = (WTF::StringImpl *)*a2;
      v33 = a2[1];
      v34 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v30 = 0;
      if (v34)
      {
        if (v33)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v34 + 16))(v34, v7);
          v30 = *a2;
          v29 = a2[1];
        }
      }
    }
    goto LABEL_41;
  }
  a2[2] = (uint64_t)(v10 + 2);
  v12 = v10[1];
  if (v12 >= 2)
  {
    v29 = v8;
    v30 = (uint64_t)v7;
LABEL_41:
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32 && v29)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v32 + 16))(v32, v30, v29);
    goto LABEL_42;
  }
  v13 = v41;
  if (!v41)
  {
    __break(1u);
LABEL_44:
    if (v12)
    {
      (*(void (**)(_QWORD *, uint64_t, unint64_t))(*v6 + 16))(v6, v13, v12);
      v7 = (WTF::StringImpl *)*a2;
      v8 = a2[1];
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
LABEL_37:
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28 && v8)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v28 + 16))(v28, v7);
LABEL_42:
    v16 = 0;
    LOBYTE(v35) = 0;
    goto LABEL_12;
  }
  v3 = (_DWORD)v12 != 0;
  v14 = (WTF::StringImpl *)v40;
  v40 = 0;
  v15 = v42;
  v42 = 0;
  v35 = v14;
  v36 = v15;
  v37 = v11 != 0;
  v38 = v3;
  v16 = 1;
LABEL_12:
  v39 = v16;
  if (v43)
  {
    v17 = v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v7);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
LABEL_22:
  if (v41)
  {
    v22 = v40;
    v40 = 0;
    if (v22)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v7);
  }
  if (v16)
  {
    if (v35)
    {
      v42 = v35;
      v35 = 0;
      v23 = *v4;
      *v4 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, BOOL, BOOL))(*(_QWORD *)v23 + 16))(v23, &v42, &v36, v2, v3);
    }
    else
    {
      v24 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
      v42 = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer(v24);
      v23 = *v4;
      *v4 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v23 + 16))(v23, &v42, MEMORY[0x1E0CBF738], 0, 0);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v26 = (unsigned int *)v42;
    v42 = 0;
    if (v26)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v26, v25);
    return (unsigned int *)std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, (WTF::StringImpl *)v25);
  }
LABEL_18:
  v19 = (WTF::StringImpl *)*a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21 && v20)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v21 + 16))(v21, v19);
  std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v19);
  return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(v4);
}

unsigned int *IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSession::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(uint64_t *a1)
{
  WebCore::SharedBuffer *v2;
  uint64_t v3;
  void *v4;
  unsigned int *result;
  uint64_t v6;

  v2 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
  v6 = WebCore::SharedBuffer::SharedBuffer(v2);
  v3 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, &v6, MEMORY[0x1E0CBF738], 0, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = (unsigned int *)v6;
  v6 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v4);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String,BOOL,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>)#1},void,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E6C70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>)#1},void,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6C70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>)#1},void,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)>>::call(uint64_t a1, uint64_t *a2)
{
  BOOL v2;
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  _BOOL8 v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  int v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35[8];
  _QWORD v36[2];
  char v37;
  __int128 v38;
  char v39[8];
  unsigned int *v40;
  char v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  __int128 v48;
  char v49;
  char v50[8];
  unsigned int *v51;
  unsigned __int8 v52;
  char v53;

  v3 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>((uint64_t *)(a1 + 8));
  v5 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>((uint64_t *)(a1 + 8));
  v6 = a2[1];
  if (v6 <= a2[2] - v5)
  {
    v12 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v5, v6);
        v12 = 0;
        v32 = *a2;
        v33 = a2[1];
        v34 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v10 = 0;
        if (v34 && v33)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v33);
          v10 = (char *)*a2;
          v12 = a2[1];
        }
      }
      else
      {
        v12 = 0;
        v10 = 0;
      }
    }
LABEL_27:
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
      goto LABEL_39;
LABEL_28:
    v35[0] = 0;
    v43 = 0;
    goto LABEL_29;
  }
  v7 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v7 + 1);
  v8 = *v7;
  if (v8 >= 2)
  {
    v12 = v6;
    v10 = (char *)v5;
    goto LABEL_27;
  }
  v9 = v8 != 0;
  IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v44, a2);
  if (!v47)
    goto LABEL_28;
  IPC::Decoder::decode<std::optional<double>>(a2, &v48);
  if (!v49
    || (IPC::Decoder::decode<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>((uint64_t)v50, a2), !v53))
  {
    v9 = 0;
    v19 = 0;
    v35[0] = 0;
    v43 = 0;
    goto LABEL_22;
  }
  v12 = a2[1];
  v10 = (char *)*a2;
  v13 = a2[2] - *a2;
  if (v12 <= v13)
  {
    v27 = 0;
    v28 = 0;
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v28 = *a2;
        v27 = a2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
    goto LABEL_35;
  }
  v14 = &v10[v13];
  a2[2] = (uint64_t)(v14 + 1);
  if (!v10)
  {
    v27 = v12;
    v28 = 0;
LABEL_35:
    v12 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
        v10 = (char *)*a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v10 = 0;
      }
    }
    goto LABEL_36;
  }
  v15 = *v14;
  if (v15 >= 2)
  {
LABEL_36:
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31 && v12)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v31 + 16))(v31, v10);
    v9 = 0;
    v19 = 0;
    v35[0] = 0;
    v17 = v52;
    goto LABEL_17;
  }
  v2 = v15 != 0;
  if (!v49)
  {
    __break(1u);
LABEL_39:
    if (v12)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v11 + 16))(v11, v10);
    goto LABEL_28;
  }
  v35[0] = v9;
  LOBYTE(v36[0]) = 0;
  v37 = 0;
  if (v46)
  {
    v36[0] = v44;
    v16 = v45;
    v44 = 0;
    v45 = 0;
    v36[1] = v16;
    v37 = 1;
  }
  v38 = v48;
  v39[0] = 0;
  v41 = 0;
  v17 = v52;
  if (v52)
  {
    v39[0] = v50[0];
    v18 = v51;
    v51 = 0;
    v40 = v18;
    v41 = 1;
  }
  v42 = v2;
  v19 = 1;
LABEL_17:
  v43 = v19;
  if (v17 && v51)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v51, v10);
LABEL_22:
  if (v46)
    WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v10);
  if (v19)
  {
    v21 = *v3;
    *v3 = 0;
    (*(void (**)(uint64_t, _BOOL8, _QWORD *, __int128 *, char *, BOOL))(*(_QWORD *)v21 + 16))(v21, v9, v36, &v38, v39, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    return (unsigned int *)std::__optional_destruct_base<std::tuple<BOOL,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v35, v22);
  }
LABEL_29:
  v24 = (void *)*a2;
  v25 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v26 = a2[3];
  if (v26)
  {
    if (v25)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v26 + 16))(v26, v24);
  }
  std::__optional_destruct_base<std::tuple<BOOL,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v35, v24);
  return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(v3);
}

unsigned int *IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSession::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int *result;
  void *v3;
  _BYTE v4[8];
  unsigned int *v5;
  char v6;
  _QWORD v7[2];
  _BYTE v8[16];
  char v9;

  v8[0] = 0;
  v9 = 0;
  v7[0] = 0;
  v7[1] = 0;
  v4[0] = 0;
  v6 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD, _BYTE *, _QWORD *, _BYTE *, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0, v8, v7, v4, 0);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v6)
  {
    result = v5;
    v5 = 0;
    if (result)
      result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  }
  if (v9)
    return (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v3);
  return result;
}

_BYTE *IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = result;
  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_9;
  }
  v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v6;
    v13 = 0;
LABEL_9:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_10;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v6)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v5);
    goto LABEL_11;
  }
  if (!v9)
  {
    *result = 0;
    result[16] = 0;
    result[24] = 1;
    return result;
  }
  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5, (uint64_t)&v19);
  if (v21)
  {
    *(_QWORD *)v3 = v19;
    v11 = v20;
    v19 = 0;
    v20 = 0;
    *((_QWORD *)v3 + 1) = v11;
    v3[16] = 1;
    result = (_BYTE *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v10);
    v3[24] = 1;
    return result;
  }
LABEL_11:
  *v3 = 0;
  v3[24] = 0;
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v18)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

void IPC::Decoder::decode<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int16 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  char v20;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
  }
  else
  {
    v8 = (unsigned __int8 *)(v5 + v7);
    a2[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      LODWORD(v8) = *v8;
      if (v8 >= 2)
        goto LABEL_15;
      if (!(_DWORD)v8)
      {
        *(_BYTE *)a1 = 0;
        goto LABEL_9;
      }
      v9 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a2);
      if (v9 >= 0x100u)
      {
        v10 = v9;
        IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, (uint64_t)&v19);
        if (v20)
        {
          v8 = v19;
          *(_BYTE *)a1 = v10;
          *(_QWORD *)(a1 + 8) = v8;
          LOBYTE(v8) = 1;
LABEL_9:
          *(_BYTE *)(a1 + 16) = (_BYTE)v8;
          *(_BYTE *)(a1 + 24) = 1;
          return;
        }
      }
      goto LABEL_14;
    }
    v11 = v6;
    v12 = 0;
  }
  v6 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  v14 = a2[3];
  if (!v14)
    goto LABEL_15;
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
LABEL_14:
    v5 = *a2;
    v6 = a2[1];
    goto LABEL_15;
  }
  v6 = 0;
  v5 = 0;
LABEL_15:
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15 && v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v5);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v18 = a2[3];
  if (v18)
  {
    if (v17)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
  }
}

uint64_t std::__optional_destruct_base<std::tuple<BOOL,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v3 = *(unsigned int **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      if (v3)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
    }
    if (*(_BYTE *)(a1 + 24))
      WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E6C98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6C98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &>::call(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t *v4;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  char v31;
  __int128 v32;
  _BYTE v33[8];
  unsigned int *v34;
  char v35;
  BOOL v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  __int128 v43;
  unsigned __int8 v44;
  _BYTE v45[8];
  unsigned int *v46;
  char v47;
  char v48;

  v4 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v39, a2);
  if (!v42)
  {
    LOBYTE(v30[0]) = 0;
    v38 = 0;
    goto LABEL_20;
  }
  IPC::Decoder::decode<std::optional<double>>(a2, &v43);
  if (!v44
    || (IPC::Decoder::decode<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>((uint64_t)v45, a2), !v48))
  {
    v17 = 0;
    LOBYTE(v30[0]) = 0;
    v38 = 0;
    goto LABEL_35;
  }
  v8 = a2[1];
  v6 = (_BYTE *)*a2;
  v9 = a2[2] - *a2;
  if (v8 <= v9)
  {
    v14 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v13 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v13 = 0;
      }
    }
LABEL_25:
    v8 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v7 = a2[3];
    if (!v7)
      goto LABEL_26;
    goto LABEL_43;
  }
  v10 = &v6[v9];
  a2[2] = (uint64_t)(v10 + 1);
  if (!v6)
  {
    v14 = v8;
    v13 = 0;
    goto LABEL_25;
  }
  v11 = *v10;
  if (v11 >= 2)
    goto LABEL_26;
  v3 = v11 != 0;
  if (v8 <= v10 + 1 - v6)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
      v12 = 0;
      v6 = (_BYTE *)*a2;
      v28 = a2[1];
      v29 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v13 = 0;
      if (v29)
      {
        if (v28)
        {
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v29 + 16))(v29, v6);
          v13 = *a2;
          v12 = a2[1];
        }
      }
    }
    goto LABEL_30;
  }
  a2[2] = (uint64_t)(v10 + 2);
  v2 = v10[1];
  v12 = v8;
  v13 = (uint64_t)v6;
  if (v2 >= 5)
  {
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25 && v12)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v13, v12);
    goto LABEL_31;
  }
  v14 = v44;
  if (v44)
  {
    LOBYTE(v30[0]) = 0;
    v31 = 0;
    if (v41)
    {
      v30[0] = v39;
      v15 = v40;
      v39 = 0;
      v40 = 0;
      v30[1] = v15;
      v31 = 1;
    }
    v32 = v43;
    v33[0] = 0;
    v35 = 0;
    if (v47)
    {
      v33[0] = v45[0];
      v16 = v46;
      v46 = 0;
      v34 = v16;
      v35 = 1;
    }
    v36 = v11 != 0;
    v37 = v2;
    v17 = 1;
    goto LABEL_32;
  }
  __break(1u);
LABEL_43:
  if (v14)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v13, v14);
    v6 = (_BYTE *)*a2;
    v8 = a2[1];
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
LABEL_26:
  *a2 = 0;
  a2[1] = 0;
  v23 = a2[3];
  if (v23 && v8)
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v23 + 16))(v23, v6);
LABEL_31:
  v17 = 0;
  LOBYTE(v30[0]) = 0;
LABEL_32:
  v38 = v17;
  if (v47 && v46)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v46, v6);
LABEL_35:
  if (v41)
    WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v6);
  if (v17)
  {
    v26 = *v4;
    *v4 = 0;
    (*(void (**)(uint64_t, _QWORD *, __int128 *, _BYTE *, BOOL, _QWORD))(*(_QWORD *)v26 + 16))(v26, v30, &v32, v33, v3, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    return (unsigned int *)std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL,WebCore::CDMInstanceSessionLoadFailure>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v30, v27);
  }
LABEL_20:
  v19 = (void *)*a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21)
  {
    if (v20)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v21 + 16))(v21, v19);
  }
  std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL,WebCore::CDMInstanceSessionLoadFailure>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v30, v19);
  return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(v4);
}

unsigned int *IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSession::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int *result;
  void *v3;
  _BYTE v4[8];
  unsigned int *v5;
  char v6;
  _QWORD v7[2];
  _BYTE v8[16];
  char v9;

  v8[0] = 0;
  v9 = 0;
  v7[0] = 0;
  v7[1] = 0;
  v4[0] = 0;
  v6 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *, _QWORD *, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v1 + 16))(v1, v8, v7, v4, 0, 0);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v6)
  {
    result = v5;
    v5 = 0;
    if (result)
      result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  }
  if (v9)
    return (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v3);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<double>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,BOOL,WebCore::CDMInstanceSessionLoadFailure>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;

  if (*(_BYTE *)(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v3 = *(unsigned int **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (v3)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
    }
    if (*(_BYTE *)(a1 + 16))
      WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::CloseSession,WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E6CC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::CloseSession,WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6CC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::CloseSession,WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E6CE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6CE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>::call(uint64_t a1, uint64_t *a2)
{
  BOOL v2;
  uint64_t *v3;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  _QWORD v24[2];
  unsigned int *v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int *v31;
  char v32;

  v3 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v28);
  if (v30)
  {
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, &v31);
    if (!v32)
    {
      v13 = 0;
      LOBYTE(v24[0]) = 0;
      v27 = 0;
LABEL_16:
      v11 = 1;
LABEL_17:
      if (v30)
        WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v6);
      if (!v11)
        goto LABEL_20;
      goto LABEL_12;
    }
    v7 = a2[1];
    v6 = (char *)*a2;
    v8 = a2[2] - *a2;
    if (v7 <= v8)
    {
      v19 = 0;
      v20 = 0;
      *a2 = 0;
      a2[1] = 0;
      v21 = a2[3];
      if (v21)
      {
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
          v20 = *a2;
          v19 = a2[1];
        }
        else
        {
          v19 = 0;
          v20 = 0;
        }
      }
    }
    else
    {
      v9 = &v6[v8];
      a2[2] = (uint64_t)(v9 + 1);
      if (v6)
      {
        v10 = *v9;
        if (v10 < 2)
        {
          if (v30)
          {
            v11 = 0;
            v2 = v10 != 0;
            v24[0] = v28;
            v12 = v29;
            v28 = 0;
            v29 = 0;
            v24[1] = v12;
            v25 = v31;
            v26 = v10 != 0;
            v13 = 1;
            v27 = 1;
            goto LABEL_17;
          }
          __break(1u);
          goto LABEL_32;
        }
LABEL_26:
        *a2 = 0;
        a2[1] = 0;
        v5 = a2[3];
        if (!v5)
        {
LABEL_27:
          LOBYTE(v24[0]) = 0;
          v27 = 0;
          if (v32)
          {
            v23 = v31;
            v31 = 0;
            if (v23)
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v6);
          }
          v13 = 0;
          goto LABEL_16;
        }
LABEL_32:
        if (v7)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v6);
        goto LABEL_27;
      }
      v19 = v7;
      v20 = 0;
    }
    v7 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
        v6 = (char *)*a2;
        v7 = a2[1];
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
    }
    goto LABEL_26;
  }
  v13 = 0;
  LOBYTE(v24[0]) = 0;
  v27 = 0;
LABEL_12:
  v6 = (char *)*a2;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v16 = a2[3];
  if (v16 && v15)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v6);
LABEL_20:
  if (v13)
  {
    v17 = *v3;
    *v3 = 0;
    (*(void (**)(uint64_t, _QWORD *, unsigned int **, BOOL))(*(_QWORD *)v17 + 16))(v17, v24, &v25, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    return std::__optional_destruct_base<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v18);
  }
  else
  {
    std::__optional_destruct_base<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v6);
    return IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(v3);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSession::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  unsigned int *v3;
  unsigned int *v5;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD *, unsigned int **, _QWORD))(*(_QWORD *)v1 + 16))(v1, v6, &v5, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = v5;
  v5 = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v2);
  return WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v2);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
    WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

uint64_t IPC::Connection::send<Messages::RemoteLegacyCDMProxy::SetPlayerId>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1111;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_0,std::unique_ptr<WebCore::CDMPrivateInterface>,WebCore::LegacyCDM *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34E6D10;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_0,std::unique_ptr<WebCore::CDMPrivateInterface>,WebCore::LegacyCDM *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6D10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_0,std::unique_ptr<WebCore::CDMPrivateInterface>,WebCore::LegacyCDM *>::call(WebCore::LegacyCDM *this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  WebKit::WebProcess *v7;
  WebKit::GPUProcessConnection *v8;
  WebKit::RemoteMediaPlayerManager *v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  int v15;
  WebCore::MediaPlayer *v16;
  char v17;
  WebCore::MediaPlayer *v18;
  int v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  void *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WebKit::WebProcess *v60;
  uint64_t v61;
  uint64_t v62;
  WebKit::WebProcess *v63;
  WebCore::MediaPlayer *v64[2];
  int v65;
  uint64_t RemotePlayerId;
  char v67;
  uint64_t *v68;
  int v69;
  IPC::Encoder *v70;
  uint64_t v71;
  char v72;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || (v6 = (uint64_t *)this) == 0)
  {
    *a3 = 0;
    return;
  }
  LOBYTE(RemotePlayerId) = 0;
  v67 = 0;
  WebCore::LegacyCDM::mediaPlayer(this);
  if (v64[0])
  {
    {
      v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v63 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v7 = WebKit::WebProcess::WebProcess(v63);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
    }
    v8 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(v7);
    v9 = (WebKit::RemoteMediaPlayerManager *)WebKit::GPUProcessConnection::mediaPlayerManager(v8);
    v10 = (unsigned __int8 **)WebCore::MediaPlayer::playerPrivate(v64[0]);
    v67 = 1;
    RemotePlayerId = WebKit::RemoteMediaPlayerManager::findRemotePlayerId(v9, v10);
    v11 = (unsigned __int8 **)v64[0];
    v64[0] = 0;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v11);
  }
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v60 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v60);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v13 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v12) + 24);
  v71 = 0;
  IPC::Connection::createSyncMessageEncoder(3623, 0, &v71, (uint64_t *)&v70);
  v14 = v70;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v70, v6);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v14, (uint64_t)&RemotePlayerId);
  IPC::Connection::sendSyncMessage(v13, v71, (uint64_t *)&v70, 0, (uint64_t)&v68, INFINITY);
  v15 = v69;
  if (v69)
  {
    if (v69 == 1)
    {
      LOBYTE(v64[0]) = (_BYTE)v68;
LABEL_17:
      v65 = v15;
      v19 = v15;
LABEL_18:
      ((void (*)(char *, uint64_t **))off_1E34E6B88[v19])(&v72, &v68);
      goto LABEL_19;
    }
  }
  else
  {
    v6 = v68;
    v16 = (WebCore::MediaPlayer *)IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(v68);
    if (!v17)
    {
      v20 = (void *)*v6;
      v58 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v59 = v6[3];
      if (!v59)
        goto LABEL_65;
      goto LABEL_69;
    }
    if (!v69)
    {
      v13 = (uint64_t)v16;
      v18 = (WebCore::MediaPlayer *)v68;
      v68 = 0;
      v64[0] = v18;
      v64[1] = v16;
      goto LABEL_17;
    }
  }
  v59 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_69:
  if (v58)
  {
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v59 + 16))(v59, v20);
    v20 = (void *)*v6;
    v61 = v6[1];
    v62 = v6[3];
    *v6 = 0;
    v6[1] = 0;
    if (v62)
    {
      if (v61)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v62 + 16))(v62, v20);
    }
  }
LABEL_65:
  LOBYTE(v64[0]) = 13;
  v15 = 1;
  v65 = 1;
  v19 = v69;
  if (v69 != -1)
    goto LABEL_18;
LABEL_19:
  v21 = v70;
  v70 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v20);
    WTF::fastFree(v22, v23);
  }
  if (!v15 && v13)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
    v24 = *(unsigned int **)(v5 + 8);
    if (v24)
    {
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v26[1] = 0;
    v27 = (unsigned int *)(v26 + 1);
    *v26 = off_1E34E6998;
    v26[2] = v24;
    v26[3] = v13;
    v30 = *(_QWORD *)(v5 + 24);
    v29 = (uint64_t *)(v5 + 24);
    v28 = v30;
    if (v30
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v29),
          (v28 = *v29) != 0))
    {
      v31 = *(_DWORD *)(v28 - 8);
    }
    else
    {
      v31 = 0;
    }
    v32 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    v36 = (uint64_t *)(v28 + 16 * v35);
    v37 = *v36;
    if (*v36)
    {
      v38 = 0;
      v39 = 1;
      while (v37 != v13)
      {
        if (v37 == -1)
          v38 = v36;
        v35 = (v35 + v39) & v31;
        v36 = (uint64_t *)(v28 + 16 * v35);
        v37 = *v36;
        ++v39;
        if (!*v36)
        {
          if (v38)
          {
            *v38 = 0;
            v38[1] = 0;
            --*(_DWORD *)(*v29 - 16);
            v36 = v38;
          }
          goto LABEL_36;
        }
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v27, (uint64_t)v26);
      v49 = (unsigned int *)v26[1];
      if (v49)
      {
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 + 1, v49));
      }
      v51 = (unsigned int *)v36[1];
      v36[1] = (uint64_t)v49;
      if (v51)
      {
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          atomic_store(1u, v51);
          WTF::fastFree((WTF *)v51, v48);
        }
      }
LABEL_58:
      v15 = v65;
      *a3 = v26;
      if (v15 == -1)
        return;
      goto LABEL_59;
    }
LABEL_36:
    *v36 = v13;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v27, (uint64_t)v26);
    v41 = (unsigned int *)v26[1];
    if (v41)
    {
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
    }
    v43 = (unsigned int *)v36[1];
    v36[1] = (uint64_t)v41;
    if (v43)
    {
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v43);
        WTF::fastFree((WTF *)v43, v40);
      }
    }
    v46 = *v29;
    if (*v29)
      v47 = *(_DWORD *)(v46 - 12) + 1;
    else
      v47 = 1;
    *(_DWORD *)(v46 - 12) = v47;
    v54 = *v29;
    if (*v29)
      v55 = *(_DWORD *)(v54 - 12);
    else
      v55 = 0;
    v56 = (*(_DWORD *)(v54 - 16) + v55);
    v57 = *(unsigned int *)(v54 - 4);
    if (v57 > 0x400)
    {
      if (v57 > 2 * v56)
        goto LABEL_58;
    }
    else if (3 * v57 > 4 * v56)
    {
      goto LABEL_58;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v29);
    goto LABEL_58;
  }
  *a3 = 0;
LABEL_59:
  ((void (*)(uint64_t **, WebCore::MediaPlayer **))off_1E34E6B48[v15])(&v68, v64);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_1,BOOL,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34E6D38;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_1,BOOL,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6D38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_1,BOOL,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  WTF *v7;
  WTF *v8;
  int v9;
  WebKit::WebProcess *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;
  WebKit::WebProcess *v17;
  _QWORD v18[3];
  WTF::StringImpl *v19;
  char v20;
  _BYTE v21[16];
  unsigned int v22;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = (uint64_t *)(v4 + 32);
  v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v4 + 32), a2, a3);
  v8 = *(WTF **)(v4 + 32);
  if (v8)
    v8 = (WTF *)((char *)v8 + 16 * *((unsigned int *)v8 - 1));
  if (v8 == v7)
  {
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v17);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
    }
    v12 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v11) + 24);
    LOBYTE(v19) = 0;
    v20 = 0;
    v18[0] = a2;
    v18[1] = &v19;
    IPC::Connection::sendSync<Messages::RemoteLegacyCDMFactoryProxy::SupportsKeySystem>((uint64_t)v21, v12, (uint64_t)v18);
    if (v20)
    {
      v14 = v19;
      v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    v15 = v22;
    v16 = v21[8];
    if (v22)
      v16 = 0;
    LOBYTE(v19) = v16;
    WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WTF::String const&,BOOL &>(v6, a2, (const WTF::StringImpl *)&v19, (uint64_t)v18);
    v9 = v19;
    if ((_DWORD)v15 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E34E6B38[v15])(v18, v21);
  }
  else
  {
    v9 = *((unsigned __int8 *)v7 + 8);
  }
  return v9 != 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_2,BOOL,WTF::String const&,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34E6D60;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_2,BOOL,WTF::String const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E6D60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::RemoteLegacyCDMFactory::registerFactory(void)::$_2,BOOL,WTF::String const&,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  WebKit::WebProcess *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  const WTF::StringImpl *v34;
  const WTF::StringImpl *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WebKit::WebProcess *v46;
  WTF::StringImpl *v47;
  char v48;
  _QWORD v49[2];
  _BYTE v50[16];
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v52 = v7;
  v8 = *a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  v53 = v8;
  v11 = *(_QWORD *)(v4 + 40);
  v9 = (uint64_t *)(v4 + 40);
  v10 = v11;
  if (!v11)
  {
LABEL_19:
    {
      v24 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v46 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v24 = WebKit::WebProcess::WebProcess(v46);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v24;
    }
    v25 = *(_QWORD *)(WebKit::WebProcess::ensureGPUProcessConnection(v24) + 24);
    v26 = *a3;
    if (*a3)
      *(_DWORD *)v26 += 2;
    v47 = v26;
    v48 = 1;
    v49[0] = a2;
    v49[1] = &v47;
    IPC::Connection::sendSync<Messages::RemoteLegacyCDMFactoryProxy::SupportsKeySystem>((uint64_t)v50, v25, (uint64_t)v49);
    if (v48)
    {
      v28 = v47;
      v47 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v27);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
    if (v51)
      v22 = 0;
    else
      v22 = v50[8];
    v29 = *v9;
    if (*v9
      || (WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,BOOL,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(v9),
          (v29 = *v9) != 0))
    {
      v30 = *(_DWORD *)(v29 - 8);
    }
    else
    {
      v30 = 0;
    }
    v31 = WTF::PairHash<WTF::String,WTF::String>::hash(&v52) & v30;
    v32 = (_QWORD *)(v29 + 24 * v31);
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v32, v33, v34) & 1) == 0)
    {
      v36 = 0;
      v37 = 1;
      do
      {
        if (*v32 == -1)
        {
          v36 = v32;
        }
        else if (WTF::PairHash<WTF::String,WTF::String>::equal((WTF **)v32, &v52, v35))
        {
          *(_BYTE *)(v29 + 24 * v31 + 16) = v22;
          goto LABEL_52;
        }
        v31 = ((_DWORD)v31 + v37) & v30;
        v32 = (_QWORD *)(v29 + 24 * v31);
        ++v37;
      }
      while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v32, (uint64_t)v17, v35));
      if (v36)
      {
        *v36 = 0;
        v36[1] = 0;
        v36[2] = 0;
        --*(_DWORD *)(*v9 - 16);
        v32 = v36;
      }
    }
    WTF::String::operator=((WTF::StringImpl **)v32, (WTF::StringImpl *)&v52);
    WTF::String::operator=((WTF::StringImpl **)v32 + 1, (WTF::StringImpl *)&v53);
    *((_BYTE *)v32 + 16) = v22;
    v38 = *v9;
    if (*v9)
      v39 = *(_DWORD *)(v38 - 12) + 1;
    else
      v39 = 1;
    *(_DWORD *)(v38 - 12) = v39;
    v40 = *v9;
    if (*v9)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    v42 = (*(_DWORD *)(v40 - 16) + v41);
    v43 = *(unsigned int *)(v40 - 4);
    if (v43 > 0x400)
    {
      if (v43 > 2 * v42)
      {
LABEL_52:
        if (v51 != -1)
          ((void (*)(_QWORD *, _BYTE *))off_1E34E6B38[v51])(v49, v50);
        goto LABEL_54;
      }
    }
    else if (3 * v43 > 4 * v42)
    {
      goto LABEL_52;
    }
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,BOOL,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(v9);
    goto LABEL_52;
  }
  v12 = *(_DWORD *)(v10 - 8);
  v13 = WTF::PairHash<WTF::String,WTF::String>::hash(&v52) & v12;
  v14 = v10 + 24 * v13;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v14, v15, v16) & 1) != 0)
  {
LABEL_13:
    v20 = *v9;
    if (!*v9)
      goto LABEL_19;
    v21 = *(_DWORD *)(v20 - 4);
    v14 = v20 + 24 * v21;
    goto LABEL_15;
  }
  v19 = 1;
  while (*(_QWORD *)v14 == -1 || (WTF::PairHash<WTF::String,WTF::String>::equal((WTF **)v14, &v52, v18) & 1) == 0)
  {
    v13 = (v13 + v19) & v12;
    v14 = v10 + 24 * v13;
    ++v19;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v14, (uint64_t)v17, v18))goto LABEL_13;
  }
  v20 = *v9;
  if (*v9)
  {
    v21 = *(_DWORD *)(v20 - 4);
LABEL_15:
    v20 += 24 * v21;
  }
  if (v20 == v14)
    goto LABEL_19;
  v22 = *(_BYTE *)(v14 + 16);
LABEL_54:
  v44 = v53;
  v53 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v17);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v52;
  v52 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v17);
    else
      *(_DWORD *)v45 -= 2;
  }
  return v22 != 0;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,BOOL>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,BOOL,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  WTF **v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v24;

  v1 = *a1;
  if (*a1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 - 4);
    v3 = *(_DWORD *)(v1 - 12);
    if ((_DWORD)v2)
    {
      v4 = (_DWORD)v2 << (6 * v3 >= (2 * v2));
      goto LABEL_6;
    }
  }
  else
  {
    LODWORD(v2) = 0;
    v3 = 0;
  }
  v4 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(24 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if ((_DWORD)v2)
  {
    v8 = 0;
    v2 = v2;
    v24 = v2;
    while (1)
    {
      v9 = (WTF::StringImpl **)(v1 + 24 * v8);
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)(v1 + 24 * v8), (uint64_t)v6, v7))
        {
          v10 = v9[1];
          v9[1] = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v6);
            else
              *(_DWORD *)v10 -= 2;
          }
          v19 = *v9;
          *v9 = 0;
          if (!v19)
            goto LABEL_39;
          if (*(_DWORD *)v19 == 2)
          {
LABEL_38:
            WTF::StringImpl::destroy(v19, v6);
            goto LABEL_39;
          }
          *(_DWORD *)v19 -= 2;
        }
        else
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = WTF::PairHash<WTF::String,WTF::String>::hash((WTF::StringImpl **)(v1 + 24 * v8));
          v14 = 0;
          do
          {
            v15 = v13 & v12;
            v16 = (WTF **)(v11 + 24 * (v13 & v12));
            v17 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v16, (uint64_t)v6, v7);
            v13 = ++v14 + v15;
          }
          while (!v17);
          v18 = v16[1];
          v16[1] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v6);
            else
              *(_DWORD *)v18 -= 2;
          }
          v20 = *v16;
          *v16 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v6);
            else
              *(_DWORD *)v20 -= 2;
          }
          v21 = *v9;
          *v9 = 0;
          *v16 = v21;
          v22 = v9[1];
          v9[1] = 0;
          v16[1] = v22;
          *(_BYTE *)(v11 + 24 * v15 + 16) = *(_BYTE *)(v1 + 24 * v8 + 16);
          v23 = v9[1];
          v9[1] = 0;
          v2 = v24;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v6);
            else
              *(_DWORD *)v23 -= 2;
          }
          v19 = *v9;
          *v9 = 0;
          if (!v19)
            goto LABEL_39;
          if (*(_DWORD *)v19 == 2)
            goto LABEL_38;
          *(_DWORD *)v19 -= 2;
        }
      }
LABEL_39:
      if (++v8 == v2)
        return WTF::fastFree((WTF *)(v1 - 16), v6);
    }
  }
  if (v1)
    return WTF::fastFree((WTF *)(v1 - 16), v6);
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDM,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(16 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 16 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    while (1)
    {
      v11 = (uint64_t *)(v2 + 16 * v10);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (unsigned int *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, v7);
            }
          }
          *v26 = *v11;
          v30 = v2 + 16 * v10;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          v26[1] = v31;
          v14 = *(unsigned int **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (!v14)
            goto LABEL_29;
          do
          {
            v32 = __ldaxr(v14);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v14));
          if (v33)
            goto LABEL_29;
        }
        else
        {
          v13 = v2 + 16 * v10;
          v14 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (!v14)
            goto LABEL_29;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (v16)
            goto LABEL_29;
        }
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v7);
      }
LABEL_29:
      if (++v10 == v3)
        goto LABEL_32;
    }
  }
  if (v2)
LABEL_32:
    WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(uint64_t *a1, unsigned int *a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int *v7;
  char v8;

  IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a1, (uint64_t)&v7);
  std::__optional_storage_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>>(a2, (unsigned __int8 *)&v7);
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v4);
  }
  return a1;
}

unsigned int *std::__optional_storage_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>>(unsigned int *result, unsigned __int8 *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = result;
  if (*((unsigned __int8 *)result + 8) == a2[8])
  {
    if (*((_BYTE *)result + 8))
    {
      v3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      result = *(unsigned int **)result;
      *(_QWORD *)v2 = v3;
      if (result)
        return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
    }
  }
  else if (*((_BYTE *)result + 8))
  {
    result = *(unsigned int **)result;
    *(_QWORD *)v2 = 0;
    if (result)
      result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
    *((_BYTE *)v2 + 8) = 0;
  }
  else
  {
    v4 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v4;
    *((_BYTE *)result + 8) = 1;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::DeferrableRefCountedBase *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::DeferrableRefCountedBase *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::DeferrableRefCountedBase *v25;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    while (1)
    {
      v9 = (WTF::StringImpl **)(v2 + 16 * v8);
      v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = *((_DWORD *)v10 + 4);
          if (v15 >= 0x100)
            v16 = v15 >> 8;
          else
            v16 = WTF::StringImpl::hashSlowCase(v10);
          v17 = 0;
          do
          {
            v18 = v16 & v14;
            v16 = ++v17 + v18;
          }
          while (*(_QWORD *)(v13 + 16 * v18));
          v19 = (WTF::StringImpl **)(v13 + 16 * v18);
          v20 = v19[1];
          v19[1] = 0;
          if (v20)
          {
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v20);
            v21 = *v19;
            *v19 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v7);
              else
                *(_DWORD *)v21 -= 2;
            }
          }
          else
          {
            *v19 = 0;
          }
          v22 = *v9;
          *v9 = 0;
          *v19 = v22;
          v23 = v2 + 16 * v8;
          v24 = *(WTF::StringImpl **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          v19[1] = v24;
          v25 = *(WTF::DeferrableRefCountedBase **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v25);
          v10 = *v9;
          *v9 = 0;
          if (!v10)
            goto LABEL_35;
          if (*(_DWORD *)v10 == 2)
            goto LABEL_34;
          *(_DWORD *)v10 -= 2;
        }
        else
        {
          v11 = v2 + 16 * v8;
          v12 = *(WTF::DeferrableRefCountedBase **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v12)
          {
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v12);
            v10 = *v9;
          }
          *v9 = 0;
          if (!v10)
            goto LABEL_35;
          if (*(_DWORD *)v10 == 2)
          {
LABEL_34:
            WTF::StringImpl::destroy(v10, v7);
            goto LABEL_35;
          }
          *(_DWORD *)v10 -= 2;
        }
      }
LABEL_35:
      if (++v8 == v3)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

void WebKit::RemoteMediaEngineConfigurationFactory::~RemoteMediaEngineConfigurationFactory(unsigned int **this, void *a2)
{
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  WTF::fastFree((WTF *)this, v3);
}

void WebKit::RemoteMediaPlayerManager::~RemoteMediaPlayerManager(WebKit::RemoteMediaPlayerManager *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;

  *(_QWORD *)this = off_1E34E6DC0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (unsigned __int8 **)(v4 + 8);
      do
      {
        if (*(v6 - 1) != (unsigned __int8 *)-1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, a2);
        }
        v6 += 3;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteMediaPlayerManager::~RemoteMediaPlayerManager(this, a2);
  WTF::fastFree(v2, v3);
}

WebKit::RemoteMediaPlayerMIMETypeCache *WebKit::RemoteMediaPlayerManager::typeCache(uint64_t a1, char a2)
{
  WebKit::RemoteMediaPlayerMIMETypeCache *result;
  WebKit::RemoteMediaPlayerMIMETypeCache **v4;
  uint64_t v5;
  char v6;
  _QWORD v7[3];
  char v8;

  v8 = a2;
  {
    WebKit::mimeCaches(void)::caches = 0;
  }
  WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&WebKit::mimeCaches(void)::caches, &v8, (uint64_t)v7);
  v4 = (WebKit::RemoteMediaPlayerMIMETypeCache **)(v7[0] + 8);
  result = *(WebKit::RemoteMediaPlayerMIMETypeCache **)(v7[0] + 8);
  if (!result)
  {
    v5 = WTF::fastMalloc((WTF *)0x30);
    v6 = v8;
    *(_QWORD *)v5 = a1;
    *(_BYTE *)(v5 + 8) = v6;
    *(_BYTE *)(v5 + 16) = 0;
    *(_BYTE *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_BYTE *)(v5 + 40) = 0;
    std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100](v4, (WTF::StringImpl *)v5);
    return *v4;
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::MediaPlayerMediaEngineIdentifier,WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (uint64_t *)(v6 + 16 * v12);
  v14 = *(unsigned __int8 *)v13;
  if (v14 != 255)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 16 * v23;
        goto LABEL_29;
      }
      if (v14 == 254)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (uint64_t *)(v6 + 16 * v12);
      v14 = *(unsigned __int8 *)v13;
      ++v16;
    }
    while (v14 != 255);
    if (v15)
    {
      *(_BYTE *)v15 = -1;
      v15[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      LOBYTE(v9) = *a2;
      v13 = v15;
    }
  }
  *(_BYTE *)v13 = v9;
  result = (uint64_t *)std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100]((WebKit::RemoteMediaPlayerMIMETypeCache **)v13 + 1, 0);
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_20:
      result = (uint64_t *)WTF::HashTable<WebCore::MediaPlayerMediaEngineIdentifier,WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>>::expand(v4, v13);
      v13 = result;
      v19 = *v4;
      if (*v4)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_20;
  }
  v24 = v19 + 16 * v22;
  v25 = 1;
LABEL_29:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

uint64_t WebKit::RemoteMediaPlayerManager::gpuProcessConnection(WebKit::RemoteMediaPlayerManager *this)
{
  unsigned __int8 *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  WebKit::WebProcess *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  WebKit::WebProcess *v21;
  WebKit::WebProcess *v22;
  uint64_t v23;

  v3 = (char *)this + 24;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v2, *((_QWORD *)this + 4), &v23);
    v5 = v23;
    if (v23)
    {
      v23 = 0;
LABEL_32:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
      return v5;
    }
  }
  else
  {
    v23 = 0;
  }
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v8 = WebKit::WebProcess::ensureGPUProcessConnection(v6);
  v9 = *(_QWORD *)(v8 + 16);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEABB3C](v9);
LABEL_11:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v12 = v23;
  v23 = v8;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v7);
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v23);
  {
    v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v13 = WebKit::WebProcess::WebProcess(v22);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
  }
  v15 = WebKit::WebProcess::ensureGPUProcessConnection(v13);
  v16 = *(_QWORD *)(v15 + 16);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEABB3C](v16);
LABEL_24:
  ++*(_QWORD *)(v16 + 8);
  v18 = __ldxr((unsigned __int8 *)v16);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  v19 = v23;
  v23 = v15;
  if (v19)
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v19 + 16), v14);
    v15 = v23;
  }
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v15 + 176, (uint64_t)this);
  v5 = v23;
  v23 = 0;
  if (v5)
    goto LABEL_32;
  return v5;
}

uint64_t WebKit::RemoteMediaPlayerManager::deleteRemoteMediaPlayer(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;

  v10 = a2;
  v3 = a1 + 2;
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 2, &v10);
  v5 = a1[2];
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      goto LABEL_8;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v6 = 0;
  }
  if (v6 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
LABEL_8:
  v7 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection((WebKit::RemoteMediaPlayerManager *)a1) + 24);
  v9 = &v10;
  return IPC::Connection::send<Messages::RemoteMediaPlayerManagerProxy::DeleteMediaPlayer>(v7, &v9, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::RemoteMediaPlayerManagerProxy::DeleteMediaPlayer>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v18;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1118;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  v11 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
  v13 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v18, a4, a5);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return v13;
}

uint64_t WebKit::RemoteMediaPlayerManager::findRemotePlayerId(WebKit::RemoteMediaPlayerManager *this, unsigned __int8 **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  void *v14;
  unsigned __int8 **v15;
  unsigned __int8 **v17;

  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 2);
  v5 = v4;
  v7 = v6;
  v8 = *((_QWORD *)this + 2);
  if (v8)
    v9 = (uint64_t *)(v8 + 24 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 == v4)
    return 0;
  while (1)
  {
    v11 = *v5;
    v10 = (WTF::ThreadSafeWeakPtrControlBlock *)v5[1];
    if (v10)
    {
      v12 = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
      if (v12)
        break;
    }
    if (!a2)
      return v11;
LABEL_12:
    while (1)
    {
      v5 += 3;
      if (v5 == v7)
        break;
      if ((unint64_t)(*v5 + 1) > 1)
        goto LABEL_16;
    }
    v5 = v7;
LABEL_16:
    if (v5 == v9)
      return 0;
  }
  v13 = v12;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v12, v5[2], &v17);
  v15 = v17;
  v17 = 0;
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(v15[6]);
  if (v15 != a2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, v14);
    goto LABEL_12;
  }
  WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, v14);
  return v11;
}

void WebKit::RemoteMediaPlayerManager::didReceivePlayerMessage(WebKit::RemoteMediaPlayerManager *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  void *v5;
  unsigned __int8 *v6;
  WebKit::MediaPlayerPrivateRemote *v7;
  uint64_t v8;
  WTF::ThreadSafeWeakPtrControlBlock *v9[2];
  WebKit::MediaPlayerPrivateRemote *v10;

  v8 = *((_QWORD *)a3 + 8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((WebKit::RemoteMediaPlayerManager *)((char *)this + 16), &v8, v9);
  if (v9[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)v9[0], (uint64_t)v9[1], &v10);
    v6 = (unsigned __int8 *)v9[0];
    v9[0] = 0;
    if (v6)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
    if (v10)
    {
      WebKit::MediaPlayerPrivateRemote::didReceiveMessage(v10, a2, a3);
      v7 = v10;
      v10 = 0;
      if (v7)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((unsigned __int8 **)v7 + 6));
    }
  }
}

WTF::ThreadSafeWeakPtrControlBlock *WebKit::RemoteMediaPlayerManager::gpuProcessConnectionDidClose(WebKit::RemoteMediaPlayerManager *this, WebKit::GPUProcessConnection *a2)
{
  unsigned __int8 *v3;
  WTF::ThreadSafeWeakPtrControlBlock *result;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  WTF::ThreadSafeWeakPtrControlBlock *v7;
  uint64_t v8;
  WTF::ThreadSafeWeakPtrControlBlock *v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  WTF::ThreadSafeWeakPtrControlBlock *v15;
  WTF::ThreadSafeWeakPtrControlBlock **v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  WTF::ThreadSafeWeakPtrControlBlock **v24;
  unsigned __int8 *v25;
  uint64_t v26;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  *((_QWORD *)this + 4) = 0;
  result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 2);
  v6 = result;
  v7 = v5;
  v8 = *((_QWORD *)this + 2);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_8;
  }
  v9 = (WTF::ThreadSafeWeakPtrControlBlock *)(v8 + 24 * *(unsigned int *)(v8 - 4));
  v10 = *(unsigned int *)(v8 - 12);
  if (!(_DWORD)v10)
  {
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  if (v10 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::fastMalloc((WTF *)(16 * v10));
  v11 = result;
LABEL_9:
  if (v9 != v6)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = v13;
      result = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)v6 + 1);
      if (result)
        result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
      v15 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)v6 + 2);
      v16 = (WTF::ThreadSafeWeakPtrControlBlock **)((char *)v11 + 16 * v12);
      *v16 = result;
      v16[1] = v15;
      while (1)
      {
        v6 = (WTF::ThreadSafeWeakPtrControlBlock *)((char *)v6 + 24);
        if (v6 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v6 + 1) > 1)
          goto LABEL_18;
      }
      v6 = v7;
LABEL_18:
      ++v12;
      v13 = v14 + 1;
    }
    while (v6 != v9);
    if (v12)
    {
      v17 = 16 * v14;
      v18 = (uint64_t *)((char *)v11 + 8);
      do
      {
        v19 = (unsigned __int8 *)*(v18 - 1);
        if (v19)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v19, *v18, &v26);
          if (v26)
          {
            v20 = *(unsigned __int8 **)(v26 + 128);
            if (v20)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v20, *(_QWORD *)(v26 + 136), &v25);
              v20 = v25;
            }
            else
            {
              v25 = 0;
            }
            WebCore::MediaPlayer::reloadAndResumePlaybackIfNeeded((WebCore::MediaPlayer *)v20);
            v21 = (unsigned __int8 **)v25;
            v25 = 0;
            if (v21)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v21);
            v22 = v26;
            v26 = 0;
            if (v22)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v22 + 48));
          }
        }
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
      v23 = 16 * v14;
      v24 = (WTF::ThreadSafeWeakPtrControlBlock **)v11;
      do
      {
        result = *v24;
        *v24 = 0;
        if (result)
          result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, v5);
        v24 += 2;
        v23 -= 16;
      }
      while (v23);
    }
  }
  if (v11)
    return (WTF::ThreadSafeWeakPtrControlBlock *)WTF::fastFree(v11, v5);
  return result;
}

void WebKit::RemoteMediaResourceProxy::~RemoteMediaResourceProxy(unsigned __int8 ***this)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2);
}

{
  void *v2;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2);
  WTF::fastFree((WTF *)this, v2);
}

IPC::Encoder *WebKit::RemoteMediaResourceProxy::responseReceived(uint64_t a1, uint64_t a2, WebCore::ResourceResponseBase *a3, uint64_t *a4)
{
  os_unfair_lock_s *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19[2];
  IPC::Encoder *v20;

  v7 = *(os_unfair_lock_s **)(a1 + 16);
  v8 = (***(uint64_t (****)(_QWORD))(a1 + 24))(*(_QWORD *)(a1 + 24));
  v9 = *a4;
  *a4 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34E7860;
  v10[1] = v9;
  v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1197;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v20 = (IPC::Encoder *)v12;
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v12, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = v8;
  v19[0] = (uint64_t)v10;
  v19[1] = v11;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v20, v19, 0, 0);
  v15 = v19[0];
  v19[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaResourceProxy::redirectReceived(uint64_t a1, uint64_t a2, WebCore::ResourceRequest *a3, WebCore::ResourceResponseBase *a4, uint64_t *a5)
{
  os_unfair_lock_s *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19[2];
  IPC::Encoder *v20;

  v8 = *(os_unfair_lock_s **)(a1 + 16);
  v9 = *a5;
  *a5 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34E7888;
  v10[1] = v9;
  v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1196;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v20 = (IPC::Encoder *)v12;
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v12, a3);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v12, a4);
  v19[0] = (uint64_t)v10;
  v19[1] = v11;
  IPC::Connection::sendMessageWithAsyncReply(v8, &v20, v19, 0, 0);
  v15 = v19[0];
  v19[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t WebKit::RemoteMediaResourceProxy::shouldCacheResponse()
{
  return 0;
}

IPC::Encoder *WebKit::RemoteMediaResourceProxy::dataSent(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v7 = *((_QWORD *)this + 2);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1193;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v14 = (IPC::Encoder *)v8;
  v9 = *((_QWORD *)this + 4);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a4;
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResourceProxy::dataReceived(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, const WebCore::SharedBuffer *a3)
{
  os_unfair_lock_s *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  unsigned int *v15;
  unsigned int *result;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  v4 = (os_unfair_lock_s *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)a3 + 6);
  do
    v5 = __ldaxr((unsigned int *)a3);
  while (__stlxr(v5 + 1, (unsigned int *)a3));
  v18 = (unsigned int *)a3;
  v19 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34E78B0;
  v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1192;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v21 = (IPC::Encoder *)v8;
  v9 = *((_QWORD *)this + 4);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v8, (IPC::SharedBufferReference *)&v17);
  v20[0] = (uint64_t)v6;
  v20[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v21, v20, 0, 0);
  v11 = v20[0];
  v20[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  v15 = v19;
  v19 = 0;
  if (v15)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v15);
  result = v18;
  v18 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v10);
  return result;
}

IPC::Encoder *WebKit::RemoteMediaResourceProxy::accessControlCheckFailed(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, const WebCore::ResourceError *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = *((_QWORD *)this + 2);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1191;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v12 = (IPC::Encoder *)v6;
  v7 = *((_QWORD *)this + 4);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v6, a3);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::RemoteMediaResourceProxy::loadFailed(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, const WebCore::ResourceError *a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *((_QWORD *)this + 2);
  v5[0] = (char *)this + 32;
  v5[1] = a3;
  return IPC::Connection::send<Messages::RemoteMediaResourceManager::LoadFailed>(v3, (uint64_t)v5, 0, 0, 0);
}

IPC::Encoder *WebKit::RemoteMediaResourceProxy::loadFinished(WebKit::RemoteMediaResourceProxy *this, WebCore::PlatformMediaResource *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = *((_QWORD *)this + 2);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1195;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v12 = (IPC::Encoder *)v6;
  v7 = *((_QWORD *)this + 4);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode((IPC::Encoder *)v6, (uint64_t *)a3);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::RemoteRemoteCommandListener::RemoteRemoteCommandListener(uint64_t a1)
{
  uint64_t v2;

  WebCore::RemoteCommandListener::RemoteCommandListener();
  *(_QWORD *)(a1 + 48) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(a1 + 56) = off_1E34E6488;
  *(_QWORD *)(a1 + 64) = &off_1E34B0558;
  *(_QWORD *)(a1 + 72) = 0;
  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)a1 = off_1E34E6E60;
  *(_QWORD *)(a1 + 56) = &unk_1E34E6EB0;
  *(_QWORD *)(a1 + 64) = &unk_1E34E6EF0;
  *(_QWORD *)(a1 + 80) = v2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  WebKit::RemoteRemoteCommandListener::ensureGPUProcessConnection((WebKit::RemoteRemoteCommandListener *)a1);
  return a1;
}

uint64_t WebKit::RemoteRemoteCommandListener::ensureGPUProcessConnection(WebKit::RemoteRemoteCommandListener *this)
{
  unsigned __int8 *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WebKit::WebProcess *v21;
  uint64_t v22;
  IPC::Encoder *v23[3];
  _QWORD v24[2];

  v3 = (char *)this + 104;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 13);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v2, *((_QWORD *)this + 14), &v22);
    v5 = v22;
    if (v22)
    {
      v22 = 0;
LABEL_21:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
      return v5;
    }
  }
  else
  {
    v22 = 0;
  }
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v8 = WebKit::WebProcess::ensureGPUProcessConnection(v6);
  v9 = *(_QWORD *)(v8 + 16);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEABB3C](v9);
LABEL_11:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v12 = v22;
  v22 = v8;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v7);
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v22);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v22 + 176, (uint64_t)this + 56);
  v13 = *((_QWORD *)this + 6);
  v24[0] = 110;
  v24[1] = v13;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v22 + 40), (unsigned __int8 *)v24, (uint64_t)this + 64, (unsigned int **)v23);
  v14 = *(_QWORD *)(v22 + 24);
  v15 = *((_QWORD *)this + 6);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 38;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v23[0] = (IPC::Encoder *)v16;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = v15;
  IPC::Connection::sendMessageImpl(v14, (uint64_t *)v23, 0, 0);
  v17 = v23[0];
  v23[0] = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v4);
    WTF::fastFree(v18, v19);
  }
  v5 = v22;
  v22 = 0;
  if (v5)
    goto LABEL_21;
  return v5;
}

void WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener(WebKit::RemoteRemoteCommandListener *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 13);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v3, *((_QWORD *)this + 14), &v13);
    if (v13)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(v13 + 32), (WebKit::RemoteRemoteCommandListener *)((char *)this + 64));
      v4 = *(_QWORD *)(v13 + 24);
      v5 = *((_QWORD *)this + 6);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 47;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v14 = (IPC::Encoder *)v6;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v5;
      IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v14, 0, 0);
      v7 = v14;
      v14 = 0;
      if (v7)
      {
        IPC::Encoder::~Encoder(v7, a2);
        WTF::fastFree(v8, v9);
      }
      v10 = v13;
      v13 = 0;
      if (v10)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), a2);
    }
    v11 = (unsigned __int8 *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v11)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2);
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  v12 = *((_QWORD *)this + 11);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), a2);
  *((_QWORD *)this + 8) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 9, a2);
  WebCore::RemoteCommandListener::~RemoteCommandListener(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener(WebKit::RemoteRemoteCommandListener *this, void *a2)
{
  WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener((WebKit::RemoteRemoteCommandListener *)((char *)this - 56), a2);
}

{
  WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener((WebKit::RemoteRemoteCommandListener *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener((WebKit::RemoteRemoteCommandListener *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener((WebKit::RemoteRemoteCommandListener *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteRemoteCommandListener::gpuProcessConnectionDidClose(WebKit::RemoteRemoteCommandListener *this, WebKit::GPUProcessConnection *a2)
{
  void *v3;
  unsigned __int8 *result;

  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::GPUProcessConnection *)((char *)a2 + 32), (WebKit::RemoteRemoteCommandListener *)((char *)this + 64));
  result = (unsigned __int8 *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
  *((_QWORD *)this + 14) = 0;
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteRemoteCommandListener::gpuProcessConnectionDidClose(WebKit::RemoteRemoteCommandListener *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteRemoteCommandListener::gpuProcessConnectionDidClose((WebKit::RemoteRemoteCommandListener *)((char *)this - 56), a2);
}

IPC::Encoder *WebKit::RemoteRemoteCommandListener::updateSupportedCommands(WebKit::RemoteRemoteCommandListener *this)
{
  unsigned __int8 **v2;
  void *v3;
  unsigned __int8 **v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  IPC::Encoder *result;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  _DWORD *v28;
  size_t v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  void *v59;
  WTF *v60;
  void *v61;
  unsigned __int8 *v62;
  char v63;
  IPC::Encoder *v64;

  v2 = (unsigned __int8 **)WebCore::RemoteCommandListener::supportedCommands(this);
  v4 = v2;
  v5 = *((_QWORD *)this + 11);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 12);
    v7 = *v2;
    if (*v2)
    {
      if (v6 != *((_DWORD *)v7 - 3))
        goto LABEL_29;
      if (v6)
      {
        v8 = *((unsigned int *)v7 - 1);
        v9 = *v2;
        if ((_DWORD)v8)
        {
          v10 = *((unsigned int *)v7 - 1);
          v9 = *v2;
          while (*v9 >= 0xFEu)
          {
            ++v9;
            if (!--v10)
              goto LABEL_26;
          }
        }
        v11 = &v7[v8];
        if (v9 != v11)
        {
          v12 = *(_DWORD *)(v5 - 8);
          while (1)
          {
            v13 = *v9;
            v14 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
            v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
            v16 = (v15 ^ HIWORD(v15)) & v12;
            v17 = *(unsigned __int8 *)(v5 + v16);
            if (v17 != v13)
              break;
LABEL_21:
            if (++v9 != v11)
            {
              while (*v9 >= 0xFEu)
              {
                if (++v9 == v11)
                {
                  v9 = v11;
                  break;
                }
              }
              if (v9 != v11)
                continue;
            }
            goto LABEL_26;
          }
          v18 = 1;
          while (v17 != 255)
          {
            v16 = ((_DWORD)v16 + v18) & v12;
            v17 = *(unsigned __int8 *)(v5 + v16);
            ++v18;
            if (v17 == v13)
              goto LABEL_21;
          }
          goto LABEL_28;
        }
      }
    }
    else if (v6)
    {
      goto LABEL_34;
    }
LABEL_26:
    v19 = *((unsigned __int8 *)this + 96);
    result = (IPC::Encoder *)WebCore::RemoteCommandListener::supportsSeeking(this);
    if (v19 == (_DWORD)result)
      return result;
    v7 = *v4;
LABEL_28:
    if (v7)
      goto LABEL_29;
LABEL_34:
    v28 = 0;
    goto LABEL_66;
  }
  v7 = *v2;
  if (!*v2 || !*((_DWORD *)v7 - 3))
    goto LABEL_26;
LABEL_29:
  v21 = *((unsigned int *)v7 - 3);
  if (!(_DWORD)v21)
    goto LABEL_34;
  v22 = (v21 - 1) | ((v21 - 1) >> 1) | ((((_DWORD)v21 - 1) | ((v21 - 1) >> 1)) >> 2);
  v23 = v22 | (v22 >> 4) | ((v22 | (v22 >> 4)) >> 8);
  v24 = (v23 | HIWORD(v23)) + 1;
  if (v24 > 0x400)
  {
    if (v24 > 2 * v21)
      goto LABEL_36;
  }
  else if (3 * v24 > 4 * v21)
  {
LABEL_33:
    v25 = (double)v21;
    v26 = (double)v24;
    v27 = 0.604166667;
    goto LABEL_37;
  }
  LODWORD(v24) = 2 * v24;
  if (v24 <= 0x400)
    goto LABEL_33;
LABEL_36:
  v25 = (double)v21;
  v26 = (double)v24;
  v27 = 0.416666667;
LABEL_37:
  if (v26 * v27 <= v25)
    LODWORD(v24) = 2 * v24;
  if (v24 <= 8)
    v29 = 8;
  else
    v29 = v24;
  v30 = (_DWORD *)WTF::fastMalloc((WTF *)(v29 + 16));
  v28 = v30 + 4;
  memset(v30 + 4, 255, v29);
  LODWORD(v31) = v29 - 1;
  v30[2] = v29 - 1;
  v30[3] = v29;
  *v30 = 0;
  v30[1] = v21;
  v32 = *v4;
  if (*v4)
  {
    v33 = *((unsigned int *)v32 - 1);
    v34 = &v32[v33];
    if (*((_DWORD *)v32 - 3))
    {
      v35 = *v4;
      if ((_DWORD)v33)
      {
        v35 = *v4;
        while (*v35 >= 0xFEu)
        {
          ++v35;
          if (!--v33)
          {
            v35 = v34;
            goto LABEL_52;
          }
        }
      }
      goto LABEL_52;
    }
    v35 = &v32[v33];
  }
  else
  {
    v35 = 0;
    v33 = 0;
  }
  v34 = &v32[v33];
LABEL_52:
  if (v32)
    v32 += *((unsigned int *)v32 - 1);
  if (v32 != v35)
  {
    if (v30 == (_DWORD *)-16)
      v31 = 0;
    else
      v31 = v31;
    do
    {
      v36 = 0;
      v37 = *v35;
      v38 = 9 * ((~(v37 << 15) + v37) ^ ((~(v37 << 15) + v37) >> 10));
      v39 = ((v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11)) ^ (((v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11)) >> 16);
      do
      {
        v40 = v39 & v31;
        v41 = *((unsigned __int8 *)v28 + (v39 & v31));
        v39 = ++v36 + (v39 & v31);
      }
      while (v41 != 255);
      *((_BYTE *)v28 + v40) = v37;
      v42 = v35 + 1;
      v35 = v34;
      if (v42 != v34)
      {
        v35 = v42;
        while (*v35 >= 0xFEu)
        {
          if (++v35 == v34)
          {
            v35 = v34;
            break;
          }
        }
      }
    }
    while (v35 != v32);
  }
LABEL_66:
  v43 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v28;
  if (v43)
    WTF::fastFree((WTF *)(v43 - 16), v3);
  *((_BYTE *)this + 96) = WebCore::RemoteCommandListener::supportsSeeking(this);
  v44 = *(_QWORD *)(WebKit::RemoteRemoteCommandListener::ensureGPUProcessConnection(this) + 24);
  if (*v4 && (v45 = (WTF *)*((unsigned int *)*v4 - 3), (_DWORD)v45))
  {
    v46 = WTF::fastMalloc(v45);
    v47 = (WTF *)v46;
    v48 = *v4;
    if (*v4 && *((_DWORD *)v48 - 3))
    {
      v49 = *((unsigned int *)v48 - 1);
      if ((_DWORD)v49)
      {
        v50 = *((unsigned int *)v48 - 1);
        v51 = *v4;
        while (*v51 >= 0xFEu)
        {
          ++v51;
          if (!--v50)
            goto LABEL_78;
        }
      }
      else
      {
        v51 = *v4;
      }
      v62 = &v48[v49];
      if (v51 != v62)
      {
        v52 = 0;
        do
        {
          v63 = *v51++;
          *(_BYTE *)(v46 + v52++) = v63;
          if (v51 == v62)
            break;
          while (*v51 >= 0xFEu)
          {
            if (++v51 == v62)
            {
              v51 = v62;
              break;
            }
          }
        }
        while (v51 != v62);
        goto LABEL_79;
      }
    }
  }
  else
  {
    v47 = 0;
  }
LABEL_78:
  v52 = 0;
LABEL_79:
  v53 = *((_BYTE *)this + 96);
  v54 = *((_QWORD *)this + 6);
  v55 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v55 = 1250;
  *(_QWORD *)(v55 + 8) = v54;
  *(_QWORD *)(v55 + 528) = v55 + 16;
  *(_QWORD *)(v55 + 536) = v55 + 16;
  *(_OWORD *)(v55 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v55 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v55);
  v64 = (IPC::Encoder *)v55;
  v56 = v52;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v55, 8uLL, 8) = v52;
  if (v52)
  {
    v57 = (char *)v47;
    do
    {
      v58 = *v57++;
      *IPC::Encoder::grow((IPC::Encoder *)v55, 1uLL, 1) = v58;
      --v56;
    }
    while (v56);
  }
  *IPC::Encoder::grow((IPC::Encoder *)v55, 1uLL, 1) = v53;
  IPC::Connection::sendMessageImpl(v44, (uint64_t *)&v64, 0, 0);
  result = v64;
  v64 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v59);
    result = (IPC::Encoder *)WTF::fastFree(v60, v61);
  }
  if (v47)
    return (IPC::Encoder *)WTF::fastFree(v47, v59);
  return result;
}

WebKit::LibWebRTCCodecs *WebKit::RemoteVideoCodecFactory::createDecoder(WebKit::LibWebRTCCodecs *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  WebKit::WebProcess *v10;
  WebKit::LibWebRTCCodecs *v11;
  unsigned __int16 v12;
  WebKit::LibWebRTCCodecs *result;
  char v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebKit::WebProcess *v27;
  WebKit::WebProcess *v28;
  uint64_t v29;
  WebKit::LibWebRTCCodecs *v30;

  WebKit::LibWebRTCCodecs::initializeIfNeeded(a1);
  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::WebProcess(v27);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = WebKit::WebProcess::libWebRTCCodecs(v10);
  v12 = WebKit::LibWebRTCCodecs::videoCodecTypeFromWebCodec(v11, a1);
  if (v12 <= 0xFFu)
    return (WebKit::LibWebRTCCodecs *)WebCore::VideoDecoder::createLocalDecoder();
  v14 = v12;
  {
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = (WebKit::WebProcess *)WebKit::WebProcess::WebProcess(v28);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
  }
  result = WebKit::WebProcess::libWebRTCCodecs(v15);
  v29 = (uint64_t)result;
  v17 = a2[2];
  v16 = a2[3];
  v18 = a2[1];
  if (v18)
  {
    if (HIDWORD(v18))
    {
      __break(0xC471u);
      return result;
    }
    v19 = *a2;
    v20 = WTF::fastMalloc((WTF *)a2[1]);
    v21 = v20;
    for (i = 0; i != v18; ++i)
      *(_BYTE *)(v20 + i) = *(_BYTE *)(v19 + i);
  }
  else
  {
    v21 = 0;
  }
  v23 = *a3;
  *a3 = 0;
  v24 = *a4;
  *a4 = 0;
  v25 = *a5;
  *a5 = 0;
  v26 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v26 = &off_1E34E78D8;
  *(_QWORD *)(v26 + 8) = v17;
  *(_QWORD *)(v26 + 16) = v16;
  *(_QWORD *)(v26 + 24) = v21;
  *(_DWORD *)(v26 + 32) = v18;
  *(_DWORD *)(v26 + 36) = v18;
  *(_QWORD *)(v26 + 40) = v23;
  *(_QWORD *)(v26 + 48) = v24;
  *(_QWORD *)(v26 + 56) = v25;
  v30 = (WebKit::LibWebRTCCodecs *)v26;
  WebKit::LibWebRTCCodecs::createDecoderInternal(v29, v14, (uint64_t)a1, (uint64_t *)&v30);
  result = v30;
  if (v30)
    return (WebKit::LibWebRTCCodecs *)(*(uint64_t (**)(WebKit::LibWebRTCCodecs *))(*(_QWORD *)v30 + 8))(v30);
  return result;
}

void WebKit::RemoteVideoCodecFactory::createEncoder(WebKit::LibWebRTCCodecs *a1, __int128 *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  char *v12;
  char *v13;
  WebKit::WebProcess *v14;
  WebKit::LibWebRTCCodecs *v15;
  unsigned __int16 v16;
  double v17;
  double v18;
  float v19;
  char v20;
  WebKit::WebProcess *v21;
  WebKit::LibWebRTCCodecs *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  void **v32;
  uint64_t **v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  void **v38;
  WebKit::WebProcess *v39;
  WebKit::WebProcess *v40;
  __int128 *v41;
  void *__p[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49[2];
  char v50;

  WebKit::LibWebRTCCodecs::initializeIfNeeded(a1);
  v12 = &_MergedGlobals_106;
  v13 = &_MergedGlobals_106;
  {
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v39 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::WebProcess(v39);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  v15 = WebKit::WebProcess::libWebRTCCodecs(v14);
  v16 = WebKit::LibWebRTCCodecs::videoEncoderTypeFromWebCodec(v15, a1);
  if (v16 <= 0xFFu)
  {
    WebCore::VideoEncoder::createLocalEncoder();
    return;
  }
  v20 = v16;
  v47 = 0;
  v48 = 0;
  v46 = &v47;
  if (!(_BYTE)v16)
  {
    v28 = WTF::String::find((uint64_t)a1, 0x2Eu, 0, v17, v18, v19);
    if (v28 != -1)
    {
      v29 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v30 = *(unsigned int *)(v29 + 4);
        if (v28 == v30)
          goto LABEL_6;
        if (v28 < v30)
        {
          v41 = a2;
          std::string::basic_string[abi:sn180100](v44, (_BYTE *)(*(_QWORD *)(v29 + 8) + v28 + 1), v30 - (v28 + 1));
          std::string::basic_string[abi:sn180100]<0>((char **)__p, "profile-level-id");
          v31 = v47;
          v32 = (void **)&v47;
          v33 = &v47;
          if (!v47)
            goto LABEL_24;
          v32 = (void **)&v47;
          while (1)
          {
            while (1)
            {
              v33 = (uint64_t **)v31;
              v34 = v31 + 4;
              if ((std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (void **)v31 + 4) & 0x80) == 0)break;
              v31 = *v33;
              v32 = (void **)v33;
              if (!*v33)
                goto LABEL_24;
            }
            if ((std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(v34, __p) & 0x80) == 0)break;
            v32 = (void **)(v33 + 1);
            v31 = v33[1];
            if (!v31)
              goto LABEL_24;
          }
          v35 = (char *)*v32;
          if (!*v32)
          {
LABEL_24:
            v35 = (char *)operator new(0x50uLL);
            v49[1] = (uint64_t)&v47;
            *((_OWORD *)v35 + 2) = *(_OWORD *)__p;
            v36 = v43;
            __p[0] = 0;
            __p[1] = 0;
            v43 = 0;
            *((_QWORD *)v35 + 6) = v36;
            *((_QWORD *)v35 + 7) = 0;
            *((_QWORD *)v35 + 8) = 0;
            *((_QWORD *)v35 + 9) = 0;
            v50 = 1;
            *(_QWORD *)v35 = 0;
            *((_QWORD *)v35 + 1) = 0;
            *((_QWORD *)v35 + 2) = v33;
            *v32 = v35;
            v37 = (uint64_t *)v35;
            if (*v46)
            {
              v46 = (uint64_t **)*v46;
              v37 = (uint64_t *)*v32;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v47, v37);
            ++v48;
            v49[0] = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:sn180100]((uint64_t)v49, 0);
          }
          v38 = (void **)(v35 + 56);
          if (v35[79] < 0)
            operator delete(*v38);
          *(_OWORD *)v38 = *(_OWORD *)v44;
          *((_QWORD *)v35 + 9) = v45;
          HIBYTE(v45) = 0;
          LOBYTE(v44[0]) = 0;
          a2 = v41;
          v13 = &_MergedGlobals_106;
          if (SHIBYTE(v43) < 0)
          {
            operator delete(__p[0]);
            v12 = &_MergedGlobals_106;
            if (SHIBYTE(v45) < 0)
              operator delete(v44[0]);
          }
          else
          {
            v12 = &_MergedGlobals_106;
          }
          goto LABEL_6;
        }
      }
      else if (!v28)
      {
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_6:
  if (v12[2488] != 1)
  {
LABEL_36:
    v40 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v21 = (WebKit::WebProcess *)WebKit::WebProcess::WebProcess(v40);
    *((_QWORD *)v13 + 310) = v21;
    v12[2488] = 1;
    goto LABEL_8;
  }
  v21 = (WebKit::WebProcess *)*((_QWORD *)v13 + 310);
LABEL_8:
  v22 = WebKit::WebProcess::libWebRTCCodecs(v21);
  v23 = *a3;
  *a3 = 0;
  v24 = *a4;
  *a4 = 0;
  v25 = *a5;
  *a5 = 0;
  v26 = *a6;
  *a6 = 0;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v27 = &off_1E34E7960;
  v27[1] = v23;
  v27[2] = v24;
  v27[3] = v25;
  v27[4] = v26;
  v49[0] = (uint64_t)v27;
  WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized((uint64_t)v22, v20, (uint64_t)a1, &v46, a2, v49);
  if (v49[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v49[0] + 8))(v49[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v46, v47);
}

uint64_t WTF::String::find(uint64_t this, unsigned __int8 a2, unsigned int a3, double a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int16x8_t *v9;
  unint64_t v10;
  unint64_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int16x8_t *v14;
  __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;

  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return -1;
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 4);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    if (v8 > a3)
    {
      v16 = v8 - a3;
      v17 = 16;
      if (v16 < 0x10)
        v17 = v16;
      if (v17)
      {
        v18 = v17;
        v19 = (unsigned __int8 *)(v7 + a3);
        while (*v19 != a2)
        {
          ++v19;
          if (!--v18)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        if (v16 < 0x11)
          return -1;
        v19 = (unsigned __int8 *)memchr((void *)(v7 + a3 + v17), a2, v16 - v17);
        if (!v19)
          return -1;
      }
      return (uint64_t)&v19[-v7];
    }
    return -1;
  }
  if (v8 <= a3)
    return -1;
  v9 = (int16x8_t *)(v7 + 2 * a3);
  v10 = v7 + 2 * v8;
  v11 = v10 - (_QWORD)v9;
  if ((uint64_t)(v10 - (_QWORD)v9) <= -2)
  {
    __break(1u);
    return this;
  }
  if (v11 <= 0x3E)
  {
    while (v9->i16[0] != a2)
    {
      v9 = (int16x8_t *)((char *)v9 + 2);
      v11 -= 2;
      if (!v11)
        return -1;
    }
    goto LABEL_26;
  }
  v12 = vdupq_n_s16(a2);
  if ((unint64_t)&v9->u64[1] + 6 >= v10)
  {
    v14 = (int16x8_t *)(v7 + 2 * a3);
LABEL_23:
    if ((unint64_t)v14 < v10)
    {
      v9 = (int16x8_t *)(v10 - 16);
      v13 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v10 - 16), v12);
      v12.i16[0] = vmaxvq_u16((uint16x8_t)v13);
      if (v12.i32[0])
        goto LABEL_25;
    }
    return -1;
  }
  while (1)
  {
    v13 = (int8x16_t)vceqq_s16(*v9, v12);
    LOWORD(a6) = vmaxvq_u16((uint16x8_t)v13);
    if (a6 != 0.0)
      break;
    v14 = v9 + 1;
    v15 = &v9[1].i8[14];
    ++v9;
    if ((unint64_t)v15 >= v10)
      goto LABEL_23;
  }
LABEL_25:
  v9 = (int16x8_t *)((char *)v9
                   + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_1978CFB00, v13)));
LABEL_26:
  if (v9 == (int16x8_t *)v10)
    return -1;
  else
    return ((uint64_t)v9->i64 - v7) >> 1;
}

void WebKit::RemoteVideoDecoder::~RemoteVideoDecoder(uint64_t **this)
{
  WebKit::WebProcess *v2;
  WebKit::LibWebRTCCodecs *v3;
  void *v4;
  WTF **v5;
  WebKit::WebProcess *v6;

  *this = (uint64_t *)off_1E34E6F28;
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = WebKit::WebProcess::libWebRTCCodecs(v2);
  WebKit::LibWebRTCCodecs::releaseDecoder((uint64_t)v3, this[1]);
  v5 = (WTF **)this[2];
  this[2] = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v5, v4);
  WebCore::VideoDecoder::~VideoDecoder((WebCore::VideoDecoder *)this);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteVideoDecoder::~RemoteVideoDecoder(this);
  WTF::fastFree(v1, v2);
}

WTF::StringImpl *WebKit::RemoteVideoDecoder::decode(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  void *v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  WebKit::WebProcess *v38;
  WebKit::LibWebRTCCodecs *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *result;
  WTF *v42;
  WebKit::WebProcess *v43;
  WTF::StringImpl *v44;

  if (!*(_BYTE *)(a2 + 40))
    goto LABEL_74;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(v7 + 40);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = *(_QWORD *)(a2 + 24);
      if (v10 <= v8)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)(v7 + 32) + 8 * v3);
    if (v12)
    {
      for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == v8)
          {
            i[3] = v9;
            goto LABEL_74;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v16 = 0;
  v16[1] = v8;
  v16[2] = v8;
  v16[3] = v9;
  v17 = (float)(unint64_t)(*(_QWORD *)(v7 + 56) + 1);
  v18 = *(float *)(v7 + 64);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(v7 + 40);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v10)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 56) / *(float *)(v7 + 64));
      if (v10 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(v7 + 40);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          v24 = WTF::fastMalloc((WTF *)(8 * *(_QWORD *)&prime));
          v25 = *(WTF **)(v7 + 32);
          *(_QWORD *)(v7 + 32) = v24;
          if (v25)
            WTF::fastFree(v25, v23);
          v26 = 0;
          *(int8x8_t *)(v7 + 40) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = *(_QWORD **)(v7 + 48);
          if (v27)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v28) = v7 + 48;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  v35 = *(_QWORD *)(v7 + 32);
                  if (!*(_QWORD *)(v35 + 8 * v34))
                  {
                    *(_QWORD *)(v35 + 8 * v34) = v27;
                    goto LABEL_55;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)(v7 + 32) + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)(v7 + 32) + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_55:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        v42 = *(WTF **)(v7 + 32);
        *(_QWORD *)(v7 + 32) = 0;
        if (v42)
          WTF::fastFree(v42, v15);
        v10 = 0;
        *(_QWORD *)(v7 + 40) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v8)
        v3 = v8 % v10;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
  }
  v36 = *(_QWORD **)(*(_QWORD *)(v7 + 32) + 8 * v3);
  if (v36)
  {
    *v16 = *v36;
LABEL_72:
    *v36 = v16;
    goto LABEL_73;
  }
  *v16 = *(_QWORD *)(v7 + 48);
  *(_QWORD *)(v7 + 48) = v16;
  *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v3) = v7 + 48;
  if (*v16)
  {
    v37 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10)
        v37 %= v10;
    }
    else
    {
      v37 &= v10 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  ++*(_QWORD *)(v7 + 56);
LABEL_74:
  {
    v38 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v43 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v38 = WebKit::WebProcess::WebProcess(v43);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v38;
  }
  v39 = WebKit::WebProcess::libWebRTCCodecs(v38);
  WebKit::LibWebRTCCodecs::decodeFrame((uint64_t)v39, *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 24), *(const void **)a2, *(_QWORD *)(a2 + 8), *(unsigned __int16 *)(a1 + 24), *(unsigned __int16 *)(a1 + 26));
  v44 = 0;
  (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a3 + 16))(*a3, &v44);
  result = v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v40);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::RemoteVideoDecoder::flush(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v4;
  WebKit::LibWebRTCCodecs *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t result;
  WebKit::WebProcess *v12;
  _QWORD *v13;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = WebKit::WebProcess::libWebRTCCodecs(v4);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  *a2 = 0;
  v8 = *(unsigned int **)(a1 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34E7A10;
  v10[1] = v7;
  v10[2] = v8;
  v13 = v10;
  WebKit::LibWebRTCCodecs::flushDecoder((uint64_t)v5, v6, (uint64_t *)&v13);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteVideoDecoder::reset(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 16) + 24) = 1;
  return this;
}

uint64_t WebKit::RemoteVideoDecoder::close(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 16) + 24) = 1;
  return this;
}

void WebKit::RemoteVideoEncoder::~RemoteVideoEncoder(uint64_t **this)
{
  WebKit::WebProcess *v2;
  WebKit::LibWebRTCCodecs *v3;
  void *v4;
  WTF *v5;
  WebKit::WebProcess *v6;

  *this = (uint64_t *)off_1E34E6F68;
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = WebKit::WebProcess::libWebRTCCodecs(v2);
  WebKit::LibWebRTCCodecs::releaseEncoder((uint64_t)v3, this[1]);
  v5 = (WTF *)this[2];
  this[2] = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v5, v4);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteVideoEncoder::~RemoteVideoEncoder(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteVideoEncoder::encode(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  WebKit::WebProcess *v8;
  WebKit::LibWebRTCCodecs *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  WebKit::WebProcess *v23;
  _QWORD *v24;

  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = WebKit::WebProcess::libWebRTCCodecs(v8);
  v10 = *(uint64_t **)(a1 + 8);
  v12 = *a2;
  v11 = (uint64_t *)a2[1];
  v14 = a2[2];
  v13 = a2[3];
  v15 = *a4;
  *a4 = 0;
  v16 = *(unsigned int **)(a1 + 16);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v18 = &off_1E34E7AE8;
  v18[1] = v15;
  v18[2] = v16;
  v19 = *(_WORD *)(v12 + 34);
  v20 = *(_QWORD *)(v12 + 16);
  v21 = *(_QWORD *)(v12 + 24);
  v24 = v18;
  WebKit::LibWebRTCCodecs::encodeFrameInternal<WebCore::VideoFrame>((uint64_t)v9, v10, v12, a3, v19, v20, v21, v11, v14, v13, (uint64_t *)&v24);
  result = (uint64_t)v24;
  v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteVideoEncoder::setRates(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  WebKit::WebProcess *v7;
  unint64_t v8;
  WebKit::LibWebRTCCodecs *v9;
  WebKit::WebProcess *v11;
  unint64_t v12;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = a2;
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v11);
    a2 = v12;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = a2 / 0x3E8;
  v9 = WebKit::WebProcess::libWebRTCCodecs(v7);
  WebKit::LibWebRTCCodecs::setEncodeRates((uint64_t)v9, *(_QWORD *)(a1 + 8), v8, a4);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), a3);
  return 1;
}

uint64_t WebKit::RemoteVideoEncoder::flush(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v4;
  WebKit::LibWebRTCCodecs *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t result;
  WebKit::WebProcess *v12;
  _QWORD *v13;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = WebKit::WebProcess::libWebRTCCodecs(v4);
  v6 = *(uint64_t **)(a1 + 8);
  v7 = *a2;
  *a2 = 0;
  v8 = *(unsigned int **)(a1 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34E7B38;
  v10[1] = v7;
  v10[2] = v8;
  v13 = v10;
  WebKit::LibWebRTCCodecs::flushEncoder((uint64_t)v5, v6, (uint64_t *)&v13);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteVideoEncoder::reset(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 16) + 32) = 1;
  return this;
}

uint64_t WebKit::RemoteVideoEncoder::close(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 16) + 32) = 1;
  return this;
}

uint64_t WebKit::RemoteVideoFrameProxy::properties@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  uint64_t result;

  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a3 + 16);
  *(_BYTE *)(a4 + 32) = *(_BYTE *)(a3 + 32);
  *(_WORD *)(a4 + 34) = *(_WORD *)(a3 + 34);
  v6 = ceilf((*(float (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3));
  v8 = 0x7FFFFFFFLL;
  v9 = 0x80000000;
  if (v6 > -2147500000.0)
    v9 = (int)v6;
  if (v6 < 2147500000.0)
    v8 = v9;
  v10 = ceilf(v7);
  if (v10 >= 2147500000.0)
  {
    v11 = 0x7FFFFFFF00000000;
  }
  else if (v10 <= -2147500000.0)
  {
    v11 = 0x8000000000000000;
  }
  else
  {
    v11 = (unint64_t)(int)v10 << 32;
  }
  *(_QWORD *)(a4 + 36) = v11 | v8;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  *(_DWORD *)(a4 + 44) = result;
  *(_QWORD *)(a4 + 48) = *(_QWORD *)(a3 + 36);
  return result;
}

uint64_t WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(uint64_t a1, unsigned __int8 **a2, unsigned int *a3, uint64_t a4)
{
  _QWORD *v8;
  unsigned __int8 *v9;
  int v11;
  uint64_t v12;
  unsigned int v13;

  v8 = (_QWORD *)WebCore::VideoFrame::VideoFrame();
  *v8 = off_1E34E6FB0;
  v8[6] = 0;
  v9 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v9);
LABEL_5:
  ++*((_QWORD *)v9 + 1);
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_10:
  *(_QWORD *)(a1 + 56) = a2;
  v12 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)a4;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a4 + 36);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a4 + 44);
  do
    v13 = __ldaxr(a3);
  while (__stlxr(v13 + 1, a3));
  *(_QWORD *)(a1 + 112) = a3;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

void WebKit::RemoteVideoFrameProxy::~RemoteVideoFrameProxy(WebKit::RemoteVideoFrameProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  const void *v12;
  unsigned int *v13;
  unsigned __int8 **v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19[3];
  IPC::Encoder *v20;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    if (!*((_BYTE *)this + 88))
    {
      __break(1u);
      return;
    }
    v3 = *((_QWORD *)this + 8);
    v4 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v4 + 1;
    v5 = (unint64_t *)((char *)this + 72);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(0, v5));
    v19[0] = v3;
    v19[1] = v4;
    v19[2] = v6;
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 1394;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v20 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<IPC::ObjectIdentifierWriteReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode((IPC::Encoder *)v7, v19);
    IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v20, 1, 0);
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
  }
  v12 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v12)
    CFRelease(v12);
  v13 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v13)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v13);
  v14 = (unsigned __int8 **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v14);
  v15 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteVideoFrameProxy::~RemoteVideoFrameProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteVideoFrameProxy::pixelFormat(WebKit::RemoteVideoFrameProxy *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t WebKit::RemoteVideoFrameProxy::pixelBuffer(WebKit::RemoteVideoFrameProxy *this)
{
  WebKit::RemoteVideoFrameProxy *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  char isMainRunLoop;
  WebKit::WebProcess *v7;
  char v8;
  WebKit::RemoteVideoFrameProxy *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  IPC::Encoder *v17;
  int v18;
  unsigned __int8 v19;
  _QWORD *v20;
  CFTypeRef v21;
  IPC::Decoder *v22;
  CFTypeRef v23;
  IPC::Decoder *v24;
  int v25;
  void *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  CFTypeRef v31;
  const void *v32;
  CFTypeRef v33;
  const void *v34;
  CFTypeRef v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  WebKit::WebProcess *v40;
  WebKit::RemoteVideoFrameProxy *v41;
  CFTypeRef cf;
  CFTypeRef v43;
  int v44;
  IPC::Decoder *v45;
  int v46;
  IPC::Encoder *v47;
  uint64_t v48;
  char v49;

  do
  {
    v1 = this;
    this = (WebKit::RemoteVideoFrameProxy *)*((_QWORD *)this + 6);
  }
  while (this);
  v2 = (unsigned __int8 *)v1 + 120;
  if (__ldaxr((unsigned __int8 *)v1 + 120))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_6;
  }
  this = (WebKit::RemoteVideoFrameProxy *)MEMORY[0x19AEABB3C]((char *)v1 + 120);
LABEL_6:
  v4 = *((_QWORD *)v1 + 16);
  if (v4)
    goto LABEL_43;
  v5 = *((_QWORD *)v1 + 14);
  if (!v5)
  {
LABEL_39:
    WebCore::createBlackPixelBuffer((WebCore *)*((int *)v1 + 24));
    v33 = cf;
    cf = 0;
    v34 = (const void *)*((_QWORD *)v1 + 16);
    *((_QWORD *)v1 + 16) = v33;
    if (v34)
    {
      CFRelease(v34);
      v35 = cf;
      cf = 0;
      if (v35)
        CFRelease(v35);
    }
    v4 = *((_QWORD *)v1 + 16);
LABEL_43:
    v36 = __ldxr(v2);
    if (v36 == 1)
    {
      if (!__stlxr(0, v2))
        return v4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WebKit::RemoteVideoFrameProxy *)((char *)v1 + 120));
    return v4;
  }
  *((_QWORD *)v1 + 14) = 0;
  isMainRunLoop = WTF::isMainRunLoop(this);
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v40 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v40);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  if (*((_BYTE *)v7 + 763))
    v8 = 0;
  else
    v8 = isMainRunLoop;
  if ((v8 & 1) == 0)
  {
    v19 = *((_BYTE *)v7 + 763) == 0;
    LOWORD(v45) = 0;
    BYTE2(v45) = 0;
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v20 = off_1E34E7BB0;
    v20[1] = v1;
    v20[2] = &v45;
    cf = v20;
    WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getVideoFrameBuffer(*(unsigned __int8 **)(v5 + 8), (uint64_t)v1, v19, (unsigned __int8 *)&cf);
    v21 = cf;
    cf = 0;
    if (v21)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v21 + 8))(v21);
    cf = (CFTypeRef)0x7FF0000000000000;
    LODWORD(v43) = 0;
    WTF::BinarySemaphore::waitUntil();
LABEL_38:
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v5);
    v4 = *((_QWORD *)v1 + 16);
    if (v4)
      goto LABEL_43;
    goto LABEL_39;
  }
  v9 = (WebKit::RemoteVideoFrameProxy *)*((_QWORD *)v1 + 6);
  v10 = *((_QWORD *)v1 + 7);
  if (!v9)
  {
    v9 = v1;
    if (*((_BYTE *)v1 + 88))
      goto LABEL_16;
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (!*((_BYTE *)v9 + 88))
    goto LABEL_34;
LABEL_16:
  v11 = (unint64_t *)((char *)v9 + 72);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *((_QWORD *)v9 + 10);
  v14 = *((_QWORD *)v9 + 8);
  WTF::ApproximateTime::now(v7);
  v16 = v15 + 10.0;
  v48 = 0;
  IPC::Connection::createSyncMessageEncoder(3645, 0, &v48, (uint64_t *)&v47);
  v17 = v47;
  *(_QWORD *)IPC::Encoder::grow(v47, 8uLL, 8) = v14;
  *(_QWORD *)IPC::Encoder::grow(v17, 8uLL, 8) = v13;
  IPC::Connection::sendSyncMessage(v10, v48, (uint64_t *)&v47, 0, (uint64_t)&v45, v16);
  v18 = v46;
  if (v46)
  {
    if (v46 == 1)
    {
      LOBYTE(cf) = (_BYTE)v45;
LABEL_27:
      v44 = v18;
      v25 = v18;
      goto LABEL_28;
    }
  }
  else
  {
    v22 = v45;
    IPC::Decoder::decode<WTF::RetainPtr<__CVBuffer *>>(v45, (uint64_t)&cf);
    if (!(_BYTE)v43)
    {
      v26 = *(void **)v22;
      v38 = *((_QWORD *)v22 + 1);
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      v39 = *((_QWORD *)v22 + 3);
      if (v39 && v38)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v39 + 16))(v39, v26);
      LOBYTE(cf) = 13;
      v18 = 1;
      v44 = 1;
      v25 = v46;
      if (v46 == -1)
      {
LABEL_29:
        v27 = v47;
        v47 = 0;
        if (v27)
        {
          IPC::Encoder::~Encoder(v27, v26);
          WTF::fastFree(v28, v29);
        }
        if (v18)
        {
          v30 = 1;
LABEL_37:
          ((void (*)(IPC::Decoder **, CFTypeRef *))off_1E34E7320[v30])(&v45, &cf);
          goto LABEL_38;
        }
LABEL_35:
        v30 = 0;
        v31 = v43;
        v43 = 0;
        v32 = (const void *)*((_QWORD *)v1 + 16);
        *((_QWORD *)v1 + 16) = v31;
        if (v32)
        {
          CFRelease(v32);
          v30 = 0;
        }
        goto LABEL_37;
      }
LABEL_28:
      ((void (*)(char *, IPC::Decoder **))off_1E34E7BC8[v25])(&v49, &v45);
      goto LABEL_29;
    }
    if (!v46)
    {
      v23 = cf;
      v24 = v45;
      v45 = 0;
      cf = v24;
      v43 = v23;
      goto LABEL_27;
    }
  }
  v41 = (WebKit::RemoteVideoFrameProxy *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::RemoteVideoFrameProxy::clone(v41);
}

uint64_t WebKit::RemoteVideoFrameProxy::clone@<X0>(WebKit::RemoteVideoFrameProxy *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  WTF::fastMalloc((WTF *)0x88);
  result = WebCore::VideoFrame::VideoFrame();
  *(_QWORD *)result = off_1E34E6FB0;
  v5 = (unsigned int *)((char *)this + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(result + 48) = this;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = *((_QWORD *)this + 12);
  *(_DWORD *)(result + 104) = *((_DWORD *)this + 26);
  *(_QWORD *)(result + 112) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *a2 = result;
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
  if (v4)
    v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34E7BE8;
  v6[1] = v3;
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a1;
  v8 = v6;
  WebCore::SourceBufferPrivate::ensureOnDispatcher();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::SourceBufferPrivateRemote(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::ThreadSafeWeakPtrControlBlock *v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[4];

  WebKit::MediaSourcePrivateRemote::queue((WebKit::MediaSourcePrivateRemote *)a1);
  WebCore::SourceBufferPrivate::SourceBufferPrivate();
  *(_QWORD *)a1 = off_1E34E7010;
  v10 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v10)
    v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  *(_QWORD *)(a1 + 312) = v10;
  *(_QWORD *)(a1 + 320) = a2;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v11 = &off_1E34B0558;
  v11[1] = 0;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v12 + 24) = v11;
  v11[2] = v12;
  *v11 = off_1E34B3FB8;
  v13 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
  if (v13)
    v13 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v13);
  v11[3] = v13;
  v11[4] = a1;
  *(_QWORD *)(a1 + 328) = v11;
  *(_QWORD *)(a1 + 336) = a3;
  v14 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a5 + 48);
  if (v14)
    v14 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v14);
  *(_QWORD *)(a1 + 344) = v14;
  *(_QWORD *)(a1 + 352) = a5;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 367) = 0;
  *(_DWORD *)(a1 + 384) = 10000000;
  *(_BYTE *)(a1 + 388) = 1;
  *(_BYTE *)(a1 + 392) = 0;
  v15 = a4[29];
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(a1 + 400) = v15;
  v18 = a4[30];
  v19 = a4[31] + 1;
  a4[31] = v19;
  v20 = v18 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v19;
  *(_QWORD *)(a1 + 408) = v20;
  v24[0] = "SourceBufferPrivateRemote";
  v24[1] = 26;
  v24[2] = "SourceBufferPrivateRemote";
  v24[3] = v20;
  if (*(_BYTE *)(v15 + 12))
    v14 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v24);
  v21 = *(_QWORD *)(a2 + 24);
  v22 = WebKit::MediaSourcePrivateRemote::queue(v14);
  IPC::Connection::addWorkQueueMessageReceiver(v21, 0x8Au, v22, *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 336));
  return a1;
}

uint64_t WebKit::SourceBufferPrivateRemote::logger(WebKit::SourceBufferPrivateRemote *this)
{
  return *((_QWORD *)this + 50);
}

char *WebKit::SourceBufferPrivateRemote::logChannel(WebKit::SourceBufferPrivateRemote *this)
{
  return &WebKit2LogMedia;
}

const char *WebKit::SourceBufferPrivateRemote::logClassName(WebKit::SourceBufferPrivateRemote *this)
{
  return "SourceBufferPrivateRemote";
}

uint64_t WebKit::SourceBufferPrivateRemote::logIdentifier(WebKit::SourceBufferPrivateRemote *this)
{
  return *((_QWORD *)this + 51);
}

void WebKit::SourceBufferPrivateRemote::~SourceBufferPrivateRemote(WebKit::SourceBufferPrivateRemote *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _QWORD v14[4];

  v3 = *((_QWORD *)this + 50);
  v4 = *((_QWORD *)this + 51);
  v14[0] = "SourceBufferPrivateRemote";
  v14[1] = 26;
  v14[2] = "~SourceBufferPrivateRemote";
  v14[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 39);
  if (v5)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v5, *((_QWORD *)this + 40), v14);
    if (v14[0])
    {
      IPC::Connection::removeWorkQueueMessageReceiver(*(_QWORD *)(v14[0] + 24), 0x8Au, *((_QWORD *)this + 42));
      v6 = v14[0];
      v14[0] = 0;
      if (v6)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  v11 = (unsigned __int8 *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2);
  v12 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), a2);
  v13 = (unsigned __int8 *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  WebCore::SourceBufferPrivate::~SourceBufferPrivate(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::SourceBufferPrivateRemote::~SourceBufferPrivateRemote(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WebKit::SourceBufferPrivateRemote::append@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[4];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v6 = *(_QWORD *)(a1 + 32);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  v7 = *a2;
  *a2 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v16[2] = "append";
  v16[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v24, 0, (WTF::Logger::LogSiteIdentifier *)v16);
  v8 = v24;
  if (v24)
  {
    v9 = (unsigned int *)(v24 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = v24;
  }
  else
  {
    v11 = 0;
  }
  v24 = 0;
  v18 = v25;
  v19 = v26;
  v21 = a1;
  v12 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v12 = off_1E34E7358;
  *(_QWORD *)(v12 + 8) = v11;
  v17 = 0;
  v13 = v19;
  *(_OWORD *)(v12 + 16) = v18;
  *(_OWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 48) = a1;
  *(_QWORD *)(v12 + 56) = a1;
  *(_QWORD *)(v12 + 64) = v7;
  v23 = v12;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v23);
  v14 = v23;
  v23 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v22 = 0;
  v20 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v17);
  *a3 = v8;
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v24);
}

_QWORD *WebKit::SourceBufferPrivateRemote::abort(WebKit::SourceBufferPrivateRemote *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34E7C10;
  v2[1] = this;
  v4 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::resetParserState(WebKit::SourceBufferPrivateRemote *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34E7C38;
  v2[1] = this;
  v4 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

WTF::Lock *WebKit::SourceBufferPrivateRemote::appendInternal@<X0>(uint64_t *a1@<X8>)
{
  _QWORD v2[4];
  char v3;

  v3 = 4;
  v2[0] = 0;
  v2[1] = 0;
  v2[2] = "appendInternal";
  v2[3] = 0;
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>(&v3, (WTF::Logger::LogSiteIdentifier *)v2, a1);
}

_QWORD *WebKit::SourceBufferPrivateRemote::removedFromMediaSource(WebKit::SourceBufferPrivateRemote *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34E7C60;
  v2[1] = this;
  v4 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::isActive(WebKit::SourceBufferPrivateRemote *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 392);
  return v1 & 1;
}

uint64_t WebKit::SourceBufferPrivateRemote::setActive(WebKit::SourceBufferPrivateRemote *this, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  atomic_store(1u, (unsigned __int8 *)this + 392);
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E34E7C88;
  *(_QWORD *)(v4 + 8) = this;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::canSwitchToType(WebKit::SourceBufferPrivateRemote *this, const WebCore::ContentType *a2)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;

  v8 = 0;
  WTF::String::isolatedCopy();
  *(_QWORD *)&v6 = this;
  *((_QWORD *)&v6 + 1) = &v8;
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v3 = &off_1E34E7CB0;
  *(_QWORD *)(v3 + 8) = v5;
  *(_OWORD *)(v3 + 16) = v6;
  v7 = v3;
  WTF::callOnMainRunLoopAndWait();
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v8;
}

uint64_t WebKit::SourceBufferPrivateRemote::setMediaSourceEnded(WebKit::SourceBufferPrivateRemote *this, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E34E7CE8;
  *(_QWORD *)(v4 + 8) = this;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::setMode(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E34E7D10;
  *(_QWORD *)(v4 + 8) = a1;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(a1, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t *WebKit::SourceBufferPrivateRemote::removeCodedFrames@<X0>(WebKit::SourceBufferPrivateRemote *this@<X0>, const WTF::MediaTime *a2@<X1>, const WTF::MediaTime *a3@<X2>, const WTF::MediaTime *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v23[4];
  _QWORD v24[2];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[53];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 1);
  v11 = *(_QWORD *)a2;
  v23[3] = 0;
  v24[0] = v11;
  *(_QWORD *)((char *)v24 + 5) = *(_QWORD *)((char *)a2 + 5);
  *(_QWORD *)((char *)&v35 + 3) = *(_QWORD *)a3;
  *((_QWORD *)&v35 + 1) = *(_QWORD *)((char *)a3 + 5);
  *(_QWORD *)((char *)&v34 + 3) = *(_QWORD *)a4;
  *((_QWORD *)&v34 + 1) = *(_QWORD *)((char *)a4 + 5);
  v23[0] = 0;
  v23[1] = 0;
  v23[2] = "removeCodedFrames";
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v31, 0, (WTF::Logger::LogSiteIdentifier *)v23);
  v12 = v31;
  if (v31)
  {
    v13 = (unsigned int *)(v31 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = v31;
  }
  else
  {
    v15 = 0;
  }
  v31 = 0;
  v26 = v32;
  v27 = v33;
  *(_QWORD *)v29 = this;
  *(_QWORD *)&v29[8] = v24[0];
  *(_QWORD *)&v29[13] = *(_QWORD *)((char *)v24 + 5);
  *(_OWORD *)&v29[21] = v35;
  *(_OWORD *)&v29[37] = v34;
  v16 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v16 = off_1E34E7508;
  *(_QWORD *)(v16 + 8) = v15;
  v25 = 0;
  v17 = v27;
  *(_OWORD *)(v16 + 16) = v26;
  *(_OWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 48) = this;
  v18 = *(_QWORD *)&v29[45];
  v19 = *(_OWORD *)&v29[32];
  v20 = *(_OWORD *)v29;
  *(_OWORD *)(v16 + 72) = *(_OWORD *)&v29[16];
  *(_OWORD *)(v16 + 88) = v19;
  *(_QWORD *)(v16 + 101) = v18;
  *(_OWORD *)(v16 + 56) = v20;
  v30 = v16;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 16))(v10, &v30);
  v21 = v30;
  v30 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v28 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v25);
  *a5 = v12;
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v31);
}

uint64_t WebKit::SourceBufferPrivateRemote::evictCodedFrames(WebKit::SourceBufferPrivateRemote *this, WTF::String *a2, const WTF::MediaTime *a3)
{
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v12 = (unint64_t)a2;
  if (WebKit::SourceBufferPrivateRemote::canAppend(this))
  {
    result = WebKit::SourceBufferPrivateRemote::isBufferFullFor(this, a2);
    if ((_DWORD)result)
    {
      *(_QWORD *)&v9 = *(_QWORD *)a3;
      *(_QWORD *)((char *)&v9 + 5) = *(_QWORD *)((char *)a3 + 5);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v7 = off_1E34E7D38;
      v7[1] = this;
      v7[2] = a2;
      v7[3] = v9;
      *(_QWORD *)((char *)v7 + 29) = *(_QWORD *)((char *)&v9 + 5);
      v11 = v7;
      WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v11);
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      return 0;
    }
  }
  else
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v8 = off_1E34E7D60;
    v8[1] = this;
    v8[2] = &v12;
    v8[3] = a3;
    v10 = v8;
    WTF::callOnMainRunLoopAndWait();
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    return WebKit::SourceBufferPrivateRemote::isBufferFullFor(this, (WTF::String *)v12);
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::canAppend(WebKit::SourceBufferPrivateRemote *this)
{
  unsigned __int8 *v2;
  uint64_t canAppend;
  int v5;

  v2 = (unsigned __int8 *)this + 370;
  if (__ldaxr((unsigned __int8 *)this + 370))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 370);
LABEL_5:
  canAppend = WebCore::SourceBufferPrivate::canAppend(this);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return canAppend;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return canAppend;
}

uint64_t WebKit::SourceBufferPrivateRemote::isBufferFullFor(WebKit::SourceBufferPrivateRemote *this, WTF::String *a2)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  WTF *v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t i;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  uint64_t isBufferFullFor;
  int v31;
  uint64_t v32;
  _QWORD v34[4];
  WTF *v35[2];
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint8_t buf[16];
  int v46;
  _DWORD v47[8];
  _DWORD v48[4];
  _QWORD v49[3];

  v49[1] = *MEMORY[0x1E0C80C00];
  v3 = (unsigned __int8 *)this + 370;
  if (__ldaxr((unsigned __int8 *)this + 370))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 370);
LABEL_5:
  v5 = *((_QWORD *)this + 50);
  v6 = *((_QWORD *)this + 51);
  v34[0] = "SourceBufferPrivateRemote";
  v34[1] = 26;
  v34[2] = "isBufferFullFor";
  v34[3] = v6;
  if (!*(_BYTE *)(v5 + 12))
    goto LABEL_60;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v34);
  WTF::String::String((WTF::String *)&v39, "requiredSize:");
  WTF::String::number(a2);
  WTF::String::String((WTF::String *)&v37, " evictionData:");
  WTF::makeString<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(&v36, *((_QWORD *)this + 5), *((_QWORD *)this + 6), *((_QWORD *)this + 7), *((_QWORD *)this + 8));
  v35[0] = v39;
  v44 = v38;
  *(_QWORD *)buf = v40;
  v7 = (WTF::StringImpl *)v36;
  v42 = v36;
  v43 = v37;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v35, (uint64_t *)&v44, (uint64_t *)&v43, &v42, &v41);
  if (v41)
  {
    v36 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v9);
      else
        *(_DWORD *)v7 -= 2;
    }
    v10 = v37;
    v37 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v38;
    v38 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v39;
    v39 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v40;
    v40 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = qword_1ECE71348;
    v15 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v15)
    {
      WTF::String::utf8();
      v17 = v35[0] ? (char *)v35[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v15 = v35[0];
      v35[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          v15 = (WTF *)WTF::fastFree(v15, v16);
        else
          --*(_DWORD *)v15;
      }
    }
    if (WebKit2LogMedia)
    {
      v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v19 = *v18;
        if ((v19 & 1) != 0)
          break;
        v20 = __ldaxr(v18);
        if (v20 == v19)
        {
          if (!__stxr(v19 | 1, v18))
          {
            v21 = WTF::Logger::observers(v15);
            v22 = *(unsigned int *)(v21 + 12);
            if ((_DWORD)v22)
            {
              v23 = *(uint64_t **)v21;
              v32 = *(_QWORD *)v21 + 8 * v22;
              do
              {
                v24 = *v23;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v34);
                v46 = 0;
                WTF::String::String((WTF::String *)v47, "requiredSize:");
                v47[2] = 0;
                WTF::String::number(a2);
                v47[6] = 0;
                WTF::String::String((WTF::String *)v48, " evictionData:");
                v48[2] = 0;
                WTF::makeString<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(v49, *((_QWORD *)this + 5), *((_QWORD *)this + 6), *((_QWORD *)this + 7), *((_QWORD *)this + 8));
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v35, (uint64_t)buf, 5uLL);
                (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v24 + 16))(v24, &WebKit2LogMedia, 0, v35);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v25);
                for (i = 72; i != -8; i -= 16)
                {
                  v27 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2)
                      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v27 -= 2;
                  }
                }
                ++v23;
              }
              while (v23 != (uint64_t *)v32);
            }
            v28 = __ldxr(v18);
            if (v28 == 1)
            {
              if (!__stlxr(0, v18))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v29 = v41;
    v41 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v29 -= 2;
    }
LABEL_60:
    isBufferFullFor = WebCore::SourceBufferPrivate::isBufferFullFor(this);
    v31 = __ldxr(v3);
    if (v31 == 1)
    {
      if (!__stlxr(0, v3))
        return isBufferFullFor;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return isBufferFullFor;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::addTrackBuffer(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34E7D98;
  v4[1] = a1;
  v4[2] = a2;
  v6 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(a1, (uint64_t *)&v6);
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::resetTrackBuffers(WebKit::SourceBufferPrivateRemote *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34E7DC0;
  v2[1] = this;
  v4 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::clearTrackBuffers(WebKit::SourceBufferPrivateRemote *this)
{
  unsigned __int8 *v2;
  int v4;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;

  v2 = (unsigned __int8 *)this + 370;
  if (__ldaxr((unsigned __int8 *)this + 370))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 370);
LABEL_5:
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v4 = __ldxr(v2);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34E7DE8;
  v5[1] = this;
  v7 = v5;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v7);
  result = v7;
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::setAllTrackBuffersNeedRandomAccess(WebKit::SourceBufferPrivateRemote *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34E7E10;
  v2[1] = this;
  v4 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::setGroupStartTimestamp(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  _QWORD *v3;
  _QWORD *result;
  __int128 v5;
  _QWORD *v6;

  *(_QWORD *)&v5 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v5 + 5) = *(_QWORD *)((char *)a2 + 5);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v3 = off_1E34E7E38;
  v3[1] = this;
  v3[2] = v5;
  *(_QWORD *)((char *)v3 + 21) = *(_QWORD *)((char *)&v5 + 5);
  v6 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v6);
  result = v6;
  if (v6)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::setGroupStartTimestampToEndTimestamp(WebKit::SourceBufferPrivateRemote *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34E7E60;
  v2[1] = this;
  v4 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::setShouldGenerateTimestamps(WebKit::SourceBufferPrivateRemote *this, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E34E7E88;
  *(_QWORD *)(v4 + 8) = this;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::reenqueueMediaIfNeeded(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  _QWORD *v3;
  _QWORD *result;
  __int128 v5;
  _QWORD *v6;

  *(_QWORD *)&v5 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v5 + 5) = *(_QWORD *)((char *)a2 + 5);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v3 = off_1E34E7EB0;
  v3[1] = this;
  v3[2] = v5;
  *(_QWORD *)((char *)v3 + 21) = *(_QWORD *)((char *)&v5 + 5);
  v6 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v6);
  result = v6;
  if (v6)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::resetTimestampOffsetInTrackBuffers(WebKit::SourceBufferPrivateRemote *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34E7ED8;
  v2[1] = this;
  v4 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::startChangingType(WebKit::SourceBufferPrivateRemote *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34E7F00;
  v2[1] = this;
  v4 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::timestampOffset(WebKit::SourceBufferPrivateRemote *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v2 = (unsigned __int8 *)this + 370;
  if (__ldaxr((unsigned __int8 *)this + 370))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 370);
LABEL_5:
  v4 = *((_QWORD *)this + 47);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4;
}

_QWORD *WebKit::SourceBufferPrivateRemote::setTimestampOffset(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *result;
  __int128 v10;
  _QWORD *v11;

  v4 = (unsigned __int8 *)this + 370;
  if (__ldaxr((unsigned __int8 *)this + 370))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 370);
LABEL_5:
  v6 = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + 381) = *(_QWORD *)((char *)a2 + 5);
  *((_QWORD *)this + 47) = v6;
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  *(_QWORD *)&v10 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v10 + 5) = *(_QWORD *)((char *)a2 + 5);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34E7F28;
  v8[1] = this;
  v8[2] = v10;
  *(_QWORD *)((char *)v8 + 21) = *(_QWORD *)((char *)&v10 + 5);
  v11 = v8;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v11);
  result = v11;
  if (v11)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::setAppendWindowStart(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  _QWORD *v3;
  _QWORD *result;
  __int128 v5;
  _QWORD *v6;

  *(_QWORD *)&v5 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v5 + 5) = *(_QWORD *)((char *)a2 + 5);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v3 = off_1E34E7F50;
  v3[1] = this;
  v3[2] = v5;
  *(_QWORD *)((char *)v3 + 21) = *(_QWORD *)((char *)&v5 + 5);
  v6 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v6);
  result = v6;
  if (v6)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

_QWORD *WebKit::SourceBufferPrivateRemote::setAppendWindowEnd(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  _QWORD *v3;
  _QWORD *result;
  __int128 v5;
  _QWORD *v6;

  *(_QWORD *)&v5 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v5 + 5) = *(_QWORD *)((char *)a2 + 5);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v3 = off_1E34E7F78;
  v3[1] = this;
  v3[2] = v5;
  *(_QWORD *)((char *)v3 + 21) = *(_QWORD *)((char *)&v5 + 5);
  v6 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v6);
  result = v6;
  if (v6)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::setMaximumBufferSize@<X0>(WebKit::SourceBufferPrivateRemote *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v6;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v16;
  _BYTE v17[24];
  __int128 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  __int128 v21;
  __int128 v22;

  v6 = (unsigned __int8 *)this + 370;
  if (__ldaxr((unsigned __int8 *)this + 370))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 370);
LABEL_5:
  *((_QWORD *)this + 7) = a2;
  v8 = __ldxr(v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  v16 = 0uLL;
  *(_QWORD *)v17 = "setMaximumBufferSize";
  *(_QWORD *)&v17[8] = 0;
  v9 = WTF::fastMalloc((WTF *)0x78);
  v20 = (unsigned __int8 *)WTF::NativePromise<void,void,0u>::NativePromise(v9, &v16);
  v21 = v16;
  v22 = *(_OWORD *)v17;
  WTF::NativePromise<void,void,0u>::setDispatchMode(v20, 0, (WTF::Logger::LogSiteIdentifier *)&v16);
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = v20;
  *a3 = v9;
  *(_QWORD *)&v16 = this;
  *((_QWORD *)&v16 + 1) = a2;
  v20 = 0;
  *(_OWORD *)&v17[8] = v21;
  v18 = v22;
  v13 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v13 = off_1E34E7FA0;
  *(_OWORD *)(v13 + 8) = v16;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = v18;
  *(_OWORD *)(v13 + 32) = *(_OWORD *)&v17[8];
  *(_OWORD *)(v13 + 48) = v14;
  v19 = v13;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, &v19);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer((uint64_t *)v17);
  return WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer((uint64_t *)&v20);
}

uint64_t *WebKit::SourceBufferPrivateRemote::computeSeekTime@<X0>(WebKit::SourceBufferPrivateRemote *this@<X0>, const WebCore::SeekTarget *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v6 = *((_QWORD *)this + 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 1);
  v7 = *((_OWORD *)a2 + 1);
  v20 = *(_OWORD *)a2;
  v21 = v7;
  v22 = *((_OWORD *)a2 + 2);
  v19[0] = 0;
  v19[1] = 0;
  v19[2] = "computeSeekTime";
  v19[3] = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v29, 0, (WTF::Logger::LogSiteIdentifier *)v19);
  v8 = v29;
  if (v29)
  {
    v9 = (unsigned int *)(v29 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = v29;
  }
  else
  {
    v11 = 0;
  }
  v29 = 0;
  v24 = v30;
  v25 = v31;
  *(_QWORD *)v27 = this;
  *(_OWORD *)&v27[8] = v20;
  *(_OWORD *)&v27[24] = v21;
  *(_OWORD *)&v27[40] = v22;
  v12 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v12 = off_1E34E7580;
  *(_QWORD *)(v12 + 8) = v11;
  v23 = 0;
  v13 = v25;
  *(_OWORD *)(v12 + 16) = v24;
  *(_OWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 48) = this;
  v14 = *(_QWORD *)&v27[48];
  v15 = *(_OWORD *)&v27[32];
  v16 = *(_OWORD *)v27;
  *(_OWORD *)(v12 + 72) = *(_OWORD *)&v27[16];
  *(_OWORD *)(v12 + 88) = v15;
  *(_QWORD *)(v12 + 104) = v14;
  *(_OWORD *)(v12 + 56) = v16;
  v28 = v12;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v28);
  v17 = v28;
  v28 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v26 = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v23);
  *a3 = v8;
  return WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v29);
}

_QWORD *WebKit::SourceBufferPrivateRemote::seekToTime(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  _QWORD *v3;
  _QWORD *result;
  __int128 v5;
  _QWORD *v6;

  *(_QWORD *)&v5 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v5 + 5) = *(_QWORD *)((char *)a2 + 5);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v3 = off_1E34E8070;
  v3[1] = this;
  v3[2] = v5;
  *(_QWORD *)((char *)v3 + 21) = *(_QWORD *)((char *)&v5 + 5);
  v6 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v6);
  result = v6;
  if (v6)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::updateTrackIds(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v3 = *a2;
  v4 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34E8098;
  v5[1] = a1;
  v5[2] = v3;
  v5[3] = v4;
  v7 = v5;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(a1, (uint64_t *)&v7);
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

uint64_t *WebKit::SourceBufferPrivateRemote::bufferedSamplesForTrackId@<X0>(WebKit::SourceBufferPrivateRemote *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v6 = *((_QWORD *)this + 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 1);
  v15[0] = 0;
  v15[1] = 0;
  v15[2] = "bufferedSamplesForTrackId";
  v15[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v22, (WTF::Logger::LogSiteIdentifier *)v15);
  v7 = v22;
  if (v22)
  {
    v8 = (unsigned int *)(v22 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = v22;
  }
  else
  {
    v10 = 0;
  }
  v22 = 0;
  v17 = v23;
  v18 = v24;
  *(_QWORD *)&v20 = this;
  *((_QWORD *)&v20 + 1) = a2;
  v11 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v11 = off_1E34E7648;
  *(_QWORD *)(v11 + 8) = v10;
  v16 = 0;
  v12 = v18;
  *(_OWORD *)(v11 + 16) = v17;
  *(_OWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 48) = this;
  *(_OWORD *)(v11 + 56) = v20;
  v21 = v11;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v19 = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v16);
  *a3 = v7;
  return WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v22);
}

uint64_t *WebKit::SourceBufferPrivateRemote::enqueuedSamplesForTrackID@<X0>(WebKit::SourceBufferPrivateRemote *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v6 = *((_QWORD *)this + 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 1);
  v15[0] = 0;
  v15[1] = 0;
  v15[2] = "enqueuedSamplesForTrackID";
  v15[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v22, (WTF::Logger::LogSiteIdentifier *)v15);
  v7 = v22;
  if (v22)
  {
    v8 = (unsigned int *)(v22 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = v22;
  }
  else
  {
    v10 = 0;
  }
  v22 = 0;
  v17 = v23;
  v18 = v24;
  *(_QWORD *)&v20 = this;
  *((_QWORD *)&v20 + 1) = a2;
  v11 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v11 = off_1E34E76F8;
  *(_QWORD *)(v11 + 8) = v10;
  v16 = 0;
  v12 = v18;
  *(_OWORD *)(v11 + 16) = v17;
  *(_OWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 48) = this;
  *(_OWORD *)(v11 + 56) = v20;
  v21 = v11;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v19 = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v16);
  *a3 = v7;
  return WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v22);
}

unsigned __int8 *WebKit::SourceBufferPrivateRemote::MessageReceiver::client@<X0>(WebKit::SourceBufferPrivateRemote::MessageReceiver *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  WebCore::SourceBufferPrivate *v6;
  WebCore::SourceBufferPrivate *v7;

  result = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (!result)
    goto LABEL_8;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 4), &v7);
  result = (unsigned __int8 *)v7;
  if (!v7)
    goto LABEL_8;
  result = (unsigned __int8 *)WebCore::SourceBufferPrivate::client(v7);
  v5 = *a2;
  if (!*a2)
    *a2 = 0;
  v6 = v7;
  v7 = 0;
  if (v6)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 1));
  if (!v5)
LABEL_8:
    *a2 = 0;
  return result;
}

unsigned __int8 *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidReceiveInitializationSegment(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  _QWORD *v14;
  unsigned __int32 v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *result;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unsigned int **v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unsigned int **v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int *v43;
  WebKit::MediaSourcePrivateRemote *v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  void *v52;
  void *v53;
  WebKit::MediaPlayerPrivateRemote *v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  const char *v58;
  uint64_t v59;
  __n128 v60[3];
  _BYTE v61[13];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  WebKit::MediaPlayerPrivateRemote *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;

  WebKit::MediaSourcePrivateRemote::queue(a1);
  v6 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v6, *((_QWORD *)a1 + 4), &v68);
  else
    v68 = 0;
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(a1, &v67);
  if (!v67)
  {
    *(_WORD *)v61 = 259;
    v18 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 16))(v18, v61);
    result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    goto LABEL_42;
  }
  v7 = *(unsigned __int8 **)(v68 + 344);
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v7, *(_QWORD *)(v68 + 352), &v66);
    if (v66)
    {
      v65 = 0;
      v63 = 0u;
      v64 = 0u;
      *(_QWORD *)v61 = *(_QWORD *)a2;
      *(_QWORD *)&v61[5] = *(_QWORD *)(a2 + 5);
      v57 = 0uLL;
      v9 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v9)
      {
        if (v9 >> 28)
        {
          __break(0xC471u);
          goto LABEL_50;
        }
        v10 = WTF::fastMalloc((WTF *)(16 * v9));
        v57.n128_u32[2] = v9;
        v57.n128_u64[0] = v10;
        v11 = *(unsigned int *)(a2 + 28);
        if ((_DWORD)v11)
        {
          v12 = *(unint64_t **)(a2 + 16);
          v13 = &v12[3 * v11];
          v14 = (_QWORD *)(v10 + 8);
          v15 = ((unint64_t)(8 * v11 - 8) >> 3) + 1;
          do
          {
            WebKit::RemoteMediaDescription::create((WebKit::RemoteMediaDescription *)&v70, (const WebKit::MediaDescriptionInfo *)v12);
            v16 = v70;
            WebKit::MediaPlayerPrivateRemote::audioTrackPrivateRemote(v66, v12[2], &v69);
            v17 = v69;
            *(v14 - 1) = v16;
            *v14 = v17;
            v14 += 2;
            v12 += 3;
          }
          while (v12 != v13);
          v10 = v57.n128_u64[0];
          LODWORD(v9) = v57.n128_u32[2];
        }
        else
        {
          v15 = v57.n128_u32[3];
        }
      }
      else
      {
        v15 = 0;
        v10 = 0;
      }
      v57 = 0uLL;
      v62 = v10;
      *(_QWORD *)&v63 = __PAIR64__(v15, v9);
      WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v8);
      v23 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v23)
      {
        if (v23 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1975902FCLL);
        }
        v24 = WTF::fastMalloc((WTF *)(16 * v23));
        v25 = v24;
        v26 = *(unsigned int *)(a2 + 44);
        if ((_DWORD)v26)
        {
          v27 = *(unint64_t **)(a2 + 32);
          v28 = &v27[3 * v26];
          v29 = (unsigned int **)(v24 + 8);
          v30 = ((unint64_t)(8 * v26 - 8) >> 3) + 1;
          do
          {
            WebKit::RemoteMediaDescription::create((WebKit::RemoteMediaDescription *)&v57, (const WebKit::MediaDescriptionInfo *)v27);
            v31 = v57.n128_u64[0];
            WebKit::MediaPlayerPrivateRemote::videoTrackPrivateRemote(v66, v27[2], &v70);
            v32 = v70;
            *(v29 - 1) = (unsigned int *)v31;
            *v29 = v32;
            v29 += 2;
            v27 += 3;
          }
          while (v27 != v28);
        }
        else
        {
          v30 = 0;
        }
      }
      else
      {
        v30 = 0;
        v25 = 0;
      }
      v57 = 0uLL;
      *((_QWORD *)&v63 + 1) = v25;
      *(_QWORD *)&v64 = __PAIR64__(v30, v23);
      WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v22);
      v34 = *(unsigned int *)(a2 + 60);
      if (!(_DWORD)v34)
      {
        v41 = 0;
        v36 = 0;
LABEL_34:
        v57 = 0uLL;
        *((_QWORD *)&v64 + 1) = v36;
        v65 = __PAIR64__(v41, v34);
        WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v33);
        v44 = (WebKit::MediaSourcePrivateRemote *)(*(_QWORD *(**)(unsigned int **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v67 + 16))(&v70, v67, v61);
        v45 = (unint64_t)v70;
        v46 = WebKit::MediaSourcePrivateRemote::queue(v44);
        v57 = 0uLL;
        v58 = "sourceBufferPrivateDidReceiveInitializationSegment";
        v59 = 0;
        WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&)>>(v45, v46 + 32, a3, &v57, v60);
        WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v60);
        v48 = v70;
        v70 = 0;
        if (v48)
        {
          v49 = v48 + 2;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
          {
            atomic_store(1u, v48 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 16))(v48);
          }
        }
        WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64 + 8, v47);
        WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63 + 8, v52);
        result = (unsigned __int8 *)WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v53);
        goto LABEL_40;
      }
      if (!(v34 >> 28))
      {
        v35 = WTF::fastMalloc((WTF *)(16 * v34));
        v36 = v35;
        v37 = *(unsigned int *)(a2 + 60);
        if ((_DWORD)v37)
        {
          v38 = *(unint64_t **)(a2 + 48);
          v39 = &v38[3 * v37];
          v40 = (unsigned int **)(v35 + 8);
          v41 = ((unint64_t)(8 * v37 - 8) >> 3) + 1;
          do
          {
            WebKit::RemoteMediaDescription::create((WebKit::RemoteMediaDescription *)&v57, (const WebKit::MediaDescriptionInfo *)v38);
            v42 = v57.n128_u64[0];
            WebKit::MediaPlayerPrivateRemote::textTrackPrivateRemote(v66, v38[2], &v70);
            v43 = v70;
            *(v40 - 1) = (unsigned int *)v42;
            *v40 = v43;
            v40 += 2;
            v38 += 3;
          }
          while (v38 != v39);
        }
        else
        {
          v41 = 0;
        }
        goto LABEL_34;
      }
      __break(0xC471u);
LABEL_50:
      JUMPOUT(0x1975902F4);
    }
  }
  else
  {
    v66 = 0;
  }
  *(_WORD *)v61 = 259;
  v21 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 16))(v21, v61);
  result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_40:
  v54 = v66;
  v66 = 0;
  if (v54)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((unsigned __int8 **)v54 + 6));
LABEL_42:
  v55 = v67;
  v67 = 0;
  if (v55)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v55 + 8), v20);
  v56 = v68;
  v68 = 0;
  if (v56)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v56 + 8));
  return result;
}

unsigned __int8 *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateEvictionDataChanged(WebKit::MediaSourcePrivateRemote *a1, _OWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 *result;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  WebKit::MediaSourcePrivateRemote::queue(a1);
  v4 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  if (!v4)
    goto LABEL_14;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v4, *((_QWORD *)a1 + 4), &v13);
  if (!v13)
    goto LABEL_14;
  v5 = (unsigned __int8 *)(v13 + 370);
  if (__ldaxr((unsigned __int8 *)(v13 + 370)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C](v5);
LABEL_7:
  v7 = v13;
  v8 = a2[1];
  *(_OWORD *)(v13 + 40) = *a2;
  *(_OWORD *)(v7 + 56) = v8;
  LODWORD(v7) = __ldxr(v5);
  if ((_DWORD)v7 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v5))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v9 = v13;
  v13 = 0;
  if (v9)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 8));
LABEL_14:
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(a1, &v13);
  result = (unsigned __int8 *)v13;
  if (v13)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v13 + 64))(v13, a2);
    v12 = v13;
    v13 = 0;
    if (v12)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 8), v11);
  }
  return result;
}

unsigned __int8 *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateHighestPresentationTimestampChanged(WebKit::SourceBufferPrivateRemote::MessageReceiver *this, const WTF::MediaTime *a2)
{
  unsigned __int8 *result;
  void *v5;
  uint64_t v6;
  unsigned __int8 *v7;

  WebKit::MediaSourcePrivateRemote::queue(this);
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(this, (uint64_t *)&v7);
  result = v7;
  if (v7)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, const WTF::MediaTime *))(*(_QWORD *)v7 + 40))(v7, a2);
    v6 = (uint64_t)v7;
    v7 = 0;
    if (v6)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), v5);
  }
  return result;
}

unsigned int *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDurationChanged(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::MediaSourcePrivateRemote *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  const char *v17;
  uint64_t v18;
  unsigned int *v19;
  __n128 v20[3];
  uint64_t v21;

  WebKit::MediaSourcePrivateRemote::queue(a1);
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(a1, &v21);
  if (v21)
  {
    v6 = (WebKit::MediaSourcePrivateRemote *)(*(_QWORD *(**)(unsigned int **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(&v19, v21, a2);
    v7 = (unint64_t)v19;
    v8 = WebKit::MediaSourcePrivateRemote::queue(v6);
    v16 = 0uLL;
    v17 = "sourceBufferPrivateDurationChanged";
    v18 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(void)>>(v7, v8 + 32, a3, &v16, v20);
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v20);
    result = v19;
    v19 = 0;
    if (result)
    {
      v11 = result + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
    }
    v14 = v21;
    v21 = 0;
    if (v14)
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 8), v9);
  }
  else
  {
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

unsigned int *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateBufferedChanged(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::MediaSourcePrivateRemote *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  const char *v17;
  uint64_t v18;
  unsigned int *v19;
  __n128 v20[3];
  uint64_t v21;

  WebKit::MediaSourcePrivateRemote::queue(a1);
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(a1, &v21);
  if (v21)
  {
    v6 = (WebKit::MediaSourcePrivateRemote *)(*(_QWORD *(**)(unsigned int **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(&v19, v21, a2);
    v7 = (unint64_t)v19;
    v8 = WebKit::MediaSourcePrivateRemote::queue(v6);
    v16 = 0uLL;
    v17 = "sourceBufferPrivateBufferedChanged";
    v18 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(void)>>(v7, v8 + 32, a3, &v16, v20);
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v20);
    result = v19;
    v19 = 0;
    if (result)
    {
      v11 = result + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
    }
    v14 = v21;
    v21 = 0;
    if (v14)
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 8), v9);
  }
  else
  {
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

unsigned __int8 *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidDropSample(WebKit::SourceBufferPrivateRemote::MessageReceiver *this)
{
  unsigned __int8 *result;
  void *v2;
  uint64_t v3;
  unsigned __int8 *v4;

  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(this, (uint64_t *)&v4);
  result = v4;
  if (v4)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 48))(v4);
    v3 = (uint64_t)v4;
    v4 = 0;
    if (v3)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), v2);
  }
  return result;
}

unsigned __int8 *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidReceiveRenderingError(WebKit::SourceBufferPrivateRemote::MessageReceiver *this, uint64_t a2)
{
  unsigned __int8 *result;
  void *v4;
  uint64_t v5;
  unsigned __int8 *v6;

  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(this, (uint64_t *)&v6);
  result = v6;
  if (v6)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v6 + 56))(v6, a2);
    v5 = (uint64_t)v6;
    v6 = 0;
    if (v5)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 8), v4);
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateShuttingDown(WebKit::MediaSourcePrivateRemote *a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  WebKit::MediaSourcePrivateRemote::queue(a1);
  v4 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v4, *((_QWORD *)a1 + 4), &v8);
    v5 = v8;
    if (v8)
    {
      atomic_store(1u, (unsigned __int8 *)(v8 + 368));
      v8 = 0;
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 8));
    }
  }
  v6 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebKit::SourceBufferPrivateRemote::totalTrackBufferSizeInBytes(WebKit::SourceBufferPrivateRemote *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t WebKit::SourceBufferPrivateRemote::memoryPressure(unsigned __int8 **this, const WTF::MediaTime *a2)
{
  _QWORD *v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 1);
  *(_QWORD *)&v6 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v6 + 5) = *(_QWORD *)((char *)a2 + 5);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v4 = &off_1E34E8130;
  v4[1] = this;
  v4[2] = this;
  v4[3] = v6;
  *(_QWORD *)((char *)v4 + 29) = *(_QWORD *)((char *)&v6 + 5);
  v7 = (uint64_t)v4;
  WebCore::SourceBufferPrivate::ensureOnDispatcher();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::minimumUpcomingPresentationTimeForTrackID(WebKit::SourceBufferPrivateRemote *this, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;

  v6 = a2;
  v7 = *(_OWORD *)WTF::MediaTime::invalidTime(this);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v3 = off_1E34E8158;
  v3[1] = this;
  v3[2] = &v6;
  v3[3] = &v7;
  v5 = v3;
  WTF::callOnMainRunLoopAndWait();
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  return v7;
}

uint64_t WebKit::SourceBufferPrivateRemote::setMaximumQueueDepthForTrackID(unsigned __int8 **this, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 1);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34E8190;
  v6[1] = this;
  v6[2] = this;
  v6[3] = a2;
  v6[4] = a3;
  v8 = (uint64_t)v6;
  WebCore::SourceBufferPrivate::ensureOnDispatcher();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::TextTrackPrivateRemote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  WTF::ThreadSafeWeakPtrControlBlock *v9;
  const WTF::StringImpl *v10;

  v8 = *(_BYTE *)(a4 + 52);
  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 49) = 0;
  *(_QWORD *)a1 = off_1E34E7248;
  v9 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v9)
    v9 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v9);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)WTF::MediaTime::zeroTime(v9);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)a4;
  *(_QWORD *)(a1 + 128) = a3;
  *(_DWORD *)(a1 + 136) = 6;
  *(_WORD *)(a1 + 140) = 1;
  *(_BYTE *)(a1 + 142) = 0;
  WebKit::TextTrackPrivateRemote::updateConfiguration(a1, (uint64_t *)a4, v10);
  return a1;
}

WTF::StringImpl **WebKit::TextTrackPrivateRemote::updateConfiguration(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  WTF::StringImpl **result;
  uint64_t v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v5 = *a2;
  if (*a2 != *(_QWORD *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 120) = v5;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E34E81B8;
    v6[1] = v5;
    v17 = v6;
    WebCore::TrackPrivateBase::notifyClients();
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  v7 = a1 + 72;
  if ((WTF::equal((WTF *)a2[1], *(const WTF::StringImpl **)(a1 + 72), a3) & 1) == 0)
  {
    if (*(_QWORD *)v7)
    {
      v9 = *(_DWORD *)(*(_QWORD *)v7 + 4);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 1));
      if (v9)
      {
        WTF::String::isolatedCopy();
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = &off_1E34E81E0;
        v18 = v10;
        v10[1] = v16;
        WebCore::TrackPrivateBase::notifyClients();
        if (v18)
          (*(void (**)(_QWORD *))(*v18 + 8))(v18);
        v16 = 0;
      }
    }
    else
    {
      WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 1));
    }
  }
  v11 = a1 + 80;
  if ((WTF::equal((WTF *)a2[2], *(const WTF::StringImpl **)(a1 + 80), v8) & 1) == 0)
  {
    if (*(_QWORD *)v11)
    {
      v12 = *(_DWORD *)(*(_QWORD *)v11 + 4);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 80), (WTF::StringImpl *)(a2 + 2));
      if (v12)
      {
        WTF::String::isolatedCopy();
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = &off_1E34E8208;
        v19 = v13;
        v13[1] = v16;
        WebCore::TrackPrivateBase::notifyClients();
        if (v19)
          (*(void (**)(_QWORD *))(*v19 + 8))(v19);
      }
    }
    else
    {
      WTF::String::operator=((WTF::StringImpl **)(a1 + 80), (WTF::StringImpl *)(a2 + 2));
    }
  }
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 12);
  result = WTF::String::operator=((WTF::StringImpl **)(a1 + 96), (WTF::StringImpl *)(a2 + 3));
  v15 = a2[4];
  *(_QWORD *)(a1 + 109) = *(uint64_t *)((char *)a2 + 37);
  *(_QWORD *)(a1 + 104) = v15;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)((char *)a2 + 53);
  *(_BYTE *)(a1 + 140) = *((_BYTE *)a2 + 57);
  *(_WORD *)(a1 + 141) = *((_WORD *)a2 + 29);
  return result;
}

unsigned __int8 *WebKit::TextTrackPrivateRemote::setMode(uint64_t a1, int a2)
{
  unsigned __int8 *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;

  result = *(unsigned __int8 **)(a1 + 56);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 64), &v13);
    v6 = v13;
    if (v13)
    {
      if (*(unsigned __int8 *)(a1 + 49) == a2)
      {
        v13 = 0;
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v5);
      }
      v7 = *(_QWORD *)(v13 + 24);
      v8 = *(_QWORD *)(a1 + 120);
      v9 = *(_QWORD *)(a1 + 128);
      v10 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v10 = 1175;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(v10 + 528) = v10 + 16;
      *(_QWORD *)(v10 + 536) = v10 + 16;
      *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v10 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
      v14 = (IPC::Encoder *)v10;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v8;
      *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = a2;
      IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v14, 0, 0);
      result = (unsigned __int8 *)v14;
      v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
        result = (unsigned __int8 *)WTF::fastFree(v11, v12);
      }
      *(_BYTE *)(a1 + 49) = a2;
      v6 = v13;
      v13 = 0;
      if (v6)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v5);
    }
  }
  return result;
}

uint64_t WebCore::InbandTextTrackPrivate::mode(WebCore::InbandTextTrackPrivate *this)
{
  return *((unsigned __int8 *)this + 49);
}

uint64_t WebKit::TextTrackPrivateRemote::addGenericCue(uint64_t a1, _QWORD *a2)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = (_DWORD *)*a2;
  ++*(_DWORD *)*a2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34E8230;
  v3[1] = v2;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyClients();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::updateGenericCue(uint64_t a1, _QWORD *a2)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = (_DWORD *)*a2;
  ++*(_DWORD *)*a2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34E8258;
  v3[1] = v2;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyClients();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::removeGenericCue(uint64_t a1, _QWORD *a2)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = (_DWORD *)*a2;
  ++*(_DWORD *)*a2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34E8280;
  v3[1] = v2;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyClients();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::parseWebVTTFileHeader(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34E82A8;
  v3[1] = a2;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::parseWebVTTCueData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34E82D0;
  v3[1] = v6;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::parseWebVTTCueDataStruct(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34E82F8;
  v3[1] = a2;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::addDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD v10[2];

  v10[0] = a4;
  v10[1] = a5;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E34E8320;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = v10;
  v9 = v7;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::addDataCueWithType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v9 = off_1E34E8348;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  v11 = v9;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::updateDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E34E8370;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  v9 = v7;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::removeDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E34E8398;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  v9 = v7;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::RemoteMediaPlayerManager::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebKit::RemoteMediaPlayerManager::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(this[1], a2);
}

uint64_t WebKit::RemoteMediaPlayerManager::controlBlock(WebKit::RemoteMediaPlayerManager *this)
{
  return *((_QWORD *)this + 1);
}

unsigned __int8 *WebKit::RemoteRemoteCommandListener::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[10]);
}

unsigned __int8 *WebKit::RemoteRemoteCommandListener::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRemoteCommandListener,(WTF::DestructionThread)0>(this[10], a2);
}

uint64_t WebKit::RemoteRemoteCommandListener::controlBlock(WebKit::RemoteRemoteCommandListener *this)
{
  return *((_QWORD *)this + 10);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteRemoteCommandListener::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[3]);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteRemoteCommandListener::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRemoteCommandListener,(WTF::DestructionThread)0>(this[3], a2);
}

uint64_t `non-virtual thunk to'WebKit::RemoteRemoteCommandListener::controlBlock(WebKit::RemoteRemoteCommandListener *this)
{
  return *((_QWORD *)this + 3);
}

float WebKit::RemoteVideoFrameProxy::presentationSize(WebKit::RemoteVideoFrameProxy *this)
{
  return (float)*((int *)this + 24);
}

uint64_t WebKit::RemoteVideoFrameProxy::isRemoteProxy(WebKit::RemoteVideoFrameProxy *this)
{
  return 1;
}

uint64_t WebCore::VideoFrame::isLibWebRTC(WebCore::VideoFrame *this)
{
  return 0;
}

uint64_t WebCore::VideoFrame::isCV(WebCore::VideoFrame *this)
{
  return 0;
}

uint64_t WebKit::SourceBufferPrivateRemote::platformType(WebKit::SourceBufferPrivateRemote *this)
{
  return 3;
}

uint64_t WebCore::SourceBufferPrivate::platformMaximumBufferSize(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebKit::SourceBufferPrivateRemote::sourceBufferLogger(WebKit::SourceBufferPrivateRemote *this)
{
  return *((_QWORD *)this + 50);
}

uint64_t WebKit::SourceBufferPrivateRemote::sourceBufferLogIdentifier(WebKit::SourceBufferPrivateRemote *this)
{
  return *((_QWORD *)this + 51);
}

uint64_t WebCore::SourceBufferPrivate::waitingForKey(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::isSeeking(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::isReadyForMoreSamples(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::canSetMinimumUpcomingPresentationTime(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::precheckInitializationSegment()
{
  return 1;
}

uint64_t WebCore::SourceBufferPrivate::isMediaSampleAllowed()
{
  return 1;
}

void WebKit::TextTrackPrivateRemote::~TextTrackPrivateRemote(WebKit::TextTrackPrivateRemote *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 *v6;
  WTF *v7;
  void *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
  WTF::fastFree(v7, v8);
}

const char *WebCore::InbandTextTrackPrivate::logClassName(WebCore::InbandTextTrackPrivate *this)
{
  return "InbandTextTrackPrivate";
}

uint64_t WebKit::TextTrackPrivateRemote::id(WebKit::TextTrackPrivateRemote *this)
{
  return *((_QWORD *)this + 15);
}

WTF::AtomString *WebKit::TextTrackPrivateRemote::label@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 9);
}

WTF::AtomString *WebKit::TextTrackPrivateRemote::language@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 10);
}

uint64_t WebKit::TextTrackPrivateRemote::trackIndex(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned int *)this + 22);
}

void WebCore::InbandTextTrackPrivate::trackUID(uint64_t a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t WebKit::TextTrackPrivateRemote::startTimeVariance(WebKit::TextTrackPrivateRemote *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t WebCore::InbandTextTrackPrivate::type(WebCore::InbandTextTrackPrivate *this)
{
  return 2;
}

uint64_t WebKit::TextTrackPrivateRemote::kind(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 136);
}

uint64_t WebKit::TextTrackPrivateRemote::isClosedCaptions(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 137);
}

uint64_t WebKit::TextTrackPrivateRemote::isSDH(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 138);
}

uint64_t WebKit::TextTrackPrivateRemote::containsOnlyForcedSubtitles(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 139);
}

uint64_t WebKit::TextTrackPrivateRemote::isMainProgramContent(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 140);
}

uint64_t WebKit::TextTrackPrivateRemote::isEasyToRead(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 141);
}

uint64_t WebKit::TextTrackPrivateRemote::isDefault(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 142);
}

WTF::AtomString *WebKit::TextTrackPrivateRemote::inBandMetadataTrackDispatchType@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 12);
}

WebKit::RemoteMediaPlayerMIMETypeCache *std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100](WebKit::RemoteMediaPlayerMIMETypeCache **a1, WTF::StringImpl *a2)
{
  WebKit::RemoteMediaPlayerMIMETypeCache *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteMediaPlayerMIMETypeCache::~RemoteMediaPlayerMIMETypeCache(result, a2);
    return (WebKit::RemoteMediaPlayerMIMETypeCache *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::RemoteMediaPlayerMIMETypeCache::~RemoteMediaPlayerMIMETypeCache(WebKit::RemoteMediaPlayerMIMETypeCache *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  if (*((_BYTE *)this + 24))
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    if (v4)
      WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::deallocateTable(v4, a2);
  }
}

uint64_t WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t std::__optional_storage_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  int v10;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (a2 != result && *(_BYTE *)(result + 16))
    {
      v4 = *(_DWORD *)(result + 12);
      v5 = *(_DWORD *)(a2 + 12);
      if (v4 <= v5)
      {
        if (v5 > *(_DWORD *)(result + 8))
        {
          WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(result, 0);
          result = WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v3, *(unsigned int *)(a2 + 12));
          v4 = *(_DWORD *)(v3 + 12);
        }
      }
      else
      {
        *(_DWORD *)(result + 12) = v5;
        v4 = v5;
      }
      if (v4)
      {
        result = (uint64_t)memmove(*(void **)v3, *(const void **)a2, 4 * v4);
        v4 = *(_DWORD *)(v3 + 12);
      }
      v6 = *(unsigned int *)(a2 + 12);
      if (v4 != (_DWORD)v6)
      {
        v7 = (_DWORD *)(*(_QWORD *)v3 + 4 * v4);
        v8 = (int *)(*(_QWORD *)a2 + 4 * v4);
        v9 = 4 * v6 - 4 * v4;
        do
        {
          v10 = *v8++;
          *v7++ = v10;
          v9 -= 4;
        }
        while (v9);
        v4 = *(_DWORD *)(a2 + 12);
      }
      *(_DWORD *)(v3 + 12) = v4;
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    result = *(_QWORD *)result;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      result = WTF::fastFree((WTF *)result, (void *)a2);
    }
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    result = WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result, a2);
    *(_BYTE *)(v3 + 16) = 1;
  }
  return result;
}

uint64_t *WebKit::RemoteMediaPlayerManager::setUseGPUProcess(BOOL)::$_2::__invoke<WebCore::SampleBufferDisplayLayerClient>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  WebKit::WebProcess *v4;
  WebKit::GPUProcessConnection *v5;
  uint64_t *v6;
  WebKit::WebProcess *v8;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(v4);
  v6 = (uint64_t *)WebKit::GPUProcessConnection::sampleBufferDisplayLayerManager(v5);
  return WebKit::SampleBufferDisplayLayerManager::createLayer(v6, a1, a2);
}

void WebKit::RemoteMediaPlayerManager::setUseGPUProcess(BOOL)::$_0::__invoke<WebCore::VideoFrame const>(const WebCore::VideoFrame *a1@<X0>, _QWORD *a2@<X8>)
{
  WebKit::WebProcess *v4;
  WebKit::GPUProcessConnection *v5;
  uint64_t v6;
  WebKit::WebProcess *v7;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v7);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(v4);
  v6 = WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v5);
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(*(IPC::Semaphore ***)(v6 + 8), a1, a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteVideoFrameObjectHeap11PixelBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = *(const void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  uint64_t v4;

  *a1 = off_1E34E7358;
  v3 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = a1[6];
  a1[6] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 8));
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  void *v5;

  *a1 = (uint64_t)off_1E34E7358;
  v3 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = a1[6];
  a1[6] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 8));
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v5);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  _BYTE *v41;
  int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  WTF *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  IPC::Encoder *v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::ThreadSafeWeakPtrControlBlock *v58;
  WTF::ThreadSafeWeakPtrControlBlock *v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t *v64;
  WTF::StringImpl *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned __int8 *v68;
  int v70;
  WTF *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  WTF *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  WTF *v102;
  __int128 v103;
  __int128 v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  _BYTE buf[40];
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned __int8 **)(v2 + 312);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v3, *(_QWORD *)(v2 + 320), &v98);
    if (v98)
    {
      v4 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v4 & 1) == 0)
      {
        v5 = atomic_load((unsigned __int8 *)(v2 + 369));
        if ((v5 & 1) == 0)
        {
          v6 = *(_QWORD *)(a1 + 64);
          v7 = *(_QWORD *)(v6 + 48);
          *(_QWORD *)(a1 + 64) = 0;
          v95 = v7;
          v96 = (unsigned int *)v6;
          v97 = 0;
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v99);
          v8 = *(os_unfair_lock_s **)(v99 + 24);
          v9 = *(_QWORD *)(v2 + 336);
          v100 = 0uLL;
          *(_QWORD *)&v101 = "sendWithPromisedReply";
          *((_QWORD *)&v101 + 1) = 0;
          v10 = WTF::fastMalloc((WTF *)0x98);
          *(_DWORD *)(v10 + 8) = 1;
          *(_QWORD *)v10 = off_1E34E7380;
          v11 = v101;
          *(_OWORD *)(v10 + 16) = v100;
          *(_OWORD *)(v10 + 32) = v11;
          *(_BYTE *)(v10 + 48) = 0;
          v12 = (unsigned __int8 *)(v10 + 48);
          *(_DWORD *)(v10 + 96) = 0;
          *(_QWORD *)(v10 + 104) = v10 + 120;
          *(_QWORD *)(v10 + 112) = 1;
          *(_QWORD *)(v10 + 128) = 0;
          *(_QWORD *)(v10 + 136) = 0;
          *(_WORD *)(v10 + 144) = 0;
          v13 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v10);
          if (*v13)
          {
            v14 = v13;
            if (v13[16] >= 4u)
            {
              WTF::String::String((WTF::String *)&v106, "creating ");
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v105, v10);
              *(_QWORD *)buf = v106;
              v102 = v105;
              result = (unsigned int *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v102, &v107);
              if (!v107)
              {
                __break(0xC471u);
                return result;
              }
              v17 = v105;
              v105 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v16);
                else
                  *(_DWORD *)v17 -= 2;
              }
              v24 = v106;
              v106 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  WTF::StringImpl::destroy(v24, v16);
                else
                  *(_DWORD *)v24 -= 2;
              }
              v25 = *((_QWORD *)v14 + 4);
              v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v26)
              {
                WTF::String::utf8();
                v28 = v102 ? (char *)v102 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v28;
                _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v26 = (uint64_t)v102;
                v102 = 0;
                if (v26)
                {
                  if (*(_DWORD *)v26 == 1)
                    v26 = WTF::fastFree((WTF *)v26, v27);
                  else
                    --*(_DWORD *)v26;
                }
              }
              if (*v14 && v14[16] >= 4u)
              {
                v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v30 = *v29;
                  if ((v30 & 1) != 0)
                    break;
                  v31 = __ldaxr(v29);
                  if (v31 == v30)
                  {
                    if (!__stxr(v30 | 1, v29))
                    {
                      v93 = v9;
                      v32 = WTF::Logger::observers((WTF::Logger *)v26);
                      v33 = *(unsigned int *)(v32 + 12);
                      if ((_DWORD)v33)
                      {
                        v34 = *(uint64_t **)v32;
                        v94 = *(_QWORD *)v32 + 8 * v33;
                        do
                        {
                          v35 = *v34;
                          *(_DWORD *)buf = 0;
                          WTF::String::String((WTF::String *)&buf[8], "creating ");
                          *(_DWORD *)&buf[16] = 0;
                          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&buf[24], v10);
                          WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v102, (uint64_t)buf, 2uLL);
                          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v14, 4, &v102);
                          WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v102, v36);
                          for (i = 24; i != -8; i -= 16)
                          {
                            v38 = *(WTF::StringImpl **)&buf[i];
                            *(_QWORD *)&buf[i] = 0;
                            if (v38)
                            {
                              if (*(_DWORD *)v38 == 2)
                                WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                              else
                                *(_DWORD *)v38 -= 2;
                            }
                          }
                          ++v34;
                        }
                        while (v34 != (uint64_t *)v94);
                      }
                      v39 = __ldxr(v29);
                      if (v39 == 1)
                      {
                        v9 = v93;
                        if (!__stlxr(0, v29))
                          break;
                      }
                      else
                      {
                        __clrex();
                        v9 = v93;
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v13 = (unsigned __int8 *)v107;
              v107 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                  v13 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v13, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v13 -= 2;
              }
            }
          }
          v102 = (WTF *)v10;
          v103 = v100;
          v104 = v101;
          if (__ldaxr(v12))
          {
            __clrex();
          }
          else if (!__stxr(1u, v12))
          {
LABEL_64:
            v41 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
            if (*v41 && v41[16] >= 4u)
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v41, (WTF::Logger::LogSiteIdentifier *)&v100, " runSynchronouslyOnTarget ", v10);
            atomic_store(0, (unsigned __int8 *)(v10 + 145));
            v42 = __ldxr(v12);
            if (v42 == 1)
            {
              if (!__stlxr(0, v12))
              {
LABEL_72:
                v43 = (unsigned int *)v102;
                if (v102)
                {
                  v44 = (unsigned int *)((char *)v102 + 8);
                  do
                    v45 = __ldaxr(v44);
                  while (__stlxr(v45 + 1, v44));
                  v46 = v102;
                }
                else
                {
                  v46 = 0;
                }
                v102 = 0;
                *(_OWORD *)&buf[8] = v103;
                *(_OWORD *)&buf[24] = v104;
                v47 = WTF::fastMalloc((WTF *)0x30);
                *(_QWORD *)v47 = off_1E34E73C0;
                *(_QWORD *)(v47 + 8) = v46;
                *(_QWORD *)buf = 0;
                v48 = *(_OWORD *)&buf[24];
                *(_OWORD *)(v47 + 16) = *(_OWORD *)&buf[8];
                *(_OWORD *)(v47 + 32) = v48;
                *(_QWORD *)&v100 = v47;
                *((_QWORD *)&v100 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
                WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
                v49 = WTF::fastMalloc((WTF *)0x240);
                *(_WORD *)v49 = 1354;
                *(_QWORD *)(v49 + 8) = v9;
                *(_QWORD *)(v49 + 528) = v49 + 16;
                *(_QWORD *)(v49 + 536) = v49 + 16;
                *(_OWORD *)(v49 + 544) = xmmword_1978CE2D0;
                *(_OWORD *)(v49 + 560) = 0u;
                IPC::Encoder::encodeHeader((IPC::Encoder *)v49);
                *(_QWORD *)buf = v49;
                IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v49, (IPC::SharedBufferReference *)&v95);
                IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v8, (IPC::Encoder **)buf, (uint64_t *)&v100, 0, 0);
                v51 = *(IPC::Encoder **)buf;
                *(_QWORD *)buf = 0;
                if (v51)
                {
                  IPC::Encoder::~Encoder(v51, v50);
                  WTF::fastFree(v52, v53);
                }
                v54 = v100;
                *(_QWORD *)&v100 = 0;
                if (v54)
                  (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
                WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v102);
                v56 = v99;
                v99 = 0;
                if (v56)
                  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v56 + 16), v55);
                v57 = *(_QWORD *)(v2 + 32);
                v58 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v2 + 8);
                if (v58)
                  v59 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v58);
                else
                  v59 = 0;
                v100 = 0uLL;
                v60 = WTF::fastMalloc((WTF *)0x50);
                (*(void (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
                v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v61 = &off_1E34E7480;
                v61[1] = v59;
                v61[2] = v2;
                *(_DWORD *)(v60 + 8) = 1;
                *(_QWORD *)(v60 + 16) = v57;
                *(_QWORD *)(v60 + 24) = 0;
                *(_QWORD *)(v60 + 32) = 0;
                *(_QWORD *)(v60 + 40) = "operator()";
                *(_QWORD *)(v60 + 48) = 0;
                *(_WORD *)(v60 + 56) = 0;
                *(_QWORD *)v60 = off_1E34E74A8;
                v62 = v43 + 2;
                *(_QWORD *)(v60 + 64) = 0;
                *(_QWORD *)(v60 + 72) = v61;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 + 1, v62));
                *(_QWORD *)buf = v43;
                *(_QWORD *)&buf[8] = v60;
                *(_OWORD *)&buf[16] = v100;
                *(_QWORD *)&buf[32] = "operator()";
                v109 = 0;
                v102 = 0;
                *(_QWORD *)&v103 = 0;
                *((_QWORD *)&v103 + 1) = "<completion promise>";
                *(_QWORD *)&v104 = 0;
                v64 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
                v65 = *(WTF::StringImpl **)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v64, 0, (WTF::Logger::LogSiteIdentifier *)&v102);
                if (v65)
                {
                  v66 = (unsigned int *)((char *)v65 + 8);
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 + 1, v66));
                  v60 = *(_QWORD *)&buf[8];
                }
                v107 = v65;
                v68 = (unsigned __int8 *)(v60 + 57);
                if (__ldaxr((unsigned __int8 *)(v60 + 57)))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v68))
                {
                  goto LABEL_94;
                }
                MEMORY[0x19AEABB3C](v60 + 57);
LABEL_94:
                std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(v60 + 64), v64);
                v70 = __ldxr(v68);
                if (v70 == 1)
                {
                  if (!__stlxr(0, v68))
                    goto LABEL_99;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)(v60 + 57));
LABEL_99:
                v71 = *(WTF **)&buf[8];
                *(_QWORD *)&buf[8] = 0;
                v102 = v71;
                WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::maybeSettle(*(uint64_t *)buf, &v102, (WTF::Logger::LogSiteIdentifier *)&buf[16]);
                v72 = (unsigned int *)v102;
                v102 = 0;
                if (v72)
                {
                  v73 = v72 + 2;
                  do
                  {
                    v74 = __ldaxr(v73);
                    v75 = v74 - 1;
                  }
                  while (__stlxr(v75, v73));
                  if (!v75)
                  {
                    atomic_store(1u, v72 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
                  }
                }
                v76 = *(WTF **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  *(_QWORD *)&buf[8] = 0;
                  v102 = v76;
                  WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::maybeSettle(*(uint64_t *)buf, &v102, (WTF::Logger::LogSiteIdentifier *)&buf[16]);
                  v77 = (unsigned int *)v102;
                  v102 = 0;
                  if (v77)
                  {
                    v78 = v77 + 2;
                    do
                    {
                      v79 = __ldaxr(v78);
                      v80 = v79 - 1;
                    }
                    while (__stlxr(v80, v78));
                    if (!v80)
                    {
                      atomic_store(1u, v77 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 8))(v77);
                    }
                  }
                  v81 = *(unsigned int **)&buf[8];
                  *(_QWORD *)&buf[8] = 0;
                  if (v81)
                  {
                    v82 = v81 + 2;
                    do
                    {
                      v83 = __ldaxr(v82);
                      v84 = v83 - 1;
                    }
                    while (__stlxr(v84, v82));
                    if (!v84)
                    {
                      atomic_store(1u, v81 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v81 + 8))(v81);
                    }
                  }
                }
                else
                {
                  *(_QWORD *)&buf[8] = 0;
                }
                v85 = *(unsigned int **)buf;
                *(_QWORD *)buf = 0;
                if (!v85)
                  goto LABEL_120;
                v86 = v85 + 2;
                do
                {
                  v87 = __ldaxr(v86);
                  v88 = v87 - 1;
                }
                while (__stlxr(v88, v86));
                if (!v88)
                {
                  atomic_store(1u, v85 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v85 + 16))(v85);
                  if (v43)
                  {
                    do
                    {
LABEL_121:
                      v89 = __ldaxr(v62);
                      v90 = v89 - 1;
                    }
                    while (__stlxr(v90, v62));
                    if (!v90)
                    {
                      atomic_store(1u, v43 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 16))(v43);
                    }
                  }
                }
                else
                {
LABEL_120:
                  if (v43)
                    goto LABEL_121;
                }
                v91 = v97;
                v97 = 0;
                if (v91)
                  WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v91);
                v92 = v96;
                v96 = 0;
                if (v92)
                  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v92, v18);
                goto LABEL_13;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v12);
            goto LABEL_72;
          }
          v13 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v12);
          goto LABEL_64;
        }
      }
    }
  }
  else
  {
    v98 = 0;
  }
  LOBYTE(v102) = 4;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = "operator()";
  *(_QWORD *)&buf[24] = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v102, (WTF::Logger::LogSiteIdentifier *)buf, (uint64_t *)&v107);
LABEL_13:
  v19 = a1 + 8;
  v20 = v98;
  v98 = 0;
  if (v20)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v20 + 16), v18);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = "invokeAsync proxy";
  *(_QWORD *)&buf[24] = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo((unsigned __int8 *)v107, v19, (WTF::Logger::LogSiteIdentifier *)buf);
  result = (unsigned int *)v107;
  v107 = 0;
  if (result)
  {
    v21 = result + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 140);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 128);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 32), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 26), v27);
  v28 = a1[24];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E7398[v28])(buf, a1 + 14);
  a1[24] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS8_9MediaTimeEEEEN3IPC5ErrorELj0EE7Storage8NoResultENSD_ISI_SK_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSN_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E73C0;
  WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E73C0;
  WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34E7458;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 96);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v68, v9);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v9);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 96);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E7398[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 96) = 2;
  result = (WTF::Lock *)WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  void *v9;
  WTF::NativePromiseBase **v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v23;
  int v24;
  unsigned int v25;
  WTF::NativePromiseBase **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  unsigned int *v33;
  _OWORD v34[2];

  v33 = (unsigned int *)v34 + 2;
  *(_QWORD *)&v34[0] = 1;
  v26 = (WTF::NativePromiseBase **)&v28;
  v27 = 1;
  v4 = *(void **)(a1 + 104);
  if (v4 == (void *)(a1 + 120))
  {
    v5 = *(unsigned int *)(a1 + 116);
    memcpy(&v28, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 104) = a1 + 120;
    v26 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 116);
    LODWORD(v27) = *(_DWORD *)(a1 + 112);
  }
  HIDWORD(v27) = v5;
  DWORD1(v34[0]) = 0;
  *(_QWORD *)(a1 + 112) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v4);
  v6 = *(_QWORD *)(a1 + 128);
  v23 = v6;
  v7 = *(_DWORD *)(a1 + 140);
  v24 = *(_DWORD *)(a1 + 136);
  v25 = v7;
  v33 = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)&v34[0] = 0;
  *(_QWORD *)(a1 + 136) = 0;
  WTF::Vector<WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v8);
  if (HIDWORD(v27))
  {
    v10 = v26;
    v11 = 8 * HIDWORD(v27);
    do
    {
      v12 = *v10++;
      WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    v13 = v6 + 40 * v7;
    v14 = a1 + 56;
    do
    {
      v15 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v33 = v15;
      v16 = *(_OWORD *)(v6 + 24);
      v34[0] = *(_OWORD *)(v6 + 8);
      v34[1] = v16;
      if (v15)
      {
        v17 = v15 + 2;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v29 = 0;
        v30 = 0;
        v31 = "<chained promise>";
        v32 = 0;
        WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Storage>((uint64_t)v15, v14, (WTF::Logger::LogSiteIdentifier *)&v29);
        do
        {
          v19 = __ldaxr(v17);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v17));
        if (!v20)
        {
          atomic_store(1u, v15 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
        }
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = "<chained promise>";
        v32 = 0;
        WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Storage>(0, v14, (WTF::Logger::LogSiteIdentifier *)&v29);
      }
      WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v33);
      v6 += 40;
    }
    while (v6 != v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v21);
}

unsigned __int8 *WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  double v18;
  uint64_t v20;
  _QWORD v21[6];

  v5 = a1;
  v21[5] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 145));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E34E73F8;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v21[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v21);
      result = (unsigned __int8 *)v21[0];
      v21[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v21[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)v21, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable((uint64_t)&v20, a2);
    v17 = v20;
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 16))(v21, v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    v18 = WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::takeResult((uint64_t)v21, a2);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *, double))(*(_QWORD *)v5 + 24))(v5, a2, v21, v18);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

double WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  double result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 96) != 1)
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    *(_QWORD *)&result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_0EJSH_SJ_EEEOSZ_EEEDcSR_DpT0_(v9, v10, v11).n128_u64[0];
    return result;
  }
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v7 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E34E73D8[v7])(&v12);
    *(_DWORD *)(a1 + 32) = v7;
  }
  v8 = __ldxr(v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_0EJSH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_WORD *)a2 = *(_WORD *)a3;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_0EJSH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E73F8;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E73F8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD v11[6];

  v11[5] = *MEMORY[0x1E0C80C00];
  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v11[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v11, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable((uint64_t)&v10, *((_QWORD *)a1 + 3));
      v8 = v10;
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v10 + 16))(v11, v10);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v11);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      v9 = WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::takeResult((uint64_t)v11, *((_QWORD *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *, double))(*(_QWORD *)v1 + 24))(v1, v7, v11, v9);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 96);
  v11 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E7398[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 96) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E7410[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS8_9MediaTimeEEEEN3IPC5ErrorELj0EE7Storage8NoResultENSD_ISI_SK_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSN_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E7398[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS8_9MediaTimeEEEEN3IPC5ErrorELj0EE7Storage8NoResultENSD_ISI_SK_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSN_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  BOOL v15;
  uint64_t v16;
  _BYTE v17[24];
  int v18;
  char v19;
  _BYTE v20[8];
  _BYTE v21[24];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = v21;
      v21[0] = 0;
      v22 = -1;
      v8 = *(unsigned int *)(a3 + 32);
      if ((_DWORD)v8 == -1)
      {
        v10 = *(_DWORD *)(a2 + 32);
        if (v10 == -1)
          return result;
        v9 = (_BYTE *)(a2 + 8);
      }
      else
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E34E73D8[v8])(v17, v21, a3 + 8);
        v22 = v8;
        v9 = (_BYTE *)(a2 + 8);
        v10 = *(_DWORD *)(a2 + 32);
        if (v10 != -1 && (_DWORD)v8 == v10)
          return ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E34E7428[v8])(v17, v21, a2 + 8);
        if ((_DWORD)v8 != 1)
          goto LABEL_29;
      }
      if (v10 == 1)
        v12 = 1;
      else
        v12 = v8;
      if (v10 == 1)
        v13 = v21;
      else
        v13 = v9;
      if (v10 == 1)
        v14 = v9;
      else
        v14 = v21;
      v15 = v10 == -1;
      if (v10 == -1)
        v10 = -1;
      else
        v10 = v12;
      if (!v15)
      {
        v7 = v13;
        v9 = v14;
      }
LABEL_29:
      v17[0] = 0;
      v18 = -1;
      if (v10 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E34E73D8[v10])(&v19, v17, v9);
        v18 = v10;
      }
      *((_DWORD *)v9 + 6) = -1;
      v16 = *((unsigned int *)v7 + 6);
      if ((_DWORD)v16 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E34E7438[v16])(&v19, v9, v7);
        *((_DWORD *)v9 + 6) = v16;
        v10 = v18;
      }
      *((_DWORD *)v7 + 6) = -1;
      if (v10 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E34E7438[v10])(&v19, v7, v17);
        *((_DWORD *)v7 + 6) = v10;
      }
      return result;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E34E7398[v5])(v20, v4);
  }
  *(_BYTE *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  *(_DWORD *)(v4 + 32) = -1;
  v11 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v11 != -1)
  {
    result = ((uint64_t (*)(_BYTE *))off_1E34E73D8[v11])(v20);
    *(_DWORD *)(v4 + 32) = v11;
  }
  *(_DWORD *)(v4 + 40) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS8_9MediaTimeEEEEN3IPC5ErrorELj0EE7Storage8NoResultENSD_ISI_SK_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSN_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E7398[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 40) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEE6__swapB8sn180100ERSJ_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSG_SI_EEESU_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  uint64_t v6;

  std::optional<WebCore::PlatformMediaError>::swap[abi:sn180100]((_BYTE *)a2, (_BYTE *)a3);
  result = *(__n128 *)(a2 + 8);
  v6 = *(_QWORD *)(a3 + 13);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 13) = v6;
  *(_QWORD *)(a3 + 13) = *(_OWORD *)&result >> 40;
  *(_QWORD *)(a3 + 8) = result.n128_u64[0];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEE6__swapB8sn180100ERSJ_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSG_SI_EEESU_EEEDcSL_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSH_SJ_EEEEEvRSL_OT_EUlRSQ_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSH_SJ_EEEOSZ_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_WORD *)a2 = *(_WORD *)a3;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSH_SJ_EEEEEvRSL_OT_EUlRSQ_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSH_SJ_EEEOSZ_EEEDcSQ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E7458;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E7458;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t **WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error>>::call@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int16 v8;
  char v9;
  __int128 v10;
  char v11;

  v3 = result[1];
  if (!v3)
  {
    *(_BYTE *)(a2 + 8) = 1;
LABEL_14:
    *(_DWORD *)(a2 + 32) = 1;
    return result;
  }
  if (!*v3)
  {
LABEL_13:
    *(_BYTE *)(a2 + 8) = 13;
    goto LABEL_14;
  }
  IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(result[1], &v8);
  if (!v9 || (result = (uint64_t **)IPC::Decoder::decode<WTF::MediaTime>(v3, (uint64_t)&v10), !v11))
  {
    v5 = *v3;
    v6 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    result = (uint64_t **)v3[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      result = (uint64_t **)((uint64_t (*)(uint64_t **, uint64_t))(*result)[2])(result, v5);
    goto LABEL_13;
  }
  if (v9)
  {
    v4 = v10;
    *(_WORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 32) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__15tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS_9MediaTimeEEEEN3IPC5ErrorELj0EE11whenSettledIZZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefINS8_12SharedBufferENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEN3__0clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherEST_RKNS_6Logger17LogSiteIdentifierEEUlONS7_ISC_SE_EEE_NSJ_INS2_IvS9_Lj0EEENSL_IS15_EENSN_IS15_EEEEJS13_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34E7480;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__15tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS_9MediaTimeEEEEN3IPC5ErrorELj0EE11whenSettledIZZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefINS8_12SharedBufferENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEN3__0clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherEST_RKNS_6Logger17LogSiteIdentifierEEUlONS7_ISC_SE_EEE_NSJ_INS2_IvS9_Lj0EEENSL_IS15_EENSN_IS15_EEEEJS13_EED0Ev(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7480;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::Lock *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__15tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS_9MediaTimeEEEEN3IPC5ErrorELj0EE11whenSettledIZZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefINS8_12SharedBufferENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEN3__0clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherEST_RKNS_6Logger17LogSiteIdentifierEEUlONS7_ISC_SE_EEE_NSJ_INS2_IvS9_Lj0EEENSL_IS15_EENSN_IS15_EEEEJS13_EE4callES13_@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::Lock *result;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::Lock *v14;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  const char *v21;
  uint64_t v22;
  WTF::Lock *v23;
  char v24;
  char v25;

  if (*(_DWORD *)(a2 + 32))
  {
    LOBYTE(v23) = 4;
    v20 = 0uLL;
    v21 = "operator()";
    v22 = 0;
    return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v23, (WTF::Logger::LogSiteIdentifier *)&v20, a3);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16), &v20);
    if ((_QWORD)v20)
    {
      v6 = (unsigned __int8 *)(v20 + 370);
      if (__ldaxr((unsigned __int8 *)(v20 + 370)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v6))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v6);
LABEL_9:
      if (*(_DWORD *)(a2 + 32))
      {
LABEL_34:
        v19 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::Lock *)WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(v19);
      }
      v8 = v20 + 376;
      v9 = *(_QWORD *)(a2 + 21);
      *(_QWORD *)(v20 + 376) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(v8 + 5) = v9;
      v10 = __ldxr(v6);
      if (v10 == 1)
      {
        if (!__stlxr(0, v6))
        {
LABEL_15:
          v11 = v20;
          *(_QWORD *)&v20 = 0;
          if (v11)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v11 + 8));
          goto LABEL_17;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      goto LABEL_15;
    }
  }
LABEL_17:
  if (*(_DWORD *)(a2 + 32))
    goto LABEL_34;
  v20 = 0uLL;
  v21 = "operator()";
  v22 = 0;
  v12 = WTF::fastMalloc((WTF *)0x78);
  v13 = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v12, &v20);
  *a3 = v13;
  v14 = (WTF::Lock *)(v13 + 48);
  v23 = v14;
  v24 = 1;
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
LABEL_21:
    v14 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
    goto LABEL_22;
  }
  if (__stxr(1u, (unsigned __int8 *)v14))
    goto LABEL_21;
LABEL_22:
  v16 = (_BYTE *)WTF::NativePromiseBase::logChannel(v14);
  if (*v16 && v16[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v16, 4u, (WTF::Logger::LogSiteIdentifier *)&v20, " settling ", v12);
  v17 = *(unsigned int *)(v12 + 64);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E34E7330[v17])(&v25, v12 + 56);
  *(_DWORD *)(v12 + 64) = -1;
  *(_WORD *)(v12 + 56) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(v12 + 64) = 1;
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll((_QWORD *)v12, (unsigned __int8 **)&v23);
  if (v24)
  {
    result = v23;
    v18 = __ldxr((unsigned __int8 *)v23);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34E74A8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34E74D8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34E74A8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34E74D8;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  WTF *v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  unsigned __int8 *v37;
  uint64_t *v39;
  int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  char *v48;
  WTF *v49[2];
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint8_t buf[16];
  const char *v60;
  uint64_t v61;
  int v62;
  int v63;
  _DWORD v64[4];
  uint64_t v65;
  int v66;
  _DWORD v67[8];
  _QWORD v68[3];

  v68[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 32);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v48 = (char *)v10;
    WTF::String::String((WTF::String *)&v57, v10);
    WTF::String::String((WTF::String *)&v56, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v54, "[");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v53, a2);
    WTF::String::String((WTF::String *)&v52, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v50, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v57, (uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, &v58);
    if (!v58)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v50;
    v50 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v51;
    v51 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v52;
    v52 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v53;
    v53 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v54;
    v54 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v55;
    v55 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v56;
    v56 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v57;
    v57 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = (WTF *)os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v49[0] ? (char *)v49[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v22 = v49[0];
      v49[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = (WTF *)WTF::fastFree(v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers(v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v47 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], v48);
                LODWORD(v60) = 0;
                WTF::String::String((WTF::String *)&v61, " then() call made from ");
                v62 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v63 = 0;
                WTF::String::String((WTF::String *)v64, "[");
                v64[2] = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v65, a2);
                v66 = 0;
                WTF::String::String((WTF::String *)v67, " callback:");
                v67[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v67[6] = 0;
                WTF::String::String((WTF::String *)v68, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v49, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v31 + 16))(v31, v9, 4, v49);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v32);
                for (i = 120; i != -8; i -= 16)
                {
                  v34 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v47);
            }
            v35 = __ldxr(v25);
            if (v35 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v36 = v58;
    v58 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v37 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v37))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_80:
  v39 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
      goto LABEL_85;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
LABEL_85:
  (*(void (**)(WTF **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(v49, *(_QWORD *)(a1 + 72), a3);
  if (v39)
  {
    *(_OWORD *)buf = 0uLL;
    v60 = "<chained completion promise>";
    v61 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo((unsigned __int8 *)v49[0], (unint64_t)v39, (WTF::Logger::LogSiteIdentifier *)buf);
  }
  v41 = (unsigned int *)v49[0];
  v49[0] = 0;
  if (v41)
  {
    v42 = v41 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v41 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v39)
  {
    v45 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v39);
    return WTF::fastFree((WTF *)v45, v46);
  }
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

unsigned __int8 *WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v5;
  unsigned __int8 *result;
  unsigned __int8 *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF *v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF::NativePromiseBase *v36;
  int v37;
  uint64_t v38;
  WTF::Lock *v40;
  char v41;
  WTF *v42[2];
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint8_t buf[4];
  char *v53;
  int v54;
  _DWORD v55[4];
  uint64_t v56;
  int v57;
  _DWORD v58[8];
  _DWORD v59[4];
  uint64_t v60;
  int v61;
  _QWORD v62[3];

  v62[1] = *MEMORY[0x1E0C80C00];
  v5 = (WTF::Lock *)(a1 + 48);
  v40 = v5;
  v41 = 1;
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_4:
    v5 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 144) = 1;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v5);
  if (*result)
  {
    v8 = result;
    if (result[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString(a3);
      WTF::String::String((WTF::String *)&v49, " invoking maybeSettle() [");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v48, a1);
      WTF::String::String((WTF::String *)&v47, " callback:");
      WTF::LogArgument<void const*>::toString();
      WTF::String::String((WTF::String *)&v45, " isNothing:");
      WTF::LogArgument<BOOL>::toString<BOOL>(&v44);
      WTF::String::String((WTF::String *)&v43, "]");
      result = (unsigned __int8 *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, &v51);
      if (!v51)
      {
        __break(0xC471u);
        return result;
      }
      v10 = v43;
      v43 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v44;
      v44 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v45;
      v45 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v46;
      v46 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v47;
      v47 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v9);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v48;
      v48 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v9);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v49;
      v49 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v9);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v50;
      v50 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v9);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *((_QWORD *)v8 + 4);
      v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v19)
      {
        WTF::String::utf8();
        v21 = v42[0] ? (char *)v42[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v53 = v21;
        _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v19 = v42[0];
        v42[0] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
            v19 = (WTF *)WTF::fastFree(v19, v20);
          else
            --*(_DWORD *)v19;
        }
      }
      if (*v8 && v8[16] >= 4u)
      {
        v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v23 = *v22;
          if ((v23 & 1) != 0)
            break;
          v24 = __ldaxr(v22);
          if (v24 == v23)
          {
            if (!__stxr(v23 | 1, v22))
            {
              v25 = WTF::Logger::observers(v19);
              v26 = *(unsigned int *)(v25 + 12);
              if ((_DWORD)v26)
              {
                v27 = *(uint64_t **)v25;
                v38 = *(_QWORD *)v25 + 8 * v26;
                do
                {
                  v28 = *v27;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString(a3);
                  v54 = 0;
                  WTF::String::String((WTF::String *)v55, " invoking maybeSettle() [");
                  v55[2] = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v56, a1);
                  v57 = 0;
                  WTF::String::String((WTF::String *)v58, " callback:");
                  v58[2] = 0;
                  WTF::LogArgument<void const*>::toString();
                  v58[6] = 0;
                  WTF::String::String((WTF::String *)v59, " isNothing:");
                  v59[2] = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v60);
                  v61 = 0;
                  WTF::String::String((WTF::String *)v62, "]");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v42, (uint64_t)buf, 8uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, v8, 4, v42);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v29);
                  for (i = 120; i != -8; i -= 16)
                  {
                    v31 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                  }
                  ++v27;
                }
                while (v27 != (uint64_t *)v38);
              }
              v32 = __ldxr(v22);
              if (v32 == 1)
              {
                if (!__stlxr(0, v22))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = (unsigned __int8 *)v51;
      v51 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (*(_DWORD *)(a1 + 96))
  {
    result = WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v40);
  }
  else
  {
    v33 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v33 == *(_DWORD *)(a1 + 112))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 104, v33 + 1, (unint64_t)a2);
      v33 = *(unsigned int *)(a1 + 116);
      v34 = v33 + 1;
      v35 = *(_QWORD *)(a1 + 104);
      v36 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v34 = v33 + 1;
      v35 = *(_QWORD *)(a1 + 104);
      v36 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v35 + 8 * v33) = v36;
    *(_DWORD *)(a1 + 116) = v34;
  }
  if (v41)
  {
    result = (unsigned __int8 *)v40;
    v37 = __ldxr((unsigned __int8 *)v40);
    if (v37 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v40))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote17removeCodedFramesERKNS_9MediaTimeES7_S7_E3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E34E7508;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote17removeCodedFramesERKNS_9MediaTimeES7_S7_E3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = (uint64_t)off_1E34E7508;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote17removeCodedFramesERKNS_9MediaTimeES7_S7_E3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *result;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  IPC::Encoder *v38;
  __int128 v39;
  __int128 v40;

  v2 = (unint64_t)(a1 + 1);
  v3 = a1[7];
  v4 = *(unsigned __int8 **)(v3 + 312);
  if (!v4)
  {
    v32 = 0;
LABEL_16:
    LOBYTE(v35) = 4;
    v38 = 0;
    *(_QWORD *)&v39 = 0;
    *((_QWORD *)&v39 + 1) = "operator()";
    *(_QWORD *)&v40 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v35, (WTF::Logger::LogSiteIdentifier *)&v38, (uint64_t *)&v31);
    goto LABEL_17;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v4, *(_QWORD *)(v3 + 320), &v32);
  if (!v32)
    goto LABEL_16;
  v5 = atomic_load((unsigned __int8 *)(v3 + 368));
  if ((v5 & 1) != 0)
    goto LABEL_16;
  v6 = atomic_load((unsigned __int8 *)(v3 + 369));
  if ((v6 & 1) != 0)
    goto LABEL_16;
  v7 = a1 + 8;
  v8 = a1 + 10;
  v9 = a1 + 12;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v3 + 312), *(_QWORD *)(v3 + 320), &v33);
  v10 = *(os_unfair_lock_s **)(v33 + 24);
  v11 = *(_QWORD *)(v3 + 336);
  v38 = 0;
  *(_QWORD *)&v39 = 0;
  *((_QWORD *)&v39 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v40 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v35, 0, (WTF::Logger::LogSiteIdentifier *)&v38);
  v12 = (unsigned __int8 *)v35;
  if (v35)
  {
    v13 = (unsigned int *)(v35 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = v35;
  }
  else
  {
    v15 = 0;
  }
  v31 = v12;
  v35 = 0;
  v39 = v36;
  v40 = v37;
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = off_1E34E7530;
  *(_QWORD *)(v16 + 8) = v15;
  v38 = 0;
  v17 = v40;
  *(_OWORD *)(v16 + 16) = v39;
  *(_OWORD *)(v16 + 32) = v17;
  v34[0] = v16;
  v34[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v38);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 1362;
  *(_QWORD *)(v18 + 8) = v11;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v38 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v18, v7);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v18, v8);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v18, v9);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v10, &v38, v34, 0, 0);
  v20 = v38;
  v38 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v21, v22);
  }
  v23 = v34[0];
  v34[0] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v35);
  v25 = v33;
  v33 = 0;
  if (v25)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v25 + 16), v24);
LABEL_17:
  v26 = v32;
  v32 = 0;
  if (v26)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v26 + 16), v24);
  v38 = 0;
  *(_QWORD *)&v39 = 0;
  *((_QWORD *)&v39 + 1) = "invokeAsync proxy";
  *(_QWORD *)&v40 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo(v31, v2, (WTF::Logger::LogSiteIdentifier *)&v38);
  result = (unsigned int *)v31;
  v31 = 0;
  if (result)
  {
    v28 = result + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E7530;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E7530;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E7558;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E7558;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E7558;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 8);
  if (v2 && *v2)
    *a2 = 0;
  else
    *a2 = 260;
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote15computeSeekTimeERKN7WebCore10SeekTargetEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E34E7580;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote15computeSeekTimeERKN7WebCore10SeekTargetEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = (uint64_t)off_1E34E7580;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote15computeSeekTimeERKN7WebCore10SeekTargetEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  WTF::NativePromiseBase *v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned __int8 **v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v28;
  unsigned int *v29;
  unsigned int v30;
  _BYTE *v31;
  BOOL v32;
  _BYTE *v33;
  unsigned int *result;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  NSObject *v44;
  WTF *v45;
  void *v46;
  char *v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t i;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  WTF *v81[2];
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  _BYTE buf[24];
  __int128 v92;
  uint64_t v93;
  int v94;
  _DWORD v95[4];
  uint64_t v96;
  int v97;
  _DWORD v98[4];
  uint64_t v99;
  int v100;
  _QWORD v101[5];

  v101[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned __int8 **)(v2 + 312);
  if (!v3)
  {
    v89 = 0;
LABEL_16:
    LOBYTE(v78) = 4;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = "operator()";
    *(_QWORD *)&v92 = 0;
    v20 = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v78, (WTF::Logger::LogSiteIdentifier *)buf, &v77);
    goto LABEL_17;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v3, *(_QWORD *)(v2 + 320), &v89);
  if (!v89)
    goto LABEL_16;
  v4 = atomic_load((unsigned __int8 *)(v2 + 368));
  if ((v4 & 1) != 0)
    goto LABEL_16;
  v5 = atomic_load((unsigned __int8 *)(v2 + 369));
  if ((v5 & 1) != 0)
    goto LABEL_16;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v90);
  v6 = (os_unfair_lock_s *)*((_QWORD *)v90 + 3);
  v7 = *(_QWORD *)(v2 + 336);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = "sendWithPromisedReply";
  *(_QWORD *)&v92 = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v78, 0, (WTF::Logger::LogSiteIdentifier *)buf);
  v8 = v78;
  if (v78)
  {
    v9 = (unsigned int *)(v78 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = v78;
  }
  else
  {
    v11 = 0;
  }
  v77 = v8;
  v78 = 0;
  *(_OWORD *)&buf[8] = v79;
  v92 = v80;
  v12 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v12 = off_1E34E75A8;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)buf = 0;
  v13 = v92;
  *(_OWORD *)(v12 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v12 + 32) = v13;
  v81[0] = (WTF *)v12;
  v81[1] = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)buf);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 1358;
  *(_QWORD *)(v14 + 8) = v7;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  *(_QWORD *)buf = v14;
  IPC::ArgumentCoder<WebCore::SeekTarget,void>::encode((IPC::Encoder *)v14, (_QWORD *)(a1 + 64));
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v6, (IPC::Encoder **)buf, (uint64_t *)v81, 0, 0);
  v16 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v15);
    WTF::fastFree(v17, v18);
  }
  v19 = v81[0];
  v81[0] = 0;
  if (v19)
    (*(void (**)(WTF *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (WTF::NativePromiseBase *)WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v78);
  v22 = v90;
  v90 = 0;
  if (v22)
    v20 = (WTF::NativePromiseBase *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((unsigned __int8 **)v22 + 2), v21);
LABEL_17:
  v23 = v89;
  v89 = 0;
  if (v23)
    v20 = (WTF::NativePromiseBase *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((unsigned __int8 **)v23 + 2), v21);
  v24 = (unsigned __int8 **)(a1 + 8);
  v25 = v77;
  v78 = 0;
  *(_QWORD *)&v79 = 0;
  *((_QWORD *)&v79 + 1) = "invokeAsync proxy";
  *(_QWORD *)&v80 = 0;
  v26 = (unsigned __int8 *)(v77 + 48);
  if (__ldaxr((unsigned __int8 *)(v77 + 48)))
  {
    __clrex();
LABEL_22:
    v20 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v26);
    goto LABEL_23;
  }
  if (__stxr(1u, v26))
    goto LABEL_22;
LABEL_23:
  *(_BYTE *)(v25 + 128) = 1;
  v28 = *v24;
  if (*v24)
  {
    v29 = (unsigned int *)(v28 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
  }
  v31 = (_BYTE *)WTF::NativePromiseBase::logChannel(v20);
  if (*v31)
    v32 = v31[16] >= 4u;
  else
    v32 = 0;
  if (v32)
  {
    v33 = v31;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v78);
    WTF::String::String((WTF::String *)&v88, " invoking chainTo() [");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v25, &v87);
    WTF::String::String((WTF::String *)&v86, " chainedPromise:");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v28, &v85);
    WTF::String::String((WTF::String *)&v84, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v83);
    WTF::String::String((WTF::String *)&v82, "]");
    result = (unsigned int *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v82, &v90);
    if (!v90)
    {
      __break(0xC471u);
      return result;
    }
    v36 = v82;
    v82 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = v83;
    v83 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v35);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = v84;
    v84 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v35);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = v85;
    v85 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v35);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v86;
    v86 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v35);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v87;
    v87 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v35);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v88;
    v88 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v35);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = v89;
    v89 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v35);
      else
        *(_DWORD *)v43 -= 2;
    }
    v44 = *((_QWORD *)v33 + 4);
    v45 = (WTF *)os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v45)
    {
      WTF::String::utf8();
      v47 = v81[0] ? (char *)v81[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v47;
      _os_log_impl(&dword_196BCC000, v44, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v45 = v81[0];
      v81[0] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 1)
          v45 = (WTF *)WTF::fastFree(v45, v46);
        else
          --*(_DWORD *)v45;
      }
    }
    if (*v33 && v33[16] >= 4u)
    {
      v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v49 = *v48;
        if ((v49 & 1) != 0)
          break;
        v50 = __ldaxr(v48);
        if (v50 == v49)
        {
          if (!__stxr(v49 | 1, v48))
          {
            v51 = WTF::Logger::observers(v45);
            v52 = *(unsigned int *)(v51 + 12);
            if ((_DWORD)v52)
            {
              v53 = *(uint64_t **)v51;
              v76 = *(_QWORD *)v51 + 8 * v52;
              do
              {
                v54 = *v53;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v78);
                *(_DWORD *)&buf[16] = 0;
                WTF::String::String((WTF::String *)&v92, " invoking chainTo() [");
                DWORD2(v92) = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v25, &v93);
                v94 = 0;
                WTF::String::String((WTF::String *)v95, " chainedPromise:");
                v95[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v28, &v96);
                v97 = 0;
                WTF::String::String((WTF::String *)v98, " isNothing:");
                v98[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v99);
                v100 = 0;
                WTF::String::String((WTF::String *)v101, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v81, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v54 + 16))(v54, v33, 4, v81);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v81, v55);
                for (i = 120; i != -8; i -= 16)
                {
                  v57 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 == 2)
                      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v46);
                    else
                      *(_DWORD *)v57 -= 2;
                  }
                }
                ++v53;
              }
              while (v53 != (uint64_t *)v76);
            }
            v58 = __ldxr(v48);
            if (v58 == 1)
            {
              v24 = (unsigned __int8 **)(a1 + 8);
              if (!__stlxr(0, v48))
                break;
            }
            else
            {
              __clrex();
              v24 = (unsigned __int8 **)(a1 + 8);
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v59 = v90;
    v90 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v46);
        if (!v28)
          goto LABEL_102;
        goto LABEL_98;
      }
      *(_DWORD *)v59 -= 2;
    }
  }
  if (!v28)
    goto LABEL_102;
LABEL_98:
  v60 = (unsigned int *)(v28 + 8);
  do
  {
    v61 = __ldaxr(v60);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, v60));
  if (!v62)
  {
    atomic_store(1u, (unsigned int *)v28 + 2);
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v28 + 16))(v28);
  }
LABEL_102:
  v63 = atomic_load((unsigned __int8 *)(v25 + 129));
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::setDispatchMode(*v24, v63, (WTF::Logger::LogSiteIdentifier *)&v78);
  if (*(_DWORD *)(v25 + 80))
  {
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleChainedPromise(v25, (uint64_t)v24);
  }
  else
  {
    v64 = *(unsigned int *)(v25 + 124);
    if ((_DWORD)v64 == *(_DWORD *)(v25 + 120))
    {
      v65 = WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 112, v64 + 1, (unint64_t)v24);
      v66 = *(_QWORD *)(v25 + 112) + 40 * *(unsigned int *)(v25 + 124);
      v67 = *(_QWORD *)v65;
      *(_QWORD *)v65 = 0;
      *(_QWORD *)v66 = v67;
      v68 = *(_OWORD *)(v65 + 24);
      *(_OWORD *)(v66 + 8) = *(_OWORD *)(v65 + 8);
      *(_OWORD *)(v66 + 24) = v68;
    }
    else
    {
      v69 = *(_QWORD *)(v25 + 112) + 40 * v64;
      v70 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)v69 = v70;
      v71 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v69 + 24) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v69 + 8) = v71;
    }
    ++*(_DWORD *)(v25 + 124);
  }
  v72 = __ldxr(v26);
  if (v72 != 1)
  {
    __clrex();
    goto LABEL_112;
  }
  if (__stlxr(0, v26))
LABEL_112:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
  result = (unsigned int *)v77;
  v77 = 0;
  if (result)
  {
    v73 = result + 2;
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E75A8;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E75A8;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E75D0;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E75D0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E75D0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;
  uint64_t v5;
  char v6;

  result = *(uint64_t **)(a1 + 8);
  if (result
    && *result
    && (result = (uint64_t *)IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>>(result, (uint64_t)&v4), v6))
  {
    *(_OWORD *)a2 = v4;
    *(_QWORD *)(a2 + 16) = v5;
  }
  else
  {
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = (WTF *)*result;
      v4 = *((_DWORD *)result + 3);
      v5 = 40 * a2;
      result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      *v2 = (uint64_t)result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t *)v3;
        do
        {
          v8 = *result;
          *result = 0;
          *v7 = v8;
          v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + 1) = v9;
          result = WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(result)
                 + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          *v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  __int128 v6;

  v4 = WTF::fastMalloc((WTF *)0x88);
  v5 = (unsigned __int8 *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromise(v4, a2);
  *(_QWORD *)a1 = v5;
  v6 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 8) = v6;
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::setDispatchMode(v5, 0, a2);
  return a1;
}

_BYTE *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::setDispatchMode(unsigned __int8 *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  _BYTE *result;
  BOOL v9;
  int v10;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  result = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*result)
    v9 = result[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)result, a3, " runSynchronouslyOnTarget ", v5);
  atomic_store(a2, (unsigned __int8 *)(v5 + 129));
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t i;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF *v27[2];
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint8_t buf[16];
  int v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34E75F8;
  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (!*v4)
    return a1;
  v5 = v4;
  if (v4[16] < 4u)
    return a1;
  WTF::String::String((WTF::String *)&v29, "creating ");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a1, &v28);
  *(_QWORD *)buf = v29;
  v27[0] = v28;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v27, &v30);
  if (v30)
  {
    v8 = v28;
    v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *((_QWORD *)v5 + 4);
    v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v11)
    {
      WTF::String::utf8();
      v13 = v27[0] ? (char *)v27[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v11 = v27[0];
      v27[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          v11 = (WTF *)WTF::fastFree(v11, v12);
        else
          --*(_DWORD *)v11;
      }
    }
    if (*v5 && v5[16] >= 4u)
    {
      v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v15 = *v14;
        if ((v15 & 1) != 0)
          break;
        v16 = __ldaxr(v14);
        if (v16 == v15)
        {
          if (!__stxr(v15 | 1, v14))
          {
            v17 = WTF::Logger::observers(v11);
            v18 = *(unsigned int *)(v17 + 12);
            if ((_DWORD)v18)
            {
              v19 = *(uint64_t **)v17;
              v20 = *(_QWORD *)v17 + 8 * v18;
              do
              {
                v21 = *v19;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                v32 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a1, v33);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v27, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v21 + 16))(v21, v5, 4, v27);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v22);
                for (i = 24; i != -8; i -= 16)
                {
                  v24 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v24)
                  {
                    if (*(_DWORD *)v24 == 2)
                      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v24 -= 2;
                  }
                }
                ++v19;
              }
              while (v19 != (uint64_t *)v20);
            }
            v25 = __ldxr(v14);
            if (v25 == 1)
            {
              if (!__stlxr(0, v14))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v26 = v30;
    v30 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v26 -= 2;
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, &v30);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, v35);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v27);
  v28 = a1[20];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E7610[v28])(buf, a1 + 14);
  a1[20] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E7628[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  WTF *v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t i;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *result;
  uint64_t v29;
  WTF *v30[2];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint8_t buf[4];
  char *v36;
  int v37;
  _DWORD v38[4];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v32, a3);
  v29 = a4;
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v31);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v34);
  v9 = v31;
  v31 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v32;
  v32 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v33;
  v33 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(NSObject **)(a1 + 32);
  v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v30[0] ? (char *)v30[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v36 = v15;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = v30[0];
    v30[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = (WTF *)WTF::fastFree(v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers(v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v37 = 0;
              WTF::String::String((WTF::String *)v38, a3);
              v38[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v29, v39);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v23 + 16))(v23, a1, 4, v30);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v24);
              for (i = 40; i != -8; i -= 16)
              {
                v26 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v26)
                {
                  if (*(_DWORD *)v26 == 2)
                    WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v26 -= 2;
                }
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v27 = __ldxr(v16);
          if (v27 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25bufferedSamplesForTrackIdEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E34E7648;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25bufferedSamplesForTrackIdEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = (uint64_t)off_1E34E7648;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25bufferedSamplesForTrackIdEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t result;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  IPC::Encoder *v37;
  __int128 v38;
  __int128 v39;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(unsigned __int8 **)(v3 + 312);
  if (!v4)
  {
    v31 = 0;
LABEL_16:
    LOBYTE(v34) = 4;
    v37 = 0;
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = "operator()";
    *(_QWORD *)&v39 = 0;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t *)&v30, &v34, (WTF::Logger::LogSiteIdentifier *)&v37);
    goto LABEL_17;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v4, *(_QWORD *)(v3 + 320), &v31);
  if (!v31)
    goto LABEL_16;
  v5 = atomic_load((unsigned __int8 *)(v3 + 368));
  if ((v5 & 1) != 0)
    goto LABEL_16;
  v6 = atomic_load((unsigned __int8 *)(v3 + 369));
  if ((v6 & 1) != 0)
    goto LABEL_16;
  v7 = *(_QWORD *)(a1 + 64);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v3 + 312), *(_QWORD *)(v3 + 320), &v32);
  v8 = *(os_unfair_lock_s **)(v32 + 24);
  v9 = *(_QWORD *)(v3 + 336);
  v37 = 0;
  *(_QWORD *)&v38 = 0;
  *((_QWORD *)&v38 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v39 = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v34, (WTF::Logger::LogSiteIdentifier *)&v37);
  v10 = (unsigned __int8 *)v34;
  if (v34)
  {
    v11 = (unsigned int *)(v34 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = v34;
  }
  else
  {
    v13 = 0;
  }
  v30 = v10;
  v34 = 0;
  v38 = v35;
  v39 = v36;
  v14 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v14 = off_1E34E76A8;
  *(_QWORD *)(v14 + 8) = v13;
  v37 = 0;
  v15 = v39;
  *(_OWORD *)(v14 + 16) = v38;
  *(_OWORD *)(v14 + 32) = v15;
  v33[0] = v14;
  v33[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v37);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 1356;
  *(_QWORD *)(v16 + 8) = v9;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v37 = (IPC::Encoder *)v16;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = v7;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v8, &v37, v33, 0, 0);
  v18 = v37;
  v37 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v19, v20);
  }
  v21 = v33[0];
  v33[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v34);
  v23 = v32;
  v32 = 0;
  if (v23)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v23 + 16), v22);
LABEL_17:
  v24 = v31;
  v31 = 0;
  if (v24)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v24 + 16), v22);
  v25 = (unsigned int *)v30;
  v37 = 0;
  *(_QWORD *)&v38 = 0;
  *((_QWORD *)&v38 + 1) = "invokeAsync proxy";
  *(_QWORD *)&v39 = 0;
  result = WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::chainTo(v30, v2, (WTF::Logger::LogSiteIdentifier *)&v37);
  v30 = 0;
  if (v25)
  {
    v27 = v25 + 2;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v25 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::chainTo(unsigned __int8 *a1, unint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  WTF *v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t i;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unsigned __int8 *v51;
  __int128 v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  WTF *v56[2];
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint8_t buf[4];
  char *v67;
  int v68;
  _DWORD v69[4];
  uint64_t v70;
  int v71;
  _DWORD v72[4];
  uint64_t v73;
  int v74;
  _DWORD v75[4];
  uint64_t v76;
  int v77;
  _QWORD v78[3];

  v5 = (uint64_t)a1;
  v78[1] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
LABEL_4:
    a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(v5 + 128) = 1;
  v8 = *(unsigned __int8 **)a2;
  if (*(_QWORD *)a2)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *(unsigned int *)(v5 + 80);
  v12 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v12)
    v13 = v12[16] >= 4u;
  else
    v13 = 0;
  if (v13)
  {
    v14 = v12;
    WTF::Logger::LogSiteIdentifier::toString(a3);
    WTF::String::String((WTF::String *)&v63, " invoking chainTo() [");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v5, &v62);
    WTF::String::String((WTF::String *)&v61, " chainedPromise:");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v8, &v60);
    WTF::String::String((WTF::String *)&v59, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v58);
    WTF::String::String((WTF::String *)&v57, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t *)&v61, (uint64_t *)&v60, (uint64_t *)&v59, (uint64_t *)&v58, (uint64_t *)&v57, &v65);
    if (!v65)
    {
      __break(0xC471u);
      return result;
    }
    v17 = v57;
    v57 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v58;
    v58 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v59;
    v59 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v60;
    v60 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v61;
    v61 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v16);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v62;
    v62 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v16);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v63;
    v63 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v16);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v64;
    v64 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v16);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = *((_QWORD *)v14 + 4);
    v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v26)
    {
      WTF::String::utf8();
      v28 = v56[0] ? (char *)v56[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v67 = v28;
      _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v26 = v56[0];
      v56[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          v26 = (WTF *)WTF::fastFree(v26, v27);
        else
          --*(_DWORD *)v26;
      }
    }
    if (*v14 && v14[16] >= 4u)
    {
      v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v30 = *v29;
        if ((v30 & 1) != 0)
          break;
        v31 = __ldaxr(v29);
        if (v31 == v30)
        {
          if (!__stxr(v30 | 1, v29))
          {
            v54 = a2;
            v32 = WTF::Logger::observers(v26);
            v33 = *(unsigned int *)(v32 + 12);
            if ((_DWORD)v33)
            {
              v34 = *(uint64_t **)v32;
              v55 = *(_QWORD *)v32 + 8 * v33;
              do
              {
                v35 = v11;
                v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(a3);
                v68 = 0;
                WTF::String::String((WTF::String *)v69, " invoking chainTo() [");
                v69[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v5, &v70);
                v71 = 0;
                WTF::String::String((WTF::String *)v72, " chainedPromise:");
                v72[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v8, &v73);
                v74 = 0;
                WTF::String::String((WTF::String *)v75, " isNothing:");
                v75[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v76);
                v77 = 0;
                WTF::String::String((WTF::String *)v78, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v56, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v36 + 16))(v36, v14, 4, v56);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v37);
                for (i = 120; i != -8; i -= 16)
                {
                  v39 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                }
                ++v34;
                v11 = v35;
              }
              while (v34 != (uint64_t *)v55);
            }
            v40 = __ldxr(v29);
            if (v40 == 1)
            {
              a2 = v54;
              if (!__stlxr(0, v29))
                break;
            }
            else
            {
              __clrex();
              a2 = v54;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v41 = v65;
    v65 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v27);
        if (!v8)
          goto LABEL_84;
        goto LABEL_80;
      }
      *(_DWORD *)v41 -= 2;
    }
  }
  if (!v8)
    goto LABEL_84;
LABEL_80:
  v42 = (unsigned int *)(v8 + 8);
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, (unsigned int *)v8 + 2);
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 16))(v8);
  }
LABEL_84:
  v45 = atomic_load((unsigned __int8 *)(v5 + 129));
  result = (uint64_t)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::setDispatchMode(*(unsigned __int8 **)a2, v45, a3);
  if (*(_DWORD *)(v5 + 80))
  {
    result = (uint64_t)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleChainedPromise(v5, a2);
  }
  else
  {
    v46 = *(unsigned int *)(v5 + 124);
    if ((_DWORD)v46 == *(_DWORD *)(v5 + 120))
    {
      result = WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 112, v46 + 1, a2);
      v47 = *(_QWORD *)(v5 + 112) + 40 * *(unsigned int *)(v5 + 124);
      v48 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v47 = v48;
      v49 = *(_OWORD *)(result + 24);
      *(_OWORD *)(v47 + 8) = *(_OWORD *)(result + 8);
      *(_OWORD *)(v47 + 24) = v49;
    }
    else
    {
      v50 = *(_QWORD *)(v5 + 112) + 40 * v46;
      v51 = *(unsigned __int8 **)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v50 = v51;
      v52 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v50 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v50 + 8) = v52;
    }
    ++*(_DWORD *)(v5 + 124);
  }
  v53 = __ldxr(v6);
  if (v53 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t *a1, _BYTE *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::Lock *v8;
  _BYTE *v10;
  _BYTE *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  WTF *v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t i;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  char v33;
  uint64_t v34;
  WTF::Lock *result;
  int v36;
  _BYTE *v37;
  WTF::Lock *v38;
  char v39;
  WTF *v40[2];
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint8_t buf[4];
  char *v46;
  int v47;
  _DWORD v48[4];
  _QWORD v49[3];

  v49[2] = *MEMORY[0x1E0C80C00];
  v6 = WTF::fastMalloc((WTF *)0x88);
  v7 = WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromise(v6, a3);
  *a1 = v7;
  v8 = (WTF::Lock *)(v7 + 48);
  v38 = v8;
  v39 = 1;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
LABEL_4:
    v8 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v8))
    goto LABEL_4;
LABEL_5:
  v10 = (_BYTE *)WTF::NativePromiseBase::logChannel(v8);
  if (*v10)
  {
    v11 = v10;
    if (v10[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString(a3);
      WTF::String::String((WTF::String *)&v42, " rejecting ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v6, &v41);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v43, (uint64_t *)&v42, (uint64_t *)&v41, &v44);
      v13 = v41;
      v41 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v42;
      v42 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v43;
      v43 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = *((_QWORD *)v11 + 4);
      v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v17)
      {
        WTF::String::utf8();
        v19 = v40[0] ? (char *)v40[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v46 = v19;
        _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v17 = v40[0];
        v40[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            v17 = (WTF *)WTF::fastFree(v17, v18);
          else
            --*(_DWORD *)v17;
        }
      }
      if (*v11 && v11[16] >= 4u)
      {
        v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v21 = *v20;
          if ((v21 & 1) != 0)
            break;
          v22 = __ldaxr(v20);
          if (v22 == v21)
          {
            if (!__stxr(v21 | 1, v20))
            {
              v37 = a2;
              v23 = WTF::Logger::observers(v17);
              v24 = *(unsigned int *)(v23 + 12);
              if ((_DWORD)v24)
              {
                v25 = *(uint64_t **)v23;
                v26 = *(_QWORD *)v23 + 8 * v24;
                do
                {
                  v27 = *v25;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString(a3);
                  v47 = 0;
                  WTF::String::String((WTF::String *)v48, " rejecting ");
                  v48[2] = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v6, v49);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v40, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v27 + 16))(v27, v11, 4, v40);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v28);
                  for (i = 40; i != -8; i -= 16)
                  {
                    v30 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v30)
                    {
                      if (*(_DWORD *)v30 == 2)
                        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v18);
                      else
                        *(_DWORD *)v30 -= 2;
                    }
                  }
                  ++v25;
                }
                while (v25 != (uint64_t *)v26);
              }
              v31 = __ldxr(v20);
              if (v31 == 1)
              {
                a2 = v37;
                if (!__stlxr(0, v20))
                  break;
              }
              else
              {
                __clrex();
                a2 = v37;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v32 = v44;
      v44 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v18);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
  }
  v33 = *a2;
  v34 = *(unsigned int *)(v6 + 80);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E7610[v34])(buf, v6 + 56);
  *(_BYTE *)(v6 + 56) = v33;
  *(_DWORD *)(v6 + 72) = 1;
  *(_DWORD *)(v6 + 80) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(v6, (unsigned __int8 **)&v38);
  if (v39)
  {
    result = v38;
    v36 = __ldxr((unsigned __int8 *)v38);
    if (v36 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v38))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  WTF::NativePromiseBase **v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::NativePromiseBase **v20;
  uint64_t v21;
  uint64_t v22;

  v17 = &v19;
  v18 = 1;
  v20 = (WTF::NativePromiseBase **)&v22;
  v21 = 1;
  v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    v5 = *(unsigned int *)(a1 + 100);
    memcpy(&v22, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a1 + 104;
    v20 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 100);
    LODWORD(v21) = *(_DWORD *)(a1 + 96);
  }
  HIDWORD(v21) = v5;
  HIDWORD(v18) = 0;
  *(_QWORD *)(a1 + 96) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v4);
  v6 = *(uint64_t **)(a1 + 112);
  v17 = v6;
  v7 = *(unsigned int *)(a1 + 124);
  LODWORD(v18) = *(_DWORD *)(a1 + 120);
  HIDWORD(v18) = v7;
  v16[0] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v16[1] = 0;
  *(_QWORD *)(a1 + 120) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v8);
  if (HIDWORD(v21))
  {
    v10 = v20;
    v11 = 8 * HIDWORD(v21);
    do
    {
      v12 = *v10++;
      WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if ((_DWORD)v7)
  {
    v13 = 40 * v7;
    do
    {
      WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleChainedPromise(a1, v6);
      v6 += 5;
      v13 -= 40;
    }
    while (v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v14);
}

uint64_t *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unsigned int *v13;
  __int128 v14;
  __int128 v15;

  v2 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  v13 = v2;
  v3 = *(_OWORD *)(a2 + 24);
  v14 = *(_OWORD *)(a2 + 8);
  v15 = v3;
  if (v2)
  {
    v4 = v2 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>((uint64_t)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
  }
  return WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v13);
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E7610[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E7660[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E7610[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE v15[16];
  unsigned int v16;
  _BYTE v17[16];
  int v18;
  char v19;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_BYTE *, uint64_t))off_1E34E7610[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 24) = -1;
    *(_BYTE *)v4 = 0;
    *(_DWORD *)(v4 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  v15[0] = 0;
  v16 = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  v8 = *(unsigned int *)(a2 + 16);
  if (v16 != -1 || (_DWORD)v8 != -1)
  {
    v10 = v16 == -1;
    if (v16 == -1)
      v11 = -1;
    else
      v11 = v16;
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E34E7678[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        v12 = v15;
        if ((_DWORD)v8 == 1)
          v13 = v15;
        else
          v13 = (_BYTE *)a2;
        if ((_DWORD)v8 == 1)
          v12 = (_BYTE *)a2;
        if ((_DWORD)v8 == -1)
          v14 = v15;
        else
          v14 = v13;
        if ((_DWORD)v8 != -1)
          a2 = (uint64_t)v12;
      }
      else
      {
        v14 = v15;
      }
      v17[0] = 0;
      v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>(a2, (uint64_t)v14);
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_1E34E7628[v18])(&v19, v17);
    }
  }
  if (v16 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34E7628[v16])(v17, v15);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E7610[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E7628[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E7688[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorINS7_6StringELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorINS7_6StringELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E76A8;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E76A8;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (WTF::NativePromiseBase *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E76D0;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, &v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

unsigned __int8 *WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(WTF::NativePromiseBase *a1, _QWORD *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v3;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 *result;
  BOOL v12;
  unsigned __int8 *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t j;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v8 = 0;
    goto LABEL_13;
  }
  v5 = (uint64_t *)a1;
  v6 = (unsigned __int8 *)(v3 + 48);
  if (__ldaxr((unsigned __int8 *)(v3 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v3 + 48);
LABEL_7:
  v9 = *(_DWORD *)(v3 + 80);
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v6))
LABEL_11:
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v8 = *v5;
  if (v9)
  {
LABEL_13:
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v12 = result[16] >= 4u;
    else
      v12 = 0;
    if (v12)
    {
      v13 = result;
      WTF::Logger::LogSiteIdentifier::toString(a3);
      WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v8, &v68);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
      v15 = v68;
      v68 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v18 = v69;
      v69 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v14);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v70;
      v70 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v14);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = *((_QWORD *)v13 + 4);
      v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v21)
      {
        WTF::String::utf8();
        v23 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v23;
        _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v21 = v66[0];
        v66[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            v21 = (WTF *)WTF::fastFree(v21, v22);
          else
            --*(_DWORD *)v21;
        }
      }
      if (*v13 && v13[16] >= 4u)
      {
        v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v29 = *v28;
          if ((v29 & 1) != 0)
            break;
          v30 = __ldaxr(v28);
          if (v30 == v29)
          {
            if (!__stxr(v29 | 1, v28))
            {
              v31 = WTF::Logger::observers(v21);
              v32 = *(unsigned int *)(v31 + 12);
              if ((_DWORD)v32)
              {
                v33 = *(uint64_t **)v31;
                v34 = *(_QWORD *)v31 + 8 * v32;
                do
                {
                  v35 = *v33;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString(a3);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v8, v76);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                  for (i = 40; i != -8; i -= 16)
                  {
                    v38 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v38)
                    {
                      if (*(_DWORD *)v38 == 2)
                        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v38 -= 2;
                    }
                  }
                  ++v33;
                }
                while (v33 != (uint64_t *)v34);
              }
              v39 = __ldxr(v28);
              if (v39 == 1)
              {
                if (!__stlxr(0, v28))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = (unsigned __int8 *)v64;
      v64 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
        else
          *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  v16 = (unsigned __int8 *)(v8 + 48);
  v64 = (WTF::StringImpl *)(v8 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v8 + 48)))
  {
    __clrex();
LABEL_40:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_41;
  }
  if (__stxr(1u, v16))
    goto LABEL_40;
LABEL_41:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString(a3);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v8, &v67);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v46 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v47 = *v46;
          if ((v47 & 1) != 0)
            break;
          v48 = __ldaxr(v46);
          if (v48 == v47)
          {
            if (!__stxr(v47 | 1, v46))
            {
              v62 = a2;
              v49 = WTF::Logger::observers(v43);
              v50 = *(unsigned int *)(v49 + 12);
              if ((_DWORD)v50)
              {
                v51 = *(uint64_t **)v49;
                v52 = *(_QWORD *)v49 + 8 * v50;
                do
                {
                  v53 = *v51;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString(a3);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v8, v76);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v53 + 16))(v53, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v54);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v56 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v56)
                    {
                      if (*(_DWORD *)v56 == 2)
                        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v56 -= 2;
                    }
                  }
                  ++v51;
                }
                while (v51 != (uint64_t *)v52);
              }
              v57 = __ldxr(v46);
              if (v57 == 1)
              {
                a2 = v62;
                if (!__stlxr(0, v46))
                  break;
              }
              else
              {
                __clrex();
                a2 = v62;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v58 = v70;
      v70 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v58 -= 2;
      }
    }
  }
  v59 = *(unsigned int *)(v8 + 80);
  if ((_DWORD)v59 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E7610[v59])(buf, v8 + 56);
  v60 = *a2;
  *a2 = 0;
  *(_QWORD *)(v8 + 56) = v60;
  *(_DWORD *)(v8 + 80) = 2;
  result = (unsigned __int8 *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(v8, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = (unsigned __int8 *)v64;
    v61 = __ldxr((unsigned __int8 *)v64);
    if (v61 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E76D0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E76D0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _BYTE v4[16];
  int v5;
  char v6;
  char v7;

  v3 = *(uint64_t **)(result + 8);
  if (v3
    && *v3
    && (result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>>((uint64_t)v4, v3), v6))
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
    if (v6)
    {
      if (v5 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34E7628[v5])(&v7, v4);
    }
  }
  else
  {
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  int v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v20 = 0;
    v21 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v21 = *a2;
        v20 = a2[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_21;
  }
  v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v20 = v6;
    v21 = 0;
LABEL_21:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_22;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v6)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v24 + 16))(v24, v5);
    goto LABEL_8;
  }
  if (v9)
  {
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5, (uint64_t)&v28);
    if (v30)
    {
      v25[0] = v28;
      v11 = v29;
      v28 = 0;
      v29 = 0;
      v25[1] = v11;
      v26 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
LABEL_14:
      v27 = 1;
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 16) = -1;
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v25);
      v19 = v27;
      *(_BYTE *)(a1 + 24) = 1;
      if (!v19)
        return result;
      if (v26 == -1)
        return result;
      result = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E34E7628[v26])(&v28, v25);
      if (*(_BYTE *)(a1 + 24))
        return result;
      goto LABEL_10;
    }
  }
  else
  {
    v12 = IPC::Decoder::decode<WebCore::PlatformMediaError>(a2);
    if (v12 >= 0x100u)
    {
      LOBYTE(v25[0]) = v12;
      v26 = 1;
      goto LABEL_14;
    }
  }
LABEL_8:
  v13 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15 && v14)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_10:
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v17)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = (WTF *)*result;
      v4 = *((_DWORD *)result + 3);
      v5 = 40 * a2;
      result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      *v2 = (uint64_t)result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t *)v3;
        do
        {
          v8 = *result;
          *result = 0;
          *v7 = v8;
          v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + 1) = v9;
          result = WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(result)
                 + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          *v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25enqueuedSamplesForTrackIDEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E34E76F8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25enqueuedSamplesForTrackIDEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = (uint64_t)off_1E34E76F8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25enqueuedSamplesForTrackIDEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t result;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  IPC::Encoder *v37;
  __int128 v38;
  __int128 v39;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(unsigned __int8 **)(v3 + 312);
  if (!v4)
  {
    v31 = 0;
LABEL_16:
    LOBYTE(v34) = 4;
    v37 = 0;
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = "operator()";
    *(_QWORD *)&v39 = 0;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t *)&v30, &v34, (WTF::Logger::LogSiteIdentifier *)&v37);
    goto LABEL_17;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v4, *(_QWORD *)(v3 + 320), &v31);
  if (!v31)
    goto LABEL_16;
  v5 = atomic_load((unsigned __int8 *)(v3 + 368));
  if ((v5 & 1) != 0)
    goto LABEL_16;
  v6 = atomic_load((unsigned __int8 *)(v3 + 369));
  if ((v6 & 1) != 0)
    goto LABEL_16;
  v7 = *(_QWORD *)(a1 + 64);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v3 + 312), *(_QWORD *)(v3 + 320), &v32);
  v8 = *(os_unfair_lock_s **)(v32 + 24);
  v9 = *(_QWORD *)(v3 + 336);
  v37 = 0;
  *(_QWORD *)&v38 = 0;
  *((_QWORD *)&v38 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v39 = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v34, (WTF::Logger::LogSiteIdentifier *)&v37);
  v10 = (unsigned __int8 *)v34;
  if (v34)
  {
    v11 = (unsigned int *)(v34 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = v34;
  }
  else
  {
    v13 = 0;
  }
  v30 = v10;
  v34 = 0;
  v38 = v35;
  v39 = v36;
  v14 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v14 = off_1E34E7720;
  *(_QWORD *)(v14 + 8) = v13;
  v37 = 0;
  v15 = v39;
  *(_OWORD *)(v14 + 16) = v38;
  *(_OWORD *)(v14 + 32) = v15;
  v33[0] = v14;
  v33[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v37);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 1359;
  *(_QWORD *)(v16 + 8) = v9;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v37 = (IPC::Encoder *)v16;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = v7;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v8, &v37, v33, 0, 0);
  v18 = v37;
  v37 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v19, v20);
  }
  v21 = v33[0];
  v33[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v34);
  v23 = v32;
  v32 = 0;
  if (v23)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v23 + 16), v22);
LABEL_17:
  v24 = v31;
  v31 = 0;
  if (v24)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v24 + 16), v22);
  v25 = (unsigned int *)v30;
  v37 = 0;
  *(_QWORD *)&v38 = 0;
  *((_QWORD *)&v38 + 1) = "invokeAsync proxy";
  *(_QWORD *)&v39 = 0;
  result = WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::chainTo(v30, v2, (WTF::Logger::LogSiteIdentifier *)&v37);
  v30 = 0;
  if (v25)
  {
    v27 = v25 + 2;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v25 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E7720;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E7720;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (WTF::NativePromiseBase *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E7748;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, &v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E7748;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E7748;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _BYTE v4[16];
  int v5;
  char v6;
  char v7;

  v3 = *(uint64_t **)(result + 8);
  if (v3
    && *v3
    && (result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>>((uint64_t)v4, v3), v6))
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
    if (v6)
    {
      if (v5 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34E7628[v5])(&v7, v4);
    }
  }
  else
  {
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRemoteCommandListener,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WebKit::RemoteRemoteCommandListener *v6;
  BOOL v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *((_QWORD *)v2 + 2);
    v6 = (WebKit::RemoteRemoteCommandListener *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener(v6, a2);
    this = (unsigned __int8 *)WTF::fastFree(v9, v10);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(void)::$_0,void,WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34E7788;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(void)::$_0,void,WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7788;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(void)::$_0,void,WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&>::call(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  WebKit::WebProcess *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  WebKit::WebProcess *v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  char v30;
  __int128 v31;
  _OWORD v32[2];
  char v33;
  _QWORD v34[2];
  char v35;
  _QWORD v36[2];
  char v37;
  __int16 v38;
  IPC::Encoder *v39;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    {
      v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v6 = WebKit::WebProcess::WebProcess(v25);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
    }
    v7 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection(v6) + 24);
    v8 = *a3;
    *a3 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34E77B0;
    v9[1] = v8;
    v10 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1115;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v39 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::encode((IPC::Encoder *)v11, a2);
    v26 = v9;
    v27 = v10;
    IPC::Connection::sendMessageWithAsyncReply(v7, &v39, (uint64_t *)&v26, 0, 0);
    v13 = (uint64_t)v26;
    v26 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    result = v39;
    v39 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  else
  {
    LOWORD(v26) = 0;
    BYTE2(v26) = 0;
    LOBYTE(v27) = 0;
    v30 = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v17 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      v27 = v17;
      v18 = *(_OWORD *)(a2 + 24);
      v28 = *(_OWORD *)(a2 + 8);
      v29 = v18;
      v30 = 1;
    }
    LOBYTE(v31) = 0;
    v33 = 0;
    if (*(_BYTE *)(a2 + 96))
    {
      v19 = *(_OWORD *)(a2 + 48);
      v20 = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      v31 = v19;
      v32[0] = v20;
      *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)(a2 + 74);
      v33 = 1;
    }
    LOBYTE(v34[0]) = 0;
    v35 = 0;
    if (*(_BYTE *)(a2 + 120))
    {
      v34[0] = *(_QWORD *)(a2 + 104);
      v21 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      v34[1] = v21;
      v35 = 1;
    }
    LOBYTE(v36[0]) = 0;
    v37 = 0;
    if (*(_BYTE *)(a2 + 144))
    {
      v36[0] = *(_QWORD *)(a2 + 128);
      v22 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      v36[1] = v22;
      v37 = 1;
    }
    v38 = *(_WORD *)(a2 + 152);
    (*(void (**)(_QWORD, _QWORD **))(*(_QWORD *)*a3 + 16))(*a3, &v26);
    if (v37)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v23);
    if (v35)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v23);
    result = (IPC::Encoder *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, (WTF::StringImpl *)v23);
    if (v30)
    {
      result = v27;
      v27 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (IPC::Encoder *)WTF::StringImpl::destroy(result, v24);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0)#1},void,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E77B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0)#1},void,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E77B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0)#1},void,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  void *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __int16 v19;
  char v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  _OWORD v26[2];
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int16 v34;
  char v35;
  __int16 v36;
  char v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  char v41;
  __int128 v42;
  _OWORD v43[2];
  char v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  char v52;

  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(*(_QWORD *)(a1 + 8));
  IPC::ArgumentCoder<WebCore::MediaCapabilitiesDecodingInfo,void>::decode(a2, (uint64_t)&v36);
  if (v52)
    goto LABEL_4;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v17 = a2[3];
  if (!v17)
  {
    v16 = 0;
LABEL_25:
    v18 = 0;
    goto LABEL_26;
  }
  if (!v16)
    goto LABEL_25;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  if (v52)
  {
LABEL_4:
    v19 = v36;
    v20 = v37;
    LOBYTE(v21) = 0;
    v24 = 0;
    if (v41)
    {
      v5 = v38;
      v38 = 0;
      v21 = v5;
      v22 = v39;
      v23 = v40;
      v24 = 1;
    }
    LOBYTE(v25) = 0;
    v27 = 0;
    if (v44)
    {
      v6 = v42;
      v42 = 0uLL;
      v25 = v6;
      v26[0] = v43[0];
      *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v43 + 10);
      v27 = 1;
    }
    LOBYTE(v28) = 0;
    v30 = 0;
    v7 = v47;
    if (v47)
    {
      v28 = v45;
      v8 = v46;
      v45 = 0;
      v46 = 0;
      v29 = v8;
      v30 = 1;
    }
    LOBYTE(v31) = 0;
    v33 = 0;
    if (v50)
    {
      v31 = v48;
      v9 = v49;
      v48 = 0;
      v49 = 0;
      v32 = v9;
      v33 = 1;
      v10 = v51;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
      v7 = v47;
    }
    else
    {
      v10 = v51;
    }
    v34 = v10;
    v35 = 1;
    if (v7)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v4);
    std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, (WTF::StringImpl *)v4);
    if (v41)
    {
      v13 = v38;
      v38 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    (*(void (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v19);
    return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<WebCore::MediaCapabilitiesDecodingInfo>,false>::~__optional_destruct_base[abi:sn180100](&v19, v14);
  }
  v18 = (void *)*a2;
  v16 = a2[1];
  v17 = a2[3];
LABEL_26:
  LOBYTE(v19) = 0;
  v35 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v17 && v16)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v17 + 16))(v17, v18);
  std::__optional_destruct_base<std::tuple<WebCore::MediaCapabilitiesDecodingInfo>,false>::~__optional_destruct_base[abi:sn180100](&v19, v18);
  return IPC::Connection::cancelReply<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(*(_QWORD *)(a1 + 8));
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactory::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::Function<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0>(uint64_t a1)
{
  void *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4[2];
  __int128 v5;
  __int128 v6;
  _OWORD v7[4];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = 256;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  v6 = 0u;
  memset(v7, 0, sizeof(v7));
  *(_OWORD *)v4 = 0u;
  v5 = 0u;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 16))(a1, v4);
  if (BYTE8(v10))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9 + 8, v1);
  if ((_BYTE)v9)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v1);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7 + 8, (WTF::StringImpl *)v1);
  if (LOBYTE(v7[0]))
  {
    result = v4[1];
    v4[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_BYTE *std::__optional_destruct_base<std::tuple<WebCore::MediaCapabilitiesDecodingInfo>,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1, void *a2)
{
  WTF::StringImpl *v3;

  if (a1[168])
  {
    if (a1[152])
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 136), a2);
    if (a1[128])
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 112), a2);
    std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 56), (WTF::StringImpl *)a2);
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8), v3);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::MediaPlayerMediaEngineIdentifier,WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashMap<WebCore::MediaPlayerMediaEngineIdentifier,std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>,WTF::IntHash<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaPlayerMediaEngineIdentifier>>::expand(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  if (v7)
  {
    v10 = v7;
    v11 = (_QWORD *)(v8 + 24);
    do
    {
      *((_BYTE *)v11 - 8) = -1;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (_BYTE *)(v4 + 16 * v12);
      v15 = *v14;
      if (v15 != 254)
      {
        if (v15 == 255)
        {
          std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100]((WebKit::RemoteMediaPlayerMIMETypeCache **)(v4 + 16 * v12 + 8), 0);
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
          v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            v21 = v20 & v17;
            v20 = ++v18 + v21;
          }
          while (*(unsigned __int8 *)(v16 + 16 * v21) != 255);
          v22 = v16 + 16 * v21;
          std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100]((WebKit::RemoteMediaPlayerMIMETypeCache **)(v22 + 8), 0);
          *(_BYTE *)v22 = *v14;
          v23 = v4 + 16 * v12;
          v24 = *(_QWORD *)(v23 + 8);
          v23 += 8;
          *(_QWORD *)v23 = 0;
          *(_QWORD *)(v22 + 8) = v24;
          std::unique_ptr<WebKit::RemoteMediaPlayerMIMETypeCache>::reset[abi:sn180100]((WebKit::RemoteMediaPlayerMIMETypeCache **)v23, 0);
          if (v14 == a2)
            v13 = v22;
        }
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v13;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = (uint64_t *)(v18 + 24 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (*v26);
          v27 = v25;
          v28 = v18 + 24 * v25;
          v31 = *(unsigned __int8 **)(v28 + 8);
          v30 = (_QWORD *)(v28 + 8);
          v29 = v31;
          *v30 = 0;
          if (v31)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v29, v8);
          *v26 = *v14;
          v32 = v4 + 24 * v11;
          *v30 = *(_QWORD *)(v32 + 8);
          v33 = *(_QWORD *)(v32 + 16);
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v32 + 16) = 0;
          *(_QWORD *)(v18 + 24 * v27 + 16) = v33;
          v34 = *(unsigned __int8 **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v34, v8);
          if (v14 == a3)
            v12 = v26;
        }
        else
        {
          v16 = v4 + 24 * v11;
          v17 = *(unsigned __int8 **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v17, v8);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

unsigned __int8 *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  unsigned __int8 *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (unsigned __int8 *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaPlayerManager::setUseGPUProcess(BOOL)::$_1,void,void (*)(std::unique_ptr<WebCore::MediaPlayerFactory> &&),WebCore::MediaPlayerMediaEngineIdentifier>::call(uint64_t a1, void (*a2)(uint64_t *), char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = off_1E34E7800;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = v5;
  v8 = v6;
  a2(&v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::MediaPlayerRemoteFactory::~MediaPlayerRemoteFactory(unsigned int **this, void *a2)
{
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  WTF::fastFree((WTF *)this, v3);
}

uint64_t WebKit::MediaPlayerRemoteFactory::identifier(WebKit::MediaPlayerRemoteFactory *this)
{
  return *((unsigned __int8 *)this + 16);
}

void WebKit::MediaPlayerRemoteFactory::createMediaEnginePlayer(WebKit::MediaPlayerRemoteFactory *this@<X0>, WebCore::MediaPlayer *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  char v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  char v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t IdentifierInternal;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  WTF *v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71[4];
  _QWORD v72[2];
  unsigned int v73[4];
  char v74;
  unsigned int v75[4];
  char v76;
  _BYTE v77[24];
  _BYTE v78[24];
  _BYTE v79[24];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[32];
  uint64_t v84;
  unint64_t v85;
  _QWORD v86[4];

  v86[2] = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = *((_BYTE *)this + 16);
  v74 = 0;
  LOBYTE(v75[0]) = 0;
  v76 = 0;
  v77[0] = 0;
  v77[16] = 0;
  v78[0] = 0;
  v78[16] = 0;
  v79[0] = 0;
  v79[16] = 0;
  v72[0] = 0;
  v72[1] = 0;
  LOBYTE(v73[0]) = 0;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  memset(v83, 0, 28);
  v85 = 0;
  memset(v86, 0, 14);
  v84 = 0;
  WebCore::MediaPlayer::referrer(a2);
  WebCore::MediaPlayer::userAgent(a2);
  v71[1] = v68;
  WebCore::MediaPlayer::sourceApplicationIdentifier(a2);
  v71[2] = v68;
  WebCore::MediaPlayer::mediaPlayerNetworkInterfaceName(a2);
  v71[3] = v68;
  v7 = WebCore::MediaPlayer::mediaContentTypesRequiringHardwareSupport(a2);
  WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v72, v7);
  BYTE2(v86[1]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 136))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  WebCore::MediaPlayer::preferredAudioCharacteristics(a2);
  if (HIDWORD(v81))
    WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)v81, (WTF::StringImpl *)(v81 + 8 * HIDWORD(v81)));
  v9 = (WTF *)v81;
  if ((_QWORD)v81)
  {
    *(_QWORD *)&v81 = 0;
    DWORD2(v81) = 0;
    WTF::fastFree(v9, v8);
  }
  *(_QWORD *)&v81 = v68;
  v10 = v69;
  v68 = 0;
  v69 = 0;
  *((_QWORD *)&v81 + 1) = v10;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v8);
  v86[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 664))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  LOBYTE(v86[1]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 328))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  BYTE1(v86[1]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 264))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  WebCore::MediaPlayer::outOfBandTrackSources(a2);
  v64 = a3;
  if (v67)
  {
    if (v67 >= 0x6666667)
    {
      __break(0xC471u);
      return;
    }
    v12 = WTF::fastMalloc((WTF *)(40 * v67));
    v13 = 40 * v67 / 0x28;
    v14 = 0;
    v15 = v12 + 16;
    do
    {
      v16 = *((_QWORD *)v65 + v14);
      v17 = *(_DWORD **)(v16 + 16);
      if (v17)
        *v17 += 2;
      v18 = *(_DWORD **)(v16 + 24);
      if (v18)
        *v18 += 2;
      v19 = *(_DWORD **)(v16 + 32);
      if (v19)
        *v19 += 2;
      v20 = *(_BYTE *)(v16 + 48);
      v21 = *(_QWORD *)(v16 + 40);
      *(_QWORD *)(v15 - 16) = v17;
      *(_QWORD *)(v15 - 8) = v18;
      *(_QWORD *)v15 = v19;
      *(_QWORD *)(v15 + 8) = v21;
      *(_BYTE *)(v15 + 16) = v20;
      ++v14;
      v15 += 40;
    }
    while (v14 < v67);
    HIDWORD(v69) = v14;
  }
  else
  {
    LODWORD(v14) = 0;
    v13 = 0;
    v12 = 0;
  }
  if (HIDWORD(v82))
    WTF::VectorDestructor<true,WebCore::PlatformTextTrackData>::destruct((WTF::StringImpl *)v82, (WTF::StringImpl *)(v82 + 40 * HIDWORD(v82)));
  v22 = (WTF *)v82;
  if ((_QWORD)v82)
  {
    *(_QWORD *)&v82 = 0;
    DWORD2(v82) = 0;
    WTF::fastFree(v22, v11);
  }
  v68 = 0;
  v69 = 0;
  *(_QWORD *)&v82 = v12;
  *((_QWORD *)&v82 + 1) = __PAIR64__(v14, v13);
  WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v11);
  if (v67)
  {
    v24 = v65;
    v25 = 8 * v67;
    do
    {
      v26 = *(_DWORD **)v24;
      *(_QWORD *)v24 = 0;
      if (v26)
      {
        if (v26[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
        else
          --v26[2];
      }
      v24 = (WTF *)((char *)v24 + 8);
      v25 -= 8;
    }
    while (v25);
  }
  v27 = v65;
  if (v65)
  {
    v65 = 0;
    v66 = 0;
    WTF::fastFree(v27, v23);
  }
  WebCore::MediaPlayer::documentSecurityOrigin(a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v83, (uint64_t)&v68);
  v84 = *((_QWORD *)a2 + 25);
  WebCore::MediaPlayer::videoLayerSize(a2);
  v85 = __PAIR64__(v29, v28);
  v30 = (unsigned __int8 *)WebCore::MediaPlayer::allowedMediaContainerTypes(a2);
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(v73, v30);
  v31 = (unsigned __int8 *)WebCore::MediaPlayer::allowedMediaCodecTypes(a2);
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(v75, v31);
  v32 = WebCore::MediaPlayer::allowedMediaVideoCodecIDs(a2);
  std::__optional_storage_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((uint64_t)v77, v32);
  v33 = WebCore::MediaPlayer::allowedMediaAudioCodecIDs(a2);
  std::__optional_storage_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((uint64_t)v78, v33);
  v34 = WebCore::MediaPlayer::allowedMediaCaptionFormatTypes(a2);
  std::__optional_storage_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((uint64_t)v79, v34);
  *(_QWORD *)&v80 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 272))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  *((_QWORD *)&v80 + 1) = v35;
  BYTE3(v86[1]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 608))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  BYTE5(v86[1]) = WebCore::MediaPlayer::canShowWhileLocked(a2);
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 1) + 8) + 656))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8));
  v38 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection((WebKit::RemoteMediaPlayerManager *)v5) + 24);
  v39 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v39 = 1117;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 528) = v39 + 16;
  *(_QWORD *)(v39 + 536) = v39 + 16;
  *(_OWORD *)(v39 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v39 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v39);
  v65 = (WTF *)v39;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v39, 8uLL, 8) = IdentifierInternal;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v39, 8uLL, 8) = v37;
  *IPC::Encoder::grow((IPC::Encoder *)v39, 1uLL, 1) = v6;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerProxyConfiguration,void>::encode((IPC::Encoder *)v39, v71);
  IPC::Connection::sendMessageImpl(v38, (uint64_t *)&v65, 0, 0);
  v41 = v65;
  v65 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v42, v43);
  }
  v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x378);
  WebKit::MediaPlayerPrivateRemote::MediaPlayerPrivateRemote((uint64_t)v44, a2, v6, IdentifierInternal, (uint64_t)v5);
  v48 = v5[2];
  v47 = v5 + 2;
  v46 = v48;
  if (v48
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v47, 0), (v46 = *v47) != 0))
  {
    v49 = *(_DWORD *)(v46 - 8);
  }
  else
  {
    v49 = 0;
  }
  v50 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
  v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
  v53 = v49 & ((v52 >> 31) ^ v52);
  v54 = (uint64_t *)(v46 + 24 * v53);
  v55 = *v54;
  if (*v54)
  {
    v56 = 0;
    v57 = 1;
    while (v55 != IdentifierInternal)
    {
      if (v55 == -1)
        v56 = v54;
      v53 = (v53 + v57) & v49;
      v54 = (uint64_t *)(v46 + 24 * v53);
      v55 = *v54;
      ++v57;
      if (!*v54)
      {
        if (v56)
        {
          *v56 = 0;
          v56[1] = 0;
          v56[2] = 0;
          --*(_DWORD *)(*v47 - 16);
          v54 = v56;
        }
        goto LABEL_43;
      }
    }
    goto LABEL_52;
  }
LABEL_43:
  *v54 = IdentifierInternal;
  WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>::operator=<WebKit::MediaPlayerPrivateRemote,(void *)0>((uint64_t)(v54 + 1), v44);
  v58 = *v47;
  if (*v47)
    v59 = *(_DWORD *)(v58 - 12) + 1;
  else
    v59 = 1;
  *(_DWORD *)(v58 - 12) = v59;
  v60 = *v47;
  if (*v47)
    v61 = *(_DWORD *)(v60 - 12);
  else
    v61 = 0;
  v62 = (*(_DWORD *)(v60 - 16) + v61);
  v63 = *(unsigned int *)(v60 - 4);
  if (v63 > 0x400)
  {
    if (v63 > 2 * v62)
      goto LABEL_52;
    goto LABEL_51;
  }
  if (3 * v63 <= 4 * v62)
LABEL_51:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v47, v54);
LABEL_52:
  *v64 = v44;
  if (v70 != -1)
    ((void (*)(WTF **, uint64_t *))off_1E34E7310[v70])(&v65, &v68);
  WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxyConfiguration *)v71, v45);
}

WTF::StringImpl ***WebKit::MediaPlayerRemoteFactory::getSupportedTypes(uint64_t a1, WTF::StringImpl ***a2)
{
  WebKit::RemoteMediaPlayerMIMETypeCache *v3;
  char *v4;

  v3 = WebKit::RemoteMediaPlayerManager::typeCache(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 16));
  v4 = WebKit::RemoteMediaPlayerMIMETypeCache::supportedTypes(v3);
  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=(a2, (_QWORD **)v4);
}

uint64_t WebKit::MediaPlayerRemoteFactory::supportsTypeAndCodecs(WebKit::MediaPlayerRemoteFactory *this, const WebCore::MediaEngineSupportParameters *a2)
{
  uint64_t v3;
  char v4;
  WebKit::RemoteMediaPlayerMIMETypeCache *v5;

  if (*((_BYTE *)a2 + 57))
    return 0;
  v3 = *((_QWORD *)this + 3);
  v4 = *((_BYTE *)this + 16);
  if (!WebCore::contentTypeMeetsContainerAndCodecTypeRequirements())
    return 0;
  v5 = WebKit::RemoteMediaPlayerManager::typeCache(v3, v4);
  return WebKit::RemoteMediaPlayerMIMETypeCache::supportsTypeAndCodecs(v5, a2);
}

void WebKit::MediaPlayerRemoteFactory::originsInMediaCache(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::MediaPlayerRemoteFactory::supportsKeySystem(WebKit::MediaPlayerRemoteFactory *this, const WTF::String *a2, const WTF::String *a3)
{
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::ResponseReceived,WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E7860;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::ResponseReceived,WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7860;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::ResponseReceived,WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::responseReceived(WebCore::PlatformMediaResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!a2 || (v2 = *a2) == 0)
  {
LABEL_9:
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v3 = a2[1];
  if (v3 <= a2[2] - v2)
  {
    v7 = 0;
    v8 = 0;
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9)
    {
      v21 = a2;
      v26 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v3);
        v7 = 0;
        v22 = *v21;
        v23 = v21[1];
        v24 = v21[3];
        *v21 = 0;
        v21[1] = 0;
        v8 = 0;
        if (v24)
        {
          a1 = v26;
          a2 = v21;
          if (v23)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22, v23);
            a2 = v21;
            a1 = v26;
            v8 = *v21;
            v7 = v21[1];
          }
          goto LABEL_7;
        }
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      a1 = v26;
      a2 = v21;
    }
LABEL_7:
    *a2 = 0;
    a2[1] = 0;
    v10 = a2[3];
    if (v10 && v7)
    {
      v25 = a1;
      v15 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      a2 = v15;
      a1 = v25;
    }
    v12 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v11)
      {
        v16 = a1;
        v17 = a2;
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v13 + 16))(a2[3], v12);
        a1 = v16;
        v18 = *v17;
        v19 = v17[1];
        v20 = v17[3];
        *v17 = 0;
        v17[1] = 0;
        if (v20)
        {
          if (v19)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
            a1 = v16;
          }
        }
      }
    }
    goto LABEL_9;
  }
  v4 = (unsigned __int8 *)a2[2];
  a2[2] = v4 + 1;
  v5 = *v4;
  if (v5 >= 2)
  {
    v7 = v3;
    v8 = v2;
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v6 + 16))(v6, v5 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ResourceResponse const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::RedirectReceived,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0)#1},void,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E7888;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceResponse const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::RedirectReceived,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0)#1},void,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7888;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::ResourceResponse const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::RedirectReceived,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0)#1},void,WebKit::RemoteMediaResourceProxy::redirectReceived(WebCore::PlatformMediaResource &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE v4[208];

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>(a2, v4);
    if (v4[200])
    {
      v3 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v4);
    }
    else
    {
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v4);
      IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>((uint64_t *)(a1 + 8));
  }
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaResourceManager::DataReceived,WebKit::RemoteMediaResourceProxy::dataReceived(WebCore::PlatformMediaResource &,WebCore::SharedBuffer const&)::$_0>(WebKit::RemoteMediaResourceProxy::dataReceived(WebCore::PlatformMediaResource &,WebCore::SharedBuffer const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[8];
  uint64_t v7;
  char v8;
  char v9;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  char v13;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(a2, (uint64_t)v10);
    if (v13)
    {
      v6[0] = 0;
      v8 = 0;
      if (v12)
      {
        WTF::MachSendRight::MachSendRight();
        v7 = v11;
        v8 = 1;
        v9 = 1;
        if (v13 && v12)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v10);
      }
      else
      {
        v9 = 1;
      }
      goto LABEL_9;
    }
    v6[0] = 0;
    v9 = 0;
    v3 = *a2;
    v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v5 = a2[3];
    if (v5)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
        if (v9)
        {
LABEL_9:
          if (v8)
          {
            WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
          }
        }
      }
    }
  }
}

WTF **WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(WTF **this, void *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (WTF *)this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = this[6];
    if (v5)
    {
      do
      {
        v6 = *(WTF **)v5;
        WTF::fastFree(v5, a2);
        v5 = v6;
      }
      while (v6);
    }
    v7 = (WTF *)*((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = 0;
    if (v7)
      WTF::fastFree(v7, a2);
    v8 = *((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return this;
}

WTF *WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(WTF *this, void *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = *((_QWORD *)this + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createDecoder(WTF::String const&,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Decoder *>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  *(_QWORD *)a1 = &off_1E34E78D8;
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(WTF **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createDecoder(WTF::String const&,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E34E78D8;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF **WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createDecoder(WTF::String const&,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v4;
  WebKit::LibWebRTCCodecs *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  WebCore::VideoDecoder *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebKit::WebProcess *v15;
  WebKit::LibWebRTCCodecs *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  WTF **v20;
  WTF *v21;
  WTF **v22;
  void *v23;
  uint64_t v24;
  WTF **result;
  WTF *v26;
  WTF **v27;
  WebKit::WebProcess *v28;
  WebKit::WebProcess *v29;
  WTF **v30;

  if (a2)
  {
    if (*(_DWORD *)(a1 + 36))
    {
      {
        v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v4 = WebKit::WebProcess::WebProcess(v29);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
      }
      v5 = WebKit::WebProcess::libWebRTCCodecs(v4);
      WebKit::LibWebRTCCodecs::setDecoderFormatDescription((uint64_t)v5, a2, *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 36), *(_WORD *)(a1 + 8), *(_WORD *)(a1 + 16));
    }
    v6 = WTF::fastMalloc((WTF *)0x48);
    v7 = v6;
    *(_DWORD *)v6 = 1;
    v8 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(v6 + 8) = v8;
    v9 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(v6 + 16) = v9;
    *(_BYTE *)(v6 + 24) = 0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_DWORD *)(v6 + 64) = 1065353216;
    do
      v10 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v10 + 1, (unsigned int *)v6));
    v11 = (WebCore::VideoDecoder *)WTF::fastMalloc((WTF *)0x20);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = WebCore::VideoDecoder::VideoDecoder(v11);
    *(_QWORD *)v14 = off_1E34E6F28;
    *(_QWORD *)(v14 + 8) = a2;
    *(_QWORD *)(v14 + 16) = v7;
    *(_WORD *)(v14 + 24) = v12;
    *(_WORD *)(v14 + 26) = v13;
    {
      v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v15 = WebKit::WebProcess::WebProcess(v28);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
    }
    v16 = WebKit::WebProcess::libWebRTCCodecs(v15);
    v17 = *((_QWORD *)v11 + 1);
    v18 = (unsigned int *)*((_QWORD *)v11 + 2);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = (WTF **)WTF::fastMalloc((WTF *)0x10);
    *v20 = (WTF *)&off_1E34E79E8;
    v20[1] = (WTF *)v18;
    v30 = v20;
    WebKit::LibWebRTCCodecs::registerDecodedVideoFrameCallback((uint64_t)v16, v17, (uint64_t *)&v30);
    if (v30)
      (*((void (**)(WTF **))*v30 + 1))(v30);
    v21 = *(WTF **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    v22 = (WTF **)WTF::fastMalloc((WTF *)0x18);
    *v22 = (WTF *)&off_1E34E7938;
    v22[1] = v21;
    v22[2] = v11;
    v30 = v22;
    (*(void (**)(_QWORD, WTF ***))(**(_QWORD **)(v7 + 16) + 16))(*(_QWORD *)(v7 + 16), &v30);
    v24 = (uint64_t)v30;
    v30 = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    return WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref((WTF **)v7, v23);
  }
  else
  {
    v26 = *(WTF **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    v27 = (WTF **)WTF::fastMalloc((WTF *)0x10);
    *v27 = (WTF *)&off_1E34E7900;
    v27[1] = v26;
    v30 = v27;
    (*(void (**)(_QWORD, WTF ***))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), &v30);
    result = v30;
    v30 = 0;
    if (result)
      return (WTF **)(*((uint64_t (**)(WTF **))*result + 1))(result);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createDecoderERKNS_6StringERKN7WebCore12VideoDecoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONSF_INS8_12DecodedFrameES4_EEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7DecoderEEEDaPT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E7900;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createDecoderERKNS_6StringERKN7WebCore12VideoDecoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONSF_INS8_12DecodedFrameES4_EEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7DecoderEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7900;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createDecoderERKNS_6StringERKN7WebCore12VideoDecoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONSF_INS8_12DecodedFrameES4_EEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7DecoderEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[8];
  int v4;
  char v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = 1;
  result = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34E7918[v4])(&v5, v3);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoDecoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoDecoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createDecoderERKNS_6StringERKN7WebCore12VideoDecoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONSF_INS8_12DecodedFrameES4_EEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7DecoderEEEDaPT_EUlvE0_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34E7938;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createDecoderERKNS_6StringERKN7WebCore12VideoDecoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONSF_INS8_12DecodedFrameES4_EEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7DecoderEEEDaPT_EUlvE0_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E7938;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createDecoderERKNS_6StringERKN7WebCore12VideoDecoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONSF_INS8_12DecodedFrameES4_EEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7DecoderEEEDaPT_EUlvE0_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = v2;
  v5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v4);
  if (v5 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34E7918[v5])(&v6, &v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createEncoder(WTF::String const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34E7960;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createEncoder(WTF::String const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34E7960;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createEncoder(WTF::String const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&,WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  WebKit::WebProcess *v11;
  WebKit::LibWebRTCCodecs *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WTF *v16;
  WebKit::WebProcess *v17;
  WebKit::LibWebRTCCodecs *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  WTF *result;
  uint64_t v28;
  WTF *v29;
  WebKit::WebProcess *v30;
  WebKit::WebProcess *v31;
  WTF *v32;

  if (a2)
  {
    v4 = WTF::fastMalloc((WTF *)0x28);
    v5 = (WTF *)v4;
    *(_DWORD *)v4 = 1;
    v6 = a1[2];
    a1[2] = 0;
    *(_QWORD *)(v4 + 8) = v6;
    v7 = a1[3];
    a1[3] = 0;
    *(_QWORD *)(v4 + 16) = v7;
    v8 = a1[4];
    a1[4] = 0;
    *(_QWORD *)(v4 + 24) = v8;
    *(_BYTE *)(v4 + 32) = 0;
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = off_1E34E6F68;
    v10[1] = a2;
    v10[2] = v5;
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v30);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
    }
    v12 = WebKit::WebProcess::libWebRTCCodecs(v11);
    v13 = v10[1];
    v14 = (unsigned int *)v10[2];
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v16 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v16 = &off_1E34E7A98;
    *((_QWORD *)v16 + 1) = v14;
    v32 = v16;
    WebKit::LibWebRTCCodecs::registerEncodedVideoFrameCallback((uint64_t)v12, v13, (uint64_t *)&v32);
    if (v32)
      (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
    {
      v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v17 = WebKit::WebProcess::WebProcess(v31);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v17;
    }
    v18 = WebKit::WebProcess::libWebRTCCodecs(v17);
    v19 = v10[1];
    v20 = (unsigned int *)v10[2];
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v22 = &off_1E34E7AC0;
    *((_QWORD *)v22 + 1) = v20;
    v32 = v22;
    WebKit::LibWebRTCCodecs::registerEncoderDescriptionCallback((uint64_t)v18, v19, (uint64_t *)&v32);
    if (v32)
      (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
    v23 = a1[1];
    a1[1] = 0;
    v24 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v24 = &off_1E34E79C0;
    *((_QWORD *)v24 + 1) = v23;
    *((_QWORD *)v24 + 2) = v10;
    v32 = v24;
    (*(void (**)(_QWORD *, WTF **))(**((_QWORD **)v5 + 3) + 16))(*((_QWORD **)v5 + 3), &v32);
    v26 = (uint64_t)v32;
    v32 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    return WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v5, v25);
  }
  else
  {
    v28 = a1[1];
    a1[1] = 0;
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v29 = &off_1E34E7988;
    *((_QWORD *)v29 + 1) = v28;
    v32 = v29;
    (*(void (**)(_QWORD, WTF **))(*(_QWORD *)a1[4] + 16))(a1[4], &v32);
    result = v32;
    v32 = 0;
    if (result)
      return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createEncoderERKNS_6StringERKN7WebCore12VideoEncoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONS7_31VideoEncoderActiveConfigurationEEEEONSC_IFvONS8_12EncodedFrameEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7EncoderEEEDaPT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E7988;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createEncoderERKNS_6StringERKN7WebCore12VideoEncoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONS7_31VideoEncoderActiveConfigurationEEEEONSC_IFvONS8_12EncodedFrameEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7EncoderEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7988;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createEncoderERKNS_6StringERKN7WebCore12VideoEncoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONS7_31VideoEncoderActiveConfigurationEEEEONSC_IFvONS8_12EncodedFrameEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7EncoderEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[8];
  int v4;
  char v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = 1;
  result = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34E79A0[v4])(&v5, v3);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoEncoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoEncoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createEncoderERKNS_6StringERKN7WebCore12VideoEncoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONS7_31VideoEncoderActiveConfigurationEEEEONSC_IFvONS8_12EncodedFrameEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7EncoderEEEDaPT_EUlvE0_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34E79C0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createEncoderERKNS_6StringERKN7WebCore12VideoEncoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONS7_31VideoEncoderActiveConfigurationEEEEONSC_IFvONS8_12EncodedFrameEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7EncoderEEEDaPT_EUlvE0_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E79C0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23RemoteVideoCodecFactory13createEncoderERKNS_6StringERKN7WebCore12VideoEncoder6ConfigEONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_9UniqueRefIS8_EES4_EEEEEONSC_IFvONS7_31VideoEncoderActiveConfigurationEEEEONSC_IFvONS8_12EncodedFrameEEEEONSC_IFvONSC_IFvvEEEEEEEN3__0clINS2_15LibWebRTCCodecs7EncoderEEEDaPT_EUlvE0_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = v2;
  v5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v4);
  if (v5 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34E79A0[v5])(&v6, &v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::RemoteVideoDecoder(WebKit::LibWebRTCCodecs::Decoder &,WTF::Ref<WebKit::RemoteVideoDecoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoDecoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoDecoderCallbacks>> &&,unsigned short,unsigned short)::$_0,void,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF **v3;

  v3 = (WTF **)a1[1];
  *a1 = &off_1E34E79E8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::RemoteVideoDecoder(WebKit::LibWebRTCCodecs::Decoder &,WTF::Ref<WebKit::RemoteVideoDecoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoDecoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoDecoderCallbacks>> &&,unsigned short,unsigned short)::$_0,void,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,long long>::~CallableWrapper(WTF *this, void *a2)
{
  WTF **v3;

  v3 = (WTF **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E79E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::RemoteVideoDecoder(WebKit::LibWebRTCCodecs::Decoder &,WTF::Ref<WebKit::RemoteVideoDecoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoDecoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoDecoderCallbacks>> &&,unsigned short,unsigned short)::$_0,void,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,long long>::call(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v4 = *(_QWORD *)(a1 + 8);
  do
    v5 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v5 + 1, (unsigned int *)v4));
  v6 = *a2;
  *a2 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34E7A60;
  v7[1] = v4;
  v7[2] = v6;
  v7[3] = a3;
  v9 = v7;
  (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v4 + 16) + 16))(*(_QWORD *)(v4 + 16), &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF **v3;
  uint64_t v4;

  *a1 = &off_1E34E7A10;
  v3 = (WTF **)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF **v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E7A10;
  v3 = (WTF **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34E7A38;
  v3[1] = v2;
  v5 = v3;
  (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), &v5);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::flush(WTF::Function<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E7A38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::flush(WTF::Function<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7A38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::flush(WTF::Function<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoderCallbacks::notifyDecodingResult(WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>> &&,long long)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF **v7;

  *a1 = &off_1E34E7A60;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF **)a1[1];
  a1[1] = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v7, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoderCallbacks::notifyDecodingResult(WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>> &&,long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF **v7;

  *(_QWORD *)this = &off_1E34E7A60;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v7, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoderCallbacks::notifyDecodingResult(WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>> &&,long long)::$_0,void>::call(_QWORD *result, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  WTF **v9;
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  WTF **v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[3];
  char v22;
  int v23;
  char v24;

  v2 = result[1];
  if (*(_BYTE *)(v2 + 24))
    return result;
  v3 = result;
  v4 = result[2];
  if (!v4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = 1;
    goto LABEL_23;
  }
  v5 = result[3];
  v6 = *(int8x8_t *)(v2 + 40);
  if (!*(_QWORD *)&v6)
    goto LABEL_21;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = result[3];
    if (*(_QWORD *)&v6 <= v5)
      v8 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v9 = *(WTF ***)(*(_QWORD *)(v2 + 32) + 8 * v8);
  if (!v9 || (v10 = *v9) == 0)
  {
LABEL_21:
    v13 = 0;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)&v6 - 1;
  while (1)
  {
    v12 = *((_QWORD *)v10 + 1);
    if (v12 == v5)
      break;
    if (v7.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v6)
        v12 %= *(_QWORD *)&v6;
    }
    else
    {
      v12 &= v11;
    }
    if (v12 != v8)
      goto LABEL_21;
LABEL_20:
    v10 = *(WTF **)v10;
    if (!v10)
      goto LABEL_21;
  }
  if (*((_QWORD *)v10 + 2) != v5)
    goto LABEL_20;
  v13 = *((_QWORD *)v10 + 3);
  v14 = *(WTF **)v10;
  if (v7.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v6)
      v12 %= *(_QWORD *)&v6;
  }
  else
  {
    v12 &= v11;
  }
  v15 = *(_QWORD *)(v2 + 32);
  v16 = *(WTF **)(v15 + 8 * v12);
  do
  {
    v17 = (WTF **)v16;
    v16 = *(WTF **)v16;
  }
  while (v16 != v10);
  if (v17 == (WTF **)(v2 + 48))
    goto LABEL_43;
  v18 = (unint64_t)v17[1];
  if (v7.u32[0] > 1uLL)
  {
    if (v18 >= *(_QWORD *)&v6)
      v18 %= *(_QWORD *)&v6;
  }
  else
  {
    v18 &= v11;
  }
  if (v18 == v12)
  {
LABEL_45:
    if (v14)
    {
      v19 = *((_QWORD *)v14 + 1);
      goto LABEL_47;
    }
  }
  else
  {
LABEL_43:
    if (!v14)
      goto LABEL_44;
    v19 = *((_QWORD *)v14 + 1);
    if (v7.u32[0] > 1uLL)
    {
      v20 = *((_QWORD *)v14 + 1);
      if (v19 >= *(_QWORD *)&v6)
        v20 = v19 % *(_QWORD *)&v6;
    }
    else
    {
      v20 = v19 & v11;
    }
    if (v20 != v12)
    {
LABEL_44:
      *(_QWORD *)(v15 + 8 * v12) = 0;
      v14 = *(WTF **)v10;
      goto LABEL_45;
    }
LABEL_47:
    if (v7.u32[0] > 1uLL)
    {
      if (v19 >= *(_QWORD *)&v6)
        v19 %= *(_QWORD *)&v6;
    }
    else
    {
      v19 &= v11;
    }
    if (v19 != v12)
    {
      *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v19) = v17;
      v14 = *(WTF **)v10;
    }
  }
  *v17 = v14;
  *(_QWORD *)v10 = 0;
  --*(_QWORD *)(v2 + 56);
  WTF::fastFree(v10, a2);
  v2 = v3[1];
  v4 = v3[2];
  v5 = v3[3];
LABEL_22:
  v3[2] = 0;
  v21[0] = v4;
  v21[1] = v5;
  v21[2] = v13;
  v22 = 1;
  v23 = 0;
LABEL_23:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8), v21);
  if (v23 != -1)
    return (_QWORD *)((uint64_t (*)(char *, _QWORD *))off_1E34E7A78[v23])(&v24, v21);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12VideoDecoder12DecodedFrameEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12VideoDecoder12DecodedFrameEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>,BOOL,long long,WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0::optional<unsigned long long>,std::span<unsigned char const,18446744073709551615ul><unsigned int>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = &off_1E34E7A98;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>,BOOL,long long,WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0::optional<unsigned long long>,std::span<unsigned char const,18446744073709551615ul><unsigned int>>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7A98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>,BOOL,long long,WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0::optional<unsigned long long>,std::span<unsigned char const,18446744073709551615ul><unsigned int>>::call(_QWORD *result, uint64_t a2, WTF *this, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE v21[7];
  _BYTE v22[7];
  _QWORD *v23;

  v14 = result[1];
  if (this)
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return result;
    }
    v16 = WTF::fastMalloc(this);
    v17 = v16;
    v18 = 0;
    do
    {
      *((_BYTE *)v18 + v16) = *((_BYTE *)v18 + a2);
      v18 = (WTF *)((char *)v18 + 1);
    }
    while (this != v18);
  }
  else
  {
    v17 = 0;
  }
  do
    v19 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v19 + 1, (unsigned int *)v14));
  v20 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v20 = &off_1E34E7B60;
  *(_QWORD *)(v20 + 8) = v14;
  *(_QWORD *)(v20 + 16) = v17;
  *(_DWORD *)(v20 + 24) = (_DWORD)this;
  *(_DWORD *)(v20 + 28) = (_DWORD)this;
  *(_BYTE *)(v20 + 32) = a4;
  *(_DWORD *)(v20 + 33) = *(_DWORD *)v22;
  *(_DWORD *)(v20 + 36) = *(_DWORD *)&v22[3];
  *(_QWORD *)(v20 + 40) = a5;
  *(_QWORD *)(v20 + 48) = a6;
  *(_BYTE *)(v20 + 56) = a7;
  *(_DWORD *)(v20 + 57) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 68) = BYTE4(a8);
  *(_DWORD *)(v20 + 60) = *(_DWORD *)&v21[3];
  *(_DWORD *)(v20 + 64) = a8;
  v23 = (_QWORD *)v20;
  (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v14 + 24) + 16))(*(_QWORD *)(v14 + 24), &v23);
  result = v23;
  v23 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_1,void,WebCore::VideoEncoderActiveConfiguration &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = &off_1E34E7AC0;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_1,void,WebCore::VideoEncoderActiveConfiguration &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7AC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_1,void,WebCore::VideoEncoderActiveConfiguration &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  WTF *v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  do
    v4 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v4 + 1, (unsigned int *)v3));
  v5 = *a2;
  *a2 = 0;
  v6 = *(_OWORD *)(a2 + 3);
  v16 = *(_OWORD *)(a2 + 1);
  v17 = v6;
  v18[0] = *(_OWORD *)(a2 + 5);
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 49);
  v7 = *((unsigned __int8 *)a2 + 88);
  if (*((_BYTE *)a2 + 88))
  {
    v8 = (WTF *)a2[9];
    v2 = a2[10];
    a2[9] = 0;
    a2[10] = 0;
  }
  else
  {
    v8 = 0;
  }
  v14 = a2[12];
  v15 = *((_WORD *)a2 + 52);
  v9 = WTF::fastMalloc((WTF *)0x80);
  v10 = v17;
  *(_OWORD *)(v9 + 24) = v16;
  *(_QWORD *)v9 = &off_1E34E7B88;
  *(_QWORD *)(v9 + 8) = v3;
  *(_QWORD *)(v9 + 16) = v5;
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = v18[0];
  *(_OWORD *)(v9 + 65) = *(_OWORD *)((char *)v18 + 9);
  *(_BYTE *)(v9 + 88) = 0;
  *(_BYTE *)(v9 + 104) = 0;
  if (v7)
  {
    *(_QWORD *)(v9 + 88) = v8;
    *(_QWORD *)(v9 + 96) = v2;
    *(_BYTE *)(v9 + 104) = 1;
    v8 = 0;
  }
  *(_QWORD *)(v9 + 112) = v14;
  *(_WORD *)(v9 + 120) = v15;
  v13 = v9;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v3 + 24) + 16))(*(_QWORD *)(v3 + 24), &v13);
  result = v13;
  v13 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v7)
  {
    if (v8)
      return WTF::fastFree(v8, v11);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *a1 = &off_1E34E7AE8;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E7AE8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34E7B10;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = a2;
  v7 = v5;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v3 + 24) + 16))(*(_QWORD *)(v3 + 24), &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E7B10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7B10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::encode(WebCore::VideoEncoder::RawFrame &&,BOOL,WTF::Function<void ()(WTF::String &&)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v5;
  }
  v5 = v2;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *a1 = &off_1E34E7B38;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E7B38;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::flush(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoderCallbacks::notifyEncodedChunk(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,BOOL,long long,std::optional<unsigned long long>,std::__1<unsigned int>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E34E7B60;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoderCallbacks::notifyEncodedChunk(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,BOOL,long long,std::optional<unsigned long long>,std::__1<unsigned int>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34E7B60;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoderCallbacks::notifyEncodedChunk(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,BOOL,long long,std::optional<unsigned long long>,std::__1<unsigned int>)::$_0,void>::call(WTF *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;

  v1 = *((_QWORD *)result + 1);
  if (!*(_BYTE *)(v1 + 32))
  {
    v5 = (WTF *)*((_QWORD *)result + 2);
    v2 = *((_QWORD *)result + 3);
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    v6 = v2;
    v7 = *((_BYTE *)result + 32);
    v3 = *((_QWORD *)result + 6);
    v8 = *((_QWORD *)result + 5);
    v9 = v3;
    v10 = *((_BYTE *)result + 56);
    v11 = *((_DWORD *)result + 16);
    v12 = *((_BYTE *)result + 68);
    (*(void (**)(_QWORD, WTF **))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), &v5);
    result = v5;
    if (v5)
    {
      v5 = 0;
      LODWORD(v6) = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoderCallbacks::notifyEncoderDescription(WebCore::VideoEncoderActiveConfiguration &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF *v5;

  *(_QWORD *)a1 = &off_1E34E7B88;
  if (*(_BYTE *)(a1 + 104))
  {
    v3 = *(WTF **)(a1 + 88);
    if (v3)
    {
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v5, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoderCallbacks::notifyEncoderDescription(WebCore::VideoEncoderActiveConfiguration &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E34E7B88;
  if (*((_BYTE *)this + 104))
  {
    v3 = (WTF *)*((_QWORD *)this + 11);
    if (v3)
    {
      *((_QWORD *)this + 11) = 0;
      *((_DWORD *)this + 24) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v5, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoderCallbacks::notifyEncoderDescription(WebCore::VideoEncoderActiveConfiguration &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v1 + 32))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 8) + 16))(*(_QWORD *)(v1 + 8), result + 16);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameProxy::pixelBuffer(void)::$_0,void,WTF::RetainPtr<__CVBuffer *> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;

  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(const void **)(v4 + 128);
  *(_QWORD *)(v4 + 128) = v3;
  if (v5)
    CFRelease(v5);
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;

  *a1 = &off_1E34E7BE8;
  v3 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E7BE8;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = *(unsigned __int8 **)(a1 + 16);
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 24), &v10);
    if (v10)
    {
      result = *(unsigned __int8 **)(v3 + 312);
      if (result)
      {
        result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v3 + 320), &v9);
        if (v9)
        {
          v5 = atomic_load((unsigned __int8 *)(v3 + 368));
          if ((v5 & 1) == 0)
          {
            v6 = atomic_load((unsigned __int8 *)(v3 + 369));
            if ((v6 & 1) == 0)
              result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
          }
          v7 = v9;
          v9 = 0;
          if (v7)
            result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), v4);
        }
      }
      v8 = v10;
      v10 = 0;
      if (v8)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 8));
    }
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::abort(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v10);
  v2 = *(_QWORD *)(v10 + 24);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1352;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = (unsigned __int8 *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (unsigned __int8 *)WTF::fastFree(v7, v8);
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v5);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::resetParserState(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v10);
  v2 = *(_QWORD *)(v10 + 24);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1364;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = (unsigned __int8 *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (unsigned __int8 *)WTF::fastFree(v7, v8);
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v5);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::removedFromMediaSource(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(a1 + 8);
  atomic_store(1u, (unsigned __int8 *)(v1 + 369));
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v10);
  v2 = *(_QWORD *)(v10 + 24);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1363;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = (unsigned __int8 *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (unsigned __int8 *)WTF::fastFree(v7, v8);
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v5);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setActive(BOOL)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;

  v1 = *((_QWORD *)result + 1);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(v1 + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEABB3C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_13:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v16);
    v7 = *(_QWORD *)(v16 + 24);
    v8 = v3[16];
    v9 = *(_QWORD *)(v1 + 336);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 1368;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v17 = (IPC::Encoder *)v10;
    *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = v8;
    IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v17, 0, 0);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
    v15 = v16;
    v16 = 0;
    if (v15)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v15 + 16), v11);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), v11);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::canSwitchToType(WebCore::ContentType const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E7CB0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::canSwitchToType(WebCore::ContentType const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E7CB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::canSwitchToType(WebCore::ContentType const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *result;
  void *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Encoder *v9;
  char v10;
  int v11;
  unsigned __int16 v12;
  void *v13;
  int v14;
  uint64_t *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  int v24;
  WTF::StringImpl *v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  IPC::Encoder *v30;
  uint64_t v31;
  char v32;

  v2 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 **)(v2 + 312);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v2 + 320), &v27);
    if (v27)
    {
      v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v5 & 1) != 0 || (v6 = atomic_load((unsigned __int8 *)(v2 + 369)), (v6 & 1) != 0))
      {
LABEL_23:
        v20 = v27;
        v27 = 0;
        if (v20)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v20 + 16), v4);
        return result;
      }
      WebCore::ContentType::ContentType((WebCore::ContentType *)&v25, (const WTF::String *)(a1 + 8));
      v7 = *(_QWORD *)(v27 + 24);
      v8 = *(_QWORD *)(v2 + 336);
      v31 = 0;
      IPC::Connection::createSyncMessageEncoder(3641, v8, &v31, (uint64_t *)&v30);
      v9 = v30;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v30, (uint64_t *)&v25);
      v10 = v26;
      *IPC::Encoder::grow(v9, 1uLL, 1) = v10;
      IPC::Connection::sendSyncMessage(v7, v31, (uint64_t *)&v30, 0, (uint64_t)&v28, INFINITY);
      v11 = v29;
      if (v29)
      {
        if (v29 == 1)
        {
          LOBYTE(v22) = (_BYTE)v28;
LABEL_13:
          v24 = v11;
          v14 = v11;
LABEL_14:
          ((void (*)(char *, uint64_t **))off_1E34E7BC8[v14])(&v32, &v28);
LABEL_15:
          v16 = v30;
          v30 = 0;
          if (v16)
          {
            IPC::Encoder::~Encoder(v16, v13);
            WTF::fastFree(v17, v18);
          }
          v19 = v23;
          if (v11)
            v19 = 0;
          **(_BYTE **)(a1 + 24) = v19;
          ((void (*)(uint64_t **, uint64_t **))off_1E34E7CC8[v11])(&v28, &v22);
          result = (unsigned __int8 *)v25;
          v25 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_23;
        }
      }
      else
      {
        v12 = IPC::Decoder::decode<std::tuple<BOOL>>(v28);
        if (v12 < 0x100u)
        {
          LOBYTE(v22) = 13;
          v11 = 1;
          v24 = 1;
          v14 = v29;
          if (v29 == -1)
            goto LABEL_15;
          goto LABEL_14;
        }
        if (!v29)
        {
          v15 = v28;
          v28 = 0;
          v22 = v15;
          v23 = v12;
          goto LABEL_13;
        }
      }
      v21 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned __int8 *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v21);
    }
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMediaSourceEnded(BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v12);
  v3 = *(_QWORD *)(v12 + 24);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(v2 + 336);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1376;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = v4;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  result = (unsigned __int8 *)v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
    result = (unsigned __int8 *)WTF::fastFree(v9, v10);
  }
  v11 = v12;
  v12 = 0;
  if (v11)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v7);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMode(WebCore::SourceBufferAppendMode)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v11);
  v3 = *(_QWORD *)(v11 + 24);
  v4 = *(_QWORD *)(v2 + 336);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1377;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  LOBYTE(v1) = *(_BYTE *)(v1 + 16);
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v1;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  result = (unsigned __int8 *)v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
    result = (unsigned __int8 *)WTF::fastFree(v8, v9);
  }
  v10 = v11;
  v11 = 0;
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v6);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::evictCodedFrames(unsigned long long,WTF::MediaTime const&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v2 = a1[1];
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v12);
  v3 = *(_QWORD *)(v12 + 24);
  v4 = a1[2];
  v5 = *(_QWORD *)(v2 + 336);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1355;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v6, a1 + 3);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  result = (unsigned __int8 *)v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
    result = (unsigned __int8 *)WTF::fastFree(v9, v10);
  }
  v11 = v12;
  v12 = 0;
  if (v11)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v7);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::evictCodedFrames(unsigned long long,WTF::MediaTime const&)::$_1,void>::call(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *result;
  void *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t *v16;
  unsigned int *v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  void *v23;
  uint64_t *v24;
  WTF *v25;
  uint64_t v26;
  IPC::Decoder *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  int v35;
  unsigned __int8 *v36;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  _OWORD *v44;
  __int128 v45;
  int v46;
  void *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  _BYTE v56[40];
  int v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  char v63;
  uint64_t *v64;
  int v65;
  IPC::Encoder *v66;
  uint64_t v67;
  __int128 v68;
  _BYTE v69[40];

  v2 = a1[1];
  result = *(unsigned __int8 **)(v2 + 312);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v2 + 320), &v58);
    if (v58)
    {
      v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v5 & 1) != 0)
        goto LABEL_54;
      v6 = atomic_load((unsigned __int8 *)(v2 + 369));
      if ((v6 & 1) != 0)
        goto LABEL_54;
      v7 = *(_QWORD *)(v58 + 24);
      v8 = (uint64_t *)a1[2];
      v9 = (_QWORD *)a1[3];
      v10 = *v8;
      v11 = *(_QWORD *)(v2 + 336);
      v67 = 0;
      IPC::Connection::createSyncMessageEncoder(3642, v11, &v67, (uint64_t *)&v66);
      v12 = v66;
      *(_QWORD *)IPC::Encoder::grow(v66, 8uLL, 8) = v10;
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v12, v9);
      IPC::Connection::sendSyncMessage(v7, v67, (uint64_t *)&v66, 0, (uint64_t)&v64, INFINITY);
      if (v65)
      {
        if (v65 != 1)
          goto LABEL_61;
        LOBYTE(v54) = (_BYTE)v64;
        v14 = 1;
        v57 = 1;
        v15 = 1;
LABEL_23:
        ((void (*)(__int128 *, uint64_t **))off_1E34E7BC8[v15])(&v68, &v64);
LABEL_24:
        v32 = v66;
        v66 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v23);
          WTF::fastFree(v33, v34);
        }
        if (v14)
        {
          v35 = 1;
LABEL_53:
          result = (unsigned __int8 *)((uint64_t (*)(WTF **, WTF **))off_1E34E7D78[v35])(&v59, &v54);
LABEL_54:
          v52 = v58;
          v58 = 0;
          if (v52)
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v52 + 16), v4);
          return result;
        }
        result = (unsigned __int8 *)WebCore::SourceBufferPrivate::client((WebCore::SourceBufferPrivate *)v2);
        if (!v64)
        {
LABEL_52:
          v35 = v57;
          if (v57 == -1)
            goto LABEL_54;
          goto LABEL_53;
        }
        v59 = 0;
        v60 = 0;
        v36 = (unsigned __int8 *)(v2 + 370);
        if (__ldaxr((unsigned __int8 *)(v2 + 370)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v36))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEABB3C](v2 + 370);
LABEL_33:
        if (!v57)
        {
          v38 = v55;
          v39 = *(_QWORD *)v56;
          v55 = 0;
          *(_QWORD *)v56 = 0;
          *(_OWORD *)v69 = *(_OWORD *)&v56[8];
          *(_OWORD *)&v69[16] = *(_OWORD *)&v56[24];
          v40 = v59;
          if (HIDWORD(v60))
          {
            v41 = 16 * HIDWORD(v60);
            v42 = v59;
            do
            {
              v43 = *(WTF **)v42;
              if (*(_QWORD *)v42)
              {
                *(_QWORD *)v42 = 0;
                *((_DWORD *)v42 + 2) = 0;
                WTF::fastFree(v43, v4);
              }
              v42 = (WTF *)((char *)v42 + 16);
              v41 -= 16;
            }
            while (v41);
          }
          v44 = (_OWORD *)(v2 + 40);
          if (v40)
            WTF::fastFree(v40, v4);
          v68 = 0uLL;
          v59 = v38;
          v60 = v39;
          v45 = *(_OWORD *)&v69[16];
          *v44 = *(_OWORD *)v69;
          v44[1] = v45;
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v4);
          v46 = __ldxr(v36);
          if (v46 == 1)
          {
            if (!__stlxr(0, v36))
              goto LABEL_46;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v36);
LABEL_46:
          (*(void (**)(__int128 *__return_ptr, uint64_t *, WTF **))(*v64 + 24))(&v68, v64, &v59);
          v17 = (unsigned int *)v68;
          *(_QWORD *)&v68 = 0;
          if (!v17)
            goto LABEL_50;
          v48 = v17 + 2;
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (v50)
          {
LABEL_50:
            result = (unsigned __int8 *)WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v47);
            v51 = v64;
            v64 = 0;
            if (v51)
              result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>((unsigned __int8 *)v51[1], v4);
            goto LABEL_52;
          }
LABEL_60:
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
          goto LABEL_50;
        }
LABEL_61:
        v53 = std::__throw_bad_variant_access[abi:sn180100]();
        return (unsigned __int8 *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v53);
      }
      v16 = v64;
      IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v64, v13, (uint64_t)&v59);
      if ((_BYTE)v61)
      {
        v17 = (unsigned int *)IPC::Decoder::decode<WebCore::SourceBufferEvictionData>(v16, (uint64_t)&v68);
        if (v69[16])
        {
          if (!(_BYTE)v61)
          {
            __break(1u);
            goto LABEL_60;
          }
          v19 = v59;
          v59 = 0;
          v54 = v19;
          *(_OWORD *)v56 = v68;
          *(_OWORD *)&v56[16] = *(_OWORD *)v69;
          v56[32] = 1;
          v20 = v60;
          v60 = 0;
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v18);
          v21 = v54;
          v54 = 0;
          v59 = v21;
          v55 = 0;
          v60 = v20;
          v61 = *(_OWORD *)v56;
          v62 = *(_OWORD *)&v56[16];
          v63 = 1;
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v22);
          if (v63)
          {
            if (v65)
              goto LABEL_61;
            v24 = v64;
            v64 = 0;
            v25 = v59;
            v59 = 0;
            *(_OWORD *)&v69[8] = v61;
            *(_OWORD *)&v69[24] = v62;
            v68 = 0uLL;
            v54 = (WTF *)v24;
            v55 = v25;
            *(_QWORD *)v69 = 0;
            v26 = v60;
            v60 = 0;
            *(_QWORD *)v56 = v26;
            *(_OWORD *)&v56[8] = v61;
            *(_OWORD *)&v56[24] = v62;
            v57 = 0;
            WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68 + 8, v23);
            v27 = (IPC::Decoder *)v68;
            *(_QWORD *)&v68 = 0;
            if (v27)
            {
              IPC::Decoder::~Decoder(v27);
              WTF::fastFree(v28, v29);
            }
            if (v63)
              WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v23);
            v14 = 0;
LABEL_22:
            v15 = v65;
            if (v65 == -1)
              goto LABEL_24;
            goto LABEL_23;
          }
LABEL_21:
          LOBYTE(v54) = 13;
          v14 = 1;
          v57 = 1;
          goto LABEL_22;
        }
        if ((_BYTE)v61)
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v18);
      }
      v23 = (void *)*v16;
      v30 = v16[1];
      *v16 = 0;
      v16[1] = 0;
      v31 = v16[3];
      if (v31 && v30)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v31 + 16))(v31, v23);
      goto LABEL_21;
    }
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::addTrackBuffer(unsigned long long,WTF::RefPtr<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v12);
  v3 = *(_QWORD *)(v12 + 24);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v2 + 336);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1353;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v4;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  result = (unsigned __int8 *)v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
    result = (unsigned __int8 *)WTF::fastFree(v9, v10);
  }
  v11 = v12;
  v12 = 0;
  if (v11)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v7);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::resetTrackBuffers(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v10);
  v2 = *(_QWORD *)(v10 + 24);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1366;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = (unsigned __int8 *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (unsigned __int8 *)WTF::fastFree(v7, v8);
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v5);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::clearTrackBuffers(BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v10);
  v2 = *(_QWORD *)(v10 + 24);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1357;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = (unsigned __int8 *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (unsigned __int8 *)WTF::fastFree(v7, v8);
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v5);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setAllTrackBuffersNeedRandomAccess(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v10);
  v2 = *(_QWORD *)(v10 + 24);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1369;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = (unsigned __int8 *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (unsigned __int8 *)WTF::fastFree(v7, v8);
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v5);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setGroupStartTimestamp(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v11);
  v3 = *(_QWORD *)(v11 + 24);
  v4 = *(_QWORD *)(v2 + 336);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1372;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v5, (_QWORD *)(a1 + 16));
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  result = (unsigned __int8 *)v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
    result = (unsigned __int8 *)WTF::fastFree(v8, v9);
  }
  v10 = v11;
  v11 = 0;
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v6);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setGroupStartTimestampToEndTimestamp(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v10);
  v2 = *(_QWORD *)(v10 + 24);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1373;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = (unsigned __int8 *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (unsigned __int8 *)WTF::fastFree(v7, v8);
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v5);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setShouldGenerateTimestamps(BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v12);
  v3 = *(_QWORD *)(v12 + 24);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(v2 + 336);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1378;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = v4;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  result = (unsigned __int8 *)v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
    result = (unsigned __int8 *)WTF::fastFree(v9, v10);
  }
  v11 = v12;
  v12 = 0;
  if (v11)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v7);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::reenqueueMediaIfNeeded(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v11);
  v3 = *(_QWORD *)(v11 + 24);
  v4 = *(_QWORD *)(v2 + 336);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1361;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v5, (_QWORD *)(a1 + 16));
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  result = (unsigned __int8 *)v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
    result = (unsigned __int8 *)WTF::fastFree(v8, v9);
  }
  v10 = v11;
  v11 = 0;
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v6);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::resetTimestampOffsetInTrackBuffers(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v10);
  v2 = *(_QWORD *)(v10 + 24);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1365;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = (unsigned __int8 *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (unsigned __int8 *)WTF::fastFree(v7, v8);
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v5);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::startChangingType(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320), &v10);
  v2 = *(_QWORD *)(v10 + 24);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1380;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = (unsigned __int8 *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
    result = (unsigned __int8 *)WTF::fastFree(v7, v8);
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v5);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setTimestampOffset(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v11);
  v3 = *(_QWORD *)(v11 + 24);
  v4 = *(_QWORD *)(v2 + 336);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1379;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v5, (_QWORD *)(a1 + 16));
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  result = (unsigned __int8 *)v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
    result = (unsigned __int8 *)WTF::fastFree(v8, v9);
  }
  v10 = v11;
  v11 = 0;
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v6);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setAppendWindowStart(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v11);
  v3 = *(_QWORD *)(v11 + 24);
  v4 = *(_QWORD *)(v2 + 336);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1371;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v5, (_QWORD *)(a1 + 16));
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  result = (unsigned __int8 *)v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
    result = (unsigned __int8 *)WTF::fastFree(v8, v9);
  }
  v10 = v11;
  v11 = 0;
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v6);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setAppendWindowEnd(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v11);
  v3 = *(_QWORD *)(v11 + 24);
  v4 = *(_QWORD *)(v2 + 336);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1370;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v5, (_QWORD *)(a1 + 16));
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  result = (unsigned __int8 *)v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
    result = (unsigned __int8 *)WTF::fastFree(v8, v9);
  }
  v10 = v11;
  v11 = 0;
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v6);
  return result;
}

uint64_t WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  _BOOL8 isSettled;
  uint64_t v4;
  _BYTE *v5;
  BOOL v6;
  _BYTE *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  WTF *v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t i;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33[2];
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint8_t buf[16];
  const char *v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (!v2)
    goto LABEL_58;
  isSettled = WTF::NativePromise<void,void,0u>::isSettled(v2);
  if (isSettled)
  {
LABEL_52:
    if (*a1)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*a1);
      v29 = (unsigned int *)*a1;
      *a1 = 0;
      if (v29)
      {
        v30 = v29 + 2;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v29 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
        }
      }
      return (uint64_t)a1;
    }
LABEL_58:
    *a1 = 0;
    return (uint64_t)a1;
  }
  v4 = *a1;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*v5)
    v6 = v5[16] >= 4u;
  else
    v6 = 0;
  if (!v6)
  {
LABEL_51:
    *(_OWORD *)buf = 0uLL;
    v38 = "~NativePromiseProducer";
    v39[0] = 0;
    WTF::NativePromiseProducer<void,void,16u>::reject<std::enable_if<true,void>>(a1, (WTF::Logger::LogSiteIdentifier *)buf);
    goto LABEL_52;
  }
  v7 = v5;
  WTF::String::String((WTF::String *)&v35, "Non settled AutoRejectProducer, reject with default value");
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(v4, &v34);
  *(_QWORD *)buf = v35;
  v33[0] = v34;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v33, &v36);
  if (v36)
  {
    v10 = v34;
    v34 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v35;
    v35 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *((_QWORD *)v7 + 4);
    v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v13)
    {
      WTF::String::utf8();
      v15 = v33[0] ? (char *)v33[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v13 = v33[0];
      v33[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          v13 = (WTF *)WTF::fastFree(v13, v14);
        else
          --*(_DWORD *)v13;
      }
    }
    if (*v7 && v7[16] >= 4u)
    {
      v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v17 = *v16;
        if ((v17 & 1) != 0)
          break;
        v18 = __ldaxr(v16);
        if (v18 == v17)
        {
          if (!__stxr(v17 | 1, v16))
          {
            v19 = WTF::Logger::observers(v13);
            v20 = *(unsigned int *)(v19 + 12);
            if ((_DWORD)v20)
            {
              v21 = *(uint64_t **)v19;
              v22 = *(_QWORD *)v19 + 8 * v20;
              do
              {
                v23 = *v21;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "Non settled AutoRejectProducer, reject with default value");
                LODWORD(v38) = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(v4, v39);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v33, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v23 + 16))(v23, v7, 4, v33);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v24);
                for (i = 24; i != -8; i -= 16)
                {
                  v26 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v26)
                  {
                    if (*(_DWORD *)v26 == 2)
                      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v26 -= 2;
                  }
                }
                ++v21;
              }
              while (v21 != (uint64_t *)v22);
            }
            v27 = __ldxr(v16);
            if (v27 == 1)
            {
              if (!__stlxr(0, v16))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v28 = v36;
    v36 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v28 -= 2;
    }
    goto LABEL_51;
  }
  __break(0xC471u);
  return result;
}

unsigned __int8 *WTF::NativePromiseProducer<void,void,16u>::reject<std::enable_if<true,void>>(uint64_t *a1, WTF::Logger::LogSiteIdentifier *a2)
{
  uint64_t isSettled;
  uint64_t v5;
  unsigned __int8 *result;
  BOOL v8;
  uint64_t v9;
  int v10;
  WTF::Lock *v11;
  char v12;
  char v13;

  isSettled = *a1;
  if (!isSettled)
  {
    v5 = 0;
LABEL_6:
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*result)
      v8 = result[16] >= 4u;
    else
      v8 = 0;
    if (v8)
      return (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, a2, " ignored already resolved or rejected ", v5);
    return result;
  }
  isSettled = WTF::NativePromise<void,void,0u>::isSettled(isSettled);
  v5 = *a1;
  if ((_DWORD)isSettled)
    goto LABEL_6;
  v11 = (WTF::Lock *)(v5 + 48);
  v12 = 1;
  if (__ldaxr((unsigned __int8 *)(v5 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)(v5 + 48)))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C]();
LABEL_14:
  WTF::NativePromiseBase::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,void,0u>>(a2, " rejecting ", v5);
  v9 = *(unsigned int *)(v5 + 64);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E34E7760[v9])(&v13, v5 + 56);
  *(_BYTE *)(v5 + 57) = 1;
  *(_DWORD *)(v5 + 64) = 1;
  result = (unsigned __int8 *)WTF::NativePromise<void,void,0u>::dispatchAll(v5, (unsigned __int8 **)&v11);
  if (v12)
  {
    result = (unsigned __int8 *)v11;
    v10 = __ldxr((unsigned __int8 *)v11);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumBufferSize(unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E7FA0;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumBufferSize(unsigned long)::$_0,void>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E7FA0;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumBufferSize(unsigned long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  _BOOL8 isSettled;
  _BYTE *v24;
  BOOL v25;
  _BYTE *v26;
  uint64_t result;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  NSObject *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  uint64_t i;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  WTF::StringImpl *v71[2];
  WTF *v72;
  __int128 v73;
  __int128 v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  _BYTE buf[40];
  uint64_t v84;
  int v85;
  _DWORD v86[4];
  uint64_t v87;
  int v88;
  _DWORD v89[4];
  uint64_t v90;
  int v91;
  _QWORD v92[5];

  v92[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), v71);
  v4 = (os_unfair_lock_s *)*((_QWORD *)v71[0] + 3);
  v5 = *(_QWORD *)(v2 + 336);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = "sendWithPromisedReply";
  *(_QWORD *)&buf[24] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v72, 0, (WTF::Logger::LogSiteIdentifier *)buf);
  v6 = v72;
  if (v72)
  {
    v7 = (unsigned int *)((char *)v72 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = v72;
  }
  else
  {
    v9 = 0;
  }
  v72 = 0;
  *(_OWORD *)&buf[8] = v73;
  *(_OWORD *)&buf[24] = v74;
  v10 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v10 = off_1E34E7FE0;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)buf = 0;
  v11 = *(_OWORD *)&buf[24];
  *(_OWORD *)(v10 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v10 + 32) = v11;
  v67 = v10;
  v68 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1374;
  *(_QWORD *)(v12 + 8) = v5;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  *(_QWORD *)buf = v12;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v3;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v4, (IPC::Encoder **)buf, &v67, 0, 0);
  v14 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v13);
    WTF::fastFree(v15, v16);
  }
  v17 = v67;
  v67 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v72);
  v19 = v71[0];
  v71[0] = 0;
  if (v19)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((unsigned __int8 **)v19 + 2), v18);
  v67 = 0;
  v68 = 0;
  v69 = "operator()";
  v70 = 0;
  v20 = *(unsigned int **)(a1 + 24);
  if (v20)
  {
    v21 = v20 + 2;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  isSettled = WTF::NativePromise<void,void,0u>::isSettled((uint64_t)v6);
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*v24)
    v25 = v24[16] >= 4u;
  else
    v25 = 0;
  if (v25)
  {
    v26 = v24;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v67);
    WTF::String::String((WTF::String *)&v81, " invoking chainTo() [");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v6, &v80);
    WTF::String::String((WTF::String *)&v79, " chainedPromise:");
    WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString((uint64_t)v20, &v78);
    WTF::String::String((WTF::String *)&v77, " isSettled:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v76);
    WTF::String::String((WTF::String *)&v75, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, v71);
    if (!v71[0])
    {
      __break(0xC471u);
      return result;
    }
    v29 = v75;
    v75 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v76;
    v76 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v77;
    v77 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v28);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = v78;
    v78 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v28);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v79;
    v79 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v28);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v80;
    v80 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v28);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v81;
    v81 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v28);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v82;
    v82 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v28);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = *((_QWORD *)v26 + 4);
    v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v38)
    {
      WTF::String::utf8();
      v40 = v72 ? (char *)v72 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl(&dword_196BCC000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v38 = (uint64_t)v72;
      v72 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
          v38 = WTF::fastFree((WTF *)v38, v39);
        else
          --*(_DWORD *)v38;
      }
    }
    if (*v26 && v26[16] >= 4u)
    {
      v41 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v42 = *v41;
        if ((v42 & 1) != 0)
          break;
        v43 = __ldaxr(v41);
        if (v43 == v42)
        {
          if (!__stxr(v42 | 1, v41))
          {
            v44 = WTF::Logger::observers((WTF::Logger *)v38);
            v45 = *(unsigned int *)(v44 + 12);
            if ((_DWORD)v45)
            {
              v46 = *(uint64_t **)v44;
              v66 = *(_QWORD *)v44 + 8 * v45;
              do
              {
                v47 = *v46;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v67);
                *(_DWORD *)&buf[16] = 0;
                WTF::String::String((WTF::String *)&buf[24], " invoking chainTo() [");
                *(_DWORD *)&buf[32] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v6, &v84);
                v85 = 0;
                WTF::String::String((WTF::String *)v86, " chainedPromise:");
                v86[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString((uint64_t)v20, &v87);
                v88 = 0;
                WTF::String::String((WTF::String *)v89, " isSettled:");
                v89[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v90);
                v91 = 0;
                WTF::String::String((WTF::String *)v92, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v72, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v47 + 16))(v47, v26, 4, &v72);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v48);
                for (i = 120; i != -8; i -= 16)
                {
                  v50 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v39);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                }
                ++v46;
              }
              while (v46 != (uint64_t *)v66);
            }
            v51 = __ldxr(v41);
            if (v51 == 1)
            {
              if (!__stlxr(0, v41))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v52 = v71[0];
    v71[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v39);
        if (v20)
          goto LABEL_86;
        goto LABEL_90;
      }
      *(_DWORD *)v52 -= 2;
    }
  }
  if (v20)
  {
LABEL_86:
    v53 = v20 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
    }
  }
LABEL_90:
  v56 = atomic_load((unsigned __int8 *)v6 + 113);
  WTF::NativePromise<void,void,0u>::setDispatchMode(*(unsigned __int8 **)(a1 + 24), v56, (WTF::Logger::LogSiteIdentifier *)&v67);
  v57 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v58 = *(_OWORD *)(a1 + 48);
  v73 = *(_OWORD *)(a1 + 32);
  v74 = v58;
  v71[0] = 0;
  v71[1] = 0;
  v59 = WTF::fastMalloc((WTF *)0x50);
  v60 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v60 = off_1E34E8048;
  *(_QWORD *)(v60 + 8) = v57;
  v72 = 0;
  v61 = v74;
  *(_OWORD *)(v60 + 16) = v73;
  *(_OWORD *)(v60 + 32) = v61;
  *(_DWORD *)(v59 + 8) = 1;
  *(_QWORD *)(v59 + 16) = 0;
  *(_QWORD *)(v59 + 24) = 0;
  *(_QWORD *)(v59 + 32) = 0;
  *(_QWORD *)(v59 + 40) = "chainTo";
  *(_QWORD *)(v59 + 48) = 0;
  *(_WORD *)(v59 + 56) = 0;
  *(_QWORD *)v59 = off_1E34E83C0;
  v62 = (unsigned int *)((char *)v6 + 8);
  *(_QWORD *)(v59 + 64) = 0;
  *(_QWORD *)(v59 + 72) = v60;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 + 1, v62));
  *(_QWORD *)buf = v6;
  *(_QWORD *)&buf[8] = v59;
  *(_OWORD *)&buf[16] = *(_OWORD *)v71;
  *(_QWORD *)&buf[32] = "chainTo";
  v84 = 0;
  WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)buf);
  result = WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer((uint64_t *)&v72);
  do
  {
    v64 = __ldaxr(v62);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, v62));
  if (!v65)
  {
    atomic_store(1u, (unsigned int *)v6 + 2);
    return (*(uint64_t (**)(WTF *))(*(_QWORD *)v6 + 16))(v6);
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<void,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  __int128 v8;

  v6 = WTF::fastMalloc((WTF *)0x78);
  v7 = (unsigned __int8 *)WTF::NativePromise<void,IPC::Error,0u>::NativePromise(v6, a3);
  *(_QWORD *)a1 = v7;
  v8 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v8;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::setDispatchMode(v7, a2, a3);
  return a1;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  _BYTE *v4;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34E8420;
  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v4, 4u, "creating ", a1);
  return a1;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<void,IPC::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::~NativePromise(unsigned int *a1)
{
  unsigned int *v1;
  void *v2;

  v1 = WTF::NativePromise<void,IPC::Error,0u>::~NativePromise(a1);
  return WTF::fastFree((WTF *)v1, v2);
}

unsigned int *WTF::NativePromise<void,IPC::Error,0u>::~NativePromise(unsigned int *a1)
{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;
  char v8;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", (uint64_t)a1);
  WTF::NativePromise<void,IPC::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<void,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v4);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v5);
  v6 = a1[16];
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, unsigned int *))off_1E34E7FB8[v6])(&v8, a1 + 14);
  a1[16] = -1;
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E7FE0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E7FE0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E8020;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::NativePromiseProducer<void,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(uint64_t *a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t isSettled;
  uint64_t v7;
  WTF::StringImpl *result;
  BOOL v9;

  isSettled = *a1;
  if (isSettled)
  {
    isSettled = WTF::NativePromise<void,void,0u>::isSettled(isSettled);
    v7 = *a1;
    if (!(_DWORD)isSettled)
      return WTF::NativePromise<void,IPC::Error,0u>::settleWithFunction(v7, a2, a3);
  }
  else
  {
    v7 = 0;
  }
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(_BYTE *)result)
    v9 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v9 = 0;
  if (v9)
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " ignored already resolved or rejected ", v7);
  return result;
}

WTF::Lock *WTF::NativePromise<void,IPC::Error,0u>::settleWithFunction(uint64_t a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling ", a1);
  v10 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E34E7FB8[v10])(&v16, a1 + 56);
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 64) = 2;
  result = (WTF::Lock *)WTF::NativePromise<void,IPC::Error,0u>::dispatchAll((_QWORD *)a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::dispatchAll(_QWORD *__dst, unsigned __int8 **a2)
{
  _QWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  WTF::NativePromiseBase **v13;
  uint64_t v14;
  WTF::NativePromiseBase *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::NativePromiseBase **v23;
  uint64_t v24;
  uint64_t v25;

  v5 = __dst + 9;
  v4 = (_QWORD *)__dst[9];
  v20 = &v22;
  v21 = 1;
  v23 = (WTF::NativePromiseBase **)&v25;
  v24 = 1;
  if (v4 == __dst + 11)
  {
    v7 = *((unsigned int *)__dst + 21);
    memcpy(&v25, v4, 8 * v7);
  }
  else
  {
    __dst[9] = __dst + 11;
    v23 = (WTF::NativePromiseBase **)v4;
    v6 = *((_DWORD *)__dst + 20);
    LODWORD(v7) = *((_DWORD *)__dst + 21);
    *((_DWORD *)__dst + 20) = 1;
    LODWORD(v24) = v6;
  }
  *((_DWORD *)__dst + 21) = 0;
  HIDWORD(v24) = v7;
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(v5, &v20);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  v9 = __dst[12];
  v20 = (uint64_t *)v9;
  v10 = *((unsigned int *)__dst + 27);
  LODWORD(v21) = *((_DWORD *)__dst + 26);
  HIDWORD(v21) = v10;
  v19[0] = 0;
  __dst[12] = 0;
  v19[1] = 0;
  __dst[13] = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v11);
  if (HIDWORD(v24))
  {
    v13 = v23;
    v14 = 8 * HIDWORD(v24);
    do
    {
      v15 = *v13++;
      WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(v15, (uint64_t)__dst, a2);
      v14 -= 8;
    }
    while (v14);
  }
  if ((_DWORD)v10)
  {
    v16 = 40 * v10;
    do
    {
      WTF::NativePromise<void,IPC::Error,0u>::settleChainedPromise((uint64_t)__dst, v9);
      v9 += 40;
      v16 -= 40;
    }
    while (v16);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v17);
}

unsigned __int8 *WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v19;
  _BYTE v20[2];
  unsigned __int8 *v21;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 113));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E34E8448;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v21 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v21);
      result = v21;
      v21 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v21 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v21, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<void,void,0u>::takeResultRunnable(a2, &v21);
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v21 + 16))(v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<void,void,0u>::takeResult(a2, &v21, v19);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v21);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

uint64_t *WTF::NativePromise<void,IPC::Error,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v13 = v2;
  v3 = *(_OWORD *)(a2 + 24);
  v14 = *(_OWORD *)(a2 + 8);
  v15 = v3;
  if (v2)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<void,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,IPC::Error,0u>::Storage>((unsigned __int8 *)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<void,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,IPC::Error,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
  }
  return WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(&v13);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E8448;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E8448;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,IPC::Error,0u>::Storage>(unsigned __int8 *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unsigned __int8 *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t result;
  int v11;
  unsigned __int8 *v12;

  v6 = a1 + 48;
  v12 = v6;
  if (__ldaxr(v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  v6 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", (uint64_t)a1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 56), a2);
  WTF::NativePromise<void,IPC::Error,0u>::dispatchAll(a1);
  result = (uint64_t)v12;
  v11 = __ldxr(v12);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  if (__stlxr(0, v12))
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E7FB8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34E7FF8[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E7FB8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

_BYTE *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(_BYTE **a1, _BYTE *a2, __int16 *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,IPC::Error>,std::experimental::fundamentals_v3::expected<void,IPC::Error>>(*a1, a2, a3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>(*a1, a2, a3);
}

_BYTE *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,IPC::Error>,std::experimental::fundamentals_v3::expected<void,IPC::Error>>(_BYTE *result, _BYTE *a2, __int16 *a3)
{
  _BYTE *v4;
  uint64_t v5;
  __int16 v6;
  char v7;

  v4 = result;
  v5 = *((unsigned int *)result + 2);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      return std::optional<WebCore::PlatformMediaError>::swap[abi:sn180100](&v6, a2);
    }
    result = (_BYTE *)((uint64_t (*)(char *, _BYTE *))off_1E34E7FB8[v5])(&v7, result);
  }
  *((_DWORD *)v4 + 2) = -1;
  *(_WORD *)v4 = *a3;
  *((_DWORD *)v4 + 2) = 1;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = result;
  v5 = result[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E34E7FB8[v5])(&v8, result);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    v4[2] = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E8020;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E8020;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::call@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  _QWORD *v2;
  __int16 v3;

  v2 = *(_QWORD **)(result + 8);
  if (v2)
  {
    if (*v2)
    {
      *a2 = 0;
      return result;
    }
    v3 = 269;
  }
  else
  {
    v3 = 257;
  }
  *a2 = v3;
  return result;
}

uint64_t *WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,IPC::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,IPC::Error,0u>::chainTo<void,void,16u>(WTF::NativePromiseProducer<void,void,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,IPC::Error> &&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E8048;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::NativePromise<void,IPC::Error,0u>::chainTo<void,void,16u>(WTF::NativePromiseProducer<void,void,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,IPC::Error> &&>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E8048;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,IPC::Error,0u>::chainTo<void,void,16u>(WTF::NativePromiseProducer<void,void,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,IPC::Error> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  WTF::StringImpl *result;
  uint64_t isSettled;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  v2 = (uint64_t *)(a1 + 8);
  if (*(_BYTE *)(a2 + 1))
  {
    v7 = 0;
    v8 = 0;
    v9 = "operator()";
    v10 = 0;
    return (WTF::StringImpl *)WTF::NativePromiseProducer<void,void,16u>::reject<std::enable_if<true,void>>((uint64_t *)(a1 + 8), (WTF::Logger::LogSiteIdentifier *)&v7);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = "operator()";
    v10 = 0;
    isSettled = *v2;
    if (*v2)
    {
      isSettled = WTF::NativePromise<void,void,0u>::isSettled(isSettled);
      v5 = *v2;
      if (!(_DWORD)isSettled)
        return WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(v5, (WTF::NativePromiseBase *)&v7);
    }
    else
    {
      v5 = 0;
    }
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*(_BYTE *)result)
      v6 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v6 = 0;
    if (v6)
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, (WTF::Logger::LogSiteIdentifier *)&v7, " ignored already resolved or rejected ", v5);
  }
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34E83C0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34E83F0;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34E83C0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34E83F0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  uint64_t result;
  uint64_t *v15;
  void *v16;
  _QWORD v17[4];

  v6 = *(unsigned __int8 *)(a3 + 1);
  v17[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v17, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = "<chained completion promise>";
    v17[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v17);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    v15 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v15, v16);
  }
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t *WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::NativePromiseBase *v17;

  v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    v3 = *a1;
    a1[1] = 0;
    v17 = v2;
    WTF::NativePromise<void,IPC::Error,0u>::maybeSettle(v3, &v17, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    v4 = (unsigned int *)v17;
    v17 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    v8 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  v12 = (unsigned int *)*a1;
  *a1 = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  return a1;
}

unsigned __int8 *WTF::NativePromise<void,IPC::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  unsigned __int8 *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  int v13;
  BOOL v14;
  WTF::NativePromiseBase *v15;
  WTF::Lock *v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v16 = v6;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 112) = 1;
  v15 = *a2;
  v14 = *(_DWORD *)(a1 + 64) == 0;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (*result && result[16] >= 4u)
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)result, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v15, " isNothing:", (uint64_t)&v14, "]");
  if (*(_DWORD *)(a1 + 64))
  {
    result = WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v16);
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 80))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 72, v9 + 1, (unint64_t)a2);
      v9 = *(unsigned int *)(a1 + 84);
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v11 + 8 * v9) = v12;
    *(_DWORD *)(a1 + 84) = v10;
  }
  if (v17)
  {
    result = (unsigned __int8 *)v16;
    v13 = __ldxr((unsigned __int8 *)v16);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::seekToTime(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v11);
  v3 = *(_QWORD *)(v11 + 24);
  v4 = *(_QWORD *)(v2 + 336);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1367;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v5, (_QWORD *)(a1 + 16));
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  result = (unsigned __int8 *)v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
    result = (unsigned __int8 *)WTF::fastFree(v8, v9);
  }
  v10 = v11;
  v11 = 0;
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v6);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::updateTrackIds(WTF::Vector<std::pair<unsigned long long,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = &off_1E34E8098;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::updateTrackIds(WTF::Vector<std::pair<unsigned long long,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = &off_1E34E8098;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::updateTrackIds(WTF::Vector<std::pair<unsigned long long,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  IPC::Encoder *v18;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(v2 + 312), *(_QWORD *)(v2 + 320), &v17);
  v3 = *(_QWORD *)(v17 + 24);
  v4 = *(_QWORD *)(v2 + 336);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1381;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v18 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a1 + 28);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(a1 + 16);
    v9 = &v8[2 * v7];
    do
    {
      v10 = *v8;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v10;
      v11 = v8[1];
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v11;
      v8 += 2;
    }
    while (v8 != v9);
  }
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v18, 0, 0);
  result = (unsigned __int8 *)v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    result = (unsigned __int8 *)WTF::fastFree(v14, v15);
  }
  v16 = v17;
  v17 = 0;
  if (v16)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v16 + 16), v12);
  return result;
}

uint64_t WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation>::destruct(*(unsigned int **)a1, (unsigned int *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unsigned int *WTF::VectorDestructor<true,WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation>::destruct(unsigned int *result, unsigned int *a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        v5 = v4 + 2;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v4 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
        }
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        v8 = result + 2;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, result + 2);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
      v3 += 2;
    }
    while (v3 != (unsigned int **)a2);
  }
  return result;
}

uint64_t WebKit::RemoteMediaDescription::create(WebKit::RemoteMediaDescription *this, const WebKit::MediaDescriptionInfo *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = WTF::String::isolatedCopy();
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)v4 = off_1E34E80C0;
  *(_BYTE *)(v4 + 24) = *((_BYTE *)a2 + 8);
  *(_WORD *)(v4 + 25) = *(_WORD *)((char *)a2 + 9);
  *(_QWORD *)this = v4;
  return result;
}

void WebKit::RemoteMediaDescription::~RemoteMediaDescription(WebKit::RemoteMediaDescription *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::MediaDescription::~MediaDescription(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteMediaDescription::isVideo(WebKit::RemoteMediaDescription *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t WebKit::RemoteMediaDescription::isAudio(WebKit::RemoteMediaDescription *this)
{
  return *((unsigned __int8 *)this + 25);
}

uint64_t WebKit::RemoteMediaDescription::isText(WebKit::RemoteMediaDescription *this)
{
  return *((unsigned __int8 *)this + 26);
}

void WebCore::MediaDescription::~MediaDescription(WebCore::MediaDescription *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E34E80F8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::memoryPressure(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E8130;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::memoryPressure(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8130;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::memoryPressure(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *result;
  void *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;

  v2 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 **)(v2 + 312);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v2 + 320), &v13);
    if (v13)
    {
      v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v5 & 1) == 0)
      {
        v6 = atomic_load((unsigned __int8 *)(v2 + 369));
        if ((v6 & 1) == 0)
        {
          v7 = *(_QWORD *)(v13 + 24);
          v8 = *(_QWORD *)(v2 + 336);
          v9 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v9 = 1360;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)(v9 + 528) = v9 + 16;
          *(_QWORD *)(v9 + 536) = v9 + 16;
          *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v9 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
          v14 = (IPC::Encoder *)v9;
          IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v9, (_QWORD *)(a1 + 24));
          IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v14, 0, 0);
          result = (unsigned __int8 *)v14;
          v14 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)result, v4);
            result = (unsigned __int8 *)WTF::fastFree(v10, v11);
          }
        }
      }
      v12 = v13;
      v13 = 0;
      if (v12)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v4);
    }
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::minimumUpcomingPresentationTimeForTrackID(unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *result;
  void *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  char v13;
  uint64_t *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  int v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  IPC::Encoder *v31;
  uint64_t v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  result = *(unsigned __int8 **)(v2 + 312);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v2 + 320), &v28);
    if (v28)
    {
      v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v5 & 1) != 0 || (v6 = atomic_load((unsigned __int8 *)(v2 + 369)), (v6 & 1) != 0))
      {
LABEL_20:
        v24 = v28;
        v28 = 0;
        if (v24)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v24 + 16), v4);
        return result;
      }
      v7 = *(_QWORD *)(v28 + 24);
      v8 = **(_QWORD **)(a1 + 16);
      v9 = *(_QWORD *)(v2 + 336);
      v32 = 0;
      IPC::Connection::createSyncMessageEncoder(3643, v9, &v32, (uint64_t *)&v31);
      *(_QWORD *)IPC::Encoder::grow(v31, 8uLL, 8) = v8;
      IPC::Connection::sendSyncMessage(v7, v32, (uint64_t *)&v31, 0, (uint64_t)&v29, INFINITY);
      if (v30)
      {
        if (v30 == 1)
        {
          v26[0] = (_BYTE)v29;
          v10 = 1;
          v27 = 1;
          v11 = 1;
          goto LABEL_12;
        }
      }
      else
      {
        IPC::Decoder::decode<std::tuple<WTF::MediaTime>>(v29, (uint64_t)v26);
        if (!v26[16])
        {
          v26[0] = 13;
          v10 = 1;
          v27 = 1;
          v11 = v30;
          if (v30 == -1)
          {
LABEL_13:
            v15 = v31;
            v31 = 0;
            if (v15)
            {
              IPC::Encoder::~Encoder(v15, v12);
              v15 = (IPC::Encoder *)WTF::fastFree(v16, v17);
            }
            v18 = WTF::MediaTime::invalidTime(v15);
            v19 = (uint64_t *)&v26[8];
            v20 = (uint64_t *)&v26[16];
            if (v10)
              v19 = (uint64_t *)v18;
            v21 = *v19;
            v22 = *(_QWORD *)(a1 + 24);
            if (v10)
              v20 = (uint64_t *)(v18 + 8);
            v23 = *v20;
            *(_QWORD *)v22 = v21;
            *(_DWORD *)(v22 + 8) = v23;
            *(_BYTE *)(v22 + 12) = BYTE4(v23);
            result = (unsigned __int8 *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E34E8170[v10])(&v29, v26);
            goto LABEL_20;
          }
LABEL_12:
          ((void (*)(_QWORD *, uint64_t **))off_1E34E7BC8[v11])(v33, &v29);
          goto LABEL_13;
        }
        v13 = v26[0];
        v33[0] = *(_QWORD *)&v26[1];
        *(_QWORD *)((char *)v33 + 7) = *(_QWORD *)&v26[8];
        v11 = v30;
        if (!v30)
        {
          v10 = 0;
          v14 = v29;
          v29 = 0;
          *(_QWORD *)&v26[9] = v33[0];
          *(_QWORD *)&v26[16] = *(_QWORD *)((char *)v33 + 7);
          *(_QWORD *)v26 = v14;
          v26[8] = v13;
          v27 = 0;
          goto LABEL_12;
        }
      }
      v25 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned __int8 *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy41MinimumUpcomingPresentationTimeForTrackIDEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v25);
    }
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy41MinimumUpcomingPresentationTimeForTrackIDEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumQueueDepthForTrackID(unsigned long long,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E8190;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumQueueDepthForTrackID(unsigned long long,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8190;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumQueueDepthForTrackID(unsigned long long,unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *result;
  void *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  IPC::Encoder *v15;

  v2 = *(_QWORD *)(a1 + 16);
  result = *(unsigned __int8 **)(v2 + 312);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(v2 + 320), &v14);
    if (v14)
    {
      v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v5 & 1) == 0)
      {
        v6 = atomic_load((unsigned __int8 *)(v2 + 369));
        if ((v6 & 1) == 0)
        {
          v7 = *(_QWORD *)(v14 + 24);
          v13 = *(_OWORD *)(a1 + 24);
          v8 = *(_QWORD *)(v2 + 336);
          v9 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v9 = 1375;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)(v9 + 528) = v9 + 16;
          *(_QWORD *)(v9 + 536) = v9 + 16;
          *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v9 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
          v15 = (IPC::Encoder *)v9;
          IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v9, (uint64_t *)&v13);
          IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v15, 0, 0);
          result = (unsigned __int8 *)v15;
          v15 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)result, v4);
            result = (unsigned __int8 *)WTF::fastFree(v10, v11);
          }
        }
      }
      v12 = v14;
      v14 = 0;
      if (v12)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v4);
    }
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  int v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t result;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  size_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  char v48[4];
  unsigned int v49;
  _QWORD v50[5];

  v5 = a5;
  v7 = a3;
  v10 = 0;
  v50[4] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  do
  {
    ++v10;
    v12 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v12);
  if ((a3 & 0x8000000000000000) != 0)
  {
    v15 = -(uint64_t)a3;
    v13 = 1;
    do
    {
      ++v13;
      v16 = v15 >= 0xA;
      v15 /= 0xAuLL;
    }
    while (v16);
  }
  else
  {
    v13 = 0;
    v14 = a3;
    do
    {
      ++v13;
      v12 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v12);
  }
  v17 = 0;
  v18 = a4;
  do
  {
    ++v17;
    v12 = v18 > 9;
    v18 /= 0xAuLL;
  }
  while (v12);
  v19 = 0;
  v20 = a5;
  do
  {
    ++v19;
    v12 = v20 > 9;
    v20 /= 0xAuLL;
  }
  while (v12);
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(14, v10, 15, v13, 19, v17, 12, v19, (uint64_t)v48, 2);
  if (v48[0])
    goto LABEL_56;
  v22 = v49;
  if (!v49)
  {
    v47 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    *a1 = v47;
    return result;
  }
  if ((v49 & 0x80000000) != 0 || (result = WTF::tryFastCompactMalloc((WTF *)(v49 + 20)), (v23 = v50[0]) == 0))
  {
LABEL_56:
    *a1 = 0;
    __break(0xC471u);
    return result;
  }
  v24 = 0;
  *(_DWORD *)v50[0] = 2;
  *(_DWORD *)(v23 + 4) = v22;
  qmemcpy((void *)(v23 + 20), "{ contentSize:", 14);
  *(_QWORD *)(v23 + 8) = v23 + 20;
  *(_DWORD *)(v23 + 16) = 4;
  v25 = a2;
  do
  {
    *((_BYTE *)&v50[3] + v24--) = (v25 % 0xA) | 0x30;
    v12 = v25 > 9;
    v25 /= 0xAuLL;
  }
  while (v12);
  if (v24 + 26 <= 25)
    result = (uint64_t)memcpy((void *)(v23 + 34), (char *)&v50[3] + v24 + 1, -v24);
  v26 = 0;
  do
  {
    ++v26;
    v12 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v12);
  v27 = (char *)(v23 + 34 + v26);
  qmemcpy(v27, " evictableData:", 15);
  v28 = v27 + 15;
  v29 = 0;
  if ((v7 & 0x8000000000000000) != 0)
  {
    v33 = -(uint64_t)v7;
    do
    {
      *((_BYTE *)&v50[3] + v29--) = (v33 % 0xA) | 0x30;
      v12 = v33 > 9;
      v33 /= 0xAuLL;
    }
    while (v12);
    v34 = v29 + 24;
    v31 = (char *)&v50[3] + v29;
    *v31 = 45;
    if (v29 + 26 <= 26)
    {
      if (v34 <= 24)
        v34 = 24;
      v32 = v34 - v29 - 23;
      goto LABEL_34;
    }
  }
  else
  {
    v30 = v7;
    do
    {
      *((_BYTE *)&v50[3] + v29--) = (v30 % 0xA) | 0x30;
      v12 = v30 > 9;
      v30 /= 0xAuLL;
    }
    while (v12);
    if (v29 + 26 <= 25)
    {
      v31 = (char *)&v50[3] + v29 + 1;
      v32 = -v29;
LABEL_34:
      result = (uint64_t)memcpy(v28, v31, v32);
    }
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    v36 = -(uint64_t)v7;
    v35 = 1;
    do
    {
      ++v35;
      v16 = v36 >= 0xA;
      v36 /= 0xAuLL;
    }
    while (v16);
  }
  else
  {
    v35 = 0;
    do
    {
      ++v35;
      v12 = v7 > 9;
      v7 /= 0xAuLL;
    }
    while (v12);
  }
  v37 = 0;
  v38 = &v28[v35];
  *(_OWORD *)v38 = *(_OWORD *)" maximumBufferSize:";
  *(_DWORD *)(v38 + 15) = 979729001;
  v39 = a4;
  do
  {
    *((_BYTE *)&v50[3] + v37--) = (v39 % 0xA) | 0x30;
    v12 = v39 > 9;
    v39 /= 0xAuLL;
  }
  while (v12);
  v40 = v38 + 19;
  if (v37 + 26 <= 25)
    result = (uint64_t)memcpy(v40, (char *)&v50[3] + v37 + 1, -v37);
  v41 = 0;
  do
  {
    ++v41;
    v12 = a4 > 9;
    a4 /= 0xAuLL;
  }
  while (v12);
  v42 = 0;
  v43 = &v40[v41];
  *(_QWORD *)v43 = *(_QWORD *)" numSamples:";
  *((_DWORD *)v43 + 2) = 980641132;
  v44 = v5;
  do
  {
    *((_BYTE *)&v50[3] + v42--) = (v44 % 0xA) | 0x30;
    v12 = v44 > 9;
    v44 /= 0xAuLL;
  }
  while (v12);
  v45 = v43 + 12;
  if (v42 + 26 <= 25)
    result = (uint64_t)memcpy(v45, (char *)&v50[3] + v42 + 1, -v42);
  v46 = 0;
  do
  {
    ++v46;
    v16 = v5 >= 0xA;
    v5 /= 0xAuLL;
  }
  while (v16);
  *(_WORD *)&v45[v46] = 32032;
  *a1 = v23;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E81E0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E81E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 32))(a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E8208;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8208;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 40))(a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)a1[1];
  *a1 = &off_1E34E8230;
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8230;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, *(_QWORD *)(a1 + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)a1[1];
  *a1 = &off_1E34E8258;
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8258;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 96))(a2, *(_QWORD *)(a1 + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::removeGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)a1[1];
  *a1 = &off_1E34E8280;
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::removeGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8280;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::removeGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, *(_QWORD *)(a1 + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::parseWebVTTFileHeader(WTF::String &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 112))(a2, *(_QWORD *)(a1 + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::parseWebVTTCueData(std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 120))(a2, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::parseWebVTTCueDataStruct(WebCore::ISOWebVTTCue &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, *(_QWORD *)(a1 + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addDataCue(WTF::MediaTime &&,WTF::MediaTime &,std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addDataCueWithType(WTF::MediaTime &&,WTF::MediaTime &,WebCore::SerializedPlatformDataCueValue &&,WTF::String &&)::$_0,void,WTF::MediaTime &&::TrackPrivateBaseClient &>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v4 = a1[1];
    v5 = a1[2];
    WebCore::SerializedPlatformDataCue::create();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 64))(a2, v4, v5, &v7, a1[4]);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateDataCue(WTF::MediaTime &&,WTF::MediaTime &,WebCore::SerializedPlatformDataCueValue &&)::$_0,void,WTF::MediaTime &&::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _DWORD *v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    WebCore::SerializedPlatformDataCue::create();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v4, v5);
    result = (uint64_t)v7;
    if (v7)
    {
      if (v7[2] == 1)
        return (*(uint64_t (**)())(*(_QWORD *)v7 + 8))();
      else
        --v7[2];
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::removeDataCue(WTF::MediaTime &&,WTF::MediaTime &,WebCore::SerializedPlatformDataCueValue &&)::$_0,void,WTF::MediaTime &&::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _DWORD *v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    WebCore::SerializedPlatformDataCue::create();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v4, v5);
    result = (uint64_t)v7;
    if (v7)
    {
      if (v7[2] == 1)
        return (*(uint64_t (**)())(*(_QWORD *)v7 + 8))();
      else
        --v7[2];
    }
  }
  return result;
}

uint64_t WebKit::VideoTrackPrivateRemote::VideoTrackPrivateRemote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::ThreadSafeWeakPtrControlBlock *v8;
  const WTF::StringImpl *v9;

  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)a1 = off_1E34E8470;
  v8 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v8)
    v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  *(_QWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 112) = a2;
  *(_BYTE *)(a1 + 120) = 6;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = -1;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)WTF::MediaTime::zeroTime(v8);
  *(_QWORD *)(a1 + 168) = *a4;
  *(_QWORD *)(a1 + 176) = a3;
  WebKit::VideoTrackPrivateRemote::updateConfiguration(a1, a4, v9);
  return a1;
}

_BYTE *WebKit::VideoTrackPrivateRemote::updateConfiguration(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v5 = *a2;
  if (*a2 != *(_QWORD *)(a1 + 168))
  {
    *(_QWORD *)(a1 + 168) = v5;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E34E89C0;
    v6[1] = v5;
    v20 = v6;
    WebCore::TrackPrivateBase::notifyClients();
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  }
  v7 = a1 + 128;
  if ((WTF::equal((WTF *)a2[1], *(const WTF::StringImpl **)(a1 + 128), a3) & 1) == 0)
  {
    if (*(_QWORD *)v7)
    {
      v9 = *(_DWORD *)(*(_QWORD *)v7 + 4);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 128), (WTF::StringImpl *)(a2 + 1));
      if (v9 && WebCore::TrackPrivateBase::hasClients((WebCore::TrackPrivateBase *)a1))
      {
        WTF::String::isolatedCopy();
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = &off_1E34E89E8;
        v10[1] = v25;
        v21 = v10;
        WebCore::TrackPrivateBase::notifyClients();
        if (v21)
          (*(void (**)(_QWORD *))(*v21 + 8))(v21);
        v25 = 0;
      }
    }
    else
    {
      WTF::String::operator=((WTF::StringImpl **)(a1 + 128), (WTF::StringImpl *)(a2 + 1));
    }
  }
  v11 = a1 + 136;
  if ((WTF::equal((WTF *)a2[2], *(const WTF::StringImpl **)(a1 + 136), v8) & 1) == 0)
  {
    if (*(_QWORD *)v11)
    {
      v13 = *(_DWORD *)(*(_QWORD *)v11 + 4);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 136), (WTF::StringImpl *)(a2 + 2));
      if (v13)
      {
        if (WebCore::TrackPrivateBase::hasClients((WebCore::TrackPrivateBase *)a1))
        {
          WTF::String::isolatedCopy();
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v14 = &off_1E34E8A10;
          v14[1] = v25;
          v22 = v14;
          WebCore::TrackPrivateBase::notifyClients();
          if (v22)
            (*(void (**)(_QWORD *))(*v22 + 8))(v22);
        }
      }
    }
    else
    {
      WTF::String::operator=((WTF::StringImpl **)(a1 + 136), (WTF::StringImpl *)(a2 + 2));
    }
  }
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 10);
  v15 = a2[3];
  *(_QWORD *)(a1 + 157) = *(uint64_t *)((char *)a2 + 29);
  *(_QWORD *)(a1 + 152) = v15;
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 45);
  if ((WebCore::operator==((uint64_t)(a2 + 6), a1 + 56, v12) & 1) == 0)
  {
    WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 6));
    v16 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 80) = v16;
    v17 = *(_DWORD **)(a1 + 56);
    if (v17)
      *v17 += 2;
    v23 = *(_OWORD *)(a1 + 64);
    v24 = *(_OWORD *)(a1 + 80);
    v18 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v18 = &off_1E34E8908;
    *(_QWORD *)(v18 + 8) = v17;
    *(_OWORD *)(v18 + 16) = v23;
    *(_OWORD *)(v18 + 32) = v24;
    v26 = (WTF::StringImpl *)v18;
    WebCore::TrackPrivateBase::notifyClients();
    if (v26)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 8))(v26);
  }
  return WebCore::VideoTrackPrivate::setSelected((_BYTE *)a1, *((unsigned __int8 *)a2 + 44));
}

unsigned __int8 *WebKit::VideoTrackPrivateRemote::setSelected(WebKit::VideoTrackPrivateRemote *this, int a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  void *v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  void *v35;
  uint64_t v36;
  IPC::Encoder *v37;

  result = (unsigned __int8 *)*((_QWORD *)this + 13);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 14), &v36);
    if (v36)
    {
      if ((*(unsigned int (**)(WebKit::VideoTrackPrivateRemote *))(*(_QWORD *)this + 128))(this) == a2)
      {
LABEL_10:
        result = WebCore::VideoTrackPrivate::setSelected(this, a2);
        v27 = v36;
        v36 = 0;
        if (v27)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v27 + 16), v26);
        return result;
      }
      v5 = *(_QWORD *)(v36 + 24);
      v7 = *((_QWORD *)this + 21);
      v6 = *((_QWORD *)this + 22);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 1179;
      *(_QWORD *)(v8 + 8) = v6;
      v9 = (void *)(v8 + 16);
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v37 = (IPC::Encoder *)v8;
      v10 = *(_QWORD *)(v8 + 544);
      v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
      v12 = v11 + 8;
      v13 = *(_QWORD *)(v8 + 552);
      if (v13 < v11 + 8)
      {
        v28 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v29 = v28;
          v28 *= 2;
        }
        while (v29 < v12);
        v30 = (char *)mmap(0, v29, 3, 4098, -1, 0);
        if (v30 == (char *)-1)
          goto LABEL_25;
        v14 = v30;
        memcpy(v30, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
        v31 = *(void **)(v8 + 528);
        if (v31 != v9)
          munmap(v31, *(_QWORD *)(v8 + 552));
        *(_QWORD *)(v8 + 528) = v14;
        *(_QWORD *)(v8 + 552) = v29;
        v10 = *(_QWORD *)(v8 + 544);
      }
      else
      {
        v14 = *(char **)(v8 + 528);
      }
      bzero(&v14[v10], v11 - v10);
      *(_QWORD *)(v8 + 544) = v12;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 528) + v11);
      *(_QWORD *)(v8 + 536) = v15 + 1;
      *v15 = v7;
      v16 = *(_QWORD *)(v8 + 544);
      v17 = v16 + 1;
      v18 = *(_QWORD *)(v8 + 552);
      if (v18 >= v16 + 1)
      {
        v19 = *(char **)(v8 + 528);
        v20 = *(_QWORD *)(v8 + 544);
LABEL_8:
        bzero(&v19[v20], v16 - v20);
        *(_QWORD *)(v8 + 544) = v17;
        v21 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v16);
        *(_QWORD *)(v8 + 536) = v21 + 1;
        *v21 = a2;
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v37, 0, 0);
        v23 = v37;
        v37 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v22);
          WTF::fastFree(v24, v25);
        }
        goto LABEL_10;
      }
      v32 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v33 = v32;
        v32 *= 2;
      }
      while (v33 < v17);
      v34 = (char *)mmap(0, v33, 3, 4098, -1, 0);
      if (v34 != (char *)-1)
      {
        v19 = v34;
        memcpy(v34, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
        v35 = *(void **)(v8 + 528);
        if (v35 != v9)
          munmap(v35, *(_QWORD *)(v8 + 552));
        *(_QWORD *)(v8 + 528) = v19;
        *(_QWORD *)(v8 + 552) = v33;
        v20 = *(_QWORD *)(v8 + 544);
        goto LABEL_8;
      }
LABEL_25:
      __break(0xC471u);
      JUMPOUT(0x1975A1B54);
    }
  }
  return result;
}

_BYTE *WebCore::VideoTrackPrivate::setSelected(_BYTE *this, int a2)
{
  char v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  if (this[48] != a2)
  {
    v2 = a2;
    v3 = this;
    this[48] = a2;
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34E88E0;
    *(_BYTE *)(v4 + 8) = v2;
    v5 = v4;
    WebCore::TrackPrivateBase::notifyClients();
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    this = (_BYTE *)*((_QWORD *)v3 + 12);
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *, _QWORD))(*(_QWORD *)this + 16))(this, v3, v3[48]);
  }
  return this;
}

void WebKit::WebMediaStrategy::~WebMediaStrategy(WebKit::WebMediaStrategy *this)
{
  WebCore::MediaStrategy::~MediaStrategy(this);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebMediaStrategy::createAudioDestination@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X2>, int a3@<W3>, int a4@<W4>, _QWORD *a5@<X8>, float a6@<S0>)
{
  unsigned __int8 v10;
  uint64_t result;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;

  v10 = atomic_load((unsigned __int8 *)(a1 + 9));
  if ((v10 & 1) == 0)
    return WebCore::AudioDestination::create();
  v12 = *a2;
  if (*a2)
  {
    *(_DWORD *)v12 += 2;
    v13 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v13 = &off_1E34E8A38;
    *(_DWORD *)v12 += 2;
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v13 = &off_1E34E8A38;
  }
  *(_QWORD *)(v13 + 8) = v12;
  *(_DWORD *)(v13 + 16) = a3;
  *(_DWORD *)(v13 + 20) = a4;
  *(float *)(v13 + 24) = a6;
  v15 = v13;
  WebCore::SharedAudioDestination::create();
  result = v15;
  *a5 = v16;
  if (v15)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy(v12, v14);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

uint64_t WebKit::WebMediaStrategy::hasThreadSafeMediaSourceSupport(WebKit::WebMediaStrategy *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 9);
  return v1 & 1;
}

unsigned __int8 ***WebKit::WebMediaStrategy::enableMockMediaSource(WebKit::WebMediaStrategy *this)
{
  WebCore::MediaStrategy *v2;
  unsigned __int8 v3;
  WebKit::WebProcess *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  WebKit::WebProcess *v13;
  unsigned __int8 **v14;
  IPC::Encoder *v15;

  v2 = (WebCore::MediaStrategy *)WebCore::DeprecatedGlobalSettings::setAVFoundationEnabled(0);
  *((_BYTE *)this + 8) = 1;
  v3 = atomic_load((unsigned __int8 *)this + 9);
  if ((v3 & 1) == 0)
    return (unsigned __int8 ***)WebCore::MediaStrategy::addMockMediaSourceEngine(v2);
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = WebKit::WebProcess::ensureGPUProcessConnection(v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v14, *(unsigned __int8 ***)(v6 + 24));
  v7 = v14;
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 42;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::Connection::sendMessageImpl((uint64_t)v7, (uint64_t *)&v15, 0, 0);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v14);
}

unsigned __int8 *WebKit::RemoteAudioSourceProvider::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  WebKit::RemoteAudioSourceProviderManager *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *result;
  void *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;

  v6 = WTF::fastMalloc((WTF *)0x120);
  v7 = WebKit::RemoteAudioSourceProvider::RemoteAudioSourceProvider(v6, a1, a2);
  *a3 = v7;
  v8 = *(unsigned __int8 **)(v7 + 256);
  if (v8)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v8, *(_QWORD *)(v6 + 264), &v16);
    v8 = v16;
  }
  else
  {
    v16 = 0;
  }
  v9 = WebKit::GPUProcessConnection::audioSourceProviderManager((WebKit::GPUProcessConnection *)v8);
  v10 = (unsigned int *)(v6 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v15 = v6;
  result = (unsigned __int8 *)WebKit::RemoteAudioSourceProviderManager::addProvider((uint64_t)v9, &v15);
  if (v15)
    result = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
  v14 = v16;
  v16 = 0;
  if (v14)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((unsigned __int8 **)v14 + 2), v13);
  return result;
}

uint64_t WebKit::RemoteAudioSourceProviderManager::addProvider(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  WebKit::WebProcess *v10;
  _QWORD *v11;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = WebKit::WebProcess::ensureGPUProcessConnection(v4);
  WebKit::RemoteAudioSourceProviderManager::setConnection((WebKit::RemoteAudioSourceProviderManager *)a1, *(unsigned __int8 ***)(v5 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v7 = *a2;
  *a2 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E34E8A60;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = v7;
  v11 = v8;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 32))(v6, &v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteAudioSourceProvider::RemoteAudioSourceProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  WTF::ThreadSafeWeakPtrControlBlock *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WebKit::WebProcess *v17;
  char v18;
  uint64_t v19;

  v6 = (_QWORD *)WebCore::WebAudioSourceProviderCocoa::WebAudioSourceProviderCocoa((WebCore::WebAudioSourceProviderCocoa *)a1);
  *v6 = &unk_1E34E8518;
  v6[30] = &unk_1E34E8580;
  v6[31] = a2;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = WebKit::WebProcess::ensureGPUProcessConnection(v7);
  v9 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v8 + 16);
  if (v9)
    v9 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v9);
  *(_QWORD *)(a1 + 256) = v9;
  *(_QWORD *)(a1 + 264) = v8;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 272) = v10;
  *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(a1 + 256), *(_QWORD *)(a1 + 264), &v19);
  v13 = *(_QWORD *)(v19 + 24);
  v18 = 0;
  IPC::Connection::send<Messages::RemoteMediaPlayerProxy::CreateAudioSourceProvider>(v13, (uint64_t)&v18, a2, 0, 0);
  v15 = v19;
  v19 = 0;
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v15 + 16), v14);
  return a1;
}

void WebKit::RemoteAudioSourceProvider::~RemoteAudioSourceProvider(WebKit::RemoteAudioSourceProvider *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned __int8 *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, a2);
  WebCore::WebAudioSourceProviderCocoa::~WebAudioSourceProviderCocoa(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioSourceProvider::~RemoteAudioSourceProvider(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteAudioSourceProvider::~RemoteAudioSourceProvider(WebKit::RemoteAudioSourceProvider *this, void *a2)
{
  WebKit::RemoteAudioSourceProvider::~RemoteAudioSourceProvider((WebKit::RemoteAudioSourceProvider *)((char *)this - 240), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioSourceProvider::~RemoteAudioSourceProvider((WebKit::RemoteAudioSourceProvider *)((char *)this - 240), a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteAudioSourceProvider::close(WebKit::RemoteAudioSourceProvider *this)
{
  unsigned __int8 *result;
  WebKit::RemoteAudioSourceProviderManager *v3;
  void *v4;
  WebKit::GPUProcessConnection *v5;
  WebKit::GPUProcessConnection *v6;

  result = (unsigned __int8 *)*((_QWORD *)this + 32);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 33), &v6);
    result = (unsigned __int8 *)v6;
    if (v6)
    {
      v3 = WebKit::GPUProcessConnection::audioSourceProviderManager(v6);
      result = (unsigned __int8 *)WebKit::RemoteAudioSourceProviderManager::removeProvider((uint64_t)v3, *((_QWORD *)this + 31));
      v5 = v6;
      v6 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((unsigned __int8 **)v5 + 2), v4);
    }
  }
  return result;
}

uint64_t WebKit::RemoteAudioSourceProviderManager::removeProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v4 = *(_QWORD *)(a1 + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34E8A88;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = a2;
  v7 = v5;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 32))(v4, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WebKit::RemoteAudioSourceProvider::hasNewClient(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  BOOL *v14;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;

  result = (unsigned __int8 *)a1[32];
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, a1[33], &v22);
    if (v22)
    {
      v5 = *(_QWORD *)(v22 + 24);
      v6 = a2 != 0;
      v7 = a1[31];
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 1163;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v23 = (IPC::Encoder *)v8;
      v9 = *(_QWORD *)(v8 + 544);
      v10 = v9 + 1;
      v11 = *(_QWORD *)(v8 + 552);
      if (v11 < v9 + 1)
      {
        v19 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v20 = v19;
          v19 *= 2;
        }
        while (v20 < v10);
        result = (unsigned __int8 *)mmap(0, v20, 3, 4098, -1, 0);
        if (result == (unsigned __int8 *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v12 = result;
        memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
        v21 = *(void **)(v8 + 528);
        if (v21 != (void *)(v8 + 16))
          munmap(v21, *(_QWORD *)(v8 + 552));
        *(_QWORD *)(v8 + 528) = v12;
        *(_QWORD *)(v8 + 552) = v20;
        v13 = *(_QWORD *)(v8 + 544);
      }
      else
      {
        v12 = *(unsigned __int8 **)(v8 + 528);
        v13 = *(_QWORD *)(v8 + 544);
      }
      bzero(&v12[v13], v9 - v13);
      *(_QWORD *)(v8 + 544) = v10;
      v14 = (BOOL *)(*(_QWORD *)(v8 + 528) + v9);
      *(_QWORD *)(v8 + 536) = v14 + 1;
      *v14 = v6;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
      result = (unsigned __int8 *)v23;
      v23 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
        result = (unsigned __int8 *)WTF::fastFree(v16, v17);
      }
      v18 = v22;
      v22 = 0;
      if (v18)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v18 + 16), v15);
    }
  }
  return result;
}

char *WebKit::RemoteAudioSourceProvider::logChannel(WebKit::RemoteAudioSourceProvider *this)
{
  return &WebKit2LogMedia;
}

char *`non-virtual thunk to'WebKit::RemoteAudioSourceProvider::logChannel(WebKit::RemoteAudioSourceProvider *this)
{
  return &WebKit2LogMedia;
}

WebKit::RemoteAudioSourceProviderManager *WebKit::RemoteAudioSourceProviderManager::RemoteAudioSourceProviderManager(WebKit::RemoteAudioSourceProviderManager *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34B0558;
  *((_QWORD *)this + 1) = 0;
  v2 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v2 + 24) = this;
  *((_QWORD *)this + 2) = v2;
  *(_QWORD *)this = off_1E34E85C0;
  WTF::WorkQueue::create();
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void WebKit::RemoteAudioSourceProviderManager::~RemoteAudioSourceProviderManager(WebKit::RemoteAudioSourceProviderManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  unsigned __int8 **v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E34E85C0;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF *)-1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (unsigned __int8 **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v7);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioSourceProviderManager::~RemoteAudioSourceProviderManager(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::RemoteAudioSourceProviderManager::setConnection(WebKit::RemoteAudioSourceProviderManager *this, unsigned __int8 **a2)
{
  IPC::Connection *v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v7;
  unsigned __int8 **v8;

  v3 = (IPC::Connection *)*((_QWORD *)this + 4);
  if (v3 == (IPC::Connection *)a2)
    return;
  v4 = a2;
  if (v3)
    IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)v3, 0x3Au, 0);
  if (!v4)
    goto LABEL_14;
  v5 = *v4;
  if (__ldaxr(*v4))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEABB3C](v5);
    goto LABEL_9;
  }
  if (__stxr(1u, v5))
    goto LABEL_8;
LABEL_9:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr(v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, v5))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_14:
  v8 = (unsigned __int8 **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;
  if (v8)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v8);
    v4 = (unsigned __int8 **)*((_QWORD *)this + 4);
  }
  if (v4)
    IPC::Connection::addWorkQueueMessageReceiver((uint64_t)v4, 0x3Au, *((_QWORD *)this + 3), (uint64_t)this, 0);
}

void WebKit::RemoteAudioSourceProviderManager::audioStorageChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF **v11;
  WebCore::CARingBuffer *v12;
  uint64_t v13;
  WebCore::CARingBuffer *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  _BYTE v25[24];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v6, a2);
  if (v6)
    v8 = v6 + 16 * *(unsigned int *)(v6 - 4);
  else
    v8 = 0;
  if (v8 == v7)
  {
    v18 = qword_1ECE71348;
    if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v25 = 134217984;
      *(_QWORD *)&v25[4] = a2;
      _os_log_error_impl(&dword_196BCC000, v18, OS_LOG_TYPE_ERROR, "Unable to find provider %llu for storageChanged", v25, 0xCu);
    }
  }
  else
  {
    v9 = *(_QWORD *)(v7 + 8);
    v11 = (WTF **)(v9 + 104);
    v10 = *(WTF **)(v9 + 104);
    *(_QWORD *)(v9 + 104) = 0;
    if (v10)
      std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((int)v11, v10);
    WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
    WebKit::ConsumerSharedCARingBuffer::map((WebCore::CAAudioStreamDescription *)a4, (WebCore::CARingBuffer **)v25);
    v12 = *(WebCore::CARingBuffer **)(v9 + 96);
    v13 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v9 + 96) = v13;
    if (v12)
    {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](v9 + 96, v12);
      v14 = *(WebCore::CARingBuffer **)v25;
      *(_QWORD *)v25 = 0;
      if (v14)
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)v25, v14);
      v13 = *(_QWORD *)(v9 + 96);
    }
    if (v13)
    {
      if (*(_BYTE *)(v9 + 88))
      {
        v15 = *(_OWORD *)(a4 + 8);
        v16 = *(_OWORD *)(a4 + 24);
        *(_QWORD *)(v9 + 48) = *(_QWORD *)(a4 + 40);
        *(_OWORD *)(v9 + 16) = v15;
        *(_OWORD *)(v9 + 32) = v16;
        v17 = *(_OWORD *)(a4 + 48);
        *(_QWORD *)(v9 + 72) = *(_QWORD *)(a4 + 64);
        *(_OWORD *)(v9 + 56) = v17;
        *(_DWORD *)(v9 + 80) = *(_DWORD *)(a4 + 72);
      }
      else
      {
        *(_QWORD *)(v9 + 8) = MEMORY[0x1E0DD8FD8] + 16;
        *(_OWORD *)(v9 + 16) = *(_OWORD *)(a4 + 8);
        v19 = *(_OWORD *)(a4 + 24);
        v20 = *(_OWORD *)(a4 + 40);
        v21 = *(_OWORD *)(a4 + 56);
        *(_DWORD *)(v9 + 80) = *(_DWORD *)(a4 + 72);
        *(_OWORD *)(v9 + 48) = v20;
        *(_OWORD *)(v9 + 64) = v21;
        *(_OWORD *)(v9 + 32) = v19;
        *(_BYTE *)(v9 + 88) = 1;
      }
      v22 = WTF::fastMalloc((WTF *)0x48);
      v23 = MEMORY[0x19AEB018C](v22, a4);
      v24 = *v11;
      *v11 = (WTF *)v23;
      if (v24)
        std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((int)v11, v24);
    }
  }
}

void WebKit::RemoteAudioSourceProviderManager::audioSamplesAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3, a2);
  if (v3)
    v5 = v3 + 16 * *(unsigned int *)(v3 - 4);
  else
    v5 = 0;
  if (v5 == v4)
  {
    v7 = qword_1ECE71348;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
      return;
    v11 = 134217984;
    v12 = a2;
    v8 = "Unable to find provider %llu for audioSamplesAvailable";
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(v4 + 8);
  if (!*(_QWORD *)(v6 + 104))
  {
    v7 = qword_1ECE71348;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
      return;
    v9 = *(_QWORD *)(*(_QWORD *)v6 + 248);
    v11 = 134217984;
    v12 = v9;
    v8 = "buffer for audio provider %llu is null";
    goto LABEL_16;
  }
  if (!*(_BYTE *)(v6 + 88))
    goto LABEL_18;
  if ((WebCore::WebAudioBufferList::isSupportedDescription() & 1) != 0)
  {
    WebCore::WebAudioBufferList::setSampleCount(*(WebCore::WebAudioBufferList **)(v6 + 104));
    WebCore::CARingBuffer::fetch();
    if (*(_BYTE *)(v6 + 88))
    {
      WebCore::WebAudioSourceProviderCocoa::receivedNewAudioSamples();
      return;
    }
LABEL_18:
    __break(1u);
  }
  v7 = qword_1ECE71348;
  if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
  {
    v10 = *(_QWORD *)(*(_QWORD *)v6 + 248);
    v11 = 134217984;
    v12 = v10;
    v8 = "Unable to support description with given number of frames for audio provider %llu";
LABEL_16:
    _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v11, 0xCu);
  }
}

uint64_t WebKit::RemoteImageDecoderAVFManager::ensureGPUProcessConnection(WebKit::RemoteImageDecoderAVFManager *this)
{
  unsigned __int8 *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  WebKit::WebProcess *v14;
  uint64_t v15;
  unsigned int *v16;
  char v17;

  v3 = (char *)this + 40;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v2, *((_QWORD *)this + 6), &v15);
    v5 = v15;
    if (v15)
    {
      v15 = 0;
LABEL_19:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
      return v5;
    }
  }
  else
  {
    v15 = 0;
  }
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v14);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v8 = WebKit::WebProcess::ensureGPUProcessConnection(v6);
  v9 = *(_QWORD *)(v8 + 16);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEABB3C](v9);
LABEL_11:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v12 = v15;
  v15 = v8;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v7);
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v15);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v15 + 176, (uint64_t)this);
  v17 = 87;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(v15 + 32), &v17, (uint64_t)this + 8, &v16);
  v5 = v15;
  v15 = 0;
  if (v5)
    goto LABEL_19;
  return v5;
}

void WebKit::RemoteImageDecoderAVF::~RemoteImageDecoderAVF(WebKit::RemoteImageDecoderAVF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  IPC::Encoder *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  const void **v36;
  const void *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  IPC::Encoder *v47;

  v4 = (uint64_t *)((char *)this + 48);
  v3 = *((_QWORD *)this + 6);
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  v6 = v5 + 4;
  v7 = v5[4];
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v7 + 16 * v12);
    if (v13 != v3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v7 + 16 * v12);
        ++v14;
        if (v13 == v3)
          goto LABEL_8;
      }
      v12 = *(unsigned int *)(v7 - 4);
    }
LABEL_8:
    if (v12 != *(_DWORD *)(v7 - 4))
    {
      v15 = (_QWORD *)(v7 + 16 * v12);
      v16 = (unsigned int *)v15[1];
      v15[1] = 0;
      v17 = *v6;
      if (!*v6 || (v17 += 16 * *(unsigned int *)(v17 - 4), (_QWORD *)v17 != v15))
      {
        if ((_QWORD *)v17 != v15)
        {
          *v15 = -1;
          v15[1] = 0;
          ++*(_DWORD *)(*v6 - 16);
          v18 = *v6;
          v19 = *v6 ? *(_DWORD *)(v18 - 12) - 1 : -1;
          *(_DWORD *)(v18 - 12) = v19;
          v20 = *v6;
          if (*v6)
          {
            v21 = 6 * *(_DWORD *)(v20 - 12);
            v22 = *(_DWORD *)(v20 - 4);
            if (v21 < v22 && v22 >= 9)
              WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v6, v22 >> 1);
          }
        }
      }
      if (v16)
      {
        do
        {
          v24 = __ldaxr(v16);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v16));
        if (!v25)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, a2);
        }
      }
    }
  }
  v26 = (unsigned __int8 *)v5[5];
  if (v26)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v26, v5[6], &v46);
    if (v46)
    {
      v27 = *(_QWORD *)(v46 + 24);
      v28 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v28 = 1103;
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 528) = v28 + 16;
      *(_QWORD *)(v28 + 536) = v28 + 16;
      *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v28 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
      v47 = (IPC::Encoder *)v28;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v28, v4);
      IPC::Connection::sendMessageImpl(v27, (uint64_t *)&v47, 0, 0);
      v29 = v47;
      v47 = 0;
      if (v29)
      {
        IPC::Encoder::~Encoder(v29, a2);
        WTF::fastFree(v30, v31);
      }
      v32 = v46;
      v46 = 0;
      if (v32)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v32 + 16), a2);
    }
  }
  v33 = (WTF *)*((_QWORD *)this + 12);
  if (v33)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v33, a2);
  }
  v34 = *((_QWORD *)this + 11);
  if (v34)
  {
    v35 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v35)
    {
      v36 = (const void **)(v34 + 8);
      do
      {
        if (*((_DWORD *)v36 - 2) != 2147483646)
        {
          v37 = *v36;
          *v36 = 0;
          if (v37)
            CFRelease(v37);
        }
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v34 - 16), a2);
  }
  v38 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v41)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v41, a2);
  v42 = *((_QWORD *)this + 2);
  if (v42)
  {
    *(_QWORD *)(v42 + 8) = 0;
    v43 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v43)
    {
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v43);
        WTF::fastFree((WTF *)v43, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WebCore::ImageDecoder::~ImageDecoder(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteImageDecoderAVF::~RemoteImageDecoderAVF(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebKit::RemoteImageDecoderAVF::canDecodeType(WebKit::RemoteImageDecoderAVF *this, const WTF::String *a2)
{
  WebCore::MIMETypeCache *v3;

  v3 = (WebCore::MIMETypeCache *)WebCore::AVAssetMIMETypeCache::singleton(this);
  return WebCore::MIMETypeCache::canDecodeType(v3, this) != 0;
}

uint64_t WebKit::RemoteImageDecoderAVF::encodedDataStatus(WebKit::RemoteImageDecoderAVF *this)
{
  if (*((_QWORD *)this + 14))
    return 4;
  if (*((_BYTE *)this + 128))
    return 3;
  if (*((_BYTE *)this + 132))
    return 2;
  return 1;
}

uint64_t WebKit::RemoteImageDecoderAVF::setEncodedDataStatusChangeCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteImageDecoderAVF::size(WebKit::RemoteImageDecoderAVF *this)
{
  if (*((_BYTE *)this + 128))
    return *((_QWORD *)this + 15);
  else
    return 0;
}

uint64_t WebKit::RemoteImageDecoderAVF::frameCount(WebKit::RemoteImageDecoderAVF *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t WebKit::RemoteImageDecoderAVF::repetitionCount(WebKit::RemoteImageDecoderAVF *this)
{
  if (*((_QWORD *)this + 14) <= 1uLL)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t WebKit::RemoteImageDecoderAVF::uti@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 64);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteImageDecoderAVF::filenameExtension(WebKit::RemoteImageDecoderAVF *this, const WTF::String *a2)
{
  return WebCore::MIMETypeRegistry::preferredExtensionForMIMEType((WebKit::RemoteImageDecoderAVF *)((char *)this + 56), a2);
}

uint64_t WebKit::RemoteImageDecoderAVF::frameSizeAtIndex(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
    return *(_QWORD *)(a1 + 120);
  else
    return 0;
}

BOOL WebKit::RemoteImageDecoderAVF::frameIsCompleteAtIndex(WebKit::RemoteImageDecoderAVF *this, unint64_t a2)
{
  return *((_QWORD *)this + 14) > a2;
}

double WebKit::RemoteImageDecoderAVF::frameDurationAtIndex(WebKit::RemoteImageDecoderAVF *this, unint64_t a2)
{
  unint64_t v2;
  double result;
  BOOL v4;

  v2 = *((unsigned int *)this + 27);
  result = 0.0;
  if ((_DWORD)v2)
    v4 = v2 > a2;
  else
    v4 = 0;
  if (v4)
    return *(double *)(*((_QWORD *)this + 12) + 16 * a2 + 8);
  return result;
}

BOOL WebKit::RemoteImageDecoderAVF::frameHasAlphaAtIndex(WebKit::RemoteImageDecoderAVF *this, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;

  v2 = *((unsigned int *)this + 27);
  if ((_DWORD)v2)
    v3 = v2 > a2;
  else
    v3 = 0;
  return v3 && *(_BYTE *)(*((_QWORD *)this + 12) + 16 * a2) != 0;
}

uint64_t WebKit::RemoteImageDecoderAVF::frameBytesAtIndex(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (*(_BYTE *)(a1 + 128))
    v1 = *(_QWORD *)(a1 + 120);
  else
    v1 = 0;
  v2 = HIDWORD(v1);
  if ((v1 & 0x80000000) != 0)
    LODWORD(v1) = -(int)v1;
  if ((v2 & 0x80000000) != 0)
    LODWORD(v2) = -(int)v2;
  v3 = v1 * (unint64_t)v2;
  if ((v3 & 0xFFFFFFFF00000000) != 0 || v3 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x1975A30B4);
  }
  return (4 * v3);
}

_QWORD *WebKit::RemoteImageDecoderAVF::createFrameImageAtIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  uint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = a2;
  v12 = a2;
  v6 = *(_QWORD *)(a1 + 88);
  if (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(v6, a2))return WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(a3, v6, v3);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34E8AB0;
  v8[1] = a1;
  v8[2] = &v12;
  v11 = v8;
  WTF::callOnMainRunLoopAndWait();
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v9 = v12;
  v10 = *(_QWORD *)(a1 + 88);
  result = (_QWORD *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(v10, v12);
  if ((_DWORD)result)
    return WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(a3, v10, v9);
  *a3 = 0;
  return result;
}

unsigned __int8 *WebKit::RemoteImageDecoderAVF::setExpectedContentSize(WebKit::RemoteImageDecoderAVF *this, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  void *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;

  result = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 4), &v21);
    if (v21)
    {
      v5 = *(_QWORD *)(v21 + 24);
      v6 = (uint64_t *)((char *)this + 48);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1104;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v22 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, v6);
      v8 = *(_QWORD *)(v7 + 544);
      v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
      v10 = v9 + 8;
      v11 = *(_QWORD *)(v7 + 552);
      if (v11 < v9 + 8)
      {
        v18 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v19 = v18;
          v18 *= 2;
        }
        while (v19 < v10);
        result = (unsigned __int8 *)mmap(0, v19, 3, 4098, -1, 0);
        if (result == (unsigned __int8 *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v12 = result;
        memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
        v20 = *(void **)(v7 + 528);
        if (v20 != (void *)(v7 + 16))
          munmap(v20, *(_QWORD *)(v7 + 552));
        *(_QWORD *)(v7 + 528) = v12;
        *(_QWORD *)(v7 + 552) = v19;
        v8 = *(_QWORD *)(v7 + 544);
      }
      else
      {
        v12 = *(unsigned __int8 **)(v7 + 528);
      }
      bzero(&v12[v8], v9 - v8);
      *(_QWORD *)(v7 + 544) = v10;
      v13 = (_QWORD *)(*(_QWORD *)(v7 + 528) + v9);
      *(_QWORD *)(v7 + 536) = v13 + 1;
      *v13 = a2;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v22, 0, 0);
      result = (unsigned __int8 *)v22;
      v22 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
        result = (unsigned __int8 *)WTF::fastFree(v15, v16);
      }
      v17 = v21;
      v21 = 0;
      if (v17)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v17 + 16), v14);
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteImageDecoderAVF::setData(WebKit::RemoteImageDecoderAVF *this, const WebCore::FragmentedSharedBuffer *a2, char a3)
{
  unsigned __int8 *result;
  unint64_t *v7;
  unsigned int v8;
  IPC::Encoder *v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  BOOL v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  WTF *v38;
  uint64_t v39;
  void *v40;
  _OWORD *v41;
  int v42;
  int v43;
  unint64_t *v44;
  unint64_t *v45;
  int v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  unsigned int *v51;
  unsigned int *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  WTF *v56;
  BOOL v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  size_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  WTF *v74;
  _OWORD *v75;
  int v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  const WebCore::FragmentedSharedBuffer *v89;
  unsigned int *v90;
  __int128 v91;
  unint64_t v92;
  BOOL v93;
  WTF *v94;
  unint64_t v95;
  unsigned __int8 v96;
  int v97;
  uint64_t v98;
  unint64_t *v99;
  int v100;
  IPC::Encoder *v101;
  uint64_t v102;
  WTF *v103;
  uint64_t v104;

  result = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (!result)
    return result;
  result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 4), &v98);
  if (!v98)
    return result;
  v7 = *(unint64_t **)(v98 + 24);
  v88 = *((_QWORD *)a2 + 6);
  do
    v8 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v8 + 1, (unsigned int *)a2));
  v89 = a2;
  v90 = 0;
  v102 = 0;
  IPC::Connection::createSyncMessageEncoder(3622, 0, &v102, (uint64_t *)&v101);
  v9 = v101;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(v101, (uint64_t *)this + 6);
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(v9, (IPC::SharedBufferReference *)&v88);
  v10 = *((_QWORD *)v9 + 68);
  v11 = v10 + 1;
  v12 = *((_QWORD *)v9 + 69);
  if (v12 < v10 + 1)
  {
    v61 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v62 = v61;
      v61 *= 2;
    }
    while (v62 < v11);
    v63 = (char *)mmap(0, v62, 3, 4098, -1, 0);
    if (v63 == (char *)-1)
      goto LABEL_127;
    v13 = v63;
    memcpy(v63, *((const void **)v9 + 66), *((_QWORD *)v9 + 68));
    v64 = (char *)*((_QWORD *)v9 + 66);
    if (v64 != (char *)v9 + 16)
      munmap(v64, *((_QWORD *)v9 + 69));
    *((_QWORD *)v9 + 66) = v13;
    *((_QWORD *)v9 + 69) = v62;
    v14 = *((_QWORD *)v9 + 68);
  }
  else
  {
    v13 = (char *)*((_QWORD *)v9 + 66);
    v14 = *((_QWORD *)v9 + 68);
  }
  bzero(&v13[v14], v10 - v14);
  *((_QWORD *)v9 + 68) = v11;
  v15 = (_BYTE *)(*((_QWORD *)v9 + 66) + v10);
  *((_QWORD *)v9 + 67) = v15 + 1;
  *v15 = a3;
  IPC::Connection::sendSyncMessage((uint64_t)v7, v102, (uint64_t *)&v101, 0, (uint64_t)&v99, INFINITY);
  v17 = v100;
  if (v100)
  {
    if (v100 != 1)
      goto LABEL_117;
    LOBYTE(v91) = (_BYTE)v99;
    goto LABEL_41;
  }
  v7 = v99;
  v18 = v99[1];
  v19 = *v99;
  v20 = ((v99[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v99;
  if (v18 < v20 || v18 - v20 <= 7)
  {
    v26 = 0;
    v27 = 0;
    *v99 = 0;
    v7[1] = 0;
    v65 = v7[3];
    if (v65)
    {
      if (v18)
      {
LABEL_73:
        (*(void (**)(unint64_t))(*(_QWORD *)v65 + 16))(v65);
LABEL_103:
        v27 = *v7;
        v26 = v7[1];
        goto LABEL_104;
      }
      goto LABEL_77;
    }
    goto LABEL_104;
  }
  v22 = (uint64_t *)(v19 + v20);
  v99[2] = (unint64_t)(v22 + 1);
  if (!v19)
  {
    v26 = v18;
    v27 = 0;
    goto LABEL_104;
  }
  v23 = *v22;
  v24 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(v7);
  if (!v25)
    goto LABEL_103;
  v26 = v7[1];
  v27 = *v7;
  v28 = v7[2] - *v7;
  if (v26 <= v28)
  {
    v66 = 0;
    *v7 = 0;
    v7[1] = 0;
    v67 = v7[3];
    if (v67)
    {
LABEL_118:
      if (v26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
        v66 = v7[1];
      }
      else
      {
        v66 = 0;
      }
    }
LABEL_75:
    v26 = 0;
    v27 = 0;
    *v7 = 0;
    v7[1] = 0;
    v65 = v7[3];
    if (v65)
    {
      if (v66)
        goto LABEL_73;
LABEL_77:
      v26 = 0;
      v27 = 0;
    }
LABEL_104:
    *v7 = 0;
    v7[1] = 0;
    v82 = v7[3];
    if (v82 && v26)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v82 + 16))(v82, v27);
    v47 = (void *)*v7;
    v83 = v7[1];
    *v7 = 0;
    v7[1] = 0;
    v84 = v7[3];
    if (v84 && v83)
      (*(void (**)(unint64_t, void *))(*(_QWORD *)v84 + 16))(v84, v47);
    LOBYTE(v91) = 13;
    v17 = 1;
    v97 = 1;
    v46 = v100;
    if (v100 != -1)
      goto LABEL_42;
    goto LABEL_43;
  }
  v29 = (unsigned __int8 *)(v27 + v28);
  v7[2] = (unint64_t)(v29 + 1);
  if (!v27)
  {
    v66 = v26;
    goto LABEL_75;
  }
  v30 = *v29;
  if (v30 >= 2)
    goto LABEL_104;
  v31 = v30 != 0;
  if (v26 <= (unint64_t)&v29[-v27 + 1])
  {
    v68 = 0;
    *v7 = 0;
    v7[1] = 0;
    v69 = v7[3];
    if (v69)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v69 + 16))(v69);
      v68 = 0;
      v85 = *v7;
      v86 = v7[1];
      v87 = v7[3];
      *v7 = 0;
      v7[1] = 0;
      if (v87)
      {
        if (v86)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v87 + 16))(v87, v85);
          v68 = v7[1];
        }
      }
    }
LABEL_79:
    *v7 = 0;
    v7[1] = 0;
    v65 = v7[3];
    if (!v65 || !v68)
      goto LABEL_103;
    goto LABEL_73;
  }
  v32 = v29 + 2;
  v7[2] = (unint64_t)(v29 + 2);
  v33 = v29[1];
  if (v33 >= 2)
  {
    v68 = v26;
    goto LABEL_79;
  }
  v34 = v24;
  if (!v33)
  {
    if (v100)
      goto LABEL_117;
    v44 = v99;
    v99 = 0;
    LOBYTE(v94) = 0;
    *(_QWORD *)&v91 = v44;
    *((_QWORD *)&v91 + 1) = v23;
    v92 = v24;
    v93 = v30 != 0;
    v96 = 0;
    goto LABEL_41;
  }
  v35 = ((unint64_t)(v32 + 7) & 0xFFFFFFFFFFFFFFF8) - v27;
  if (v26 < v35 || v26 - v35 <= 7)
  {
    *v7 = 0;
    v7[1] = 0;
    v70 = v7[3];
    if (v70)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v70 + 16))(v70);
      v71 = *v7;
      v72 = v7[1];
      v73 = v7[3];
      *v7 = 0;
      v7[1] = 0;
      if (v73)
      {
        if (v72)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v73 + 16))(v73, v71);
      }
    }
    goto LABEL_102;
  }
  v36 = (unint64_t *)((unint64_t)(v32 + 7) & 0xFFFFFFFFFFFFFFF8);
  v37 = *v36;
  v7[2] = (unint64_t)(v36 + 1);
  v103 = 0;
  v104 = 0;
  if (v37 < 0x10000)
  {
    if (!v37)
    {
      v43 = v100;
      if (v100)
        goto LABEL_117;
      LODWORD(v39) = 0;
      v38 = 0;
      goto LABEL_40;
    }
    v38 = (WTF *)WTF::fastMalloc((WTF *)(16 * v37));
    LODWORD(v39) = 0;
    LODWORD(v104) = v37;
    v103 = v38;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ImageDecoderFrameInfo>((uint64_t)&v91, (uint64_t *)v7);
      if (!(_BYTE)v92)
        goto LABEL_101;
      if ((_DWORD)v39 == (_DWORD)v104)
      {
        v41 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, v39 + 1, (unint64_t)&v91);
        v42 = HIDWORD(v104);
        v38 = v103;
        *((_OWORD *)v103 + HIDWORD(v104)) = *v41;
      }
      else
      {
        *((_OWORD *)v38 + v39) = v91;
        v42 = HIDWORD(v104);
      }
      LODWORD(v39) = v42 + 1;
      HIDWORD(v104) = v42 + 1;
      if (!--v37)
      {
        v43 = v104;
        goto LABEL_34;
      }
    }
  }
  v74 = 0;
  LODWORD(v39) = 0;
  do
  {
    IPC::Decoder::decode<WebCore::ImageDecoderFrameInfo>((uint64_t)&v91, (uint64_t *)v7);
    if (!(_BYTE)v92)
    {
      v38 = v103;
      if (!v103)
      {
LABEL_102:
        v79 = *v7;
        v80 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v81 = v7[3];
        if (v81 && v80)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v81 + 16))(v81, v79);
        goto LABEL_103;
      }
LABEL_101:
      v103 = 0;
      LODWORD(v104) = 0;
      WTF::fastFree(v38, v40);
      goto LABEL_102;
    }
    if ((_DWORD)v39 == (_DWORD)v104)
    {
      v75 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, v39 + 1, (unint64_t)&v91);
      v76 = HIDWORD(v104);
      v74 = v103;
      *((_OWORD *)v103 + HIDWORD(v104)) = *v75;
    }
    else
    {
      *((_OWORD *)v74 + v39) = v91;
      v76 = HIDWORD(v104);
    }
    v39 = (v76 + 1);
    HIDWORD(v104) = v76 + 1;
    --v37;
  }
  while (v37);
  v43 = v104;
  if (v104 <= v39)
    goto LABEL_116;
  if (!(_DWORD)v39)
  {
LABEL_114:
    v103 = 0;
    LODWORD(v104) = 0;
    goto LABEL_115;
  }
  if (v39 >> 28)
  {
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x1975A3AB4);
  }
  v7 = (unint64_t *)(16 * v39);
  v77 = WTF::fastMalloc((WTF *)(16 * v39));
  LODWORD(v104) = v39;
  v103 = (WTF *)v77;
  if ((WTF *)v77 == v74)
    goto LABEL_114;
  v78 = 0;
  do
  {
    *(_OWORD *)((char *)v78 + v77) = *(_OWORD *)((char *)v78 + (_QWORD)v74);
    v78 += 2;
  }
  while (v7 != v78);
  v43 = v39;
  if (!v74)
    goto LABEL_116;
LABEL_115:
  WTF::fastFree(v74, v40);
  v43 = v104;
  LODWORD(v39) = HIDWORD(v104);
LABEL_116:
  v38 = v103;
LABEL_34:
  if (v100)
  {
LABEL_117:
    v67 = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_118;
  }
LABEL_40:
  v45 = v99;
  v99 = 0;
  v94 = v38;
  v95 = __PAIR64__(v39, v43);
  *(_QWORD *)&v91 = v45;
  *((_QWORD *)&v91 + 1) = v23;
  v92 = v34;
  v93 = v31;
  v96 = 1;
LABEL_41:
  v97 = v17;
  v46 = v17;
LABEL_42:
  ((void (*)(WTF **, unint64_t **))off_1E34E8AC8[v46])(&v103, &v99);
LABEL_43:
  v48 = v101;
  v101 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  v51 = v90;
  v90 = 0;
  if (v51)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v51);
  v52 = (unsigned int *)v89;
  v89 = 0;
  if (v52)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v52, v47);
  if (!v17)
  {
    v54 = *((_QWORD *)&v91 + 1);
    v53 = v92;
    v55 = v96;
    if (v96)
    {
      v56 = v94;
      v16 = v95;
      v94 = 0;
      v95 = 0;
    }
    else
    {
      v56 = 0;
    }
    v57 = v93;
    *((_BYTE *)this + 72) = a3;
    *((_QWORD *)this + 14) = v54;
    if ((int)v53 >= 1 && SHIDWORD(v53) >= 1)
    {
      if (!*((_BYTE *)this + 128))
        *((_BYTE *)this + 128) = 1;
      *((_QWORD *)this + 15) = v53;
    }
    *((_BYTE *)this + 132) = v57;
    if (v55)
    {
      v58 = (WTF *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v56;
      *((_QWORD *)this + 13) = v16;
      if (v58)
        WTF::fastFree(v58, v47);
    }
    v17 = 0;
  }
  result = (unsigned __int8 *)((uint64_t (*)(uint64_t *, __int128 *))off_1E34E8958[v17])(&v88, &v91);
  v60 = v98;
  v98 = 0;
  if (v60)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v60 + 16), v59);
  return result;
}

unsigned __int8 *WebKit::RemoteImageDecoderAVF::clearFrameBufferCache(WebKit::RemoteImageDecoderAVF *this, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v23;
  unsigned __int8 *result;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  void *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  IPC::Encoder *v42;

  v4 = a2 + 1;
  v5 = *((_QWORD *)this + 14);
  if (v5 >= a2 + 1)
    v5 = a2 + 1;
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)((char *)this + 88);
    do
    {
      v8 = *v7;
      if (*v7)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = 9 * ((~((_DWORD)v6 << 15) + v6) ^ ((~((_DWORD)v6 << 15) + v6) >> 10));
        v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
        v12 = v9 & (v11 ^ HIWORD(v11));
        v13 = *(_DWORD *)(v8 + 16 * v12);
        if (v13 != (_DWORD)v6)
        {
          v14 = 1;
          while (v13 != 0x7FFFFFFF)
          {
            v12 = ((_DWORD)v12 + v14) & v9;
            v13 = *(_DWORD *)(v8 + 16 * v12);
            ++v14;
            if (v13 == (_DWORD)v6)
              goto LABEL_12;
          }
          v12 = *(unsigned int *)(v8 - 4);
        }
LABEL_12:
        if (v12 != *(_DWORD *)(v8 - 4))
        {
          v15 = v8 + 16 * v12;
          *(_DWORD *)v15 = 2147483646;
          v16 = *(const void **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            CFRelease(v16);
          ++*(_DWORD *)(*v7 - 16);
          v17 = *v7;
          if (*v7)
            v18 = *(_DWORD *)(v17 - 12) - 1;
          else
            v18 = -1;
          *(_DWORD *)(v17 - 12) = v18;
          v19 = *v7;
          if (*v7)
          {
            v20 = 6 * *(_DWORD *)(v19 - 12);
            v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9)
              WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash((uint64_t *)this + 11, v21 >> 1, 0);
          }
        }
      }
      ++v6;
      v23 = *((_QWORD *)this + 14);
      if (v23 >= v4)
        v23 = v4;
    }
    while (v6 < v23);
  }
  result = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 4), &v41);
    if (v41)
    {
      v25 = *(_QWORD *)(v41 + 24);
      v26 = (uint64_t *)((char *)this + 48);
      v27 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v27 = 1102;
      *(_QWORD *)(v27 + 8) = 0;
      *(_QWORD *)(v27 + 528) = v27 + 16;
      *(_QWORD *)(v27 + 536) = v27 + 16;
      *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v27 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
      v42 = (IPC::Encoder *)v27;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v27, v26);
      v28 = *(_QWORD *)(v27 + 544);
      v29 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
      v30 = v29 + 8;
      v31 = *(_QWORD *)(v27 + 552);
      if (v31 < v29 + 8)
      {
        v38 = (2 * v31 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v39 = v38;
          v38 *= 2;
        }
        while (v39 < v30);
        result = (unsigned __int8 *)mmap(0, v39, 3, 4098, -1, 0);
        if (result == (unsigned __int8 *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v32 = result;
        memcpy(result, *(const void **)(v27 + 528), *(_QWORD *)(v27 + 544));
        v40 = *(void **)(v27 + 528);
        if (v40 != (void *)(v27 + 16))
          munmap(v40, *(_QWORD *)(v27 + 552));
        *(_QWORD *)(v27 + 528) = v32;
        *(_QWORD *)(v27 + 552) = v39;
        v28 = *(_QWORD *)(v27 + 544);
      }
      else
      {
        v32 = *(unsigned __int8 **)(v27 + 528);
      }
      bzero(&v32[v28], v29 - v28);
      *(_QWORD *)(v27 + 544) = v30;
      v33 = (_QWORD *)(*(_QWORD *)(v27 + 528) + v29);
      *(_QWORD *)(v27 + 536) = v33 + 1;
      *v33 = a2;
      IPC::Connection::sendMessageImpl(v25, (uint64_t *)&v42, 0, 0);
      result = (unsigned __int8 *)v42;
      v42 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v34);
        result = (unsigned __int8 *)WTF::fastFree(v35, v36);
      }
      v37 = v41;
      v41 = 0;
      if (v37)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v37 + 16), v34);
    }
  }
  return result;
}

uint64_t WebKit::RemoteImageDecoderAVF::encodedDataStatusChanged(uint64_t this, uint64_t a2, const IntSize *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  *(_QWORD *)(this + 112) = a2;
  if (a3->m_width >= 1 && a3->m_height >= 1)
  {
    v5 = (uint64_t)*a3;
    if (!*(_BYTE *)(this + 128))
      *(_BYTE *)(this + 128) = 1;
    *(_QWORD *)(this + 120) = v5;
  }
  *(_BYTE *)(this + 132) = a4;
  v6 = *(_QWORD *)(this + 80);
  if (v6)
  {
    if (a2)
    {
      v7 = 4;
    }
    else
    {
      if (a4)
        v8 = 2;
      else
        v8 = 1;
      if (*(_BYTE *)(this + 128))
        v7 = 3;
      else
        v7 = v8;
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v6 + 16))(*(_QWORD *)(this + 80), v7);
  }
  return this;
}

void WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager(WebKit::RemoteImageDecoderAVFManager *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v3, *((_QWORD *)this + 6), &v7);
    if (v7)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v7 + 32), 0x57u);
      v4 = v7;
      v7 = 0;
      if (v4)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
    }
    v5 = (unsigned __int8 *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v5)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v6, a2);
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager(WebKit::RemoteImageDecoderAVFManager *this, void *a2)
{
  WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager((WebKit::RemoteImageDecoderAVFManager *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager((WebKit::RemoteImageDecoderAVFManager *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteImageDecoderAVFManager::gpuProcessConnectionDidClose(WebKit::RemoteImageDecoderAVFManager *this, WebKit::GPUProcessConnection *a2)
{
  unsigned __int8 *result;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  result = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *((_QWORD *)this + 6), &v6);
    if (v6)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v6 + 32), 0x57u);
      v5 = v6;
      v6 = 0;
      if (v5)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
    }
    result = (unsigned __int8 *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (result)
      result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v4);
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  *((_QWORD *)this + 6) = 0;
  return result;
}

WTF *WebKit::RemoteImageDecoderAVFManager::encodedDataStatusChanged(uint64_t a1, _QWORD *a2, uint64_t a3, const IntSize *a4, int a5)
{
  unsigned int **v9;
  WTF *result;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;

  v9 = (unsigned int **)(a1 + 32);
  result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), a2);
  if ((_DWORD)result)
  {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9, a2, (unsigned int **)&v14);
    result = v14;
    if (v14)
    {
      if (*((_QWORD *)v14 + 1))
      {
        WebKit::RemoteImageDecoderAVF::encodedDataStatusChanged(*((_QWORD *)v14 + 1), a3, a4, a5);
        result = v14;
        v14 = 0;
        if (!result)
          return result;
      }
      else
      {
        v14 = 0;
      }
      do
      {
        v12 = __ldaxr((unsigned int *)result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)result));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)result);
        return (WTF *)WTF::fastFree(result, v11);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaSessionHelper::ensureConnection(WebKit::RemoteMediaSessionHelper *this)
{
  unsigned __int8 *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  WebKit::WebProcess *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WebKit::WebProcess *v20;
  uint64_t v21;
  IPC::Encoder *v22[3];
  char v23;

  v3 = (char *)this + 80;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 10);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v2, *((_QWORD *)this + 11), &v21);
    v5 = v21;
    if (v21)
      goto LABEL_21;
  }
  else
  {
    v21 = 0;
  }
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v20);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v8 = WebKit::WebProcess::ensureGPUProcessConnection(v6);
  v9 = *(_QWORD *)(v8 + 16);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEABB3C](v9);
LABEL_11:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
      goto LABEL_16;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_16:
  v12 = v21;
  v21 = v8;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v7);
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v21);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v21 + 176, (uint64_t)this + 72);
  v23 = 102;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(v21 + 32), &v23, (uint64_t)this + 56, (unsigned int **)v22);
  v13 = *(_QWORD *)(v21 + 24);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 43;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v22[0] = (IPC::Encoder *)v14;
  IPC::Connection::sendMessageImpl(v13, (uint64_t *)v22, 0, 0);
  v15 = v22[0];
  v22[0] = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v4);
    WTF::fastFree(v16, v17);
  }
  v5 = v21;
LABEL_21:
  v21 = 0;
  v18 = *(_QWORD *)(v5 + 24);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
  return v18;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelper::gpuProcessConnectionDidClose(WebKit::RemoteMediaSessionHelper *this, WebKit::GPUProcessConnection *a2)
{
  void *v3;
  unsigned __int8 *result;

  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::GPUProcessConnection *)((char *)a2 + 32), (WebKit::RemoteMediaSessionHelper *)((char *)this + 56));
  result = (unsigned __int8 *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
  *((_QWORD *)this + 11) = 0;
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteMediaSessionHelper::gpuProcessConnectionDidClose(WebKit::RemoteMediaSessionHelper *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteMediaSessionHelper::gpuProcessConnectionDidClose((WebKit::RemoteMediaSessionHelper *)((char *)this - 72), a2);
}

IPC::Encoder *WebKit::RemoteMediaSessionHelper::startMonitoringWirelessRoutesInternal(WebKit::RemoteMediaSessionHelper *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v1 = WebKit::RemoteMediaSessionHelper::ensureConnection(this);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1214;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaSessionHelper::stopMonitoringWirelessRoutesInternal(WebKit::RemoteMediaSessionHelper *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v1 = WebKit::RemoteMediaSessionHelper::ensureConnection(this);
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 1215;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

char *WebKit::RemoteMediaSessionHelper::providePresentingApplicationPID(WebKit::RemoteMediaSessionHelper *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  void *v11;
  char *result;
  WTF *v13;
  void *v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  IPC::Encoder *v18;

  v3 = WebKit::RemoteMediaSessionHelper::ensureConnection(a1);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1213;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v18 = (IPC::Encoder *)v4;
  v5 = *(_QWORD *)(v4 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(v4 + 552);
  if (v8 < v6 + 4)
  {
    v15 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v16 = v15;
      v15 *= 2;
    }
    while (v16 < v7);
    result = (char *)mmap(0, v16, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v17 = *(void **)(v4 + 528);
    if (v17 != (void *)(v4 + 16))
      munmap(v17, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v9;
    *(_QWORD *)(v4 + 552) = v16;
    v5 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v9 = *(char **)(v4 + 528);
  }
  bzero(&v9[v5], v6 - v5);
  *(_QWORD *)(v4 + 544) = v7;
  v10 = (_DWORD *)(*(_QWORD *)(v4 + 528) + v6);
  *(_QWORD *)(v4 + 536) = v10 + 1;
  *v10 = a2;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v18, 0, 0);
  result = (char *)v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
    return (char *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::RemoteMediaSessionHelper::activeVideoRouteDidChange(uint64_t a1, char a2, WebKit::MediaPlaybackTargetContextSerialized *this)
{
  uint64_t result;
  char v5;
  _QWORD v6[2];
  _QWORD *v7;
  _BYTE v8[32];
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  WebKit::MediaPlaybackTargetContextSerialized::platformContext(this, (uint64_t)v8);
  v6[0] = a1;
  v6[1] = &v5;
  if (v9 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v7 = v6;
  result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit24RemoteMediaSessionHelper25activeVideoRouteDidChangeEN7WebCore24MediaSessionHelperClient20SupportsAirPlayVideoEONS8_36MediaPlaybackTargetContextSerializedEE3__0JZNS9_25activeVideoRouteDidChangeESC_SE_E3__1EEEEEJNS0_6__implIJNSA_31MediaPlaybackTargetContextCocoaENSA_30MediaPlaybackTargetContextMockEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v7, v8);
  if (v9 != -1)
    return (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore31MediaPlaybackTargetContextCocoaENS6_30MediaPlaybackTargetContextMockEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix_0
            + v9))((int)v6, (WebCore::MediaPlaybackTargetContextCocoa *)v8);
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::videoCodecTypeFromWebCodec(WebKit::LibWebRTCCodecs *this, const WTF::String *a2)
{
  unsigned __int8 v4;
  int v5;
  uint64_t v6;

  if (!*(_QWORD *)a2)
    goto LABEL_20;
  if ((WTF::StringImpl::startsWith() & 1) != 0)
  {
    v4 = 0;
LABEL_4:
    v5 = 1;
    return v4 | (v5 << 8);
  }
  if (!*(_QWORD *)a2)
    goto LABEL_20;
  if (!WTF::StringImpl::startsWith())
  {
    if (*(_QWORD *)a2)
    {
      if (WTF::StringImpl::startsWith())
      {
        v5 = *((unsigned __int8 *)this + 135);
        if (*((_BYTE *)this + 135))
          v4 = 3;
        else
          v4 = 0;
        return v4 | (v5 << 8);
      }
      if (*(_QWORD *)a2
        && ((WTF::StringImpl::startsWith() & 1) != 0 || *(_QWORD *)a2 && (WTF::StringImpl::startsWith() & 1) != 0))
      {
        v4 = 1;
        goto LABEL_4;
      }
    }
LABEL_20:
    v4 = 0;
    v5 = 0;
    return v4 | (v5 << 8);
  }
  v6 = 128;
  if (!*((_BYTE *)this + 129))
    v6 = 130;
  v5 = *((unsigned __int8 *)this + v6);
  v4 = 2 * v5;
  return v4 | (v5 << 8);
}

uint64_t WebKit::LibWebRTCCodecs::setHasAV1HardwareDecoder(uint64_t this, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  *(_BYTE *)(this + 135) = a2;
  if (a2)
  {
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E34E8B80;
    v3 = (uint64_t)v2;
    WebCore::Page::forEachPage();
    this = v3;
    if (v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return this;
}

uint64_t WebKit::LibWebRTCCodecs::videoEncoderTypeFromWebCodec(WebKit::LibWebRTCCodecs *this, const WTF::String *a2)
{
  int v3;
  int v4;

  if (!*(_QWORD *)a2)
    goto LABEL_11;
  if ((WTF::StringImpl::startsWith() & 1) == 0)
  {
    if (*(_QWORD *)a2
      && ((WTF::StringImpl::startsWith() & 1) != 0 || *(_QWORD *)a2 && (WTF::StringImpl::startsWith() & 1) != 0))
    {
      v3 = 1;
      goto LABEL_9;
    }
LABEL_11:
    v3 = 0;
    v4 = 0;
    return v3 | (v4 << 8);
  }
  v3 = 0;
LABEL_9:
  v4 = 1;
  return v3 | (v4 << 8);
}

void WebKit::LibWebRTCCodecs::initializeIfNeeded(WebKit::LibWebRTCCodecs *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::$_0 &&>>);
  }
}

void WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionOnMainThreadWithLock(WebKit::LibWebRTCCodecs *this)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v7;
  unsigned __int8 **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  void *v12;
  uint64_t v13;
  WebKit::GPUProcessConnection *v14;
  WebKit::WebProcess *v15;
  char *v16;
  WebKit::GPUProcessConnection *v17;

  if (*((_QWORD *)this + 8))
    return;
  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = WebKit::WebProcess::ensureGPUProcessConnection(v2);
  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v17, v3);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>((uint64_t)v17 + 176, (uint64_t)this + 24);
  v4 = (unsigned __int8 **)*((_QWORD *)v17 + 3);
  if (!v4)
    goto LABEL_14;
  v5 = *v4;
  if (__ldaxr(*v4))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEABB3C](v5);
    goto LABEL_9;
  }
  if (__stxr(1u, v5))
    goto LABEL_8;
LABEL_9:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr(v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, v5))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_14:
  v8 = (unsigned __int8 **)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v4;
  if (v8)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v8);
  v9 = (unsigned int *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v17);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v9;
  if (v11)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v11);
  IPC::Connection::addWorkQueueMessageReceiver(*((_QWORD *)this + 8), 0x13u, *((_QWORD *)this + 12), (uint64_t)this, 0);
  if (*((_BYTE *)this + 132))
  {
    v13 = *((_QWORD *)this + 8);
    v16 = (char *)this + 131;
    IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetRTCLoggingLevel>(v13, &v16, 0, 0, 0);
  }
  v14 = v17;
  v17 = 0;
  if (v14)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((unsigned __int8 **)v14 + 2), v12);
}

char *IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetRTCLoggingLevel>(uint64_t a1, char **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  char *result;
  unint64_t v24;
  size_t v25;
  void *v26;
  IPC::Encoder *v27;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 119;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v27 = (IPC::Encoder *)v10;
  v11 = **a2;
  v12 = *(_QWORD *)(v10 + 544);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(v10 + 552);
  if (v14 < v12 + 1)
  {
    v24 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v25 = v24;
      v24 *= 2;
    }
    while (v25 < v13);
    result = (char *)mmap(0, v25, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v15 = result;
    memcpy(result, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
    v26 = *(void **)(v10 + 528);
    if (v26 != (void *)(v10 + 16))
      munmap(v26, *(_QWORD *)(v10 + 552));
    *(_QWORD *)(v10 + 528) = v15;
    *(_QWORD *)(v10 + 552) = v25;
    v16 = *(_QWORD *)(v10 + 544);
  }
  else
  {
    v15 = *(char **)(v10 + 528);
    v16 = *(_QWORD *)(v10 + 544);
  }
  bzero(&v15[v16], v12 - v16);
  *(_QWORD *)(v10 + 544) = v13;
  v17 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v12);
  *(_QWORD *)(v10 + 536) = v17 + 1;
  *v17 = v11;
  v19 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v27, a4, a5);
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v18);
    WTF::fastFree(v21, v22);
  }
  return (char *)v19;
}

uint64_t *WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t *result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;

  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  v4 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_5:
  if (*(_QWORD *)(a1 + 64))
  {
    result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96), a2);
  }
  else
  {
    result = (uint64_t *)(a1 + 80);
    v7 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 88))
    {
      result = (uint64_t *)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v7 + 1, (unint64_t)a2);
      a2 = result;
      v7 = *(unsigned int *)(a1 + 92);
      v8 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v7);
    }
    else
    {
      v8 = (_QWORD *)(*result + 8 * v7);
    }
    v9 = *a2;
    *a2 = 0;
    *v8 = v9;
    *(_DWORD *)(a1 + 92) = v7 + 1;
    if (!(_DWORD)v7)
    {
      v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *v10 = (uint64_t)off_1E34E8BD0;
      v10[1] = a1;
      v12 = v10;
      WTF::callOnMainRunLoop();
      result = v12;
      if (v12)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v12 + 8))(v12);
    }
  }
  v11 = __ldxr(v4);
  if (v11 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void WebKit::LibWebRTCCodecs::~LibWebRTCCodecs(WebKit::LibWebRTCCodecs *this, void *a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Semaphore ***v10;
  IPC::Semaphore **v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::LibWebRTCCodecs::Decoder **v14;

  *(_QWORD *)this = off_1E34E8760;
  *((_QWORD *)this + 3) = &unk_1E34E87B8;
  v3 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  v6 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v6);
  v7 = (unsigned __int8 **)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v7);
  v8 = *((_QWORD *)this + 6);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (IPC::Semaphore ***)(v8 + 8);
      do
      {
        if (*(v10 - 1) != (IPC::Semaphore **)-1)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
            std::default_delete<WebKit::LibWebRTCCodecs::Encoder>::operator()[abi:sn180100](v11);
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v5);
  }
  v12 = *((_QWORD *)this + 4);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = (WebKit::LibWebRTCCodecs::Decoder **)(v12 + 8);
      do
      {
        if (*(v14 - 1) != (WebKit::LibWebRTCCodecs::Decoder *)-1)
          std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100](v14, 0);
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), v5);
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCCodecs::~LibWebRTCCodecs(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::LibWebRTCCodecs::~LibWebRTCCodecs(WebKit::LibWebRTCCodecs *this, void *a2)
{
  WebKit::LibWebRTCCodecs::~LibWebRTCCodecs((WebKit::LibWebRTCCodecs *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::LibWebRTCCodecs::~LibWebRTCCodecs((WebKit::LibWebRTCCodecs *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::createVideoDecoder(WebKit *this, const webrtc::SdpVideoFormat *a2)
{
  WebKit::WebProcess *v2;
  WebKit::LibWebRTCCodecs *v3;
  uint64_t v4;
  char v5;
  _BYTE *v6;
  _BOOL8 v7;
  WTF::StringImpl *v8;
  uint64_t Decoder;
  WebKit::WebProcess *v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = WebKit::WebProcess::libWebRTCCodecs(v2);
  WTF::String::fromUTF8();
  if (!v13)
    return 0;
  if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v13, "H264"))
  {
    v4 = (uint64_t)v3;
    v5 = 0;
LABEL_16:
    Decoder = WebKit::LibWebRTCCodecs::createDecoder(v4, v5);
    goto LABEL_17;
  }
  if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v13, "H265"))
  {
    v4 = (uint64_t)v3;
    v5 = 1;
    goto LABEL_16;
  }
  if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v13, "VP9"))
  {
    v6 = (char *)v3 + 128;
    if (!*((_BYTE *)v3 + 129))
      v6 = (char *)v3 + 130;
    if (*v6)
    {
      v4 = (uint64_t)v3;
      v5 = 2;
      goto LABEL_16;
    }
  }
  v7 = WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v13, "AV1");
  if (v7)
  {
    if (*((_BYTE *)v3 + 135))
    {
      v4 = (uint64_t)v3;
      v5 = 3;
      goto LABEL_16;
    }
    WebCore::createLibWebRTCDav1dDecoder((WebCore *)v7);
    Decoder = v12;
  }
  else
  {
    Decoder = 0;
  }
LABEL_17:
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v8);
  else
    *(_DWORD *)v13 -= 2;
  return Decoder;
}

uint64_t WebKit::releaseVideoDecoder(WebKit *this, void *a2)
{
  WebKit::WebProcess *v3;
  WebKit::LibWebRTCCodecs *v4;
  WebKit::WebProcess *v6;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::libWebRTCCodecs(v3);
  WebKit::LibWebRTCCodecs::releaseDecoder((uint64_t)v4, (uint64_t *)this);
  return 0;
}

uint64_t WebKit::decodeVideoFrame(WebKit *this, void *a2, const void *a3, const unsigned __int8 *a4, int a5, int a6)
{
  unsigned int v10;
  WebKit::WebProcess *v12;
  WebKit::LibWebRTCCodecs *v13;
  WebKit::WebProcess *v15;

  v10 = a2;
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v13 = WebKit::WebProcess::libWebRTCCodecs(v12);
  return WebKit::LibWebRTCCodecs::decodeFrame((uint64_t)v13, (uint64_t)this, v10, a3, (unint64_t)a4, a5, a6);
}

uint64_t WebKit::registerDecodeCompleteCallback(WebKit *this, void *a2, void *a3)
{
  WebKit::WebProcess *v5;
  unsigned __int8 *v6;
  int v8;
  WebKit::WebProcess *v10;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  WebKit::WebProcess::libWebRTCCodecs(v5);
  v6 = (unsigned __int8 *)this + 40;
  if (__ldaxr((unsigned __int8 *)this + 40))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C]((char *)this + 40);
LABEL_7:
  *((_QWORD *)this + 3) = a2;
  v8 = __ldxr(v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, v6))
      return 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebKit *)((char *)this + 40));
  return 0;
}

WTF::StringImpl *WebKit::createVideoEncoder(WebKit *this, const webrtc::SdpVideoFormat *a2)
{
  char v2;
  char *v3;
  uint64_t v5;
  WebKit *v6;
  uint64_t v7;
  WebKit *v9;
  uint64_t v10;
  WebKit *v11;
  uint64_t v12;
  WebKit *v13;
  WTF::StringImpl *EncoderInternal;
  WebKit::WebProcess *v15;
  WebKit::LibWebRTCCodecs *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebKit::WebProcess *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;

  v5 = *((unsigned __int8 *)this + 23);
  v6 = this;
  v7 = v5;
  if (*((char *)this + 23) < 0)
  {
    v7 = *((_QWORD *)this + 1);
    if (v7 < 0)
      goto LABEL_39;
    v6 = *(WebKit **)this;
    if (v7 && v6 == 0)
      goto LABEL_39;
  }
  if (v7 == 4 && *(_DWORD *)v6 == 875967048)
    goto LABEL_28;
  v9 = this;
  v10 = *((unsigned __int8 *)this + 23);
  if ((v5 & 0x80) != 0)
  {
    v10 = *((_QWORD *)this + 1);
    if (v10 < 0)
      goto LABEL_39;
    v9 = *(WebKit **)this;
    if (v10)
    {
      if (!v9)
        goto LABEL_39;
    }
  }
  if (v10 == 4 && *(_DWORD *)v9 == 875967080)
  {
LABEL_28:
    v2 = 0;
    goto LABEL_30;
  }
  v11 = this;
  v12 = *((unsigned __int8 *)this + 23);
  if ((v5 & 0x80) != 0)
  {
    v12 = *((_QWORD *)this + 1);
    if (v12 < 0 || (v11 = *(WebKit **)this, v12) && !v11)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  if (v12 != 4 || *(_DWORD *)v11 != 892744264)
  {
    v13 = this;
    if ((v5 & 0x80) == 0
      || (v5 = *((_QWORD *)this + 1), (v5 & 0x8000000000000000) == 0) && ((v13 = *(WebKit **)this, !v5) || v13))
    {
      if (v5 != 4 || *(_DWORD *)v13 != 892744296)
        return 0;
      goto LABEL_29;
    }
    goto LABEL_39;
  }
LABEL_29:
  v2 = 1;
LABEL_30:
  v3 = &_MergedGlobals_106;
  {
LABEL_40:
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
    v3[2488] = 1;
    goto LABEL_32;
  }
  v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
LABEL_32:
  v16 = WebKit::WebProcess::libWebRTCCodecs(v15);
  v23 = 0;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = off_1E34E8D10;
  v22 = v17;
  EncoderInternal = WebKit::LibWebRTCCodecs::createEncoderInternal((uint64_t)v16, v2, (uint64_t)&v23, (_QWORD *)this + 3, 1, 1, 0, (uint64_t *)&v22);
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  return EncoderInternal;
}

uint64_t WebKit::releaseVideoEncoder(WebKit *this, void *a2)
{
  WebKit::WebProcess *v3;
  WebKit::LibWebRTCCodecs *v4;
  WebKit::WebProcess *v6;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v6);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::libWebRTCCodecs(v3);
  WebKit::LibWebRTCCodecs::releaseEncoder((uint64_t)v4, (uint64_t *)this);
  return 0;
}

uint64_t WebKit::initializeVideoEncoder(uint64_t *a1, uint64_t a2)
{
  WebKit::WebProcess *v4;
  WebKit::LibWebRTCCodecs *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebProcess *v11;
  __int128 v12;
  uint64_t v13;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v11);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  v5 = WebKit::WebProcess::libWebRTCCodecs(v4);
  v6 = *(_DWORD *)(a2 + 4);
  v7 = *a1;
  v12 = *(_OWORD *)(a2 + 8);
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = off_1E34E8E50;
  *(_QWORD *)(v8 + 8) = v5;
  *(_QWORD *)(v8 + 16) = v7;
  *(_DWORD *)(v8 + 24) = v6;
  *(_OWORD *)(v8 + 28) = v12;
  v13 = v8;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread((uint64_t)v5, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return 0;
}

uint64_t WebKit::encodeVideoFrame(WebKit *this, uint64_t *a2, const webrtc::VideoFrame *a3)
{
  char v3;
  WebKit::WebProcess *v6;
  WebKit::LibWebRTCCodecs *v7;
  WebKit::LibWebRTCCodecs *v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  __int16 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  WebKit::WebProcess *v37;
  WebKit::LibWebRTCCodecs *v38;
  uint64_t *v39;
  char v40;
  uint64_t *v41[4];
  char v42;
  WTF *v43;
  uint64_t v44[2];
  __int128 v45;
  const char *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  char v50;
  char v51;
  __int16 v52;
  _BYTE v53[16];
  int v54;
  _BYTE v55[16];
  int v56;
  char v57;
  _QWORD v58[3];

  v3 = (char)a3;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v37);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = WebKit::WebProcess::libWebRTCCodecs(v6);
  v8 = v7;
  v9 = *((_DWORD *)a2 + 18);
  switch(v9)
  {
    case 90:
      v10 = 90;
      break;
    case 270:
      v10 = 270;
      break;
    case 180:
      v10 = 180;
      break;
    default:
      v10 = 0;
      break;
  }
  v11 = WTF::MediaTime::createWithDouble(v7, (double)a2[4] / 1000.0 / 1000.0);
  v13 = v12;
  v14 = (uint64_t *)*((unsigned int *)a2 + 4);
  v15 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v15 = off_1E34E9060;
  v16 = (unsigned __int8 *)v8 + 40;
  v58[0] = 0;
  v58[1] = 0;
  if (__ldaxr((unsigned __int8 *)v8 + 40))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C]((char *)v8 + 40);
LABEL_14:
  if (*((_QWORD *)this + 12))
  {
    v38 = v8;
    v39 = v14;
    v18 = v11;
    v19 = v10;
    v40 = v3;
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = off_1E34E8E78;
    v20[1] = this;
    v48 = v20;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E34E8EA0;
    v21[1] = this;
    v44[0] = (uint64_t)v21;
    WebKit::SharedVideoFrameWriter::writeBuffer((_QWORD *)this + 13, (webrtc::VideoFrame *)a2, (uint64_t *)&v48, v44, (uint64_t)v55);
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    v22 = 0xFFFFFFFFLL;
    if (v57)
    {
      v48 = (_QWORD *)v18;
      v49 = v13;
      v50 = BYTE4(v13);
      v51 = 0;
      v52 = v19;
      v53[0] = 0;
      v54 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v53, (uint64_t)v55);
      v23 = (os_unfair_lock_s *)*((_QWORD *)this + 12);
      v41[0] = (uint64_t *)this;
      v41[1] = (uint64_t *)&v48;
      v41[2] = v39;
      v41[3] = v58;
      v42 = v40;
      IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(&v43, v23, v41);
      v24 = v43;
      v25 = *((_QWORD *)v38 + 12);
      v26 = WTF::fastMalloc((WTF *)0x50);
      v27 = *(_QWORD *)(v25 + 32);
      v25 += 32;
      (*(void (**)(uint64_t))(v27 + 32))(v25);
      v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v28 = &off_1E34E8FD8;
      v28[1] = v15;
      *(_DWORD *)(v26 + 8) = 1;
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0;
      *(_QWORD *)(v26 + 40) = "encodeFrameInternal";
      *(_QWORD *)(v26 + 48) = 0;
      *(_WORD *)(v26 + 56) = 0;
      *(_QWORD *)v26 = off_1E34E9000;
      v29 = (unsigned int *)((char *)v24 + 8);
      *(_QWORD *)(v26 + 64) = 0;
      *(_QWORD *)(v26 + 72) = v28;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
      v44[0] = (uint64_t)v24;
      v44[1] = v26;
      v45 = 0uLL;
      v46 = "encodeFrameInternal";
      v47 = 0;
      WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand(v44);
      v31 = (unsigned int *)v43;
      v43 = 0;
      if (v31)
      {
        v32 = v31 + 2;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v31 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 16))(v31);
        }
      }
      if (v54 != -1)
        ((void (*)(uint64_t **, _BYTE *))off_1E34E8EB8[v54])(v41, v53);
      if (v57 && v56 != -1)
        ((void (*)(_QWORD **, _BYTE *))off_1E34E8EB8[v56])(&v48, v55);
      v15 = 0;
      v22 = 0;
    }
  }
  else
  {
    v22 = 0xFFFFFFFFLL;
  }
  v35 = __ldxr(v16);
  if (v35 != 1)
  {
    __clrex();
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (!v15)
      return v22;
    goto LABEL_33;
  }
  if (__stlxr(0, v16))
    goto LABEL_36;
  if (v15)
LABEL_33:
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v22;
}

uint64_t WebKit::registerEncodeCompleteCallback(WebKit *this, void *a2, void *a3)
{
  WebKit::WebProcess *v5;
  unsigned __int8 *v6;
  int v8;
  WebKit::WebProcess *v10;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v10);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  WebKit::WebProcess::libWebRTCCodecs(v5);
  v6 = (unsigned __int8 *)this + 88;
  if (__ldaxr((unsigned __int8 *)this + 88))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C]((char *)this + 88);
LABEL_7:
  *((_QWORD *)this + 8) = a2;
  v8 = __ldxr(v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, v6))
      return 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebKit *)((char *)this + 88));
  return 0;
}

uint64_t *WebKit::setEncodeRatesCallback(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  double v4;
  WebKit::WebProcess *v5;
  int v6;
  WebKit::LibWebRTCCodecs *v7;
  WebKit::WebProcess *v9;
  double v10;

  v3 = *(_DWORD *)(a2 + 176);
  v4 = *(double *)(a2 + 344);
  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = *(double *)(a2 + 344);
    v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v9);
    v4 = v10;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = (v4 + 0.5);
  v7 = WebKit::WebProcess::libWebRTCCodecs(v5);
  return WebKit::LibWebRTCCodecs::setEncodeRates((uint64_t)v7, a1, v3 / 0x3E8, v6);
}

uint64_t WebKit::LibWebRTCCodecs::createDecoder(uint64_t a1, char a2)
{
  _QWORD *v4;
  WTF::StringImpl *v5;
  uint64_t DecoderInternal;
  WTF::StringImpl *v7;
  _QWORD *v9;
  WTF::StringImpl *v10;

  v10 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E8BF8;
  v9 = v4;
  DecoderInternal = WebKit::LibWebRTCCodecs::createDecoderInternal(a1, a2, (uint64_t)&v10, (uint64_t *)&v9);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return DecoderInternal;
}

uint64_t WebKit::LibWebRTCCodecs::createDecoderInternal(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;

  v7 = WTF::fastMalloc((WTF *)0x70);
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_QWORD *)v7 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_BYTE *)(v7 + 8) = a2;
  WTF::String::isolatedCopy();
  v9 = v17;
  v17 = 0;
  v10 = *(WTF::StringImpl **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v9;
  if (v10)
  {
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
      goto LABEL_5;
    WTF::StringImpl::destroy(v10, v8);
    v10 = v17;
    v17 = 0;
    if (!v10)
      goto LABEL_6;
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v12);
    else
LABEL_5:
      *(_DWORD *)v10 = v11;
  }
LABEL_6:
  v13 = *a4;
  *a4 = 0;
  v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v14 = off_1E34E8C20;
  *((_QWORD *)v14 + 1) = a1;
  *((_QWORD *)v14 + 2) = v7;
  *((_QWORD *)v14 + 3) = v13;
  v17 = v14;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(a1, (uint64_t *)&v17);
  v15 = v17;
  v17 = 0;
  if (v15)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
  return v7;
}

uint64_t WebKit::LibWebRTCCodecs::releaseDecoder(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;

  v3 = *a2;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34E8CE8;
  v4[1] = a1;
  v4[2] = v3;
  v7 = v4;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(a1, (uint64_t *)&v7);
  v5 = (uint64_t)v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return 0;
}

uint64_t WebKit::LibWebRTCCodecs::flushDecoder(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  unsigned __int8 *v10;
  int v12;
  int v13;
  uint64_t *v14;

  v5 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_5:
  v7 = *(_QWORD *)(a2 + 48);
  if (v7)
    v8 = *(_BYTE *)(a2 + 41) == 0;
  else
    v8 = 0;
  if (!v8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
    goto LABEL_19;
  }
  v14 = (uint64_t *)a2;
  IPC::Connection::send<Messages::LibWebRTCCodecsProxy::FlushDecoder>(v7, &v14, 0, 0, 0);
  v10 = (unsigned __int8 *)(a2 + 104);
  if (__ldaxr((unsigned __int8 *)(a2 + 104)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](a2 + 104);
LABEL_14:
  result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>(a2 + 72, a3);
  v12 = __ldxr(v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 104));
LABEL_19:
  v13 = __ldxr(v5);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t IPC::Connection::send<Messages::LibWebRTCCodecsProxy::FlushDecoder>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 111;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::LibWebRTCCodecs::setDecoderFormatDescription(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6)
{
  unsigned __int8 *v9;
  uint64_t result;
  int v12;
  uint64_t *v13[2];
  __int16 v14;
  __int16 v15;
  _QWORD v16[2];

  v16[0] = a3;
  v16[1] = a4;
  v9 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_5:
  result = a2[6];
  if (result)
  {
    v13[0] = a2;
    v13[1] = v16;
    v14 = a5;
    v15 = a6;
    result = IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetDecoderFormatDescription>(result, v13, 0, 0, 0);
  }
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  if (__stlxr(0, v9))
    return WTF::Lock::unlockSlow((WTF::Lock *)v9);
  return result;
}

uint64_t IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetDecoderFormatDescription>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 116;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,unsigned short,unsigned short>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,unsigned short,unsigned short>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::LibWebRTCCodecs::decodeFrame(uint64_t result, uint64_t a2, uint64_t a3, const void *a4, unint64_t this, int a6, int a7)
{
  unsigned __int8 *v13;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF *v28;
  int v29;
  int v30;
  int v31;

  v13 = (unsigned __int8 *)(result + 57);
  if (__ldaxr((unsigned __int8 *)(result + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 57);
LABEL_5:
  if (*(_BYTE *)(a2 + 41))
  {
    *(_BYTE *)(a2 + 41) = 0;
    v15 = 0xFFFFFFFFLL;
    goto LABEL_18;
  }
  if (*(_QWORD *)(a2 + 48))
  {
    WebKit::sendFrameToDecode(a2, a3, a4, this, a6, a7);
LABEL_17:
    v15 = 0;
LABEL_18:
    v26 = __ldxr(v13);
    if (v26 == 1)
    {
      if (!__stlxr(0, v13))
        return v15;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    return v15;
  }
  v28 = 0;
  v29 = 0;
  v27 = a3;
  v30 = this;
  if (!this)
  {
    v16 = 0;
LABEL_13:
    LOWORD(v31) = a6;
    HIWORD(v31) = a7;
    v18 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v18 == *(_DWORD *)(a2 + 64))
    {
      v19 = WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a2 + 56), v18 + 1, (unint64_t)&v27);
      v21 = *(_QWORD *)(a2 + 56) + 32 * *(unsigned int *)(a2 + 68);
      v22 = *(_QWORD *)v19;
      *(_QWORD *)(v21 + 8) = 0;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)v21 = v22;
      v23 = *(_QWORD *)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      *(_QWORD *)(v21 + 8) = v23;
      LODWORD(v23) = *(_DWORD *)(v19 + 16);
      *(_DWORD *)(v19 + 16) = 0;
      *(_DWORD *)(v21 + 16) = v23;
      LODWORD(v23) = *(_DWORD *)(v19 + 20);
      *(_DWORD *)(v19 + 20) = 0;
      *(_DWORD *)(v21 + 20) = v23;
      *(_DWORD *)(v21 + 24) = *(_DWORD *)(v19 + 24);
      ++*(_DWORD *)(a2 + 68);
      v24 = v28;
      if (v28)
      {
        v28 = 0;
        v29 = 0;
        WTF::fastFree(v24, v20);
      }
    }
    else
    {
      v25 = *(_QWORD *)(a2 + 56) + 32 * v18;
      *(_QWORD *)v25 = a3;
      *(_QWORD *)(v25 + 16) = 0;
      v28 = 0;
      *(_QWORD *)(v25 + 8) = v16;
      v29 = 0;
      *(_DWORD *)(v25 + 16) = this;
      v30 = 0;
      *(_DWORD *)(v25 + 20) = this;
      *(_DWORD *)(v25 + 24) = v31;
      ++*(_DWORD *)(a2 + 68);
    }
    goto LABEL_17;
  }
  if (!HIDWORD(this))
  {
    v16 = (WTF *)WTF::fastMalloc((WTF *)this);
    v17 = 0;
    v29 = this;
    v28 = v16;
    do
    {
      *((_BYTE *)v17 + (_QWORD)v16) = *((_BYTE *)v17 + (_QWORD)a4);
      v17 = (WTF *)((char *)v17 + 1);
    }
    while ((WTF *)this != v17);
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

IPC::Encoder *WebKit::sendFrameToDecode(uint64_t a1, uint64_t a2, const void *a3, size_t a4, int a5, int a6)
{
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  _WORD *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  _WORD *v25;
  void *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *result;
  WTF *v34;
  void *v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  void *v39;
  unint64_t v40;
  size_t v41;
  char *v42;
  void *v43;
  size_t v44;
  uint64_t v45;
  size_t v46;
  IPC::Encoder *v47;

  if (!(a6 | a5) || *(_BYTE *)(a1 + 8) != 2)
    goto LABEL_10;
  v10 = a6;
  v11 = a5;
  v45 = *(_QWORD *)(a1 + 48);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 118;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = (void *)(v12 + 16);
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v47 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, (uint64_t *)a1);
  v14 = *(_QWORD *)(v12 + 544);
  v15 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 + 2;
  v17 = *(_QWORD *)(v12 + 552);
  v46 = a4;
  if (v17 < v15 + 2)
  {
    v36 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v37 = v36;
      v36 *= 2;
    }
    while (v37 < v16);
    v44 = v37;
    v38 = (char *)mmap(0, v37, 3, 4098, -1, 0);
    if (v38 == (char *)-1)
      goto LABEL_25;
    v18 = v38;
    memcpy(v38, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
    v39 = *(void **)(v12 + 528);
    if (v39 != v13)
      munmap(v39, *(_QWORD *)(v12 + 552));
    *(_QWORD *)(v12 + 528) = v18;
    *(_QWORD *)(v12 + 552) = v44;
    v14 = *(_QWORD *)(v12 + 544);
  }
  else
  {
    v18 = *(char **)(v12 + 528);
  }
  bzero(&v18[v14], v15 - v14);
  *(_QWORD *)(v12 + 544) = v16;
  v19 = (_WORD *)(*(_QWORD *)(v12 + 528) + v15);
  *(_QWORD *)(v12 + 536) = v19 + 1;
  *v19 = v11;
  v20 = *(_QWORD *)(v12 + 544);
  v21 = (v20 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v21 + 2;
  v23 = *(_QWORD *)(v12 + 552);
  if (v23 < v21 + 2)
  {
    v40 = (2 * v23 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v41 = v40;
      v40 *= 2;
    }
    while (v41 < v22);
    v42 = (char *)mmap(0, v41, 3, 4098, -1, 0);
    if (v42 != (char *)-1)
    {
      v24 = v42;
      memcpy(v42, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
      v43 = *(void **)(v12 + 528);
      if (v43 != v13)
        munmap(v43, *(_QWORD *)(v12 + 552));
      *(_QWORD *)(v12 + 528) = v24;
      *(_QWORD *)(v12 + 552) = v41;
      v20 = *(_QWORD *)(v12 + 544);
      goto LABEL_7;
    }
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x1975A6334);
  }
  v24 = *(char **)(v12 + 528);
LABEL_7:
  bzero(&v24[v20], v21 - v20);
  *(_QWORD *)(v12 + 544) = v22;
  v25 = (_WORD *)(*(_QWORD *)(v12 + 528) + v21);
  *(_QWORD *)(v12 + 536) = v25 + 1;
  *v25 = v10;
  IPC::Connection::sendMessageImpl(v45, (uint64_t *)&v47, 0, 0);
  v27 = v47;
  v47 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v28, v29);
  }
  a4 = v46;
LABEL_10:
  v30 = *(_QWORD *)(a1 + 48);
  v31 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v31 = 109;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 528) = v31 + 16;
  *(_QWORD *)(v31 + 536) = v31 + 16;
  *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v31 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
  v47 = (IPC::Encoder *)v31;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v31, (uint64_t *)a1);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 8uLL, 8) = a2;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v31, a3, a4);
  IPC::Connection::sendMessageImpl(v30, (uint64_t *)&v47, 0, 0);
  result = v47;
  v47 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v32);
    return (IPC::Encoder *)WTF::fastFree(v34, v35);
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::registerDecodedVideoFrameCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t result;
  int v9;

  v5 = (unsigned __int8 *)(a2 + 40);
  if (__ldaxr((unsigned __int8 *)(a2 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a2 + 40);
LABEL_5:
  v7 = *a3;
  *a3 = 0;
  result = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v7;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v9 = __ldxr(v5);
  if (v9 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

unsigned __int8 *WebKit::LibWebRTCCodecs::failedDecoding(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;

  v11 = a2;
  result = (unsigned __int8 *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v11);
  if (result)
  {
    v3 = result;
    result[41] = 1;
    v4 = result + 40;
    if (__ldaxr(result + 40))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
LABEL_6:
      result = (unsigned __int8 *)*((_QWORD *)v3 + 4);
      if (result)
      {
        v10 = 0;
        (*(void (**)(unsigned __int8 *, unsigned __int8 **, _QWORD))(*(_QWORD *)result + 16))(result, &v10, 0);
        result = v10;
        v10 = 0;
        if (result)
        {
          v6 = (unsigned int *)(result + 8);
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, (unsigned int *)result + 2);
            result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
          }
        }
      }
      v9 = __ldxr(v4);
      if (v9 == 1)
      {
        if (!__stlxr(0, v4))
          return result;
      }
      else
      {
        __clrex();
      }
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    MEMORY[0x19AEABB3C](result + 40);
    goto LABEL_6;
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::flushDecoderCompleted(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v13);
  if (result)
  {
    v3 = result;
    v4 = (unsigned __int8 *)(result + 104);
    if (__ldaxr((unsigned __int8 *)(result + 104)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEABB3C](result + 104);
LABEL_6:
    v6 = *(_QWORD *)(v3 + 72);
    if (v6 != *(_QWORD *)(v3 + 80))
    {
      v7 = *(_QWORD *)(v3 + 88);
      v8 = *(_QWORD *)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = 0;
      v9 = *(_QWORD *)(v3 + 88);
      v10 = *(_QWORD *)(v9 + 8 * v6);
      *(_QWORD *)(v9 + 8 * v6) = 0;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v6 = *(_QWORD *)(v3 + 72);
      }
      if (v6 == *(unsigned int *)(v3 + 96) - 1)
        v11 = 0;
      else
        v11 = v6 + 1;
      *(_QWORD *)(v3 + 72) = v11;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    v12 = __ldxr(v4);
    if (v12 == 1)
    {
      if (!__stlxr(0, v4))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

webrtc *WebKit::LibWebRTCCodecs::completedDecoding(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  unsigned __int8 *v9;
  unsigned __int8 **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned __int8 **v14;
  uint64_t v15;
  int v16;
  webrtc *result;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned __int8 **v31;
  unsigned __int8 **v32;

  v30 = a2;
  v9 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_5:
  WebKit::LibWebRTCCodecs::protectedConnection(&v31, *(unsigned __int8 ***)(a1 + 64));
  v11 = v31;
  v31 = 0;
  v32 = v11;
  v12 = *(unsigned int **)(a1 + 72);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = v31;
  }
  else
  {
    v14 = 0;
  }
  v15 = WTF::fastMalloc((WTF *)0x88);
  WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(v15, v11, v12, a5);
  WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v12);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v32);
  if (v14)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v14);
  v16 = __ldxr(v9);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v9))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  result = (webrtc *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v30);
  if (result)
  {
    v18 = (unsigned __int8 *)result + 40;
    do
    {
      while (1)
      {
        v19 = *v18;
        if ((v19 & 1) != 0)
          goto LABEL_37;
        v20 = __ldaxr(v18);
        if (v20 == v19)
          break;
        __clrex();
      }
    }
    while (__stxr(v19 | 1, v18));
    v21 = *((_QWORD *)result + 4);
    if (v21)
    {
      v32 = (unsigned __int8 **)v15;
      (*(void (**)(uint64_t, unsigned __int8 ***, void *))(*(_QWORD *)v21 + 16))(v21, &v32, a3);
      result = (webrtc *)v32;
      v32 = 0;
      if (result)
      {
        v22 = (unsigned int *)((char *)result + 8);
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, (unsigned int *)result + 2);
          result = (webrtc *)(*(uint64_t (**)(webrtc *))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    else
    {
      result = (webrtc *)*((_QWORD *)result + 3);
      if (!result)
        goto LABEL_31;
      result = (webrtc *)webrtc::videoDecoderTaskComplete(result, a3, (a4 / 1000), v15, WebKit::LibWebRTCCodecs::completedDecoding(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long,WebKit::RemoteVideoFrameProxyProperties &&)::$_0::__invoke<void>, (__CVBuffer *(*)(void *))WebKit::LibWebRTCCodecs::completedDecoding(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long,WebKit::RemoteVideoFrameProxyProperties &&)::$_1::__invoke<void>, (void (*)(void *))*(unsigned int *)(v15 + 96), *(_DWORD *)(v15 + 100), v29);
    }
    v15 = 0;
LABEL_31:
    v25 = __ldxr(v18);
    if (v25 == 1)
    {
      if (!__stlxr(0, v18))
      {
LABEL_36:
        if (!v15)
          return result;
        goto LABEL_37;
      }
    }
    else
    {
      __clrex();
    }
    result = (webrtc *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
    goto LABEL_36;
  }
LABEL_37:
  v26 = (unsigned int *)(v15 + 8);
  do
  {
    v27 = __ldaxr(v26);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v26));
  if (!v28)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    return (webrtc *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

unsigned __int8 *WebKit::LibWebRTCCodecs::completedDecodingCV(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t *a5)
{
  unsigned __int8 *result;
  __CVBuffer *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;

  v21 = a2;
  result = (unsigned __int8 *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v21);
  if (result)
  {
    v10 = result;
    v11 = result + 40;
    while (1)
    {
      v12 = *v11;
      if ((v12 & 1) != 0)
        break;
      v13 = __ldaxr(v11);
      if (v13 == v12)
      {
        if (!__stxr(v12 | 1, v11))
        {
          if (*a5)
          {
            if (*((_QWORD *)result + 4))
            {
              WebCore::VideoFrameCV::create();
              v20 = v19;
              (*(void (**)(_QWORD, unsigned int **, void *))(**((_QWORD **)v10 + 4) + 16))(*((_QWORD *)v10 + 4), &v20, a3);
              v14 = v20;
              v20 = 0;
              if (v14)
              {
                v15 = v14 + 2;
                do
                {
                  v16 = __ldaxr(v15);
                  v17 = v16 - 1;
                }
                while (__stlxr(v17, v15));
                if (!v17)
                {
                  atomic_store(1u, v14 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
                }
              }
              result = 0;
            }
            else
            {
              result = (unsigned __int8 *)*((_QWORD *)result + 3);
              if (result)
                result = (unsigned __int8 *)webrtc::videoDecoderTaskComplete((webrtc *)result, a3, (a4 / 1000), *a5, v9);
            }
          }
          v18 = __ldxr(v11);
          if (v18 == 1)
          {
            if (!__stlxr(0, v11))
              return result;
          }
          else
          {
            __clrex();
          }
          return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::LibWebRTCCodecs::createEncoderInternal(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, char a5, char a6, char a7, uint64_t *a8)
{
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  WTF::StringImpl *v34;
  _QWORD v35[3];
  uint64_t v36;
  _QWORD v37[2];

  v15 = WTF::fastMalloc((WTF *)0x88);
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_QWORD *)(v15 + 128) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(v15 + 104));
  *(_DWORD *)(v15 + 128) = 65792;
  *(_QWORD *)v15 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_BYTE *)(v15 + 8) = a2;
  *(_BYTE *)(v15 + 129) = a6;
  *(_BYTE *)(v15 + 130) = a5;
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v15 + 16);
  *(_QWORD *)(v15 + 16) = v34;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v16);
      result = 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *(_BYTE *)(v15 + 131) = a7;
  v18 = a4[2];
  if (v18)
  {
    if (v18 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v19 = WTF::fastMalloc((WTF *)(16 * v18));
  }
  else
  {
    v19 = 0;
  }
  v22 = (_QWORD *)*a4;
  v20 = a4 + 1;
  v21 = v22;
  if (v22 == v20)
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    do
    {
      WTF::String::fromUTF8();
      WTF::String::fromUTF8();
      v24 = v37[0];
      v25 = (_QWORD *)(v19 + 16 * v23);
      *v25 = 0;
      v25[1] = v24;
      v26 = (_QWORD *)v21[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v21[2];
          v28 = *v27 == (_QWORD)v21;
          v21 = v27;
        }
        while (!v28);
      }
      ++v23;
      v21 = v27;
    }
    while (v27 != v20);
  }
  v37[0] = 0;
  v37[1] = 0;
  v29 = *a8;
  *a8 = 0;
  v30 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v30 = off_1E34E8D60;
  *(_QWORD *)(v30 + 8) = a1;
  *(_QWORD *)(v30 + 16) = v15;
  *(_QWORD *)(v30 + 24) = v19;
  v35[0] = 0;
  v35[1] = 0;
  *(_DWORD *)(v30 + 32) = v18;
  *(_DWORD *)(v30 + 36) = v23;
  *(_QWORD *)(v30 + 40) = v29;
  v36 = v30;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(a1, &v36);
  v32 = v36;
  v36 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v35[2] = 0;
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v31);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v33);
  return (WTF::StringImpl *)v15;
}

uint64_t WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, __int128 *a5, uint64_t *a6)
{
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  _BYTE v17[32];
  uint64_t v18;

  v10 = *((_BYTE *)a5 + 40);
  v11 = *((_BYTE *)a5 + 16);
  v12 = *((_BYTE *)a5 + 41);
  v16 = *a5;
  *(_OWORD *)v17 = a5[1];
  *(_OWORD *)&v17[10] = *(__int128 *)((char *)a5 + 26);
  v13 = *a6;
  *a6 = 0;
  v14 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v14 = &off_1E34E8D38;
  *(_OWORD *)(v14 + 8) = v16;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)v17;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)&v17[16];
  *(_QWORD *)(v14 + 56) = v13;
  v18 = v14;
  WebKit::LibWebRTCCodecs::createEncoderInternal(a1, a2, a3, a4, v10, v11, v12, &v18);
  result = v18;
  if (v18)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::releaseEncoder(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;

  v3 = *a2;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34E8E28;
  v4[1] = a1;
  v4[2] = v3;
  v7 = v4;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(a1, (uint64_t *)&v7);
  v5 = (uint64_t)v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return 0;
}

IPC::Encoder *WebKit::LibWebRTCCodecs::initializeEncoderInternal(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, int a5, int a6, int a7, int a8)
{
  int v12;
  unsigned __int8 *v13;
  uint64_t v15;
  IPC::Encoder *result;
  int v17;
  uint64_t *v18;
  __int16 v19;
  __int16 v20;
  int *v21;
  int *v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  int v27;

  v27 = a5;
  v25 = a7;
  v26 = a6;
  v12 = *(unsigned __int8 *)(a2 + 60);
  *(_WORD *)(a2 + 40) = a3;
  *(_WORD *)(a2 + 42) = a4;
  *(_DWORD *)(a2 + 44) = a5;
  *(_DWORD *)(a2 + 48) = a6;
  *(_DWORD *)(a2 + 52) = a7;
  *(_DWORD *)(a2 + 56) = a8;
  if (!v12)
    *(_BYTE *)(a2 + 60) = 1;
  v13 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C](a1 + 40);
LABEL_7:
  v15 = *(_QWORD *)(a2 + 96);
  v18 = (uint64_t *)a2;
  v19 = a3;
  v20 = a4;
  v21 = &v27;
  v22 = &v26;
  v23 = &v25;
  v24 = a8;
  result = IPC::Connection::send<Messages::LibWebRTCCodecsProxy::InitializeEncoder>(v15, &v18);
  v17 = __ldxr(v13);
  if (v17 != 1)
  {
    __clrex();
    return (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
  }
  if (__stlxr(0, v13))
    return (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::LibWebRTCCodecsProxy::InitializeEncoder>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 113;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  LOWORD(v5) = *((_WORD *)a2 + 4);
  *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 2uLL, 2) = v5;
  LOWORD(v5) = *((_WORD *)a2 + 5);
  *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 2uLL, 2) = v5;
  LODWORD(v5) = *(_DWORD *)a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 4uLL, 4) = v5;
  LODWORD(v5) = *(_DWORD *)a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 4uLL, 4) = v5;
  LODWORD(v5) = *(_DWORD *)a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 4uLL, 4) = v5;
  LODWORD(a2) = *((_DWORD *)a2 + 10);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 4uLL, 4) = (_DWORD)a2;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::encodeFrameInternal<WebCore::VideoFrame>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  unsigned __int8 *v19;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  char v39;
  uint64_t *v40;
  uint64_t *v41[4];
  char v42;
  WTF *v43;
  uint64_t v44[2];
  __int128 v45;
  const char *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  char v50;
  char v51;
  __int16 v52;
  _BYTE v53[16];
  int v54;
  _BYTE v55[16];
  int v56;
  char v57;
  _QWORD v58[3];

  v58[0] = a9;
  v58[1] = a10;
  v19 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 40);
LABEL_5:
  if (a2[12])
  {
    v39 = a4;
    v40 = a8;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E34E9088;
    v21[1] = a2;
    v48 = v21;
    v22 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    *v22 = (uint64_t)off_1E34E90B0;
    v22[1] = (uint64_t)a2;
    v41[0] = v22;
    WebKit::SharedVideoFrameWriter::writeBuffer(a2 + 13, a3, (uint64_t *)&v48, v41, (uint64_t)v55);
    (*(void (**)(uint64_t *))(*v22 + 8))(v22);
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    v23 = 0xFFFFFFFFLL;
    if (v57)
    {
      v48 = (_QWORD *)a6;
      v49 = a7;
      v50 = BYTE4(a7);
      v51 = 0;
      v52 = a5;
      v53[0] = 0;
      v54 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v53, (uint64_t)v55);
      v24 = (os_unfair_lock_s *)a2[12];
      v41[0] = a2;
      v41[1] = (uint64_t *)&v48;
      v41[2] = v40;
      v41[3] = v58;
      v42 = v39;
      IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(&v43, v24, v41);
      v25 = v43;
      v26 = *(_QWORD *)(a1 + 96);
      v27 = *a11;
      *a11 = 0;
      v28 = WTF::fastMalloc((WTF *)0x50);
      v29 = *(_QWORD *)(v26 + 32);
      v26 += 32;
      (*(void (**)(uint64_t))(v29 + 32))(v26);
      v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v30 = &off_1E34E90D8;
      v30[1] = v27;
      *(_DWORD *)(v28 + 8) = 1;
      *(_QWORD *)(v28 + 16) = v26;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0;
      *(_QWORD *)(v28 + 40) = "encodeFrameInternal";
      *(_QWORD *)(v28 + 48) = 0;
      *(_WORD *)(v28 + 56) = 0;
      *(_QWORD *)v28 = off_1E34E9000;
      v31 = (unsigned int *)((char *)v25 + 8);
      *(_QWORD *)(v28 + 64) = 0;
      *(_QWORD *)(v28 + 72) = v30;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      v44[0] = (uint64_t)v25;
      v44[1] = v28;
      v45 = 0uLL;
      v46 = "encodeFrameInternal";
      v47 = 0;
      WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand(v44);
      v33 = (unsigned int *)v43;
      v43 = 0;
      if (v33)
      {
        v34 = v33 + 2;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v33 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 16))(v33);
        }
      }
      if (v54 != -1)
        ((void (*)(uint64_t **, _BYTE *))off_1E34E8EB8[v54])(v41, v53);
      if (v57 && v56 != -1)
        ((void (*)(_QWORD **, _BYTE *))off_1E34E8EB8[v56])(&v48, v55);
      v23 = 0;
    }
  }
  else
  {
    v23 = 0xFFFFFFFFLL;
  }
  v37 = __ldxr(v19);
  if (v37 == 1)
  {
    if (!__stlxr(0, v19))
      return v23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  return v23;
}

unsigned __int8 **WebKit::LibWebRTCCodecs::flushEncoder(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 **result;
  int v18;
  __n128 v19;
  const char *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  __n128 v24[3];

  v6 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 40);
LABEL_5:
  v8 = (unsigned __int8 **)a2[12];
  if (!v8)
  {
    result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
    goto LABEL_21;
  }
  v9 = *v8;
  if (__ldaxr(*v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEABB3C](v9);
LABEL_10:
  ++*((_QWORD *)v9 + 1);
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_15:
  v22 = a2;
  IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>((os_unfair_lock_s *)v8, &v22, 0, 0, (uint64_t *)&v23);
  v12 = *(_QWORD *)(a1 + 96) + 32;
  v19 = 0uLL;
  v20 = "flushEncoder";
  v21 = 0;
  WTF::NativePromise<void,IPC::Error,0u>::whenSettled<WTF::Function<void ()(void)>>(v23, v12, a3, &v19, v24);
  WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v24);
  v13 = (unsigned int *)v23;
  v23 = 0;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
    }
  }
  result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v8);
LABEL_21:
  v18 = __ldxr(v6);
  if (v18 != 1)
  {
    __clrex();
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

uint64_t *IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>@<X0>(os_unfair_lock_s *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v21;
  uint64_t v22[4];
  uint64_t v23[5];

  v22[0] = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)"sendWithPromisedReply";
  v22[3] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v23, 0, (WTF::Logger::LogSiteIdentifier *)v22);
  v10 = v23[0];
  if (v23[0])
  {
    v11 = (unsigned int *)(v23[0] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *a5 = v10;
  IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(v23, v22);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 112;
  *(_QWORD *)(v13 + 8) = a3;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v21 = (IPC::Encoder *)v13;
  v14 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = v14;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a1, &v21, v22, a4, 0);
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v15);
    WTF::fastFree(v17, v18);
  }
  v19 = v22[0];
  v22[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(v23);
}

__n128 WTF::NativePromise<void,IPC::Error,0u>::whenSettled<WTF::Function<void ()(void)>>@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  unsigned int *v13;
  unsigned int v14;
  __n128 result;
  __n128 v16;

  v9 = *a3;
  *a3 = 0;
  v10 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34E8998;
  v11[1] = v9;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E34E83F0;
  *(_QWORD *)(v10 + 16) = a2;
  v12 = *a4;
  *(__n128 *)(v10 + 40) = a4[1];
  *(__n128 *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 56) = 0;
  *(_QWORD *)v10 = off_1E34E83C0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = v11;
  v13 = (unsigned int *)(a1 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  a5->n128_u64[0] = a1;
  a5->n128_u64[1] = v10;
  result = *a4;
  v16 = a4[1];
  a5[1] = *a4;
  a5[2] = v16;
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::registerEncodedVideoFrameCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t result;
  int v9;

  v5 = (unsigned __int8 *)(a2 + 88);
  if (__ldaxr((unsigned __int8 *)(a2 + 88)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a2 + 88);
LABEL_5:
  v7 = *a3;
  *a3 = 0;
  result = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v7;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v9 = __ldxr(v5);
  if (v9 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::registerEncoderDescriptionCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t result;
  int v9;

  v5 = (unsigned __int8 *)(a2 + 88);
  if (__ldaxr((unsigned __int8 *)(a2 + 88)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a2 + 88);
LABEL_5:
  v7 = *a3;
  *a3 = 0;
  result = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v7;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v9 = __ldxr(v5);
  if (v9 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t *WebKit::LibWebRTCCodecs::setEncodeRates(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  int v16;
  int v17;

  v8 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 40);
LABEL_5:
  v10 = *(_QWORD *)(a2 + 96);
  if (v10)
  {
    *(_BYTE *)(a2 + 128) = 1;
    v15 = (uint64_t *)a2;
    v16 = a3;
    v17 = a4;
    result = (uint64_t *)IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetEncodeRates>(v10, &v15, 0, 0, 0);
  }
  else
  {
    v12 = *(_QWORD *)a2;
    v13 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v13 = off_1E34E9150;
    *(_QWORD *)(v13 + 8) = a1;
    *(_QWORD *)(v13 + 16) = a2 + 128;
    *(_QWORD *)(v13 + 24) = v12;
    *(_DWORD *)(v13 + 32) = a3;
    *(_DWORD *)(v13 + 36) = a4;
    v15 = (uint64_t *)v13;
    WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(a1, (uint64_t *)&v15);
    result = v15;
    v15 = 0;
    if (result)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  v14 = __ldxr(v8);
  if (v14 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  if (__stlxr(0, v8))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return result;
}

uint64_t IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetEncodeRates>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 117;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,unsigned int,unsigned int>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::LibWebRTCCodecs::completedEncoding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 48), &v19);
  if (result)
  {
    v9 = (unsigned __int8 *)(result + 88);
    while (1)
    {
      v10 = *v9;
      if ((v10 & 1) != 0)
        break;
      v11 = __ldaxr(v9);
      if (v11 == v10)
      {
        if (!__stxr(v10 | 1, v9))
        {
          v12 = *(_QWORD *)(result + 72);
          if (v12)
          {
            v13 = *(_DWORD *)(a5 + 60);
            v14 = v13 & 0xFFFFFF00;
            v15 = (unint64_t)(v13 & 0x80000000) >> 31;
            v16 = v13 < 0;
            if (v13 < 0)
              v17 = 0;
            else
              v17 = *(_DWORD *)(a5 + 60);
            if (v16)
              v14 = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, BOOL, _QWORD, _QWORD, _QWORD, unint64_t))(*(_QWORD *)v12 + 16))(*(_QWORD *)(result + 72), a3, a4, *(_DWORD *)(a5 + 48) == 3, *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (v14 & 0xFFFFFFFEFFFFFFFFLL | ((v15 & 1) << 32) | v17) ^ 0x100000000);
          }
          else if (*(_QWORD *)(result + 64))
          {
            result = webrtc::encoderVideoTaskComplete();
          }
          v18 = __ldxr(v9);
          if (v18 == 1)
          {
            if (!__stlxr(0, v9))
              return result;
          }
          else
          {
            __clrex();
          }
          return WTF::Lock::unlockSlow((WTF::Lock *)v9);
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  return result;
}

unsigned __int8 *WebKit::LibWebRTCCodecs::setEncodingConfiguration(uint64_t a1, uint64_t a2, char *a3, WTF *a4, uint64_t a5, char a6)
{
  unsigned __int8 *result;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  char v16;
  void *v17;
  WTF::StringImpl *v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  WTF *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  WTF *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v42 = a2;
  result = (unsigned __int8 *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 48), &v42);
  if (result)
  {
    v11 = result;
    v12 = result + 88;
    while (1)
    {
      v13 = *v12;
      if ((v13 & 1) != 0)
        break;
      v14 = __ldaxr(v12);
      if (v14 == v13)
      {
        if (!__stxr(v13 | 1, v12))
        {
          if (*((_QWORD *)result + 10))
          {
            LOBYTE(v39) = 0;
            v41 = 0;
            if (a4)
            {
              v26 = (int)a4;
              if ((unint64_t)a4 >> 32)
              {
                __break(0xC471u);
                return result;
              }
              v15 = (WTF::StringImpl *)WTF::fastMalloc(a4);
              v25 = (int)a4;
              v24 = v15;
              do
              {
                v16 = *a3++;
                *(_BYTE *)v15 = v16;
                v15 = (WTF::StringImpl *)((char *)v15 + 1);
                a4 = (WTF *)((char *)a4 - 1);
              }
              while (a4);
              std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v39, (uint64_t)&v24);
              v18 = v24;
              if (v24)
              {
                v24 = 0;
                v25 = 0;
                WTF::fastFree(v18, v17);
              }
              v19 = v41 == 0;
            }
            else
            {
              v19 = 1;
            }
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            LOBYTE(v34) = 0;
            v36 = 0;
            v24 = 0;
            LOBYTE(v25) = 0;
            if (!v19)
            {
              v34 = v39;
              v20 = v40;
              v39 = 0;
              v40 = 0;
              v35 = v20;
              v36 = 1;
            }
            v37 = a5;
            v38 = a6;
            (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v11 + 10) + 16))(*((_QWORD *)v11 + 10), &v24);
            if (v36)
            {
              v22 = v34;
              if (v34)
              {
                v34 = 0;
                LODWORD(v35) = 0;
                WTF::fastFree(v22, v21);
              }
            }
            result = (unsigned __int8 *)v24;
            v24 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
              else
                *(_DWORD *)result -= 2;
            }
            if (v41)
            {
              result = (unsigned __int8 *)v39;
              if (v39)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                result = (unsigned __int8 *)WTF::fastFree((WTF *)result, v21);
              }
            }
          }
          v23 = __ldxr(v12);
          if (v23 == 1)
          {
            if (!__stlxr(0, v12))
              return result;
          }
          else
          {
            __clrex();
          }
          return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  return result;
}

void WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::LibWebRTCCodecs *this, WebKit::GPUProcessConnection *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 **v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;

  v3 = (unsigned __int8 *)this + 57;
  if (__ldaxr((unsigned __int8 *)this + 57))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 57, a2);
LABEL_5:
  v5 = (unsigned __int8 **)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)v5, 0x13u, 0);
  if (v5)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v5);
  v6 = atomic_load((unsigned __int8 *)this + 56);
  if ((v6 & 1) != 0)
  {
    WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionOnMainThreadWithLock(this);
    v7 = *((_QWORD *)this + 12);
    v8 = (unsigned __int8 **)*((_QWORD *)this + 8);
    if (!v8)
      goto LABEL_18;
    v9 = *v8;
    if (__ldaxr(*v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEABB3C](v9);
LABEL_13:
    ++*((_QWORD *)v9 + 1);
    v11 = __ldxr(v9);
    if (v11 == 1)
    {
      if (!__stlxr(0, v9))
      {
LABEL_18:
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v12 = &off_1E34E9178;
        v12[1] = this;
        v12[2] = v8;
        v15 = v12;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v7 + 32))(v7, &v15);
        v13 = v15;
        v15 = 0;
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_18;
  }
LABEL_20:
  v14 = __ldxr(v3);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v3))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
}

void `non-virtual thunk to'WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::LibWebRTCCodecs *this, WebKit::GPUProcessConnection *a2)
{
  WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose((WebKit::LibWebRTCCodecs *)((char *)this - 24), a2);
}

char *WebKit::LibWebRTCCodecs::setLoggingLevel(uint64_t a1, __int16 a2)
{
  unsigned __int8 *v3;
  char *result;
  int v6;
  char *v7;
  char v8;

  v8 = a2;
  *(_WORD *)(a1 + 131) = a2 | 0x100;
  v3 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_5:
  result = *(char **)(a1 + 64);
  if (result)
  {
    v7 = &v8;
    result = IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetRTCLoggingLevel>((uint64_t)result, &v7, 0, 0, 0);
  }
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
    return (char *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (char *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::setDecoderConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  int v12;
  int v13;

  v3 = *a2;
  *a2 = 0;
  v4 = *(unsigned __int8 ***)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v4)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v4);
  v5 = *(_QWORD *)(a1 + 56);
  v11 = v5;
  v6 = *(unsigned int *)(a1 + 68);
  v12 = *(_DWORD *)(a1 + 64);
  v13 = v6;
  v10[0] = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10[1] = 0;
  *(_QWORD *)(a1 + 64) = 0;
  WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, a2);
  if ((_DWORD)v6)
  {
    v8 = v5 + 32 * v6;
    do
    {
      WebKit::sendFrameToDecode(a1, *(_QWORD *)v5, *(const void **)(v5 + 8), *(unsigned int *)(v5 + 20), *(unsigned __int16 *)(v5 + 24), *(unsigned __int16 *)(v5 + 26));
      v5 += 32;
    }
    while (v5 != v8);
  }
  return WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v7);
}

void WebKit::VideoTrackPrivateRemote::~VideoTrackPrivateRemote(WebKit::VideoTrackPrivateRemote *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::VideoTrackPrivateRemote::~VideoTrackPrivateRemote(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = off_1E34E8470;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned __int8 *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  *(_QWORD *)this = off_1E34E8838;
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

const char *WebCore::VideoTrackPrivate::logClassName(WebCore::VideoTrackPrivate *this)
{
  return "VideoTrackPrivate";
}

uint64_t WebKit::VideoTrackPrivateRemote::id(WebKit::VideoTrackPrivateRemote *this)
{
  return *((_QWORD *)this + 21);
}

WTF::AtomString *WebKit::VideoTrackPrivateRemote::label@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 16);
}

WTF::AtomString *WebKit::VideoTrackPrivateRemote::language@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 17);
}

uint64_t WebKit::VideoTrackPrivateRemote::trackIndex(WebKit::VideoTrackPrivateRemote *this)
{
  return *((unsigned int *)this + 36);
}

uint64_t WebKit::VideoTrackPrivateRemote::startTimeVariance(WebKit::VideoTrackPrivateRemote *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t WebCore::VideoTrackPrivate::type(WebCore::VideoTrackPrivate *this)
{
  return 0;
}

uint64_t WebCore::VideoTrackPrivate::selected(WebCore::VideoTrackPrivate *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t WebKit::VideoTrackPrivateRemote::kind(WebKit::VideoTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t WebCore::AudioSourceProvider::isHandlingAVPlayer(WebCore::AudioSourceProvider *this)
{
  return 0;
}

uint64_t WebKit::RemoteAudioSourceProvider::loggerHelper(WebKit::RemoteAudioSourceProvider *this)
{
  return (uint64_t)this + 240;
}

uint64_t WebKit::RemoteAudioSourceProvider::logger(WebKit::RemoteAudioSourceProvider *this)
{
  return *((_QWORD *)this + 34);
}

uint64_t WebKit::RemoteAudioSourceProvider::logIdentifier(WebKit::RemoteAudioSourceProvider *this)
{
  return *((_QWORD *)this + 35);
}

const char *WebKit::RemoteAudioSourceProvider::logClassName(WebKit::RemoteAudioSourceProvider *this)
{
  return "RemoteAudioSourceProvider";
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioSourceProvider::logger(WebKit::RemoteAudioSourceProvider *this)
{
  return *((_QWORD *)this + 4);
}

const char *`non-virtual thunk to'WebKit::RemoteAudioSourceProvider::logClassName(WebKit::RemoteAudioSourceProvider *this)
{
  return "RemoteAudioSourceProvider";
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioSourceProvider::logIdentifier(WebKit::RemoteAudioSourceProvider *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t WebKit::RemoteImageDecoderAVF::bytesDecodedToDetermineProperties(WebKit::RemoteImageDecoderAVF *this)
{
  return 0;
}

BOOL WebCore::ImageDecoder::isSizeAvailable(WebCore::ImageDecoder *this)
{
  return (*(int (**)(WebCore::ImageDecoder *))(*(_QWORD *)this + 24))(this) > 2;
}

uint64_t WebCore::ImageDecoder::primaryFrameIndex(WebCore::ImageDecoder *this)
{
  return 0;
}

void WebKit::RemoteImageDecoderAVF::accessibilityDescription(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::RemoteImageDecoderAVF::hotSpot(WebKit::RemoteImageDecoderAVF *this)
{
  return 0;
}

uint64_t WebCore::ImageDecoder::frameOrientationAtIndex(WebCore::ImageDecoder *this)
{
  return 1;
}

uint64_t WebCore::ImageDecoder::frameDensityCorrectedSizeAtIndex(WebCore::ImageDecoder *this)
{
  return 0;
}

uint64_t WebKit::RemoteImageDecoderAVF::isAllDataReceived(WebKit::RemoteImageDecoderAVF *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t WebKit::RemoteImageDecoderAVFManager::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebKit::RemoteImageDecoderAVFManager::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteImageDecoderAVFManager,(WTF::DestructionThread)0>(this[3], a2);
}

uint64_t WebKit::RemoteImageDecoderAVFManager::controlBlock(WebKit::RemoteImageDecoderAVFManager *this)
{
  return *((_QWORD *)this + 3);
}

unsigned __int8 **WebKit::LibWebRTCCodecs::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
}

unsigned __int8 *WebKit::LibWebRTCCodecs::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(this[2], a2);
}

uint64_t WebKit::LibWebRTCCodecs::controlBlock(WebKit::LibWebRTCCodecs *this)
{
  return *((_QWORD *)this + 2);
}

unsigned __int8 **`non-virtual thunk to'WebKit::LibWebRTCCodecs::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this - 1);
}

unsigned __int8 *`non-virtual thunk to'WebKit::LibWebRTCCodecs::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(this - 1), a2);
}

uint64_t `non-virtual thunk to'WebKit::LibWebRTCCodecs::controlBlock(WebKit::LibWebRTCCodecs *this)
{
  return *((_QWORD *)this - 1);
}

void WebCore::VideoTrackPrivate::~VideoTrackPrivate(WebCore::VideoTrackPrivate *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E34E8838;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34E8838;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::VideoTrackPrivate::kind(WebCore::VideoTrackPrivate *this)
{
  return 6;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate11setSelectedEbEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callES8_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 2)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(unsigned __int8 *)(a1 + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate16setConfigurationEONS2_31PlatformVideoTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E8908;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate16setConfigurationEONS2_31PlatformVideoTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8908;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate16setConfigurationEONS2_31PlatformVideoTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callESA_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1 + 8);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebMediaStrategy::createNowPlayingManager(void)const::NowPlayingInfoForGPUManager::~NowPlayingInfoForGPUManager(WebCore::NowPlayingManager *a1)
{
  WTF *v1;
  void *v2;

  WebCore::NowPlayingManager::~NowPlayingManager(a1);
  return WTF::fastFree(v1, v2);
}

WebKit::WebProcess *WebKit::WebMediaStrategy::createNowPlayingManager(void)const::NowPlayingInfoForGPUManager::clearNowPlayingInfoPrivate()
{
  WebKit::WebProcess *result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  void *v6;
  WebKit::WebProcess *v7;
  IPC::Encoder *v8;

  {
    result = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = WebKit::WebProcess::WebProcess(v7);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
  }
  v1 = *((_QWORD *)result + 42);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v3 = 33;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 528) = v3 + 16;
    *(_QWORD *)(v3 + 536) = v3 + 16;
    *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v3 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
    v8 = (IPC::Encoder *)v3;
    IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v8, 0, 0);
    result = v8;
    v8 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v4);
      return (WebKit::WebProcess *)WTF::fastFree(v5, v6);
    }
  }
  return result;
}

unsigned __int8 ***WebKit::WebMediaStrategy::createNowPlayingManager(void)const::NowPlayingInfoForGPUManager::setNowPlayingInfoPrivate(uint64_t a1, uint64_t *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  WebKit::WebProcess *v12;
  unsigned __int8 **v13;
  IPC::Encoder *v14;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::ensureGPUProcessConnection(v3);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, *(unsigned __int8 ***)(v4 + 24));
  v5 = v13;
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 51;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::encode((IPC::Encoder *)v6, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v14, 0, 0);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
}

uint64_t std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](WTF *this)
{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;
  WebCore::CARingBuffer *v5;
  uint64_t v6;

  v4 = (WTF *)*((_QWORD *)this + 13);
  v2 = (_QWORD *)((char *)this + 104);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((int)v2, v3);
  v5 = (WebCore::CARingBuffer *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 96, v5);
  if (*((_BYTE *)this + 88))
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WTF *)((char *)this + 8));
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  return WTF::fastFree(this, v5);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteImageDecoderAVFProxy7SetDataEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  if (*(_BYTE *)(a2 + 48))
  {
    v3 = *(WTF **)(a2 + 32);
    if (v3)
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      WTF::fastFree(v3, (void *)a2);
    }
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteImageDecoderAVFProxy13CreateDecoderEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

WebKit::LibWebRTCCodecs::Decoder *std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100](WebKit::LibWebRTCCodecs::Decoder **a1, WebKit::LibWebRTCCodecs::Decoder *a2)
{
  WebKit::LibWebRTCCodecs::Decoder *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::LibWebRTCCodecs::Decoder::~Decoder(result, a2);
    return (WebKit::LibWebRTCCodecs::Decoder *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::LibWebRTCCodecs::Decoder::~Decoder(WebKit::LibWebRTCCodecs::Decoder *this, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;

  v3 = *((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 10);
  v5 = (WTF *)*((_QWORD *)this + 11);
  if (v3 > v4)
  {
    v19 = v5;
    if (v4)
    {
      v17 = 8 * v4;
      do
      {
        v18 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v19 = (WTF *)((char *)v19 + 8);
        v17 -= 8;
      }
      while (v17);
      v19 = (WTF *)*((_QWORD *)this + 11);
      v3 = *((_QWORD *)this + 9);
    }
    v13 = *((unsigned int *)this + 24);
    if (v3 != v13)
    {
      v14 = (uint64_t *)((char *)v19 + 8 * v3);
      v15 = 8 * v13 - 8 * v3;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
LABEL_17:
    v5 = (WTF *)*((_QWORD *)this + 11);
    if (!v5)
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v3 != v4)
  {
    v10 = (uint64_t *)((char *)v5 + 8 * v3);
    v11 = 8 * v4 - 8 * v3;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
    goto LABEL_17;
  }
  if (!v5)
    goto LABEL_5;
LABEL_18:
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  WTF::fastFree(v5, a2);
LABEL_5:
  WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  v7 = (unsigned __int8 **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v7);
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
}

unsigned __int8 ***WebKit::LibWebRTCCodecs::protectedConnection(unsigned __int8 ***this, unsigned __int8 **a2)
{
  unsigned __int8 ***v3;
  unsigned __int8 *v4;
  int v6;

  v3 = this;
  if (!a2)
    goto LABEL_11;
  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 ***)MEMORY[0x19AEABB3C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, v4))
    goto LABEL_5;
LABEL_6:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 ***)WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *v3 = a2;
  return this;
}

unsigned int *WebKit::LibWebRTCCodecs::completedDecoding(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long,WebKit::RemoteVideoFrameProxyProperties &&)::$_1::__invoke<void>(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = result + 2;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, result + 2);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t std::default_delete<WebKit::LibWebRTCCodecs::Encoder>::operator()[abi:sn180100](IPC::Semaphore **a1)
{
  IPC::Semaphore **v2;
  unsigned int *v3;
  void *v4;
  unsigned __int8 **v5;
  IPC::Semaphore *v6;
  IPC::Semaphore *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v2 = a1 + 13;
  v3 = (unsigned int *)a1[14];
  a1[14] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100](v2, 0);
  v5 = (unsigned __int8 **)a1[12];
  a1[12] = 0;
  if (v5)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v5);
  v6 = a1[10];
  a1[10] = 0;
  if (v6)
    (*(void (**)(IPC::Semaphore *))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[9];
  a1[9] = 0;
  if (v7)
    (*(void (**)(IPC::Semaphore *))(*(_QWORD *)v7 + 8))(v7);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), v4);
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  return WTF::fastFree((WTF *)a1, v8);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN3IPC5ErrorELj0EE11whenSettledINS_8FunctionIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSN_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E8998;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN3IPC5ErrorELj0EE11whenSettledINS_8FunctionIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSN_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8998;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN3IPC5ErrorELj0EE11whenSettledINS_8FunctionIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSN_EE4callESN_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E89E8;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E89E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 32))(a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E8A10;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8A10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 40))(a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebMediaStrategy::createAudioDestination(WebCore::AudioIOCallback &,WTF::String const&,unsigned int,unsigned int,float)::$_0,WTF::Ref<WebCore::AudioDestination,WTF::RawPtrTraits<WebCore::AudioDestination>,WTF::DefaultRefDerefTraits<WebCore::AudioDestination>>,WebCore::AudioIOCallback &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34E8A38;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebMediaStrategy::createAudioDestination(WebCore::AudioIOCallback &,WTF::String const&,unsigned int,unsigned int,float)::$_0,WTF::Ref<WebCore::AudioDestination,WTF::RawPtrTraits<WebCore::AudioDestination>,WTF::DefaultRefDerefTraits<WebCore::AudioDestination>>,WebCore::AudioIOCallback &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8A38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebMediaStrategy::createAudioDestination(WebCore::AudioIOCallback &,WTF::String const&,unsigned int,unsigned int,float)::$_0,WTF::Ref<WebCore::AudioDestination,WTF::RawPtrTraits<WebCore::AudioDestination>,WTF::DefaultRefDerefTraits<WebCore::AudioDestination>>,WebCore::AudioIOCallback &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _DWORD **v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v5 = (_DWORD **)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x100);
  result = WebKit::RemoteAudioDestinationProxy::RemoteAudioDestinationProxy(v7, a2, v5, v6);
  *a3 = result;
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteMediaPlayerProxy::CreateAudioSourceProvider>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1128;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::addProvider(WTF::Ref<WebKit::RemoteAudioSourceProvider,WTF::RawPtrTraits<WebKit::RemoteAudioSourceProvider>,WTF::DefaultRefDerefTraits<WebKit::RemoteAudioSourceProvider>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34E8A60;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::addProvider(WTF::Ref<WebKit::RemoteAudioSourceProvider,WTF::RawPtrTraits<WebKit::RemoteAudioSourceProvider>,WTF::DefaultRefDerefTraits<WebKit::RemoteAudioSourceProvider>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E8A60;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::addProvider(WTF::Ref<WebKit::RemoteAudioSourceProvider,WTF::RawPtrTraits<WebKit::RemoteAudioSourceProvider>,WTF::DefaultRefDerefTraits<WebKit::RemoteAudioSourceProvider>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  WTF *result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 248);
  v4 = WTF::fastMalloc((WTF *)0x70);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)v4 = v5;
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  v8 = *(_QWORD *)(v2 + 40);
  v7 = (uint64_t *)(v2 + 40);
  v6 = v8;
  if (v8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v7),
        (v6 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (_QWORD *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v3)
        return (WTF *)std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100]((WTF *)v4);
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v9;
      v14 = (_QWORD *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v7 - 16);
      v14 = v16;
    }
  }
  result = (WTF *)v14[1];
  *v14 = v3;
  v14[1] = v4;
  if (result)
    result = (WTF *)std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](result);
  v19 = *v7;
  if (*v7)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v7;
  if (*v7)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 <= 0x400)
  {
    if (3 * v24 > 4 * v23)
      return result;
    return (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v7);
  }
  if (v24 <= 2 * v23)
    return (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v7);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (WTF *)v23[1];
          v23[1] = 0;
          if (v24)
            std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](v24);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(WTF **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](v13);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(WTF **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::removeProvider(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34E8A88;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::removeProvider(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34E8A88;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::removeProvider(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  WTF *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v1 + 40);
  v2 = (uint64_t *)(v1 + 40);
  v3 = v4;
  result = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, *(_QWORD *)(a1 + 24));
  if (v4)
  {
    v6 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
  {
    v7 = (WTF *)result[1];
    *result = -1;
    result[1] = 0;
    if (v7)
      result = (_QWORD *)std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](v7);
    ++*(_DWORD *)(*v2 - 16);
    v8 = *v2;
    if (*v2)
      v9 = *(_DWORD *)(v8 - 12) - 1;
    else
      v9 = -1;
    *(_DWORD *)(v8 - 12) = v9;
    v10 = *v2;
    if (*v2)
    {
      v11 = 6 * *(_DWORD *)(v10 - 12);
      v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
        return (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2, v12 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  int v7;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v4 = v2 & (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) ^ (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) >> 16));
  v5 = *(_DWORD *)(a1 + 16 * v4);
  if (v5 == a2)
    return 1;
  v7 = 1;
  do
  {
    v6 = v5 != 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      break;
    LODWORD(v4) = (v4 + v7) & v2;
    v5 = *(_DWORD *)(a1 + 16 * v4);
    ++v7;
  }
  while (v5 != a2);
  return v6;
}

_QWORD *WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(_QWORD *result, uint64_t a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  const void *v9;

  if (!a2)
  {
LABEL_8:
    *result = 0;
    return result;
  }
  v3 = *(_DWORD *)(a2 - 8);
  v4 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = v3 & (v5 ^ HIWORD(v5));
  v7 = *(_DWORD *)(a2 + 16 * v6);
  if (v7 != a3)
  {
    v8 = 1;
    while (v7 != 0x7FFFFFFF)
    {
      v6 = ((_DWORD)v6 + v8) & v3;
      v7 = *(_DWORD *)(a2 + 16 * v6);
      ++v8;
      if (v7 == a3)
        goto LABEL_6;
    }
    goto LABEL_8;
  }
LABEL_6:
  v9 = *(const void **)(a2 + 16 * v6 + 8);
  *result = v9;
  if (v9)
    return CFRetain(v9);
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVF::createFrameImageAtIndex(unsigned long,WebCore::SubsamplingLevel,WebCore::DecodingOptions const&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 *result;
  uint64_t v4;
  uint64_t v5;
  IPC::Encoder *v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  IPC::Decoder *v15;
  IPC::Decoder *v16;
  IPC::Decoder *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  const void *v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  CFTypeRef v39;
  const void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  WTF *v47;
  unint64_t v48;
  size_t v49;
  char *v50;
  IPC::Decoder *v51;
  _BYTE v52[64];
  char v53;
  int v54;
  uint64_t v55;
  WTF *v56[8];
  char v57;
  char v58;
  CFTypeRef cf;
  int v60;
  IPC::Encoder *v61;
  uint64_t v62;
  IPC::Decoder *v63;
  _BYTE v64[56];
  char v65;
  char v66;

  v2 = *(_QWORD **)(a1 + 8);
  result = (unsigned __int8 *)v2[3];
  if (!result)
    return result;
  result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, v2[4], &v55);
  if (!v55)
    return result;
  v4 = *(_QWORD *)(v55 + 24);
  v5 = **(_QWORD **)(a1 + 16);
  v62 = 0;
  IPC::Connection::createSyncMessageEncoder(3621, 0, &v62, (uint64_t *)&v61);
  v6 = v61;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(v61, v2 + 6);
  v7 = *((_QWORD *)v6 + 68);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v10 = *((_QWORD *)v6 + 69);
  if (v10 < v8 + 8)
  {
    v48 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v49 = v48;
      v48 *= 2;
    }
    while (v49 < v9);
    result = (unsigned __int8 *)mmap(0, v49, 3, 4098, -1, 0);
    if (result == (unsigned __int8 *)-1)
      goto LABEL_69;
    v11 = result;
    memcpy(result, *((const void **)v6 + 66), *((_QWORD *)v6 + 68));
    v50 = (char *)*((_QWORD *)v6 + 66);
    if (v50 != (char *)v6 + 16)
      munmap(v50, *((_QWORD *)v6 + 69));
    *((_QWORD *)v6 + 66) = v11;
    *((_QWORD *)v6 + 69) = v49;
    v7 = *((_QWORD *)v6 + 68);
  }
  else
  {
    v11 = (unsigned __int8 *)*((_QWORD *)v6 + 66);
  }
  bzero(&v11[v7], v8 - v7);
  *((_QWORD *)v6 + 68) = v9;
  v12 = (_QWORD *)(*((_QWORD *)v6 + 66) + v8);
  *((_QWORD *)v6 + 67) = v12 + 1;
  *v12 = v5;
  IPC::Connection::sendSyncMessage(v4, v62, (uint64_t *)&v61, 0, (uint64_t)&cf, INFINITY);
  if (!v60)
  {
    LOBYTE(v56[0]) = 0;
    v58 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>((IPC::Decoder *)cf, (WTF::MachSendRight *)v56);
    if (v58)
    {
      if (v60)
        goto LABEL_68;
      v15 = (IPC::Decoder *)cf;
      cf = 0;
      v63 = v15;
      v64[0] = 0;
      v66 = 0;
      if (v57)
      {
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v64, (uint64_t)v56);
        v66 = 1;
        v16 = v63;
        v63 = 0;
        v51 = v16;
        v52[0] = 0;
        v53 = 0;
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v52, (uint64_t)v64);
        v53 = 1;
      }
      else
      {
        v63 = 0;
        v51 = v15;
        v52[0] = 0;
        v53 = 0;
      }
      v54 = 0;
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v64);
      v17 = v63;
      v63 = 0;
      if (v17)
      {
        IPC::Decoder::~Decoder(v17);
        WTF::fastFree(v18, v19);
      }
      if (v58)
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v56);
    }
    else
    {
      LOBYTE(v51) = 13;
      v54 = 1;
    }
    v13 = v60;
    if (v60 == -1)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (v60 != 1)
  {
LABEL_68:
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_69:
    __break(0xC471u);
    return result;
  }
  LOBYTE(v51) = (_BYTE)cf;
  v13 = 1;
  v54 = 1;
LABEL_19:
  ((void (*)(IPC::Decoder **, CFTypeRef *))off_1E34E8AC8[v13])(&v63, &cf);
LABEL_20:
  v20 = v61;
  v61 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v14);
    WTF::fastFree(v21, v22);
  }
  if (!v54)
  {
    LOBYTE(v63) = 0;
    v65 = 0;
    if (!v53)
      goto LABEL_24;
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v63, (uint64_t)v52);
    v65 = 1;
    v25 = (const void *)WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
    if (!v65)
    {
      __break(1u);
LABEL_67:
      CFRelease(v25);
LABEL_55:
      v47 = v56[0];
      v56[0] = 0;
      if (v47)
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v47, v27);
      goto LABEL_24;
    }
    WebCore::ShareableBitmap::create();
    if (!v56[0])
      goto LABEL_24;
    v26 = **(_DWORD **)(a1 + 16);
    WebCore::ShareableBitmap::makeCGImage();
    v30 = v2[11];
    v29 = v2 + 11;
    v28 = v30;
    if (v30
      || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::expand(v29, 0), (v28 = *v29) != 0))
    {
      v31 = *(_DWORD *)(v28 - 8);
    }
    else
    {
      v31 = 0;
    }
    v32 = 9 * ((~(v26 << 15) + v26) ^ ((~(v26 << 15) + v26) >> 10));
    v33 = (v32 ^ (v32 >> 6)) + ~((v32 ^ (v32 >> 6)) << 11);
    v34 = v31 & (v33 ^ HIWORD(v33));
    v35 = v28 + 16 * v34;
    v36 = *(_DWORD *)v35;
    if (*(_DWORD *)v35 != 0x7FFFFFFF)
    {
      v37 = 0;
      v38 = 1;
      while (v36 != v26)
      {
        if (v36 == 2147483646)
          v37 = v35;
        v34 = (v34 + v38) & v31;
        v35 = v28 + 16 * v34;
        v36 = *(_DWORD *)v35;
        ++v38;
        if (*(_DWORD *)v35 == 0x7FFFFFFF)
        {
          if (v37)
          {
            *(_DWORD *)v37 = 0x7FFFFFFF;
            *(_QWORD *)(v37 + 8) = 0;
            --*(_DWORD *)(*v29 - 16);
            v35 = v37;
          }
          goto LABEL_43;
        }
      }
LABEL_54:
      v25 = cf;
      cf = 0;
      if (!v25)
        goto LABEL_55;
      goto LABEL_67;
    }
LABEL_43:
    *(_DWORD *)v35 = v26;
    v39 = cf;
    cf = 0;
    v40 = *(const void **)(v35 + 8);
    *(_QWORD *)(v35 + 8) = v39;
    if (v40)
      CFRelease(v40);
    v41 = *v29;
    if (*v29)
      v42 = *(_DWORD *)(v41 - 12) + 1;
    else
      v42 = 1;
    *(_DWORD *)(v41 - 12) = v42;
    v43 = *v29;
    if (*v29)
      v44 = *(_DWORD *)(v43 - 12);
    else
      v44 = 0;
    v45 = (*(_DWORD *)(v43 - 16) + v44);
    v46 = *(unsigned int *)(v43 - 4);
    if (v46 > 0x400)
    {
      if (v46 > 2 * v45)
        goto LABEL_54;
    }
    else if (3 * v46 > 4 * v45)
    {
      goto LABEL_54;
    }
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::expand(v29, v35);
    goto LABEL_54;
  }
  LOBYTE(v63) = 0;
  v65 = 0;
LABEL_24:
  result = (unsigned __int8 *)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v63);
  if (v54 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(unsigned __int8 *, IPC::Decoder **))off_1E34E8AD8[v54])(result, &v51);
  v24 = v55;
  v55 = 0;
  if (v24)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v24 + 16), v23);
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  int v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v5 - 4);
    v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(result + 24);
    do
    {
      *((_DWORD *)v12 - 2) = 0x7FFFFFFF;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = a3;
    while (1)
    {
      v15 = (int *)(v5 + 16 * v13);
      v16 = *v15;
      if (*v15 != 2147483646)
      {
        if (v16 != 0x7FFFFFFF)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = 0;
          v22 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
          do
          {
            v24 = v23 & v20;
            v23 = ++v21 + v24;
          }
          while (*(_DWORD *)(v19 + 16 * v24) != 0x7FFFFFFF);
          v25 = v19 + 16 * v24;
          v26 = *(const void **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
          {
            v30 = v14;
            CFRelease(v26);
            v14 = v30;
          }
          *(_DWORD *)v25 = *v15;
          v27 = v5 + 16 * v13;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v25 + 8) = v28;
          v18 = *(const void **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (!v18)
            goto LABEL_22;
LABEL_21:
          v29 = v14;
          CFRelease(v18);
          v14 = v29;
          goto LABEL_22;
        }
        v17 = v5 + 16 * v13;
        v18 = *(const void **)(v17 + 8);
        *(_QWORD *)(v17 + 8) = 0;
        if (v18)
          goto LABEL_21;
      }
LABEL_22:
      if (++v13 == v7)
        return WTF::fastFree((WTF *)(v5 - 16), v10);
    }
  }
  if (v5)
    return WTF::fastFree((WTF *)(v5 - 16), v10);
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteImageDecoderAVFProxy23CreateFrameImageAtIndexEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)(a2 + 1));
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t IPC::Decoder::decode<WebCore::ImageDecoderFrameInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ImageDecoderFrameInfo,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<BOOL (*)(WTF::String const&),BOOL,WTF::String const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVFManager::setUseGPUProcess(BOOL)::$_0,WTF::RefPtr<WebCore::ImageDecoder,WTF::RawPtrTraits<WebCore::ImageDecoder>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoder>>,WebCore::FragmentedSharedBuffer &,WTF::String const&,WebCore::AlphaOption,WebCore::GammaAndColorProfileOption>::call(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  IPC::Encoder *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  const WTF::String *v29;
  uint64_t v30;
  WTF::ThreadSafeWeakPtrControlBlock *v31;
  _DWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  int v75;
  uint64_t *v76;
  int v77;
  IPC::Encoder *v78;
  uint64_t v79;
  char v80;

  v7 = *(uint64_t **)(a1 + 8);
  v8 = *(uint64_t **)(WebKit::RemoteImageDecoderAVFManager::ensureGPUProcessConnection((WebKit::RemoteImageDecoderAVFManager *)v7)
                   + 24);
  v69 = *(_QWORD *)(a2 + 48);
  do
    v9 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v9 + 1, (unsigned int *)a2));
  v70 = (unsigned int *)a2;
  v71 = 0;
  v79 = 0;
  IPC::Connection::createSyncMessageEncoder(3620, 0, &v79, (uint64_t *)&v78);
  v10 = v78;
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(v78, (IPC::SharedBufferReference *)&v69);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v10, a3);
  IPC::Connection::sendSyncMessage((uint64_t)v8, v79, (uint64_t *)&v78, 0, (uint64_t)&v76, INFINITY);
  v11 = v77;
  if (v77)
  {
    if (v77 == 1)
    {
      LOBYTE(v72) = (_BYTE)v76;
LABEL_15:
      v75 = v11;
      v19 = v11;
LABEL_16:
      ((void (*)(char *, uint64_t **))off_1E34E8AC8[v19])(&v80, &v76);
      goto LABEL_17;
    }
LABEL_85:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_86;
  }
  v8 = v76;
  v12 = v76[1];
  v13 = *v76;
  v14 = v76[2] - *v76;
  if (v12 <= v14)
  {
    v60 = 0;
    v61 = 0;
    *v76 = 0;
    v8[1] = 0;
    v62 = v8[3];
    if (v62)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
        v61 = *v8;
        v60 = v8[1];
      }
      else
      {
        v60 = 0;
        v61 = 0;
      }
    }
    goto LABEL_70;
  }
  v15 = (unsigned __int8 *)(v13 + v14);
  v76[2] = (uint64_t)(v15 + 1);
  if (!v13)
  {
LABEL_86:
    v60 = v12;
    v61 = v13;
LABEL_70:
    v12 = 0;
    v13 = 0;
    *v8 = 0;
    v8[1] = 0;
    v63 = v8[3];
    if (v63)
    {
      if (v60)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v61, v60);
        v13 = *v8;
        v12 = v8[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_71;
  }
  v16 = *v15;
  if (v16 < 2)
  {
    if (v16)
    {
      v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!v18)
        goto LABEL_72;
      if (v77)
        goto LABEL_85;
      LOBYTE(v16) = 1;
      v8 = v76;
    }
    else
    {
      v17 = 0;
    }
    v76 = 0;
    HIBYTE(v73) = HIBYTE(v17);
    *(_WORD *)((char *)&v73 + 5) = HIDWORD(v17) >> 8;
    *(_DWORD *)((char *)&v73 + 1) = v17 >> 8;
    v74 = v16;
    v72 = v8;
    LOBYTE(v73) = v17;
    goto LABEL_15;
  }
LABEL_71:
  *v8 = 0;
  v8[1] = 0;
  v64 = v8[3];
  if (v64 && v12)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v13);
LABEL_72:
  v20 = (void *)*v8;
  v65 = v8[1];
  *v8 = 0;
  v8[1] = 0;
  v66 = v8[3];
  if (v66)
  {
    if (v65)
    {
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v66 + 16))(v66, v20);
      v20 = (void *)*v8;
      v67 = v8[1];
      v68 = v8[3];
      *v8 = 0;
      v8[1] = 0;
      if (v68)
      {
        if (v67)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v68 + 16))(v68, v20);
      }
    }
  }
  LOBYTE(v72) = 13;
  v11 = 1;
  v75 = 1;
  v19 = v77;
  if (v77 != -1)
    goto LABEL_16;
LABEL_17:
  v21 = v78;
  v78 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v20);
    WTF::fastFree(v22, v23);
  }
  v24 = v71;
  v71 = 0;
  if (v24)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v24);
  v25 = v70;
  v70 = 0;
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v25, v20);
  v26 = 0;
  if (v11)
    v27 = 0;
  else
    v27 = v73;
  if (v11 || !v74)
    goto LABEL_64;
  v26 = WTF::fastMalloc((WTF *)0x88);
  v28 = (_QWORD *)WebCore::ImageDecoder::ImageDecoder((WebCore::ImageDecoder *)v26);
  v28[2] = 0;
  *v28 = off_1E34E85F8;
  v30 = WebKit::RemoteImageDecoderAVFManager::ensureGPUProcessConnection((WebKit::RemoteImageDecoderAVFManager *)v7);
  v31 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v30 + 16);
  if (v31)
    v31 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v31);
  *(_QWORD *)(v26 + 24) = v31;
  *(_QWORD *)(v26 + 32) = v30;
  *(_QWORD *)(v26 + 40) = v7;
  *(_QWORD *)(v26 + 48) = v27;
  v32 = (_DWORD *)*a3;
  if (*a3)
    *v32 += 2;
  *(_QWORD *)(v26 + 56) = v32;
  WebCore::UTIFromMIMEType((WebCore *)a3, v29);
  *(_BYTE *)(v26 + 72) = 0;
  *(_BYTE *)(v26 + 128) = 0;
  *(_BYTE *)(v26 + 132) = 0;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_OWORD *)(v26 + 105) = 0u;
  v36 = v7[4];
  v35 = v7 + 4;
  v34 = v36;
  if (v36
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v35),
        (v34 = *v35) != 0))
  {
    v37 = *(_DWORD *)(v34 - 8);
  }
  else
  {
    v37 = 0;
  }
  v38 = (v27 + ~(v27 << 32)) ^ ((unint64_t)(v27 + ~(v27 << 32)) >> 22);
  v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
  v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
  v41 = v37 & ((v40 >> 31) ^ v40);
  v42 = (_QWORD *)(v34 + 16 * v41);
  v43 = *v42;
  if (!*v42)
  {
LABEL_43:
    *v42 = v27;
    v46 = *(_QWORD *)(v26 + 16);
    if (v46)
      goto LABEL_91;
    v46 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = v26;
    v47 = *(unsigned int **)(v26 + 16);
    *(_QWORD *)(v26 + 16) = v46;
    if (!v47)
      goto LABEL_91;
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v47);
      WTF::fastFree((WTF *)v47, v33);
    }
    v46 = *(_QWORD *)(v26 + 16);
    if (v46)
    {
LABEL_91:
      do
        v50 = __ldaxr((unsigned int *)v46);
      while (__stlxr(v50 + 1, (unsigned int *)v46));
    }
    v51 = (unsigned int *)v42[1];
    v42[1] = v46;
    if (v51)
    {
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v33);
      }
    }
    v54 = *v35;
    if (*v35)
      v55 = *(_DWORD *)(v54 - 12) + 1;
    else
      v55 = 1;
    *(_DWORD *)(v54 - 12) = v55;
    v56 = *v35;
    if (*v35)
      v57 = *(_DWORD *)(v56 - 12);
    else
      v57 = 0;
    v58 = (*(_DWORD *)(v56 - 16) + v57);
    v59 = *(unsigned int *)(v56 - 4);
    if (v59 > 0x400)
    {
      if (v59 > 2 * v58)
        goto LABEL_63;
    }
    else if (3 * v59 > 4 * v58)
    {
      goto LABEL_63;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v35);
    goto LABEL_63;
  }
  v44 = 0;
  v45 = 1;
  while (v43 != v27)
  {
    if (v43 == -1)
      v44 = v42;
    v41 = (v41 + v45) & v37;
    v42 = (_QWORD *)(v34 + 16 * v41);
    v43 = *v42;
    ++v45;
    if (!*v42)
    {
      if (v44)
      {
        *v44 = 0;
        v44[1] = 0;
        --*(_DWORD *)(*v35 - 16);
        v42 = v44;
      }
      goto LABEL_43;
    }
  }
LABEL_63:
  v11 = v75;
  if (v75 != -1)
LABEL_64:
    ((void (*)(uint64_t *, uint64_t **))off_1E34E8968[v11])(&v69, &v72);
  *a4 = v26;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteMediaSessionHelper::activeVideoRouteDidChange(WebCore::MediaSessionHelperClient::SupportsAirPlayVideo,WebKit::MediaPlaybackTargetContextSerialized &&)::$_0,WebKit::RemoteMediaSessionHelper::activeVideoRouteDidChange(WebCore::MediaSessionHelperClient::SupportsAirPlayVideo,WebKit::MediaPlaybackTargetContextSerialized &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MediaPlaybackTargetContextCocoa,WebCore::MediaPlaybackTargetContextMock> &&>()
{
  uint64_t result;
  _DWORD *v1;

  WebCore::MediaPlaybackTargetCocoa::create();
  WebCore::MediaSessionHelper::activeVideoRouteDidChange();
  result = (uint64_t)v1;
  if (v1)
  {
    if (v1[2] == 1)
      return (*(uint64_t (**)())(*(_QWORD *)v1 + 8))();
    else
      --v1[2];
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::setHasAV1HardwareDecoder(BOOL)::$_0,void,WebCore::Page &>::call(int a1, WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = *((_QWORD *)this + 14);
  v3 = *(unsigned int *)(v2 + 720);
  if ((~(_WORD)v3 & 0x2080) != 0)
  {
    v4 = *(_QWORD *)(v2 + 712);
    v5 = v3 | ((unint64_t)*(unsigned __int8 *)(v2 + 724) << 32);
    v6 = *(_QWORD *)(v2 + 704);
    v7 = *(_QWORD *)(v2 + 696);
    v8 = *(_QWORD *)(v2 + 688);
    v9 = *(_QWORD *)(v2 + 680);
    v10 = *(_QWORD *)(v2 + 672);
    *(_QWORD *)(v2 + 664) = *(_QWORD *)(v2 + 664);
    *(_QWORD *)(v2 + 672) = v10;
    *(_QWORD *)(v2 + 680) = v9;
    *(_QWORD *)(v2 + 688) = v8;
    *(_QWORD *)(v2 + 696) = v7;
    *(_QWORD *)(v2 + 704) = v6;
    *(_QWORD *)(v2 + 712) = v4;
    *(_BYTE *)(v2 + 724) = BYTE4(v5);
    *(_DWORD *)(v2 + 720) = v5 | 0x2080;
    return WebCore::Page::settingsDidChange(this);
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::$_0 &&>>()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E34E8BA8;
  v2 = v0;
  WTF::callOnMainRunLoopAndWait();
  result = (uint64_t)v2;
  if (v2)
    return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call()
{
  WebKit::WebProcess *v0;
  WebKit::GPUProcessConnection *v1;
  WebKit::WebProcess *v3;

  {
    v0 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v0 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v0;
  }
  v1 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(v0);
  return WebKit::GPUProcessConnection::waitForDidInitialize(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  _QWORD v11[2];
  uint64_t v12;
  int v13;
  int v14;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 57);
  if (__ldaxr((unsigned __int8 *)(v1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v1 + 57);
LABEL_5:
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionOnMainThreadWithLock((WebKit::LibWebRTCCodecs *)v1);
  v4 = *(_QWORD *)(v1 + 80);
  v12 = v4;
  v5 = *(unsigned int *)(v1 + 92);
  v13 = *(_DWORD *)(v1 + 88);
  v14 = v5;
  v11[0] = 0;
  *(_QWORD *)(v1 + 80) = 0;
  v11[1] = 0;
  *(_QWORD *)(v1 + 88) = 0;
  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v6);
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 96) + 32))(*(_QWORD *)(v1 + 96), v4);
      v4 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v7);
  v10 = __ldxr(v2);
  if (v10 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 57));
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 57));
  return result;
}

uint64_t WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (char *)v4 + 8;
    do
    {
      v7 = *(WTF **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v6 += 32;
      v5 -= 32;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebKit::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34E8C20;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)(a1 + 16), 0);
  return a1;
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_1E34E8C20;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)(a1 + 16), 0);
  return WTF::fastFree((WTF *)a1, v3);
}

unsigned __int8 **WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebKit::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  os_unfair_lock_s *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  int v16;
  unsigned __int8 **result;
  WebKit::LibWebRTCCodecs::Decoder *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  WebKit::LibWebRTCCodecs::Decoder **v27;
  WebKit::LibWebRTCCodecs::Decoder *v28;
  WebKit::LibWebRTCCodecs::Decoder **v29;
  int v30;
  WebKit::LibWebRTCCodecs::Decoder *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  _QWORD *v39;
  unsigned __int8 **v40;

  v2 = a1[1];
  v3 = (unsigned __int8 *)(v2 + 57);
  if (__ldaxr((unsigned __int8 *)(v2 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v2 + 57);
LABEL_5:
  v5 = a1[2];
  WebKit::LibWebRTCCodecs::protectedConnection(&v40, *(unsigned __int8 ***)(v2 + 64));
  v6 = (os_unfair_lock_s *)v40;
  v7 = *(_BYTE *)(v2 + 134);
  v8 = *(_BYTE *)(v2 + 136);
  v9 = a1[3];
  v10 = *(_QWORD *)a1[2];
  a1[3] = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34E8CC0;
  v11[1] = v10;
  v11[2] = v9;
  v39 = v11;
  WebKit::createRemoteDecoder(v5, v6, v7, v8, (uint64_t *)&v39);
  if (v39)
    (*(void (**)(_QWORD *))(*v39 + 8))(v39);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((unsigned __int8 **)v6);
  v12 = a1[2];
  v13 = *(unsigned __int8 ***)(v2 + 64);
  if (v13)
  {
    v14 = *v13;
    if (__ldaxr(*v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEABB3C](v14);
LABEL_12:
    ++*((_QWORD *)v14 + 1);
    v16 = __ldxr(v14);
    if (v16 == 1)
    {
      if (!__stlxr(0, v14))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  }
LABEL_17:
  v40 = v13;
  WebKit::LibWebRTCCodecs::setDecoderConnection(v12, (uint64_t *)&v40);
  result = v40;
  if (v40)
    result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v40);
  v18 = *(WebKit::LibWebRTCCodecs::Decoder **)a1[2];
  v21 = *(_QWORD *)(v2 + 32);
  v20 = (uint64_t *)(v2 + 32);
  v19 = v21;
  if (v21
    || (result = (unsigned __int8 **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v20),
        (v19 = *v20) != 0))
  {
    v22 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    v22 = 0;
  }
  v23 = ((unint64_t)v18 + ~((_QWORD)v18 << 32)) ^ (((unint64_t)v18 + ~((_QWORD)v18 << 32)) >> 22);
  v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  v26 = v22 & ((v25 >> 31) ^ v25);
  v27 = (WebKit::LibWebRTCCodecs::Decoder **)(v19 + 16 * v26);
  v28 = *v27;
  if (!*v27)
  {
LABEL_30:
    *v27 = v18;
    v31 = (WebKit::LibWebRTCCodecs::Decoder *)a1[2];
    a1[2] = 0;
    result = (unsigned __int8 **)std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100](v27 + 1, v31);
    v32 = *v20;
    if (*v20)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *v20;
    if (*v20)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 > 2 * v36)
        goto LABEL_39;
    }
    else if (3 * v37 > 4 * v36)
    {
      goto LABEL_39;
    }
    result = (unsigned __int8 **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v20);
    goto LABEL_39;
  }
  v29 = 0;
  v30 = 1;
  while (v28 != v18)
  {
    if (v28 == (WebKit::LibWebRTCCodecs::Decoder *)-1)
      v29 = v27;
    v26 = (v26 + v30) & v22;
    v27 = (WebKit::LibWebRTCCodecs::Decoder **)(v19 + 16 * v26);
    v28 = *v27;
    ++v30;
    if (!*v27)
    {
      if (v29)
      {
        *v29 = 0;
        v29[1] = 0;
        --*(_DWORD *)(*v20 - 16);
        v27 = v29;
      }
      goto LABEL_30;
    }
  }
LABEL_39:
  v38 = __ldxr(v3);
  if (v38 != 1)
  {
    __clrex();
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

uint64_t WebKit::createRemoteDecoder(uint64_t a1, os_unfair_lock_s *a2, char a3, char a4, uint64_t *a5)
{
  char v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  size_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  void *v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  uint64_t result;
  unint64_t v42;
  size_t v43;
  char *v44;
  void *v45;
  unint64_t v46;
  size_t v47;
  char *v48;
  void *v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  void *v53;
  WebKit::WebProcess *v54;
  size_t v55;
  IPC::Encoder *v56;
  uint64_t v57[2];

  v10 = *(_BYTE *)(a1 + 8);
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v54 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v54);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = *((_QWORD *)WebKit::WebProcess::libWebRTCCodecs(v11) + 12);
  v13 = *a5;
  *a5 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34E8C48;
  v14[1] = v13;
  v15 = *(_QWORD *)(v12 + 32);
  v12 += 32;
  (*(void (**)(uint64_t))(v15 + 32))(v12);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = &off_1E34E8C70;
  v16[1] = v14;
  v16[2] = v12;
  v57[0] = (uint64_t)v16;
  v57[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 107;
  *(_QWORD *)(v17 + 8) = 0;
  v18 = (void *)(v17 + 16);
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v56 = (IPC::Encoder *)v17;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v17, (uint64_t *)a1);
  v19 = *(_QWORD *)(v17 + 544);
  v20 = v19 + 1;
  v21 = *(_QWORD *)(v17 + 552);
  if (v21 < v19 + 1)
  {
    v42 = (2 * v21 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v43 = v42;
      v42 *= 2;
    }
    while (v43 < v20);
    v55 = v43;
    v44 = (char *)mmap(0, v43, 3, 4098, -1, 0);
    if (v44 == (char *)-1)
      goto LABEL_35;
    v22 = v44;
    memcpy(v44, *(const void **)(v17 + 528), *(_QWORD *)(v17 + 544));
    v45 = *(void **)(v17 + 528);
    if (v45 != v18)
      munmap(v45, *(_QWORD *)(v17 + 552));
    *(_QWORD *)(v17 + 528) = v22;
    *(_QWORD *)(v17 + 552) = v55;
    v23 = *(_QWORD *)(v17 + 544);
  }
  else
  {
    v22 = *(char **)(v17 + 528);
    v23 = *(_QWORD *)(v17 + 544);
  }
  bzero(&v22[v23], v19 - v23);
  *(_QWORD *)(v17 + 544) = v20;
  v24 = (_BYTE *)(*(_QWORD *)(v17 + 528) + v19);
  *(_QWORD *)(v17 + 536) = v24 + 1;
  *v24 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)(a1 + 16));
  v25 = *(_QWORD *)(v17 + 544);
  v26 = v25 + 1;
  v27 = *(_QWORD *)(v17 + 552);
  if (v27 < v25 + 1)
  {
    v46 = (2 * v27 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v47 = v46;
      v46 *= 2;
    }
    while (v47 < v26);
    v48 = (char *)mmap(0, v47, 3, 4098, -1, 0);
    if (v48 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1975AAC0CLL);
    }
    v28 = v48;
    memcpy(v48, *(const void **)(v17 + 528), *(_QWORD *)(v17 + 544));
    v49 = *(void **)(v17 + 528);
    if (v49 != v18)
      munmap(v49, *(_QWORD *)(v17 + 552));
    *(_QWORD *)(v17 + 528) = v28;
    *(_QWORD *)(v17 + 552) = v47;
    v29 = *(_QWORD *)(v17 + 544);
  }
  else
  {
    v28 = *(char **)(v17 + 528);
    v29 = *(_QWORD *)(v17 + 544);
  }
  bzero(&v28[v29], v25 - v29);
  *(_QWORD *)(v17 + 544) = v26;
  v30 = (_BYTE *)(*(_QWORD *)(v17 + 528) + v25);
  *(_QWORD *)(v17 + 536) = v30 + 1;
  *v30 = a3;
  v31 = *(_QWORD *)(v17 + 544);
  v32 = v31 + 1;
  v33 = *(_QWORD *)(v17 + 552);
  if (v33 >= v31 + 1)
  {
    v34 = *(char **)(v17 + 528);
    v35 = *(_QWORD *)(v17 + 544);
    goto LABEL_9;
  }
  v50 = (2 * v33 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v51 = v50;
    v50 *= 2;
  }
  while (v51 < v32);
  v52 = (char *)mmap(0, v51, 3, 4098, -1, 0);
  if (v52 == (char *)-1)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1975AAC04);
  }
  v34 = v52;
  memcpy(v52, *(const void **)(v17 + 528), *(_QWORD *)(v17 + 544));
  v53 = *(void **)(v17 + 528);
  if (v53 != v18)
    munmap(v53, *(_QWORD *)(v17 + 552));
  *(_QWORD *)(v17 + 528) = v34;
  *(_QWORD *)(v17 + 552) = v51;
  v35 = *(_QWORD *)(v17 + 544);
LABEL_9:
  bzero(&v34[v35], v31 - v35);
  *(_QWORD *)(v17 + 544) = v32;
  v36 = (_BYTE *)(*(_QWORD *)(v17 + 528) + v31);
  *(_QWORD *)(v17 + 536) = v36 + 1;
  *v36 = a4;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a2, &v56, v57, 0, 0);
  v38 = v56;
  v56 = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v37);
    WTF::fastFree(v39, v40);
  }
  result = v57[0];
  v57[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E8C48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8C48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t (*v3)(void);

  if (a2 && *a2 && (unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>(a2) >= 0x100u)
    v3 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 16);
  else
    v3 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 16);
  return v3();
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34E8C70;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E8C70;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E34E8C98;
  v5[1] = v3;
  v5[2] = v4;
  v7 = v5;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 16))(v2, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1}::operator()(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34E8C98;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34E8C98;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1}::operator()(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebKit::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34E8CC0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebKit::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34E8CC0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebKit::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  WebKit::WebProcess *v3;
  WebKit::LibWebRTCCodecs *v4;
  uint64_t (*v5)(void);
  WebKit::WebProcess *v7;

  if ((a2 & 1) != 0)
  {
    {
      v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v3 = WebKit::WebProcess::WebProcess(v7);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
    }
    v4 = WebKit::WebProcess::libWebRTCCodecs(v3);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v4 + 4, (_QWORD *)(a1 + 8));
    v5 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 16) + 16);
  }
  else
  {
    v5 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 16) + 16);
  }
  return v5();
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)(v21 + 8), 0);
          *(_QWORD *)v21 = *v10;
          v22 = v4 + 16 * i;
          v23 = *(_QWORD *)(v22 + 8);
          v22 += 8;
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v21 + 8) = v23;
          std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)v22, 0);
        }
        else
        {
          std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::releaseDecoder(WebKit::LibWebRTCCodecs::Decoder &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  WebKit::LibWebRTCCodecs::Decoder *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  int v31;
  WTF *v32;
  void *v33;
  IPC::Encoder *v34;

  v2 = (uint64_t *)(result + 16);
  v1 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD *)(result + 8);
  v5 = (uint64_t *)(v3 + 32);
  v4 = *(_QWORD *)(v3 + 32);
  if (v4)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = (v1 + ~(v1 << 32)) ^ ((unint64_t)(v1 + ~(v1 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v4 + 16 * v10);
    if (v11 != v1)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v4 + 16 * v10);
        ++v12;
        if (v11 == v1)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      v13 = (_QWORD *)(v4 + 16 * v10);
      result = (uint64_t)(v13 + 1);
      v14 = (WebKit::LibWebRTCCodecs::Decoder *)v13[1];
      v13[1] = 0;
      v15 = *v5;
      if (!*v5 || (v15 += 16 * *(unsigned int *)(v15 - 4), (_QWORD *)v15 != v13))
      {
        if ((_QWORD *)v15 != v13)
        {
          *v13 = -1;
          result = (uint64_t)std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)result, 0);
          ++*(_DWORD *)(*v5 - 16);
          v16 = *v5;
          v17 = *v5 ? *(_DWORD *)(v16 - 12) - 1 : -1;
          *(_DWORD *)(v16 - 12) = v17;
          v18 = *v5;
          if (*v5)
          {
            v19 = 6 * *(_DWORD *)(v18 - 12);
            v20 = *(_DWORD *)(v18 - 4);
            if (v19 < v20 && v20 >= 9)
              result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v5, v20 >> 1);
          }
        }
      }
      if (v14)
      {
        v22 = (unsigned __int8 *)(v3 + 57);
        if (__ldaxr((unsigned __int8 *)(v3 + 57)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v22))
        {
          goto LABEL_27;
        }
        MEMORY[0x19AEABB3C](v3 + 57);
LABEL_27:
        v24 = *((_QWORD *)v14 + 6);
        v25 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v25 = 114;
        *(_QWORD *)(v25 + 8) = 0;
        *(_QWORD *)(v25 + 528) = v25 + 16;
        *(_QWORD *)(v25 + 536) = v25 + 16;
        *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v25 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
        v34 = (IPC::Encoder *)v25;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v25, v2);
        IPC::Connection::sendMessageImpl(v24, (uint64_t *)&v34, 0, 0);
        v27 = v34;
        v34 = 0;
        if (v27)
        {
          IPC::Encoder::~Encoder(v27, v26);
          WTF::fastFree(v28, v29);
        }
        v30 = *(_QWORD *)(v3 + 48);
        if ((!v30 || !*(_DWORD *)(v30 - 12)) && (!*v5 || !*(_DWORD *)(*v5 - 12)))
          atomic_store(0, (unsigned __int8 *)(v3 + 56));
        v31 = __ldxr(v22);
        if (v31 == 1)
        {
          if (!__stlxr(0, v22))
            goto LABEL_39;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 57));
LABEL_39:
        WebKit::LibWebRTCCodecs::Decoder::~Decoder(v14, v26);
        return WTF::fastFree(v32, v33);
      }
    }
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,unsigned short,unsigned short>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,unsigned short,unsigned short>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  __int16 v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, (const void *)*v2[1], v2[1][1]);
  v4 = *((_WORD *)v2 + 8);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v4;
  LOWORD(v2) = *((_WORD *)v2 + 9);
  result = IPC::Encoder::grow(a1, 2uLL, 2);
  *(_WORD *)result = (_WORD)v2;
  return result;
}

unint64_t WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 32 * v5;
        v9 = (_DWORD *)((char *)v4 + 16);
        do
        {
          v10 = *((_QWORD *)v9 - 2);
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          LODWORD(v11) = *v9;
          *v9 = 0;
          v7[4] = v11;
          LODWORD(v11) = v9[1];
          v9[1] = 0;
          v7[5] = v11;
          v7[6] = v9[2];
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          if (result)
          {
            *((_QWORD *)v9 - 1) = 0;
            *v9 = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 8;
          v7 += 8;
          v8 -= 32;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized(WebKit::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34E8D38;
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized(WebKit::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34E8D38;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized(WebKit::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::call(uint64_t a1, uint64_t a2)
{
  WebKit::WebProcess *v4;
  WebKit::LibWebRTCCodecs *v5;
  WebKit::WebProcess *v6;
  WebKit::LibWebRTCCodecs *v7;
  WebKit::WebProcess *v9;
  WebKit::WebProcess *v10;

  if (a2)
  {
    {
      v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v4 = WebKit::WebProcess::WebProcess(v9);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
    }
    v5 = WebKit::WebProcess::libWebRTCCodecs(v4);
    WebKit::LibWebRTCCodecs::initializeEncoderInternal((uint64_t)v5, a2, *(_WORD *)(a1 + 8), *(_WORD *)(a1 + 16), *(_QWORD *)(a1 + 32) / 0x3E8uLL, (unint64_t)((((*(_QWORD *)(a1 + 32) >> 2) & 0x1FFFFFFFFFFFFFFFLL) * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4, 0, *(double *)(a1 + 40));
    {
      v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v6 = WebKit::WebProcess::WebProcess(v10);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
    }
    v7 = WebKit::WebProcess::libWebRTCCodecs(v6);
    WebKit::LibWebRTCCodecs::setEncodeRates((uint64_t)v7, a2, *(_QWORD *)(a1 + 32) / 0x3E8uLL, *(double *)(a1 + 40));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebKit::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  IPC::Semaphore **v4;

  *a1 = off_1E34E8D60;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = (IPC::Semaphore **)a1[2];
  a1[2] = 0;
  if (v4)
    std::default_delete<WebKit::LibWebRTCCodecs::Encoder>::operator()[abi:sn180100](v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebKit::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  IPC::Semaphore **v5;

  *(_QWORD *)a1 = off_1E34E8D60;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = (IPC::Semaphore **)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    std::default_delete<WebKit::LibWebRTCCodecs::Encoder>::operator()[abi:sn180100](v5);
  return WTF::fastFree(a1, v4);
}

unsigned __int8 ***WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebKit::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  unsigned __int8 *v6;
  uint64_t *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  int v17;
  unsigned __int8 **v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  IPC::Semaphore **v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v45;
  os_unfair_lock_s *v46;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (unsigned __int8 *)(v2 + 57);
  if (__ldaxr((unsigned __int8 *)(v2 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v2 + 57);
LABEL_5:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v46, *(unsigned __int8 ***)(v2 + 64));
  v5 = __ldxr(v3);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v3))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 57));
  v6 = (unsigned __int8 *)(v2 + 40);
  if (__ldaxr((unsigned __int8 *)(v2 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](v2 + 40);
LABEL_14:
  v8 = *(uint64_t **)(a1 + 16);
  v9 = v46;
  v10 = *v8;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34E8E00;
  v12[1] = v10;
  v12[2] = v11;
  v45 = v12;
  WebKit::createRemoteEncoder(v8, v9, a1 + 24, (uint64_t *)&v45);
  if (v45)
    (*(void (**)(_QWORD *))(*v45 + 8))(v45);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 **)v46;
  v15 = *(unsigned __int8 **)&v46->_os_unfair_lock_opaque;
  if (__ldaxr(*(unsigned __int8 **)&v46->_os_unfair_lock_opaque))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEABB3C](v15);
LABEL_20:
  ++*((_QWORD *)v15 + 1);
  v17 = __ldxr(v15);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v15))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v18 = *(unsigned __int8 ***)(v13 + 96);
  *(_QWORD *)(v13 + 96) = v14;
  if (v18)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v18);
  v19 = __ldxr(v6);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v6))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 40));
  v20 = *(_QWORD *)(a1 + 16);
  v21 = (WTF::StringImpl **)(v20 + 24);
  v22 = *(unsigned int *)(v20 + 36);
  if ((_DWORD)v22)
    WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct(*v21, (WTF::StringImpl *)((char *)*v21 + 16 * v22));
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt((uint64_t)v21, (_DWORD *)(a1 + 24));
  v23 = **(_QWORD **)(a1 + 16);
  v26 = *(_QWORD *)(v2 + 48);
  v25 = (uint64_t *)(v2 + 48);
  v24 = v26;
  if (v26
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v25),
        (v24 = *v25) != 0))
  {
    v27 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = (v23 + ~(v23 << 32)) ^ ((unint64_t)(v23 + ~(v23 << 32)) >> 22);
  v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
  v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
  v31 = v27 & ((v30 >> 31) ^ v30);
  v32 = (_QWORD *)(v24 + 16 * v31);
  v33 = *v32;
  if (!*v32)
  {
LABEL_45:
    *v32 = v23;
    v36 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v37 = (IPC::Semaphore **)v32[1];
    v32[1] = v36;
    if (v37)
      std::default_delete<WebKit::LibWebRTCCodecs::Encoder>::operator()[abi:sn180100](v37);
    v38 = *v25;
    if (*v25)
      v39 = *(_DWORD *)(v38 - 12) + 1;
    else
      v39 = 1;
    *(_DWORD *)(v38 - 12) = v39;
    v40 = *v25;
    if (*v25)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    v42 = (*(_DWORD *)(v40 - 16) + v41);
    v43 = *(unsigned int *)(v40 - 4);
    if (v43 > 0x400)
    {
      if (v43 > 2 * v42)
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v46);
    }
    else if (3 * v43 > 4 * v42)
    {
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v46);
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v25);
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v46);
  }
  v34 = 0;
  v35 = 1;
  while (v33 != v23)
  {
    if (v33 == -1)
      v34 = v32;
    v31 = (v31 + v35) & v27;
    v32 = (_QWORD *)(v24 + 16 * v31);
    v33 = *v32;
    ++v35;
    if (!*v32)
    {
      if (v34)
      {
        *v34 = 0;
        v34[1] = 0;
        --*(_DWORD *)(*v25 - 16);
        v32 = v34;
      }
      goto LABEL_45;
    }
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v46);
}

uint64_t WebKit::createRemoteEncoder(uint64_t *a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t *a4)
{
  char v7;
  uint64_t *v8;
  char v9;
  char v10;
  char v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  uint64_t result;
  WebKit::WebProcess *v25;
  IPC::Encoder *v27;
  uint64_t v28[2];

  v7 = *((_BYTE *)a1 + 8);
  v8 = a1 + 2;
  v9 = *((_BYTE *)a1 + 130);
  v10 = *((_BYTE *)a1 + 129);
  v11 = *((_BYTE *)a1 + 131);
  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v25);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v13 = *((_QWORD *)WebKit::WebProcess::libWebRTCCodecs(v12) + 12);
  v14 = *a4;
  *a4 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34E8D88;
  v15[1] = v14;
  v16 = *(_QWORD *)(v13 + 32);
  v13 += 32;
  (*(void (**)(uint64_t))(v16 + 32))(v13);
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v17 = &off_1E34E8DB0;
  v17[1] = v15;
  v17[2] = v13;
  v28[0] = (uint64_t)v17;
  v28[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 108;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v27 = (IPC::Encoder *)v18;
  v19 = *a1;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = v19;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, v8);
  IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v18, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = v9;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = v10;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = v11;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a2, &v27, v28, 0, 0);
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v20);
    WTF::fastFree(v22, v23);
  }
  result = v28[0];
  v28[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E8D88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8D88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t (*v3)(void);

  if (a2 && *a2 && (unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>(a2) >= 0x100u)
    v3 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 16);
  else
    v3 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 16);
  return v3();
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34E8DB0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34E8DB0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E34E8DD8;
  v5[1] = v3;
  v5[2] = v4;
  v7 = v5;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 16))(v2, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1}::operator()(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34E8DD8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34E8DD8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1}::operator()(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebKit::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34E8E00;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebKit::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34E8E00;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebKit::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  WebKit::WebProcess *v3;
  WebKit::LibWebRTCCodecs *v4;
  uint64_t (*v5)(void);
  WebKit::WebProcess *v7;

  if ((a2 & 1) != 0)
  {
    {
      v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v3 = WebKit::WebProcess::WebProcess(v7);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
    }
    v4 = WebKit::WebProcess::libWebRTCCodecs(v3);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v4 + 6, (_QWORD *)(a1 + 8));
    v5 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 16) + 16);
  }
  else
  {
    v5 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 16) + 16);
  }
  return v5();
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Semaphore **v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  IPC::Semaphore **v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (IPC::Semaphore **)v23[1];
          v23[1] = 0;
          if (v24)
            std::default_delete<WebKit::LibWebRTCCodecs::Encoder>::operator()[abi:sn180100](v24);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(IPC::Semaphore ***)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          std::default_delete<WebKit::LibWebRTCCodecs::Encoder>::operator()[abi:sn180100](v13);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(IPC::Semaphore ***)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::releaseEncoder(WebKit::LibWebRTCCodecs::Encoder &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  int v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  IPC::Encoder *v34;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = (uint64_t *)(v2 + 48);
  v3 = *(_QWORD *)(v2 + 48);
  if (!v3)
    goto LABEL_9;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(v3 - 8);
  v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v3 + 16 * v10);
  if (v11 != v5)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(_QWORD *)(v3 + 16 * v10);
      ++v12;
      if (v11 == v5)
        goto LABEL_8;
    }
    v10 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v10 != *(_DWORD *)(v3 - 4))
  {
    v26 = (_QWORD *)(v3 + 16 * v10);
    v13 = v26[1];
    v26[1] = 0;
    v27 = *v4;
    if (!*v4 || (v27 += 16 * *(unsigned int *)(v27 - 4), (_QWORD *)v27 != v26))
    {
      if ((_QWORD *)v27 != v26)
      {
        *v26 = -1;
        v26[1] = 0;
        ++*(_DWORD *)(*v4 - 16);
        v28 = *v4;
        v29 = *v4 ? *(_DWORD *)(v28 - 12) - 1 : -1;
        *(_DWORD *)(v28 - 12) = v29;
        v30 = *v4;
        if (*v4)
        {
          v31 = 6 * *(_DWORD *)(v30 - 12);
          v32 = *(_DWORD *)(v30 - 4);
          if (v31 < v32 && v32 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v4, v32 >> 1);
        }
      }
    }
  }
  else
  {
LABEL_9:
    v13 = 0;
  }
  v14 = (unsigned __int8 *)(v2 + 40);
  if (__ldaxr((unsigned __int8 *)(v2 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](v2 + 40);
LABEL_14:
  v16 = *(_QWORD *)(v13 + 96);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 115;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v34 = (IPC::Encoder *)v17;
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v18;
  IPC::Connection::sendMessageImpl(v16, (uint64_t *)&v34, 0, 0);
  v20 = v34;
  v34 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v21, v22);
  }
  if (!*v4 || !*(_DWORD *)(*v4 - 12))
  {
    v23 = *(_QWORD *)(v2 + 32);
    if (!v23 || !*(_DWORD *)(v23 - 12))
      atomic_store(0, (unsigned __int8 *)(v2 + 56));
  }
  v24 = __ldxr(v14);
  if (v24 == 1)
  {
    if (!__stlxr(0, v14))
      return std::default_delete<WebKit::LibWebRTCCodecs::Encoder>::operator()[abi:sn180100]((IPC::Semaphore **)v13);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 40));
  return std::default_delete<WebKit::LibWebRTCCodecs::Encoder>::operator()[abi:sn180100]((IPC::Semaphore **)v13);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::initializeEncoder(WebKit::LibWebRTCCodecs::Encoder &,unsigned short,unsigned short,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v2 + 48), (_QWORD *)(a1 + 16));
  return WebKit::LibWebRTCCodecs::initializeEncoderInternal(v2, v3, *(_WORD *)(a1 + 24), *(_WORD *)(a1 + 26), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40));
}

uint64_t *IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF **a1, os_unfair_lock_s *a2, uint64_t **a3)
{
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t i;
  WTF::StringImpl *v29;
  int v30;
  _BYTE *v32;
  int v33;
  WTF *v34;
  unsigned int *v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  WTF **v48;
  __int128 v49;
  __int128 v50;
  WTF *v51;
  __int128 v52;
  __int128 v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _BYTE buf[24];
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v49 = 0uLL;
  *(_QWORD *)&v50 = "sendWithPromisedReply";
  *((_QWORD *)&v50 + 1) = 0;
  v6 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E34E8EE8;
  v7 = v50;
  *(_OWORD *)(v6 + 16) = v49;
  *(_OWORD *)(v6 + 32) = v7;
  *(_BYTE *)(v6 + 48) = 0;
  v8 = (unsigned __int8 *)(v6 + 48);
  *(_DWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = v6 + 88;
  *(_QWORD *)(v6 + 80) = 1;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_WORD *)(v6 + 112) = 0;
  v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v9)
  {
    v10 = v9;
    if (v9[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v55, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v54, v6);
      *(_QWORD *)buf = v55;
      v51 = v54;
      result = (uint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v51, &v56);
      if (!v56)
      {
        __break(0xC471u);
        return result;
      }
      v13 = v54;
      v54 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v55;
      v55 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = *((_QWORD *)v10 + 4);
      v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v16)
      {
        WTF::String::utf8();
        v18 = v51 ? (char *)v51 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v18;
        _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v16 = (uint64_t)v51;
        v51 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
            v16 = WTF::fastFree((WTF *)v16, v17);
          else
            --*(_DWORD *)v16;
        }
      }
      if (*v10 && v10[16] >= 4u)
      {
        v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v20 = *v19;
          if ((v20 & 1) != 0)
            break;
          v21 = __ldaxr(v19);
          if (v21 == v20)
          {
            if (!__stxr(v20 | 1, v19))
            {
              v48 = a1;
              v22 = WTF::Logger::observers((WTF::Logger *)v16);
              v23 = *(unsigned int *)(v22 + 12);
              if ((_DWORD)v23)
              {
                v24 = *(uint64_t **)v22;
                v25 = *(_QWORD *)v22 + 8 * v23;
                do
                {
                  v26 = *v24;
                  *(_DWORD *)buf = 0;
                  WTF::String::String((WTF::String *)&buf[8], "creating ");
                  *(_DWORD *)&buf[16] = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v58, v6);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v51, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v26 + 16))(v26, v10, 4, &v51);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v27);
                  for (i = 24; i != -8; i -= 16)
                  {
                    v29 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v29)
                    {
                      if (*(_DWORD *)v29 == 2)
                        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v29 -= 2;
                    }
                  }
                  ++v24;
                }
                while (v24 != (uint64_t *)v25);
              }
              v30 = __ldxr(v19);
              if (v30 == 1)
              {
                a1 = v48;
                if (!__stlxr(0, v19))
                  break;
              }
              else
              {
                __clrex();
                a1 = v48;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v9 = (unsigned __int8 *)v56;
      v56 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          v9 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  v51 = (WTF *)v6;
  v52 = v49;
  v53 = v50;
  if (__ldaxr(v8))
  {
    __clrex();
LABEL_49:
    v9 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v8);
    goto LABEL_50;
  }
  if (__stxr(1u, v8))
    goto LABEL_49;
LABEL_50:
  v32 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
  if (*v32 && v32[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v32, (WTF::Logger::LogSiteIdentifier *)&v49, " runSynchronouslyOnTarget ", v6);
  atomic_store(0, (unsigned __int8 *)(v6 + 113));
  v33 = __ldxr(v8);
  if (v33 == 1)
  {
    if (!__stlxr(0, v8))
      goto LABEL_58;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_58:
  v34 = v51;
  if (v51)
  {
    v35 = (unsigned int *)((char *)v51 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
    v37 = v51;
  }
  else
  {
    v37 = 0;
  }
  *a1 = v34;
  v51 = 0;
  *(_OWORD *)&buf[8] = v52;
  v58 = v53;
  v38 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v38 = off_1E34E8F28;
  *(_QWORD *)(v38 + 8) = v37;
  *(_QWORD *)buf = 0;
  v39 = v58;
  *(_OWORD *)(v38 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v38 + 32) = v39;
  *(_QWORD *)&v49 = v38;
  *((_QWORD *)&v49 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  v40 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v40 = 110;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 528) = v40 + 16;
  *(_QWORD *)(v40 + 536) = v40 + 16;
  *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v40 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
  *(_QWORD *)buf = v40;
  v41 = **a3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 8uLL, 8) = v41;
  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode((IPC::Encoder *)v40, (uint64_t)a3[1]);
  v42 = a3[2];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 8uLL, 8) = v42;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v40, a3[3]);
  LOBYTE(v42) = *((_BYTE *)a3 + 32);
  *IPC::Encoder::grow((IPC::Encoder *)v40, 1uLL, 1) = (char)v42;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a2, (IPC::Encoder **)buf, (uint64_t *)&v49, 0, 0);
  v44 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v44)
  {
    IPC::Encoder::~Encoder(v44, v43);
    WTF::fastFree(v45, v46);
  }
  v47 = v49;
  *(_QWORD *)&v49 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  return WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v51);
}

IPC::Encoder *WTF::Detail::CallableWrapper<int WebKit::LibWebRTCCodecs::encodeFrameInternal<webrtc::VideoFrame>(WebKit::LibWebRTCCodecs::Encoder &,webrtc::VideoFrame const&,BOOL,WebCore::VideoFrameRotation,WTF::MediaTime,long long,std::optional<unsigned long long>,WTF::Function<void ()(BOOL)> &&)::{lambda(webrtc::VideoFrame&)#1},void,IPC::Semaphore &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5[2];

  v2 = *(uint64_t **)(a1 + 8);
  v3 = v2[12];
  v5[0] = v2;
  v5[1] = a2;
  return IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameSemaphore>(v3, v5);
}

IPC::Encoder *IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameSemaphore>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 121;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v4, (IPC::Semaphore *)a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<int WebKit::LibWebRTCCodecs::encodeFrameInternal<webrtc::VideoFrame>(WebKit::LibWebRTCCodecs::Encoder &,webrtc::VideoFrame const&,BOOL,WebCore::VideoFrameRotation,WTF::MediaTime,long long,std::optional<unsigned long long>,WTF::Function<void ()(BOOL)> &&)::{lambda(WebCore::SharedMemoryHandle &&)#1},void,WebCore::SharedMemoryHandle>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5[2];

  v2 = *(uint64_t **)(a1 + 8);
  v3 = v2[12];
  v5[0] = v2;
  v5[1] = a2;
  return IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameMemory>(v3, v5);
}

IPC::Encoder *IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameMemory>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 120;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v4, (unint64_t)a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<BOOL,IPC::Error,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::~NativePromise(unsigned int *a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<BOOL,IPC::Error,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(_QWORD *)buf = v31;
    v29[0] = v30;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 4);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "destroying ");
                v34 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, v4, 4, v29);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  WTF::NativePromise<BOOL,IPC::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<BOOL,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v27);
  v28 = a1[16];
  if ((_DWORD)v28 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E34E8F00[v28])(buf, a1 + 14);
  a1[16] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<BOOL,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIbN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E8F28;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E8F28;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  WTF::NativePromiseBase *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  WTF *v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF *v43;
  void *v44;
  char *v45;
  WTF::StringImpl *v46;
  WTF::Lock *result;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t j;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  WTF::StringImpl *v64;
  char v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint8_t buf[4];
  char *v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *(_QWORD *)v4 = off_1E34E8FB0;
  *((_QWORD *)v4 + 1) = v3;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = "operator()";
  v63[3] = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v6 + 48);
LABEL_7:
  v10 = *(_DWORD *)(v6 + 64);
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v7))
LABEL_11:
    v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
LABEL_13:
    v12 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
    if (*v12)
    {
      v13 = v12;
      if (v12[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
        WTF::String::String((WTF::String *)&v69, " ignored already resolved or rejected ");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v68, v9);
        WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v64);
        v15 = v68;
        v68 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v18 = v69;
        v69 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v70;
        v70 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *((_QWORD *)v13 + 4);
        v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v66[0] ? (char *)v66[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          v72 = v23;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v21 = v66[0];
          v66[0] = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = (WTF *)WTF::fastFree(v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (*v13 && v13[16] >= 4u)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v21);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v34 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                    v73 = 0;
                    WTF::String::String((WTF::String *)&v74, " ignored already resolved or rejected ");
                    v75 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v35 + 16))(v35, v13, 4, v66);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                    for (i = 40; i != -8; i -= 16)
                    {
                      v38 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v22);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                v39 = __ldxr(v28);
                if (v39 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v46 = v64;
        v64 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v5 + 8))(v5);
  }
  v16 = (unsigned __int8 *)(v9 + 48);
  v64 = (WTF::StringImpl *)(v9 + 48);
  v65 = 1;
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
LABEL_37:
    v16 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_38;
  }
  if (__stxr(1u, v16))
    goto LABEL_37;
LABEL_38:
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v24)
  {
    v25 = v24;
    if (v24[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v68, " settling ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v9);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
      v27 = v67;
      v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v40 = v68;
      v68 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v69;
      v69 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *((_QWORD *)v25 + 4);
      v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v43)
      {
        WTF::String::utf8();
        v45 = v66[0] ? (char *)v66[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v72 = v45;
        _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v43 = v66[0];
        v66[0] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            v43 = (WTF *)WTF::fastFree(v43, v44);
          else
            --*(_DWORD *)v43;
        }
      }
      if (*v25 && v25[16] >= 4u)
      {
        v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v49 = *v48;
          if ((v49 & 1) != 0)
            break;
          v50 = __ldaxr(v48);
          if (v50 == v49)
          {
            if (!__stxr(v49 | 1, v48))
            {
              v51 = WTF::Logger::observers(v43);
              v52 = *(unsigned int *)(v51 + 12);
              if ((_DWORD)v52)
              {
                v53 = *(uint64_t **)v51;
                v54 = *(_QWORD *)v51 + 8 * v52;
                do
                {
                  v55 = *v53;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                  v73 = 0;
                  WTF::String::String((WTF::String *)&v74, " settling ");
                  v75 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v76, v9);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v55 + 16))(v55, v25, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v56);
                  for (j = 40; j != -8; j -= 16)
                  {
                    v58 = *(WTF::StringImpl **)&buf[j];
                    *(_QWORD *)&buf[j] = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                  }
                  ++v53;
                }
                while (v53 != (uint64_t *)v54);
              }
              v59 = __ldxr(v48);
              if (v59 == 1)
              {
                if (!__stlxr(0, v48))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v60 = v70;
      v70 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v44);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
  }
  v61 = *(unsigned int *)(v9 + 64);
  if ((_DWORD)v61 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E34E8F00[v61])(buf, v9 + 56);
  *(_QWORD *)(v9 + 56) = v5;
  *(_DWORD *)(v9 + 64) = 2;
  result = (WTF::Lock *)WTF::NativePromise<BOOL,IPC::Error,0u>::dispatchAll(v9, (unsigned __int8 **)&v64);
  if (v65)
  {
    result = v64;
    v62 = __ldxr((unsigned __int8 *)v64);
    if (v62 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v64))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  void *v9;
  WTF::NativePromiseBase **v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v23;
  int v24;
  unsigned int v25;
  WTF::NativePromiseBase **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  unsigned int *v33;
  _OWORD v34[2];

  v33 = (unsigned int *)v34 + 2;
  *(_QWORD *)&v34[0] = 1;
  v26 = (WTF::NativePromiseBase **)&v28;
  v27 = 1;
  v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    v5 = *(unsigned int *)(a1 + 84);
    memcpy(&v28, v4, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a1 + 88;
    v26 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    LODWORD(v27) = *(_DWORD *)(a1 + 80);
  }
  HIDWORD(v27) = v5;
  DWORD1(v34[0]) = 0;
  *(_QWORD *)(a1 + 80) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v4);
  v6 = *(_QWORD *)(a1 + 96);
  v23 = v6;
  v7 = *(_DWORD *)(a1 + 108);
  v24 = *(_DWORD *)(a1 + 104);
  v25 = v7;
  v33 = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)&v34[0] = 0;
  *(_QWORD *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<BOOL,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v8);
  if (HIDWORD(v27))
  {
    v10 = v26;
    v11 = 8 * HIDWORD(v27);
    do
    {
      v12 = *v10++;
      WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    v13 = v6 + 40 * v7;
    v14 = a1 + 56;
    do
    {
      v15 = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      v33 = v15;
      v16 = *(_OWORD *)(v6 + 24);
      v34[0] = *(_OWORD *)(v6 + 8);
      v34[1] = v16;
      if (v15)
      {
        v17 = v15 + 2;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v29 = 0;
        v30 = 0;
        v31 = "<chained promise>";
        v32 = 0;
        WTF::NativePromise<BOOL,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,IPC::Error,0u>::Storage>((uint64_t)v15, v14, (WTF::Logger::LogSiteIdentifier *)&v29);
        do
        {
          v19 = __ldaxr(v17);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v17));
        if (!v20)
        {
          atomic_store(1u, v15 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
        }
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = "<chained promise>";
        v32 = 0;
        WTF::NativePromise<BOOL,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,IPC::Error,0u>::Storage>(0, v14, (WTF::Logger::LogSiteIdentifier *)&v29);
      }
      WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v33);
      v6 += 40;
    }
    while (v6 != v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<BOOL,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v21);
}

unsigned __int8 *WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 113));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E34E8F50;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v20 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v20);
      result = v20;
      v20 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v20 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)&v20, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v19, a2);
    v17 = v19;
    (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v19 + 16))(&v20, v19);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v20, a2);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v20);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34E8F50;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E8F50;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10 = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, *((_QWORD *)a1 + 3));
      v8 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&v10, v9);
      (*(void (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v10, *((_QWORD *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<BOOL,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,IPC::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 64);
  v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E34E8F00[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E34E8F68[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<BOOL,IPC::Error,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E8F00[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(unint64_t *, uint64_t))off_1E34E8F00[v5])(&v21, v4);
LABEL_15:
    *(_DWORD *)(v4 + 8) = -1;
    *(_QWORD *)v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v20 = *a3;
  v6 = (_DWORD *)a2 + 1;
  v7 = *((unsigned int *)a2 + 1);
  if (HIDWORD(v20) != -1 || (_DWORD)v7 != -1)
  {
    v9 = HIDWORD(v20) == -1;
    if (HIDWORD(v20) == -1)
      v10 = -1;
    else
      v10 = HIDWORD(v20);
    if ((_DWORD)v7 != -1)
      v9 = v10 == v7;
    if (v9)
    {
      return ((uint64_t (*)(unint64_t *, unint64_t *, unint64_t *))off_1E34E8F80[v10])(&v21, &v20, a2);
    }
    else
    {
      v12 = (HIDWORD(v20) - 2) < 0xFFFFFFFD || (v7 + 1) < 3;
      v13 = !v12;
      if (v12)
        v14 = &v20;
      else
        v14 = a2;
      if (!v12)
        a2 = &v20;
      v15 = *a2;
      v21 = *a2;
      if (v13)
        v16 = (_DWORD *)&v20 + 1;
      else
        v16 = v6;
      *((_DWORD *)a2 + 1) = -1;
      if (v13)
        v17 = v6;
      else
        v17 = (_DWORD *)&v20 + 1;
      v18 = *((unsigned int *)v14 + 1);
      v19 = HIDWORD(v15);
      if ((_DWORD)v18 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E34E8F90[v18])(&v22);
        *v16 = v18;
      }
      *v17 = -1;
      if ((_DWORD)v19 != -1)
      {
        result = ((uint64_t (*)(char *, unint64_t *, unint64_t *))off_1E34E8F90[v19])(&v22, v14, &v21);
        *v17 = v19;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E8F00[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJbN3IPC5ErrorEEE6__swapB8sn180100ERS9_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS8_EEESK_EEEDcSB_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJbN3IPC5ErrorEEE6__swapB8sn180100ERS9_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS8_EEESK_EEEDcSB_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbS9_EEEEEvRSB_OT_EUlRSG_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEEOSP_EEEDcSG_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbS9_EEEEEvRSB_OT_EUlRSG_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEEOSP_EEEDcSG_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E8FB0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E8FB0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,IPC::Error>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  char v4;
  _BOOL4 v5;

  result = *(uint64_t **)(a1 + 8);
  if (!result)
  {
    v4 = 1;
    goto LABEL_7;
  }
  v4 = 13;
  if (!*result)
  {
LABEL_7:
    v5 = 1;
    goto LABEL_8;
  }
  result = (uint64_t *)IPC::Decoder::decode<std::tuple<BOOL>>(result);
  v5 = (unsigned __int16)result < 0x100u;
  if (((unsigned __int16)result & 0xFF00) != 0)
    v4 = (char)result;
  else
    v4 = 13;
LABEL_8:
  *(_BYTE *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v5;
  return result;
}

uint64_t *WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<BOOL,IPC::Error,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs19encodeFrameInternalIN6webrtc10VideoFrameEEEiRNS8_7EncoderERKT_bN7WebCore18VideoFrameRotationENS_9MediaTimeExNSt3__18optionalIyEEONS_8FunctionIFvbEEEEUlOSE_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESR_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS4_EEE_vJS14_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E8FD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs19encodeFrameInternalIN6webrtc10VideoFrameEEEiRNS8_7EncoderERKT_bN7WebCore18VideoFrameRotationENS_9MediaTimeExNSt3__18optionalIyEEONS_8FunctionIFvbEEEEUlOSE_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESR_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS4_EEE_vJS14_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E8FD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs19encodeFrameInternalIN6webrtc10VideoFrameEEEiRNS8_7EncoderERKT_bN7WebCore18VideoFrameRotationENS_9MediaTimeExNSt3__18optionalIyEEONS_8FunctionIFvbEEEEUlOSE_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESR_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS4_EEE_vJS14_EE4callES14_(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;

  if (*(_DWORD *)(a2 + 4))
    v2 = 1;
  else
    v2 = *(_BYTE *)a2 == 0;
  v3 = !v2;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v3);
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34E9000;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34E9030;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34E9000;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34E9030;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  WTF *v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  unsigned __int8 *v37;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  char *v44;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[16];
  const char *v56;
  uint64_t v57;
  int v58;
  int v59;
  _DWORD v60[4];
  uint64_t v61;
  int v62;
  _DWORD v63[8];
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 4);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v44 = (char *)v10;
    WTF::String::String((WTF::String *)&v53, v10);
    WTF::String::String((WTF::String *)&v52, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v50, "[");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v49, a2);
    WTF::String::String((WTF::String *)&v48, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v46, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v46;
    v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v47;
    v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v48;
    v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v49;
    v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v50;
    v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v51;
    v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v52;
    v52 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v53;
    v53 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = (WTF *)os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v22 = v45[0];
      v45[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = (WTF *)WTF::fastFree(v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers(v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v43 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], v44);
                LODWORD(v56) = 0;
                WTF::String::String((WTF::String *)&v57, " then() call made from ");
                v58 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v59 = 0;
                WTF::String::String((WTF::String *)v60, "[");
                v60[2] = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v61, a2);
                v62 = 0;
                WTF::String::String((WTF::String *)v63, " callback:");
                v63[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v63[6] = 0;
                WTF::String::String((WTF::String *)v64, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v31 + 16))(v31, v9, 4, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v32);
                for (i = 120; i != -8; i -= 16)
                {
                  v34 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v43);
            }
            v35 = __ldxr(v25);
            if (v35 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v36 = v54;
    v54 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v37 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v37))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_80:
  v39 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
      goto LABEL_85;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
LABEL_85:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v39)
  {
    *(_OWORD *)buf = 0uLL;
    v56 = "<chained completion promise>";
    v57 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v39, (WTF::NativePromiseBase *)buf);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v39)
  {
    v41 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v39);
    return WTF::fastFree((WTF *)v41, v42);
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF *v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::NativePromiseBase **v35;
  int v36;
  uint64_t v37;
  WTF::NativePromiseBase *v38;
  WTF::Lock *v39;
  int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  WTF::NativePromiseBase *v54;
  WTF::Lock *v55;
  char v56;
  WTF *v57[2];
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint8_t buf[4];
  char *v68;
  int v69;
  _DWORD v70[4];
  uint64_t v71;
  int v72;
  _DWORD v73[8];
  _DWORD v74[4];
  uint64_t v75;
  int v76;
  _QWORD v77[3];

  v77[1] = *MEMORY[0x1E0C80C00];
  v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    v3 = *a1;
    a1[1] = 0;
    v4 = (WTF::NativePromiseBase *)(v3 + 48);
    v54 = v2;
    v55 = (WTF::Lock *)(v3 + 48);
    v56 = 1;
    if (__ldaxr((unsigned __int8 *)(v3 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
LABEL_7:
      *(_BYTE *)(v3 + 112) = 1;
      v6 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
      if (*v6)
      {
        v7 = v6;
        if (v6[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 2));
          WTF::String::String((WTF::String *)&v64, " invoking maybeSettle() [");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v63, v3);
          WTF::String::String((WTF::String *)&v62, " callback:");
          WTF::LogArgument<void const*>::toString();
          WTF::String::String((WTF::String *)&v60, " isNothing:");
          WTF::LogArgument<BOOL>::toString<BOOL>(&v59);
          WTF::String::String((WTF::String *)&v58, "]");
          result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v65, (uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t *)&v61, (uint64_t *)&v60, (uint64_t *)&v59, (uint64_t *)&v58, &v66);
          if (!v66)
          {
            __break(0xC471u);
            return result;
          }
          v10 = v58;
          v58 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v9);
            else
              *(_DWORD *)v10 -= 2;
          }
          v11 = v59;
          v59 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v9);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v60;
          v60 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v9);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = v61;
          v61 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v9);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = v62;
          v62 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v9);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v63;
          v63 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v9);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = v64;
          v64 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v9);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = v65;
          v65 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v9);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = *((_QWORD *)v7 + 4);
          v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v19)
          {
            WTF::String::utf8();
            v21 = v57[0] ? (char *)v57[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            v68 = v21;
            _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v19 = v57[0];
            v57[0] = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 1)
                v19 = (WTF *)WTF::fastFree(v19, v20);
              else
                --*(_DWORD *)v19;
            }
          }
          if (*v7 && v7[16] >= 4u)
          {
            v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v23 = *v22;
              if ((v23 & 1) != 0)
                break;
              v24 = __ldaxr(v22);
              if (v24 == v23)
              {
                if (!__stxr(v23 | 1, v22))
                {
                  v25 = WTF::Logger::observers(v19);
                  v26 = *(unsigned int *)(v25 + 12);
                  if ((_DWORD)v26)
                  {
                    v27 = *(uint64_t **)v25;
                    v53 = *(_QWORD *)v25 + 8 * v26;
                    do
                    {
                      v28 = *v27;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 2));
                      v69 = 0;
                      WTF::String::String((WTF::String *)v70, " invoking maybeSettle() [");
                      v70[2] = 0;
                      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v71, v3);
                      v72 = 0;
                      WTF::String::String((WTF::String *)v73, " callback:");
                      v73[2] = 0;
                      WTF::LogArgument<void const*>::toString();
                      v73[6] = 0;
                      WTF::String::String((WTF::String *)v74, " isNothing:");
                      v74[2] = 0;
                      WTF::LogArgument<BOOL>::toString<BOOL>(&v75);
                      v76 = 0;
                      WTF::String::String((WTF::String *)v77, "]");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v57, (uint64_t)buf, 8uLL);
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, v7, 4, v57);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v29);
                      for (i = 120; i != -8; i -= 16)
                      {
                        v31 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v31)
                        {
                          if (*(_DWORD *)v31 == 2)
                            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                          else
                            *(_DWORD *)v31 -= 2;
                        }
                      }
                      ++v27;
                    }
                    while (v27 != (uint64_t *)v53);
                  }
                  v32 = __ldxr(v22);
                  if (v32 == 1)
                  {
                    if (!__stlxr(0, v22))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v33 = v66;
          v66 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v20);
            else
              *(_DWORD *)v33 -= 2;
          }
        }
      }
      if (*(_DWORD *)(v3 + 64))
      {
        WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(v54, v3, (unsigned __int8 **)&v55);
      }
      else
      {
        v34 = *(unsigned int *)(v3 + 84);
        if ((_DWORD)v34 == *(_DWORD *)(v3 + 80))
        {
          v35 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 72, v34 + 1, (unint64_t)&v54);
          v34 = *(unsigned int *)(v3 + 84);
          v36 = v34 + 1;
          v37 = *(_QWORD *)(v3 + 72);
          v38 = *v35;
          *v35 = 0;
        }
        else
        {
          v36 = v34 + 1;
          v37 = *(_QWORD *)(v3 + 72);
          v38 = v54;
          v54 = 0;
        }
        *(_QWORD *)(v37 + 8 * v34) = v38;
        *(_DWORD *)(v3 + 84) = v36;
      }
      if (!v56)
        goto LABEL_88;
      v39 = v55;
      v40 = __ldxr((unsigned __int8 *)v55);
      if (v40 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v55))
        {
LABEL_88:
          v41 = (unsigned int *)v54;
          v54 = 0;
          if (v41)
          {
            v42 = v41 + 2;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v41 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
            }
          }
          v45 = (unsigned int *)a1[1];
          a1[1] = 0;
          if (v45)
          {
            v46 = v45 + 2;
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              atomic_store(1u, v45 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
            }
          }
          goto LABEL_98;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v39);
      goto LABEL_88;
    }
    v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C]();
    goto LABEL_7;
  }
  a1[1] = 0;
LABEL_98:
  v49 = (unsigned int *)*a1;
  *a1 = 0;
  if (v49)
  {
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
    }
  }
  return (uint64_t)a1;
}

IPC::Encoder *WTF::Detail::CallableWrapper<int WebKit::LibWebRTCCodecs::encodeFrameInternal<WebCore::VideoFrame>(WebKit::LibWebRTCCodecs::Encoder &,WebCore::VideoFrame const&,BOOL,WebCore::VideoFrameRotation,WTF::MediaTime,long long,std::optional<unsigned long long>,WTF::Function<void ()(BOOL)> &&)::{lambda(WebCore::VideoFrame&)#1},void,IPC::Semaphore &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5[2];

  v2 = *(uint64_t **)(a1 + 8);
  v3 = v2[12];
  v5[0] = v2;
  v5[1] = a2;
  return IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameSemaphore>(v3, v5);
}

IPC::Encoder *WTF::Detail::CallableWrapper<int WebKit::LibWebRTCCodecs::encodeFrameInternal<WebCore::VideoFrame>(WebKit::LibWebRTCCodecs::Encoder &,WebCore::VideoFrame const&,BOOL,WebCore::VideoFrameRotation,WTF::MediaTime,long long,std::optional<unsigned long long>,WTF::Function<void ()(BOOL)> &&)::{lambda(WebCore::SharedMemoryHandle &&)#1},void,WebCore::SharedMemoryHandle>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5[2];

  v2 = *(uint64_t **)(a1 + 8);
  v3 = v2[12];
  v5[0] = v2;
  v5[1] = a2;
  return IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameMemory>(v3, v5);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs19encodeFrameInternalIN7WebCore10VideoFrameEEEiRNS8_7EncoderERKT_bNSA_18VideoFrameRotationENS_9MediaTimeExNSt3__18optionalIyEEONS_8FunctionIFvbEEEEUlOSE_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESQ_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS4_EEE_vJS13_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E90D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs19encodeFrameInternalIN7WebCore10VideoFrameEEEiRNS8_7EncoderERKT_bNSA_18VideoFrameRotationENS_9MediaTimeExNSt3__18optionalIyEEONS_8FunctionIFvbEEEEUlOSE_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESQ_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS4_EEE_vJS13_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E90D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs19encodeFrameInternalIN7WebCore10VideoFrameEEEiRNS8_7EncoderERKT_bNSA_18VideoFrameRotationENS_9MediaTimeExNSt3__18optionalIyEEONS_8FunctionIFvbEEEEUlOSE_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESQ_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS4_EEE_vJS13_EE4callES13_(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;

  if (*(_DWORD *)(a2 + 4))
    v2 = 1;
  else
    v2 = *(_BYTE *)a2 == 0;
  v3 = !v2;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v3);
}

uint64_t *IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v3 = *a1;
  *a1 = 0;
  v4 = *(_OWORD *)(a1 + 3);
  v9 = *(_OWORD *)(a1 + 1);
  v10 = v4;
  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v5 = off_1E34E9100;
  *(_QWORD *)(v5 + 8) = v3;
  v8 = 0;
  v6 = v10;
  *(_OWORD *)(v5 + 16) = v9;
  *(_OWORD *)(v5 + 32) = v6;
  *a2 = v5;
  a2[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  return WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(&v8);
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34E9100;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34E9100;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34E9128;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34E9128;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34E9128;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::call@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  _QWORD *v2;
  __int16 v3;

  v2 = *(_QWORD **)(result + 8);
  if (v2)
  {
    if (*v2)
    {
      *a2 = 0;
      return result;
    }
    v3 = 269;
  }
  else
  {
    v3 = 257;
  }
  *a2 = v3;
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,unsigned int,unsigned int>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LODWORD(v2) = *((_DWORD *)v2 + 3);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::setEncodeRates(WebKit::LibWebRTCCodecs::Encoder &,unsigned int,unsigned int)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  uint64_t *v7[2];

  if (!**(_BYTE **)(result + 16))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 8);
    v3 = (unsigned __int8 *)(v2 + 57);
    if (__ldaxr((unsigned __int8 *)(v2 + 57)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEABB3C](v2 + 57);
LABEL_6:
    v5 = *(_QWORD *)(v2 + 64);
    v7[0] = (uint64_t *)(v1 + 24);
    v7[1] = *(uint64_t **)(v1 + 32);
    result = IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetEncodeRates>(v5, v7, 0, 0, 0);
    v6 = __ldxr(v3);
    if (v6 == 1)
    {
      if (!__stlxr(0, v3))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 57));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;

  *a1 = &off_1E34E9178;
  v2 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;

  *(_QWORD *)this = &off_1E34E9178;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  char v23;
  char v24;
  IPC::Semaphore *v25;
  uint64_t v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  int v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  os_unfair_lock_s *v50;
  IPC::Semaphore *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned __int8 **v56;
  unsigned __int8 *v57;
  int v59;
  unsigned __int8 **v60;
  uint64_t v61;
  IPC::Semaphore *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  IPC::Semaphore *v66;
  WTF *v67;
  void *v68;
  uint64_t v69;
  uint64_t result;
  int v71;
  unsigned __int8 *v72;
  IPC::Semaphore *v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;

  v2 = *(_QWORD *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(v2 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)(v2 + 57)))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v2 + 57);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 32);
  v72 = (unsigned __int8 *)(v2 + 57);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (_QWORD *)(v4 + 16 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = *(_QWORD **)(v2 + 32);
      if ((_DWORD)v5)
      {
        v8 = 16 * v5;
        v7 = *(_QWORD **)(v2 + 32);
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          v8 -= 16;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v7 = (_QWORD *)(v4 + 16 * v5);
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (_QWORD *)(v4 + 16 * v5);
  if (v4)
  {
LABEL_12:
    v9 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    goto LABEL_17;
  }
  v9 = 0;
LABEL_17:
  while (v7 != v9)
  {
    v10 = (unsigned __int8 *)(v7[1] + 104);
    if (__ldaxr(v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_28;
    }
    MEMORY[0x19AEABB3C](v10);
LABEL_28:
    while (1)
    {
      v18 = v7[1];
      v19 = (uint64_t *)(v18 + 72);
      v16 = *(_QWORD *)(v18 + 72);
      if (v16 == *(_QWORD *)(v18 + 80))
        break;
      v12 = *(_QWORD *)(v18 + 88);
      v13 = *(_QWORD *)(v12 + 8 * v16);
      *(_QWORD *)(v12 + 8 * v16) = 0;
      v14 = *(_QWORD *)(v18 + 88);
      v15 = *(_QWORD *)(v14 + 8 * v16);
      *(_QWORD *)(v14 + 8 * v16) = 0;
      if (v15)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v16 = *v19;
      }
      if (v16 == *(unsigned int *)(v18 + 96) - 1)
        v17 = 0;
      else
        v17 = v16 + 1;
      *v19 = v17;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    v20 = __ldxr(v10);
    if (v20 != 1)
    {
      __clrex();
LABEL_33:
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      goto LABEL_34;
    }
    if (__stlxr(0, v10))
      goto LABEL_33;
LABEL_34:
    v21 = v7[1];
    v22 = *(os_unfair_lock_s **)(a1 + 16);
    v23 = *(_BYTE *)(v2 + 134);
    v24 = *(_BYTE *)(v2 + 136);
    v25 = (IPC::Semaphore *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v25 = off_1E34E91A0;
    v73 = v25;
    WebKit::createRemoteDecoder(v21, v22, v23, v24, (uint64_t *)&v73);
    if (v73)
      (*(void (**)(IPC::Semaphore *))(*(_QWORD *)v73 + 8))(v73);
    v26 = v7[1];
    v27 = *(unsigned __int8 ***)(a1 + 16);
    if (!v27)
      goto LABEL_46;
    v28 = *v27;
    if (__ldaxr(*v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, v28))
    {
      goto LABEL_41;
    }
    MEMORY[0x19AEABB3C](v28);
LABEL_41:
    ++*((_QWORD *)v28 + 1);
    v30 = __ldxr(v28);
    if (v30 == 1)
    {
      if (!__stlxr(0, v28))
        goto LABEL_46;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_46:
    v73 = (IPC::Semaphore *)v27;
    WebKit::LibWebRTCCodecs::setDecoderConnection(v26, (uint64_t *)&v73);
    if (v73)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((unsigned __int8 **)v73);
    v31 = v7 + 2;
    v7 = v6;
    if (v31 != v6)
    {
      v7 = v31;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        v7 += 2;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  v32 = __ldxr(v72);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, v72))
LABEL_58:
    WTF::Lock::unlockSlow((WTF::Lock *)v72);
  v33 = *(_QWORD *)(v2 + 48);
  if (v33)
  {
    v34 = *(unsigned int *)(v33 - 4);
    v35 = (_QWORD *)(v33 + 16 * v34);
    if (*(_DWORD *)(v33 - 12))
    {
      v36 = *(_QWORD **)(v2 + 48);
      if ((_DWORD)v34)
      {
        v37 = 16 * v34;
        v36 = *(_QWORD **)(v2 + 48);
        while ((unint64_t)(*v36 + 1) <= 1)
        {
          v36 += 2;
          v37 -= 16;
          if (!v37)
          {
            v36 = v35;
            goto LABEL_66;
          }
        }
      }
      goto LABEL_66;
    }
    v36 = (_QWORD *)(v33 + 16 * v34);
  }
  else
  {
    v36 = 0;
    v34 = 0;
  }
  v35 = (_QWORD *)(v33 + 16 * v34);
  if (v33)
  {
LABEL_66:
    v38 = (_QWORD *)(v33 + 16 * *(unsigned int *)(v33 - 4));
    goto LABEL_71;
  }
  v38 = 0;
LABEL_71:
  while (v36 != v38)
  {
    v39 = v36[1];
    *(_BYTE *)(v39 + 121) = 1;
    MEMORY[0x19AEBA1A0](*(unsigned int *)(*(_QWORD *)(v39 + 104) + 4));
    v40 = v36 + 2;
    v36 = v35;
    if (v40 != v35)
    {
      v36 = v40;
      while ((unint64_t)(*v36 + 1) <= 1)
      {
        v36 += 2;
        if (v36 == v35)
        {
          v36 = v35;
          break;
        }
      }
    }
  }
  v41 = (unsigned __int8 *)(v2 + 40);
  if (__ldaxr((unsigned __int8 *)(v2 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v41))
  {
    goto LABEL_82;
  }
  MEMORY[0x19AEABB3C](v2 + 40);
LABEL_82:
  v43 = *(_QWORD *)(v2 + 48);
  if (!v43)
  {
    v46 = 0;
    v44 = 0;
LABEL_91:
    v45 = v43 + 16 * v44;
    goto LABEL_92;
  }
  v44 = *(unsigned int *)(v43 - 4);
  v45 = v43 + 16 * v44;
  if (!*(_DWORD *)(v43 - 12))
  {
    v46 = v43 + 16 * v44;
    goto LABEL_91;
  }
  v46 = *(_QWORD *)(v2 + 48);
  if ((_DWORD)v44)
  {
    v47 = 16 * v44;
    v46 = v43;
    while ((unint64_t)(*(_QWORD *)v46 + 1) <= 1)
    {
      v46 += 16;
      v47 -= 16;
      if (!v47)
      {
        v46 = v45;
        break;
      }
    }
  }
LABEL_92:
  if (v43)
    v48 = v43 + 16 * *(unsigned int *)(v43 - 4);
  else
    v48 = 0;
  while (v46 != v48)
  {
    v49 = *(uint64_t **)(v46 + 8);
    v50 = *(os_unfair_lock_s **)(a1 + 16);
    v51 = (IPC::Semaphore *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v51 = off_1E34E91C8;
    v73 = v51;
    WebKit::createRemoteEncoder(v49, v50, (uint64_t)(v49 + 3), (uint64_t *)&v73);
    if (v73)
      (*(void (**)(IPC::Semaphore *))(*(_QWORD *)v73 + 8))(v73);
    v52 = *(_QWORD *)(v46 + 8);
    if (*(_BYTE *)(v52 + 60))
    {
      v53 = *(_QWORD *)(a1 + 16);
      v54 = *(_DWORD *)(v52 + 40);
      v55 = *(_DWORD *)(v52 + 56);
      v73 = *(IPC::Semaphore **)(v46 + 8);
      LODWORD(v74) = v54;
      v75 = v52 + 44;
      v76 = v52 + 48;
      v77 = v52 + 52;
      v78 = v55;
      IPC::Connection::send<Messages::LibWebRTCCodecsProxy::InitializeEncoder>(v53, (uint64_t **)&v73);
      v52 = *(_QWORD *)(v46 + 8);
    }
    v56 = *(unsigned __int8 ***)(a1 + 16);
    if (!v56)
      goto LABEL_110;
    v57 = *v56;
    if (__ldaxr(*v56))
    {
      __clrex();
    }
    else if (!__stxr(1u, v57))
    {
      goto LABEL_105;
    }
    MEMORY[0x19AEABB3C](v57);
LABEL_105:
    ++*((_QWORD *)v57 + 1);
    v59 = __ldxr(v57);
    if (v59 == 1)
    {
      if (!__stlxr(0, v57))
        goto LABEL_110;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v57);
LABEL_110:
    v60 = *(unsigned __int8 ***)(v52 + 96);
    *(_QWORD *)(v52 + 96) = v56;
    if (v60)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v60);
    WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)&v73);
    v61 = *(_QWORD *)(v46 + 8);
    v62 = v73;
    v73 = 0;
    std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)(v61 + 104), v62);
    v63 = v74;
    v74 = 0;
    v64 = *(unsigned int **)(v61 + 112);
    *(_QWORD *)(v61 + 112) = v63;
    if (v64)
    {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v64);
      v65 = v74;
      *(_WORD *)(v61 + 120) = v75;
      *(_BYTE *)(v61 + 122) = BYTE2(v75);
      v74 = 0;
      if (v65)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v65);
    }
    else
    {
      *(_WORD *)(v61 + 120) = v75;
      *(_BYTE *)(v61 + 122) = BYTE2(v75);
      v74 = 0;
    }
    v66 = v73;
    v73 = 0;
    if (v66)
    {
      IPC::Semaphore::destroy(v66);
      WTF::MachSendRight::~MachSendRight(v66);
      WTF::fastFree(v67, v68);
    }
    v69 = v46 + 16;
    v46 = v45;
    if (v69 != v45)
    {
      v46 = v69;
      while ((unint64_t)(*(_QWORD *)v46 + 1) <= 1)
      {
        v46 += 16;
        if (v46 == v45)
        {
          v46 = v45;
          break;
        }
      }
    }
  }
  result = (uint64_t)v41;
  v71 = __ldxr(v41);
  if (v71 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v41);
  }
  if (__stlxr(0, v41))
    return WTF::Lock::unlockSlow((WTF::Lock *)v41);
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::startRecording(uint64_t a1, WebCore::MediaStreamPrivate *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL *v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL *v27;
  void *v28;
  uint64_t v29;
  IPC::Encoder *result;
  WTF *v31;
  void *v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  void *v40;
  size_t v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44[2];
  IPC::Encoder *v45;

  v4 = WebCore::MediaRecorderPrivate::selectTracks(*(WebCore::MediaRecorderPrivate **)(a1 + 72), a2);
  v6 = v5;
  v42 = *(os_unfair_lock_s **)(a1 + 80);
  v43 = *(_QWORD *)(a1 + 64);
  v7 = v4 != 0;
  v8 = v5 != 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1);
  v9 = *(unsigned int **)(a1 + 56);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  if (v4)
    ++*(_DWORD *)(v4 + 8);
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v12 = &off_1E34E97A8;
  v12[1] = v9;
  v12[2] = v4;
  v12[3] = v6;
  v12[4] = v11;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 1180;
  *(_QWORD *)(v14 + 8) = 0;
  v15 = (void *)(v14 + 16);
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v45 = (IPC::Encoder *)v14;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, &v43);
  v16 = *(_QWORD *)(v14 + 544);
  v17 = v16 + 1;
  v18 = *(_QWORD *)(v14 + 552);
  if (v18 < v16 + 1)
  {
    v33 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v34 = v33;
      v33 *= 2;
    }
    while (v34 < v17);
    v41 = v34;
    v35 = (char *)mmap(0, v34, 3, 4098, -1, 0);
    if (v35 == (char *)-1)
      goto LABEL_28;
    v19 = v35;
    memcpy(v35, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v36 = *(void **)(v14 + 528);
    if (v36 != v15)
      munmap(v36, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v19;
    *(_QWORD *)(v14 + 552) = v41;
    v20 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v19 = *(char **)(v14 + 528);
    v20 = *(_QWORD *)(v14 + 544);
  }
  bzero(&v19[v20], v16 - v20);
  *(_QWORD *)(v14 + 544) = v17;
  v21 = (BOOL *)(*(_QWORD *)(v14 + 528) + v16);
  *(_QWORD *)(v14 + 536) = v21 + 1;
  *v21 = v7;
  v22 = *(_QWORD *)(v14 + 544);
  v23 = v22 + 1;
  v24 = *(_QWORD *)(v14 + 552);
  if (v24 >= v22 + 1)
  {
    v25 = *(char **)(v14 + 528);
    v26 = *(_QWORD *)(v14 + 544);
    goto LABEL_11;
  }
  v37 = (2 * v24 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v38 = v37;
    v37 *= 2;
  }
  while (v38 < v23);
  v39 = (char *)mmap(0, v38, 3, 4098, -1, 0);
  if (v39 == (char *)-1)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1975B0178);
  }
  v25 = v39;
  memcpy(v39, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
  v40 = *(void **)(v14 + 528);
  if (v40 != v15)
    munmap(v40, *(_QWORD *)(v14 + 552));
  *(_QWORD *)(v14 + 528) = v25;
  *(_QWORD *)(v14 + 552) = v38;
  v26 = *(_QWORD *)(v14 + 544);
LABEL_11:
  bzero(&v25[v26], v22 - v26);
  *(_QWORD *)(v14 + 544) = v23;
  v27 = (BOOL *)(*(_QWORD *)(v14 + 528) + v22);
  *(_QWORD *)(v14 + 536) = v27 + 1;
  *v27 = v8;
  IPC::ArgumentCoder<WebCore::MediaRecorderPrivateOptions,void>::encode((IPC::Encoder *)v14, a1 + 200);
  v44[0] = (uint64_t)v12;
  v44[1] = v13;
  IPC::Connection::sendMessageWithAsyncReply(v42, &v45, v44, 0, 0);
  v29 = v44[0];
  v44[0] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  result = v45;
  v45 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v28);
    return (IPC::Encoder *)WTF::fastFree(v31, v32);
  }
  return result;
}

void WebKit::MediaRecorderPrivate::~MediaRecorderPrivate(WebKit::MediaRecorderPrivate *this)
{
  unsigned __int8 ***v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned int *v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WebCore::CARingBuffer *v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  IPC::Encoder *v28;

  v2 = (unsigned __int8 ***)((char *)this + 80);
  v3 = *((_QWORD *)this + 10);
  v27 = *((_QWORD *)this + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1181;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v28 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v27);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v28, 0, 0);
  v6 = v28;
  v28 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  v9 = (unsigned int *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 32, 0);
  v11 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 8), v10);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v13)
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((_DWORD)this + 184, v13);
  if (*((_BYTE *)this + 176))
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::MediaRecorderPrivate *)((char *)this + 96));
  v14 = (WebCore::CARingBuffer *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v14)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 88, v14);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v2);
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 16) == 1)
    {
      v17 = (WTF *)MEMORY[0x19AEAFE08](v16, v15);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)(v16 + 16);
    }
  }
  v19 = *((_QWORD *)this + 7);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v15);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  *(_QWORD *)this = off_1E34E9530;
  *((_QWORD *)this + 1) = &unk_1E34E95A8;
  if (*((_QWORD *)this + 3))
    WebCore::RealtimeMediaSource::removeAudioSampleObserver();
  if (*((_QWORD *)this + 4))
    WebCore::RealtimeMediaSource::removeVideoFrameObserver();
  v23 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
  v24 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 144))(v24);
  v25 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 144))(v25);
  v26 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 144))(v26);
}

void `non-virtual thunk to'WebKit::MediaRecorderPrivate::~MediaRecorderPrivate(WebKit::MediaRecorderPrivate *this)
{
  WebKit::MediaRecorderPrivate::~MediaRecorderPrivate((WebKit::MediaRecorderPrivate *)((char *)this - 8));
}

{
  WebKit::MediaRecorderPrivate::operator delete((WebKit::MediaRecorderPrivate *)((char *)this - 8));
}

double WebKit::MediaRecorderPrivate::operator delete(WebKit::MediaRecorderPrivate *a1)
{
  uint64_t v1;
  void *v2;
  double result;

  WebKit::MediaRecorderPrivate::~MediaRecorderPrivate(a1);
  if (*(_DWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 272) = 0;
    result = 0.0;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::videoFrameAvailable(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 *v5;
  _QWORD *v6;
  IPC::Encoder *result;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  char v15;
  __int16 v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  __int128 *v20;

  if (*(_BYTE *)(a1 + 21))
  {
    if (*(_BYTE *)(a1 + 244))
    {
      v4 = *(_QWORD *)(a1 + 236);
    }
    else
    {
      v10 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v4 = (int)v10 | ((unint64_t)(int)v11 << 32);
      if (!*(_BYTE *)(a1 + 244))
        *(_BYTE *)(a1 + 244) = 1;
      *(_QWORD *)(a1 + 236) = v4;
    }
    v14 = *(_OWORD *)(a2 + 16);
    v15 = *(_BYTE *)(a2 + 32);
    v16 = *(_WORD *)(a2 + 34);
    v17 = v4;
    v18 = 3;
    v12 = *(_QWORD *)(a1 + 80);
    v20 = &v14;
    result = IPC::Connection::send<Messages::RemoteMediaRecorder::VideoFrameAvailable>(v12, (uint64_t *)&v20, *(_QWORD *)(a1 + 64));
    v9 = v18;
    if (v18 != -1)
      return (IPC::Encoder *)((uint64_t (*)(__int128 **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v9])(&v20, &v17);
  }
  else
  {
    *(_BYTE *)(a1 + 236) = 0;
    *(_BYTE *)(a1 + 244) = 0;
    v5 = (__int128 *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E34E97D0;
    *((_QWORD *)v5 + 1) = a1;
    v20 = v5;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E34E97F8;
    v6[1] = a1;
    v13 = v6;
    WebKit::SharedVideoFrameWriter::write((_QWORD *)(a1 + 256), a2, (uint64_t *)&v20, &v13, (uint64_t)&v14);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    result = (IPC::Encoder *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v5 + 8))(v5);
    if (v19)
    {
      v8 = *(_QWORD *)(a1 + 80);
      v20 = &v14;
      result = IPC::Connection::send<Messages::RemoteMediaRecorder::VideoFrameAvailable>(v8, (uint64_t *)&v20, *(_QWORD *)(a1 + 64));
      if (v19)
      {
        v9 = v18;
        if (v18 != -1)
          return (IPC::Encoder *)((uint64_t (*)(__int128 **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v9])(&v20, &v17);
      }
    }
  }
  return result;
}

void WebKit::SharedVideoFrameWriter::write(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v7;
  int v8;
  _BYTE v9[16];
  int v10;
  _BYTE v11[16];
  int v12;
  char v13;
  char v14;

  WebKit::SharedVideoFrameWriter::writeBuffer(a1, a2, a3, a4, (uint64_t)v11);
  if (v13)
  {
    v7 = *(_OWORD *)(a2 + 16);
    LOBYTE(v8) = *(_BYTE *)(a2 + 32);
    HIWORD(v8) = *(_WORD *)(a2 + 34);
    v9[0] = 0;
    v10 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v9, (uint64_t)v11);
    *(_OWORD *)a5 = v7;
    *(_DWORD *)(a5 + 16) = v8;
    *(_BYTE *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>(a5 + 24, (uint64_t)v9);
    *(_BYTE *)(a5 + 48) = 1;
    if (v10 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v10])(&v14, v9);
    if (v13)
    {
      if (v12 != -1)
        ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v12])(&v7, v11);
    }
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 48) = 0;
  }
}

IPC::Encoder *`non-virtual thunk to'WebKit::MediaRecorderPrivate::videoFrameAvailable(uint64_t a1, uint64_t a2)
{
  return WebKit::MediaRecorderPrivate::videoFrameAvailable(a1 - 8, a2);
}

IPC::Encoder *WebKit::MediaRecorderPrivate::audioSamplesAvailable(uint64_t a1, _QWORD *a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
  WebCore::CAAudioStreamDescription *v10;
  uint64_t v11;
  double v12;
  const AudioStreamBasicDescription *v13;
  WebCore::CARingBuffer *v14;
  WebCore::CARingBuffer *v15;
  WebCore::CARingBuffer *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  WebCore::CARingBuffer *v26;
  WebCore::WebAudioBufferList *v27;
  WTF **v28;
  WebCore::CARingBuffer *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  void *v41;
  IPC::Encoder *result;
  WTF *v43;
  void *v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  void *v48;
  WebCore::CARingBuffer *v49;
  _BYTE v50[24];
  IPC::Encoder *v51[10];
  _QWORD v52[2];
  __int128 v53;
  char v54;
  IPC::Encoder *v55;

  v10 = (WebCore::CAAudioStreamDescription *)(a1 + 96);
  if (!*(_BYTE *)(a1 + 176) || (WebCore::CAAudioStreamDescription::operator==() & 1) == 0)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    if (*(_DWORD *)(v11 + 16) != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_39;
    }
    std::optional<WebCore::CAAudioStreamDescription>::operator=[abi:sn180100]<AudioStreamBasicDescription const&,void>(v10, *(const AudioStreamBasicDescription **)(v11 + 8));
    if (!*(_BYTE *)(a1 + 176)
      || (WebCore::CAAudioStreamDescription::sampleRate(v10),
          *(_QWORD *)(a1 + 192) = (unint64_t)(v12 + v12),
          !*(_BYTE *)(a1 + 176)))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v13 = (const AudioStreamBasicDescription *)WebCore::CAAudioStreamDescription::streamDescription(v10);
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v51, v13);
    WebKit::ProducerSharedCARingBuffer::allocate((WebKit::ProducerSharedCARingBuffer *)v51, *(const WebCore::CAAudioStreamDescription **)(a1 + 192), (uint64_t)v52);
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v51);
    if (!v54)
    {
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1975B0AE0);
    }
    v14 = (WebCore::CARingBuffer *)v52[0];
    v52[0] = 0;
    v49 = v14;
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)&v50[8] = v53;
    v15 = *(WebCore::CARingBuffer **)(a1 + 88);
    v16 = v49;
    v49 = 0;
    *(_QWORD *)(a1 + 88) = v16;
    if (v15)
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 88, v15);
    v17 = *(_QWORD *)(a1 + 80);
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v51, v13);
    v18 = *(_QWORD *)(a1 + 64);
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 1183;
    *(_QWORD *)(v19 + 8) = v18;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v55 = (IPC::Encoder *)v19;
    IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode((IPC::Encoder *)v19, (unint64_t)v50);
    v20 = (_QWORD *)WebCore::CAAudioStreamDescription::streamDescription((WebCore::CAAudioStreamDescription *)v51);
    IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode((IPC::Encoder *)v19, v20);
    IPC::Connection::sendMessageImpl(v17, (uint64_t *)&v55, 0, 0);
    v22 = v55;
    v55 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v23, v24);
    }
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v51);
    v25 = *(WTF **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = 0;
    if (v25)
      std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](a1 + 184, v25);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v50);
    v26 = v49;
    v49 = 0;
    if (v26)
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v49, v26);
    std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52);
  }
  if (*(_BYTE *)(a1 + 20))
  {
    v28 = (WTF **)(a1 + 184);
    v27 = *(WebCore::WebAudioBufferList **)(a1 + 184);
    if (v27)
    {
      WebCore::WebAudioBufferList::setSampleCount(v27);
LABEL_24:
      WebCore::WebAudioBufferList::zeroFlatBuffer(*(WebCore::WebAudioBufferList **)(a1 + 184));
      v29 = *(WebCore::CARingBuffer **)(a1 + 88);
      a3 = *(const AudioBufferList ***)(a1 + 184);
      goto LABEL_25;
    }
    if (*(_BYTE *)(a1 + 176))
    {
      WTF::fastMalloc((WTF *)0x48);
      v30 = WebCore::WebAudioBufferList::WebAudioBufferList();
      v31 = *v28;
      *v28 = (WTF *)v30;
      if (v31)
        std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](a1 + 184, v31);
      goto LABEL_24;
    }
    goto LABEL_36;
  }
  v29 = *(WebCore::CARingBuffer **)(a1 + 88);
  if (((unsigned int (*)(const AudioBufferList **))(*a3)->mBuffers[0].mData)(a3) != 1)
    goto LABEL_39;
LABEL_25:
  WebCore::CARingBuffer::store(v29, a3[5]);
  v32 = *(_QWORD *)(a1 + 80);
  v33 = *(_QWORD *)(a1 + 64);
  v34 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v34 = 1182;
  *(_QWORD *)(v34 + 8) = v33;
  *(_QWORD *)(v34 + 528) = v34 + 16;
  *(_QWORD *)(v34 + 536) = v34 + 16;
  *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v34 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
  v51[0] = (IPC::Encoder *)v34;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v34, a2);
  v35 = *(_QWORD *)(v34 + 544);
  v36 = (v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = v36 + 8;
  v38 = *(_QWORD *)(v34 + 552);
  if (v38 >= v36 + 8)
  {
    v39 = *(char **)(v34 + 528);
    goto LABEL_27;
  }
  v45 = (2 * v38 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v46 = v45;
    v45 *= 2;
  }
  while (v46 < v37);
  v47 = (char *)mmap(0, v46, 3, 4098, -1, 0);
  if (v47 == (char *)-1)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x1975B0924);
  }
  v39 = v47;
  memcpy(v47, *(const void **)(v34 + 528), *(_QWORD *)(v34 + 544));
  v48 = *(void **)(v34 + 528);
  if (v48 != (void *)(v34 + 16))
    munmap(v48, *(_QWORD *)(v34 + 552));
  *(_QWORD *)(v34 + 528) = v39;
  *(_QWORD *)(v34 + 552) = v46;
  v35 = *(_QWORD *)(v34 + 544);
LABEL_27:
  bzero(&v39[v35], v36 - v35);
  *(_QWORD *)(v34 + 544) = v37;
  v40 = (_QWORD *)(*(_QWORD *)(v34 + 528) + v36);
  *(_QWORD *)(v34 + 536) = v40 + 1;
  *v40 = a5;
  IPC::Connection::sendMessageImpl(v32, (uint64_t *)v51, 0, 0);
  result = v51[0];
  v51[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v41);
    return (IPC::Encoder *)WTF::fastFree(v43, v44);
  }
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::fetchData(WebKit::MediaRecorderPrivate *a1, uint64_t *a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15[2];
  IPC::Encoder *v16;

  v3 = (os_unfair_lock_s *)*((_QWORD *)a1 + 10);
  v4 = *a2;
  *a2 = 0;
  v5 = (_DWORD *)*WebKit::MediaRecorderPrivate::mimeType(a1);
  if (v5)
    *v5 += 2;
  v6 = *((_QWORD *)a1 + 8);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34E9820;
  v7[1] = v4;
  v7[2] = v5;
  v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1184;
  *(_QWORD *)(v9 + 8) = v6;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v15[1] = v8;
  v16 = (IPC::Encoder *)v9;
  v15[0] = (uint64_t)v7;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v16, v15, 0, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t *WebKit::MediaRecorderPrivate::mimeType(WebKit::MediaRecorderPrivate *this)
{
  if ((_MergedGlobals_120 & 1) == 0)
  {
    _MergedGlobals_33 += 2;
    qword_1EE341A20 = (uint64_t)&_MergedGlobals_33;
    _MergedGlobals_120 = 1;
  }
  if ((byte_1EE341A19 & 1) == 0)
  {
    dword_1ECE6C710 += 2;
    *(_QWORD *)algn_1EE341A28 = &dword_1ECE6C710;
    byte_1EE341A19 = 1;
  }
  if (*((_BYTE *)this + 232))
    return (uint64_t *)algn_1EE341A28;
  else
    return &qword_1EE341A20;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::stopRecording(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13[2];
  IPC::Encoder *v14;

  *(_BYTE *)(a1 + 233) = 1;
  v2 = *(os_unfair_lock_s **)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34E9848;
  v5[1] = v4;
  v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1189;
  *(_QWORD *)(v7 + 8) = v3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13[1] = v6;
  v14 = (IPC::Encoder *)v7;
  v13[0] = (uint64_t)v5;
  IPC::Connection::sendMessageWithAsyncReply(v2, &v14, v13, 0, 0);
  v9 = v13[0];
  v13[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::pauseRecording(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13[2];
  IPC::Encoder *v14;

  v2 = *(os_unfair_lock_s **)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34E9870;
  v5[1] = v4;
  v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1185;
  *(_QWORD *)(v7 + 8) = v3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13[1] = v6;
  v14 = (IPC::Encoder *)v7;
  v13[0] = (uint64_t)v5;
  IPC::Connection::sendMessageWithAsyncReply(v2, &v14, v13, 0, 0);
  v9 = v13[0];
  v13[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::resumeRecording(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13[2];
  IPC::Encoder *v14;

  v2 = *(os_unfair_lock_s **)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34E9898;
  v5[1] = v4;
  v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1186;
  *(_QWORD *)(v7 + 8) = v3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13[1] = v6;
  v14 = (IPC::Encoder *)v7;
  v13[0] = (uint64_t)v5;
  IPC::Connection::sendMessageWithAsyncReply(v2, &v14, v13, 0, 0);
  v9 = v13[0];
  v13[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void WebKit::SharedVideoFrameWriter::disable(WebKit::SharedVideoFrameWriter *this)
{
  *((_BYTE *)this + 17) = 1;
  JUMPOUT(0x19AEBA1A0);
}

uint64_t WebKit::MediaRecorderProvider::createMediaRecorderPrivate@<X0>(uint64_t a1@<X0>, WebCore::MediaStreamPrivate *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t IdentifierInternal;
  WebKit::WebProcess *v11;
  uint64_t v12;
  _DWORD *v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  WebKit::WebProcess *v19;
  uint64_t v20;
  WebKit::WebProcess *v21;
  WebKit::WebProcess *v22;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  if (!v7 || (*(_DWORD *)(*(_QWORD *)(v7 + 112) + 720) & 0x20000) == 0)
    return WebCore::MediaRecorderProvider::createMediaRecorderPrivate();
  v9 = WTF::fastMalloc((WTF *)0x118);
  *(_DWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = off_1E34E9530;
  *(_QWORD *)(v9 + 8) = &unk_1E34E95A8;
  *(_WORD *)(v9 + 20) = 0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_QWORD *)(v9 + 56) = 0;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)v9 = off_1E34E91F0;
  *(_QWORD *)(v9 + 8) = &unk_1E34E9270;
  *(_QWORD *)(v9 + 64) = IdentifierInternal;
  ++*((_DWORD *)a2 + 4);
  *(_QWORD *)(v9 + 72) = a2;
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v21);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = WebKit::WebProcess::ensureGPUProcessConnection(v11);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)(v9 + 80), *(unsigned __int8 ***)(v12 + 24));
  *(_QWORD *)(v9 + 88) = 0;
  *(_BYTE *)(v9 + 96) = 0;
  *(_BYTE *)(v9 + 176) = 0;
  *(_QWORD *)(v9 + 184) = 0;
  *(_QWORD *)(v9 + 192) = 0;
  v13 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v13 += 2;
  *(_QWORD *)(v9 + 200) = v13;
  v14 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(v9 + 221) = *(_QWORD *)(a3 + 21);
  *(_OWORD *)(v9 + 208) = v14;
  *(_BYTE *)(v9 + 232) = WebCore::MediaStreamPrivate::hasVideo(a2);
  *(_BYTE *)(v9 + 233) = 0;
  *(_BYTE *)(v9 + 236) = 0;
  *(_BYTE *)(v9 + 244) = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v15 = off_1E34E6488;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v16 = 0;
  *(_OWORD *)(v16 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v16 + 24) = v15;
  *v15 = off_1E34E95E0;
  v15[1] = v16;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 56), v9);
  v17 = *(unsigned int **)(v9 + 56);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v15[2] = v17;
  *(_QWORD *)(v9 + 248) = v15;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(v9 + 256));
  {
    v19 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v19 = WebKit::WebProcess::WebProcess(v22);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v19;
  }
  v20 = WebKit::WebProcess::ensureGPUProcessConnection(v19);
  result = WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v20 + 176, *(_QWORD *)(v9 + 248));
  *a4 = v9;
  return result;
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::create(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this@<X0>, WebKit::RemoteVideoFrameObjectHeapProxyProcessor **a2@<X8>)
{
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor *v5;
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor *v6;

  v5 = (WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)WTF::fastMalloc((WTF *)0xC0);
  v6 = WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor(v5, this);
  *a2 = v6;
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::initialize(v6);
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::initialize(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  unsigned __int8 *v2;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v7;
  int v8;

  v2 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 32);
LABEL_5:
  v4 = (unsigned __int8 **)*((_QWORD *)this + 5);
  if (!v4)
    goto LABEL_15;
  v5 = *v4;
  if (__ldaxr(*v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEABB3C](v5);
LABEL_10:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v5))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_15:
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v2))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  IPC::Connection::addWorkQueueMessageReceiver((uint64_t)v4, 0x81u, *((_QWORD *)this + 8), (uint64_t)this, 0);
  if (v4)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v4);
}

WebKit::RemoteVideoFrameObjectHeapProxyProcessor *WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this, WebKit::GPUProcessConnection *a2)
{
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  int v8;

  *(_QWORD *)this = &off_1E34B0558;
  *((_QWORD *)this + 1) = 0;
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = this;
  *((_QWORD *)this + 3) = &unk_1E34E92F0;
  *((_QWORD *)this + 2) = v4;
  *(_QWORD *)this = off_1E34E9298;
  *((_BYTE *)this + 32) = 0;
  v5 = (unsigned __int8 **)*((_QWORD *)a2 + 3);
  v6 = *v5;
  if (__ldaxr(*v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v6);
LABEL_5:
  ++*((_QWORD *)v6 + 1);
  v8 = __ldxr(v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  *((_QWORD *)this + 5) = v5;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 7) = 0;
  WTF::WorkQueue::create();
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_BYTE *)this + 84) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this + 152));
  *(_DWORD *)((char *)this + 183) = 0;
  *((_QWORD *)this + 22) = 0;
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>((uint64_t)a2 + 176, (uint64_t)this + 24);
  return this;
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::~RemoteVideoFrameObjectHeapProxyProcessor(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  const void *v2;
  unsigned int *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;

  *(_QWORD *)this = off_1E34E9298;
  *((_QWORD *)this + 3) = &unk_1E34E92F0;
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(this);
  v2 = (const void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (unsigned int *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 19, 0);
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this + 72));
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, v4);
  v7 = (unsigned __int8 **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v7);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::~RemoteVideoFrameObjectHeapProxyProcessor(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  v2 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 48);
LABEL_5:
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v6 = *((_QWORD *)this + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34E98C0;
  v7[1] = v6;
  v7[2] = v4;
  v9 = (uint64_t)v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void `non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::~RemoteVideoFrameObjectHeapProxyProcessor(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::~RemoteVideoFrameObjectHeapProxyProcessor((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::~RemoteVideoFrameObjectHeapProxyProcessor((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteVideoFrameObjectHeapProxyProcessor::gpuProcessConnectionDidClose(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this, WebKit::GPUProcessConnection *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v6;
  int v7;

  *((_BYTE *)this + 169) = 1;
  MEMORY[0x19AEBA1A0](*(unsigned int *)(*((_QWORD *)this + 19) + 4));
  v4 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 32);
LABEL_5:
  v6 = (unsigned __int8 **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v6);
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this + 32));
LABEL_12:
  IPC::Connection::removeWorkQueueMessageReceiver(*((_QWORD *)a2 + 3), 0x81u, 0);
  return WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(this);
}

uint64_t `non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::gpuProcessConnectionDidClose(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteVideoFrameObjectHeapProxyProcessor::gpuProcessConnectionDidClose((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this - 24), a2);
}

BOOL WebKit::SharedVideoFrameReader::setSharedMemory(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v4;

  WebCore::SharedMemory::map();
  v2 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  return *(_QWORD *)(a1 + 32) != 0;
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::takeCallback(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;

  v10 = a2;
  v5 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v7 = (uint64_t *)(a1 + 56);
  v8 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v7, &v10);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::take(v7, v8, a3);
  v9 = __ldxr(v5);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::newVideoFrameBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)(a3 + 24))
    WebKit::SharedVideoFrameReader::readBuffer(a1 + 72, a3);
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::takeCallback(a1, a2, &v7);
  if (v7)
  {
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v7 + 16))(v7, &cf);
    v5 = v7;
    v7 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

uint64_t WebKit::SharedVideoFrameReader::readBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v5[0] = a1;
  v5[1] = a1;
  v5[2] = a1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getVideoFrameBuffer(v4);
  }
  else
  {
    v6 = v5;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit22SharedVideoFrameReader10readBufferEONS_7variantIJDnN3IPC29ObjectIdentifierReadReferenceINS6_23ObjectIdentifierGenericINS8_30RemoteVideoFrameIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS6_13MachSendRightEN7WebCore7IntSizeEEEEE3__0JZNS9_10readBufferESN_E3__1ZNS9_10readBufferESN_E3__2ZNS9_10readBufferESN_E3__3EEEEEJNS0_6__implIJDnSI_SJ_SL_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

unsigned __int8 **WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getVideoFrameBuffer(unsigned __int8 *a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  _QWORD *v5;
  size_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  void *v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  unsigned __int8 **result;
  CFTypeRef v49;
  unint64_t v50;
  uint64_t v51[2];
  CFTypeRef cf;

  v9 = (size_t)a1;
  v10 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v12 = *(_QWORD *)(a2 + 48);
  if (v12)
  {
    if (!*(_BYTE *)(v12 + 88))
      goto LABEL_83;
  }
  else
  {
    v12 = a2;
    if (!*(_BYTE *)(a2 + 88))
      goto LABEL_83;
  }
  v13 = (uint64_t *)(v9 + 56);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = *(_QWORD *)(v9 + 56);
  if (v15
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(v9 + 56)),
        (v15 = *v13) != 0))
  {
    v16 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v5 = (_QWORD *)(v15 + 16 * v20);
  v21 = *v5;
  if (!*v5)
  {
LABEL_20:
    *v5 = v14;
    v24 = *(_QWORD *)a4;
    *(_QWORD *)a4 = 0;
    a1 = (unsigned __int8 *)v5[1];
    v5[1] = v24;
    if (a1)
      a1 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 8))(a1);
    v25 = *v13;
    if (*v13)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *v13;
    if (*v13)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_31;
    }
    else if (3 * v30 > 4 * v29)
    {
      goto LABEL_31;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(v9 + 56));
    goto LABEL_31;
  }
  v22 = 0;
  v23 = 1;
  while (v21 != v14)
  {
    if (v21 == -1)
      v22 = v5;
    v20 = (v20 + v23) & v16;
    v5 = (_QWORD *)(v15 + 16 * v20);
    v21 = *v5;
    ++v23;
    if (!*v5)
    {
      if (v22)
      {
        *v22 = 0;
        v22[1] = 0;
        --*(_DWORD *)(*v13 - 16);
        v5 = v22;
      }
      goto LABEL_20;
    }
  }
LABEL_31:
  v31 = __ldxr(v10);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, v10))
LABEL_35:
    a1 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  v4 = (unsigned __int8 *)(v9 + 32);
  if (__ldaxr((unsigned __int8 *)(v9 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_40;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](v9 + 32);
LABEL_40:
  v10 = *(unsigned __int8 **)(v9 + 40);
  if (!v10)
    goto LABEL_50;
  a4 = *(unsigned __int8 **)v10;
  if (__ldaxr(*(unsigned __int8 **)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, a4))
  {
    goto LABEL_45;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a4);
LABEL_45:
  ++*((_QWORD *)a4 + 1);
  v34 = __ldxr(a4);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_49;
  }
  if (__stlxr(0, a4))
LABEL_49:
    a1 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)a4);
LABEL_50:
  v35 = __ldxr(v4);
  if (v35 != 1)
  {
    __clrex();
LABEL_57:
    a1 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 32));
    if (v10)
      goto LABEL_53;
    goto LABEL_58;
  }
  if (__stlxr(0, v4))
    goto LABEL_57;
  if (v10)
  {
LABEL_53:
    v36 = *(_QWORD *)(a2 + 48);
    if (v36)
    {
      a2 = *(_QWORD *)(a2 + 48);
      if (!*(_BYTE *)(v36 + 88))
        goto LABEL_83;
LABEL_62:
      v38 = (unint64_t *)(a2 + 72);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
      v40 = *(_QWORD *)(a2 + 80);
      v51[0] = *(_QWORD *)(a2 + 64);
      v51[1] = v40;
      a2 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)a2 = 1393;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 528) = a2 + 16;
      *(_QWORD *)(a2 + 536) = a2 + 16;
      *(_OWORD *)(a2 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(a2 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)a2);
      cf = (CFTypeRef)a2;
      IPC::ArgumentCoder<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode((IPC::Encoder *)a2, v51);
      a4 = *(unsigned __int8 **)(a2 + 544);
      v5 = a4 + 1;
      v41 = *(_QWORD *)(a2 + 552);
      if (v41 >= (unint64_t)(a4 + 1))
      {
        v4 = *(unsigned __int8 **)(a2 + 528);
        v42 = *(_QWORD *)(a2 + 544);
LABEL_66:
        bzero(&v4[v42], (size_t)&a4[-v42]);
        *(_QWORD *)(a2 + 544) = v5;
        v43 = &a4[*(_QWORD *)(a2 + 528)];
        *(_QWORD *)(a2 + 536) = v43 + 1;
        *v43 = a3;
        IPC::Connection::sendMessageImpl((uint64_t)v10, (uint64_t *)&cf, 1, 0);
        v45 = (IPC::Encoder *)cf;
        cf = 0;
        if (v45)
        {
          IPC::Encoder::~Encoder(v45, v44);
          WTF::fastFree(v46, v47);
        }
        return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((unsigned __int8 **)v10);
      }
      v50 = (2 * v41 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v9 = v50;
        v50 *= 2;
      }
      while (v9 < (unint64_t)v5);
      result = (unsigned __int8 **)mmap(0, v9, 3, 4098, -1, 0);
      if (result == (unsigned __int8 **)-1)
      {
        __break(0xC471u);
        return result;
      }
      v4 = (unsigned __int8 *)result;
      memcpy(result, *(const void **)(a2 + 528), *(_QWORD *)(a2 + 544));
      a1 = *(unsigned __int8 **)(a2 + 528);
      if (a1 == (unsigned __int8 *)(a2 + 16))
      {
LABEL_82:
        *(_QWORD *)(a2 + 528) = v4;
        *(_QWORD *)(a2 + 552) = v9;
        v42 = *(_QWORD *)(a2 + 544);
        goto LABEL_66;
      }
LABEL_84:
      munmap(a1, *(_QWORD *)(a2 + 552));
      goto LABEL_82;
    }
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_62;
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
LABEL_58:
  v37 = *(_QWORD *)(a2 + 48);
  if (v37)
  {
    a2 = *(_QWORD *)(a2 + 48);
    if (!*(_BYTE *)(v37 + 88))
      goto LABEL_83;
  }
  else if (!*(_BYTE *)(a2 + 88))
  {
    goto LABEL_83;
  }
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::takeCallback(v9, *(_QWORD *)(a2 + 64), v51);
  cf = 0;
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v51[0] + 16))(v51[0], &cf);
  v49 = cf;
  cf = 0;
  if (v49)
    CFRelease(v49);
  result = (unsigned __int8 **)v51[0];
  v51[0] = 0;
  if (result)
    return (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 1))(result);
  return result;
}

uint64_t WebKit::RemoteVideoFrameObjectHeapProxyProcessor::newConvertedVideoFrameBuffer(uint64_t a1, uint64_t a2)
{
  const void *v3;
  CFTypeRef cf;

  if (*(_BYTE *)(a2 + 24))
  {
    WebKit::SharedVideoFrameReader::readBuffer(a1 + 72, a2);
    v3 = *(const void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = cf;
    if (v3)
      CFRelease(v3);
  }
  return WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(a1 + 184));
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(IPC::Semaphore **this@<X0>, const WebCore::VideoFrame *a2@<X1>, _QWORD *a3@<X8>)
{
  WebKit::WebProcess *v6;
  CFTypeRef v7;
  semaphore_t *v8;
  unsigned int *v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::ApproximateTime *v12;
  double v13;
  double v14;
  int v15;
  int v16;
  void *v17;
  _QWORD *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  const void *v22;
  CFTypeRef v23;
  IPC::Semaphore *v24;
  CFTypeRef v25;
  CFTypeRef v26;
  WebKit::WebProcess *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  CFTypeRef v31;
  _QWORD *v32;
  CFTypeRef v33;
  int v34;
  _BYTE v35[24];
  uint64_t v36;
  int v37;
  char v38;
  CFTypeRef v39;
  char v40;
  CFTypeRef cf;
  int v42;
  IPC::Encoder *v43;
  uint64_t v44;

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v27);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *(CFTypeRef *)(WebKit::WebProcess::ensureGPUProcessConnection(v6) + 24);
  if (*((_BYTE *)this + 169))
  {
    v8 = (semaphore_t *)WTF::fastMalloc((WTF *)8);
    *v8 = 0;
    v8[1] = 0;
    semaphore_create(*MEMORY[0x1E0C83DA0], v8 + 1, 0, 0);
    std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100](this + 19, (IPC::Semaphore *)v8);
    v9 = (unsigned int *)this[20];
    this[20] = 0;
    if (v9)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
    *((_BYTE *)this + 170) = 0;
    *((_WORD *)this + 84) = 0;
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E34E98E8;
  v10[1] = v7;
  v32 = v10;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E34E9910;
  v11[1] = v7;
  cf = v11;
  WebKit::SharedVideoFrameWriter::write(this + 19, (uint64_t)a2, (uint64_t *)&v32, &cf, (uint64_t)v35);
  (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v12 = (WTF::ApproximateTime *)(*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  if (!v38)
  {
    *a3 = 0;
    return;
  }
  WTF::ApproximateTime::now(v12);
  v14 = v13 + 3.0;
  v44 = 0;
  IPC::Connection::createSyncMessageEncoder(3644, 0, &v44, (uint64_t *)&v43);
  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(v43, (uint64_t)v35);
  IPC::Connection::sendSyncMessage((uint64_t)v7, v44, (uint64_t *)&v43, 0, (uint64_t)&cf, v14);
  if (!v42)
  {
    LOBYTE(v39) = 0;
    v40 = 0;
    IPC::Decoder::operator>><std::tuple<WebCore::DestinationColorSpace>>((uint64_t *)cf, (uint64_t)&v39);
    if (!v40)
    {
      LOBYTE(v32) = 13;
      v15 = 1;
      v34 = 1;
      v16 = v42;
      if (v42 == -1)
        goto LABEL_17;
      goto LABEL_16;
    }
    v16 = v42;
    if (!v42)
    {
      v15 = 0;
      v18 = cf;
      cf = 0;
      v7 = v39;
      v32 = v18;
      v33 = v39;
      v34 = 0;
      goto LABEL_16;
    }
LABEL_43:
    v28 = std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::SampleBufferDisplayLayer::SampleBufferDisplayLayer(v28, v29, v30);
    return;
  }
  if (v42 != 1)
    goto LABEL_43;
  LOBYTE(v32) = (_BYTE)cf;
  v15 = 1;
  v34 = 1;
  v16 = 1;
LABEL_16:
  ((void (*)(CFTypeRef *, CFTypeRef *))off_1E34E9928[v16])(&v39, &cf);
LABEL_17:
  v19 = v43;
  v43 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v17);
    v19 = (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  if (v15)
  {
    *((_BYTE *)this + 169) = 1;
    MEMORY[0x19AEBA1A0](*((unsigned int *)this[19] + 1));
    *a3 = 0;
  }
  else
  {
    v22 = *(const void **)WebCore::DestinationColorSpace::SRGB(v19);
    v31 = v22;
    if (v22)
      CFRetain(v22);
    WebCore::DestinationColorSpace::DestinationColorSpace();
    v33 = 0;
    v23 = cf;
    cf = 0;
    if (v23)
      CFRelease(v23);
    if (v31)
      CFRelease(v31);
    cf = (CFTypeRef)0x7FF0000000000000;
    v42 = 0;
    WTF::BinarySemaphore::waitUntil();
    v24 = this[22];
    this[22] = 0;
    cf = v24;
    if (v24)
    {
      WebCore::PixelBufferConformerCV::imageFrom32BGRAPixelBuffer();
      WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      WebCore::NativeImage::create();
      v25 = v39;
      v39 = 0;
      if (v25)
        CFRelease(v25);
      v26 = cf;
      cf = 0;
      if (v26)
        CFRelease(v26);
      if (!v7)
        goto LABEL_34;
    }
    else
    {
      *a3 = 0;
      if (!v7)
        goto LABEL_34;
    }
    CFRelease(v7);
  }
LABEL_34:
  if (v34 != -1)
    ((void (*)(CFTypeRef *, _QWORD **))off_1E34E9658[v34])(&cf, &v32);
  if (v38)
  {
    if (v37 != -1)
      ((void (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v37])(&v32, &v36);
  }
}

uint64_t WebKit::SampleBufferDisplayLayer::SampleBufferDisplayLayer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  WebKit::WebProcess *v25;
  _QWORD v26[3];
  uint64_t v27;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)a1 = off_1E34E9678;
  *(_QWORD *)(a1 + 8) = v6;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v7 = *(unsigned int **)(a3 + 8);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = &off_1E34B0558;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = off_1E34E6488;
  *(_QWORD *)(a1 + 48) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = off_1E34E9330;
  *(_QWORD *)(a1 + 24) = &unk_1E34E93F8;
  *(_QWORD *)(a1 + 40) = &unk_1E34E9430;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v25);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = WebKit::WebProcess::ensureGPUProcessConnection(v9);
  v11 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v10 + 16);
  if (v11)
    v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v10;
  v12 = *a2;
  if (*a2)
    goto LABEL_25;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = a2;
  v14 = (unsigned int *)*a2;
  *a2 = v12;
  if (!v14)
    goto LABEL_25;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v13);
  }
  v12 = *a2;
  if (*a2)
  {
LABEL_25:
    do
      v17 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v17 + 1, (unsigned int *)v12));
  }
  *(_QWORD *)(a1 + 72) = v12;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(*(unsigned __int8 **)(a1 + 56), *(_QWORD *)(a1 + 64), v26);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)(a1 + 80), *(unsigned __int8 ***)(v26[0] + 24));
  v19 = v26[0];
  v26[0] = 0;
  if (v19)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v19 + 16), v18);
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(a1 + 104));
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  v27 = *(_QWORD *)(a1 + 48);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::SampleBufferDisplayLayer&>(a2 + 1, &v27, a1, (uint64_t)v26);
  v20 = *(unsigned __int8 **)(a1 + 56);
  if (v20)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v20, *(_QWORD *)(a1 + 64), v26);
    v21 = v26[0];
  }
  else
  {
    v21 = 0;
    v26[0] = 0;
  }
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v21 + 176, a1 + 40);
  v23 = v26[0];
  v26[0] = 0;
  if (v23)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v23 + 16), v22);
  return a1;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::initialize(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5)
{
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  IPC::Encoder *result;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  IPC::Encoder *v27;

  v9 = *(os_unfair_lock_s **)(a1 + 80);
  v24 = *(_QWORD *)(a1 + 48);
  v25 = a3;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  else
    v12 = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 32), a1 + 24);
  v13 = *(unsigned int **)(a1 + 32);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = *a5;
  *a5 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v16 = &off_1E34E9948;
  v16[1] = a1;
  v16[2] = v13;
  v16[3] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 1324;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v27 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, &v24);
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v18, &v25);
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a4;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = v12;
  v26[0] = (uint64_t)v16;
  v26[1] = v17;
  IPC::Connection::sendMessageWithAsyncReply(v9, &v27, v26, 0, 0);
  v20 = v26[0];
  v26[0] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::setLogIdentifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1332;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer(WebKit::SampleBufferDisplayLayer *this)
{
  unsigned __int8 ***v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v32;
  const void *v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  IPC::Encoder *v45;

  v2 = (unsigned __int8 ***)((char *)this + 80);
  v3 = *((_QWORD *)this + 10);
  v44 = *((_QWORD *)this + 6);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1325;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v45 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v44);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v45, 0, 0);
  v6 = v45;
  v45 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  v9 = *((_QWORD *)this + 9);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v13 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t *)(v10 + 8);
      v12 = v13;
      if (v13)
      {
        v14 = *((_QWORD *)this + 6);
        v15 = *(_DWORD *)(v12 - 8);
        v16 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = *(_QWORD *)(v12 + 16 * v19);
        if (v20 != v14)
        {
          v21 = 1;
          while (v20)
          {
            v19 = ((_DWORD)v19 + v21) & v15;
            v20 = *(_QWORD *)(v12 + 16 * v19);
            ++v21;
            if (v20 == v14)
              goto LABEL_12;
          }
          v19 = *(unsigned int *)(v12 - 4);
        }
LABEL_12:
        if (v19 != *(_DWORD *)(v12 - 4))
        {
          v22 = (_QWORD *)(v12 + 16 * v19);
          v23 = (unsigned int *)v22[1];
          *v22 = -1;
          v22[1] = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              v43 = v11;
              WTF::fastFree((WTF *)v23, v5);
              v11 = v43;
            }
          }
          ++*(_DWORD *)(*v11 - 16);
          v26 = *v11;
          if (*v11)
            v27 = *(_DWORD *)(v26 - 12) - 1;
          else
            v27 = -1;
          *(_DWORD *)(v26 - 12) = v27;
          v28 = *v11;
          if (*v11)
          {
            v29 = 6 * *(_DWORD *)(v28 - 12);
            v30 = *(_DWORD *)(v28 - 4);
            if (v29 < v30 && v30 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v11, v30 >> 1, 0);
          }
        }
      }
    }
  }
  v32 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v32)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v32);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 13, 0);
  v33 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v33)
    CFRelease(v33);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v2);
  v35 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, v34);
    }
  }
  v38 = (unsigned __int8 *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v38)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v38, v34);
  *((_QWORD *)this + 3) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v34);
  *(_QWORD *)this = off_1E34E9678;
  v40 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v40)
  {
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      WTF::fastFree((WTF *)v40, v39);
    }
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer(WebKit::SampleBufferDisplayLayer *this)
{
  WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer((WebKit::SampleBufferDisplayLayer *)((char *)this - 24));
}

{
  WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer((WebKit::SampleBufferDisplayLayer *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;

  WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer((WebKit::SampleBufferDisplayLayer *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer((WebKit::SampleBufferDisplayLayer *)((char *)this - 40));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::SampleBufferDisplayLayer::didFail(WebKit::SampleBufferDisplayLayer *this)
{
  return *((unsigned __int8 *)this + 96);
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::updateDisplayMode(WebKit::SampleBufferDisplayLayer *this, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  char v10[2];
  IPC::Encoder *v11;

  v3 = *((_QWORD *)this + 10);
  v10[0] = a2;
  v10[1] = a3;
  v4 = *((_QWORD *)this + 6);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1336;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode((IPC::Encoder *)v5, v10);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::updateBoundsAndPosition(uint64_t a1, unint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  int v15[4];
  uint64_t v16;
  CGRect v17;
  IPC::Encoder *v18;

  v17.origin.x = a3;
  v17.origin.y = a4;
  v17.size.width = a5;
  v17.size.height = a6;
  v8 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 48);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v15, &v17);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 52;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v16);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v10, v15);
  IPC::ArgumentCoder<std::optional<WTF::MachSendRight>,void>::encode<IPC::Encoder,std::optional<WTF::MachSendRight>>(v10, a2);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v18, 0, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::flush(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 6);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1328;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::flushAndRemoveImage(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 6);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1329;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::play(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  *((_BYTE *)this + 97) = 0;
  v1 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 6);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1331;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::pause(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  *((_BYTE *)this + 97) = 1;
  v1 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 6);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1330;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::enqueueBlackFrameFrom(WebKit::SampleBufferDisplayLayer *this, const WebCore::VideoFrame *a2)
{
  float v4;
  float v5;
  uint64_t v6;
  IPC::Encoder *result;
  __int128 *v8;
  __int128 v9;
  char v10;
  __int16 v11;
  unint64_t v12;
  int v13;

  v4 = (*(float (**)(const WebCore::VideoFrame *))(*(_QWORD *)a2 + 16))(a2);
  v9 = *((_OWORD *)a2 + 1);
  v10 = 0;
  v11 = *((_WORD *)a2 + 17);
  v12 = (int)v4 | ((unint64_t)(int)v5 << 32);
  v13 = 3;
  v6 = *((_QWORD *)this + 10);
  v8 = &v9;
  result = IPC::Connection::send<Messages::RemoteSampleBufferDisplayLayer::EnqueueVideoFrame>(v6, (uint64_t *)&v8, *((_QWORD *)this + 6));
  if (v13 != -1)
    return (IPC::Encoder *)((uint64_t (*)(__int128 **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v13])(&v8, &v12);
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::enqueueVideoFrame(IPC::Encoder *this, WebCore::VideoFrame *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  _BYTE v10[24];
  uint64_t v11;
  int v12;
  char v13;

  if (!*((_BYTE *)this + 97))
  {
    v3 = (uint64_t)this;
    v4 = (_QWORD *)((char *)this + 104);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E34E9970;
    v5[1] = v3;
    v9 = v5;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E34E9998;
    v6[1] = v3;
    v8 = v6;
    WebKit::SharedVideoFrameWriter::write(v4, (uint64_t)a2, (uint64_t *)&v9, &v8, (uint64_t)v10);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    this = (IPC::Encoder *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
    if (v13)
    {
      v7 = *(_QWORD *)(v3 + 80);
      v9 = v10;
      this = IPC::Connection::send<Messages::RemoteSampleBufferDisplayLayer::EnqueueVideoFrame>(v7, (uint64_t *)&v9, *(_QWORD *)(v3 + 48));
      if (v13)
      {
        if (v12 != -1)
          return (IPC::Encoder *)((uint64_t (*)(_BYTE **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_3[v12])(&v9, &v11);
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::clearVideoFrames(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 6);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1326;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::SampleBufferDisplayLayer::rootLayer(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t result;
  CFTypeRef v3;
  const void *v4;
  CFTypeRef v5;
  CFTypeRef cf;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    if (*((_BYTE *)this + 132))
    {
      WebKit::LayerHostingContext::createPlatformLayerForHostingContext((WebKit::LayerHostingContext *)*((unsigned int *)this + 32), &cf);
      v3 = cf;
      cf = 0;
      v4 = (const void *)*((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = v3;
      if (v4)
      {
        CFRelease(v4);
        v5 = cf;
        cf = 0;
        if (v5)
          CFRelease(v5);
      }
      return *((_QWORD *)this + 11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebKit::SampleBufferDisplayLayer::setDidFail(uint64_t this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(this + 96) = a2;
  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = this;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      if (*(_BYTE *)(v4 + 96))
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    }
  }
  return this;
}

uint64_t WebKit::SampleBufferDisplayLayer::gpuProcessConnectionDidClose(uint64_t a1)
{
  *(_BYTE *)(a1 + 121) = 1;
  MEMORY[0x19AEBA1A0](*(unsigned int *)(*(_QWORD *)(a1 + 104) + 4));
  return WebKit::SampleBufferDisplayLayer::setDidFail(a1, 1);
}

uint64_t `non-virtual thunk to'WebKit::SampleBufferDisplayLayer::gpuProcessConnectionDidClose(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 40;
  *(_BYTE *)(a1 + 81) = 1;
  MEMORY[0x19AEBA1A0](*(unsigned int *)(*(_QWORD *)(a1 + 64) + 4));
  return WebKit::SampleBufferDisplayLayer::setDidFail(v1, 1);
}

char *WebKit::SampleBufferDisplayLayer::setShouldMaintainAspectRatio(WebKit::SampleBufferDisplayLayer *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v3 = *((_QWORD *)this + 10);
  v4 = *((_QWORD *)this + 6);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1335;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

unsigned int *WebKit::SampleBufferDisplayLayerManager::didReceiveLayerMessage(unsigned int **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  void *v5;
  unsigned int *result;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;

  v10 = *((_QWORD *)a3 + 8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(this + 1, &v10, (unsigned int **)&v11);
  result = (unsigned int *)v11;
  if (v11)
  {
    v7 = *((_QWORD *)v11 + 1);
    v11 = 0;
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (v9)
    {
      if (!v7)
        return result;
    }
    else
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
      if (!v7)
        return result;
    }
    return (unsigned int *)WebKit::SampleBufferDisplayLayer::didReceiveMessage(v7 - 24, a2, a3);
  }
  return result;
}

uint64_t *WebKit::SampleBufferDisplayLayerManager::createLayer@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;

  v6 = WTF::fastMalloc((WTF *)0x88);
  WebKit::SampleBufferDisplayLayer::SampleBufferDisplayLayer(v6, a1, a2);
  v9 = *(_QWORD *)(v6 + 48);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::SampleBufferDisplayLayer&>(a1 + 1, &v9, v6, (uint64_t)&v8);
  *a3 = v6;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::SampleBufferDisplayLayer&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 32), a3 + 24);
  v21 = *(unsigned int **)(a3 + 32);
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)result);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)result));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
  }
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

