unint64_t WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  _OWORD *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  __int128 v10;
  __int128 v11;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x5555556)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(unsigned int *)(result + 12);
    v5 = 48 * a2;
    v6 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    if ((_DWORD)v4)
    {
      v8 = 48 * v4;
      v9 = v3;
      do
      {
        v10 = *(_OWORD *)v9;
        v11 = *((_OWORD *)v9 + 2);
        v6[1] = *((_OWORD *)v9 + 1);
        v6[2] = v11;
        *v6 = v10;
        v6 += 3;
        v9 = (WTF *)((char *)v9 + 48);
        v8 -= 48;
      }
      while (v8);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::BufferBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::BufferBindingLayout> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::BufferBindingLayout,void>::encode(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::TextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::TextureBindingLayout> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::TextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::TextureBindingLayout> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 3);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 3))
    {
      return IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(a1, (char *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ExternalTextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ExternalTextureBindingLayout> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_BYTE *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ExternalTextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ExternalTextureBindingLayout> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v3;
  _BYTE *result;

  v3 = *(unsigned __int8 *)(a2 + 1);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v3)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 1))
      return result;
    result = std::__throw_bad_optional_access[abi:sn180100]();
  }
  *result = 0;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassTimestampWrites,void>::encode(a1, (_QWORD *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 16))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassTimestampWrites,void>::encode(result, a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 16))
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassTimestampWrites,void>::encode(result, a2);
    v4 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::decode<IPC::Decoder>(v4, v5);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  unint64_t v21;
  int v22;
  int v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v2 = result;
  v4 = result[1];
  v5 = *result;
  v6 = result[2] - *result;
  if (v4 <= v6)
  {
LABEL_23:
    v25 = 0;
    v26 = 0;
    *v2 = 0;
    v2[1] = 0;
    v27 = v2[3];
    if (v27)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v26 = *v2;
        v25 = v2[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
    goto LABEL_24;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v25 = v4;
    v26 = 0;
LABEL_24:
    v4 = 0;
    *v2 = 0;
    v2[1] = 0;
    v28 = v2[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
      }
    }
    goto LABEL_25;
  }
  v8 = *v7;
  if (v8 >= 2)
  {
LABEL_25:
    *v2 = 0;
    v2[1] = 0;
    result = (uint64_t *)v2[3];
    if (!result || !v4)
      goto LABEL_33;
    v29 = *(uint64_t (**)(void))(*result + 16);
LABEL_46:
    result = (uint64_t *)v29();
LABEL_33:
    v24 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_21;
  }
  if (!v8)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v24 = 1;
    goto LABEL_21;
  }
  result = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(result);
  v4 = v2[1];
  v10 = *v2;
  v11 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if (v4 >= v11 && v4 - v11 > 3)
  {
    v13 = (int *)(v10 + v11);
    v2[2] = (uint64_t)(v13 + 1);
    if (v10)
    {
      v14 = 0;
      v15 = *v13;
      v16 = v15 & 0xFFFFFF00;
      v17 = v15;
      v18 = v10;
      goto LABEL_12;
    }
    v18 = v4;
    v30 = 0;
  }
  else
  {
    v18 = 0;
    v30 = 0;
    *v2 = 0;
    v2[1] = 0;
    v31 = v2[3];
    if (v31)
    {
      v43 = result;
      v47 = v9;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v10);
        v30 = *v2;
        v18 = v2[1];
      }
      else
      {
        v18 = 0;
        v30 = 0;
      }
      result = v43;
      v9 = v47;
    }
  }
  *v2 = 0;
  v2[1] = 0;
  v10 = v2[3];
  if (v10)
  {
    v41 = result;
    v45 = v9;
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v30, v18);
      v16 = 0;
      v17 = 0;
      v18 = *v2;
      v4 = v2[1];
      v14 = 1;
      v10 = *v2;
    }
    else
    {
      v4 = 0;
      v10 = 0;
      v16 = 0;
      v17 = 0;
      v14 = 1;
    }
    result = v41;
    v9 = v45;
  }
  else
  {
    v18 = 0;
    v4 = 0;
    v16 = 0;
    v17 = 0;
    v14 = 1;
  }
LABEL_12:
  v19 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v10;
  if (v4 < v19 || v4 - v19 <= 3)
  {
    v21 = 0;
    v18 = 0;
    *v2 = 0;
    v2[1] = 0;
    v32 = v2[3];
    if (v32)
    {
      v38 = v14;
      v40 = v17;
      v36 = v16;
      v44 = result;
      v48 = v9;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v10);
        v18 = *v2;
        v21 = v2[1];
      }
      else
      {
        v21 = 0;
        v18 = 0;
      }
      result = v44;
      v9 = v48;
      v16 = v36;
      v14 = v38;
      v17 = v40;
    }
  }
  else
  {
    v20 = (int *)((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v2[2] = (uint64_t)(v20 + 1);
    v21 = v4;
    if (v10)
    {
      v22 = 0;
      v23 = *v20;
      goto LABEL_16;
    }
  }
  *v2 = 0;
  v2[1] = 0;
  v33 = v2[3];
  if (!v33 || !v21)
    goto LABEL_33;
  v37 = v14;
  v39 = v17;
  v35 = v16;
  v42 = result;
  v46 = v9;
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v18, v21);
  if (!*v2)
  {
    v34 = v2[1];
    result = (uint64_t *)v2[3];
    *v2 = 0;
    v2[1] = 0;
    if (!result || !v34)
      goto LABEL_33;
    v29 = *(uint64_t (**)(void))(*result + 16);
    goto LABEL_46;
  }
  v23 = 0;
  v22 = 1;
  result = v42;
  v9 = v46;
  v16 = v35;
  v14 = v37;
  v17 = v39;
LABEL_16:
  if (!v9 || v14 || v22)
  {
    __break(1u);
    goto LABEL_23;
  }
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = v17 | v16;
  *(_DWORD *)(a2 + 12) = v23;
  v24 = 1;
  *(_BYTE *)(a2 + 16) = 1;
LABEL_21:
  *(_BYTE *)(a2 + 24) = v24;
  return result;
}

char *IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(char *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  IPC::Encoder *v11;
  uint64_t v12;

  v3 = *((_QWORD *)result + 1);
  v2 = *((_QWORD *)result + 2);
  if (!*(_BYTE *)(a2 + 4))
  {
    if (v2 < v3)
    {
      *(_BYTE *)(*(_QWORD *)result + v2) = 0;
      *((_QWORD *)result + 2) = v2 + 1;
      return result;
    }
LABEL_14:
    *((_QWORD *)result + 1) = 0;
    return result;
  }
  if (v2 >= v3)
  {
    *((_QWORD *)result + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)result + v2++) = 1;
    *((_QWORD *)result + 2) = v2;
    if (!*(_BYTE *)(a2 + 4))
    {
      v11 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v11, v12);
    }
  }
  v4 = *(_QWORD *)result + v2;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v2;
    v9 = v8 + 4;
    if (v8 <= 0xFFFFFFFFFFFFFFFBLL && v9 <= *((_QWORD *)result + 1))
    {
      *(_DWORD *)(*(_QWORD *)result + v8) = *(_DWORD *)a2;
      *((_QWORD *)result + 2) = v9;
      return result;
    }
    goto LABEL_14;
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = &v7[2 * v6];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v7);
      v9 = v7[1];
      result = IPC::Encoder::grow(a1, 8uLL, 8);
      *(_QWORD *)result = v9;
      v7 += 2;
    }
    while (v7 != v8);
  }
  return result;
}

_QWORD *IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!(_DWORD)v3)
      return result;
    goto LABEL_9;
  }
  v9 = v8 + v4;
  v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(_QWORD *)(*result + v9) = v3;
    result[2] = v10;
    v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!(_DWORD)v3)
    return result;
LABEL_9:
  v12 = *(uint64_t **)a2;
  v13 = *(_QWORD *)a2 + 16 * v3;
  do
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(v2, v12);
    result = IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(v2, v12 + 1);
    v12 += 2;
  }
  while (v12 != (uint64_t *)v13);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::WebGPU::FeatureName>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 0xAu;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

_QWORD *IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  WTF::StringImpl *v19;
  char v20;

  result = IPC::Decoder::decode<WTF::String>(a2, &v19);
  if (v20)
  {
    v5 = a2[1];
    v6 = *a2;
    v7 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v5 >= v7 && v5 - v7 > 7)
    {
      v9 = (uint64_t *)(v6 + v7);
      a2[2] = (uint64_t)(v9 + 1);
      if (v6)
      {
        v10 = *v9;
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v10;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      v11 = v5;
      v12 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      v13 = a2[3];
      if (v13)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v6, v5);
          v12 = (WTF::StringImpl *)*a2;
          v11 = a2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v14 + 16))(v14, v12);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    if (v20)
    {
      v15 = v19;
      v19 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v16);
  return result;
}

void sub_196F13654(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x196F137BCLL);
    }
    v3 = result;
    v4 = *(WTF::StringImpl **)result;
    v5 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * *((unsigned int *)result + 3));
    v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(_QWORD *)v3 = v6;
    result = WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (result != a2)
  {
    v5 = (WTF::StringImpl **)result;
    do
    {
      v6 = *v5;
      v7 = v5[1];
      *v5 = 0;
      *a3 = v6;
      a3[1] = v7;
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::SharedVideoFrame>,void>::encode<IPC::Encoder,std::optional<WebKit::SharedVideoFrame>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 48);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 48))
    {
      IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(a1, a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::Decoder::decode<WebKit::SharedVideoFrame>(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::Decoder::decode<WebKit::SharedVideoFrame>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196F138FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 48))
  {
    v15 = *(unsigned int *)(v13 + 40);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v15])(&a13, v13 + 24);
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 16 * v6;
    do
    {
      result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ColorTargetState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ColorTargetState> const&>(a1, v7);
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ColorTargetState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ColorTargetState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 12))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::ColorTargetState,void>::encode(a1, (char *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::String> const&>(v6, v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::String> const&>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 8))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(result, (uint64_t *)a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 8))
      return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(result, (uint64_t *)a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_QWORD *)IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

_QWORD *IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!(_DWORD)v3)
      return result;
    goto LABEL_9;
  }
  v9 = v8 + v4;
  v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(_QWORD *)(*result + v9) = v3;
    result[2] = v10;
    v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!(_DWORD)v3)
    return result;
LABEL_9:
  v12 = *(uint64_t **)a2;
  v13 = 16 * v3;
  do
  {
    result = IPC::ArgumentCoder<WTF::KeyValuePair<WTF::String,double>,void>::encode<IPC::StreamConnectionEncoder,WTF::KeyValuePair<WTF::String,double> const&>(v2, v12);
    v12 += 2;
    v13 -= 16;
  }
  while (v13);
  return result;
}

_QWORD *IPC::ArgumentCoder<WTF::KeyValuePair<WTF::String,double>,void>::encode<IPC::StreamConnectionEncoder,WTF::KeyValuePair<WTF::String,double> const&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v10) = a2[1];
      a1[2] = v11;
    }
  }
  return result;
}

_QWORD *IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v23;
  uint64_t *v24;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v8 + v4 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > result[1])
    {
      result[1] = 0;
      if ((_DWORD)v3)
        goto LABEL_9;
      return result;
    }
    *(_QWORD *)(*result + v9) = v3;
    result[2] = v10;
    v3 = *(unsigned int *)(a2 + 12);
    v4 = v10;
  }
  if ((_DWORD)v3)
  {
LABEL_9:
    v12 = 16 * v3;
    v13 = *(_QWORD *)a2 + 7;
    do
    {
      v14 = v2[1];
      if (!*(_BYTE *)(v13 + 5))
      {
        if (v4 >= v14)
          goto LABEL_32;
        *(_BYTE *)(*v2 + v4++) = 0;
        v2[2] = v4;
        goto LABEL_30;
      }
      if (v4 < v14)
      {
        v15 = v4 + 1;
        *(_BYTE *)(*v2 + v4) = 1;
        v2[2] = v4 + 1;
        if (!*(_BYTE *)(v13 + 5))
          goto LABEL_39;
        if (v15 < v2[1])
        {
          v4 += 2;
          *(_BYTE *)(*v2 + v15) = *(_BYTE *)(v13 - 7);
          v2[2] = v4;
          v16 = v2[1];
          goto LABEL_15;
        }
        ++v4;
      }
      v16 = 0;
      v2[1] = 0;
LABEL_15:
      if (*(_BYTE *)v13)
      {
        if (v4 >= v16)
        {
          v2[1] = 0;
        }
        else
        {
          *(_BYTE *)(*v2 + v4) = 1;
          v2[2] = v4 + 1;
          if (!*(_BYTE *)v13)
          {
LABEL_39:
            v23 = std::__throw_bad_optional_access[abi:sn180100]();
            return IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,double>>((uint64_t)v23, v24);
          }
        }
        IPC::ArgumentCoder<WebKit::WebGPU::BlendComponent,void>::encode(v2, (_BYTE *)(v13 - 6));
        result = IPC::ArgumentCoder<WebKit::WebGPU::BlendComponent,void>::encode(v2, (_BYTE *)(v13 - 3));
        v4 = v2[2];
      }
      else if (v4 >= v16)
      {
        v2[1] = 0;
      }
      else
      {
        *(_BYTE *)(*v2 + v4++) = 0;
        v2[2] = v4;
      }
      v17 = *v2 + v4;
      v18 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v7 = v18 >= v17;
      v19 = v18 - v17;
      if (v7)
      {
        v20 = v19 + v4;
        v21 = v19 + v4 + 4;
        if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > v2[1])
        {
LABEL_32:
          v2[1] = 0;
          goto LABEL_30;
        }
        *(_DWORD *)(*v2 + v20) = *(_DWORD *)(v13 + 1);
        v2[2] = v21;
        v4 = v21;
      }
LABEL_30:
      v13 += 16;
      v12 -= 16;
    }
    while (v12);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,double>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  WTF::StringImpl *v19;
  char v20;

  result = IPC::Decoder::decode<WTF::String>(a2, &v19);
  if (v20)
  {
    v5 = a2[1];
    v6 = *a2;
    v7 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v5 >= v7 && v5 - v7 > 7)
    {
      v9 = (uint64_t *)(v6 + v7);
      a2[2] = (uint64_t)(v9 + 1);
      if (v6)
      {
        v10 = *v9;
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v10;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      v11 = v5;
      v12 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      v13 = a2[3];
      if (v13)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v6, v5);
          v12 = (WTF::StringImpl *)*a2;
          v11 = a2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v14 + 16))(v14, v12);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    if (v20)
    {
      v15 = v19;
      v19 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v16);
  return result;
}

void sub_196F13EA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::WebGPU::ColorTargetState>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int16 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;
  int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
LABEL_31:
    v32 = 0;
    v33 = 0;
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v33 = *a2;
        v32 = a2[1];
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
    }
    goto LABEL_32;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v32 = v6;
    v33 = 0;
LABEL_32:
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35)
    {
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33, v32);
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
      }
    }
LABEL_33:
    *a2 = 0;
    a2[1] = 0;
    v36 = a2[3];
    if (v36 && v6)
    {
      v37 = *(void (**)(void))(*(_QWORD *)v36 + 16);
LABEL_67:
      v37();
      goto LABEL_48;
    }
    goto LABEL_48;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_33;
  if (!v9)
  {
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 12) = 0;
LABEL_28:
    *(_BYTE *)(v3 + 16) = 1;
    return result;
  }
  result = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(a2);
  v10 = result;
  v11 = a2[1];
  v12 = *a2;
  v13 = a2[2] - *a2;
  if (v11 <= v13)
  {
    v38 = 0;
    v39 = 0;
    *a2 = 0;
    a2[1] = 0;
    v40 = a2[3];
    if (v40)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
        v39 = *a2;
        v38 = a2[1];
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
    }
    goto LABEL_37;
  }
  v14 = (unsigned __int8 *)(v12 + v13);
  a2[2] = (uint64_t)(v14 + 1);
  if (!v12)
  {
    v38 = v11;
    v39 = 0;
LABEL_37:
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v41 = a2[3];
    if (v41)
    {
      if (v38)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39, v38);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_38;
  }
  v15 = *v14;
  if (v15 >= 2)
  {
LABEL_38:
    v23 = 0;
    v22 = 0;
    v21 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v11)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
      v23 = 0;
      v22 = 0;
      v21 = 0;
      v20 = 0;
    }
    goto LABEL_18;
  }
  if (v15)
  {
    v16 = IPC::Decoder::decode<WebKit::WebGPU::BlendComponent>(a2);
    result = IPC::Decoder::decode<WebKit::WebGPU::BlendComponent>(a2);
    if (*a2)
    {
      if (!HIBYTE(v16) || !BYTE3(result))
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      v17 = v16 >> 8;
      v18 = 1;
    }
    else
    {
      v18 = 0;
      LOBYTE(v16) = 0;
    }
    if (v18)
    {
      v19 = v16 | (v17 << 8);
      v20 = ((unint64_t)(result & 0xFFFFFF) << 24) & 0xFFFFFF000000 | *(_QWORD *)&v19 & 0xFFFF00;
      v21 = v19;
      v22 = 0x100000000000000;
    }
    else
    {
      v49 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (result && v49)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v22 = 0;
      v21 = 0;
      v20 = 0;
    }
    v23 = 0x1000000000000;
  }
  else
  {
    v23 = 0;
    v21 = 0;
    v20 = 0;
    v22 = 0x100000000000000;
  }
LABEL_18:
  v24 = a2[1];
  if (HIBYTE(v22))
  {
    v6 = a2[1];
  }
  else
  {
    v6 = 0;
    v42 = *a2;
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      v55 = v20;
      v58 = v23;
      v52 = v21;
      if (v24)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v42, v24);
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
      }
      v21 = v52;
      v20 = v55;
      v23 = v58;
    }
  }
  v25 = *a2;
  v26 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v6 < v26 || v6 - v26 <= 3)
  {
    v43 = 0;
    v44 = 0;
    *a2 = 0;
    a2[1] = 0;
    v45 = a2[3];
    if (v45)
    {
      v57 = v20;
      v60 = v23;
      v54 = v21;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
        v44 = *a2;
        v43 = a2[1];
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
      v21 = v54;
      v20 = v57;
      v23 = v60;
    }
  }
  else
  {
    v27 = (int *)(v25 + v26);
    a2[2] = (uint64_t)(v27 + 1);
    if (v25)
    {
      v28 = 0;
      v30 = *v27;
      v29 = *v27 & 0xFFFFFF00;
      v30 = v30;
LABEL_24:
      if (v10 > 0xFFu)
      {
        v31 = v22 | v20 | v23 | v21;
        if (HIBYTE(v31))
        {
          if (!v28)
          {
            *(_QWORD *)v3 = v10 | (v31 << 8);
            *(_DWORD *)(v3 + 8) = v29 | v30;
            *(_BYTE *)(v3 + 12) = 1;
            goto LABEL_28;
          }
        }
      }
      goto LABEL_30;
    }
    v43 = v6;
    v44 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v46 = a2[3];
  if (!v46 || !v43)
    goto LABEL_48;
  v56 = v20;
  v59 = v23;
  v53 = v21;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44, v43);
  if (*a2)
  {
    v30 = 0;
    v29 = 0;
    v28 = 1;
    v21 = v53;
    v20 = v56;
    v23 = v59;
    goto LABEL_24;
  }
  v50 = a2[3];
  v51 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v50 && v51)
  {
    v37 = *(void (**)(void))(*(_QWORD *)v50 + 16);
    goto LABEL_67;
  }
LABEL_48:
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 16) = 0;
  v47 = *a2;
  v48 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v48)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v47);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  int v6;
  char *v7;
  int *v8;
  uint64_t v9;

  v4 = *(unsigned __int8 *)(a2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 24))
    {
      v6 = *(_DWORD *)(a2 + 16);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
      v7 = (char *)a1;
      v8 = (int *)a2;
      v9 = v6;
    }
    else
    {
      v7 = (char *)std::__throw_bad_optional_access[abi:sn180100]();
    }
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(v7, v8, v9);
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(char *a1, int *a2, uint64_t a3)
{
  if (a3)
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(a1, a2, a3);
  if (a2[4])
  {
    a1 = (char *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(a1, a2, a3);
  }
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)a1, *(const void **)a2, a2[3]);
}

char *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(char *result, int *a2, uint64_t a3)
{
  IPC::Encoder *v4;
  int v5;
  int v6;
  uint64_t v7;

  if (a3 == 1)
  {
    if (a2[4] == 1)
    {
      v4 = (IPC::Encoder *)result;
      v5 = *a2;
      *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)result, 4uLL, 4) = v5;
      v6 = a2[1];
      result = IPC::Encoder::grow(v4, 4uLL, 4);
      *(_DWORD *)result = v6;
    }
    else
    {
      v7 = std::__throw_bad_variant_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(v7);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 24))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(_BYTE *)(a2 + 24))
        result = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
    }
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 16);
  v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(a1, (const void **)a2, v2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(uint64_t *a1, const void **a2, uint64_t a3)
{
  if (a3)
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(a1, a2, a3);
  if (*((_DWORD *)a2 + 4))
  {
    a1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(a1, a2, a3);
  }
  return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *a2, *((unsigned int *)a2 + 3));
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  const void *v4;
  uint64_t v5;

  if (a3 == 1)
  {
    if (a2[4] == 1)
    {
      return IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(result, a2);
    }
    else
    {
      v3 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(v3, v4, v5);
    }
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(_QWORD *a1, const void *a2, uint64_t a3)
{
  _QWORD *result;

  result = IPC::StreamConnectionEncoder::operator<<<unsigned long &>(a1, a3);
  if (a3)
    return (_QWORD *)IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(result, a2, a3);
  return result;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>(uint64_t result, int *a2, unint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  int v8;

  v3 = a3;
  v4 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  if (!a3)
    return v4;
  if (!(a3 >> 30))
  {
    v6 = 4 * a3;
    v7 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * a3));
    *(_DWORD *)(v4 + 8) = v3;
    *(_QWORD *)v4 = v7;
    do
    {
      v8 = *a2++;
      *v7++ = v8;
      v6 -= 4;
    }
    while (v6);
    return v4;
  }
  __break(0xC471u);
  return result;
}

char *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  int v6;
  char *v7;
  const void **v8;
  uint64_t v9;

  v4 = *(unsigned __int8 *)(a2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 24))
    {
      v6 = *(_DWORD *)(a2 + 16);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
      v7 = (char *)a1;
      v8 = (const void **)a2;
      v9 = v6;
    }
    else
    {
      v7 = (char *)std::__throw_bad_optional_access[abi:sn180100]();
    }
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(v7, v8, v9);
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(char *a1, const void **a2, uint64_t a3)
{
  if (a3)
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(a1, a2, a3);
  if (*((_DWORD *)a2 + 4))
  {
    a1 = (char *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(a1, a2, a3);
  }
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)a1, *a2, *((unsigned int *)a2 + 3));
}

char *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(char *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 == 1)
  {
    if (a2[4] == 1)
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode((IPC::Encoder *)result, a2);
    }
    else
    {
      v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(v3);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 24))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(_BYTE *)(a2 + 24))
        result = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
    }
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 16);
  v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(a1, (const void **)a2, v2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(uint64_t *a1, const void **a2, uint64_t a3)
{
  if (a3)
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(a1, a2, a3);
  if (*((_DWORD *)a2 + 4))
  {
    a1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(a1, a2, a3);
  }
  return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *a2, *((unsigned int *)a2 + 3));
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 == 1)
  {
    if (a2[4] == 1)
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(result, a2);
    }
    else
    {
      v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v3);
    }
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 16))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(_BYTE *)(a2 + 16))
        result = std::__throw_bad_optional_access[abi:sn180100]();
    }
    return IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

_QWORD *IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!(_DWORD)v3)
      return result;
    goto LABEL_9;
  }
  v9 = v8 + v4;
  v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(_QWORD *)(*result + v9) = v3;
    result[2] = v10;
    v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!(_DWORD)v3)
    return result;
LABEL_9:
  v12 = *(_QWORD **)a2;
  v13 = 8 * v3;
  do
  {
    result = IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(v2, v12++);
    v13 -= 8;
  }
  while (v13);
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196F149B8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  WTF *v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  WTF *v18;
  uint64_t v19;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v6 = result;
  v18 = 0;
  v19 = 0;
  if (result >= 0x20000)
  {
    while (1)
    {
      v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
      v16 = v14;
      v17 = v5;
      if (!(_BYTE)v5)
        break;
      if (HIDWORD(v19) == (_DWORD)v19)
      {
        v12 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v18, HIDWORD(v19) + 1, (unint64_t)&v16);
        *((_QWORD *)v18 + HIDWORD(v19)) = *v12;
      }
      else
      {
        *((_QWORD *)v18 + HIDWORD(v19)) = v14;
      }
      v13 = ++HIDWORD(v19);
      if (!--v6)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v18, v13);
        *(_QWORD *)a2 = v18;
        v15 = v19;
        v18 = 0;
        v19 = 0;
        *(_QWORD *)(a2 + 8) = v15;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!result)
    {
      v9 = 0;
      v11 = 0;
      v10 = 0;
LABEL_13:
      v18 = 0;
      *(_QWORD *)a2 = v10;
      HIDWORD(v19) = 0;
      *(_DWORD *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 12) = v9;
LABEL_14:
      *(_BYTE *)(a2 + 16) = 1;
      goto LABEL_21;
    }
    LODWORD(v19) = result;
    v18 = (WTF *)WTF::fastMalloc((WTF *)(8 * result));
    while (1)
    {
      v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
      v16 = v7;
      v17 = v5;
      if (!(_BYTE)v5)
        break;
      if (HIDWORD(v19) == (_DWORD)v19)
      {
        v8 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v18, HIDWORD(v19) + 1, (unint64_t)&v16);
        *((_QWORD *)v18 + HIDWORD(v19)) = *v8;
      }
      else
      {
        *((_QWORD *)v18 + HIDWORD(v19)) = v7;
      }
      v9 = ++HIDWORD(v19);
      if (!--v6)
      {
        v10 = v18;
        v11 = v19;
        goto LABEL_13;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
LABEL_21:
  result = (unint64_t)v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

void sub_196F14B7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::VectorArgumentCoder<false,std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(char **)a2;
    v8 = 2 * v6;
    do
    {
      result = IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, v7);
      v7 += 2;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

_QWORD *IPC::VectorArgumentCoder<false,std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v12;
  uint64_t v13;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!(_DWORD)v3)
      return result;
    goto LABEL_9;
  }
  v9 = v8 + v4;
  v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(_QWORD *)(*result + v9) = v3;
    result[2] = v10;
    v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!(_DWORD)v3)
    return result;
LABEL_9:
  v12 = *(_BYTE **)a2;
  v13 = 2 * v3;
  do
  {
    result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(v2, v12);
    v12 += 2;
    v13 -= 2;
  }
  while (v13);
  return result;
}

unint64_t WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 2 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  __int16 v9;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(2 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = 2 * v5;
        v8 = v4;
        do
        {
          v9 = *(_WORD *)v8;
          v8 = (WTF *)((char *)v8 + 2);
          *(_WORD *)result = v9;
          result += 2;
          v7 -= 2;
        }
        while (v7);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 96 * v6;
    do
    {
      result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassColorAttachment> const&>(a1, v7);
      v7 += 96;
      v8 -= 96;
    }
    while (v8);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassColorAttachment> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 88);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 88))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassColorAttachment,void>::encode(a1, (_QWORD *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDepthStencilAttachment,void>::encode(a1, (_QWORD *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(char *result, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = *((_QWORD *)result + 2);
  v5 = *(_QWORD *)result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!(_DWORD)v3)
      return result;
    goto LABEL_9;
  }
  v9 = v8 + v4;
  v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= *((_QWORD *)result + 1))
  {
    *(_QWORD *)(*(_QWORD *)result + v9) = v3;
    *((_QWORD *)result + 2) = v10;
    v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  *((_QWORD *)result + 1) = 0;
  if (!(_DWORD)v3)
    return result;
LABEL_9:
  v12 = *(_QWORD *)a2;
  v13 = 96 * v3;
  do
  {
    result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassColorAttachment> const&>(v2, v12);
    v12 += 96;
    v13 -= 96;
  }
  while (v13);
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassColorAttachment> const&>(char *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = *((_QWORD *)result + 1);
  v2 = *((_QWORD *)result + 2);
  if (*(_BYTE *)(a2 + 88))
  {
    if (v2 >= v3)
    {
      *((_QWORD *)result + 1) = 0;
      return (char *)IPC::ArgumentCoder<WebKit::WebGPU::RenderPassColorAttachment,void>::encode(result, a2);
    }
    *(_BYTE *)(*(_QWORD *)result + v2) = 1;
    *((_QWORD *)result + 2) = v2 + 1;
    if (*(_BYTE *)(a2 + 88))
      return (char *)IPC::ArgumentCoder<WebKit::WebGPU::RenderPassColorAttachment,void>::encode(result, a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(v4);
  }
  else if (v2 >= v3)
  {
    *((_QWORD *)result + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)result + v2) = 0;
    *((_QWORD *)result + 2) = v2 + 1;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 32))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDepthStencilAttachment,void>::encode(result, a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 32))
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDepthStencilAttachment,void>::encode(result, a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(v4, v5);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t *v5;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 8))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(result, (_QWORD *)a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 8))
      return IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(result, (_QWORD *)a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_QWORD *)IPC::Decoder::decode<std::optional<WebKit::WebGPU::RenderPassColorAttachment>>((uint64_t)v4, v5);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::WebGPU::RenderPassColorAttachment>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41[2];
  _BYTE v42[32];
  int v43;
  char v44;
  __int16 v45;
  char v46;
  _BYTE v47[25];
  int v48;
  char v49;
  int v50;
  char v51;
  __int16 v52;
  _BYTE v53[32];
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v22 = 0;
    v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a2;
        v22 = a2[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
    goto LABEL_20;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v22 = v6;
    v23 = 0;
LABEL_20:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_21;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_21:
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v6)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    goto LABEL_59;
  }
  if (!v9)
  {
    LOBYTE(v41[0]) = 0;
    v46 = 0;
    result = std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](a1, v41);
    *(_BYTE *)(a1 + 96) = 1;
    if (v46 && v44 && v43 != -1)
      goto LABEL_47;
    goto LABEL_48;
  }
  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v12 = v11;
  v13 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  v15 = v14;
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v57, a2);
  v16 = a2[1];
  v17 = *a2;
  v18 = a2[2] - *a2;
  if (v16 <= v18)
  {
    v26 = 0;
    v27 = 0;
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v27 = *a2;
        v26 = a2[1];
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
    goto LABEL_25;
  }
  v19 = (unsigned __int8 *)(v17 + v18);
  a2[2] = (uint64_t)(v19 + 1);
  if (!v17)
  {
    v26 = v16;
    v27 = 0;
LABEL_25:
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29)
    {
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
        v17 = *a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_26;
  }
  v20 = *v19;
  if (v20 >= 2)
  {
LABEL_26:
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v17);
    goto LABEL_27;
  }
  if (!v20)
  {
    v47[0] = 0;
    v49 = 0;
    std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100](v53, (uint64_t)v47);
    goto LABEL_16;
  }
  IPC::Decoder::decode<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>(a2, v47);
  if (!v49)
  {
LABEL_27:
    v53[0] = 0;
    v56 = 0;
    goto LABEL_28;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v53, (uint64_t)v47);
  v55 = 1;
LABEL_16:
  v56 = 1;
  if (v49 && v48 != -1)
    ((void (*)(char *, _BYTE *))off_1E34AE2E8[v48])(&v60, v47);
LABEL_28:
  if (!v56)
  {
    v36 = *a2;
    v37 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (v38)
    {
      if (v37)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
    }
  }
  v31 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a2);
  v32 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a2);
  if (!*a2)
  {
    LOBYTE(v41[0]) = 0;
    v46 = 0;
    goto LABEL_39;
  }
  if (v12)
  {
    *(_QWORD *)v47 = v10;
    if (v15)
    {
      *(_DWORD *)&v47[8] = v13;
      v47[12] = BYTE4(v13);
      if (v59)
      {
        *(_QWORD *)&v47[16] = v57;
        v47[24] = v58;
        if (v56)
        {
          v33 = v32;
          std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100](&v48, (uint64_t)v53);
          if (v31 > 0xFFu)
          {
            LOBYTE(v52) = v31;
            if (v33 > 0xFFu)
            {
              HIBYTE(v52) = v33;
              v41[0] = *(_OWORD *)v47;
              *(__int128 *)((char *)v41 + 9) = *(_OWORD *)&v47[9];
              std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100](v42, (uint64_t)&v48);
              v45 = v52;
              v46 = 1;
              if (v51 && v50 != -1)
                ((void (*)(char *, int *))off_1E34AE2E8[v50])(&v60, &v48);
LABEL_39:
              if (v56 && v55 && v54 != -1)
                ((void (*)(_BYTE *, _BYTE *))off_1E34AE2E8[v54])(v47, v53);
              if (!v46)
              {
                v39 = *a2;
                v40 = a2[1];
                *a2 = 0;
                a2[1] = 0;
                result = a2[3];
                if (!result
                  || !v40
                  || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v39),
                      !v46))
                {
LABEL_59:
                  *(_BYTE *)a1 = 0;
                  *(_BYTE *)(a1 + 96) = 0;
                  goto LABEL_48;
                }
              }
              *(_OWORD *)a1 = v41[0];
              *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)v41 + 9);
              result = (uint64_t)std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 32), (uint64_t)v42);
              *(_WORD *)(a1 + 80) = v45;
              *(_BYTE *)(a1 + 88) = 1;
              *(_BYTE *)(a1 + 96) = 1;
              if (v46 && v44 && v43 != -1)
LABEL_47:
                result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34AE2E8[v43])(v47, v42);
LABEL_48:
              if (*(_BYTE *)(a1 + 96))
                return result;
              goto LABEL_51;
            }
          }
        }
      }
    }
  }
  __break(1u);
LABEL_51:
  v34 = *a2;
  v35 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v35)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v34);
  }
  return result;
}

void sub_196F1563C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,int a30,char a31,uint64_t a32,uint64_t a33,int a34,int a35,char a36)
{
  if (a21 && a19 && a17 != -1)
    ((void (*)(__int16 *, uint64_t *))off_1E34AE2E8[a17])(&a23, &a13);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v4 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v4;
    std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 32), (uint64_t)(a2 + 2));
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    *(_BYTE *)(a1 + 88) = 1;
  }
  return a1;
}

void sub_196F157EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (*(_BYTE *)(v13 + 88) && *(_BYTE *)(v13 + 72))
  {
    v16 = *(unsigned int *)(v13 + 64);
    if ((_DWORD)v16 != -1)
      ((void (*)(char *, uint64_t))off_1E34AE2E8[v16])(&a13, v14);
    *(_DWORD *)(v13 + 64) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;
  uint64_t result;

  v3 = (__int128 *)WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](*(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x196F159D4);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 12);
    v5 = 96 * a2;
    v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (result != a2)
  {
    v10 = v3;
    v11 = v4;
    v7 = result;
    do
    {
      result = std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](a3, (__int128 *)v7);
      if (*(_BYTE *)(v7 + 88) && *(_BYTE *)(v7 + 72))
      {
        v8 = *(unsigned int *)(v7 + 64);
        if ((_DWORD)v8 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E34AE2E8[v8])(&v9, v7 + 32);
        *(_DWORD *)(v7 + 64) = -1;
      }
      a3 += 96;
      v7 += 96;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 96) && *(_BYTE *)(a1 + 88) && *(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E34AE2E8[v2])(&v4, a1 + 32);
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 6);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 6))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::PrimitiveState,void>::encode(a1, (char *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 44);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 44))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::DepthStencilState,void>::encode(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 12))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::MultisampleState,void>::encode(a1, (_DWORD *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::FragmentState> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::FragmentState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 56);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 56))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::FragmentState,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = result[1];
  v2 = result[2];
  if (a2[6])
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<WebKit::WebGPU::PrimitiveState,void>::encode(result, a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (a2[6])
      return IPC::ArgumentCoder<WebKit::WebGPU::PrimitiveState,void>::encode(result, a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_QWORD *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(char *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = *((_QWORD *)result + 1);
  v2 = *((_QWORD *)result + 2);
  if (*(_BYTE *)(a2 + 44))
  {
    if (v2 >= v3)
    {
      *((_QWORD *)result + 1) = 0;
      return (char *)IPC::ArgumentCoder<WebKit::WebGPU::DepthStencilState,void>::encode(result, a2);
    }
    *(_BYTE *)(*(_QWORD *)result + v2) = 1;
    *((_QWORD *)result + 2) = v2 + 1;
    if (*(_BYTE *)(a2 + 44))
      return (char *)IPC::ArgumentCoder<WebKit::WebGPU::DepthStencilState,void>::encode(result, a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (char *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(v4);
  }
  else if (v2 >= v3)
  {
    *((_QWORD *)result + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)result + v2) = 0;
    *((_QWORD *)result + 2) = v2 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 12))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<WebKit::WebGPU::MultisampleState,void>::encode(result, a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 12))
      return IPC::ArgumentCoder<WebKit::WebGPU::MultisampleState,void>::encode(result, a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (uint64_t *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::FragmentState> const&>(v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::FragmentState> const&>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t *v5;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 56))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<WebKit::WebGPU::FragmentState,void>::encode(result, (_QWORD *)a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 56))
      return IPC::ArgumentCoder<WebKit::WebGPU::FragmentState,void>::encode(result, (_QWORD *)a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_QWORD *)IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebKit::WebGPU::ShaderModuleCompilationHint>>((uint64_t)v4, v5);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebKit::WebGPU::ShaderModuleCompilationHint>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v12;
  char v13;

  IPC::Decoder::decode<WTF::String>(a2, &v12);
  if (v13)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!*a2)
    {
      v6 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v7 = a2[3];
      if (v7 && v6)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      if (v13)
      {
        v8 = v12;
        v12 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
      goto LABEL_15;
    }
    if ((_BYTE)v5 && v13)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = result;
      *(_BYTE *)(a1 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
LABEL_15:
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  return result;
}

void sub_196F15F50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  _BYTE *v12;

  v2 = result[1];
  v3 = *result;
  v4 = result[2] - *result;
  if (v2 <= v4)
  {
    v7 = 0;
    v8 = 0;
    *result = 0;
    result[1] = 0;
    v9 = result[3];
    if (v9)
    {
      v10 = result;
      v12 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v3, v2);
        result = v10;
        a2 = v12;
        v8 = *v10;
        v7 = v10[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  result[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v7 = v2;
    v8 = 0;
LABEL_7:
    *result = 0;
    result[1] = 0;
    result = (uint64_t *)result[3];
    if (result)
    {
      if (v7)
      {
        v11 = a2;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v8);
        a2 = v11;
      }
    }
    goto LABEL_4;
  }
  v6 = *v5;
  if (v6 >= 2)
  {
LABEL_4:
    *a2 = 0;
    a2[24] = 0;
    return result;
  }
  return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::decode<IPC::Decoder>(result, v6, (uint64_t)a2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  _QWORD v6[2];
  char v7;

  if (!a2)
  {
    result = (uint64_t *)IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(result, v6);
    v5 = v7;
    if (v7)
    {
      *(_QWORD *)a3 = v6[0];
      *(_QWORD *)(a3 + 8) = v6[1];
      *(_DWORD *)(a3 + 16) = 0;
      v5 = 1;
      goto LABEL_9;
    }
LABEL_8:
    *(_BYTE *)a3 = 0;
    goto LABEL_9;
  }
  if (a2 != 1
    || (result = (uint64_t *)IPC::Decoder::decode<WebKit::WebGPU::Extent3DDict>(result), (v4 & 0xFF00000000) == 0))
  {
    v5 = 0;
    goto LABEL_8;
  }
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = v4;
  v5 = 1;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_9:
  *(_BYTE *)(a3 + 24) = v5;
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::WebGPU::Extent3DDict>(uint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::decode(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 40 * v6;
    do
    {
      result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::VertexBufferLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::VertexBufferLayout> const&>(a1, v7);
      v7 += 40;
      v8 -= 40;
    }
    while (v8);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::VertexBufferLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::VertexBufferLayout> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::VertexBufferLayout,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

WTF *IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(WTF *result, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = *((_QWORD *)result + 2);
  v5 = *(_QWORD *)result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!(_DWORD)v3)
      return result;
    goto LABEL_9;
  }
  v9 = v8 + v4;
  v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= *((_QWORD *)result + 1))
  {
    *(_QWORD *)(*(_QWORD *)result + v9) = v3;
    *((_QWORD *)result + 2) = v10;
    v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  *((_QWORD *)result + 1) = 0;
  if (!(_DWORD)v3)
    return result;
LABEL_9:
  v12 = *(_QWORD *)a2;
  v13 = 40 * v3;
  do
  {
    result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::VertexBufferLayout>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::VertexBufferLayout> const&>(v2, v12);
    v12 += 40;
    v13 -= 40;
  }
  while (v13);
  return result;
}

WTF *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::VertexBufferLayout>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::VertexBufferLayout> const&>(WTF *result, uint64_t a2)
{
  WTF *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF *v23;
  unint64_t *v24;

  v2 = result;
  v4 = *((_QWORD *)result + 1);
  v3 = *((_QWORD *)result + 2);
  if (!*(_BYTE *)(a2 + 32))
  {
    if (v3 >= v4)
    {
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)result + v3) = 0;
      *((_QWORD *)result + 2) = v3 + 1;
    }
    return result;
  }
  if (v3 >= v4)
  {
    *((_QWORD *)result + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)result + v3) = 1;
    *((_QWORD *)result + 2) = v3 + 1;
    if (!*(_BYTE *)(a2 + 32))
    {
      v23 = (WTF *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::Decoder::decode<std::optional<WebKit::WebGPU::VertexBufferLayout>>(v23, v24);
    }
  }
  result = (WTF *)IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(result, (_QWORD *)a2);
  v6 = *((_QWORD *)v2 + 2);
  if (v6 >= *((_QWORD *)v2 + 1))
  {
    *((_QWORD *)v2 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)v2 + v6++) = *(_BYTE *)(a2 + 8);
    *((_QWORD *)v2 + 2) = v6;
  }
  v7 = *(unsigned int *)(a2 + 28);
  v8 = *(_QWORD *)v2 + v6;
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (v10)
  {
    v12 = v11 + v6;
    v13 = v11 + v6 + 8;
    if (v12 > 0xFFFFFFFFFFFFFFF7 || v13 > *((_QWORD *)v2 + 1))
    {
      *((_QWORD *)v2 + 1) = 0;
      if (!(_DWORD)v7)
        return result;
      goto LABEL_14;
    }
    *(_QWORD *)(*(_QWORD *)v2 + v12) = v7;
    *((_QWORD *)v2 + 2) = v13;
    v7 = *(unsigned int *)(a2 + 28);
    v6 = v13;
  }
  if (!(_DWORD)v7)
    return result;
LABEL_14:
  v15 = *(_QWORD *)(a2 + 16) + 8;
  v16 = 24 * v7;
  do
  {
    if (v6 >= *((_QWORD *)v2 + 1))
    {
      *((_QWORD *)v2 + 1) = 0;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)v2 + v6) = *(_BYTE *)(v15 - 8);
      *((_QWORD *)v2 + 2) = v6 + 1;
    }
    result = (WTF *)IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(v2, (_QWORD *)v15);
    v6 = *((_QWORD *)v2 + 2);
    v17 = *(_QWORD *)v2 + v6;
    v18 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v10 = v18 >= v17;
    v19 = v18 - v17;
    if (v10)
    {
      v20 = v19 + v6;
      v21 = v19 + v6 + 4;
      if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > *((_QWORD *)v2 + 1))
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)v2 + v20) = *(_DWORD *)(v15 + 8);
        *((_QWORD *)v2 + 2) = v21;
        v6 = v21;
      }
    }
    v15 += 24;
    v16 -= 24;
  }
  while (v16);
  return result;
}

WTF *IPC::Decoder::decode<std::optional<WebKit::WebGPU::VertexBufferLayout>>(WTF *result, unint64_t *a2)
{
  WTF *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  _BOOL4 v13;
  char *v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unsigned int v23;
  WTF *v24;
  int v25;
  unint64_t v26;
  int v27;
  char *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  int v32;
  unsigned int v33;
  char v34;
  int v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  char *v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  WTF *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  WTF *v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  WTF *v69;
  uint64_t v70;

  v3 = result;
  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v36 = 0;
    v37 = 0;
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (v38)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v38 + 16))(v38);
        v37 = (char *)*a2;
        v36 = a2[1];
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
    }
    goto LABEL_42;
  }
  v8 = &v5[v7];
  v9 = (uint64_t)&v5[v7 + 1];
  a2[2] = v9;
  if (!v5)
  {
    v36 = v6;
    v37 = 0;
LABEL_42:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v39 = a2[3];
    if (v39)
    {
      if (v36)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_68;
  }
  v10 = *v8;
  if (v10 < 2)
  {
    if (!v10)
    {
      v34 = 0;
      *(_BYTE *)result = 0;
      goto LABEL_40;
    }
    v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
    v13 = v6 < v11 || v6 - v11 < 8;
    if (v13)
    {
      v15 = 0;
      *a2 = 0;
      a2[1] = 0;
      v40 = a2[3];
      if (v40)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v40 + 16))(v40);
        v15 = 0;
        v41 = (char *)*a2;
        v42 = a2[1];
        v43 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v43)
        {
          if (v42)
          {
            (*(void (**)(unint64_t, char *))(*(_QWORD *)v43 + 16))(v43, v41);
            v15 = 0;
          }
        }
      }
    }
    else
    {
      v14 = &v5[v11];
      v15 = *(_QWORD *)v14;
      a2[2] = (unint64_t)(v14 + 8);
    }
    LOWORD(v66) = 0;
    IPC::Decoder::operator>><unsigned char>(a2, &v66);
    v16 = v66;
    if (BYTE1(v66))
      v17 = v66 > 1u;
    else
      v17 = 1;
    v18 = v17;
    if (v18 == 1)
    {
      v44 = (char *)*a2;
      v45 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v46 = a2[3];
      if (v46 && v45)
        (*(void (**)(unint64_t, char *))(*(_QWORD *)v46 + 16))(v46, v44);
      v16 = 0;
    }
    v19 = IPC::Decoder::decode<unsigned long long>(a2);
    if (!v21)
      goto LABEL_66;
    v22 = v19;
    v69 = 0;
    v70 = 0;
    if (v19 < 0xAAAA)
    {
      if (!v19)
      {
        v5 = (char *)*a2;
        if (*a2)
        {
          result = 0;
          v33 = 0;
          v32 = 0;
LABEL_36:
          v35 = 0;
          if (v13)
            goto LABEL_74;
LABEL_37:
          if (v18 || v35)
            goto LABEL_74;
          *(_QWORD *)v3 = v15;
          *((_BYTE *)v3 + 8) = v16;
          *((_QWORD *)v3 + 2) = result;
          v34 = 1;
          *((_DWORD *)v3 + 6) = v33;
          *((_DWORD *)v3 + 7) = v32;
LABEL_40:
          *((_BYTE *)v3 + 32) = v34;
          *((_BYTE *)v3 + 40) = 1;
          return result;
        }
LABEL_67:
        v6 = a2[1];
        goto LABEL_68;
      }
      v23 = 24 * v19;
      v24 = (WTF *)WTF::fastMalloc((WTF *)(24 * v19));
      LODWORD(v70) = v23 / 0x18;
      v69 = v24;
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebGPU::VertexAttribute>((uint64_t)&v66, a2);
        if (!v68)
          break;
        v25 = HIDWORD(v70);
        if (HIDWORD(v70) == (_DWORD)v70)
        {
          v26 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, (unint64_t)&v66);
          v27 = HIDWORD(v70);
          result = v69;
          v28 = (char *)v69 + 24 * HIDWORD(v70);
          v29 = *(_OWORD *)v26;
          *((_QWORD *)v28 + 2) = *(_QWORD *)(v26 + 16);
          *(_OWORD *)v28 = v29;
          v25 = v27;
        }
        else
        {
          result = v69;
          v30 = (char *)v69 + 24 * HIDWORD(v70);
          v31 = v66;
          *((_QWORD *)v30 + 2) = v67;
          *(_OWORD *)v30 = v31;
        }
        v32 = v25 + 1;
        HIDWORD(v70) = v25 + 1;
        if (!--v22)
        {
          v33 = v70;
          goto LABEL_30;
        }
      }
LABEL_64:
      v60 = v69;
      if (v69)
      {
        v69 = 0;
        LODWORD(v70) = 0;
        WTF::fastFree(v60, v5);
      }
LABEL_66:
      v5 = 0;
      v62 = *a2;
      v61 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v63 = a2[3];
      if (v63)
      {
        if (!v61)
        {
LABEL_82:
          v5 = 0;
          goto LABEL_67;
        }
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v63 + 16))(v63, v62);
        v5 = (char *)*a2;
        if (*a2)
        {
          result = 0;
          v35 = 1;
          if (v13)
          {
LABEL_74:
            __break(1u);
LABEL_75:
            if (v20)
              return (WTF *)(*(uint64_t (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v5);
            return result;
          }
          goto LABEL_37;
        }
      }
      goto LABEL_67;
    }
    do
    {
      IPC::Decoder::decode<WebKit::WebGPU::VertexAttribute>((uint64_t)&v66, a2);
      if (!v68)
        goto LABEL_64;
      v47 = HIDWORD(v70);
      if (HIDWORD(v70) == (_DWORD)v70)
      {
        v48 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, (unint64_t)&v66);
        v49 = HIDWORD(v70);
        result = v69;
        v50 = (char *)v69 + 24 * HIDWORD(v70);
        v51 = *(_OWORD *)v48;
        *((_QWORD *)v50 + 2) = *(_QWORD *)(v48 + 16);
        *(_OWORD *)v50 = v51;
        v47 = v49;
      }
      else
      {
        result = v69;
        v52 = (char *)v69 + 24 * HIDWORD(v70);
        v53 = v66;
        *((_QWORD *)v52 + 2) = v67;
        *(_OWORD *)v52 = v53;
      }
      v54 = (v47 + 1);
      HIDWORD(v70) = v47 + 1;
      --v22;
    }
    while (v22);
    v33 = v70;
    if (v70 > v54)
    {
      v65 = result;
      if (!(_DWORD)v54)
        goto LABEL_79;
      v55 = v54;
      if (v54 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      v56 = 24 * v54;
      result = (WTF *)WTF::fastMalloc((WTF *)(24 * v54));
      v33 = v56 / 0x18;
      LODWORD(v70) = v56 / 0x18;
      v69 = result;
      if (result == v65)
      {
LABEL_79:
        v69 = 0;
        LODWORD(v70) = 0;
      }
      else
      {
        v57 = 0;
        do
        {
          v58 = (char *)result + v57;
          v59 = *(_OWORD *)((char *)v65 + v57);
          *((_QWORD *)v58 + 2) = *(_QWORD *)((char *)v65 + v57 + 16);
          *(_OWORD *)v58 = v59;
          v57 += 24;
        }
        while (24 * v55 != v57);
        if (!v65)
          goto LABEL_81;
      }
      WTF::fastFree(v65, v5);
      result = v69;
      v33 = v70;
    }
LABEL_81:
    v32 = HIDWORD(v70);
LABEL_30:
    if (*a2)
      goto LABEL_36;
    if (!result)
      goto LABEL_82;
    WTF::fastFree(result, v5);
    v5 = (char *)*a2;
    goto LABEL_67;
  }
LABEL_68:
  *a2 = 0;
  a2[1] = 0;
  v64 = a2[3];
  if (v64 && v6)
    (*(void (**)(unint64_t, char *))(*(_QWORD *)v64 + 16))(v64, v5);
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 40) = 0;
  v5 = (char *)*a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF *)a2[3];
  if (result)
    goto LABEL_75;
  return result;
}

void sub_196F16984(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15)
    WTF::fastFree(a15, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::VertexBufferLayout>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12);
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 32) = 0;
  if (*(_BYTE *)(v3 + 32))
  {
    v5 = *(_QWORD *)v3;
    *(_BYTE *)(v4 + 8) = *(_BYTE *)(v3 + 8);
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    v6 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v4 + 16) = v6;
    LODWORD(v6) = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = 0;
    *(_DWORD *)(v4 + 24) = v6;
    LODWORD(v6) = *(_DWORD *)(v3 + 28);
    *(_DWORD *)(v3 + 28) = 0;
    *(_DWORD *)(v4 + 28) = v6;
    *(_BYTE *)(v4 + 32) = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  WTF *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x196F16B98);
    }
    v3 = *(WTF **)a1;
    v4 = (WTF *)(*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12));
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,std::optional<WebKit::WebGPU::VertexBufferLayout>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF *WTF::VectorMover<false,std::optional<WebKit::WebGPU::VertexBufferLayout>>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (char *)v5 + v6;
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 32) = 0;
      if (*((_BYTE *)v5 + v6 + 32))
      {
        v9 = *(_QWORD *)v8;
        *(_BYTE *)(v7 + 8) = v8[8];
        *(_QWORD *)v7 = v9;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        v10 = *((_QWORD *)v8 + 2);
        *((_QWORD *)v8 + 2) = 0;
        *(_QWORD *)(v7 + 16) = v10;
        LODWORD(v10) = *((_DWORD *)v8 + 6);
        *((_DWORD *)v8 + 6) = 0;
        *(_DWORD *)(v7 + 24) = v10;
        LODWORD(v10) = *((_DWORD *)v8 + 7);
        *((_DWORD *)v8 + 7) = 0;
        *(_DWORD *)(v7 + 28) = v10;
        *(_BYTE *)(v7 + 32) = 1;
        if (v8[32])
        {
          result = (WTF *)*((_QWORD *)v8 + 2);
          if (result)
          {
            *((_QWORD *)v8 + 2) = 0;
            *((_DWORD *)v8 + 6) = 0;
            result = (WTF *)WTF::fastFree(result, a2);
          }
        }
      }
      v6 += 40;
    }
    while ((WTF *)((char *)v5 + v6) != a2);
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,WebKit::WebGPU::VertexAttribute,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebGPU::VertexAttribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v4 = *((unsigned int *)a2 + 3);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *((_DWORD *)a2 + 3);
  if (v6)
  {
    v7 = *a2;
    v8 = v7 + 24 * v6;
    do
    {
      v9 = *(_BYTE *)v7;
      *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
      v10 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
      LODWORD(v10) = *(_DWORD *)(v7 + 16);
      result = IPC::Encoder::grow(a1, 4uLL, 4);
      *(_DWORD *)result = v10;
      v7 += 24;
    }
    while (v7 != v8);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<WebKit::WebGPU::VertexAttribute>(uint64_t a1, unint64_t *a2)
{
  _QWORD *result;
  int v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int *v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  __int16 v40;

  v40 = 0;
  result = IPC::Decoder::operator>><unsigned char>(a2, &v40);
  v5 = v40;
  if (HIBYTE(v40))
    v6 = v40 > 0x1Eu;
  else
    v6 = 1;
  v7 = v6;
  if (v7 == 1)
  {
    v22 = *a2;
    v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
    {
      if (v23)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t))(*result + 16))(result, v22);
      v5 = 0;
      v7 = 1;
    }
    else
    {
      v5 = 0;
    }
  }
  v8 = a2[1];
  v9 = *a2;
  v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v8 >= v10 && v8 - v10 > 7)
  {
    v12 = (uint64_t *)(v9 + v10);
    a2[2] = (unint64_t)(v12 + 1);
    if (v9)
    {
      v13 = 0;
      v14 = *v12;
      v15 = v9;
      goto LABEL_15;
    }
    goto LABEL_54;
  }
  v15 = 0;
  v24 = 0;
  *a2 = 0;
  a2[1] = 0;
  v25 = a2[3];
  if (v25)
  {
    v34 = v5;
    v38 = v7;
    if (v8)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v25 + 16))(v25);
      v24 = *a2;
      v15 = a2[1];
    }
    else
    {
      v15 = 0;
      v24 = 0;
    }
    v5 = v34;
    v7 = v38;
  }
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
    {
      v32 = v5;
      v36 = v7;
      if (v15)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, unint64_t))(*result + 16))(result, v24, v15);
        v14 = 0;
        v15 = *a2;
        v8 = a2[1];
        v13 = 1;
        v9 = *a2;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v14 = 0;
        v13 = 1;
      }
      v5 = v32;
      v7 = v36;
    }
    else
    {
      v15 = 0;
      v8 = 0;
      v9 = 0;
      v14 = 0;
      v13 = 1;
    }
LABEL_15:
    v16 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v9;
    if (v8 >= v16 && v8 - v16 > 3)
    {
      v18 = (int *)((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a2[2] = (unint64_t)(v18 + 1);
      v19 = v8;
      if (v9)
      {
        v20 = 0;
        v21 = *v18;
        if (v7)
          goto LABEL_53;
        goto LABEL_22;
      }
    }
    else
    {
      v19 = 0;
      v15 = 0;
      *a2 = 0;
      a2[1] = 0;
      v26 = a2[3];
      if (v26)
      {
        v31 = v13;
        v35 = v5;
        v29 = v14;
        v39 = v7;
        if (v8)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v26 + 16))(v26);
          v15 = *a2;
          v19 = a2[1];
        }
        else
        {
          v19 = 0;
          v15 = 0;
        }
        v5 = v35;
        v7 = v39;
        v14 = v29;
        v13 = v31;
      }
    }
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (!result || (v30 = v13, v33 = v5, v28 = v14, v37 = v7, !v19))
    {
      v27 = 0;
      goto LABEL_34;
    }
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, unint64_t))(*result + 16))(result, v15, v19);
    v9 = *a2;
    if (!*a2)
      break;
    v21 = 0;
    v20 = 1;
    v5 = v33;
    v7 = v37;
    v14 = v28;
    v13 = v30;
    if (v37)
      goto LABEL_53;
LABEL_22:
    if (!v13 && !v20)
    {
      *(_BYTE *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v14;
      *(_DWORD *)(a1 + 16) = v21;
      *(_BYTE *)(a1 + 24) = 1;
      return result;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    v15 = v8;
    v24 = v9;
  }
  v27 = a2[1];
  result = (_QWORD *)a2[3];
LABEL_34:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result)
  {
    if (v27)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 16))(result, 0);
  }
  return result;
}

_QWORD *IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!(_DWORD)v3)
      return result;
    goto LABEL_9;
  }
  v9 = v8 + v4;
  v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(_QWORD *)(*result + v9) = v3;
    result[2] = v10;
    v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!(_DWORD)v3)
    return result;
LABEL_9:
  v12 = *(uint64_t **)a2;
  v13 = 8 * v3;
  do
  {
    result = IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(v2, v12++);
    v13 -= 8;
  }
  while (v13);
  return result;
}

char *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned __int8 *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 40))
    {
      v6 = *(_DWORD *)(a2 + 32);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
      v7 = (char *)a1;
      v8 = a2;
      v9 = v6;
    }
    else
    {
      v7 = (char *)std::__throw_bad_optional_access[abi:sn180100]();
    }
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(v7, v8, v9);
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(char *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(a1, a2, a3);
  if (*(_DWORD *)(a2 + 32))
  {
    a1 = (char *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(a1, a2, a3);
  }
  return IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
}

char *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::ColorDict,void>::encode((IPC::Encoder *)result, (uint64_t *)a2);
    }
    else
    {
      v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(v3);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 32);
  v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(a1, a2, v2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(a1, a2, a3);
  if (*(_DWORD *)(a2 + 32))
  {
    a1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(a1, a2, a3);
  }
  return IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _BYTE *v4;

  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::ColorDict,void>::encode(result, (_QWORD *)a2);
    }
    else
    {
      v3 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::Decoder::decode<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>(v3, v4);
    }
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196F17234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 40))
  {
    v15 = *(unsigned int *)(v13 + 32);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34AE2E8[v15])(&a13, v13);
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  _BYTE *v12;

  v2 = result[1];
  v3 = *result;
  v4 = result[2] - *result;
  if (v2 <= v4)
  {
    v7 = 0;
    v8 = 0;
    *result = 0;
    result[1] = 0;
    v9 = result[3];
    if (v9)
    {
      v10 = result;
      v12 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v3, v2);
        result = v10;
        a2 = v12;
        v8 = *v10;
        v7 = v10[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  result[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v7 = v2;
    v8 = 0;
LABEL_7:
    *result = 0;
    result[1] = 0;
    result = (uint64_t *)result[3];
    if (result)
    {
      if (v7)
      {
        v11 = a2;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v8);
        a2 = v11;
      }
    }
    goto LABEL_4;
  }
  v6 = *v5;
  if (v6 >= 2)
  {
LABEL_4:
    *a2 = 0;
    a2[40] = 0;
    return result;
  }
  return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder>(result, v6, (uint64_t)a2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *result;
  char v5;
  _QWORD v6[2];
  char v7;

  if (a2)
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder,0ul>(a1, a2, a3);
  result = (uint64_t *)IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6);
  v5 = v7;
  if (v7)
  {
    *(_QWORD *)a3 = v6[0];
    *(_QWORD *)(a3 + 8) = v6[1];
    *(_DWORD *)(a3 + 32) = 0;
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 40) = v5;
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder,0ul>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  if (a2 == 1)
  {
    result = IPC::Decoder::decode<WebKit::WebGPU::ColorDict>(result, (uint64_t)v6);
    v4 = v7;
    if (v7)
    {
      v5 = v6[1];
      *(_OWORD *)a3 = v6[0];
      *(_OWORD *)(a3 + 16) = v5;
      v4 = 1;
      *(_DWORD *)(a3 + 32) = 1;
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 40) = v4;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
  }
  return result;
}

_QWORD *IPC::Decoder::decode<WebKit::WebGPU::ColorDict>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebGPU::ColorDict,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::BlendState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::BlendState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  char *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 6);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 6))
    {
      IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(a1, (char *)a2);
      return IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(a1, (char *)(a2 + 3));
    }
    else
    {
      v6 = (char *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(v6, v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(char *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  IPC::Encoder *v11;
  uint64_t v12;

  v3 = *((_QWORD *)result + 1);
  v2 = *((_QWORD *)result + 2);
  if (!*(_BYTE *)(a2 + 8))
  {
    if (v2 < v3)
    {
      *(_BYTE *)(*(_QWORD *)result + v2) = 0;
      *((_QWORD *)result + 2) = v2 + 1;
      return result;
    }
    goto LABEL_14;
  }
  if (v2 >= v3)
  {
    *((_QWORD *)result + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)result + v2++) = 1;
    *((_QWORD *)result + 2) = v2;
    if (!*(_BYTE *)(a2 + 8))
    {
      v11 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebCore::ScreenDataOverrides>,void>::encode<IPC::Encoder,std::optional<WebCore::ScreenDataOverrides> const&>(v11, v12);
    }
  }
  v4 = *(_QWORD *)result + v2;
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v2;
    v9 = v8 + 8;
    if (v8 <= 0xFFFFFFFFFFFFFFF7 && v9 <= *((_QWORD *)result + 1))
    {
      *(_QWORD *)(*(_QWORD *)result + v8) = *(_QWORD *)a2;
      *((_QWORD *)result + 2) = v9;
      return result;
    }
LABEL_14:
    *((_QWORD *)result + 1) = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebCore::ScreenDataOverrides>,void>::encode<IPC::Encoder,std::optional<WebCore::ScreenDataOverrides> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 24))
    {
      return IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebCore::ScreenDataOverrides>,void>::decode<IPC::Decoder>(v6, v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WebCore::ScreenDataOverrides>,void>::decode<IPC::Decoder>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  _BOOL4 v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = result[1];
  v3 = *result;
  v4 = result[2] - *result;
  if (v2 <= v4)
  {
    v22 = 0;
    v23 = 0;
    *result = 0;
    result[1] = 0;
    v24 = result[3];
    if (v24)
    {
      v54 = result;
      v60 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        result = v54;
        v23 = *v54;
        v22 = v54[1];
        a2 = v60;
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
    goto LABEL_27;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  v6 = v3 + v4 + 1;
  result[2] = v6;
  if (!v3)
  {
LABEL_63:
    v22 = v2;
    v23 = v3;
LABEL_27:
    v2 = 0;
    v3 = 0;
    *result = 0;
    result[1] = 0;
    v25 = result[3];
    if (v25)
    {
      v53 = result;
      v59 = a2;
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
        result = v53;
        v3 = *v53;
        v2 = v53[1];
        a2 = v59;
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_28;
  }
  v7 = *v5;
  if (v7 >= 2)
  {
LABEL_28:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result || !v2)
      goto LABEL_38;
    v58 = a2;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v3);
LABEL_54:
    a2 = v58;
LABEL_38:
    v21 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_25;
  }
  if (!v7)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    v21 = 1;
    goto LABEL_25;
  }
  v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  v10 = v2 < v8 || v2 - v8 < 8;
  if (v10)
  {
    *result = 0;
    result[1] = 0;
    v12 = 0;
    v26 = result[3];
    if (v26)
    {
      v61 = a2;
      v35 = result;
      (*(void (**)(uint64_t, double))(*(_QWORD *)v26 + 16))(v26, 0.0);
      v2 = 0;
      v36 = *v35;
      v37 = v35[1];
      v38 = v35[3];
      *v35 = 0;
      v35[1] = 0;
      if (v38 && v37)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v37);
        result = v35;
        v3 = *v35;
        v2 = v35[1];
        a2 = v61;
      }
      else
      {
        v3 = 0;
        a2 = v61;
        result = v35;
      }
      v10 = 1;
      v12 = 0;
    }
    else
    {
      v2 = 0;
      v3 = 0;
    }
  }
  else
  {
    v11 = (uint64_t *)(v3 + v8);
    v12 = *v11;
    result[2] = v11 + 1;
  }
  v13 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v13 || v2 - v13 <= 7)
  {
    v27 = 0;
    v28 = 0;
    *result = 0;
    result[1] = 0;
    v29 = result[3];
    if (v29)
    {
      v47 = v12;
      v51 = v10;
      v56 = result;
      v63 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        result = v56;
        v28 = *v56;
        v27 = v56[1];
        a2 = v63;
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
      v10 = v51;
      v12 = v47;
    }
  }
  else
  {
    v14 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    result[2] = v14 + 1;
    if (v3)
    {
      v15 = 0;
      v16 = *v14;
      goto LABEL_17;
    }
    v27 = v2;
    v28 = 0;
  }
  *result = 0;
  result[1] = 0;
  v16 = 0;
  v30 = result[3];
  if (v30)
  {
    v45 = v12;
    v49 = v10;
    v55 = result;
    v62 = a2;
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
      result = v55;
      v3 = *v55;
      v2 = v55[1];
      v15 = 1;
      a2 = v62;
      v10 = v49;
      v12 = v45;
      v16 = 0;
    }
    else
    {
      v2 = 0;
      v3 = 0;
      v15 = 1;
    }
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v15 = 1;
  }
LABEL_17:
  v17 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v17 || v2 - v17 <= 7)
  {
    v31 = 0;
    v32 = 0;
    *result = 0;
    result[1] = 0;
    v33 = result[3];
    if (v33)
    {
      v44 = v15;
      v42 = v16;
      v48 = v12;
      v52 = v10;
      v57 = result;
      v64 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        result = v57;
        v32 = *v57;
        v31 = v57[1];
        a2 = v64;
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
      v10 = v52;
      v12 = v48;
      v16 = v42;
      v15 = v44;
    }
LABEL_37:
    *result = 0;
    result[1] = 0;
    v34 = result[3];
    if (!v34 || !v31)
      goto LABEL_38;
    v43 = v15;
    v41 = v16;
    v46 = v12;
    v50 = v10;
    v58 = a2;
    v39 = result;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
    if (!*v39)
    {
      v40 = v39[1];
      result = (_QWORD *)v39[3];
      *v39 = 0;
      v39[1] = 0;
      a2 = v58;
      if (!result || !v40)
        goto LABEL_38;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 16))(result, 0);
      goto LABEL_54;
    }
    v19 = 1;
    v20 = 0;
    a2 = v58;
    v12 = v46;
    v16 = v41;
    v15 = v43;
    if (v50)
      goto LABEL_62;
    goto LABEL_21;
  }
  v18 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  result[2] = v18 + 1;
  if (!v3)
  {
    v31 = v2;
    v32 = 0;
    goto LABEL_37;
  }
  v19 = 0;
  v20 = *v18;
  if (v10)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
LABEL_21:
  if (v15 || v19)
    goto LABEL_62;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v20;
  v21 = 1;
  *(_BYTE *)(a2 + 24) = 1;
LABEL_25:
  *(_BYTE *)(a2 + 32) = v21;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebCore::PlatformTimeRanges>,void>::encode<IPC::Encoder,std::optional<WebCore::PlatformTimeRanges> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      return IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebCore::VideoPlaybackQualityMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoPlaybackQualityMetrics> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebCore::VideoPlaybackQualityMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoPlaybackQualityMetrics> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::encode(a1, (_DWORD *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::Decoder::decode<WebCore::PlatformTimeRanges>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

WTF *IPC::Decoder::decode<WebCore::PlatformTimeRanges>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PlatformTimeRanges,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<WebCore::VideoPlaybackQualityMetrics>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>(char *result, uint64_t a2, uint64_t a3)
{
  if (a3)
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,0ul>((IPC::Encoder *)result, (uint64_t *)a2, a3);
  if (*(_DWORD *)(a2 + 16))
  {
    result = (char *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,0ul>((IPC::Encoder *)result, (uint64_t *)a2, a3);
  }
  return result;
}

char *IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,0ul>(IPC::Encoder *this, uint64_t *a2, uint64_t a3)
{
  IPC::Encoder *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;

  v3 = this;
  if (a3 == 1)
  {
    if (*((_DWORD *)a2 + 4) == 1)
    {
      v4 = *a2;
      v5 = a2[1];
      *(_QWORD *)IPC::Encoder::grow(this, 8uLL, 8) = v4;
      result = IPC::Encoder::grow(v3, 8uLL, 8);
      *(_QWORD *)result = v5;
      return result;
    }
    this = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  return (char *)IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,0ul,1ul>(this, a2, a3);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,0ul,1ul>(IPC::Encoder *a1, _DWORD *a2, uint64_t a3)
{
  if (a3 == 2)
  {
    if (a2[4] == 2)
      return (IPC::Encoder *)IPC::Encoder::addAttachment((uint64_t)a1, (unint64_t)a2);
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,0ul,1ul,2ul>(a1, a2, a3);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,0ul,1ul,2ul>(IPC::Encoder *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 == 3)
  {
    if (a2[4] == 3)
    {
      return IPC::Encoder::operator<<<WebCore::IntPoint>(result, a2);
    }
    else
    {
      v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder>(v3);
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v11 = a1;
      v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v3, v2);
        a1 = v11;
        a2 = v13;
        v8 = *v11;
        v7 = v11[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_10;
  }
  v5 = (_BYTE *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v7 = v2;
    v8 = 0;
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
    {
      v12 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      a2 = v12;
    }
    goto LABEL_4;
  }
  v6 = *v5;
  if (v6 >= 4)
  {
LABEL_4:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  if (*v5)
  {
    IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder,0ul>(a1, v6, a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder,0ul>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  __int128 v5;
  char v6;

  if (a2 == 1)
  {
    IPC::Decoder::decode<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v5);
    v4 = v6;
    if (v6)
    {
      *(_OWORD *)a3 = v5;
      v4 = 1;
      *(_DWORD *)(a3 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 24) = v4;
  }
  else
  {
    IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder,0ul,1ul>((IPC::Decoder *)a1, a2, a3);
  }
}

unint64_t IPC::Decoder::decode<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder,0ul,1ul>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  _BYTE v7[4];
  char v8;

  if (a2 == 2)
  {
    IPC::Decoder::takeLastAttachment(a1, v7);
    if (v8)
    {
      WTF::MachSendRight::MachSendRight();
      *(_DWORD *)(a3 + 16) = 2;
      *(_BYTE *)(a3 + 24) = 1;
      if (v8)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v7);
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 24) = 0;
    }
  }
  else
  {
    if (a2 == 3 && (v4 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a1), v5))
    {
      *(_QWORD *)a3 = v4;
      *(_DWORD *)(a3 + 16) = 3;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 24) = v6;
  }
}

void sub_196F17FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul>(IPC::Encoder *a1, WebCore::Color *a2, uint64_t a3)
{
  if (a3 != 1)
    return IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul>(a1, (uint64_t)a2, a3);
  if (*((_DWORD *)a2 + 32) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul>(a1, (uint64_t)a2, a3);
  }
  return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 2)
    return IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul,2ul>(a1, (uint64_t *)a2, a3);
  if (*(_DWORD *)(a2 + 128) != 2)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul,2ul>(a1, (uint64_t *)a2, a3);
  }
  return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(a1, (int *)a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul,2ul>(IPC::Encoder *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 == 3)
  {
    if (*((_DWORD *)a2 + 32) == 3)
      return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(result, a2);
LABEL_8:
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Decoder::decode<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>(v3);
  }
  if (a3 == 4)
  {
    if (*((_DWORD *)a2 + 32) == 4)
      return IPC::ArgumentCoder<WebCore::FilterOperation,void>::encode(result, (_BYTE *)*a2);
    goto LABEL_8;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  char v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[8];
  unsigned __int8 v32;

  v4 = a2[1];
  v5 = *a2;
  v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    v25 = 0;
    v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v5, v4);
        v26 = *a2;
        v25 = a2[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
    goto LABEL_29;
  }
  v7 = (_BYTE *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v25 = v4;
    v26 = 0;
LABEL_29:
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28 && v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
    goto LABEL_4;
  }
  v8 = *v7;
  if (v8 > 4)
  {
LABEL_4:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 136) = 0;
LABEL_5:
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v10)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
    }
    return result;
  }
  if (!*v7)
  {
    result = IPC::Decoder::decode<float>(a2);
    if ((result & 0xFF00000000) == 0)
      goto LABEL_4;
    v14 = 0;
    v15 = (_DWORD *)a1;
LABEL_19:
    *v15 = result;
    *(_DWORD *)(a1 + 128) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    return result;
  }
  if (v8 != 1)
  {
    if (v8 == 2)
    {
      v16 = IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
      if ((v17 & 0xFF00000000) == 0)
        goto LABEL_4;
      v18 = v16;
      result = v17;
      *(_QWORD *)a1 = v18;
      v15 = (_DWORD *)(a1 + 8);
      v14 = 2;
      goto LABEL_19;
    }
    if (v8 == 3)
    {
      result = IPC::Decoder::decode<WebCore::TransformationMatrix>((uint64_t)v31, (uint64_t)a2);
      v19 = v32;
      if (v32)
      {
        v20 = v31[5];
        *(_OWORD *)(a1 + 64) = v31[4];
        *(_OWORD *)(a1 + 80) = v20;
        v21 = v31[7];
        *(_OWORD *)(a1 + 96) = v31[6];
        *(_OWORD *)(a1 + 112) = v21;
        v22 = v31[1];
        *(_OWORD *)a1 = v31[0];
        *(_OWORD *)(a1 + 16) = v22;
        v23 = v31[2];
        v24 = v31[3];
        *(_DWORD *)(a1 + 128) = 3;
        v19 = 1;
        *(_OWORD *)(a1 + 32) = v23;
        *(_OWORD *)(a1 + 48) = v24;
        goto LABEL_26;
      }
    }
    else
    {
      result = IPC::Decoder::decode<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>(v31, a2);
      v19 = BYTE8(v31[0]);
      if (BYTE8(v31[0]))
      {
        *(_QWORD *)a1 = *(_QWORD *)&v31[0];
        *(_DWORD *)(a1 + 128) = 4;
        v19 = 1;
        goto LABEL_26;
      }
    }
    *(_BYTE *)a1 = 0;
LABEL_26:
    *(_BYTE *)(a1 + 136) = v19;
    if (v19)
      return result;
    goto LABEL_5;
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v31);
  if (BYTE8(v31[0])
    || (v12 = (void *)*a2, v29 = a2[1], *a2 = 0, a2[1] = 0, (v30 = a2[3]) != 0)
    && v29
    && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v30 + 16))(v30, v12), BYTE8(v31[0])))
  {
    WebCore::Color::Color();
    v13 = 1;
    *(_DWORD *)(a1 + 128) = 1;
  }
  else
  {
    v13 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 136) = v13;
  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v12);
  if (!*(_BYTE *)(a1 + 136))
    goto LABEL_5;
  return result;
}

void sub_196F182E0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(*(_QWORD *)a1 + 136 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 128) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196F183BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 128);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34AE348[v15])(&a13, v13);
  *(_DWORD *)(v13 + 128) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 128);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34AE348[v4])(&v7, result);
  *(_DWORD *)(v3 + 128) = -1;
  v5 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34AE6F0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 128) = v5;
  }
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_()
{
  return WebCore::Color::Color();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  result = (__n128)a3[4];
  v7 = a3[5];
  v8 = a3[7];
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_OWORD *)(a2 + 112) = v8;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v7;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 136 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      JUMPOUT(0x196F18630);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 136 * *(unsigned int *)(a1 + 12);
    v5 = 136 * a2;
    v6 = WTF::fastMalloc((WTF *)(136 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x88;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (result != a2)
  {
    v10 = v3;
    v11 = v4;
    v7 = result;
    do
    {
      result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, v7);
      v8 = *(unsigned int *)(v7 + 128);
      if ((_DWORD)v8 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E34AE348[v8])(&v9, v7);
      *(_DWORD *)(v7 + 128) = -1;
      a3 += 136;
      v7 += 136;
    }
    while (v7 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  WTF *v6;

  if (result[2] > this)
  {
    v3 = (uint64_t)result;
    if (result[3] > this)
      result = (unsigned int *)WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, this);
    v4 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return result;
      }
      v5 = *(_DWORD *)(v3 + 12);
      v6 = (WTF *)(136 * this);
      result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x88;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)WTF::VectorMover<false,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::move((uint64_t)v4, (uint64_t)v4 + 136 * v5, (uint64_t)result);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)this);
    }
  }
  return result;
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if (v4 != a2)
  {
    v5 = *(_QWORD *)result + 136 * a2;
    v6 = 136 * v4 - 136 * a2;
    do
    {
      v7 = *(unsigned int *)(v5 + 128);
      if ((_DWORD)v7 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E34AE348[v7])(&v8, v5);
      *(_DWORD *)(v5 + 128) = -1;
      v5 += 136;
      v6 -= 136;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

WTF *IPC::Decoder::decode<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>(_BYTE *a1, uint64_t *a2)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::TimingFunction,void>::decode(a1, a2);
  if (!a1[8])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  WTF *v5;

  if (result[2] > a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > a2)
    {
      result = WTF::VectorTypeOperations<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>::destruct((_DWORD *)(*(_QWORD *)result + 8 * a2), (_DWORD **)(*(_QWORD *)result + 8 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v5, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)memcpy(result, v5, 8 * v4);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

__n128 WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PlatformCAAnimationRemoteProperties>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 136 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  result = *(__n128 *)(v3 + 34);
  v7 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v4 + 24) = v7;
  *(__n128 *)(v4 + 34) = result;
  v8 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v4 + 56) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 64);
  *(_BYTE *)(v4 + 68) = *(_BYTE *)(v3 + 68);
  *(_DWORD *)(v4 + 64) = v8;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  v9 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v4 + 72) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v4 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 84);
  *(_DWORD *)(v3 + 84) = 0;
  *(_DWORD *)(v4 + 84) = v9;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  v10 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v4 + 88) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 96);
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v4 + 96) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 100);
  *(_DWORD *)(v3 + 100) = 0;
  *(_DWORD *)(v4 + 100) = v10;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  v11 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v4 + 104) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 112);
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v4 + 112) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 116);
  *(_DWORD *)(v3 + 116) = 0;
  *(_DWORD *)(v4 + 116) = v11;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  v12 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v4 + 120) = v12;
  LODWORD(v12) = *(_DWORD *)(v3 + 128);
  *(_DWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v4 + 128) = v12;
  LODWORD(v12) = *(_DWORD *)(v3 + 132);
  *(_DWORD *)(v3 + 132) = 0;
  *(_DWORD *)(v4 + 132) = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 136 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      JUMPOUT(0x196F18BF8);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 136 * *(unsigned int *)(a1 + 12));
    v5 = 136 * a2;
    v6 = WTF::fastMalloc((WTF *)(136 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x88;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::PlatformCAAnimationRemoteProperties>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::PlatformCAAnimationRemoteProperties>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  WTF *v20;
  _DWORD *v21;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (char *)v5 + v6;
      v9 = *(_QWORD *)((char *)v5 + v6);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)v7 = v9;
      v10 = *(_OWORD *)((char *)v5 + v6 + 8);
      v11 = *(_OWORD *)((char *)v5 + v6 + 24);
      *(_OWORD *)(v7 + 34) = *(_OWORD *)((char *)v5 + v6 + 34);
      *(_OWORD *)(v7 + 24) = v11;
      *(_OWORD *)(v7 + 8) = v10;
      v12 = *(_QWORD *)((char *)v5 + v6 + 56);
      *((_QWORD *)v8 + 7) = 0;
      *(_QWORD *)(v7 + 56) = v12;
      LODWORD(v12) = *(_DWORD *)((char *)v5 + v6 + 64);
      *(_BYTE *)(v7 + 68) = *((_BYTE *)v5 + v6 + 68);
      *(_DWORD *)(v7 + 64) = v12;
      *(_QWORD *)(v7 + 72) = 0;
      *(_QWORD *)(v7 + 80) = 0;
      v13 = *(_QWORD *)((char *)v5 + v6 + 72);
      *(_QWORD *)((char *)v5 + v6 + 72) = 0;
      *(_QWORD *)(v7 + 72) = v13;
      LODWORD(v13) = *(_DWORD *)((char *)v5 + v6 + 80);
      *((_DWORD *)v8 + 20) = 0;
      *(_DWORD *)(v7 + 80) = v13;
      LODWORD(v13) = *(_DWORD *)((char *)v5 + v6 + 84);
      *((_DWORD *)v8 + 21) = 0;
      *(_DWORD *)(v7 + 84) = v13;
      *(_QWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 96) = 0;
      v14 = *(_QWORD *)((char *)v5 + v6 + 88);
      *((_QWORD *)v8 + 11) = 0;
      *(_QWORD *)(v7 + 88) = v14;
      LODWORD(v14) = *(_DWORD *)((char *)v5 + v6 + 96);
      *((_DWORD *)v8 + 24) = 0;
      *(_DWORD *)(v7 + 96) = v14;
      LODWORD(v14) = *(_DWORD *)((char *)v5 + v6 + 100);
      *((_DWORD *)v8 + 25) = 0;
      *(_DWORD *)(v7 + 100) = v14;
      *(_QWORD *)(v7 + 104) = 0;
      *(_QWORD *)(v7 + 112) = 0;
      v15 = *(_QWORD *)((char *)v5 + v6 + 104);
      *(_QWORD *)((char *)v5 + v6 + 104) = 0;
      *(_QWORD *)(v7 + 104) = v15;
      LODWORD(v15) = *(_DWORD *)((char *)v5 + v6 + 112);
      *((_DWORD *)v8 + 28) = 0;
      *(_DWORD *)(v7 + 112) = v15;
      LODWORD(v15) = *(_DWORD *)((char *)v5 + v6 + 116);
      *((_DWORD *)v8 + 29) = 0;
      *(_DWORD *)(v7 + 116) = v15;
      *(_QWORD *)(v7 + 120) = 0;
      *(_QWORD *)(v7 + 128) = 0;
      v16 = (uint64_t *)((char *)v5 + v6 + 120);
      v17 = *v16;
      *v16 = 0;
      *(_QWORD *)(v7 + 120) = v17;
      LODWORD(v17) = *(_DWORD *)((char *)v5 + v6 + 128);
      *((_DWORD *)v8 + 32) = 0;
      *(_DWORD *)(v7 + 128) = v17;
      LODWORD(v17) = *(_DWORD *)((char *)v5 + v6 + 132);
      *((_DWORD *)v8 + 33) = 0;
      *(_DWORD *)(v7 + 132) = v17;
      WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, a2);
      WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 104, v18);
      v20 = *(WTF **)((char *)v5 + v6 + 88);
      if (v20)
      {
        *((_QWORD *)v8 + 11) = 0;
        *((_DWORD *)v8 + 24) = 0;
        WTF::fastFree(v20, v19);
      }
      WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 72, v19);
      v21 = (_DWORD *)*((_QWORD *)v8 + 7);
      *((_QWORD *)v8 + 7) = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
        else
          --v21[2];
      }
      result = *(WTF::StringImpl **)v8;
      *(_QWORD *)v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v6 += 136;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, WTF *this)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  WTF *v6;

  if (result[2] > (unint64_t)this)
  {
    v3 = result;
    if (result[3] > (unint64_t)this)
      result = WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, this);
    v4 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if ((unint64_t)this >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      v6 = (WTF *)(136 * (_QWORD)this);
      result = (unsigned int *)WTF::fastMalloc(v6);
      v3[2] = (v6 & 0xFFFFFFF8) / 0x88;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)WTF::VectorMover<false,WebKit::PlatformCAAnimationRemoteProperties>::move(v4, (WTF::StringImpl *)((char *)v4 + 136 * v5), (uint64_t)result);
    }
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, this);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  WTF *v11;
  _DWORD *v12;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = *(_QWORD *)result;
    v6 = 136 * (_QWORD)a2;
    v7 = 136 * v4;
    do
    {
      v8 = v5 + v6;
      WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + v6 + 120, a2);
      WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + v6 + 104, v9);
      v11 = *(WTF **)(v5 + v6 + 88);
      if (v11)
      {
        *(_QWORD *)(v8 + 88) = 0;
        *(_DWORD *)(v8 + 96) = 0;
        WTF::fastFree(v11, v10);
      }
      WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v8 + 72, v10);
      v12 = *(_DWORD **)(v8 + 56);
      *(_QWORD *)(v8 + 56) = 0;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
        else
          --v12[2];
      }
      result = *(unsigned int **)v8;
      *(_QWORD *)v8 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v7 -= 136;
      v5 += 136;
    }
    while (v6 != v7);
  }
  v3[3] = v2;
  return result;
}

CFTypeRef *WebKit::HidConnection::HidConnection(CFTypeRef *this, __IOHIDDevice *a2)
{
  char *v3;

  *this = off_1E34AE828;
  v3 = (char *)(this + 2);
  WTF::RetainPtr<NSURLRequest>::RetainPtr(this + 1, (uint64_t)a2);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v3);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::Deque((WTF::RefCountedBase *)(this + 4));
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function(this + 8);
  *((_BYTE *)this + 72) = 0;
  return this;
}

{
  WebKit::HidConnection::HidConnection(this, a2);
  return this;
}

void sub_196F19014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t *v11;

  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v11);
  _Unwind_Resume(a1);
}

WTF::RefCountedBase *WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::Deque(WTF::RefCountedBase *a1)
{
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::Deque(a1);
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  return a1;
}

void WebKit::HidConnection::~HidConnection(WebKit::HidConnection *this)
{
  *(_QWORD *)this = off_1E34AE828;
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)this + 64);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::~Deque((WebKit::HidConnection *)((char *)this + 32));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::HidConnection *)((char *)this + 16));
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)this + 1);
}

{
  WebKit::HidConnection::~HidConnection(this);
}

{
  void *v2;

  WebKit::HidConnection::~HidConnection(this);
  WTF::FastMalloc::free(this, v2);
}

WTF::RefCountedBase *WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::~Deque(WTF::RefCountedBase *a1)
{
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::~Deque(a1);
  return a1;
}

{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll(a1);
  WTF::VectorBuffer<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1 + 16);
  return a1;
}

void WebKit::HidConnection::initialize(WebKit::HidConnection *this)
{
  __IOHIDDevice *v2;
  __IOHIDDevice *v3;
  __CFRunLoop *Current;
  __IOHIDDevice *v5;
  uint8_t *v6;
  CFIndex v7;

  v2 = (__IOHIDDevice *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 1);
  IOHIDDeviceOpen(v2, 1u);
  v3 = (__IOHIDDevice *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 1);
  Current = CFRunLoopGetCurrent();
  IOHIDDeviceScheduleWithRunLoop(v3, Current, (CFStringRef)*MEMORY[0x1E0C9B280]);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((unsigned int *)this + 4);
  v5 = (__IOHIDDevice *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 1);
  v6 = (uint8_t *)WTF::ASCIILiteral::characters((WebKit::HidConnection *)((char *)this + 16));
  v7 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)this + 16);
  IOHIDDeviceRegisterInputReportCallback(v5, v6, v7, (IOHIDReportCallback)WebKit::reportReceived, this);
  *((_BYTE *)this + 72) = 1;
}

uint64_t WTF::RetainPtr<__IOHIDDevice *>::get(uint64_t *a1)
{
  return WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)a1, *a1);
}

void WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(unsigned int *a1)
{
  if (a1[3] < 0x40uLL)
  {
    if ((unint64_t)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1) < 0x40)
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, 64);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
    if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1);
      WTF::VectorTypeOperations<unsigned char>::destruct();
    }
  }
  else
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  }
  a1[3] = 64;
}

WTF::ASCIILiteral *WebKit::reportReceived(WebKit *this, void *a2, uint64_t a3, void *a4, IOHIDReportType a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t v9[2];
  uint64_t v10[2];
  uint64_t v11[3];
  unsigned __int8 *v12;
  uint64_t v13;
  IOHIDReportType v14;
  int v15;
  uint64_t v16;
  int v17;
  WebKit *v18;

  v18 = this;
  v17 = (int)a2;
  v16 = a3;
  v15 = (int)a4;
  v14 = a5;
  v13 = a6;
  v12 = a7;
  v11[2] = (uint64_t)this;
  if ((_DWORD)a2)
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v11);
    WebKit::HidConnection::receiveReport((uint64_t)this, v11);
    return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v11);
  }
  else
  {
    std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v9, v13, (uint64_t)v12);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char,18446744073709551615ul>((WTF::ASCIILiteral *)v10, v9[0], v9[1]);
    WebKit::HidConnection::receiveReport((uint64_t)this, v10);
    return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v10);
  }
}

void sub_196F19430(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, uint64_t a16)
{
  a16 = a1;
  a15 = a2;
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a12);
  JUMPOUT(0x196F19440);
}

uint64_t WebKit::HidConnection::terminate(WebKit::HidConnection *this)
{
  __IOHIDDevice *v2;
  uint8_t *v3;
  CFIndex v4;
  __IOHIDDevice *v5;
  __CFRunLoop *Current;
  __IOHIDDevice *v7;
  uint64_t result;

  v2 = (__IOHIDDevice *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 1);
  v3 = (uint8_t *)WTF::ASCIILiteral::characters((WebKit::HidConnection *)((char *)this + 16));
  v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)this + 16);
  IOHIDDeviceRegisterInputReportCallback(v2, v3, v4, 0, 0);
  v5 = (__IOHIDDevice *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 1);
  Current = CFRunLoopGetCurrent();
  IOHIDDeviceUnscheduleFromRunLoop(v5, Current, (CFStringRef)*MEMORY[0x1E0C9B280]);
  v7 = (__IOHIDDevice *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 1);
  result = IOHIDDeviceClose(v7, 0);
  *((_BYTE *)this + 72) = 0;
  return result;
}

BOOL WebKit::HidConnection::sendSync(uint64_t a1, WTF::ASCIILiteral *a2)
{
  __IOHIDDevice *v2;
  const uint8_t *v3;
  CFIndex v4;

  v2 = (__IOHIDDevice *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 8));
  v3 = (const uint8_t *)WTF::ASCIILiteral::characters(a2);
  v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  return IOHIDDeviceSetReport(v2, kIOHIDReportTypeOutput, 0, v3, v4) == 0;
}

const void **WebKit::HidConnection::send(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  NSObject *global_queue;
  void *v4;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v6, (uint64_t *)(a1 + 8));
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, v11);
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler(&v8, v10);
  WTF::makeBlockPtr<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(&v9, (uint64_t *)&v6);
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0((uint64_t *)&v6);
  global_queue = dispatch_get_global_queue(0, 0);
  v4 = (void *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v9);
  dispatch_async(global_queue, v4);
  return WTF::BlockPtr<void ()(void)>::~BlockPtr(&v9);
}

void sub_196F1962C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&a12);
  _Unwind_Resume(a1);
}

uint64_t *WTF::makeBlockPtr<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(_QWORD *a1, uint64_t *a2)
{
  return WTF::makeBlockPtr<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &,void>(a1, a2, (uint64_t)WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator(), 0);
}

CFTypeRef *WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(CFTypeRef *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = WTF::RetainPtr<__IOHIDDevice *>::get(a2);
  WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, v3);
  return a1;
}

_QWORD *WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler(_QWORD *a1, uint64_t a2)
{
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0(uint64_t *a1)
{
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 3));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 1));
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1);
  return a1;
}

const void **WTF::BlockPtr<void ()(void)>::~BlockPtr(const void **a1)
{
  WTF::BlockPtr<void ()(void)>::~BlockPtr(a1);
  return a1;
}

{
  _Block_release(*a1);
  return a1;
}

uint64_t WebKit::HidConnection::registerDataReceivedCallback(WebKit::HidConnection *a1)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=((uint64_t)a1 + 64);
  WebKit::HidConnection::consumeReports(a1);
  return (*(uint64_t (**)(WebKit::HidConnection *))(*(_QWORD *)a1 + 48))(a1);
}

BOOL WebKit::HidConnection::consumeReports(WebKit::HidConnection *this)
{
  BOOL isEmpty;
  _BOOL8 result;
  _BYTE v4[16];
  WebKit::HidConnection *v5;

  v5 = this;
  while (1)
  {
    isEmpty = WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::isEmpty((_QWORD *)this + 4);
    result = 0;
    if (!isEmpty)
      result = WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
    if (!result)
      break;
    WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::takeFirst((uint64_t)v4, (WebKit::HidConnection *)((char *)this + 32));
    WTF::Function<void ()(WTF::String const&)>::operator()((uint64_t)this + 64, (uint64_t)v4);
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v4);
  }
  return result;
}

uint64_t WebKit::HidConnection::unregisterDataReceivedCallback(WebKit::HidConnection *this)
{
  return WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=((uint64_t)this + 64);
}

BOOL WebKit::HidConnection::receiveReport(uint64_t a1, uint64_t *a2)
{
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::append((WTF::RefCountedBase *)(a1 + 32), a2);
  return WebKit::HidConnection::consumeReports((WebKit::HidConnection *)a1);
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::append(WTF::RefCountedBase *a1, uint64_t *a2)
{
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::append<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
}

BOOL WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::isEmpty(_QWORD *a1)
{
  return *a1 == a1[1];
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::takeFirst(uint64_t a1, WTF *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::first(a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, v4);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::removeFirst(a2);
}

uint64_t WTF::RetainPtr<__IOHIDDevice *>::fromStorageType(uint64_t a1, uint64_t a2)
{
  return WTF::RetainPtr<NSURLRequest>::toStorageType(a1, a2);
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char,18446744073709551615ul>(WTF::ASCIILiteral *a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char,18446744073709551615ul>(a1, a2, a3);
}

{
  WTF::FastMalloc *v4;
  int v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];
  WTF::ASCIILiteral *v12;

  v11[0] = a2;
  v11[1] = a3;
  v12 = a1;
  v4 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v11);
  v5 = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v11);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v4, v5);
  std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v11);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    v6 = (const void *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v11);
    v7 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v11);
    v8 = v7 + std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v11);
    v9 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorMover<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(v6, v8, v9);
  }
  return v12;
}

uint64_t *WTF::makeBlockPtr<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &,void>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6[10];

  v6[9] = (uint64_t)a1;
  v6[8] = a4;
  v6[7] = a3;
  v6[6] = (uint64_t)a2;
  v6[5] = a4;
  v6[4] = a3;
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::$_0(v6, a2);
  WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(a1, v6);
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0(v6);
}

void sub_196F19B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0(&a12);
  _Unwind_Resume(a1);
}

WTF::ThreadLikeAssertion *WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(uint64_t *a1)
{
  __IOHIDDevice *v2;
  const uint8_t *v3;
  CFIndex v4;
  WTF::RunLoop *v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;

  v12 = a1;
  v2 = (__IOHIDDevice *)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
  v3 = (const uint8_t *)WTF::ASCIILiteral::characters((WTF::ASCIILiteral *)(a1 + 1));
  v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)(a1 + 1));
  v5 = (WTF::RunLoop *)IOHIDDeviceSetReport(v2, kIOHIDReportTypeOutput, 0, v3, v4);
  v10 = (int)v5;
  v11 = (_DWORD)v5 == 0;
  WTF::RunLoop::main(v5);
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler(&v7, (uint64_t)(a1 + 3));
  v8 = v11;
  WTF::Function<void ()(void)>::Function<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>(&v9, (uint64_t)&v7);
  WTF::RunLoop::dispatch();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v9);
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::~((WTF::ThreadLikeAssertion *)&v7);
}

void sub_196F19C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13, uint64_t a14, char a15)
{
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::~((WTF::ThreadLikeAssertion *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  char v5;
  int v6;
  void *v7;
  uint64_t *v8;
  _QWORD *v9;

  v9 = a1;
  v8 = a2;
  v7 = malloc_type_malloc(0x40uLL, 0x10F0040F78206E5uLL);
  *(_QWORD *)v7 = MEMORY[0x1E0C809A0];
  v6 = 1;
  *((_DWORD *)v7 + 2) = 50331650;
  *((_DWORD *)v7 + 3) = 0;
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v5);
  *((_QWORD *)v7 + 2) = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)v7 + 3) = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::descriptor;
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::$_0((uint64_t *)v7 + 4, a2);
  result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v7;
  return result;
}

uint64_t *WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1, a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 1), a2 + 1);
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler(a1 + 3, (uint64_t)(a2 + 3));
  return a1;
}

uint64_t *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = a1;
  return WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

uint64_t *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0((uint64_t *)(a2 + 32));
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = a1;
  return WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::operator()((uint64_t)&v2, a1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()((uint64_t *)(a2 + 32));
}

void sub_196F19EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t *v11;

  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v11);
  _Unwind_Resume(a1);
}

uint64_t *WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(uint64_t *a1, uint64_t *a2)
{
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1, a2);
  return a1;
}

{
  uint64_t v3;

  v3 = WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(a2);
  *a1 = WTF::RetainPtr<NSURLRequest>::toStorageType((uint64_t)a1, v3);
  return a1;
}

uint64_t WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(uint64_t *a1)
{
  uint64_t v2;

  v2 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  return WTF::RetainPtr<__IOHIDDevice *>::fromStorageType((uint64_t)a1, v2);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::~(WTF::ThreadLikeAssertion *a1)
{
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::~(a1);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler(a1);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_196F1A0F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34AE890;
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_196F1A19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

uint64_t WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::(uint64_t a1, uint64_t a2)
{
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::(a1, a2);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler((_QWORD *)a1, a2);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8) & 1;
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34AE890;
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::~((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()((WTF::RefCountedBase *)(a1 + 8));
}

uint64_t WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(WTF::RefCountedBase *a1)
{
  return WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::operator()(a1, *((_BYTE *)a1 + 8) & 1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::operator()(WTF::RefCountedBase *a1, char a2)
{
  uint64_t v4;
  char v5;
  WTF::RefCountedBase *v6;

  v6 = a1;
  v5 = a2 & 1;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  std::exchange[abi:sn180100]<WTF::Function<void ()(WebKit::HidConnection::DataSent)>,decltype(nullptr)>(&v4, (uint64_t)a1);
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::operator()((uint64_t)&v4, v5 & 1);
  return WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v4);
}

void sub_196F1A3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, char a13)
{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void std::exchange[abi:sn180100]<WTF::Function<void ()(WebKit::HidConnection::DataSent)>,decltype(nullptr)>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::Function<void ()(WTF::String const&)>::operator=(a2);
}

uint64_t WTF::Function<void ()(WebKit::HidConnection::DataSent)>::operator()(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, a2 & 1);
}

void sub_196F1A4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t v11;

  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function(v11);
  _Unwind_Resume(a1);
}

uint64_t WTF::VectorBuffer<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::FastMalloc>::~VectorBuffer(uint64_t a1)
{
  WTF::VectorBuffer<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::FastMalloc>::~VectorBuffer(a1);
  return a1;
}

{
  WTF::FastMalloc *v2;

  v2 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer(a1, v2);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

void sub_196F1A610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

void sub_196F1A678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;

  WTF::VectorBuffer<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::FastMalloc>::~VectorBuffer(v12 + 16);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  WTF::FastMalloc **v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = a1;
  v9[0] = a2;
  v8 = 16;
  v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1);
  v7 = v3
     + ((unint64_t)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1) >> 2)
     + 1;
  v4 = std::max[abi:sn180100]<unsigned long>(&v8, &v7);
  v5 = (WTF::FastMalloc **)std::max[abi:sn180100]<unsigned long>(v9, v4);
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *v5);
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::append<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::RefCountedBase *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::expandCapacityIfNeeded(a1);
  std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator new();
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3, a2);
  v4 = *((_QWORD *)a1 + 1);
  if (v4 == WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16)
           - 1)
    *((_QWORD *)a1 + 1) = 0;
  else
    ++*((_QWORD *)a1 + 1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::expandCapacityIfNeeded(WTF::RefCountedBase *a1)
{
  uint64_t v2;

  if (*(_QWORD *)a1)
  {
    if (*((_QWORD *)a1 + 1) + 1 != *(_QWORD *)a1)
      return;
  }
  else if (*((_QWORD *)a1 + 1))
  {
    v2 = *((_QWORD *)a1 + 1);
    if (v2 != WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16)
             - 1)
      return;
  }
  else if (WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16))
  {
    return;
  }
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::expandCapacity(a1);
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::expandCapacity(WTF::RefCountedBase *a1)
{
  unint64_t v2;
  WTF::ASCIILiteral *v3;
  uint64_t *v4;
  uint64_t v5;
  WTF::ASCIILiteral *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::ASCIILiteral *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::FastMalloc *v16;
  unint64_t v17;
  WTF::RefCountedBase *v18;
  unint64_t v19;
  _QWORD *v20;

  v18 = a1;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  v17 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16);
  v16 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
  v15 = 16;
  v14 = v17 + (v17 >> 2) + 1;
  v2 = *std::max[abi:sn180100]<unsigned long>(&v15, &v14);
  v20 = (_QWORD *)((char *)a1 + 16);
  v19 = v2;
  WTF::VectorBufferBase<WebCore::HTTPHeaderMap::CommonHeader,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)a1 + 16, v2);
  if (*(_QWORD *)a1 > *((_QWORD *)a1 + 1))
  {
    v6 = v16;
    v7 = (uint64_t *)((char *)v16 + 16 * *((_QWORD *)a1 + 1));
    v8 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
    WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v6, v7, v8);
    v9 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16);
    v13 = v9 - (v17 - *(_QWORD *)a1);
    v10 = (WTF::FastMalloc *)((char *)v16 + 16 * *(_QWORD *)a1);
    v11 = (uint64_t *)((char *)v16 + 16 * v17);
    v12 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
    WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v10, v11, v12 + 16 * v13);
    *(_QWORD *)a1 = v13;
  }
  else
  {
    v3 = (WTF::FastMalloc *)((char *)v16 + 16 * *(_QWORD *)a1);
    v4 = (uint64_t *)((char *)v16 + 16 * *((_QWORD *)a1 + 1));
    v5 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
    WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v3, v4, v5 + 16 * *(_QWORD *)a1);
  }
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1 + 16, v16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
}

WTF::ASCIILiteral *WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(WTF::ASCIILiteral *a1, uint64_t *a2, uint64_t a3)
{
  return WTF::VectorMover<false,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(a1, a2, a3);
}

WTF::ASCIILiteral *WTF::VectorMover<false,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(WTF::ASCIILiteral *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *i;

  for (i = (uint64_t *)result; i != a2; i += 2)
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator new();
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3, i);
    result = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)i);
    a3 += 16;
  }
  return result;
}

uint64_t WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::first(WTF *a1)
{
  WTF *isIntegralOrPointerType;

  if (*(_QWORD *)a1 == *((_QWORD *)a1 + 1))
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(a1);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x196F1ABA4);
  }
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16) + 16 * *(_QWORD *)a1;
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::removeFirst(WTF::RefCountedBase *a1)
{
  _BOOL8 isEmpty;
  WTF *isIntegralOrPointerType;
  WTF::ASCIILiteral *v4;
  uint64_t v5;
  uint64_t v6;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  isEmpty = WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::isEmpty(a1);
  if (isEmpty)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType((WTF *)isEmpty);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x196F1ACBCLL);
  }
  v4 = (WTF::ASCIILiteral *)(std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16)
                           + 16 * *(_QWORD *)a1);
  v5 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
  WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(v4, (WTF::ASCIILiteral *)(v5 + 16 * (*(_QWORD *)a1 + 1)));
  v6 = *(_QWORD *)a1;
  if (v6 == WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16)
           - 1)
    *(_QWORD *)a1 = 0;
  else
    ++*(_QWORD *)a1;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
}

WebKit::HidService *WebKit::HidService::HidService(WebKit::HidService *this, WebKit::AuthenticatorTransportServiceObserver *a2)
{
  IOHIDManagerRef v3;
  __IOHIDManager *v4;
  __IOHIDManager *v5;
  __IOHIDManager *v6;
  uint64_t v8[3];

  v8[2] = (uint64_t)this;
  v8[1] = (uint64_t)a2;
  WebKit::FidoService::FidoService(this, a2);
  *(_QWORD *)this = off_1E34AE8B8;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable((_QWORD *)this + 4);
  v3 = IOHIDManagerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  WTF::adoptCF<__IOHIDManager *>(v8, (uint64_t)v3);
  WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)this + 4, v8);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v8);
  v4 = (__IOHIDManager *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 4);
  IOHIDManagerSetDeviceMatching(v4, (CFDictionaryRef)&unk_1E356F7A8);
  v5 = (__IOHIDManager *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 4);
  IOHIDManagerRegisterDeviceMatchingCallback(v5, (IOHIDDeviceCallback)WebKit::deviceAddedCallback, this);
  v6 = (__IOHIDManager *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 4);
  IOHIDManagerRegisterDeviceRemovalCallback(v6, (IOHIDDeviceCallback)WebKit::deviceRemovedCallback, this);
  return this;
}

{
  WebKit::HidService::HidService(this, a2);
  return this;
}

void sub_196F1AE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  WebKit::FidoService *v13;
  uint64_t *v14;

  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v14);
  WebKit::FidoService::~FidoService(v13);
  _Unwind_Resume(a1);
}

uint64_t *WTF::adoptCF<__IOHIDManager *>(uint64_t *a1, uint64_t a2)
{
  return WTF::RetainPtr<__IOHIDManager *>::RetainPtr(a1, a2);
}

uint64_t *WTF::RetainPtr<__IOHIDManager *>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[3];

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(v4, a2);
  WTF::RetainPtr<NSURLRequest>::swap(a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

uint64_t WebKit::deviceAddedCallback(WebKit *this, void *a2, int a3, __IOHIDDevice *a4, __IOHIDDevice *a5)
{
  return WebKit::HidService::deviceAdded(this, a4);
}

void WebKit::FidoService::~FidoService(WebKit::FidoService *this)
{
  *(_QWORD *)this = off_1E34AE928;
  WTF::HashSet<std::unique_ptr<WebKit::CtapDriver>,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTableTraits>::~HashSet((WebKit::FidoService *)((char *)this + 24));
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  __break(1u);
}

{
  __break(1u);
}

void WebKit::HidService::~HidService(WebKit::HidService *this)
{
  __IOHIDManager *v2;
  __CFRunLoop *Current;
  __IOHIDManager *v4;

  *(_QWORD *)this = off_1E34AE8B8;
  v2 = (__IOHIDManager *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 4);
  Current = CFRunLoopGetCurrent();
  IOHIDManagerUnscheduleFromRunLoop(v2, Current, (CFStringRef)*MEMORY[0x1E0C9B280]);
  v4 = (__IOHIDManager *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 4);
  IOHIDManagerClose(v4, 0);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)this + 4);
  WebKit::FidoService::~FidoService(this);
}

{
  WebKit::HidService::~HidService(this);
}

{
  void *v2;

  WebKit::HidService::~HidService(this);
  WTF::FastMalloc::free(this, v2);
}

void sub_196F1B05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  uint64_t *v12;

  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v12 + 4);
  WebKit::FidoService::~FidoService((WebKit::FidoService *)v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::HidService::startDiscoveryInternal(WebKit::HidService *this)
{
  return (*(uint64_t (**)(WebKit::HidService *))(*(_QWORD *)this + 32))(this);
}

uint64_t WebKit::HidService::platformStartDiscovery(WebKit::HidService *this)
{
  __IOHIDManager *v2;
  __CFRunLoop *Current;
  __IOHIDManager *v4;

  v2 = (__IOHIDManager *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 4);
  Current = CFRunLoopGetCurrent();
  IOHIDManagerScheduleWithRunLoop(v2, Current, (CFStringRef)*MEMORY[0x1E0C9B280]);
  v4 = (__IOHIDManager *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)this + 4);
  return IOHIDManagerOpen(v4, 0);
}

_QWORD *WebKit::HidService::createHidConnection@<X0>(WebKit::HidService *this@<X0>, __IOHIDDevice *a2@<X1>, __IOHIDDevice *a3@<X8>)
{
  __IOHIDDevice *v4[3];

  v4[2] = a3;
  v4[1] = this;
  v4[0] = a2;
  return WTF::makeUniqueRef<WebKit::HidConnection,__IOHIDDevice *&>(a3, v4);
}

_QWORD *WTF::makeUniqueRef<WebKit::HidConnection,__IOHIDDevice *&>(WebKit::CtapDriver *a1, __IOHIDDevice **a2)
{
  return WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::HidConnection,__IOHIDDevice *&>(a1, a2);
}

uint64_t WebKit::HidService::deviceAdded(WebKit::HidService *this, __IOHIDDevice *a2)
{
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6[5];

  v6[2] = (uint64_t)this;
  v6[1] = (uint64_t)a2;
  (*(void (**)(uint64_t *__return_ptr, WebKit::HidService *, __IOHIDDevice *))(*(_QWORD *)this + 40))(&v4, this, a2);
  v6[4] = (uint64_t)v5;
  v6[3] = (uint64_t)&v4;
  std::make_unique[abi:sn180100]<WebKit::CtapHidDriver,WTF::UniqueRef<WebKit::HidConnection>>((WebKit::CtapDriver *)v5, (uint64_t)&v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(v6, (uint64_t)v5);
  WebKit::FidoService::getInfo((uint64_t)this, v6);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100]((uint64_t)v6);
  std::unique_ptr<WebKit::CtapHidDriver>::~unique_ptr[abi:sn180100]((uint64_t)v5);
  return WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v4);
}

void sub_196F1B264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<WebKit::CtapHidDriver>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  std::unique_ptr<WebKit::CtapHidDriver>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

{
  std::unique_ptr<WebKit::CtapHidDriver>::reset[abi:sn180100]();
  return a1;
}

void WebKit::AuthenticatorTransportService::restartDiscoveryInternal(WebKit::AuthenticatorTransportService *this)
{
  ;
}

uint64_t *WTF::RetainPtr<__IOHIDManager *>::RetainPtr(uint64_t *a1, uint64_t a2)
{
  WTF::RetainPtr<__IOHIDManager *>::RetainPtr(a1, a2);
  return a1;
}

{
  *a1 = WTF::RetainPtr<NSURLRequest>::toStorageType((uint64_t)a1, a2);
  return a1;
}

WTF::RefCountedBase *WTF::HashSet<std::unique_ptr<WebKit::CtapDriver>,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTableTraits>::~HashSet(WTF::RefCountedBase *a1)
{
  WTF::HashSet<std::unique_ptr<WebKit::CtapDriver>,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTableTraits>::~HashSet(a1);
  return a1;
}

{
  WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::~HashTable(a1);
  return a1;
}

void WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(WebKit::AuthenticatorTransportService *this)
{
  *(_QWORD *)this = off_1E34AE8F8;
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)this + 2);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportService,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((uint64_t *)this + 1);
}

{
  __break(1u);
}

{
  __break(1u);
}

WTF::RefCountedBase *WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::~HashTable(WTF::RefCountedBase *a1)
{
  WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::~HashTable(a1);
  return a1;
}

{
  void *v2;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  if (*(_QWORD *)a1)
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(*(_QWORD *)a1, v2);
  return a1;
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(uint64_t a1, void *a2)
{
  unsigned int i;
  unsigned int v4;

  v4 = *(_DWORD *)(a1 - 4);
  for (i = 0; i < v4; ++i)
  {
    if (!WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::isDeletedBucket())
      std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100](a1 + 8 * i);
  }
  return WTF::FastMalloc::free((WTF::FastMalloc *)(a1 - 16), a2);
}

BOOL WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::isDeletedBucket()
{
  std::__to_address[abi:sn180100]<char const>();
  return WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>::isDeletedValue();
}

BOOL WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>::isDeletedValue()
{
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]() == -1;
}

uint64_t *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportService,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(uint64_t *a1)
{
  WTF::WeakPtrFactory<WebKit::AuthenticatorTransportService,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a1);
  return a1;
}

uint64_t *WTF::WeakPtrFactory<WebKit::AuthenticatorTransportService,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(uint64_t *a1)
{
  WTF::WeakPtrFactory<WebKit::AuthenticatorTransportService,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a1);
  return a1;
}

{
  _QWORD v4[5];
  WTF::FastMalloc *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1))
  {
    v8 = a1;
    v9 = a1;
    WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::clear(*a1);
  }
  v4[1] = a1;
  v4[0] = 0;
  v7 = a1;
  v6 = v4;
  v5 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v5)
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v5);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WebKit::CtapHidDriver,WTF::UniqueRef<WebKit::HidConnection>>(WebKit::CtapDriver *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = WebKit::CtapDriver::operator new(a1);
  WebKit::CtapHidDriver::CtapHidDriver(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v3);
}

void sub_196F1B70C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CtapDriver::operator new(WebKit::CtapDriver *this)
{
  return WTF::fastMalloc((WTF *)0x50);
}

void std::unique_ptr<WebKit::CtapHidDriver>::reset[abi:sn180100]()
{
  unsigned int ***v0;
  _QWORD *v1;
  uint64_t v2;
  unsigned int **v3;

  std::to_address[abi:sn180100]<char const>();
  v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WebKit::CtapHidDriver>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<WebKit::CtapHidDriver>::operator()[abi:sn180100](uint64_t a1, unsigned int **a2)
{
  void *v3;
  uint64_t result;

  if (a2)
  {
    WebKit::CtapHidDriver::~CtapHidDriver(a2);
    return WTF::FastMalloc::free((WTF::FastMalloc *)a2, v3);
  }
  return result;
}

_QWORD *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::HidConnection,__IOHIDDevice *&>(WebKit::CtapDriver *a1, __IOHIDDevice **a2)
{
  CFTypeRef *v3;

  v3 = (CFTypeRef *)WebKit::CtapDriver::operator new(a1);
  WebKit::HidConnection::HidConnection(v3, *a2);
  return WTF::UniqueRef<WebKit::CtapHidDriverWorker>::UniqueRef(a1, (uint64_t)v3);
}

void sub_196F1B878(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void WebKit::InjectedBundleNodeHandle::getOrCreate(const OpaqueJSContext *a1@<X1>, JSValue a2@<X2>, WebKit::InjectedBundleNodeHandle **a3@<X8>)
{
  WebCore::JSNode **v5;
  WebKit::InjectedBundleNodeHandle *v6;
  WebKit::InjectedBundleNodeHandle *v7;
  WebKit::InjectedBundleNodeHandle *v8;

  v5 = (WebCore::JSNode **)((char *)a1 - 16);
  if ((a1 & 8) == 0)
    v5 = (WebCore::JSNode **)((unint64_t)a1 & 0xFFFFFFFFFFFFC000 | 8);
  v6 = (WebKit::InjectedBundleNodeHandle *)WebCore::JSNode::toWrapped(*v5, a1, a2);
  if (v6)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(v6, &v8);
    v7 = v8;
  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
}

void WebKit::InjectedBundleNodeHandle::getOrCreate(WebKit::InjectedBundleNodeHandle *this@<X0>, WebKit::InjectedBundleNodeHandle **a2@<X8>)
{
  uint64_t v5;
  WebKit::InjectedBundleNodeHandle *v6;
  void *v7;
  WebKit::InjectedBundleNodeHandle *v8;
  _BYTE v9[56];

  {
    WebKit::domNodeHandleCache(void)::cache = 0;
    *(_QWORD *)&dword_1ECE734E8 = 0;
  }
  v5 = WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::get((uint64_t)&WebKit::domNodeHandleCache(void)::cache, (uint64_t)this);
  if (v5)
  {
    v8 = (WebKit::InjectedBundleNodeHandle *)v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    *a2 = v8;
  }
  else
  {
    WebKit::InjectedBundleNodeHandle::create(this, a2);
    v6 = *a2;
    v7 = (void *)*((_QWORD *)*a2 + 6);
    if (v7)
    {
      {
        WebKit::domNodeHandleCache(void)::cache = 0;
        *(_QWORD *)&dword_1ECE734E8 = 0;
      }
      WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::add<WebKit::InjectedBundleNodeHandle&>((uint64_t)&WebKit::domNodeHandleCache(void)::cache, v7, (uint64_t)v6, (uint64_t)v9);
    }
  }
}

uint64_t WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::get(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  ++*(_DWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL;
  if (v2 && *(_QWORD *)(v2 + 8))
    return WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)a1, v2);
  else
    return 0;
}

uint64_t WebKit::InjectedBundleNodeHandle::create@<X0>(WebKit::InjectedBundleNodeHandle *this@<X0>, WebKit::InjectedBundleNodeHandle **a2@<X8>)
{
  WebKit::InjectedBundleNodeHandle *v5;
  WebKit::InjectedBundleNodeHandle *v6;

  v5 = (WebKit::InjectedBundleNodeHandle *)API::Object::newObject(0x38uLL, 136);
  v6 = WebKit::InjectedBundleNodeHandle::InjectedBundleNodeHandle(v5, this);
  *a2 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded((WebKit::InjectedBundleNodeHandle *)((char *)v6 + 16));
}

double WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::add<WebKit::InjectedBundleNodeHandle&>@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  double result;
  unsigned int v18;
  unsigned int v19;
  _BYTE v20[32];
  __int128 v21;
  unsigned int *v22;
  __int128 v23;
  char v24;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1, a2);
  WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::makeKeyImpl<WebCore::Node>((uint64_t)a2, &v22);
  WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleNodeHandle&>((uint64_t *)a1, (WTF **)&v22, a3, (uint64_t)&v23);
  v11 = v22;
  v22 = 0;
  if (v11)
  {
    do
    {
      v18 = __ldaxr(v11);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v11));
    if (!v19)
    {
      atomic_store(1u, v11);
      *(_QWORD *)v20 = v11;
      WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WTF **)v20, v10);
    }
  }
  *(_QWORD *)v20 = a1;
  *(_OWORD *)&v20[8] = v23;
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v13 = *(unsigned int *)(v12 - 4);
    v14 = v12 + 16 * v13;
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  *(_QWORD *)&v20[24] = v14;
  *(_QWORD *)&v21 = v12 + 16 * v13;
  DWORD2(v21) = 0;
  WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::PeekPtrType,WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::PeekType>::skipEmptyBuckets(v20);
  v15 = v24;
  v16 = *(_OWORD *)&v20[16];
  *(_OWORD *)a4 = *(_OWORD *)v20;
  *(_OWORD *)(a4 + 16) = v16;
  result = *(double *)&v21;
  *(_OWORD *)(a4 + 32) = v21;
  *(_BYTE *)(a4 + 48) = v15;
  return result;
}

WebKit::InjectedBundleNodeHandle *WebKit::InjectedBundleNodeHandle::InjectedBundleNodeHandle(WebKit::InjectedBundleNodeHandle *this, WebCore::Node *a2)
{
  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34AE9F0;
  WebCore::ActiveDOMObject::ActiveDOMObject((WebKit::InjectedBundleNodeHandle *)((char *)this + 16), *(Document **)(*((_QWORD *)a2 + 5) + 8));
  *(_QWORD *)this = &off_1E34AE958;
  *((_QWORD *)this + 2) = &unk_1E34AE998;
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a2;
  return this;
}

void WebKit::InjectedBundleNodeHandle::~InjectedBundleNodeHandle(WebKit::InjectedBundleNodeHandle *this, void *a2)
{
  WebCore::ActiveDOMObject *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E34AE958;
  *((_QWORD *)this + 2) = &unk_1E34AE998;
  v3 = (WebKit::InjectedBundleNodeHandle *)((char *)this + 16);
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  if (v4)
  {
    {
      WebKit::domNodeHandleCache(void)::cache = 0;
      *(_QWORD *)&dword_1ECE734E8 = 0;
    }
    WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::remove(v4, a2);
    v5 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v3);
}

{
  WebKit::InjectedBundleNodeHandle::~InjectedBundleNodeHandle(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

unsigned int *WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::remove(unsigned int *result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v2 = result;
  v3 = dword_1ECE734E8++;
  if (v3 > *(_DWORD *)algn_1ECE734EC)
    result = (unsigned int *)WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)&WebKit::domNodeHandleCache(void)::cache, a2);
  v4 = *((_QWORD *)v2 + 2);
  v5 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) != 0
    && *(_QWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 8)
    && WebKit::domNodeHandleCache(void)::cache)
  {
    v6 = *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 8);
    v7 = (v5 + ~(v4 << 32)) ^ ((unint64_t)(v5 + ~(v4 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    for (i = 1; ; ++i)
    {
      v12 = v10;
      v13 = *(_QWORD *)(WebKit::domNodeHandleCache(void)::cache + 16 * v10);
      if (v13 != -1)
      {
        if (!v13)
          return result;
        if (v13 == v5)
          break;
      }
      v10 = (v12 + i) & v6;
    }
    if ((_DWORD)v12 != *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 4))
    {
      result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>::customDeleteBucket(WebKit::domNodeHandleCache(void)::cache + 16 * v12, a2);
      ++*(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 16);
      v14 = WebKit::domNodeHandleCache(void)::cache ? *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 12) - 1 : -1;
      *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 12) = v14;
      if (WebKit::domNodeHandleCache(void)::cache)
      {
        v15 = *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 4);
        if (6 * *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 12) < v15 && v15 >= 9)
          return (unsigned int *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(&WebKit::domNodeHandleCache(void)::cache, v15 >> 1, 0);
      }
    }
  }
  return result;
}

void `non-virtual thunk to'WebKit::InjectedBundleNodeHandle::~InjectedBundleNodeHandle(WebKit::InjectedBundleNodeHandle *this, void *a2)
{
  WebKit::InjectedBundleNodeHandle::~InjectedBundleNodeHandle((WebKit::InjectedBundleNodeHandle *)((char *)this - 16), a2);
}

{
  WebKit::InjectedBundleNodeHandle::~InjectedBundleNodeHandle((WebKit::InjectedBundleNodeHandle *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::InjectedBundleNodeHandle::document(WebKit::InjectedBundleNodeHandle *this@<X0>, WebKit::InjectedBundleNodeHandle **a2@<X8>)
{
  WebKit::InjectedBundleNodeHandle *v3;
  WebKit::InjectedBundleNodeHandle *v4;

  v3 = (WebKit::InjectedBundleNodeHandle *)*((_QWORD *)this + 6);
  if (v3)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(*(WebKit::InjectedBundleNodeHandle **)(*((_QWORD *)v3 + 5) + 8), &v4);
    v3 = v4;
  }
  *a2 = v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::elementBounds(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 8) == 0)
  {
    if (v2)
    {
      v3 = 0;
      goto LABEL_4;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  v3 = WebCore::Element::boundsInRootViewSpace((WebCore::Element *)v1);
  v2 = *(_DWORD *)(v1 + 24) - 2;
  if (*(_DWORD *)(v1 + 24) != 2)
  {
LABEL_4:
    *(_DWORD *)(v1 + 24) = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return v3;
}

WebCore::RenderObject *WebKit::InjectedBundleNodeHandle::renderedImage@<X0>(WebCore::RenderObject *result@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LocalFrameView *v10;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  WebCore::DestinationColorSpace *v38;
  float v39;
  CFTypeRef *v41;
  WebKit *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  IntPoint v46;
  int32x2_t v47;
  _QWORD v48[2];
  WebKit *v49;
  int32x2_t v50;

  v6 = *((_QWORD *)result + 6);
  if (v6
    && (v7 = result,
        result = *(WebCore::RenderObject **)(*(_QWORD *)(v6 + 40) + 8),
        (v8 = *((_QWORD *)result + 66)) != 0)
    && (v9 = *(_QWORD *)(v8 + 8)) != 0
    && (v10 = *(WebCore::LocalFrameView **)(v9 + 288)) != 0
    && (WebCore::Document::updateLayout(),
        (result = (WebCore::RenderObject *)(*(_QWORD *)(*((_QWORD *)v7 + 6) + 64) & 0xFFFFFFFFFFFFLL)) != 0))
  {
    if (a3)
    {
      v14 = WebCore::RenderObject::absoluteBoundingBoxRect(result, 0, 0);
      v16 = v15;
    }
    else
    {
      v48[0] = 0;
      v48[1] = 0;
      v17 = WebCore::RenderObject::paintingRootRect(result, (WebCore::LayoutRect *)v48);
      v20 = v17 - (v19 & 0xFFFFFFC0);
      v21 = v20 + 32;
      v23 = HIDWORD(v17) - (v22 & 0xFFFFFFC0);
      v24 = v23 + 32;
      v14 = (((int)(v20 + 32) >> 6) + (int)v17 / 64) | ((unint64_t)(((int)(v23 + 32) >> 6) + SHIDWORD(v17) / 64) << 32);
      v26 = __OFADD__(v20, v25);
      v27 = v20 + v25;
      v28 = (v20 >> 31) + 0x7FFFFFFF;
      if (!v26)
        v28 = v27;
      v29 = (v28 / 64 - (v21 >> 6) + ((int)(v28 - (v27 & 0xFFFFFFC0) + 32) >> 6));
      v26 = __OFADD__(v23, v18);
      v30 = v23 + v18;
      v31 = (v23 >> 31) + 0x7FFFFFFF;
      if (!v26)
        v31 = v30;
      v16 = v29 | ((unint64_t)(v31 / 64 - (v24 >> 6) + ((int)(v31 - (v30 & 0xFFFFFFC0) + 32) >> 6)) << 32);
    }
    WebCore::LocalFrameView::setNodeToDraw(v10, *((Node **)v7 + 6));
    v32 = HIDWORD(v16);
    if ((int)v16 < 1 || SHIDWORD(v16) <= 0)
      goto LABEL_34;
    if (*(_BYTE *)(a4 + 4))
    {
      v34 = *(float *)a4 / (float)(int)v16;
      v35 = roundf(*(float *)a4);
      v36 = v35 > -2147500000.0 ? (int)v35 : 0x80000000;
      LODWORD(v16) = v35 < 2147500000.0 ? v36 : 0x7FFFFFFF;
      v37 = roundf(v34 * (float)(int)v32);
      if (v37 >= 2147500000.0)
        LODWORD(v32) = 0x7FFFFFFF;
      else
        LODWORD(v32) = v37 <= -2147500000.0 ? 0x80000000 : (int)v37;
    }
    else
    {
      v34 = 1.0;
    }
    v38 = (WebCore::DestinationColorSpace *)WebCore::LocalFrameView::frame(v10);
    v39 = *(float *)(*(_QWORD *)(*((_QWORD *)v38 + 3) + 8) + 364);
    v50.i32[0] = (int)(float)(v39 * (float)(int)v16);
    v50.i32[1] = (int)(float)(v39 * (float)(int)v32);
    if (v50.i32[0] < 1 || (int)(float)(v39 * (float)(int)v32) <= 0)
    {
LABEL_34:
      *a5 = 0;
    }
    else
    {
      v41 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v38);
      WebKit::WebImage::create(&v50, a2 & 1, v41, 0, &v49);
      v42 = v49;
      v43 = *((_QWORD *)v49 + 2);
      if (v43)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
        v44 = *((_QWORD *)v49 + 2);
        if (v44)
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        else
          v45 = 0;
        v46 = 0;
        v47 = v50;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v48, (const WebCore::IntRect *)&v46);
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v45 + 280))(v45, v48);
        (*(void (**)(uint64_t, float))(*(_QWORD *)v45 + 680))(v45, v39);
        *(float *)v48 = v34;
        *((float *)v48 + 1) = v34;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v45 + 632))(v45, v48);
        v46 = (IntPoint)(-(int)v14 - (v14 & 0xFFFFFFFF00000000));
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v48, &v46);
        (*(void (**)(uint64_t, float, float))(*(_QWORD *)v45 + 648))(v45, *(float *)v48, *((float *)v48 + 1));
        WebCore::LocalFrameView::paintBehavior(v10);
        WebCore::LocalFrameView::paintBehavior(v10);
        WebCore::LocalFrameView::setPaintBehavior();
        WebCore::LocalFrameView::paintContentsForSnapshot();
        WebCore::LocalFrameView::setPaintBehavior();
        *a5 = v49;
      }
      else
      {
        *a5 = 0;
        v49 = 0;
        CFRelease(*((CFTypeRef *)v42 + 1));
      }
    }
    return (WebCore::RenderObject *)WebCore::LocalFrameView::setNodeToDraw(v10, 0);
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

WebCore::Node *WebCore::firstPositionInNode(WebCore *this, WebCore::Node *a2)
{
  WebCore::Node *result;
  WebCore::Node *v3;

  if ((*((_WORD *)this + 14) & 1) != 0)
  {
    *((_DWORD *)this + 6) += 2;
    v3 = this;
    WebCore::Position::Position();
  }
  else
  {
    *((_DWORD *)this + 6) += 2;
    v3 = this;
    WebCore::Position::Position();
  }
  result = v3;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v3);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::lastPositionInNode(WebCore *this, WebCore::Node *a2)
{
  WebCore::Node *result;
  WebCore::Node *v3;

  if ((*((_WORD *)this + 14) & 1) != 0)
  {
    *((_DWORD *)this + 6) += 2;
    v3 = this;
    WebCore::Position::Position();
  }
  else
  {
    *((_DWORD *)this + 6) += 2;
    v3 = this;
    WebCore::Position::Position();
  }
  result = v3;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v3);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>@<X0>(uint64_t a1@<X8>)
{
  uint64_t *result;
  int v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  WebCore::makeBoundaryPoint();
  result = (uint64_t *)WebCore::makeBoundaryPoint();
  v3 = v8;
  if (v10)
    v4 = v8 == 0;
  else
    v4 = 1;
  if (v4)
  {
    v6 = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    WebCore::SimpleRange::SimpleRange();
    *(_QWORD *)a1 = v11;
    *(_DWORD *)(a1 + 8) = v12;
    v5 = v13;
    v11 = 0;
    v13 = 0;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = v14;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
    result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    v3 = v8;
    v6 = 1;
  }
  *(_BYTE *)(a1 + 32) = v6;
  if (v3)
    result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v7);
  if (v10)
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementValueForUser(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(this + 48);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 2;
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      this = WebCore::HTMLInputElement::setValueForUser((WebCore::HTMLInputElement *)v2, a2);
      v3 = *(_DWORD *)(v2 + 24) - 2;
      if (*(_DWORD *)(v2 + 24) != 2)
      {
LABEL_5:
        *(_DWORD *)(v2 + 24) = v3;
        return this;
      }
    }
    else if (v3)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  return this;
}

uint64_t WebCore::HTMLInputElement::setValueForUser(WebCore::HTMLInputElement *this, const WTF::String *a2)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char v5;

  result = WebCore::HTMLInputElement::setValue();
  if (v5)
  {
    result = (uint64_t)v4;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        return WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementSpellcheckEnabled(WebKit::InjectedBundleNodeHandle *this, int a2)
{
  uint64_t result;
  int v3;
  __int16 v4;

  result = *((_QWORD *)this + 6);
  if (result)
  {
    v3 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v3 + 2;
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      if (a2)
        v4 = 0;
      else
        v4 = 2048;
      *(_WORD *)(result + 232) = *(_WORD *)(result + 232) & 0xF7FF | v4;
      if (v3)
        goto LABEL_8;
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      if (v3)
      {
LABEL_8:
        *(_DWORD *)(result + 24) = v3;
        return result;
      }
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::isHTMLInputElementAutoFilled(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    if (v2)
    {
      v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  v3 = HIBYTE(*(unsigned __int16 *)(v1 + 230)) & 1;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 24) = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::isHTMLInputElementAutoFilledAndViewable(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    if (v2)
    {
      v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  v3 = (*(unsigned __int16 *)(v1 + 230) >> 9) & 1;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 24) = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::isHTMLInputElementAutoFilledAndObscured(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    if (v2)
    {
      v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  v3 = (*(unsigned __int16 *)(v1 + 230) >> 10) & 1;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 24) = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilled(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(this + 48);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 24);
    *(_DWORD *)(v1 + 24) = v2 + 2;
    if ((*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      this = WebCore::HTMLInputElement::setAutoFilled((WebCore::HTMLInputElement *)v1);
      v2 = *(_DWORD *)(v1 + 24) - 2;
      if (*(_DWORD *)(v1 + 24) != 2)
      {
LABEL_5:
        *(_DWORD *)(v1 + 24) = v2;
        return this;
      }
    }
    else if (v2)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return this;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilledAndViewable(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(this + 48);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 24);
    *(_DWORD *)(v1 + 24) = v2 + 2;
    if ((*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      this = WebCore::HTMLInputElement::setAutoFilledAndViewable((WebCore::HTMLInputElement *)v1);
      v2 = *(_DWORD *)(v1 + 24) - 2;
      if (*(_DWORD *)(v1 + 24) != 2)
      {
LABEL_5:
        *(_DWORD *)(v1 + 24) = v2;
        return this;
      }
    }
    else if (v2)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return this;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilledAndObscured(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(this + 48);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 24);
    *(_DWORD *)(v1 + 24) = v2 + 2;
    if ((*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      this = WebCore::HTMLInputElement::setAutoFilledAndObscured((WebCore::HTMLInputElement *)v1);
      v2 = *(_DWORD *)(v1 + 24) - 2;
      if (*(_DWORD *)(v1 + 24) != 2)
      {
LABEL_5:
        *(_DWORD *)(v1 + 24) = v2;
        return this;
      }
    }
    else if (v2)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return this;
}

BOOL WebKit::InjectedBundleNodeHandle::isHTMLInputElementAutoFillButtonEnabled(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  _BOOL8 v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    if (v2)
    {
      v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  v3 = (*(_WORD *)(v1 + 230) & 0x3800) != 0;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 24) = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFillButtonEnabled(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 48);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 24);
    *(_DWORD *)(v1 + 24) = v2 + 2;
    if ((*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      result = WebCore::HTMLInputElement::setShowAutoFillButton();
      v2 = *(_DWORD *)(v1 + 24) - 2;
      if (*(_DWORD *)(v1 + 24) != 2)
      {
LABEL_5:
        *(_DWORD *)(v1 + 24) = v2;
        return result;
      }
    }
    else if (v2)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlInputElementAutoFillButtonType(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    if (v2)
    {
      v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  v3 = (*(unsigned __int16 *)(v1 + 230) >> 11) & 7;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 24) = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlInputElementLastAutoFillButtonType(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    if (v2)
    {
      v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  v3 = *(_BYTE *)(v1 + 232) & 7;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 24) = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::setAutoFillAvailable(WebKit::InjectedBundleNodeHandle *this, int a2)
{
  uint64_t result;
  int v3;
  __int16 v4;

  result = *((_QWORD *)this + 6);
  if (result)
  {
    v3 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v3 + 2;
    if ((*(_WORD *)(result + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      if (a2)
        v4 = 8;
      else
        v4 = 0;
      *(_WORD *)(result + 232) = *(_WORD *)(result + 232) & 0xFFF7 | v4;
      if (v3)
        goto LABEL_8;
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      if (v3)
      {
LABEL_8:
        *(_DWORD *)(result + 24) = v3;
        return result;
      }
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlInputElementLastChangeWasUserEdit(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    if (v2)
    {
      v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  v3 = WebCore::HTMLTextFormControlElement::lastChangeWasUserEdit((WebCore::HTMLTextFormControlElement *)v1);
  v2 = *(_DWORD *)(v1 + 24) - 2;
  if (*(_DWORD *)(v1 + 24) != 2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 24) = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlTextAreaElementLastChangeWasUserEdit(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD5D90] + 24))
  {
    if (v2)
    {
      v3 = 0;
LABEL_7:
      *(_DWORD *)(v1 + 24) = v2;
      return v3;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  v3 = WebCore::HTMLTextFormControlElement::lastChangeWasUserEdit((WebCore::HTMLTextFormControlElement *)v1);
  v2 = *(_DWORD *)(v1 + 24) - 2;
  if (*(_DWORD *)(v1 + 24) != 2)
    goto LABEL_7;
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::isTextField(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  int v2;
  uint64_t isTextField;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    if (v2)
    {
      isTextField = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    return 0;
  }
  isTextField = WebCore::HTMLInputElement::isTextField((WebCore::HTMLInputElement *)v1);
  v2 = *(_DWORD *)(v1 + 24) - 2;
  if (*(_DWORD *)(v1 + 24) != 2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 24) = v2;
    return isTextField;
  }
  if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  return isTextField;
}

BOOL WebKit::InjectedBundleNodeHandle::isSelectableTextNode(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  if ((*(_WORD *)(v1 + 28) & 2) == 0)
    return 0;
  v2 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  if ((*(_BYTE *)(v2 + 45) & 2) != 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (v2)
      v2 = *(_QWORD *)(v2 + 8);
  }
  return WebCore::RenderStyle::usedUserSelect((WebCore::RenderStyle *)(v2 + 80)) != 0;
}

void WebKit::InjectedBundleNodeHandle::htmlTableCellElementCellAbove(WebKit::InjectedBundleNodeHandle *this@<X0>, WebKit::InjectedBundleNodeHandle **a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebKit::InjectedBundleNodeHandle *v6;
  WebKit::InjectedBundleNodeHandle *v7;
  WebKit::InjectedBundleNodeHandle *v8;

  v3 = *((_QWORD *)this + 6);
  if (!v3)
    goto LABEL_7;
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 2;
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0
    || (v5 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24), v5 != *(_QWORD *)(*MEMORY[0x1E0DD5F60] + 24))
    && v5 != *(_QWORD *)(*MEMORY[0x1E0DD5F68] + 24))
  {
    if (v4)
    {
      *(_DWORD *)(v3 + 24) = v4;
    }
    else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
LABEL_7:
    *a2 = 0;
    return;
  }
  v6 = (WebKit::InjectedBundleNodeHandle *)WebCore::HTMLTableCellElement::cellAbove((WebCore::HTMLTableCellElement *)v3);
  if (v6)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(v6, &v8);
    v7 = v8;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

uint64_t WebKit::InjectedBundleNodeHandle::documentFrame@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(this + 48);
  if (!v2)
    goto LABEL_15;
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  if ((*(_WORD *)(v2 + 28) & 0xF000) != 0x9000)
  {
    v5 = a2;
    if (v3)
    {
      *(_DWORD *)(v2 + 24) = v3;
    }
    else
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) != 0)
        goto LABEL_15;
      this = WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    a2 = v5;
LABEL_15:
    *a2 = 0;
    return this;
  }
  v4 = *(_QWORD *)(v2 + 528);
  if (v4 && (this = *(_QWORD *)(v4 + 8)) != 0)
  {
    this = WebKit::WebFrame::fromCoreFrame(this, a2);
    v3 = *(_DWORD *)(v2 + 24) - 2;
  }
  else
  {
    *a2 = 0;
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  return this;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlIFrameElementContentFrame@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 48);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD61C0] + 24))
    {
      v3 = *(_QWORD *)(v2 + 112);
      if (v3)
      {
        this = *(_QWORD *)(v3 + 8);
        if (this)
          return WebKit::WebFrame::fromCoreFrame(this, a2);
      }
    }
  }
  *a2 = 0;
  return this;
}

uint64_t WebKit::InjectedBundleNodeHandle::stop(WebKit::InjectedBundleNodeHandle *this, void *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
  {
    {
      WebKit::domNodeHandleCache(void)::cache = 0;
      *(_QWORD *)&dword_1ECE734E8 = 0;
    }
    WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::remove((unsigned int *)result, a2);
    result = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::InjectedBundleNodeHandle::stop(WebKit::InjectedBundleNodeHandle *this, void *a2)
{
  return WebKit::InjectedBundleNodeHandle::stop((WebKit::InjectedBundleNodeHandle *)((char *)this - 16), a2);
}

uint64_t API::ObjectImpl<(API::Object::Type)136>::type()
{
  return 136;
}

CFTypeRef WebKit::InjectedBundleNodeHandle::ref(CFTypeRef *this)
{
  return CFRetain(this[1]);
}

void WebKit::InjectedBundleNodeHandle::deref(CFTypeRef *this)
{
  CFRelease(this[1]);
}

CFTypeRef `non-virtual thunk to'WebKit::InjectedBundleNodeHandle::ref(CFTypeRef *this)
{
  return CFRetain(*(this - 1));
}

void `non-virtual thunk to'WebKit::InjectedBundleNodeHandle::deref(CFTypeRef *this)
{
  CFRelease(*(this - 1));
}

uint64_t WebCore::ActiveDOMObject::virtualHasPendingActivity(WebCore::ActiveDOMObject *this)
{
  return 0;
}

void API::ObjectImpl<(API::Object::Type)136>::~ObjectImpl()
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(a1 + 16));
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)a1);
  }
  return a1;
}

uint64_t *WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (v10 == a2)
        break;
    }
  }
  v11 = *(_QWORD *)(v2 + 16 * v9 + 8);
  if (v11)
    return *(_QWORD *)(v11 + 8);
  else
    return 0;
}

uint64_t *WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleNodeHandle&>@<X0>(uint64_t *result@<X0>, WTF **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  uint64_t *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v10;
    v18 = (uint64_t *)(v8 + 16 * v17);
    v19 = (WTF *)*v18;
    if (*v18 == -1)
    {
      v11 = (uint64_t *)(v8 + 16 * v17);
      goto LABEL_6;
    }
    if (!v19)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v18 = v11;
      }
      WTF::GenericHashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>::assignToEmpty<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((WTF **)v18, a2);
      if (!*(_QWORD *)(a3 + 40))
      {
        v21 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = a3;
        v22 = *(unsigned int **)(a3 + 40);
        *(_QWORD *)(a3 + 40) = v21;
        if (v22)
        {
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v22);
            WTF::fastFree((WTF *)v22, v20);
          }
        }
      }
      v25 = *(unsigned int **)(a3 + 40);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
      result = (uint64_t *)v18[1];
      v18[1] = (uint64_t)v25;
      if (result)
      {
        do
        {
          v35 = __ldaxr((unsigned int *)result);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, (unsigned int *)result));
        if (!v36)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
        }
      }
      v27 = *v6;
      if (*v6)
        v28 = *(_DWORD *)(v27 - 12) + 1;
      else
        v28 = 1;
      *(_DWORD *)(v27 - 12) = v28;
      v29 = *v6;
      if (*v6)
        v30 = *(_DWORD *)(v29 - 12);
      else
        v30 = 0;
      v31 = (*(_DWORD *)(v29 - 16) + v30);
      v32 = *(unsigned int *)(v29 - 4);
      if (v32 > 0x400)
      {
        if (v32 > 2 * v31)
          goto LABEL_24;
      }
      else if (3 * v32 > 4 * v31)
      {
LABEL_24:
        v33 = v29 + 16 * v32;
        v34 = 1;
        goto LABEL_25;
      }
      result = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(v6, (unsigned int **)v18);
      v18 = result;
      v29 = *v6;
      if (*v6)
        v32 = *(unsigned int *)(v29 - 4);
      else
        v32 = 0;
      goto LABEL_24;
    }
    if (v19 == *a2)
      break;
LABEL_6:
    v15 = i + v17;
  }
  if ((v9 & 1) != 0)
    v37 = 0;
  else
    v37 = *(unsigned int *)(v8 - 4);
  v34 = 0;
  v33 = v8 + 16 * v37;
LABEL_25:
  *(_QWORD *)a4 = v18;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v34;
  return result;
}

unint64_t *WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::makeKeyImpl<WebCore::Node>@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  unint64_t *result;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;

  result = WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)(a1 + 16), a1);
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 + 1, v6));
  *a2 = v6;
  if (v6)
  {
    do
    {
      v9 = __ldaxr(v6);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v6));
    if (!v10)
    {
      atomic_store(1u, v6);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v6 + 4), v5);
      return (unint64_t *)WTF::fastFree((WTF *)v6, v11);
    }
  }
  return result;
}

BOOL WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  uint64_t v15;
  int v16;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v9 = 0;
    goto LABEL_21;
  }
  v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
    v9 = 0;
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v7 = v3 + 16 * v6;
    if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>::customDeleteBucket(v7, a2);
      ++v5;
    }
  }
  while ((unint64_t)v6--);
  v3 = *(_QWORD *)a1;
  v9 = v5 != 0;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v15 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v16 = *(_DWORD *)(v15 - 12);
    else
      v16 = 0;
    *(_DWORD *)(v15 - 12) = v16 - v5;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
  {
LABEL_21:
    v12 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_17;
  }
  v10 = *(_DWORD *)(v3 - 4);
  if (v10 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v10)
    goto LABEL_15;
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3)
  {
    v12 = 0;
    goto LABEL_17;
  }
LABEL_16:
  v12 = *(_DWORD *)(v3 - 12);
  v13 = 0x7FFFFFFF;
  if (v12 < 0x7FFFFFFF)
LABEL_17:
    v13 = v12;
  *(_DWORD *)(a1 + 12) = 2 * v13;
  return v9;
}

unsigned int **WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v8, 0);
}

unsigned int *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>::customDeleteBucket(uint64_t a1, void *a2)
{
  unsigned int *result;
  void *v4;
  unsigned int v5;
  unsigned int v6;

  result = WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref((unsigned int **)a1, a2)[1];
  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int **v26;
  unsigned int *v27;
  void *v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int **result;
  int v38;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (unsigned int **)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          if (*(_QWORD *)(v20 + 16 * v25))
          {
            v38 = 1;
            do
              v25 = ((_DWORD)v25 + v38++) & v21;
            while (*(_QWORD *)(v20 + 16 * v25));
          }
          v26 = (unsigned int **)(v20 + 16 * v25);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
          {
            do
            {
              v33 = __ldaxr(v27);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v27));
            if (!v34)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, v10);
            }
          }
          WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref(v26, v10);
          v29 = *v14;
          *v14 = 0;
          *v26 = v29;
          v30 = v6 + 16 * v11;
          v31 = *(unsigned int **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          v26[1] = v31;
          v32 = *(unsigned int **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
          {
            do
            {
              v35 = __ldaxr(v32);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v32));
            if (!v36)
            {
              atomic_store(1u, v32);
              WTF::fastFree((WTF *)v32, v28);
            }
          }
          WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref((unsigned int **)(v6 + 16 * v11), v28);
          if (v14 == a3)
            v12 = v26;
        }
        else
        {
          v16 = v6 + 16 * v11;
          v17 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v10);
            }
          }
          WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref((unsigned int **)(v6 + 16 * v11), v10);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int **WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
  {
    if (6 * *(_DWORD *)(v3 - 12) >= 2 * v4)
      v4 *= 2;
  }
  else
  {
    v4 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v4, a2);
}

WTF **WTF::GenericHashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>::assignToEmpty<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(WTF **result, WTF **a2)
{
  WTF *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  v2 = *a2;
  *a2 = 0;
  v3 = (unsigned int *)*result;
  *result = v2;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v6 = (WTF *)v3;
      return WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v6, a2);
    }
  }
  return result;
}

unint64_t *WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded(unint64_t *result, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  WTF *v10;

  if ((*result & 0xFFFFFFFFFFFFLL) == 0)
  {
    v3 = result;
    v4 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = a2;
    WebCore::EventListenerMap::EventListenerMap((WebCore::EventListenerMap *)(v4 + 16));
    v9 = (unsigned int *)v4;
    result = WTF::CompactRefPtrTuple<WebCore::WeakPtrImplWithEventTargetData,unsigned short>::setPointer(v3, (uint64_t *)&v9);
    v6 = v9;
    v9 = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        v10 = (WTF *)v6;
        return (unint64_t *)WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v10, v5);
      }
    }
  }
  return result;
}

unint64_t *WTF::CompactRefPtrTuple<WebCore::WeakPtrImplWithEventTargetData,unsigned short>::setPointer(unint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  v2 = *a2;
  *a2 = 0;
  v3 = *result;
  *result = *result & 0xFFFF000000000000 | v2;
  v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v4 + 4), a2);
      return (unint64_t *)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

WTF **WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WTF **result, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = *result;
  if (*result)
  {
    WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 16, a2);
    return (WTF **)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)a1, (void *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(WTF::StringImpl *result, void *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), a2);
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 4;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebCore::RegisteredEventListener>::deref(v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v7 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF *WTF::RefCounted<WebCore::RegisteredEventListener>::deref(WTF *this, void *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      if (v3[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[4];
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

unsigned int **WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref(unsigned int **result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int **v5;
  WTF *v6;

  v2 = *result;
  *result = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = result;
      v6 = (WTF *)v2;
      WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v6, a2);
      return v5;
    }
  }
  return result;
}

_QWORD *WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::PeekPtrType,WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::PeekType>::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 16;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 16;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

WTF *WebKit::InjectedBundleRangeHandle::getOrCreate@<X0>(WTF *this@<X0>, WebCore::Range *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  unsigned int v9;
  WTF **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int i;
  uint64_t v17;
  WTF **v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;

  if (!this)
  {
    v20 = 0;
    goto LABEL_44;
  }
  v4 = (uint64_t)this;
  if ((_MergedGlobals_47 & 1) == 0)
  {
    qword_1ECE72068 = 0;
    _MergedGlobals_47 = 1;
  }
  if (!*((_QWORD *)this + 2))
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v4;
    v6 = *(WTF **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, a2);
      else
        --*(_DWORD *)v6;
    }
  }
  v7 = *(WTF **)(v4 + 16);
  ++*(_DWORD *)v7;
  v8 = qword_1ECE72068;
  if (qword_1ECE72068
    || (WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::expand(),
        (v8 = qword_1ECE72068) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = *((_QWORD *)v7 + 1);
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v9;
    v18 = (WTF **)(v8 + 16 * v17);
    v19 = *v18;
    if (*v18 == (WTF *)-1)
    {
      v10 = (WTF **)(v8 + 16 * v17);
      goto LABEL_17;
    }
    if (!v19)
    {
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
        --*(_DWORD *)(v8 - 16);
        *v10 = v7;
      }
      else
      {
        *v18 = v7;
        v10 = (WTF **)(v8 + 16 * v17);
      }
      v20 = API::Object::newObject(0x20uLL, 140);
      *(_QWORD *)v20 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v20);
      *(_QWORD *)v20 = &off_1E34AEA18;
      ++*(_DWORD *)(v4 + 8);
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)(v20 + 24) = v4;
      v22 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = v20;
      v23 = *(unsigned int **)(v20 + 16);
      *(_QWORD *)(v20 + 16) = v22;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          WTF::fastFree((WTF *)v23, v21);
        }
      }
      v26 = *(unsigned int **)(v20 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      this = v10[1];
      v10[1] = (WTF *)v26;
      if (this)
      {
        do
        {
          v29 = __ldaxr((unsigned int *)this);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, (unsigned int *)this));
        if (!v30)
        {
          atomic_store(1u, (unsigned int *)this);
          this = (WTF *)WTF::fastFree(this, v21);
        }
      }
      if (qword_1ECE72068)
        v28 = *(_DWORD *)(qword_1ECE72068 - 12) + 1;
      else
        v28 = 1;
      *(_DWORD *)(qword_1ECE72068 - 12) = v28;
      if (qword_1ECE72068)
        v31 = *(_DWORD *)(qword_1ECE72068 - 12);
      else
        v31 = 0;
      v32 = (*(_DWORD *)(qword_1ECE72068 - 16) + v31);
      v33 = *(unsigned int *)(qword_1ECE72068 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_44;
      }
      else if (3 * v33 > 4 * v32)
      {
        goto LABEL_44;
      }
      this = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::expand();
      goto LABEL_44;
    }
    if (*((_QWORD *)v19 + 1) == v11)
      break;
LABEL_17:
    v15 = i + v17;
  }
  if (*(_DWORD *)v7 == 1)
    WTF::fastFree(v7, a2);
  else
    --*(_DWORD *)v7;
  v20 = *(_QWORD *)(*(_QWORD *)(v8 + 16 * v17 + 8) + 8);
  this = (WTF *)CFRetain(*(CFTypeRef *)(v20 + 8));
LABEL_44:
  *a3 = v20;
  return this;
}

void WebKit::InjectedBundleRangeHandle::~InjectedBundleRangeHandle(WebKit::InjectedBundleRangeHandle *this, void *a2)
{
  int *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD **v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  WTF *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)this = &off_1E34AEA18;
  if ((_MergedGlobals_47 & 1) != 0)
  {
    v3 = dword_1ECE72000;
    v4 = qword_1ECE72068;
    v6 = (_DWORD **)((char *)this + 24);
    v5 = (_DWORD *)*((_QWORD *)this + 3);
    if (!qword_1ECE72068)
      goto LABEL_25;
    v7 = *(_DWORD *)(qword_1ECE72068 - 8);
    v8 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = v11;
      v14 = *(WTF **)(qword_1ECE72068 + 16 * v11);
      if (v14 != (WTF *)-1)
      {
        if (!v14)
          goto LABEL_24;
        if (*((_DWORD **)v14 + 1) == v5)
          break;
      }
      v11 = (v13 + i) & v7;
    }
    if ((_DWORD)v13 != *(_DWORD *)(qword_1ECE72068 - 4))
    {
      v15 = (_QWORD *)(qword_1ECE72068 + 16 * v13);
      *v15 = 0;
      if (*(_DWORD *)v14 == 1)
      {
        v31 = v4;
        v32 = v13;
        v30 = (_QWORD *)(v4 + 16 * v13);
        WTF::fastFree(v14, a2);
        v15 = v30;
        v4 = v31;
        v13 = v32;
        v3 = dword_1ECE72000;
      }
      else
      {
        --*(_DWORD *)v14;
      }
      *v15 = -1;
      v16 = v4 + 16 * v13;
      v17 = *(unsigned int **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      if (v17)
      {
        do
        {
          v20 = __ldaxr(v17);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v17));
        if (!v21)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
          v3 = dword_1ECE72000;
        }
      }
      v18 = *((_QWORD *)v3 + 13);
      ++*(_DWORD *)(v18 - 16);
      if (v18)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v22 = *((_QWORD *)v3 + 13);
      if (v22)
      {
        v23 = 6 * *(_DWORD *)(v22 - 12);
        v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9)
          WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(v24 >> 1);
      }
    }
  }
  else
  {
    qword_1ECE72068 = 0;
    _MergedGlobals_47 = 1;
    v6 = (_DWORD **)((char *)this + 24);
  }
LABEL_24:
  v5 = *v6;
LABEL_25:
  *v6 = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v26 = *((_QWORD *)this + 2);
  if (v26)
  {
    *(_QWORD *)(v26 + 8) = 0;
    v27 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::InjectedBundleRangeHandle::~InjectedBundleRangeHandle(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::InjectedBundleRangeHandle::boundingRectInWindowCoordinates(WebKit::InjectedBundleRangeHandle *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::ScrollView *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const FloatRect *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v13;
  _DWORD v14[4];
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  WebCore::makeSimpleRange();
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8) + 528);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(WebCore::ScrollView **)(v2 + 288)) != 0)
  {
    WebCore::RenderObject::absoluteBorderAndTextRects();
    WebCore::unionRectIgnoringZeroRects();
    v14[0] = v4;
    v14[1] = v5;
    v14[2] = v6;
    v14[3] = v7;
    v15[0] = WebCore::enclosingIntRect((WebCore *)v14, v8);
    v15[1] = v9;
    v11 = WebCore::ScrollView::contentsToWindow(v3, (const WebCore::IntRect *)v15);
    if (v13)
      WTF::fastFree(v13, v10);
  }
  else
  {
    v11 = 0;
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v17);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v16);
  return v11;
}

uint64_t *WebKit::InjectedBundleRangeHandle::renderedImage@<X0>(char a1@<W1>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::Widget *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  int v21;
  int v22;
  const FloatRect *v23;
  void *v24;
  unint64_t v25;
  void *v26;
  WTF *v27;
  CFTypeRef *v28;
  WebKit *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  IntPoint v37;
  WebKit *v38;
  WTF *v39;
  int v40;
  float v41;
  float v42;
  int v43;
  int v44;
  _QWORD v45[13];
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t v61;
  int v62;
  char v63;
  __int16 v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  WebCore::makeSimpleRange();
  v5 = *(_QWORD *)(*(_QWORD *)(v67 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v66 = v5;
  v6 = *(_QWORD *)(v5 + 528);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(WebCore::Widget **)(v7 + 288);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
      v12 = *(_QWORD *)(v11 + 56);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      v46 = v12;
      v47 = *(_DWORD *)(v11 + 64);
      v48 = *(_BYTE *)(v11 + 68);
      v13 = *(_QWORD *)(v11 + 72);
      if (v13)
        *(_DWORD *)(v13 + 24) += 2;
      v49 = v13;
      v50 = *(_DWORD *)(v11 + 80);
      v51 = *(_BYTE *)(v11 + 84);
      v14 = *(_QWORD *)(v11 + 88);
      if (v14)
        *(_DWORD *)(v14 + 24) += 2;
      v52 = v14;
      v53 = *(_DWORD *)(v11 + 96);
      v54 = *(_BYTE *)(v11 + 100);
      v15 = *(_QWORD *)(v11 + 104);
      if (v15)
        *(_DWORD *)(v15 + 24) += 2;
      v55 = v15;
      v56 = *(_DWORD *)(v11 + 112);
      v57 = *(_BYTE *)(v11 + 116);
      v16 = *(_QWORD *)(v11 + 120);
      if (v16)
        *(_DWORD *)(v16 + 24) += 2;
      v58 = v16;
      v59 = *(_DWORD *)(v11 + 128);
      v60 = *(_BYTE *)(v11 + 132);
      v17 = *(_QWORD *)(v11 + 136);
      if (v17)
        *(_DWORD *)(v17 + 24) += 2;
      v61 = v17;
      v62 = *(_DWORD *)(v11 + 144);
      v63 = *(_BYTE *)(v11 + 148);
      v64 = *(_WORD *)(v11 + 152);
      v65 = *(_BYTE *)(v11 + 154);
      WebCore::VisibleSelection::VisibleSelection();
      WebCore::FrameSelection::setSelection();
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v45);
      v18 = 1.0;
      if ((a1 & 0x20) == 0)
        v18 = *(float *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 364);
      WebCore::RenderObject::absoluteBorderAndTextRects();
      WebCore::unionRectIgnoringZeroRects();
      v41 = v19;
      v42 = v20;
      v43 = v21;
      v44 = v22;
      v25 = WebCore::enclosingIntRect((WebCore *)&v41, v23);
      v26 = v24;
      v45[1] = v24;
      v27 = v39;
      if (v39)
      {
        v39 = 0;
        v40 = 0;
        v27 = (WTF *)WTF::fastFree(v27, v24);
      }
      LODWORD(v39) = (int)(float)(v18 * (float)(int)v26);
      HIDWORD(v39) = (int)(float)(v18 * (float)SHIDWORD(v26));
      v28 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v27);
      WebKit::WebImage::create((int32x2_t *)&v39, 1, v28, 0, &v38);
      v29 = v38;
      v30 = *((_QWORD *)v38 + 2);
      if (v30)
      {
        v31 = HIDWORD(v25);
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v38 + 2) + 16))(*((_QWORD *)v38 + 2));
        v41 = v18;
        v42 = v18;
        (*(void (**)(uint64_t, float *))(*(_QWORD *)v32 + 632))(v32, &v41);
        v33 = WebCore::Widget::frameRect(v10) + v25;
        v34 = ((unint64_t)WebCore::Widget::frameRect(v10) >> 32) + v31;
        v35 = WebCore::ScrollableArea::visibleContentRect();
        LODWORD(v45[0]) = v33 - v35;
        HIDWORD(v45[0]) = v34 - HIDWORD(v35);
        v37 = (IntPoint)((v35 - v33) - (v45[0] & 0xFFFFFFFF00000000));
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v41, &v37);
        (*(void (**)(uint64_t, float, float))(*(_QWORD *)v32 + 648))(v32, v41, v42);
        WebCore::LocalFrameView::paintBehavior(v10);
        WebCore::LocalFrameView::setPaintBehavior();
        WebCore::Document::updateLayout();
        WebCore::ScrollView::paint();
        WebCore::LocalFrameView::setPaintBehavior();
        WebCore::FrameSelection::setSelection();
        *a2 = v38;
      }
      else
      {
        *a2 = 0;
        v38 = 0;
        CFRelease(*((CFTypeRef *)v29 + 1));
      }
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v46);
    }
    else
    {
      *a2 = 0;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  }
  else
  {
    *a2 = 0;
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v66);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v68);
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v67);
}

uint64_t *WebKit::InjectedBundleRangeHandle::text(WebKit::InjectedBundleRangeHandle *this)
{
  uint64_t v2;
  uint64_t v3[2];
  uint64_t v4;

  WebCore::makeSimpleRange();
  WebCore::BoundaryPoint::protectedDocument((WebCore::BoundaryPoint *)v3);
  WebCore::Document::updateLayout();
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v2);
  WebCore::plainText();
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v4);
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v3);
}

uint64_t WebKit::createHandle@<X0>(uint64_t *a1@<X8>)
{
  WebCore::Range *v2;
  uint64_t result;
  WebKit::InjectedBundleRangeHandle *v4;

  WebCore::createLiveRange();
  WebKit::InjectedBundleRangeHandle::getOrCreate(v4, v2, a1);
  result = (uint64_t)v4;
  if (v4)
  {
    if (*((_DWORD *)v4 + 2) == 1)
      return (*(uint64_t (**)())(*(_QWORD *)v4 + 8))();
    else
      --*((_DWORD *)v4 + 2);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)140>::type()
{
  return 140;
}

void WebCore::VisibleSelection::~VisibleSelection(WebCore::VisibleSelection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::expand()
{
  int v0;

  if (qword_1ECE72068 && (v0 = *(_DWORD *)(qword_1ECE72068 - 4)) != 0)
    return WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE72068 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(8u);
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  WTF *v10;
  uint64_t v11;
  unsigned int *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  v2 = qword_1ECE72068;
  if (qword_1ECE72068)
  {
    v3 = *(_DWORD *)(qword_1ECE72068 - 4);
    v4 = *(_DWORD *)(qword_1ECE72068 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE72068 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE72068 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    v8 = v3;
    while (1)
    {
      v9 = (WTF **)(v2 + 16 * v7);
      v10 = *v9;
      if (*v9 != (WTF *)-1)
      {
        if (v10)
        {
          if (qword_1ECE72068)
            v16 = *(_DWORD *)(qword_1ECE72068 - 8);
          else
            v16 = 0;
          v17 = ~(*((_QWORD *)v10 + 1) << 32) + *((_QWORD *)v10 + 1);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(qword_1ECE72068 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = qword_1ECE72068 + 16 * v22;
          v25 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            do
            {
              v31 = __ldaxr(v25);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v25));
            if (!v32)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v6);
            }
          }
          v26 = *(WTF **)v24;
          *(_QWORD *)v24 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
              WTF::fastFree(v26, v6);
            else
              --*(_DWORD *)v26;
          }
          v27 = *v9;
          *v9 = 0;
          *(_QWORD *)v24 = v27;
          v28 = v2 + 16 * v7;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v24 + 8) = v29;
          v30 = *(unsigned int **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            do
            {
              v33 = __ldaxr(v30);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v30));
            if (!v34)
            {
              atomic_store(1u, v30);
              WTF::fastFree((WTF *)v30, v6);
            }
          }
          v13 = *v9;
          *v9 = 0;
          if (!v13)
            goto LABEL_24;
          if (*(_DWORD *)v13 == 1)
            goto LABEL_36;
          --*(_DWORD *)v13;
        }
        else
        {
          v11 = v2 + 16 * v7;
          v12 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v12)
          {
            do
            {
              v14 = __ldaxr(v12);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v12));
            if (!v15)
            {
              atomic_store(1u, v12);
              WTF::fastFree((WTF *)v12, v6);
            }
          }
          v13 = *v9;
          *v9 = 0;
          if (!v13)
            goto LABEL_24;
          if (*(_DWORD *)v13 == 1)
          {
LABEL_36:
            WTF::fastFree(v13, v6);
            goto LABEL_24;
          }
          --*(_DWORD *)v13;
        }
      }
LABEL_24:
      if (++v7 == v8)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

WebKit::JSWebExtensionAPIAction *WebKit::toWebExtensionAPIAction(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIAction *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIAction::actionClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIAction::actionClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIAction *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIAction::actionClass(WebKit::JSWebExtensionAPIAction *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIAction::actionClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIAction::actionClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIAction::staticValues(void)::values;
    v6.className = "Action";
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIAction::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIAction::actionClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIAction::getTitle(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("details");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 1, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIAction::getTitle(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.getTitle()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.getTitle()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F1F448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setTitle(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setTitle()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 1, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setTitle()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIAction::setTitle(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setTitle()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setTitle()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F1FA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::getBadgeText(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("details");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 1, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIAction::getBadgeText(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.getBadgeText()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.getBadgeText()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F20194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setBadgeText(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setBadgeText()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 1, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setBadgeText()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIAction::setBadgeText(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setBadgeText()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setBadgeText()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F207E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::getBadgeBackgroundColor(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("details");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 1, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIAction::getBadgeBackgroundColor(v12, v24, (WebKit::WebExtensionCallbackHandler **)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.getBadgeBackgroundColor()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.getBadgeBackgroundColor()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F20EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setBadgeBackgroundColor(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  JSValueRef v37;
  __CFString *v38;
  __CFString *v39;
  id v40;
  WebKit::WebExtensionCallbackHandler *v41;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v44;
  JSObjectRef v45;
  uint8_t buf[8];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setBadgeBackgroundColor()"), 0, CFSTR("a required argument is missing"), v14);
    v37 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v38 = CFSTR("an object is expected");
    v39 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 1, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setBadgeBackgroundColor()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v45 = resolve;
    *(_QWORD *)buf = this;
    v44 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v45, &v44, &v41);
    v15 = v41;
LABEL_28:
    *(_QWORD *)buf = v15;
    v40 = 0;
    WebKit::WebExtensionAPIAction::setBadgeBackgroundColor(v12, v29, (JSObjectRef **)buf, &v40);
    v35 = (NSString *)v40;
    if (*(_QWORD *)buf)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(*(WebKit::WebExtensionCallbackHandler **)buf);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setBadgeBackgroundColor()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v38 = CFSTR("a function is expected");
  v39 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setBadgeBackgroundColor()"), &v39->isa, &v38->isa, v28);
  v37 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v37;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2152C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::enable(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  double v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  OpaqueJSValue *v21;
  OpaqueJSValue *v22;
  const OpaqueJSContext *v23;
  const OpaqueJSValue *v24;
  JSValueRef Undefined;
  NSString *v26;
  NSString *v27;
  WebKit::WebExtensionCallbackHandler *v28;
  __CFString *v30;
  __CFString *v31;
  id v32;
  WebKit::WebExtensionCallbackHandler *v33;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v36;
  JSObjectRef v37;
  uint8_t buf[8];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_33;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          v16 = JSValueToNumber(this, *a5, 0);
          v17 = a5[1];
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_26;
LABEL_24:
          Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_45;
      }
LABEL_46:
      v30 = CFSTR("a number is expected");
      v31 = CFSTR("tabId");
      goto LABEL_47;
    }
    v16 = NAN;
LABEL_26:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v37 = resolve;
    *(_QWORD *)buf = this;
    v36 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v37, &v36, &v33);
    v20 = v33;
LABEL_27:
    *(_QWORD *)buf = v20;
    v32 = 0;
    WebKit::WebExtensionAPIAction::enable(v12, (uint64_t *)buf, &v32, v19, v16);
    v27 = (NSString *)v32;
    v28 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v28)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v28);
    if (v27)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.enable()"), 0, v27, v26);
    }
    else if (Undefined)
    {
LABEL_32:

      goto LABEL_33;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_32;
  }
  if (!JSValueIsObject(this, *a5) || (v21 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v21)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
        goto LABEL_46;
      v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (v22 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v22))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v23 = *a5;
    v24 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v23, v24, buf);
    v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v16 = NAN;
    if (*(_QWORD *)buf)
      goto LABEL_24;
    goto LABEL_26;
  }
LABEL_45:
  v30 = CFSTR("a function is expected");
  v31 = CFSTR("callback");
LABEL_47:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.enable()"), &v31->isa, &v30->isa, v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_33:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F21B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::disable(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  double v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  OpaqueJSValue *v21;
  OpaqueJSValue *v22;
  const OpaqueJSContext *v23;
  const OpaqueJSValue *v24;
  JSValueRef Undefined;
  NSString *v26;
  NSString *v27;
  WebKit::WebExtensionCallbackHandler *v28;
  __CFString *v30;
  __CFString *v31;
  id v32;
  WebKit::WebExtensionCallbackHandler *v33;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v36;
  JSObjectRef v37;
  uint8_t buf[8];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_33;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          v16 = JSValueToNumber(this, *a5, 0);
          v17 = a5[1];
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_26;
LABEL_24:
          Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_45;
      }
LABEL_46:
      v30 = CFSTR("a number is expected");
      v31 = CFSTR("tabId");
      goto LABEL_47;
    }
    v16 = NAN;
LABEL_26:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v37 = resolve;
    *(_QWORD *)buf = this;
    v36 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v37, &v36, &v33);
    v20 = v33;
LABEL_27:
    *(_QWORD *)buf = v20;
    v32 = 0;
    WebKit::WebExtensionAPIAction::disable(v12, (uint64_t *)buf, &v32, v19, v16);
    v27 = (NSString *)v32;
    v28 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v28)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v28);
    if (v27)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.disable()"), 0, v27, v26);
    }
    else if (Undefined)
    {
LABEL_32:

      goto LABEL_33;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_32;
  }
  if (!JSValueIsObject(this, *a5) || (v21 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v21)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
        goto LABEL_46;
      v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (v22 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v22))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v23 = *a5;
    v24 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v23, v24, buf);
    v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v16 = NAN;
    if (*(_QWORD *)buf)
      goto LABEL_24;
    goto LABEL_26;
  }
LABEL_45:
  v30 = CFSTR("a function is expected");
  v31 = CFSTR("callback");
LABEL_47:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.disable()"), &v31->isa, &v30->isa, v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_33:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F22160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::isEnabled(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("details");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 1, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIAction::isEnabled(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.isEnabled()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.isEnabled()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F22814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setIcon(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  void *v17;
  const OpaqueJSValue *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const OpaqueJSValue *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char v28;
  NSString *v29;
  char v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v35;
  NSString *v36;
  NSString *v37;
  WebKit::WebExtensionCallbackHandler *v38;
  void *v39;
  __CFString *v41;
  __CFString *v42;
  NSObject *v43;
  NSString *v44;
  id v45;
  WebKit::WebExtensionCallbackHandler *v46;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v49;
  uint8_t v50[8];
  uint8_t buf[8];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_40;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v18 = *a5;
    if (*a5)
    {
      v19 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "valueWithJSValueRef:inContext:", v18, v20);
      v21 = objc_claimAutoreleasedReturnValue();

      v22 = (void *)v21;
    }
    else
    {
      v22 = 0;
    }
    v28 = objc_msgSend(v22, "_isDictionary");

    if ((v28 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v17)
        goto LABEL_7;
      goto LABEL_26;
    }
    goto LABEL_48;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    v23 = *a5;
    if (*a5)
    {
      v24 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "valueWithJSValueRef:inContext:", v23, v25);
      v26 = objc_claimAutoreleasedReturnValue();

      v27 = (void *)v26;
    }
    else
    {
      v27 = 0;
    }
    v30 = objc_msgSend(v27, "_isDictionary");

    if ((v30 & 1) != 0)
    {
      if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        WebKit::toNSDictionary(this, *a5, 1, 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = a5[1];
        v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
        v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (!v17)
          goto LABEL_8;
        if (*(_QWORD *)buf)
        {
          Undefined = 0;
          goto LABEL_27;
        }
LABEL_26:
        reject = 0;
        resolve = 0;
        Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        *(_QWORD *)buf = this;
        v49 = reject;
        *(_QWORD *)v50 = resolve;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v50, &v49, &v46);
        v15 = v46;
LABEL_27:
        GlobalContext = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)v50 = v15;
          v45 = 0;
          WebKit::WebExtensionAPIAction::setIcon(v12, *(uint64_t *)buf, v17, (uint64_t *)v50, &v45);
          v37 = (NSString *)v45;
          v38 = *(WebKit::WebExtensionCallbackHandler **)v50;
          *(_QWORD *)v50 = 0;
          if (v38)
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v38);
          if (v37)
          {
            *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setIcon()"), 0, v37, v36);
          }
          else if (Undefined)
          {
LABEL_33:

            if (*(_QWORD *)buf)
              CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
            v15 = 0;
            goto LABEL_36;
          }
          Undefined = JSValueMakeUndefined(this);
          goto LABEL_33;
        }
        v43 = qword_1ECE710C8;
        if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v50 = 0;
          _os_log_error_impl(&dword_196BCC000, v43, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v50, 2u);
          if (!Undefined)
            goto LABEL_53;
        }
        else if (!Undefined)
        {
          goto LABEL_53;
        }
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("action.setIcon()"), 0, CFSTR("an unknown error occurred"), v44);
        if (Undefined)
          goto LABEL_36;
LABEL_53:
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_36;
      }
      v41 = CFSTR("a function is expected");
      v42 = CFSTR("callback");
LABEL_49:
      v39 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setIcon()"), &v42->isa, &v41->isa, v29);
      Undefined = JSValueMakeUndefined(this);
LABEL_39:

      goto LABEL_40;
    }
LABEL_48:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("details");
    goto LABEL_49;
  }
  if (a4)
  {
LABEL_7:
    v15 = 0;
LABEL_8:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setIcon()"), CFSTR("details"), CFSTR("an object is expected"), v14);
    Undefined = JSValueMakeUndefined(this);
    v17 = 0;
LABEL_36:
    if (v15)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
    v39 = v17;
    goto LABEL_39;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setIcon()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_40:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F22F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  void *v18;
  WebKit::WebExtensionCallbackHandler *v19;

  if (a17)
    CFRelease(*(CFTypeRef *)(a17 + 8));
  if (v19)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);

  if (*(_DWORD *)(v17 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
  else
    --*(_DWORD *)(v17 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setPopup(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setPopup()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 1, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setPopup()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIAction::setPopup(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setPopup()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.setPopup()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F235D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::getPopup(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("details");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 1, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIAction::getPopup(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.getPopup()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.getPopup()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F23CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::openPopup(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAction *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSString *v46;
  NSString *v47;
  WebKit::WebExtensionCallbackHandler *v48;
  NSObject *v49;
  NSString *v50;
  __CFString *v52;
  __CFString *v53;
  id v54;
  WebKit::WebExtensionCallbackHandler *v55;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v58;
  JSObjectRef v59;
  uint8_t buf[8];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_59;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_68;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 1, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_69:
    v52 = CFSTR("an object is expected");
    v53 = CFSTR("options");
    goto LABEL_70;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_69;
  if (!JSValueIsObject(this, a5[1]) || (v26 = JSValueToObject(this, a5[1], 0), !JSObjectIsFunction(this, v26)))
  {
    if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
    {
LABEL_68:
      v52 = CFSTR("a function is expected");
      v53 = CFSTR("callback");
LABEL_70:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.openPopup()"), &v53->isa, &v52->isa, v21);
      Undefined = JSValueMakeUndefined(this);
      v24 = 0;
      goto LABEL_58;
    }
  }
  WebKit::toNSDictionary(this, *a5, 1, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = a5[1];
  v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
  v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
    goto LABEL_38;
  }
LABEL_37:
  reject = 0;
  resolve = 0;
  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v59 = resolve;
  *(_QWORD *)buf = this;
  v58 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v59, &v58, &v55);
  v29 = v55;
LABEL_38:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v38, buf);
  v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_52;
  v40 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v40
    || (v41 = *(_QWORD *)(v40 + 8)) == 0
    || (v42 = *(_QWORD *)(v41 + 24)) == 0
    || (v43 = *(_QWORD *)(v42 + 8)) == 0
    || (v44 = *(_QWORD **)(*(_QWORD *)(v43 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v44 + 1368))(v44) & 1) != 0)
    || (v45 = *(_QWORD *)(v44[2] + 8)) == 0)
  {
    CFRelease(*((CFTypeRef *)v39 + 1));
LABEL_52:
    v49 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v49, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_54:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("action.openPopup()"), 0, CFSTR("an unknown error occurred"), v50);
        if (Undefined)
          goto LABEL_56;
      }
    }
    else if (Undefined)
    {
      goto LABEL_54;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_56:
    if (v29)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
    goto LABEL_58;
  }
  CFRetain(*(CFTypeRef *)(v45 - 8));
  CFRelease(*((CFTypeRef *)v39 + 1));
  *(_QWORD *)buf = v29;
  v54 = 0;
  WebKit::WebExtensionAPIAction::openPopup(v12, v45 - 16, v24, (uint64_t *)buf, &v54);
  v47 = (NSString *)v54;
  v48 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v48)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v48);
  if (v47)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("action.openPopup()"), 0, v47, v46);
    goto LABEL_49;
  }
  if (!Undefined)
LABEL_49:
    Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v45 - 8));
LABEL_58:

LABEL_59:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F244D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::onClicked(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIAction *v6;
  WebKit::JSWebExtensionAPIAction *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIAction(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIAction::onClicked(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F247E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionCallbackHandler *WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>@<X0>(JSContextRef *a1@<X0>, OpaqueJSValue **a2@<X1>, OpaqueJSValue **a3@<X2>, WebKit::WebExtensionCallbackHandler **a4@<X8>)
{
  WebKit::WebExtensionCallbackHandler *v8;
  WebKit::WebExtensionCallbackHandler *result;

  v8 = (WebKit::WebExtensionCallbackHandler *)WTF::fastMalloc((WTF *)0x28);
  result = WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(v8, *a1, *a2, *a3);
  *a4 = v8;
  return result;
}

void sub_196F248B8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionCallbackHandler *WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(WebKit::WebExtensionCallbackHandler *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionCallbackHandler::~WebExtensionCallbackHandler(result);
    return (WebKit::WebExtensionCallbackHandler *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebKit::JSWebExtensionAPIAlarms *WebKit::toWebExtensionAPIAlarms(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIAlarms *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIAlarms::alarmsClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIAlarms::alarmsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIAlarms *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIAlarms::alarmsClass(WebKit::JSWebExtensionAPIAlarms *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIAlarms::alarmsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIAlarms::alarmsClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIAlarms::staticValues(void)::values;
    v6.className = "Alarms";
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIAlarms::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIAlarms::alarmsClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::create(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAlarms *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  unint64_t v15;
  unint64_t v16;
  const OpaqueJSValue *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  NSString *v21;
  void *v22;
  NSString *v23;
  JSValueRef v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  JSValueRef v29;
  JSValueRef Undefined;
  char v31;
  void *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  __CFString *v37;
  __CFString *v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_38;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v15 = (unint64_t)a4 - 2;
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      v24 = a5[1];
      if (v24)
      {
        v25 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "valueWithJSValueRef:inContext:", v24, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v27 = 0;
      }
      v31 = objc_msgSend(v27, "_isDictionary");

      if ((v31 & 1) != 0)
      {
        WebKit::toNSString(this, *a5, 2);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::toNSDictionary(this, a5[1], 0, 0);
        v28 = v32;
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (v22)
        {
LABEL_34:
          v39 = 0;
          WebKit::WebExtensionAPIAlarms::createAlarm(v12, v32, v22, &v39);
          v35 = (NSString *)v39;
          if (v35)
            *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.create()"), 0, v35, v34);
          Undefined = JSValueMakeUndefined(this);

          v28 = v32;
          goto LABEL_37;
        }
        goto LABEL_16;
      }
      v37 = CFSTR("an object is expected");
      v38 = CFSTR("info");
    }
    else
    {
      v37 = CFSTR("a string is expected");
      v38 = CFSTR("name");
    }
    v28 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.create()"), &v38->isa, &v37->isa, v23);
    Undefined = JSValueMakeUndefined(this);
    v22 = 0;
    goto LABEL_37;
  }
  if (a4)
  {
    v16 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      v28 = 0;
    }
    else
    {
      v17 = a5[v16];
      if (v17)
      {
        v18 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v19 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        LOBYTE(v19) = objc_msgSend(v20, "_isDictionary");
        if ((v19 & 1) == 0)
        {
          v22 = 0;
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.create()"), CFSTR("info"), CFSTR("an object is expected"), v21);
          Undefined = JSValueMakeUndefined(this);
          v28 = 0;
          goto LABEL_37;
        }
        WebKit::toNSDictionary(this, v17, 0, 0);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v22 = 0;
        v15 = v16;
      }
      v28 = 0;
      if (v16 && (v15 & 0x8000000000000000) == 0)
      {
        v33 = a5[v15];
        if (v33 && (JSValueIsString(this, v33) || JSValueIsNull(this, v33) || JSValueIsUndefined(this, v33)))
        {
          WebKit::toNSString(this, v33, 2);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          --v15;
        }
        else
        {
          v28 = 0;
        }
      }
      if (v22)
      {
        if ((v15 & 0x8000000000000000) != 0)
        {
          v32 = v28;
          goto LABEL_34;
        }
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.create()"), 0, CFSTR("an unknown argument was provided"), v14);
        v29 = JSValueMakeUndefined(this);
        goto LABEL_17;
      }
    }
LABEL_16:
    v22 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.create()"), CFSTR("info"), CFSTR("an object is expected"), v14);
    v29 = JSValueMakeUndefined(this);
LABEL_17:
    Undefined = v29;
LABEL_37:

    goto LABEL_38;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.create()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_38:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F25034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::get(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAlarms *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  void *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  const OpaqueJSContext *v21;
  const OpaqueJSValue *v22;
  WebKit::WebExtensionCallbackHandler *v23;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v25;
  __CFString *v27;
  __CFString *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v32;
  JSObjectRef v33;
  uint8_t buf[8];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_32;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v21 = *a5;
        v22 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v21, v22, buf);
        v16 = 0;
LABEL_23:
        v23 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(_QWORD *)buf)
        {
          Undefined = 0;
LABEL_27:
          *(_QWORD *)buf = v23;
          WebKit::WebExtensionAPIAlarms::get(v12, v16, (uint64_t *)buf);
          v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
          *(_QWORD *)buf = 0;
          if (v25)
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
          if (!Undefined)
            Undefined = JSValueMakeUndefined(this);
          goto LABEL_31;
        }
LABEL_26:
        reject = 0;
        resolve = 0;
        Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        v33 = resolve;
        *(_QWORD *)buf = this;
        v32 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v33, &v32, &v29);
        v23 = v29;
        goto LABEL_27;
      }
      goto LABEL_43;
    }
    if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSString(this, *a5, 2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_26;
    }
LABEL_44:
    v27 = CFSTR("a string is expected");
    v28 = CFSTR("name");
    goto LABEL_45;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v16 = 0;
    goto LABEL_26;
  }
  if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_44;
  if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSString(this, *a5, 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = a5[1];
    v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
    goto LABEL_23;
  }
LABEL_43:
  v27 = CFSTR("a function is expected");
  v28 = CFSTR("callback");
LABEL_45:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.get()"), &v28->isa, &v27->isa, v14);
  Undefined = JSValueMakeUndefined(this);
  v16 = 0;
LABEL_31:

LABEL_32:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F25600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::getAll(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAlarms *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef v21;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_17;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.getAll()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
  }
  else
  {
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPIAlarms::getAll(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (Undefined)
    goto LABEL_17;
  v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F25A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::clear(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAlarms *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  void *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  const OpaqueJSContext *v21;
  const OpaqueJSValue *v22;
  WebKit::WebExtensionCallbackHandler *v23;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v25;
  __CFString *v27;
  __CFString *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v32;
  JSObjectRef v33;
  uint8_t buf[8];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_32;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v21 = *a5;
        v22 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v21, v22, buf);
        v16 = 0;
LABEL_23:
        v23 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(_QWORD *)buf)
        {
          Undefined = 0;
LABEL_27:
          *(_QWORD *)buf = v23;
          WebKit::WebExtensionAPIAlarms::clear(v12, v16, (uint64_t *)buf);
          v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
          *(_QWORD *)buf = 0;
          if (v25)
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
          if (!Undefined)
            Undefined = JSValueMakeUndefined(this);
          goto LABEL_31;
        }
LABEL_26:
        reject = 0;
        resolve = 0;
        Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        v33 = resolve;
        *(_QWORD *)buf = this;
        v32 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v33, &v32, &v29);
        v23 = v29;
        goto LABEL_27;
      }
      goto LABEL_43;
    }
    if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSString(this, *a5, 2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_26;
    }
LABEL_44:
    v27 = CFSTR("a string is expected");
    v28 = CFSTR("name");
    goto LABEL_45;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v16 = 0;
    goto LABEL_26;
  }
  if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_44;
  if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSString(this, *a5, 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = a5[1];
    v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
    goto LABEL_23;
  }
LABEL_43:
  v27 = CFSTR("a function is expected");
  v28 = CFSTR("callback");
LABEL_45:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.clear()"), &v28->isa, &v27->isa, v14);
  Undefined = JSValueMakeUndefined(this);
  v16 = 0;
LABEL_31:

LABEL_32:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F25FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::clearAll(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIAlarms *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef v21;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_17;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("alarms.clearAll()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
  }
  else
  {
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPIAlarms::clearAll(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (Undefined)
    goto LABEL_17;
  v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F26410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::onAlarm(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIAlarms *v6;
  WebKit::JSWebExtensionAPIAlarms *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIAlarms(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIAlarms::onAlarm(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F266C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPICommands *WebKit::toWebExtensionAPICommands(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPICommands *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPICommands::commandsClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPICommands::commandsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPICommands *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPICommands::commandsClass(WebKit::JSWebExtensionAPICommands *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPICommands::commandsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPICommands::commandsClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPICommands::staticValues(void)::values;
    v6.className = "Commands";
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPICommands::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPICommands::commandsClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPICommands::getAll(WebKit::JSWebExtensionAPICommands *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPICommands *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef v21;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPICommands(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_17;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("commands.getAll()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
  }
  else
  {
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPICommands::getAll(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (Undefined)
    goto LABEL_17;
  v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F26BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICommands::onCommand(WebKit::JSWebExtensionAPICommands *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPICommands *v6;
  WebKit::JSWebExtensionAPICommands *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPICommands(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPICommands::onCommand(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F26E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICommands::onChanged(WebKit::JSWebExtensionAPICommands *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPICommands *v6;
  WebKit::JSWebExtensionAPICommands *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPICommands(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPICommands::onChanged(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F270F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPICookies *WebKit::toWebExtensionAPICookies(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPICookies *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPICookies::cookiesClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPICookies::cookiesClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPICookies *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPICookies::cookiesClass(WebKit::JSWebExtensionAPICookies *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPICookies::cookiesClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPICookies::cookiesClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPICookies::staticValues(void)::values;
    v6.className = "Cookies";
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPICookies::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPICookies::cookiesClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPICookies::get(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPICookies *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.get()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.get()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPICookies::get(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.get()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.get()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F277E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::getAll(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPICookies *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.getAll()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.getAll()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPICookies::getAll(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.getAll()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.getAll()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F27E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::set(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPICookies *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.set()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.set()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPICookies::set(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.set()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.set()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F284AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::remove(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPICookies *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.remove()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.remove()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPICookies::remove(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.remove()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.remove()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F28B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::getAllCookieStores(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPICookies *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef v21;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_17;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("cookies.getAllCookieStores()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
  }
  else
  {
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPICookies::getAllCookieStores(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (Undefined)
    goto LABEL_17;
  v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F28F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::onChanged(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPICookies *v6;
  WebKit::JSWebExtensionAPICookies *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPICookies(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPICookies::onChanged(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F29228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIDeclarativeNetRequest *WebKit::toWebExtensionAPIDeclarativeNetRequest(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIDeclarativeNetRequest *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIDeclarativeNetRequest::staticValues(void)::values;
    v6.className = "DeclarativeNetRequest";
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIDeclarativeNetRequest::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateEnabledRulesets()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("options");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateEnabledRulesets()"), CFSTR("options"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateEnabledRulesets()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateEnabledRulesets()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2991C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef v21;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_17;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.getEnabledRulesets()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
  }
  else
  {
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (Undefined)
    goto LABEL_17;
  v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F29D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::updateDynamicRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateDynamicRules()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("options");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateDynamicRules()"), CFSTR("options"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateDynamicRules()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateDynamicRules()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2A394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::getDynamicRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef v21;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_17;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.getDynamicRules()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
  }
  else
  {
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (Undefined)
    goto LABEL_17;
  v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2A7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::updateSessionRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateSessionRules()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("options");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateSessionRules()"), CFSTR("options"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateSessionRules()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.updateSessionRules()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2AE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::getSessionRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef v21;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_17;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.getSessionRules()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
  }
  else
  {
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (Undefined)
    goto LABEL_17;
  v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2B274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::getMatchedRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("filter");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.getMatchedRules()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.getMatchedRules()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2B91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::isRegexSupported(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.isRegexSupported()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("regexOptions");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.isRegexSupported()"), CFSTR("regexOptions"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::isRegexSupported(v12, v29, (WebKit::WebExtensionCallbackHandler **)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.isRegexSupported()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.isRegexSupported()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2BF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.setExtensionActionOptions()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("options");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.setExtensionActionOptions()"), CFSTR("options"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.setExtensionActionOptions()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("declarativeNetRequest.setExtensionActionOptions()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2C5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::maxNumberOfStaticRulesets(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v6;
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v7;
  NSObject *v8;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    Undefined = JSValueMakeNumber(this, 100.0);
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F2C8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::maxNumberOfEnabledRulesets(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v6;
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v7;
  NSObject *v8;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    Undefined = JSValueMakeNumber(this, 50.0);
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F2CB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::maxNumberOfDynamicAndSessionRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v6;
  WebKit::JSWebExtensionAPIDeclarativeNetRequest *v7;
  NSObject *v8;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    Undefined = JSValueMakeNumber(this, 30000.0);
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F2CDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIEvent *WebKit::toWebExtensionAPIEvent(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIEvent *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIEvent::eventClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIEvent::eventClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIEvent *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIEvent::eventClass(WebKit::JSWebExtensionAPIEvent *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  JSClassDefinition v5;

  result = (JSClassRef)WebKit::JSWebExtensionAPIEvent::eventClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIEvent::eventClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v5.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E0CC1100] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "Event";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIEvent::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIEvent::eventClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIEvent::addListener(WebKit::JSWebExtensionAPIEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WebKit::WebExtensionCallbackHandler *v30;
  JSValueRef v31;
  NSObject *v32;
  const OpaqueJSValue *v34;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v36;
  WebKit::WebExtensionCallbackHandler *v37;
  uint8_t buf[12];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIEvent(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_30;
  }
  if (!JSValueIsObject(this, *a5) || (v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), CFSTR("listener"), CFSTR("a function is expected"), v15);
LABEL_30:
    *a6 = v34;
    Undefined = JSValueMakeUndefined(this);
LABEL_32:
    v31 = Undefined;
    goto LABEL_22;
  }
  v17 = *a5;
  v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v37);
  v20 = v37;
  if (!v37)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), CFSTR("listener"), CFSTR("a function is expected"), v19);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_32;
  }
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
  v23 = *(_QWORD *)buf;
  if (!*(_QWORD *)buf)
  {
LABEL_18:
    v32 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    v31 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  v24 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v24
    || (v25 = *(_QWORD *)(v24 + 8)) == 0
    || (v26 = *(_QWORD *)(v25 + 24)) == 0
    || (v27 = *(_QWORD *)(v26 + 8)) == 0
    || (v28 = *(_QWORD **)(*(_QWORD *)(v27 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v28 + 1368))(v28) & 1) != 0)
    || (v29 = *(_QWORD *)(v28[2] + 8)) == 0)
  {
    CFRelease(*(CFTypeRef *)(v23 + 8));
    goto LABEL_18;
  }
  CFRetain(*(CFTypeRef *)(v29 - 8));
  CFRelease(*(CFTypeRef *)(v23 + 8));
  ++*(_DWORD *)v20;
  v36 = v20;
  WebKit::WebExtensionAPIEvent::addListener(v12, v29 - 16, &v36);
  v30 = v36;
  v36 = 0;
  if (v30)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
  v31 = JSValueMakeUndefined(this);
  CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_21:
  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
LABEL_22:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return v31;
}

void sub_196F2D3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIEvent::removeListener(WebKit::JSWebExtensionAPIEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WebKit::WebExtensionCallbackHandler *v30;
  JSValueRef v31;
  NSObject *v32;
  const OpaqueJSValue *v34;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v36;
  WebKit::WebExtensionCallbackHandler *v37;
  uint8_t buf[12];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIEvent(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("removeListener()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_30;
  }
  if (!JSValueIsObject(this, *a5) || (v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("removeListener()"), CFSTR("listener"), CFSTR("a function is expected"), v15);
LABEL_30:
    *a6 = v34;
    Undefined = JSValueMakeUndefined(this);
LABEL_32:
    v31 = Undefined;
    goto LABEL_22;
  }
  v17 = *a5;
  v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v37);
  v20 = v37;
  if (!v37)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("removeListener()"), CFSTR("listener"), CFSTR("a function is expected"), v19);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_32;
  }
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
  v23 = *(_QWORD *)buf;
  if (!*(_QWORD *)buf)
  {
LABEL_18:
    v32 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    v31 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  v24 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v24
    || (v25 = *(_QWORD *)(v24 + 8)) == 0
    || (v26 = *(_QWORD *)(v25 + 24)) == 0
    || (v27 = *(_QWORD *)(v26 + 8)) == 0
    || (v28 = *(_QWORD **)(*(_QWORD *)(v27 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v28 + 1368))(v28) & 1) != 0)
    || (v29 = *(_QWORD *)(v28[2] + 8)) == 0)
  {
    CFRelease(*(CFTypeRef *)(v23 + 8));
    goto LABEL_18;
  }
  CFRetain(*(CFTypeRef *)(v29 - 8));
  CFRelease(*(CFTypeRef *)(v23 + 8));
  ++*(_DWORD *)v20;
  v36 = v20;
  WebKit::WebExtensionAPIEvent::removeListener(v12, v29 - 16, &v36);
  v30 = v36;
  v36 = 0;
  if (v30)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
  v31 = JSValueMakeUndefined(this);
  CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_21:
  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
LABEL_22:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return v31;
}

void sub_196F2D8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIEvent::hasListener(WebKit::JSWebExtensionAPIEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  BOOL hasListener;
  JSValueRef Boolean;
  const OpaqueJSValue *v24;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v26;
  uint8_t buf[8];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIEvent(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("hasListener()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_16;
  }
  if (!JSValueIsObject(this, *a5) || (v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("hasListener()"), CFSTR("listener"), CFSTR("a function is expected"), v15);
LABEL_16:
    *a6 = v24;
    Undefined = JSValueMakeUndefined(this);
LABEL_18:
    Boolean = Undefined;
    goto LABEL_8;
  }
  v17 = *a5;
  v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("hasListener()"), CFSTR("listener"), CFSTR("a function is expected"), v19);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_18;
  }
  ++**(_DWORD **)buf;
  v26 = v20;
  hasListener = WebKit::WebExtensionAPIEvent::hasListener(v12, &v26);
  Boolean = JSValueMakeBoolean(this, hasListener);
  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
LABEL_8:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Boolean;
}

void sub_196F2DD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIExtension *WebKit::toWebExtensionAPIExtension(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIExtension *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIExtension::extensionClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIExtension::extensionClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIExtension *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIExtension::extensionClass(WebKit::JSWebExtensionAPIExtension *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIExtension::extensionClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIExtension::extensionClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "Extension";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIExtension::staticValues(void)::values;
    v6.staticFunctions = 0;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIExtension::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIExtension::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIExtension::getProperty;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIExtension::extensionClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIExtension::getPropertyNames(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  int v17;
  OpaqueJSString *v18;
  OpaqueJSString *v19;
  OpaqueJSString *v20;
  OpaqueJSString *v21;
  OpaqueJSString *v22;
  const char *v23[2];

  v6 = WebKit::toWebExtensionAPIExtension(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, v23);
    v10 = v23[0];
    if (v23[0])
    {
      v11 = *((_QWORD *)v23[0] + 3);
      if (v11
        && (v12 = *(_QWORD *)(v11 + 8)) != 0
        && (v13 = *(_QWORD *)(v12 + 24)) != 0
        && (v14 = *(_QWORD *)(v13 + 8)) != 0
        && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
      {
        v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      v16 = 0;
    }
    v17 = *(unsigned __int8 *)(v7 + 8);
    v23[0] = "getURL";
    v23[1] = (const char *)7;
    if (WebKit::WebExtensionAPIExtension::isPropertyAllowed((WebKit::WebExtensionAPIExtension *)v7, v23, (WebKit::WebPage *)v16))
    {
      v18 = JSStringCreateWithUTF8CString("getURL");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18)
        JSStringRelease(v18);
    }
    if (!v17)
    {
      v19 = JSStringCreateWithUTF8CString("getBackgroundPage");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19)
        JSStringRelease(v19);
      v20 = JSStringCreateWithUTF8CString("getViews");
      JSPropertyNameAccumulatorAddName(a3, v20);
      if (v20)
        JSStringRelease(v20);
      v21 = JSStringCreateWithUTF8CString("isAllowedIncognitoAccess");
      JSPropertyNameAccumulatorAddName(a3, v21);
      if (v21)
        JSStringRelease(v21);
      v22 = JSStringCreateWithUTF8CString("isAllowedFileSchemeAccess");
      JSPropertyNameAccumulatorAddName(a3, v22);
      if (v22)
        JSStringRelease(v22);
    }
    if (v16)
      CFRelease(v16[1]);
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
}

void sub_196F2E0B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

void sub_196F2E138()
{
  JUMPOUT(0x196F2E10CLL);
}

uint64_t WebKit::JSWebExtensionAPIExtension::hasProperty(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  int v17;
  uint64_t isPropertyAllowed;
  _BOOL4 IsEqualToUTF8CString;
  const char *v21[2];

  v6 = WebKit::toWebExtensionAPIExtension(this, a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, v21);
  v10 = v21[0];
  if (v21[0])
  {
    v11 = *((_QWORD *)v21[0] + 3);
    if (v11
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
    {
      v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    v16 = 0;
  }
  v17 = *(unsigned __int8 *)(v7 + 8);
  isPropertyAllowed = *(_BYTE *)(v7 + 8) == 0;
  if (JSStringIsEqualToUTF8CString(a3, "getURL"))
  {
    v21[0] = "getURL";
    v21[1] = (const char *)7;
    isPropertyAllowed = WebKit::WebExtensionAPIExtension::isPropertyAllowed((WebKit::WebExtensionAPIExtension *)v7, v21, (WebKit::WebPage *)v16);
  }
  else if (!JSStringIsEqualToUTF8CString(a3, "getBackgroundPage")
         && !JSStringIsEqualToUTF8CString(a3, "getViews")
         && !JSStringIsEqualToUTF8CString(a3, "isAllowedIncognitoAccess"))
  {
    IsEqualToUTF8CString = JSStringIsEqualToUTF8CString(a3, "isAllowedFileSchemeAccess");
    if (v17)
      isPropertyAllowed = 0;
    else
      isPropertyAllowed = IsEqualToUTF8CString;
  }
  if (v16)
    CFRelease(v16[1]);
  if (*(_DWORD *)(v7 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
  else
    --*(_DWORD *)(v7 + 48);
  return isPropertyAllowed;
}

void sub_196F2E2E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::getProperty(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v7;
  uint64_t v8;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  CFTypeRef *v17;
  int v18;
  JSValueRef (__cdecl *v19)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *);
  JSObjectRef FunctionWithCallback;
  JSObjectRef v21;
  const char *v23[2];

  v7 = WebKit::toWebExtensionAPIExtension(this, a2, a3);
  if (!v7)
    return JSValueMakeUndefined(this);
  v8 = v7;
  ++*(_DWORD *)(v7 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v10, v23);
  v11 = v23[0];
  if (v23[0])
  {
    v12 = *((_QWORD *)v23[0] + 3);
    if (v12
      && (v13 = *(_QWORD *)(v12 + 8)) != 0
      && (v14 = *(_QWORD *)(v13 + 24)) != 0
      && (v15 = *(_QWORD *)(v14 + 8)) != 0
      && (v16 = *(_QWORD **)(*(_QWORD *)(v15 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v16 + 1368))(v16) & 1) == 0))
    {
      v17 = *(CFTypeRef **)(v16[2] + 8);
      if (v17)
      {
        CFRetain(*(v17 - 1));
        v17 -= 2;
      }
    }
    else
    {
      v17 = 0;
    }
    CFRelease(*((CFTypeRef *)v11 + 1));
  }
  else
  {
    v17 = 0;
  }
  v18 = *(unsigned __int8 *)(v8 + 8);
  if (JSStringIsEqualToUTF8CString(a3, "getURL"))
  {
    v23[0] = "getURL";
    v23[1] = (const char *)7;
    if (WebKit::WebExtensionAPIExtension::isPropertyAllowed((WebKit::WebExtensionAPIExtension *)v8, v23, (WebKit::WebPage *)v17))
    {
      v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::getURL;
LABEL_26:
      FunctionWithCallback = JSObjectMakeFunctionWithCallback(this, a3, v19);
      goto LABEL_27;
    }
  }
  if (!v18)
  {
    if (JSStringIsEqualToUTF8CString(a3, "getBackgroundPage"))
    {
      v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::getBackgroundPage;
      goto LABEL_26;
    }
    if (JSStringIsEqualToUTF8CString(a3, "getViews"))
    {
      v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::getViews;
      goto LABEL_26;
    }
    if (JSStringIsEqualToUTF8CString(a3, "isAllowedIncognitoAccess"))
    {
      v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::isAllowedIncognitoAccess;
      goto LABEL_26;
    }
    if (JSStringIsEqualToUTF8CString(a3, "isAllowedFileSchemeAccess"))
    {
      v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::isAllowedFileSchemeAccess;
      goto LABEL_26;
    }
  }
  FunctionWithCallback = JSValueMakeUndefined(this);
LABEL_27:
  v21 = FunctionWithCallback;
  if (v17)
    CFRelease(v17[1]);
  if (*(_DWORD *)(v8 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 8))(v8 + 40);
  else
    --*(_DWORD *)(v8 + 48);
  return v21;
}

void sub_196F2E540(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::isInIncognitoContext(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIExtension *v6;
  WebKit::JSWebExtensionAPIExtension *v7;
  NSObject *v8;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  JSValueRef Undefined;
  NSObject *v20;
  uint8_t buf[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::toWebExtensionAPIExtension(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v10, buf);
  v11 = *(_QWORD *)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_12;
  v12 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v12
    || (v13 = *(_QWORD *)(v12 + 8)) == 0
    || (v14 = *(_QWORD *)(v13 + 24)) == 0
    || (v15 = *(_QWORD *)(v14 + 8)) == 0
    || (v16 = *(_QWORD **)(*(_QWORD *)(v15 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v16 + 1368))(v16) & 1) != 0)
    || (v17 = *(_QWORD *)(v16[2] + 8)) == 0)
  {
    CFRelease(*(CFTypeRef *)(v11 + 8));
LABEL_12:
    v20 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_15;
  }
  CFRetain(*(CFTypeRef *)(v17 - 8));
  CFRelease(*(CFTypeRef *)(v11 + 8));
  v18 = WebKit::WebPage::usesEphemeralSession((WebKit::WebPage *)(v17 - 16));
  Undefined = JSValueMakeBoolean(this, v18);
  CFRelease(*(CFTypeRef *)(v17 - 8));
LABEL_15:
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F2E894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;

  CFRelease(*(CFTypeRef *)(v11 - 8));
  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::getURL(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  NSString *v16;
  void *v17;
  void *v18;
  NSString *v19;
  JSValueRef Undefined;
  NSString *v21;
  const OpaqueJSValue *v23;

  v11 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4)
  {
    if (JSValueIsString(this, *a5))
    {
      WebKit::toNSString(this, *a5, 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (v17)
      {
        WebKit::WebExtensionAPIExtension::getURL(v12);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = (NSString *)0;
        Undefined = WebKit::toJSValueRef(this, v18, 0);

        if (v19)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("extension.getURL()"), 0, v19, v21);
          Undefined = JSValueMakeUndefined(this);
        }

      }
      else
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("extension.getURL()"), CFSTR("resourcePath"), CFSTR("a string is expected"), v16);
        Undefined = JSValueMakeUndefined(this);
      }

      goto LABEL_10;
    }
    v23 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("extension.getURL()"), CFSTR("resourcePath"), CFSTR("a string is expected"), v15);
  }
  else
  {
    v23 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("extension.getURL()"), 0, CFSTR("a required argument is missing"), v14);
  }
  *a6 = v23;
  Undefined = JSValueMakeUndefined(this);
LABEL_10:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2ECB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::getBackgroundPage(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  objc_object *v11;
  const OpaqueJSContext *v12;
  JSValueRef Null;
  JSValueRef v14;

  v8 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*(_DWORD *)(v8 + 48);
  v10 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  WebKit::WebExtensionAPIExtension::getBackgroundPage((WebKit::WebExtensionAPIExtension *)v9, this);
  v12 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
  if (v12)
    Null = WebKit::toJSValueRef(this, v12, v11);
  else
    Null = JSValueMakeNull(this);
  v14 = Null;

  if (*(_DWORD *)(v9 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
  else
    --*(_DWORD *)(v9 + 48);
  return v14;
}

void sub_196F2EFD4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::getViews(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const OpaqueJSValue *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  NSString *v21;
  void *v22;
  NSString *v23;
  objc_object *v24;
  const OpaqueJSContext *v25;
  JSValueRef Null;
  JSValueRef Undefined;
  NSString *v28;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    v19 = 0;
LABEL_12:
    v30 = 0;
    WebKit::WebExtensionAPIExtension::getViews(v12, this, v19, &v30);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (NSString *)v30;
    v25 = v22;
    if (v25)
      Null = WebKit::toJSValueRef(this, v25, v24);
    else
      Null = JSValueMakeNull(this);
    Undefined = Null;

    if (v23)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("extension.getViews()"), 0, v23, v28);
      Undefined = JSValueMakeUndefined(this);
    }

    goto LABEL_18;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v20 = objc_msgSend(v18, "_isDictionary");

  if ((v20 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("extension.getViews()"), CFSTR("filter"), CFSTR("an object is expected"), v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_18:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F2F438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::isAllowedIncognitoAccess(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSObjectRef DeferredPromise;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_10;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("extension.isAllowedIncognitoAccess()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_15;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    DeferredPromise = 0;
  }
  else
  {
LABEL_10:
    reject = 0;
    resolve = 0;
    DeferredPromise = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (DeferredPromise)
    goto LABEL_16;
  Undefined = JSValueMakeUndefined(this);
LABEL_15:
  DeferredPromise = Undefined;
LABEL_16:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return DeferredPromise;
}

void sub_196F2F864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::isAllowedFileSchemeAccess(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSObjectRef DeferredPromise;
  id v20;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_10;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("extension.isAllowedFileSchemeAccess()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_15;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    DeferredPromise = 0;
  }
  else
  {
LABEL_10:
    reject = 0;
    resolve = 0;
    DeferredPromise = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  v20 = WebKit::WebExtensionCallbackHandler::call(v18, MEMORY[0x1E0C9AAA0]);
  if (v18)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
  if (DeferredPromise)
    goto LABEL_16;
  Undefined = JSValueMakeUndefined(this);
LABEL_15:
  DeferredPromise = Undefined;
LABEL_16:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return DeferredPromise;
}

void sub_196F2FC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::toJSValueRef(WebKit *this, const OpaqueJSContext *a2, objc_object *a3)
{
  const OpaqueJSContext *v4;
  void *v5;
  void *v6;
  JSValueRef Undefined;
  void *v8;
  void *v9;

  v4 = a2;
  if (v4)
  {
    objc_opt_class();
    WTF::dynamic_objc_cast<JSValue>(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      Undefined = (JSValueRef)objc_msgSend(v5, "JSValueRef");
    }
    else
    {
      v8 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "valueWithObject:inContext:", v4, v6);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      Undefined = (JSValueRef)objc_msgSend(v9, "JSValueRef");

    }
  }
  else
  {
    Undefined = JSValueMakeUndefined(this);
  }

  return Undefined;
}

void sub_196F2FDEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPILocalization *WebKit::toWebExtensionAPILocalization(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPILocalization *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPILocalization::localizationClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPILocalization::localizationClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPILocalization *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPILocalization::localizationClass(WebKit::JSWebExtensionAPILocalization *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  JSClassDefinition v5;

  result = (JSClassRef)WebKit::JSWebExtensionAPILocalization::localizationClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPILocalization::localizationClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v5.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E0CC1100] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "Localization";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPILocalization::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPILocalization::localizationClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPILocalization::getMessage(WebKit::JSWebExtensionAPILocalization *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPILocalization *v11;
  WebKit::JSWebExtensionAPILocalization *v12;
  NSObject *v13;
  NSString *v14;
  objc_object *v15;
  NSString *v16;
  JSValueRef Undefined;
  NSString *v18;
  NSString *v19;
  objc_class *v20;
  NSString *v21;
  void *v22;

  v11 = WebKit::toWebExtensionAPILocalization(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4 != (OpaqueJSValue *)1)
    {
      if (!a4)
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("i18n.getMessage()"), 0, CFSTR("a required argument is missing"), v14);
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_17;
      }
      v15 = 0;
      goto LABEL_7;
    }
    if (JSValueIsString(this, *a5))
    {
      WebKit::toNSString(this, *a5, 2);
      v19 = (NSString *)objc_claimAutoreleasedReturnValue();
      v15 = 0;
      if (v19)
        goto LABEL_13;
      goto LABEL_7;
    }
LABEL_24:
    v16 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("i18n.getMessage()"), CFSTR("name"), CFSTR("a string is expected"), v18);
    Undefined = JSValueMakeUndefined(this);
    v15 = 0;
    goto LABEL_16;
  }
  if (!JSValueIsString(this, *a5))
    goto LABEL_24;
  WebKit::toNSString(this, *a5, 2);
  v19 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebKit::toNSObject(this, a5[1], 0, v20);
  v15 = (objc_object *)objc_claimAutoreleasedReturnValue();
  if (v19)
  {
LABEL_13:
    if (-[NSString length](v19, "length"))
    {
      WebKit::WebExtensionAPILocalization::getMessage(v12, v19, v15);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      Undefined = WebKit::toJSValueRef(this, v22, 1);

    }
    else
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("i18n.getMessage()"), CFSTR("name"), CFSTR("it cannot be empty"), v21);
      Undefined = JSValueMakeUndefined(this);
    }
    v16 = v19;
    goto LABEL_16;
  }
LABEL_7:
  v16 = 0;
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("i18n.getMessage()"), CFSTR("name"), CFSTR("a string is expected"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_16:

LABEL_17:
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return Undefined;
}

void sub_196F30374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPILocalization::getUILanguage(WebKit::JSWebExtensionAPILocalization *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPILocalization *v8;
  WebKit::JSWebExtensionAPILocalization *v9;
  NSObject *v10;
  void *v11;
  JSValueRef v12;

  v8 = WebKit::toWebExtensionAPILocalization(this, a3, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*((_DWORD *)v8 + 12);
  v10 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  WebKit::WebExtensionAPILocalization::getUILanguage(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = WebKit::toJSValueRef(this, v11, 1);

  if (*((_DWORD *)v9 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v9 + 5) + 8))((uint64_t)v9 + 40);
  else
    --*((_DWORD *)v9 + 12);
  return v12;
}

void sub_196F30674(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPILocalization::getAcceptLanguages(WebKit::JSWebExtensionAPILocalization *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPILocalization *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSObjectRef DeferredPromise;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPILocalization(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_10;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("i18n.getAcceptLanguages()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_15;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    DeferredPromise = 0;
  }
  else
  {
LABEL_10:
    reject = 0;
    resolve = 0;
    DeferredPromise = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPILocalization::getAcceptLanguages(v12, (WebKit::WebExtensionCallbackHandler **)buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (DeferredPromise)
    goto LABEL_16;
  Undefined = JSValueMakeUndefined(this);
LABEL_15:
  DeferredPromise = Undefined;
LABEL_16:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return DeferredPromise;
}

void sub_196F30A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIMenus *WebKit::toWebExtensionAPIMenus(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIMenus *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIMenus::menusClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIMenus::menusClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIMenus *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIMenus::menusClass(WebKit::JSWebExtensionAPIMenus *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIMenus::menusClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIMenus::menusClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIMenus::staticValues(void)::values;
    v6.className = "Menus";
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIMenus::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIMenus::menusClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIMenus::create(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIMenus *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  void *v17;
  const OpaqueJSValue *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const OpaqueJSValue *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char v28;
  NSString *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  uint64_t v34;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v36;
  WebKit::WebExtensionCallbackHandler *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  NSString *v45;
  objc_object *v46;
  const OpaqueJSContext *v47;
  JSValueRef Null;
  NSObject *v49;
  NSString *v51;
  WebKit::WebExtensionCallbackHandler *v52;
  __CFString *v53;
  __CFString *v54;
  id v55;
  uint8_t buf[8];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIMenus(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_42;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v18 = *a5;
    if (*a5)
    {
      v19 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "valueWithJSValueRef:inContext:", v18, v20);
      v21 = objc_claimAutoreleasedReturnValue();

      v22 = (void *)v21;
    }
    else
    {
      v22 = 0;
    }
    v28 = objc_msgSend(v22, "_isDictionary");

    if ((v28 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v17)
        goto LABEL_7;
      goto LABEL_26;
    }
    goto LABEL_56;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    v23 = *a5;
    if (*a5)
    {
      v24 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "valueWithJSValueRef:inContext:", v23, v25);
      v26 = objc_claimAutoreleasedReturnValue();

      v27 = (void *)v26;
    }
    else
    {
      v27 = 0;
    }
    v30 = objc_msgSend(v27, "_isDictionary");

    if (v30)
    {
      if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        WebKit::toNSDictionary(this, *a5, 0, 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = a5[1];
        v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
        v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (!v17)
        {
LABEL_8:
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.create()"), CFSTR("properties"), CFSTR("an object is expected"), v14);
          Undefined = JSValueMakeUndefined(this);
          v17 = 0;
          if (!v15)
            goto LABEL_41;
          goto LABEL_40;
        }
        if (*(_QWORD *)buf)
        {
LABEL_27:
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v36, buf);
          v37 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (*(_QWORD *)buf)
          {
            v38 = *(_QWORD *)(*(_QWORD *)buf + 24);
            if (v38)
            {
              v39 = *(_QWORD *)(v38 + 8);
              if (v39)
              {
                v40 = *(_QWORD *)(v39 + 24);
                if (v40)
                {
                  v41 = *(_QWORD *)(v40 + 8);
                  if (v41)
                  {
                    v42 = *(_QWORD **)(*(_QWORD *)(v41 + 48) + 16);
                    if (((*(uint64_t (**)(_QWORD *))(*v42 + 1368))(v42) & 1) == 0)
                    {
                      v43 = *(_QWORD *)(v42[2] + 8);
                      if (v43)
                      {
                        CFRetain(*(CFTypeRef *)(v43 - 8));
                        CFRelease(*((CFTypeRef *)v37 + 1));
                        *(_QWORD *)buf = v15;
                        v55 = 0;
                        WebKit::WebExtensionAPIMenus::createMenu(v12, v43 - 16, v17, (uint64_t *)buf, &v55);
                        v44 = (void *)objc_claimAutoreleasedReturnValue();
                        v45 = (NSString *)v55;
                        v47 = v44;
                        if (v47)
                          Null = WebKit::toJSValueRef(this, v47, v46);
                        else
                          Null = JSValueMakeNull(this);
                        Undefined = Null;

                        v52 = *(WebKit::WebExtensionCallbackHandler **)buf;
                        *(_QWORD *)buf = 0;
                        if (v52)
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v52);
                        if (v45)
                        {
                          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.create()"), 0, v45, v51);
                          Undefined = JSValueMakeUndefined(this);
                        }

                        CFRelease(*(CFTypeRef *)(v43 - 8));
                        goto LABEL_41;
                      }
                    }
                  }
                }
              }
            }
            CFRelease(*((CFTypeRef *)v37 + 1));
          }
          v49 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_196BCC000, v49, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          }
          Undefined = JSValueMakeUndefined(this);
LABEL_40:
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
LABEL_41:

          goto LABEL_42;
        }
LABEL_26:
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v15 = (WebKit::WebExtensionCallbackHandler *)WTF::fastMalloc((WTF *)0x28);
        WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler((uint64_t)v15, this, v34);
        goto LABEL_27;
      }
      v53 = CFSTR("a function is expected");
      v54 = CFSTR("callback");
LABEL_57:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.create()"), &v54->isa, &v53->isa, v29);
      Undefined = JSValueMakeUndefined(this);
      v17 = 0;
      goto LABEL_41;
    }
LABEL_56:
    v53 = CFSTR("an object is expected");
    v54 = CFSTR("properties");
    goto LABEL_57;
  }
  if (a4)
  {
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.create()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_42:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F31290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;

  CFRelease(*(CFTypeRef *)(v16 - 8));
  if (*(_DWORD *)(v13 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
  else
    --*(_DWORD *)(v13 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::update(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIMenus *v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  const OpaqueJSContext *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  const OpaqueJSContext *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  WebKit::WebExtensionCallbackHandler *v25;
  void *v26;
  JSValueRef v27;
  JSValueRef Undefined;
  char v29;
  NSString *v30;
  OpaqueJSValue *v31;
  objc_class *v32;
  uint64_t v33;
  void *v34;
  const OpaqueJSContext *v35;
  const OpaqueJSValue *v36;
  char v37;
  objc_class *v38;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v40;
  WebKit::WebExtensionCallbackHandler *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  NSString *v48;
  NSString *v49;
  WebKit::WebExtensionCallbackHandler *v50;
  void *v51;
  NSObject *v52;
  NSString *v53;
  __CFString *v55;
  __CFString *v56;
  id v58;
  WebKit::WebExtensionCallbackHandler *v59;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v62;
  JSObjectRef v63;
  uint8_t buf[8];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPIMenus(this, a3, a3);
  v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((_BYTE *)v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_52;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if ((unint64_t)a4 > 1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      v19 = a5[1];
      if (v19)
      {
        v20 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "valueWithJSValueRef:inContext:", v19, v21);
        v22 = objc_claimAutoreleasedReturnValue();

        v23 = (void *)v22;
      }
      else
      {
        v23 = 0;
      }
      v37 = objc_msgSend(v23, "_isDictionary");

      if ((v37 & 1) != 0)
      {
        WebKit::toNSObject(this, *a5, 0, v38);
        v33 = objc_claimAutoreleasedReturnValue();
        v25 = 0;
        WebKit::toNSDictionary(this, a5[1], 0, 0);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_24;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)3)
      {
        v24 = 0;
        v25 = 0;
        goto LABEL_12;
      }
      v14 = a5[1];
      if (v14)
      {
        v15 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
        v17 = objc_claimAutoreleasedReturnValue();

        v18 = (void *)v17;
      }
      else
      {
        v18 = 0;
      }
      v29 = objc_msgSend(v18, "_isDictionary");

      if ((v29 & 1) != 0)
      {
        if (JSValueIsObject(this, a5[2]) && (v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          WebKit::toNSObject(this, *a5, 0, v32);
          v33 = objc_claimAutoreleasedReturnValue();
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = a5[2];
          v36 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v35, v36, buf);
          v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
LABEL_24:
          v26 = (void *)v33;
          if (v33)
          {
            if (v34)
            {
              if (v25)
              {
                Undefined = 0;
              }
              else
              {
                reject = 0;
                resolve = 0;
                Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
                v63 = resolve;
                *(_QWORD *)buf = this;
                v62 = reject;
                WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v63, &v62, &v59);
                v25 = v59;
              }
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v40, buf);
              v41 = *(WebKit::WebExtensionCallbackHandler **)buf;
              if (*(_QWORD *)buf)
              {
                v42 = *(_QWORD *)(*(_QWORD *)buf + 24);
                if (v42)
                {
                  v43 = *(_QWORD *)(v42 + 8);
                  if (v43)
                  {
                    v44 = *(_QWORD *)(v43 + 24);
                    if (v44)
                    {
                      v45 = *(_QWORD *)(v44 + 8);
                      if (v45)
                      {
                        v46 = *(_QWORD **)(*(_QWORD *)(v45 + 48) + 16);
                        if (((*(uint64_t (**)(_QWORD *))(*v46 + 1368))(v46) & 1) == 0)
                        {
                          v47 = *(_QWORD *)(v46[2] + 8);
                          if (v47)
                          {
                            CFRetain(*(CFTypeRef *)(v47 - 8));
                            CFRelease(*((CFTypeRef *)v41 + 1));
                            *(_QWORD *)buf = v25;
                            v58 = 0;
                            WebKit::WebExtensionAPIMenus::update(v11, v47 - 16, v26, v34, (uint64_t *)buf, &v58);
                            v49 = (NSString *)v58;
                            v50 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(_QWORD *)buf = 0;
                            if (v50)
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v50);
                            if (v49)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.update()"), 0, v49, v48);
                            }
                            else if (Undefined)
                            {
LABEL_41:

                              CFRelease(*(CFTypeRef *)(v47 - 8));
                              v51 = v34;
LABEL_51:

                              goto LABEL_52;
                            }
                            Undefined = JSValueMakeUndefined(this);
                            goto LABEL_41;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*((CFTypeRef *)v41 + 1));
              }
              v52 = qword_1ECE710C8;
              if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_196BCC000, v52, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined)
                  goto LABEL_46;
              }
              else if (!Undefined)
              {
                goto LABEL_46;
              }
              Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("menus.update()"), 0, CFSTR("an unknown error occurred"), v53);
              if (Undefined)
              {
LABEL_47:
                v24 = v34;
                goto LABEL_48;
              }
LABEL_46:
              Undefined = JSValueMakeUndefined(this);
              goto LABEL_47;
            }
            v24 = 0;
            *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.update()"), CFSTR("properties"), CFSTR("an object is expected"), v13);
            v27 = JSValueMakeUndefined(this);
LABEL_13:
            Undefined = v27;
LABEL_48:
            if (v25)
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
            v51 = v24;
            goto LABEL_51;
          }
          v24 = v34;
LABEL_12:
          v26 = 0;
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.update()"), CFSTR("identifier"), CFSTR("an object is expected"), v13);
          v27 = JSValueMakeUndefined(this);
          goto LABEL_13;
        }
        v55 = CFSTR("a function is expected");
        v56 = CFSTR("callback");
LABEL_63:
        v51 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.update()"), &v56->isa, &v55->isa, v30);
        Undefined = JSValueMakeUndefined(this);
        v26 = 0;
        goto LABEL_51;
      }
    }
    v55 = CFSTR("an object is expected");
    v56 = CFSTR("properties");
    goto LABEL_63;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.update()"), 0, CFSTR("a required argument is missing"), v13);
  Undefined = JSValueMakeUndefined(this);
LABEL_52:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F31BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (*(_DWORD *)(v17 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
  else
    --*(_DWORD *)(v17 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::remove(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIMenus *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  JSValueRef Undefined;
  void *v18;
  OpaqueJSValue *v19;
  objc_class *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  NSString *v24;
  NSString *v25;
  WebKit::WebExtensionCallbackHandler *v26;
  JSValueRef v28;
  id v29;
  WebKit::WebExtensionCallbackHandler *v30;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v33;
  JSObjectRef v34;
  uint8_t buf[8];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIMenus(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_26;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    WebKit::toNSObject(this, *a5, 0, v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v18)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v16 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.remove()"), 0, CFSTR("a required argument is missing"), v15);
    v28 = JSValueMakeUndefined(this);
    goto LABEL_34;
  }
  if (JSValueIsObject(this, a5[1]) && (v19 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v19))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSObject(this, *a5, 0, v20);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = a5[1];
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v18)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.remove()"), CFSTR("identifier"), CFSTR("an object is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      if (v16)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
      goto LABEL_26;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_20;
    }
LABEL_19:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v34 = resolve;
    *(_QWORD *)buf = this;
    v33 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v34, &v33, &v30);
    v16 = v30;
LABEL_20:
    *(_QWORD *)buf = v16;
    v29 = 0;
    WebKit::WebExtensionAPIMenus::remove(v12, v18, (uint64_t *)buf, &v29);
    v25 = (NSString *)v29;
    v26 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v26)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v26);
    if (v25)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.remove()"), 0, v25, v24);
    }
    else if (Undefined)
    {
LABEL_25:

      goto LABEL_26;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_25;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.remove()"), CFSTR("callback"), CFSTR("a function is expected"), v21);
  v28 = JSValueMakeUndefined(this);
LABEL_34:
  Undefined = v28;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F32140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::removeAll(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIMenus *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef v21;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIMenus(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_17;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("menus.removeAll()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
  }
  else
  {
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPIMenus::removeAll(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (Undefined)
    goto LABEL_17;
  v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F32588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::onClicked(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIMenus *v6;
  WebKit::JSWebExtensionAPIMenus *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIMenus(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIMenus::onClicked(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F32838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::actionMenuTopLevelLimit(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIMenus *v6;
  WebKit::JSWebExtensionAPIMenus *v7;
  NSObject *v8;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIMenus(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    Undefined = JSValueMakeNumber(this, 6.0);
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F32AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPINamespace *WebKit::toWebExtensionAPINamespace(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPINamespace *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPINamespace::namespaceClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPINamespace::namespaceClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPINamespace *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPINamespace::namespaceClass(WebKit::JSWebExtensionAPINamespace *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPINamespace::namespaceClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPINamespace::namespaceClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "Namespace";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPINamespace::staticValues(void)::values;
    v6.staticFunctions = 0;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPINamespace::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPINamespace::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPINamespace::getProperty;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPINamespace::namespaceClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPINamespace::getPropertyNames(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  int v17;
  OpaqueJSString *v18;
  OpaqueJSString *v19;
  OpaqueJSString *v20;
  OpaqueJSString *v21;
  OpaqueJSString *v22;
  OpaqueJSString *v23;
  OpaqueJSString *v24;
  OpaqueJSString *v25;
  OpaqueJSString *v26;
  OpaqueJSString *v27;
  OpaqueJSString *v28;
  OpaqueJSString *v29;
  OpaqueJSString *v30;
  OpaqueJSString *v31;
  OpaqueJSString *v32;
  OpaqueJSString *v33;
  OpaqueJSString *v34;
  OpaqueJSString *v35;
  const char *v36;
  uint64_t v37;

  v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v36);
    v10 = v36;
    if (v36)
    {
      v11 = *((_QWORD *)v36 + 3);
      if (v11
        && (v12 = *(_QWORD *)(v11 + 8)) != 0
        && (v13 = *(_QWORD *)(v12 + 24)) != 0
        && (v14 = *(_QWORD *)(v13 + 8)) != 0
        && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
      {
        v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      v16 = 0;
    }
    v17 = *(unsigned __int8 *)(v7 + 8);
    if (!*(_BYTE *)(v7 + 8))
    {
      v36 = "action";
      v37 = 7;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v18 = JSStringCreateWithUTF8CString("action");
        JSPropertyNameAccumulatorAddName(a3, v18);
        if (v18)
          JSStringRelease(v18);
      }
      v36 = "alarms";
      v37 = 7;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v19 = JSStringCreateWithUTF8CString("alarms");
        JSPropertyNameAccumulatorAddName(a3, v19);
        if (v19)
          JSStringRelease(v19);
      }
      v36 = "browserAction";
      v37 = 14;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v20 = JSStringCreateWithUTF8CString("browserAction");
        JSPropertyNameAccumulatorAddName(a3, v20);
        if (v20)
          JSStringRelease(v20);
      }
      v36 = "cookies";
      v37 = 8;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v21 = JSStringCreateWithUTF8CString("cookies");
        JSPropertyNameAccumulatorAddName(a3, v21);
        if (v21)
          JSStringRelease(v21);
      }
      v36 = "commands";
      v37 = 9;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v22 = JSStringCreateWithUTF8CString("commands");
        JSPropertyNameAccumulatorAddName(a3, v22);
        if (v22)
          JSStringRelease(v22);
      }
      v36 = "contextMenus";
      v37 = 13;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v23 = JSStringCreateWithUTF8CString("contextMenus");
        JSPropertyNameAccumulatorAddName(a3, v23);
        if (v23)
          JSStringRelease(v23);
      }
      v36 = "declarativeNetRequest";
      v37 = 22;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v24 = JSStringCreateWithUTF8CString("declarativeNetRequest");
        JSPropertyNameAccumulatorAddName(a3, v24);
        if (v24)
          JSStringRelease(v24);
      }
      v36 = "menus";
      v37 = 6;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v25 = JSStringCreateWithUTF8CString("menus");
        JSPropertyNameAccumulatorAddName(a3, v25);
        if (v25)
          JSStringRelease(v25);
      }
      v36 = "notifications";
      v37 = 14;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v26 = JSStringCreateWithUTF8CString("notifications");
        JSPropertyNameAccumulatorAddName(a3, v26);
        if (v26)
          JSStringRelease(v26);
      }
      v36 = "pageAction";
      v37 = 11;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v27 = JSStringCreateWithUTF8CString("pageAction");
        JSPropertyNameAccumulatorAddName(a3, v27);
        if (v27)
          JSStringRelease(v27);
      }
      v28 = JSStringCreateWithUTF8CString("permissions");
      JSPropertyNameAccumulatorAddName(a3, v28);
      if (v28)
        JSStringRelease(v28);
      v36 = "scripting";
      v37 = 10;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v29 = JSStringCreateWithUTF8CString("scripting");
        JSPropertyNameAccumulatorAddName(a3, v29);
        if (v29)
          JSStringRelease(v29);
      }
    }
    v36 = "storage";
    v37 = 8;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
    {
      v30 = JSStringCreateWithUTF8CString("storage");
      JSPropertyNameAccumulatorAddName(a3, v30);
      if (v30)
        JSStringRelease(v30);
    }
    if (!v17)
    {
      v31 = JSStringCreateWithUTF8CString("tabs");
      JSPropertyNameAccumulatorAddName(a3, v31);
      if (v31)
        JSStringRelease(v31);
      v32 = JSStringCreateWithUTF8CString("windows");
      JSPropertyNameAccumulatorAddName(a3, v32);
      if (v32)
        JSStringRelease(v32);
      v36 = "webNavigation";
      v37 = 14;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v33 = JSStringCreateWithUTF8CString("webNavigation");
        JSPropertyNameAccumulatorAddName(a3, v33);
        if (v33)
          JSStringRelease(v33);
      }
      v36 = "webRequest";
      v37 = 11;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        v34 = JSStringCreateWithUTF8CString("webRequest");
        JSPropertyNameAccumulatorAddName(a3, v34);
        if (v34)
          JSStringRelease(v34);
      }
    }
    v36 = "test";
    v37 = 5;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
    {
      v35 = JSStringCreateWithUTF8CString("test");
      JSPropertyNameAccumulatorAddName(a3, v35);
      if (v35)
        JSStringRelease(v35);
    }
    if (v16)
      CFRelease(v16[1]);
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
}

void sub_196F33250(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  OpaqueJSString *v3;

  if (v3)
    JSStringRelease(v3);
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(exception_object);
}

void sub_196F33370()
{
  JUMPOUT(0x196F33344);
}

BOOL WebKit::JSWebExtensionAPINamespace::hasProperty(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  int v17;
  _BOOL8 v18;
  _BOOL8 isPropertyAllowed;
  const char *v21;
  uint64_t v22;

  v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v21);
  v10 = v21;
  if (v21)
  {
    v11 = *((_QWORD *)v21 + 3);
    if (v11
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
    {
      v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    v16 = 0;
  }
  v17 = *(unsigned __int8 *)(v7 + 8);
  v18 = *(_BYTE *)(v7 + 8) == 0;
  if (JSStringIsEqualToUTF8CString(a3, "action"))
  {
    if (!v17)
    {
      v21 = "action";
      v22 = 7;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
LABEL_51:
      v18 = isPropertyAllowed;
      goto LABEL_52;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "alarms"))
  {
    if (!v17)
    {
      v21 = "alarms";
      v22 = 7;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_51;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "browserAction"))
  {
    if (!v17)
    {
      v21 = "browserAction";
      v22 = 14;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_51;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "cookies"))
  {
    if (!v17)
    {
      v21 = "cookies";
      v22 = 8;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_51;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "commands"))
  {
    if (!v17)
    {
      v21 = "commands";
      v22 = 9;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_51;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "contextMenus"))
  {
    if (!v17)
    {
      v21 = "contextMenus";
      v22 = 13;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_51;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "declarativeNetRequest"))
  {
    if (!v17)
    {
      v21 = "declarativeNetRequest";
      v22 = 22;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_51;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "menus"))
  {
    if (!v17)
    {
      v21 = "menus";
      v22 = 6;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_51;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "notifications"))
  {
    if (!v17)
    {
      v21 = "notifications";
      v22 = 14;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_51;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "pageAction"))
  {
    if (!v17)
    {
      v21 = "pageAction";
      v22 = 11;
      isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_51;
    }
  }
  else
  {
    if (JSStringIsEqualToUTF8CString(a3, "permissions"))
      goto LABEL_52;
    if (JSStringIsEqualToUTF8CString(a3, "scripting"))
    {
      if (!v17)
      {
        v21 = "scripting";
        v22 = 10;
        isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
        goto LABEL_51;
      }
    }
    else
    {
      if (JSStringIsEqualToUTF8CString(a3, "storage"))
      {
        v21 = "storage";
        v22 = 8;
        isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
        goto LABEL_51;
      }
      if (JSStringIsEqualToUTF8CString(a3, "tabs") || JSStringIsEqualToUTF8CString(a3, "windows"))
        goto LABEL_52;
      if (JSStringIsEqualToUTF8CString(a3, "webNavigation"))
      {
        if (!v17)
        {
          v21 = "webNavigation";
          v22 = 14;
          isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
          goto LABEL_51;
        }
      }
      else if (JSStringIsEqualToUTF8CString(a3, "webRequest"))
      {
        if (!v17)
        {
          v21 = "webRequest";
          v22 = 11;
          isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
          goto LABEL_51;
        }
      }
      else if (JSStringIsEqualToUTF8CString(a3, "test"))
      {
        v21 = "test";
        v22 = 5;
        isPropertyAllowed = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
        goto LABEL_51;
      }
    }
  }
  v18 = 0;
LABEL_52:
  if (v16)
    CFRelease(v16[1]);
  if (*(_DWORD *)(v7 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
  else
    --*(_DWORD *)(v7 + 48);
  return v18;
}

void sub_196F33818(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPINamespace::getProperty(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v8;
  uint64_t v9;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  CFTypeRef *v18;
  int v19;
  const OpaqueJSValue *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  JSValueRef v25;
  const OpaqueJSValue *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  const OpaqueJSValue *v30;
  uint64_t v31;
  NSObject *v32;
  const OpaqueJSValue *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  const OpaqueJSValue *v37;
  uint64_t v38;
  const OpaqueJSValue *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  const OpaqueJSValue *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  const OpaqueJSValue *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  const OpaqueJSValue *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  const OpaqueJSValue *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  const OpaqueJSValue *v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  const OpaqueJSValue *v63;
  uint64_t v64;
  const OpaqueJSValue *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  const OpaqueJSValue *v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  const OpaqueJSValue *v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  const OpaqueJSValue *v77;
  uint64_t v78;
  uint64_t v79;
  const OpaqueJSValue *v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  JSValueRef Undefined;
  const OpaqueJSValue *v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  uint8_t buf[8];
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*(_DWORD *)(v8 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v11, buf);
  v12 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v13 = *(_QWORD *)(*(_QWORD *)buf + 24);
    if (v13
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD *)(v14 + 24)) != 0
      && (v16 = *(_QWORD *)(v15 + 8)) != 0
      && (v17 = *(_QWORD **)(*(_QWORD *)(v16 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v17 + 1368))(v17) & 1) == 0))
    {
      v18 = *(CFTypeRef **)(v17[2] + 8);
      if (v18)
      {
        CFRetain(*(v18 - 1));
        v18 -= 2;
      }
    }
    else
    {
      v18 = 0;
    }
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned __int8 *)(v9 + 8);
  if (*(_BYTE *)(v9 + 8))
    goto LABEL_14;
  if (JSStringIsEqualToUTF8CString(a3, "action"))
  {
    *(_QWORD *)buf = "action";
    v91 = 7;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v31 = WebKit::toWebExtensionAPINamespace(this, a2, v30);
      v22 = v31;
      if (!v31)
        goto LABEL_105;
      ++*(_DWORD *)(v31 + 48);
      v32 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }
      goto LABEL_92;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "alarms"))
  {
    *(_QWORD *)buf = "alarms";
    v91 = 7;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v34 = WebKit::toWebExtensionAPINamespace(this, a2, v33);
      v22 = v34;
      if (v34)
      {
        ++*(_DWORD *)(v34 + 48);
        v35 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          __asm { BR              X10 }

        v36 = WebKit::WebExtensionAPINamespace::alarms((WebKit::WebExtensionAPINamespace *)v22);
        v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v36 + 40));
        goto LABEL_97;
      }
      goto LABEL_105;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "browserAction"))
  {
    *(_QWORD *)buf = "browserAction";
    v91 = 14;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v38 = WebKit::toWebExtensionAPINamespace(this, a2, v37);
      v22 = v38;
      if (!v38)
        goto LABEL_105;
      ++*(_DWORD *)(v38 + 48);
      v32 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }
      goto LABEL_92;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "cookies"))
  {
    *(_QWORD *)buf = "cookies";
    v91 = 8;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v44 = WebKit::toWebExtensionAPINamespace(this, a2, v43);
      v22 = v44;
      if (v44)
      {
        ++*(_DWORD *)(v44 + 48);
        v45 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          __asm { BR              X10 }

        v46 = WebKit::WebExtensionAPINamespace::cookies((WebKit::WebExtensionAPINamespace *)v22);
        v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v46 + 40));
        goto LABEL_97;
      }
      goto LABEL_105;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "commands"))
  {
    *(_QWORD *)buf = "commands";
    v91 = 9;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v48 = WebKit::toWebExtensionAPINamespace(this, a2, v47);
      v22 = v48;
      if (v48)
      {
        ++*(_DWORD *)(v48 + 48);
        v49 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          __asm { BR              X10 }

        v50 = WebKit::WebExtensionAPINamespace::commands((WebKit::WebExtensionAPINamespace *)v22);
        v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v50 + 40));
        goto LABEL_97;
      }
      goto LABEL_105;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "contextMenus"))
  {
    *(_QWORD *)buf = "contextMenus";
    v91 = 13;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v56 = WebKit::toWebExtensionAPINamespace(this, a2, v55);
      v22 = v56;
      if (!v56)
        goto LABEL_105;
      ++*(_DWORD *)(v56 + 48);
      v57 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }
      goto LABEL_62;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "declarativeNetRequest"))
  {
    *(_QWORD *)buf = "declarativeNetRequest";
    v91 = 22;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v60 = WebKit::toWebExtensionAPINamespace(this, a2, v59);
      v22 = v60;
      if (v60)
      {
        ++*(_DWORD *)(v60 + 48);
        v61 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
          __asm { BR              X10 }

        v62 = WebKit::WebExtensionAPINamespace::declarativeNetRequest((WebKit::WebExtensionAPINamespace *)v22);
        v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v62 + 40));
        goto LABEL_97;
      }
      goto LABEL_105;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "menus"))
  {
    *(_QWORD *)buf = "menus";
    v91 = 6;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v64 = WebKit::toWebExtensionAPINamespace(this, a2, v63);
      v22 = v64;
      if (!v64)
        goto LABEL_105;
      ++*(_DWORD *)(v64 + 48);
      v57 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }
LABEL_62:

      v58 = WebKit::WebExtensionAPINamespace::menus((WebKit::WebExtensionAPINamespace *)v22);
      v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v58 + 40));
      goto LABEL_97;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "notifications"))
  {
    *(_QWORD *)buf = "notifications";
    v91 = 14;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v70 = WebKit::toWebExtensionAPINamespace(this, a2, v69);
      v22 = v70;
      if (v70)
      {
        ++*(_DWORD *)(v70 + 48);
        v71 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
          __asm { BR              X10 }

        v72 = WebKit::WebExtensionAPINamespace::notifications((WebKit::WebExtensionAPINamespace *)v22);
        v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v72 + 40));
        goto LABEL_97;
      }
      goto LABEL_105;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "pageAction"))
  {
    *(_QWORD *)buf = "pageAction";
    v91 = 11;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v78 = WebKit::toWebExtensionAPINamespace(this, a2, v77);
      v22 = v78;
      if (!v78)
        goto LABEL_105;
      ++*(_DWORD *)(v78 + 48);
      v32 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }
LABEL_92:

      v79 = WebKit::WebExtensionAPINamespace::action((WebKit::WebExtensionAPINamespace *)v22);
      v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v79 + 40));
LABEL_97:
      Undefined = v25;
      if (*(_DWORD *)(v22 + 48) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v22 + 40) + 8))(v22 + 40);
      else
        --*(_DWORD *)(v22 + 48);
      goto LABEL_106;
    }
  }
  if (JSStringIsEqualToUTF8CString(a3, "permissions"))
  {
    v81 = WebKit::toWebExtensionAPINamespace(this, a2, v80);
    v22 = v81;
    if (v81)
    {
      ++*(_DWORD *)(v81 + 48);
      v82 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }

      v83 = WebKit::WebExtensionAPINamespace::permissions((WebKit::WebExtensionAPINamespace *)v22);
      v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v83 + 40));
      goto LABEL_97;
    }
    goto LABEL_105;
  }
  if (JSStringIsEqualToUTF8CString(a3, "scripting"))
  {
    *(_QWORD *)buf = "scripting";
    v91 = 10;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v86 = WebKit::toWebExtensionAPINamespace(this, a2, v85);
      v22 = v86;
      if (v86)
      {
        ++*(_DWORD *)(v86 + 48);
        v87 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
          __asm { BR              X10 }

        v88 = WebKit::WebExtensionAPINamespace::scripting((WebKit::WebExtensionAPINamespace *)v22);
        v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v88 + 40));
        goto LABEL_97;
      }
      goto LABEL_105;
    }
  }
LABEL_14:
  if (JSStringIsEqualToUTF8CString(a3, "storage")
    && (*(_QWORD *)buf = "storage",
        v91 = 8,
        WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18)))
  {
    v21 = WebKit::toWebExtensionAPINamespace(this, a2, v20);
    v22 = v21;
    if (v21)
    {
      ++*(_DWORD *)(v21 + 48);
      v23 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }

      v24 = WebKit::WebExtensionAPINamespace::storage((WebKit::WebExtensionAPINamespace *)v22);
      v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v24 + 40));
      goto LABEL_97;
    }
  }
  else
  {
    if (!v19)
    {
      if (JSStringIsEqualToUTF8CString(a3, "tabs"))
      {
        v40 = WebKit::toWebExtensionAPINamespace(this, a2, v39);
        v22 = v40;
        if (v40)
        {
          ++*(_DWORD *)(v40 + 48);
          v41 = (id)qword_1ECE710C8;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            __asm { BR              X10 }

          v42 = WebKit::WebExtensionAPINamespace::tabs((WebKit::WebExtensionAPINamespace *)v22);
          v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v42 + 40));
          goto LABEL_97;
        }
        goto LABEL_105;
      }
      if (JSStringIsEqualToUTF8CString(a3, "windows"))
      {
        v52 = WebKit::toWebExtensionAPINamespace(this, a2, v51);
        v22 = v52;
        if (v52)
        {
          ++*(_DWORD *)(v52 + 48);
          v53 = (id)qword_1ECE710C8;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
            __asm { BR              X10 }

          v54 = WebKit::WebExtensionAPINamespace::windows((WebKit::WebExtensionAPINamespace *)v22);
          v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v54 + 40));
          goto LABEL_97;
        }
        goto LABEL_105;
      }
      if (JSStringIsEqualToUTF8CString(a3, "webNavigation"))
      {
        *(_QWORD *)buf = "webNavigation";
        v91 = 14;
        if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
        {
          v66 = WebKit::toWebExtensionAPINamespace(this, a2, v65);
          v22 = v66;
          if (v66)
          {
            ++*(_DWORD *)(v66 + 48);
            v67 = (id)qword_1ECE710C8;
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
              __asm { BR              X10 }

            v68 = WebKit::WebExtensionAPINamespace::webNavigation((WebKit::WebExtensionAPINamespace *)v22);
            v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v68 + 40));
            goto LABEL_97;
          }
          goto LABEL_105;
        }
      }
      if (JSStringIsEqualToUTF8CString(a3, "webRequest"))
      {
        *(_QWORD *)buf = "webRequest";
        v91 = 11;
        if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
        {
          v74 = WebKit::toWebExtensionAPINamespace(this, a2, v73);
          v22 = v74;
          if (v74)
          {
            ++*(_DWORD *)(v74 + 48);
            v75 = (id)qword_1ECE710C8;
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
              __asm { BR              X10 }

            v76 = WebKit::WebExtensionAPINamespace::webRequest((WebKit::WebExtensionAPINamespace *)v22);
            v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v76 + 40));
            goto LABEL_97;
          }
          goto LABEL_105;
        }
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "test"))
    {
      *(_QWORD *)buf = "test";
      v91 = 5;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
      {
        v27 = WebKit::toWebExtensionAPINamespace(this, a2, v26);
        v22 = v27;
        if (v27)
        {
          ++*(_DWORD *)(v27 + 48);
          v28 = (id)qword_1ECE710C8;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            __asm { BR              X10 }

          v29 = WebKit::WebExtensionAPINamespace::test((WebKit::WebExtensionAPINamespace *)v22);
          v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v29 + 40));
          goto LABEL_97;
        }
      }
    }
  }
LABEL_105:
  Undefined = JSValueMakeUndefined(this);
LABEL_106:
  if (v18)
    CFRelease(v18[1]);
  if (*(_DWORD *)(v9 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
  else
    --*(_DWORD *)(v9 + 48);
  return Undefined;
}

void sub_196F35814(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPINamespace::extension(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPINamespace *v6;
  WebKit::JSWebExtensionAPINamespace *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPINamespace::extension(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F35F28(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPINamespace::i18n(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPINamespace *v6;
  WebKit::JSWebExtensionAPINamespace *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPINamespace::i18n(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F361B8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPINamespace::runtime(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPINamespace *v6;
  WebKit::JSWebExtensionAPINamespace *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPINamespace::runtime(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F36448(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPINotifications *WebKit::toWebExtensionAPINotifications(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPINotifications *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPINotifications::notificationsClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPINotifications::notificationsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPINotifications *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPINotifications::notificationsClass(WebKit::JSWebExtensionAPINotifications *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPINotifications::notificationsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPINotifications::notificationsClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPINotifications::staticValues(void)::values;
    v6.className = "Notifications";
    v6.staticFunctions = 0;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPINotifications::notificationsClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPINotifications::onClicked(WebKit::JSWebExtensionAPINotifications *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPINotifications *v6;
  WebKit::JSWebExtensionAPINotifications *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPINotifications(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPINotifications::onClicked(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F367C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPINotifications::onButtonClicked(WebKit::JSWebExtensionAPINotifications *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPINotifications *v6;
  WebKit::JSWebExtensionAPINotifications *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPINotifications(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPINotifications::onButtonClicked(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F36A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIPermissions *WebKit::toWebExtensionAPIPermissions(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIPermissions *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIPermissions::permissionsClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIPermissions::permissionsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIPermissions *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIPermissions::permissionsClass(WebKit::JSWebExtensionAPIPermissions *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIPermissions::permissionsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIPermissions::permissionsClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIPermissions::staticValues(void)::values;
    v6.className = "Permissions";
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIPermissions::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIPermissions::permissionsClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::getAll(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIPermissions *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v20;
  JSValueRef v21;
  WebKit::WebExtensionCallbackHandler *v23;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v26;
  JSObjectRef v27;
  uint8_t buf[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIPermissions(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_17;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.getAll()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  v16 = *a5;
  v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
  }
  else
  {
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v27 = resolve;
    *(_QWORD *)buf = this;
    v26 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v27, &v26, &v23);
    v18 = v23;
  }
  *(_QWORD *)buf = v18;
  WebKit::WebExtensionAPIPermissions::getAll(v12, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  if (Undefined)
    goto LABEL_17;
  v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F36F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::contains(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIPermissions *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIPermissions(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.contains()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("permissions");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.contains()"), CFSTR("permissions"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIPermissions::contains(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.contains()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.contains()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F37558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::request(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIPermissions *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIPermissions(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.request()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("permissions");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.request()"), CFSTR("permissions"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIPermissions::request(v12, v29, (WebKit::WebExtensionCallbackHandler **)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.request()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.request()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F37BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::remove(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIPermissions *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIPermissions(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.remove()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("permissions");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.remove()"), CFSTR("permissions"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIPermissions::remove(v12, v29, (WebKit::WebExtensionCallbackHandler **)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.remove()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("permissions.remove()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F38220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::onAdded(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIPermissions *v6;
  WebKit::JSWebExtensionAPIPermissions *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIPermissions(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIPermissions::onAdded(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F38524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::onRemoved(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIPermissions *v6;
  WebKit::JSWebExtensionAPIPermissions *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIPermissions(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIPermissions::onRemoved(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F387AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIPort *WebKit::toWebExtensionAPIPort(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIPort *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIPort::portClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIPort::portClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIPort *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIPort::portClass(WebKit::JSWebExtensionAPIPort *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIPort::portClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIPort::portClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIPort::staticValues(void)::values;
    v6.className = "Port";
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIPort::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIPort::portClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIPort::postMessage(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIPort *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSValue **v17;
  uint64_t v18;
  NSString *v19;
  void *v20;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v22;
  uint64_t v23;
  NSString *v24;
  NSString *v25;
  JSValueRef Undefined;
  const OpaqueJSValue *v28;
  JSValueRef v29;
  NSObject *v30;
  id v31;
  uint8_t v32[16];
  uint8_t buf[8];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIPort(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v28 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("port.postMessage()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_22;
  }
  if (JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5)
    || (v16 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v16)))
  {
    v28 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("port.postMessage()"), CFSTR("message"), CFSTR("an object is expected"), v15);
LABEL_22:
    *a6 = v28;
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_14;
  }
  WebKit::serializeJSObject(this, *a5, a6, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)v18;
  if (*a6)
  {
LABEL_24:
    v29 = JSValueMakeUndefined(this);
    goto LABEL_28;
  }
  if (!v18)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("port.postMessage()"), CFSTR("message"), CFSTR("a JSON serializable value is expected"), v19);
    goto LABEL_24;
  }
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
  v23 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v31 = 0;
    WebKit::WebExtensionAPIPort::postMessage(v12, *(uint64_t *)buf, v20, &v31);
    v25 = (NSString *)v31;
    if (v25)
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("port.postMessage()"), 0, v25, v24);
    Undefined = JSValueMakeUndefined(this);

    CFRelease(*(CFTypeRef *)(v23 + 8));
    goto LABEL_13;
  }
  v30 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v32 = 0;
    _os_log_error_impl(&dword_196BCC000, v30, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v32, 2u);
  }
  v29 = JSValueMakeUndefined(this);
LABEL_28:
  Undefined = v29;
LABEL_13:

LABEL_14:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F38D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  uint64_t v11;
  void *v12;

  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::disconnect(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIPort *v8;
  WebKit::JSWebExtensionAPIPort *v9;
  NSObject *v10;
  JSValueRef Undefined;

  v8 = WebKit::toWebExtensionAPIPort(this, a3, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*((_DWORD *)v8 + 12);
  v10 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded((unsigned int *)v9);
  Undefined = JSValueMakeUndefined(this);
  if (*((_DWORD *)v9 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v9 + 5) + 8))((uint64_t)v9 + 40);
  else
    --*((_DWORD *)v9 + 12);
  return Undefined;
}

void sub_196F39058(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::name(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIPort *v6;
  WebKit::JSWebExtensionAPIPort *v7;
  NSObject *v8;
  void *v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  WebKit::WebExtensionAPIPort::name(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = WebKit::toJSValueRef(this, v9, 1);

  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F392F8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::sender(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIPort *v6;
  WebKit::JSWebExtensionAPIPort *v7;
  NSObject *v8;
  objc_object *v9;
  const OpaqueJSContext *v10;
  JSValueRef Null;
  JSValueRef v12;

  v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  WebKit::WebExtensionAPIPort::sender(v7);
  v10 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
  if (v10)
    Null = WebKit::toJSValueRef(this, v10, v9);
  else
    Null = JSValueMakeNull(this);
  v12 = Null;

  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v12;
}

void sub_196F395B8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::error(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIPort *v6;
  WebKit::JSWebExtensionAPIPort *v7;
  NSObject *v8;
  objc_object *v9;
  const OpaqueJSContext *v10;
  JSValueRef Null;
  JSValueRef v12;

  v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  WTF::RetainPtr<NSMutableArray>::get((id *)v7 + 13);
  v10 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
  if (v10)
    Null = WebKit::toJSValueRef(this, v10, v9);
  else
    Null = JSValueMakeNull(this);
  v12 = Null;

  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v12;
}

void sub_196F3987C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::onDisconnect(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIPort *v6;
  WebKit::JSWebExtensionAPIPort *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPIPort::onDisconnect(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F39B1C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::onMessage(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIPort *v6;
  WebKit::JSWebExtensionAPIPort *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPIPort::onMessage(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F39DAC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIRuntime *WebKit::toWebExtensionAPIRuntime(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIRuntime *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIRuntime::runtimeClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIRuntime::runtimeClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIRuntime *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIRuntime::runtimeClass(WebKit::JSWebExtensionAPIRuntime *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIRuntime::runtimeClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIRuntime::runtimeClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "Runtime";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIRuntime::staticValues(void)::values;
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIRuntime::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIRuntime::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIRuntime::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIRuntime::getProperty;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIRuntime::runtimeClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIRuntime::getPropertyNames(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  OpaqueJSString *v17;
  OpaqueJSString *v18;
  OpaqueJSString *v19;
  OpaqueJSString *v20;
  OpaqueJSString *v21;
  OpaqueJSString *v22;
  OpaqueJSString *v23;
  OpaqueJSString *v24;
  OpaqueJSString *v25;
  OpaqueJSString *v26;
  OpaqueJSString *v27;
  OpaqueJSString *v28;
  const char *v29;
  uint64_t v30;

  v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v29);
    v10 = v29;
    if (v29)
    {
      v11 = *((_QWORD *)v29 + 3);
      if (v11
        && (v12 = *(_QWORD *)(v11 + 8)) != 0
        && (v13 = *(_QWORD *)(v12 + 24)) != 0
        && (v14 = *(_QWORD *)(v13 + 8)) != 0
        && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
      {
        v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      v16 = 0;
    }
    if (!*(_BYTE *)(v7 + 8))
    {
      v17 = JSStringCreateWithUTF8CString("getPlatformInfo");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17)
        JSStringRelease(v17);
      v18 = JSStringCreateWithUTF8CString("getBackgroundPage");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18)
        JSStringRelease(v18);
      v19 = JSStringCreateWithUTF8CString("setUninstallURL");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19)
        JSStringRelease(v19);
      v20 = JSStringCreateWithUTF8CString("openOptionsPage");
      JSPropertyNameAccumulatorAddName(a3, v20);
      if (v20)
        JSStringRelease(v20);
      v21 = JSStringCreateWithUTF8CString("reload");
      JSPropertyNameAccumulatorAddName(a3, v21);
      if (v21)
        JSStringRelease(v21);
      v29 = "sendNativeMessage";
      v30 = 18;
      if (WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v29, (WebKit::WebPage *)v16))
      {
        v22 = JSStringCreateWithUTF8CString("sendNativeMessage");
        JSPropertyNameAccumulatorAddName(a3, v22);
        if (v22)
          JSStringRelease(v22);
      }
      v29 = "connectNative";
      v30 = 14;
      if (WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v29, (WebKit::WebPage *)v16))
      {
        v23 = JSStringCreateWithUTF8CString("connectNative");
        JSPropertyNameAccumulatorAddName(a3, v23);
        if (v23)
          JSStringRelease(v23);
      }
      v24 = JSStringCreateWithUTF8CString("lastError");
      JSPropertyNameAccumulatorAddName(a3, v24);
      if (v24)
        JSStringRelease(v24);
      v25 = JSStringCreateWithUTF8CString("onConnectExternal");
      JSPropertyNameAccumulatorAddName(a3, v25);
      if (v25)
        JSStringRelease(v25);
      v26 = JSStringCreateWithUTF8CString("onMessageExternal");
      JSPropertyNameAccumulatorAddName(a3, v26);
      if (v26)
        JSStringRelease(v26);
      v27 = JSStringCreateWithUTF8CString("onStartup");
      JSPropertyNameAccumulatorAddName(a3, v27);
      if (v27)
        JSStringRelease(v27);
      v28 = JSStringCreateWithUTF8CString("onInstalled");
      JSPropertyNameAccumulatorAddName(a3, v28);
      if (v28)
        JSStringRelease(v28);
    }
    if (v16)
      CFRelease(v16[1]);
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
}

void sub_196F3A270(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  OpaqueJSString *v3;

  if (v3)
    JSStringRelease(v3);
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(exception_object);
}

void sub_196F3A32C()
{
  JUMPOUT(0x196F3A300);
}

unint64_t WebKit::JSWebExtensionAPIRuntime::hasProperty(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  int v17;
  unint64_t v18;
  WTF *v19;
  _BOOL4 IsEqualToUTF8CString;
  const char *v22;
  uint64_t v23;

  v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v22);
  v10 = v22;
  if (v22)
  {
    v11 = *((_QWORD *)v22 + 3);
    if (v11
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
    {
      v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    v16 = 0;
  }
  v17 = *(unsigned __int8 *)(v7 + 8);
  v18 = *(_BYTE *)(v7 + 8) == 0;
  if (!JSStringIsEqualToUTF8CString(a3, "getPlatformInfo")
    && !JSStringIsEqualToUTF8CString(a3, "getBackgroundPage")
    && !JSStringIsEqualToUTF8CString(a3, "setUninstallURL")
    && !JSStringIsEqualToUTF8CString(a3, "openOptionsPage")
    && !JSStringIsEqualToUTF8CString(a3, "reload"))
  {
    if (JSStringIsEqualToUTF8CString(a3, "sendNativeMessage"))
    {
      if (!v17)
      {
        v22 = "sendNativeMessage";
        v23 = 18;
        v19 = WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16);
LABEL_32:
        v18 = (unint64_t)v19;
        goto LABEL_33;
      }
    }
    else
    {
      if (!JSStringIsEqualToUTF8CString(a3, "connectNative"))
      {
        if (!JSStringIsEqualToUTF8CString(a3, "lastError")
          && !JSStringIsEqualToUTF8CString(a3, "onConnectExternal")
          && !JSStringIsEqualToUTF8CString(a3, "onMessageExternal")
          && !JSStringIsEqualToUTF8CString(a3, "onStartup"))
        {
          IsEqualToUTF8CString = JSStringIsEqualToUTF8CString(a3, "onInstalled");
          if (v17)
            v18 = 0;
          else
            v18 = IsEqualToUTF8CString;
        }
        goto LABEL_33;
      }
      if (!v17)
      {
        v22 = "connectNative";
        v23 = 14;
        v19 = WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16);
        goto LABEL_32;
      }
    }
    v18 = 0;
  }
LABEL_33:
  if (v16)
    CFRelease(v16[1]);
  if (*(_DWORD *)(v7 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
  else
    --*(_DWORD *)(v7 + 48);
  return v18;
}

void sub_196F3A598(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getProperty(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v8;
  uint64_t v9;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  CFTypeRef *v18;
  JSObjectRef FunctionWithCallback;
  JSObjectRef v20;
  const OpaqueJSValue *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  objc_object *v25;
  const OpaqueJSContext *v26;
  JSValueRef Null;
  const OpaqueJSValue *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  JSValueRef v32;
  const OpaqueJSValue *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  const OpaqueJSValue *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  const OpaqueJSValue *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  JSValueRef (__cdecl *v46)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *);
  uint8_t buf[8];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*(_DWORD *)(v8 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v11, buf);
  v12 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v13 = *(_QWORD *)(*(_QWORD *)buf + 24);
    if (v13
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD *)(v14 + 24)) != 0
      && (v16 = *(_QWORD *)(v15 + 8)) != 0
      && (v17 = *(_QWORD **)(*(_QWORD *)(v16 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v17 + 1368))(v17) & 1) == 0))
    {
      v18 = *(CFTypeRef **)(v17[2] + 8);
      if (v18)
      {
        CFRetain(*(v18 - 1));
        v18 -= 2;
      }
    }
    else
    {
      v18 = 0;
    }
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  else
  {
    v18 = 0;
  }
  if (*(_BYTE *)(v9 + 8))
    goto LABEL_14;
  if (!JSStringIsEqualToUTF8CString(a3, "lastError"))
  {
    if (JSStringIsEqualToUTF8CString(a3, "onConnectExternal"))
    {
      v29 = WebKit::toWebExtensionAPIRuntime(this, a2, v28);
      v23 = v29;
      if (!v29)
        goto LABEL_14;
      ++*(_DWORD *)(v29 + 48);
      v30 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }

      v31 = WebKit::WebExtensionAPIRuntime::onConnectExternal((WebKit::WebExtensionAPIRuntime *)v23);
      v32 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v31 + 40));
    }
    else if (JSStringIsEqualToUTF8CString(a3, "onMessageExternal"))
    {
      v34 = WebKit::toWebExtensionAPIRuntime(this, a2, v33);
      v23 = v34;
      if (!v34)
        goto LABEL_14;
      ++*(_DWORD *)(v34 + 48);
      v35 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }

      v36 = WebKit::WebExtensionAPIRuntime::onMessageExternal((WebKit::WebExtensionAPIRuntime *)v23);
      v32 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v36 + 40));
    }
    else if (JSStringIsEqualToUTF8CString(a3, "onStartup"))
    {
      v38 = WebKit::toWebExtensionAPIRuntime(this, a2, v37);
      v23 = v38;
      if (!v38)
        goto LABEL_14;
      ++*(_DWORD *)(v38 + 48);
      v39 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }

      v40 = WebKit::WebExtensionAPIRuntime::onStartup((WebKit::WebExtensionAPIRuntime *)v23);
      v32 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v40 + 40));
    }
    else
    {
      if (!JSStringIsEqualToUTF8CString(a3, "onInstalled"))
      {
        if (JSStringIsEqualToUTF8CString(a3, "getPlatformInfo"))
        {
          v46 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::getPlatformInfo;
        }
        else if (JSStringIsEqualToUTF8CString(a3, "getBackgroundPage"))
        {
          v46 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::getBackgroundPage;
        }
        else if (JSStringIsEqualToUTF8CString(a3, "setUninstallURL"))
        {
          v46 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::setUninstallURL;
        }
        else if (JSStringIsEqualToUTF8CString(a3, "openOptionsPage"))
        {
          v46 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::openOptionsPage;
        }
        else if (JSStringIsEqualToUTF8CString(a3, "reload"))
        {
          v46 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::reload;
        }
        else if (JSStringIsEqualToUTF8CString(a3, "sendNativeMessage")
               && (*(_QWORD *)buf = "sendNativeMessage",
                   v48 = 18,
                   (WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18) & 1) != 0))
        {
          v46 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::sendNativeMessage;
        }
        else
        {
          if (!JSStringIsEqualToUTF8CString(a3, "connectNative"))
            goto LABEL_14;
          *(_QWORD *)buf = "connectNative";
          v48 = 14;
          if (!WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))goto LABEL_14;
          v46 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::connectNative;
        }
        FunctionWithCallback = JSObjectMakeFunctionWithCallback(this, a3, v46);
LABEL_15:
        v20 = FunctionWithCallback;
        if (!v18)
          goto LABEL_44;
        goto LABEL_43;
      }
      v42 = WebKit::toWebExtensionAPIRuntime(this, a2, v41);
      v23 = v42;
      if (!v42)
      {
LABEL_14:
        FunctionWithCallback = JSValueMakeUndefined(this);
        goto LABEL_15;
      }
      ++*(_DWORD *)(v42 + 48);
      v43 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }

      v44 = WebKit::WebExtensionAPIRuntime::onInstalled((WebKit::WebExtensionAPIRuntime *)v23);
      v32 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v44 + 40));
    }
    v20 = v32;
    goto LABEL_41;
  }
  v22 = WebKit::toWebExtensionAPIRuntime(this, a2, v21);
  v23 = v22;
  if (!v22)
    goto LABEL_14;
  ++*(_DWORD *)(v22 + 48);
  v24 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  *(_BYTE *)(v23 + 52) = 1;
  WTF::RetainPtr<NSMutableArray>::get((id *)(v23 + 56));
  v26 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
  if (v26)
    Null = WebKit::toJSValueRef(this, v26, v25);
  else
    Null = JSValueMakeNull(this);
  v20 = Null;

LABEL_41:
  if (*(_DWORD *)(v23 + 48) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v23 + 40) + 8))(v23 + 40);
    if (!v18)
      goto LABEL_44;
    goto LABEL_43;
  }
  --*(_DWORD *)(v23 + 48);
  if (v18)
LABEL_43:
    CFRelease(v18[1]);
LABEL_44:
  if (*(_DWORD *)(v9 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
  else
    --*(_DWORD *)(v9 + 48);
  return v20;
}

void sub_196F3B0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;

  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getURL(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIRuntime *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  NSString *v16;
  void *v17;
  void *v18;
  NSString *v19;
  JSValueRef Undefined;
  NSString *v21;
  const OpaqueJSValue *v23;

  v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4)
  {
    if (JSValueIsString(this, *a5))
    {
      WebKit::toNSString(this, *a5, 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (v17)
      {
        WebKit::WebExtensionAPIRuntime::getURL(v12);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = (NSString *)0;
        Undefined = WebKit::toJSValueRef(this, v18, 0);

        if (v19)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.getURL()"), 0, v19, v21);
          Undefined = JSValueMakeUndefined(this);
        }

      }
      else
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.getURL()"), CFSTR("resourcePath"), CFSTR("a string is expected"), v16);
        Undefined = JSValueMakeUndefined(this);
      }

      goto LABEL_10;
    }
    v23 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.getURL()"), CFSTR("resourcePath"), CFSTR("a string is expected"), v15);
  }
  else
  {
    v23 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.getURL()"), 0, CFSTR("a required argument is missing"), v14);
  }
  *a6 = v23;
  Undefined = JSValueMakeUndefined(this);
LABEL_10:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F3B60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getManifest(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIRuntime *v8;
  WebKit::JSWebExtensionAPIRuntime *v9;
  NSObject *v10;
  objc_object *v11;
  const OpaqueJSContext *v12;
  JSValueRef Null;
  JSValueRef v14;

  v8 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*((_DWORD *)v8 + 12);
  v10 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  WTF::RetainPtr<NSMutableArray>::get((id *)(*((_QWORD *)v9 + 3) + 104));
  v12 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
  if (v12)
    Null = WebKit::toJSValueRef(this, v12, v11);
  else
    Null = JSValueMakeNull(this);
  v14 = Null;

  if (*((_DWORD *)v9 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v9 + 5) + 8))((uint64_t)v9 + 40);
  else
    --*((_DWORD *)v9 + 12);
  return v14;
}

void sub_196F3B92C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getFrameId(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIRuntime *v11;
  WebKit::JSWebExtensionAPIRuntime *v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  JSValueRef v16;
  void *v17;
  void *v18;
  NSString *v19;
  double FrameId;
  JSValueRef Undefined;
  JSValueRef v22;
  const OpaqueJSValue *v24;

  v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4)
  {
    if (JSValueIsObject(this, *a5))
    {
      v16 = *a5;
      if (v16
        && (v17 = (void *)MEMORY[0x1E0CBE108],
            objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this)),
            v18 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend(v17, "valueWithJSValueRef:inContext:", v16, v18),
            v16 = (JSValueRef)objc_claimAutoreleasedReturnValue(),
            v18,
            v16)
        && (-[OpaqueJSValue isObject](v16, "isObject") & 1) == 0)
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.getFrameId()"), CFSTR("target"), CFSTR("an object is expected"), v19);
        Undefined = JSValueMakeUndefined(this);
      }
      else
      {
        FrameId = WebKit::WebExtensionAPIRuntime::getFrameId(v12, (JSValue *)v16);
        Undefined = JSValueMakeNumber(this, FrameId);
      }
      v22 = Undefined;

      goto LABEL_10;
    }
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.getFrameId()"), CFSTR("target"), CFSTR("an object is expected"), v15);
  }
  else
  {
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.getFrameId()"), 0, CFSTR("a required argument is missing"), v14);
  }
  *a6 = v24;
  v22 = JSValueMakeUndefined(this);
LABEL_10:
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return v22;
}

void sub_196F3BD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::sendMessage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, unint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIRuntime *v9;
  NSObject *v10;
  NSString *v11;
  unint64_t v12;
  const OpaqueJSContext *v13;
  OpaqueJSValue *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  char *v16;
  NSString *v17;
  OpaqueJSValue *v18;
  JSValueRef v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  void *v25;
  char v26;
  OpaqueJSValue *v27;
  uint64_t v28;
  const OpaqueJSValue **v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  const OpaqueJSValue *v35;
  const OpaqueJSValue *v36;
  NSString *v37;
  OpaqueJSValue *v38;
  const OpaqueJSValue **v39;
  const OpaqueJSValue *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v46;
  NSString *v47;
  NSString *v48;
  WebKit::WebExtensionCallbackHandler *v49;
  void *v50;
  __CFString *v52;
  __CFString *v53;
  JSValueRef v54;
  NSObject *v55;
  NSString *v56;
  const OpaqueJSValue **exception;
  uint64_t v58;
  id v60;
  WebKit::WebExtensionCallbackHandler *v61;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v64;
  uint8_t v65[8];
  uint8_t buf[8];
  uint64_t v67;

  exception = a6;
  v67 = *MEMORY[0x1E0C80C00];
  v9 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v9)
    return JSValueMakeUndefined(this);
  v58 = (uint64_t)v9;
  ++*((_DWORD *)v9 + 12);
  v10 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != 4)
  {
    if (!a4)
    {
      *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendMessage()"), 0, CFSTR("a required argument is missing"), v11);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_72;
    }
    v12 = a4 - 1;
    if (a4 == 1)
    {
      v24 = 0;
      v25 = 0;
      v15 = 0;
      a4 = 1;
LABEL_39:
      v36 = a5[v24];
      if (v36)
      {
        if (JSValueIsNull(this, a5[v24])
          || JSValueIsUndefined(this, v36)
          || (v38 = JSValueToObject(this, v36, 0), JSObjectIsFunction(this, v38)))
        {
          v33 = 0;
          *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendMessage()"), CFSTR("message"), CFSTR("an object is expected"), v37);
          Undefined = JSValueMakeUndefined(this);
          v34 = 0;
          goto LABEL_68;
        }
        WebKit::serializeJSObject(this, v36, exception, v39);
        v32 = v24 + 1;
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_45;
      }
LABEL_44:
      v33 = 0;
      v32 = v24;
LABEL_45:
      v34 = 0;
      if (v24 < v12 && v32 < a4)
      {
        v40 = a5[v32];
        if (!v40)
          goto LABEL_52;
        v41 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v42 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "valueWithJSValueRef:inContext:", v40, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        LOBYTE(v42) = objc_msgSend(v43, "_isDictionary");
        if ((v42 & 1) != 0 || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40))
        {
          WebKit::toNSDictionary(this, v40, 0, 0);
          v34 = objc_claimAutoreleasedReturnValue();
          ++v32;
        }
        else
        {
LABEL_52:
          v34 = 0;
        }
      }
LABEL_53:
      if (!*exception)
      {
        if (!v33)
        {
          v33 = 0;
          *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendMessage()"), CFSTR("message"), CFSTR("a JSON serializable value is expected"), v11);
          v54 = JSValueMakeUndefined(this);
LABEL_88:
          Undefined = v54;
          goto LABEL_68;
        }
        if (v32 >= a4)
        {
          if (v15)
          {
            Undefined = 0;
          }
          else
          {
            reject = 0;
            resolve = 0;
            Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
            *(_QWORD *)buf = this;
            v64 = reject;
            *(_QWORD *)v65 = resolve;
            WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v65, &v64, &v61);
            v15 = v61;
          }
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v46, buf);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)v65 = v15;
            v60 = 0;
            WebKit::WebExtensionAPIRuntime::sendMessage(v58, *(WebKit::WebFrame **)buf, v25, v33, v34, (uint64_t *)v65, &v60);
            v48 = (NSString *)v60;
            v49 = *(WebKit::WebExtensionCallbackHandler **)v65;
            *(_QWORD *)v65 = 0;
            if (v49)
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v49);
            if (v48)
            {
              *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendMessage()"), 0, v48, v47);
            }
            else if (Undefined)
            {
LABEL_65:

              if (*(_QWORD *)buf)
                CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
              v15 = 0;
              goto LABEL_68;
            }
            Undefined = JSValueMakeUndefined(this);
            goto LABEL_65;
          }
          v55 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v65 = 0;
            _os_log_error_impl(&dword_196BCC000, v55, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v65, 2u);
            if (Undefined)
            {
LABEL_86:
              Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("runtime.sendMessage()"), 0, CFSTR("an unknown error occurred"), v56);
              if (Undefined)
              {
LABEL_68:
                if (v15)
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
                v50 = (void *)v34;
                goto LABEL_71;
              }
            }
          }
          else if (Undefined)
          {
            goto LABEL_86;
          }
          v54 = JSValueMakeUndefined(this);
          goto LABEL_88;
        }
        *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendMessage()"), 0, CFSTR("an unknown argument was provided"), v11);
      }
      v54 = JSValueMakeUndefined(this);
      goto LABEL_88;
    }
    v13 = a5[v12];
    if (v13
      && (JSValueIsObject(this, a5[v12]) && (v14 = JSValueToObject(this, v13, 0), JSObjectIsFunction(this, v14))
       || JSValueIsNull(this, v13)
       || JSValueIsUndefined(this, v13)))
    {
      WebKit::toJSCallbackHandler((uint64_t)this, v13, (const OpaqueJSValue *)(v58 + 40), buf);
      v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
      v16 = (char *)(a4 - 2);
      --a4;
      v12 = (unint64_t)v16;
      if (!v16)
        goto LABEL_37;
    }
    else
    {
      v15 = 0;
    }
    v35 = *a5;
    if (*a5 && (JSValueIsString(this, *a5) || JSValueIsNull(this, v35) || JSValueIsUndefined(this, v35)))
    {
      WebKit::toNSString(this, v35, 2);
      v24 = 1;
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_38;
    }
LABEL_37:
    v25 = 0;
    v24 = 0;
LABEL_38:
    if (v24 >= a4)
      goto LABEL_44;
    goto LABEL_39;
  }
  if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
  {
    if (JSValueIsNull(this, a5[1])
      || JSValueIsUndefined(this, a5[1])
      || (v18 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v18)))
    {
      v52 = CFSTR("an object is expected");
      v53 = CFSTR("message");
    }
    else
    {
      v19 = a5[2];
      if (v19)
      {
        v20 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "valueWithJSValueRef:inContext:", v19, v21);
        v22 = objc_claimAutoreleasedReturnValue();

        v23 = (void *)v22;
      }
      else
      {
        v23 = 0;
      }
      v26 = objc_msgSend(v23, "_isDictionary", exception);

      if ((v26 & 1) != 0 || JSValueIsNull(this, a5[2]) || JSValueIsUndefined(this, a5[2]))
      {
        if (JSValueIsObject(this, a5[3]) && (v27 = JSValueToObject(this, a5[3], 0), JSObjectIsFunction(this, v27))
          || JSValueIsNull(this, a5[3])
          || JSValueIsUndefined(this, a5[3]))
        {
          WebKit::toNSString(this, *a5, 2);
          v28 = objc_claimAutoreleasedReturnValue();
          WebKit::serializeJSObject(this, a5[1], exception, v29);
          v30 = objc_claimAutoreleasedReturnValue();
          WebKit::toNSDictionary(this, a5[2], 0, 0);
          v31 = objc_claimAutoreleasedReturnValue();
          WebKit::toJSCallbackHandler((uint64_t)this, a5[3], (const OpaqueJSValue *)(v58 + 40), buf);
          v32 = 4;
          v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
          a4 = 4;
          v25 = (void *)v28;
          v33 = (void *)v30;
          v34 = v31;
          goto LABEL_53;
        }
        v52 = CFSTR("a function is expected");
        v53 = CFSTR("callback");
      }
      else
      {
        v52 = CFSTR("an object is expected");
        v53 = CFSTR("options");
      }
    }
  }
  else
  {
    v52 = CFSTR("a string is expected");
    v53 = CFSTR("extensionID");
  }
  v50 = 0;
  *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendMessage()"), &v53->isa, &v52->isa, v17);
  Undefined = JSValueMakeUndefined(this);
  v33 = 0;
  v25 = 0;
LABEL_71:

LABEL_72:
  if (*(_DWORD *)(v58 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v58 + 40) + 8))(v58 + 40);
  else
    --*(_DWORD *)(v58 + 48);
  return Undefined;
}

void sub_196F3C918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  WebKit::WebExtensionCallbackHandler *v21;
  void *v22;

  if (a19)
    CFRelease(*(CFTypeRef *)(a19 + 8));
  if (v21)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v21);

  if (*(_DWORD *)(a10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(a10 + 40) + 8))(a10 + 40);
  else
    --*(_DWORD *)(a10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::connect(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIRuntime *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  JSValueRef v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  JSValueRef v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  JSValueRef v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  char v35;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v37;
  NSString *v38;
  void *v39;
  NSString *v40;
  JSValueRef Undefined;
  uint64_t v42;
  NSObject *v44;
  __CFString *v45;
  __CFString *v46;
  id v47;
  uint8_t v48[8];
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 != (OpaqueJSValue *)2)
    {
      v25 = 0;
      v26 = 0;
      goto LABEL_30;
    }
    if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      v15 = a5[1];
      if (v15)
      {
        v16 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "valueWithJSValueRef:inContext:", v15, v17);
        v18 = objc_claimAutoreleasedReturnValue();

        v19 = (void *)v18;
      }
      else
      {
        v19 = 0;
      }
      v33 = objc_msgSend(v19, "_isDictionary");

      if ((v33 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        WebKit::toNSString(this, *a5, 2);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::toNSDictionary(this, a5[1], 0, 0);
        v34 = objc_claimAutoreleasedReturnValue();
LABEL_29:
        v26 = (void *)v34;
        goto LABEL_30;
      }
LABEL_57:
      v45 = CFSTR("an object is expected");
      v46 = CFSTR("options");
LABEL_59:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.connect()"), &v46->isa, &v45->isa, v14);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_43;
    }
    goto LABEL_58;
  }
  v20 = *a5;
  if (*a5)
  {
    v21 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "valueWithJSValueRef:inContext:", v20, v22);
    v23 = objc_claimAutoreleasedReturnValue();

    v24 = (void *)v23;
  }
  else
  {
    v24 = 0;
  }
  v27 = objc_msgSend(v24, "_isDictionary");

  if ((v27 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
  {
    v28 = *a5;
    if (*a5)
    {
      v29 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "valueWithJSValueRef:inContext:", v28, v30);
      v31 = objc_claimAutoreleasedReturnValue();

      v32 = (void *)v31;
    }
    else
    {
      v32 = 0;
    }
    v35 = objc_msgSend(v32, "_isDictionary");

    if ((v35 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v34 = objc_claimAutoreleasedReturnValue();
      v25 = 0;
      goto LABEL_29;
    }
    goto LABEL_57;
  }
  if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
  {
LABEL_58:
    v45 = CFSTR("a string is expected");
    v46 = CFSTR("extensionID");
    goto LABEL_59;
  }
  v26 = 0;
  WebKit::toNSString(this, *a5, 2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_30:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v37, buf);
  if (!*(_QWORD *)buf)
  {
    v44 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v48 = 0;
      _os_log_error_impl(&dword_196BCC000, v44, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v48, 2u);
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_42;
  }
  v47 = 0;
  WebKit::WebExtensionAPIRuntime::connect(v12, *(WebKit::WebFrame **)buf, this, v25, v26, &v47, (uint64_t *)v48);
  v38 = (NSString *)v47;
  if (*(_QWORD *)v48)
    v39 = (void *)(*(_QWORD *)v48 + 40);
  else
    v39 = 0;
  Undefined = WebKit::JSWebExtensionWrapper::wrap(this, v39);
  v42 = *(_QWORD *)v48;
  *(_QWORD *)v48 = 0;
  if (v42)
  {
    if (*(_DWORD *)(v42 + 48) == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v42 + 40) + 8))(v42 + 40);
      if (!v38)
        goto LABEL_40;
      goto LABEL_56;
    }
    --*(_DWORD *)(v42 + 48);
  }
  if (!v38)
    goto LABEL_40;
LABEL_56:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.connect()"), 0, v38, v40);
  Undefined = JSValueMakeUndefined(this);
LABEL_40:

  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
LABEL_42:

LABEL_43:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F3D134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v16;
  void *v17;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::runtimeIdentifier(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIRuntime *v6;
  WebKit::JSWebExtensionAPIRuntime *v7;
  NSObject *v8;
  void *v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  WebKit::WebExtensionAPIRuntime::runtimeIdentifier(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = WebKit::toJSValueRef(this, v9, 1);

  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F3D45C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::onConnect(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIRuntime *v6;
  WebKit::JSWebExtensionAPIRuntime *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPIRuntime::onConnect(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F3D6F8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::onMessage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIRuntime *v6;
  WebKit::JSWebExtensionAPIRuntime *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPIRuntime::onMessage(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F3D988(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getPlatformInfo(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  JSObjectRef DeferredPromise;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v21;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v24;
  JSObjectRef v25;
  uint8_t buf[8];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_10;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.getPlatformInfo()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_15;
    }
  }
  WebKit::toJSCallbackHandler((uint64_t)this, *a5, (const OpaqueJSValue *)(v12 + 40), buf);
  v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    DeferredPromise = 0;
  }
  else
  {
LABEL_10:
    reject = 0;
    resolve = 0;
    DeferredPromise = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v25 = resolve;
    *(_QWORD *)buf = this;
    v24 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v25, &v24, &v21);
    v16 = v21;
  }
  *(_QWORD *)buf = v16;
  WebKit::WebExtensionAPIRuntime::getPlatformInfo(v12, (WebKit::WebExtensionCallbackHandler **)buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v18)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
  if (DeferredPromise)
    goto LABEL_16;
  Undefined = JSValueMakeUndefined(this);
LABEL_15:
  DeferredPromise = Undefined;
LABEL_16:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return DeferredPromise;
}

void sub_196F3DD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getBackgroundPage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  JSObjectRef DeferredPromise;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v21;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v24;
  JSObjectRef v25;
  uint8_t buf[8];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_10;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.getBackgroundPage()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_15;
    }
  }
  WebKit::toJSCallbackHandler((uint64_t)this, *a5, (const OpaqueJSValue *)(v12 + 40), buf);
  v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    DeferredPromise = 0;
  }
  else
  {
LABEL_10:
    reject = 0;
    resolve = 0;
    DeferredPromise = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v25 = resolve;
    *(_QWORD *)buf = this;
    v24 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v25, &v24, &v21);
    v16 = v21;
  }
  *(_QWORD *)buf = v16;
  WebKit::WebExtensionAPIRuntime::getBackgroundPage(v12, (WebKit::WebExtensionCallbackHandler **)buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v18)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
  if (DeferredPromise)
    goto LABEL_16;
  Undefined = JSValueMakeUndefined(this);
LABEL_15:
  DeferredPromise = Undefined;
LABEL_16:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return DeferredPromise;
}

void sub_196F3E180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::setUninstallURL(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  void *v16;
  JSValueRef v17;
  JSValueRef Undefined;
  NSString *v19;
  void *v20;
  void *v21;
  OpaqueJSValue *v22;
  void *v23;
  void *v24;
  NSString *v25;
  id v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  void *v29;
  __CFString *v31;
  __CFString *v32;
  WTF::StringImpl *v33;
  WebKit::WebExtensionCallbackHandler *v34;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v37;
  JSObjectRef v38;
  uint8_t buf[8];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsString(this, *a5))
    {
      v20 = (void *)MEMORY[0x1E0C99E98];
      WebKit::toNSString(this, *a5, 2);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "URLWithString:", v21);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v15 = 0;
      goto LABEL_18;
    }
    goto LABEL_41;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (!a4)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.setUninstallURL()"), 0, CFSTR("a required argument is missing"), v14);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_34;
    }
    v15 = 0;
    goto LABEL_7;
  }
  if (!JSValueIsString(this, *a5))
  {
LABEL_41:
    v31 = CFSTR("a string is expected");
    v32 = CFSTR("url");
LABEL_42:
    v29 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.setUninstallURL()"), &v32->isa, &v31->isa, v19);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  if (!JSValueIsObject(this, a5[1]) || (v22 = JSValueToObject(this, a5[1], 0), !JSObjectIsFunction(this, v22)))
  {
    if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
    {
      v31 = CFSTR("a function is expected");
      v32 = CFSTR("callback");
      goto LABEL_42;
    }
  }
  v23 = (void *)MEMORY[0x1E0C99E98];
  WebKit::toNSString(this, *a5, 2);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "URLWithString:", v24);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  WebKit::toJSCallbackHandler((uint64_t)this, a5[1], (const OpaqueJSValue *)(v12 + 40), buf);
  v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
LABEL_18:
  if (!v16)
  {
LABEL_7:
    v16 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.setUninstallURL()"), CFSTR("url"), CFSTR("a string is expected"), v14);
    v17 = JSValueMakeUndefined(this);
    goto LABEL_8;
  }
  if (objc_msgSend(v16, "isFileURL"))
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.setUninstallURL()"), CFSTR("url"), CFSTR("it cannot be a local file URL"), v25);
    v17 = JSValueMakeUndefined(this);
LABEL_8:
    Undefined = v17;
    if (v15)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
    goto LABEL_32;
  }
  if (v15)
  {
    Undefined = 0;
  }
  else
  {
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v38 = resolve;
    *(_QWORD *)buf = this;
    v37 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v38, &v37, &v34);
    v15 = v34;
  }
  MEMORY[0x19AEABB18](&v33, v16);
  v26 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v15);
  if (v15)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
  v28 = v33;
  v33 = 0;
  if (!v28)
  {
LABEL_28:
    if (!Undefined)
      goto LABEL_31;
    goto LABEL_32;
  }
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
    goto LABEL_28;
  }
  WTF::StringImpl::destroy(v28, v27);
  if (!Undefined)
LABEL_31:
    Undefined = JSValueMakeUndefined(this);
LABEL_32:
  v29 = v16;
LABEL_33:

LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F3E79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  uint64_t v16;

  if (*(_DWORD *)(v16 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 40) + 8))(v16 + 40);
  else
    --*(_DWORD *)(v16 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::openOptionsPage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  JSObjectRef DeferredPromise;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebExtensionCallbackHandler *v21;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v24;
  JSObjectRef v25;
  uint8_t buf[8];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_10;
  if (!JSValueIsObject(this, *a5) || (v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.openOptionsPage()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_15;
    }
  }
  WebKit::toJSCallbackHandler((uint64_t)this, *a5, (const OpaqueJSValue *)(v12 + 40), buf);
  v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    DeferredPromise = 0;
  }
  else
  {
LABEL_10:
    reject = 0;
    resolve = 0;
    DeferredPromise = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v25 = resolve;
    *(_QWORD *)buf = this;
    v24 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v25, &v24, &v21);
    v16 = v21;
  }
  *(_QWORD *)buf = v16;
  WebKit::WebExtensionAPIRuntime::openOptionsPage(v12, buf);
  v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v18)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
  if (DeferredPromise)
    goto LABEL_16;
  Undefined = JSValueMakeUndefined(this);
LABEL_15:
  DeferredPromise = Undefined;
LABEL_16:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return DeferredPromise;
}

void sub_196F3EC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::reload(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  JSValueRef Undefined;

  v8 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*(_DWORD *)(v8 + 48);
  v10 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  WebKit::WebExtensionAPIRuntime::reload((WebKit::WebExtensionAPIRuntime *)v9);
  Undefined = JSValueMakeUndefined(this);
  if (*(_DWORD *)(v9 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
  else
    --*(_DWORD *)(v9 + 48);
  return Undefined;
}

void sub_196F3EEF8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::sendNativeMessage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  unint64_t v15;
  unint64_t v16;
  OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  uint64_t v19;
  NSString *v20;
  OpaqueJSValue *v21;
  OpaqueJSValue *v22;
  uint64_t v23;
  const OpaqueJSValue **v24;
  uint64_t v25;
  void *v26;
  void *v27;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v30;
  WebKit::WebExtensionCallbackHandler *v31;
  void *v32;
  JSValueRef v34;
  const OpaqueJSValue *v35;
  NSString *v36;
  OpaqueJSValue *v37;
  const OpaqueJSValue **v38;
  const OpaqueJSValue *v39;
  __CFString *v40;
  __CFString *v41;
  NSObject *v42;
  NSString *v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v47;
  uint8_t v48[8];
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)3)
  {
    if (!a4)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendNativeMessage()"), 0, CFSTR("a required argument is missing"), v14);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_41;
    }
    v15 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      v27 = 0;
      v26 = 0;
      v18 = 0;
      if (!*a6)
      {
LABEL_46:
        v27 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendNativeMessage()"), CFSTR("message"), CFSTR("a JSON serializable value is expected"), v14);
        v34 = JSValueMakeUndefined(this);
LABEL_47:
        Undefined = v34;
LABEL_37:
        if (v18)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        v32 = v27;
        goto LABEL_40;
      }
LABEL_71:
      v34 = JSValueMakeUndefined(this);
      goto LABEL_47;
    }
    if (a4 != (OpaqueJSValue *)1)
    {
      v16 = (unint64_t)a5[v15];
      if (v16)
      {
        if (JSValueIsObject(this, a5[v15])
          && (v17 = JSValueToObject(this, (JSValueRef)v16, 0), JSObjectIsFunction(this, v17))
          || JSValueIsNull(this, (JSValueRef)v16)
          || JSValueIsUndefined(this, (JSValueRef)v16))
        {
          WebKit::toJSCallbackHandler((uint64_t)this, (const OpaqueJSContext *)v16, (const OpaqueJSValue *)(v12 + 40), buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v19 = (uint64_t)a4 - 2;
          v16 = 1;
LABEL_53:
          v35 = a5[v19];
          if (v35)
          {
            if (JSValueIsNull(this, a5[v19])
              || JSValueIsUndefined(this, v35)
              || (v37 = JSValueToObject(this, v35, 0), JSObjectIsFunction(this, v37)))
            {
              v27 = 0;
              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendNativeMessage()"), CFSTR("message"), CFSTR("an object is expected"), v36);
              Undefined = JSValueMakeUndefined(this);
              v26 = 0;
              goto LABEL_37;
            }
            WebKit::serializeJSObject(this, v35, a6, v38);
            --v19;
            v27 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v27 = 0;
          }
          v26 = 0;
          if (v16 < v15 && (v19 & 0x8000000000000000) == 0)
          {
            v39 = a5[v19];
            if (v39 && (JSValueIsString(this, v39) || JSValueIsNull(this, v39) || JSValueIsUndefined(this, v39)))
            {
              WebKit::toNSString(this, v39, 2);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              --v19;
            }
            else
            {
              v26 = 0;
            }
          }
LABEL_24:
          if (!*a6)
          {
            if (v27)
            {
              if (v19 < 0)
              {
                if (v18)
                {
                  Undefined = 0;
                }
                else
                {
                  reject = 0;
                  resolve = 0;
                  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
                  *(_QWORD *)buf = this;
                  v47 = reject;
                  *(_QWORD *)v48 = resolve;
                  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v48, &v47, &v44);
                  v18 = v44;
                }
                GlobalContext = JSContextGetGlobalContext(this);
                WebKit::WebFrame::frameForContext(GlobalContext, v30, buf);
                if (*(_QWORD *)buf)
                {
                  *(_QWORD *)v48 = v18;
                  WebKit::WebExtensionAPIRuntime::sendNativeMessage(v12, *(uint64_t *)buf, v26, v27, (uint64_t *)v48);
                  v31 = *(WebKit::WebExtensionCallbackHandler **)v48;
                  *(_QWORD *)v48 = 0;
                  if (v31)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v31);
                  v18 = 0;
                  if (Undefined)
                    goto LABEL_35;
                  goto LABEL_34;
                }
                v42 = qword_1ECE710C8;
                if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v48 = 0;
                  _os_log_error_impl(&dword_196BCC000, v42, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v48, 2u);
                  if (!Undefined)
                    goto LABEL_34;
                }
                else if (!Undefined)
                {
                  goto LABEL_34;
                }
                Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("runtime.sendNativeMessage()"), 0, CFSTR("an unknown error occurred"), v43);
                if (Undefined)
                {
LABEL_35:
                  if (*(_QWORD *)buf)
                    CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
                  goto LABEL_37;
                }
LABEL_34:
                Undefined = JSValueMakeUndefined(this);
                goto LABEL_35;
              }
              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendNativeMessage()"), 0, CFSTR("an unknown argument was provided"), v14);
              v34 = JSValueMakeUndefined(this);
              goto LABEL_47;
            }
            goto LABEL_46;
          }
          goto LABEL_71;
        }
        v18 = 0;
        v16 = 0;
      }
      else
      {
        v18 = 0;
      }
      v19 = (uint64_t)a4 - 1;
      goto LABEL_53;
    }
    v18 = 0;
    v19 = 0;
    v16 = 0;
    goto LABEL_53;
  }
  if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
  {
    if (JSValueIsNull(this, a5[1])
      || JSValueIsUndefined(this, a5[1])
      || (v21 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v21)))
    {
      v40 = CFSTR("an object is expected");
      v41 = CFSTR("message");
    }
    else
    {
      if (JSValueIsObject(this, a5[2]) && (v22 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v22))
        || JSValueIsNull(this, a5[2])
        || JSValueIsUndefined(this, a5[2]))
      {
        WebKit::toNSString(this, *a5, 2);
        v23 = objc_claimAutoreleasedReturnValue();
        WebKit::serializeJSObject(this, a5[1], a6, v24);
        v25 = objc_claimAutoreleasedReturnValue();
        WebKit::toJSCallbackHandler((uint64_t)this, a5[2], (const OpaqueJSValue *)(v12 + 40), buf);
        v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
        v19 = -1;
        v26 = (void *)v23;
        v27 = (void *)v25;
        goto LABEL_24;
      }
      v40 = CFSTR("a function is expected");
      v41 = CFSTR("callback");
    }
  }
  else
  {
    v40 = CFSTR("a string is expected");
    v41 = CFSTR("applicationID");
  }
  v32 = 0;
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.sendNativeMessage()"), &v41->isa, &v40->isa, v20);
  Undefined = JSValueMakeUndefined(this);
  v26 = 0;
LABEL_40:

LABEL_41:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F3F820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::connectNative(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v17;
  WebKit::WebFrame *v18;
  void *v19;
  JSValueRef Undefined;
  uint64_t v21;
  NSObject *v23;
  uint8_t v24[8];
  uint8_t buf[8];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    v15 = 0;
    goto LABEL_9;
  }
  if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
  {
    WebKit::toNSString(this, *a5, 2);
    v15 = (NSString *)objc_claimAutoreleasedReturnValue();
LABEL_9:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v17, buf);
    v18 = *(WebKit::WebFrame **)buf;
    if (*(_QWORD *)buf)
    {
      WebKit::WebExtensionAPIRuntime::connectNative((WebKit::WebExtensionAPIRuntime *)v12, *(WebKit::WebFrame **)buf, this, v15, (uint64_t *)v24);
      if (*(_QWORD *)v24)
        v19 = (void *)(*(_QWORD *)v24 + 40);
      else
        v19 = 0;
      Undefined = WebKit::JSWebExtensionWrapper::wrap(this, v19);
      v21 = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (v21)
      {
        if (*(_DWORD *)(v21 + 48) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)(v21 + 40) + 8))(v21 + 40);
        else
          --*(_DWORD *)(v21 + 48);
      }
      CFRelease(*((CFTypeRef *)v18 + 1));
    }
    else
    {
      v23 = qword_1ECE710C8;
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v24 = 0;
        _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v24, 2u);
      }
      Undefined = JSValueMakeUndefined(this);
    }

    goto LABEL_19;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("runtime.connectNative()"), CFSTR("applicationID"), CFSTR("a string is expected"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_19:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F3FCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v12;

  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIScripting *WebKit::toWebExtensionAPIScripting(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIScripting *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIScripting::scriptingClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIScripting::scriptingClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIScripting *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIScripting::scriptingClass(WebKit::JSWebExtensionAPIScripting *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  JSClassDefinition v5;

  result = (JSClassRef)WebKit::JSWebExtensionAPIScripting::scriptingClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIScripting::scriptingClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v5.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E0CC1100] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "Scripting";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIScripting::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIScripting::scriptingClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIScripting::executeScript(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIScripting *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.executeScript()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.executeScript()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIScripting::executeScript(v12, v29, (char **)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.executeScript()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.executeScript()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4040C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::insertCSS(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIScripting *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.insertCSS()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.insertCSS()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIScripting::insertCSS(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.insertCSS()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.insertCSS()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F40A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::removeCSS(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIScripting *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.removeCSS()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.removeCSS()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIScripting::removeCSS(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.removeCSS()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.removeCSS()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F410D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::registerContentScripts(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIScripting *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  JSValueRef Undefined;
  void *v18;
  OpaqueJSValue *v19;
  objc_class *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  NSString *v24;
  NSString *v25;
  WebKit::WebExtensionCallbackHandler *v26;
  JSValueRef v28;
  id v29;
  WebKit::WebExtensionCallbackHandler *v30;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v33;
  JSObjectRef v34;
  uint8_t buf[8];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_26;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    WebKit::toNSObject(this, *a5, 0, v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v18)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v16 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.registerContentScripts()"), 0, CFSTR("a required argument is missing"), v15);
    v28 = JSValueMakeUndefined(this);
    goto LABEL_34;
  }
  if (JSValueIsObject(this, a5[1]) && (v19 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v19))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSObject(this, *a5, 0, v20);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = a5[1];
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v18)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.registerContentScripts()"), CFSTR("details"), CFSTR("an object is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      if (v16)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
      goto LABEL_26;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_20;
    }
LABEL_19:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v34 = resolve;
    *(_QWORD *)buf = this;
    v33 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v34, &v33, &v30);
    v16 = v30;
LABEL_20:
    *(_QWORD *)buf = v16;
    v29 = 0;
    WebKit::WebExtensionAPIScripting::registerContentScripts(v12, v18, (uint64_t *)buf, &v29);
    v25 = (NSString *)v29;
    v26 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v26)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v26);
    if (v25)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.registerContentScripts()"), 0, v25, v24);
    }
    else if (Undefined)
    {
LABEL_25:

      goto LABEL_26;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_25;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.registerContentScripts()"), CFSTR("callback"), CFSTR("a function is expected"), v21);
  v28 = JSValueMakeUndefined(this);
LABEL_34:
  Undefined = v28;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::getRegisteredContentScripts(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIScripting *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("filter");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.getRegisteredContentScripts()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.getRegisteredContentScripts()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F41D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::unregisterContentScripts(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIScripting *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("filter");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIScripting::unregisterContentScripts(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.unregisterContentScripts()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.unregisterContentScripts()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F42400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::updateContentScripts(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIScripting *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  JSValueRef Undefined;
  void *v18;
  OpaqueJSValue *v19;
  objc_class *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  NSString *v24;
  NSString *v25;
  WebKit::WebExtensionCallbackHandler *v26;
  JSValueRef v28;
  id v29;
  WebKit::WebExtensionCallbackHandler *v30;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v33;
  JSObjectRef v34;
  uint8_t buf[8];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_26;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    WebKit::toNSObject(this, *a5, 0, v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v18)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v16 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.updateContentScripts()"), 0, CFSTR("a required argument is missing"), v15);
    v28 = JSValueMakeUndefined(this);
    goto LABEL_34;
  }
  if (JSValueIsObject(this, a5[1]) && (v19 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v19))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSObject(this, *a5, 0, v20);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = a5[1];
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v18)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.updateContentScripts()"), CFSTR("details"), CFSTR("an object is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      if (v16)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
      goto LABEL_26;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_20;
    }
LABEL_19:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v34 = resolve;
    *(_QWORD *)buf = this;
    v33 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v34, &v33, &v30);
    v16 = v30;
LABEL_20:
    *(_QWORD *)buf = v16;
    v29 = 0;
    WebKit::WebExtensionAPIScripting::updateContentScripts(v12, v18, (uint64_t *)buf, &v29);
    v25 = (NSString *)v29;
    v26 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v26)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v26);
    if (v25)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.updateContentScripts()"), 0, v25, v24);
    }
    else if (Undefined)
    {
LABEL_25:

      goto LABEL_26;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_25;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("scripting.updateContentScripts()"), CFSTR("callback"), CFSTR("a function is expected"), v21);
  v28 = JSValueMakeUndefined(this);
LABEL_34:
  Undefined = v28;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F42954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIStorage *WebKit::toWebExtensionAPIStorage(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIStorage *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIStorage::storageClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIStorage::storageClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIStorage *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIStorage::storageClass(WebKit::JSWebExtensionAPIStorage *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIStorage::storageClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIStorage::storageClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "Storage";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIStorage::staticValues(void)::values;
    v6.staticFunctions = 0;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIStorage::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIStorage::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIStorage::getProperty;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIStorage::storageClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIStorage::getPropertyNames(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  OpaqueJSString *v17;
  _QWORD v18[2];

  v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, v18);
    v10 = v18[0];
    if (v18[0])
    {
      v11 = *(_QWORD *)(v18[0] + 24);
      if (v11
        && (v12 = *(_QWORD *)(v11 + 8)) != 0
        && (v13 = *(_QWORD *)(v12 + 24)) != 0
        && (v14 = *(_QWORD *)(v13 + 8)) != 0
        && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
      {
        v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        v16 = 0;
      }
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
    else
    {
      v16 = 0;
    }
    v18[0] = "session";
    v18[1] = 8;
    if (WebKit::WebExtensionAPIStorage::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)v18, (WebKit::WebPage *)v16))
    {
      v17 = JSStringCreateWithUTF8CString("session");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17)
        JSStringRelease(v17);
    }
    if (v16)
      CFRelease(v16[1]);
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
}

void sub_196F42C94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

BOOL WebKit::JSWebExtensionAPIStorage::hasProperty(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  _BOOL8 isPropertyAllowed;
  _QWORD v19[2];

  v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, v19);
  v10 = v19[0];
  if (v19[0])
  {
    v11 = *(_QWORD *)(v19[0] + 24);
    if (v11
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
    {
      v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      v16 = 0;
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  else
  {
    v16 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "session"))
  {
    v19[0] = "session";
    v19[1] = 8;
    isPropertyAllowed = WebKit::WebExtensionAPIStorage::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)v19, (WebKit::WebPage *)v16);
  }
  else
  {
    isPropertyAllowed = 0;
  }
  if (v16)
    CFRelease(v16[1]);
  if (*(_DWORD *)(v7 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
  else
    --*(_DWORD *)(v7 + 48);
  return isPropertyAllowed;
}

void sub_196F42E40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorage::getProperty(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v8;
  uint64_t v9;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  CFTypeRef *v18;
  const OpaqueJSValue *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  JSValueRef Undefined;
  uint8_t buf[8];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*(_DWORD *)(v8 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v11, buf);
  v12 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v13 = *(_QWORD *)(*(_QWORD *)buf + 24);
    if (v13
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD *)(v14 + 24)) != 0
      && (v16 = *(_QWORD *)(v15 + 8)) != 0
      && (v17 = *(_QWORD **)(*(_QWORD *)(v16 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v17 + 1368))(v17) & 1) == 0))
    {
      v18 = *(CFTypeRef **)(v17[2] + 8);
      if (v18)
      {
        CFRetain(*(v18 - 1));
        v18 -= 2;
      }
    }
    else
    {
      v18 = 0;
    }
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  else
  {
    v18 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "session"))
  {
    *(_QWORD *)buf = "session";
    v27 = 8;
    if (WebKit::WebExtensionAPIStorage::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v20 = WebKit::toWebExtensionAPIStorage(this, a2, v19);
      v21 = v20;
      if (v20)
      {
        ++*(_DWORD *)(v20 + 48);
        v22 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          __asm { BR              X10 }

        v23 = WebKit::WebExtensionAPIStorage::session((WebKit::WebExtensionAPIStorage *)v21);
        Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v23 + 40));
        if (*(_DWORD *)(v21 + 48) == 1)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)(v21 + 40) + 8))(v21 + 40);
          if (!v18)
            goto LABEL_22;
        }
        else
        {
          --*(_DWORD *)(v21 + 48);
          if (!v18)
            goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
  }
  Undefined = JSValueMakeUndefined(this);
  if (v18)
LABEL_21:
    CFRelease(v18[1]);
LABEL_22:
  if (*(_DWORD *)(v9 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
  else
    --*(_DWORD *)(v9 + 48);
  return Undefined;
}

void sub_196F431E8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorage::local(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIStorage *v6;
  WebKit::JSWebExtensionAPIStorage *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPIStorage::local(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F434C8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorage::sync(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIStorage *v6;
  WebKit::JSWebExtensionAPIStorage *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPIStorage::sync(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F43758(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorage::onChanged(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIStorage *v6;
  WebKit::JSWebExtensionAPIStorage *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPIStorage::onChanged(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F439E8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIStorageArea *WebKit::toWebExtensionAPIStorageArea(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIStorageArea *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIStorageArea *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(WebKit::JSWebExtensionAPIStorageArea *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "StorageArea";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIStorageArea::staticValues(void)::values;
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIStorageArea::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIStorageArea::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIStorageArea::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIStorageArea::getProperty;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIStorageArea::getPropertyNames(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  OpaqueJSString *v17;
  OpaqueJSString *v18;
  OpaqueJSString *v19;
  OpaqueJSString *v20;
  OpaqueJSString *v21;
  const char *v22;
  uint64_t v23;

  v6 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v22);
    v10 = v22;
    if (v22)
    {
      v11 = *((_QWORD *)v22 + 3);
      if (v11
        && (v12 = *(_QWORD *)(v11 + 8)) != 0
        && (v13 = *(_QWORD *)(v12 + 24)) != 0
        && (v14 = *(_QWORD *)(v13 + 8)) != 0
        && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
      {
        v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      v16 = 0;
    }
    if (!*(_BYTE *)(v7 + 8))
    {
      v22 = "setAccessLevel";
      v23 = 15;
      if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
      {
        v17 = JSStringCreateWithUTF8CString("setAccessLevel");
        JSPropertyNameAccumulatorAddName(a3, v17);
        if (v17)
          JSStringRelease(v17);
      }
    }
    v22 = "QUOTA_BYTES_PER_ITEM";
    v23 = 21;
    if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
    {
      v18 = JSStringCreateWithUTF8CString("QUOTA_BYTES_PER_ITEM");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18)
        JSStringRelease(v18);
    }
    v22 = "MAX_ITEMS";
    v23 = 10;
    if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
    {
      v19 = JSStringCreateWithUTF8CString("MAX_ITEMS");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19)
        JSStringRelease(v19);
    }
    v22 = "MAX_WRITE_OPERATIONS_PER_HOUR";
    v23 = 30;
    if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
    {
      v20 = JSStringCreateWithUTF8CString("MAX_WRITE_OPERATIONS_PER_HOUR");
      JSPropertyNameAccumulatorAddName(a3, v20);
      if (v20)
        JSStringRelease(v20);
    }
    v22 = "MAX_WRITE_OPERATIONS_PER_MINUTE";
    v23 = 32;
    if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
    {
      v21 = JSStringCreateWithUTF8CString("MAX_WRITE_OPERATIONS_PER_MINUTE");
      JSPropertyNameAccumulatorAddName(a3, v21);
      if (v21)
        JSStringRelease(v21);
    }
    if (v16)
      CFRelease(v16[1]);
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
}

void sub_196F43E00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  OpaqueJSString *v3;

  if (v3)
    JSStringRelease(v3);
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(exception_object);
}

void sub_196F43E90()
{
  JUMPOUT(0x196F43E64);
}

BOOL WebKit::JSWebExtensionAPIStorageArea::hasProperty(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  int v17;
  _BOOL8 v18;
  _BOOL8 isPropertyAllowed;
  const char *v21;
  uint64_t v22;

  v6 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v21);
  v10 = v21;
  if (v21)
  {
    v11 = *((_QWORD *)v21 + 3);
    if (v11
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
    {
      v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    v16 = 0;
  }
  v17 = *(unsigned __int8 *)(v7 + 8);
  if (!JSStringIsEqualToUTF8CString(a3, "setAccessLevel"))
  {
    if (JSStringIsEqualToUTF8CString(a3, "QUOTA_BYTES_PER_ITEM"))
    {
      v21 = "QUOTA_BYTES_PER_ITEM";
      v22 = 21;
      isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    }
    else if (JSStringIsEqualToUTF8CString(a3, "MAX_ITEMS"))
    {
      v21 = "MAX_ITEMS";
      v22 = 10;
      isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    }
    else if (JSStringIsEqualToUTF8CString(a3, "MAX_WRITE_OPERATIONS_PER_HOUR"))
    {
      v21 = "MAX_WRITE_OPERATIONS_PER_HOUR";
      v22 = 30;
      isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    }
    else
    {
      if (!JSStringIsEqualToUTF8CString(a3, "MAX_WRITE_OPERATIONS_PER_MINUTE"))
        goto LABEL_15;
      v21 = "MAX_WRITE_OPERATIONS_PER_MINUTE";
      v22 = 32;
      isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    }
LABEL_25:
    v18 = isPropertyAllowed;
    goto LABEL_26;
  }
  if (!v17)
  {
    v21 = "setAccessLevel";
    v22 = 15;
    isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    goto LABEL_25;
  }
LABEL_15:
  v18 = 0;
LABEL_26:
  if (v16)
    CFRelease(v16[1]);
  if (*(_DWORD *)(v7 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
  else
    --*(_DWORD *)(v7 + 48);
  return v18;
}

void sub_196F440BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::getProperty(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v8;
  uint64_t v9;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  CFTypeRef *v18;
  int v19;
  const OpaqueJSValue *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  JSValueRef Number;
  const OpaqueJSValue *v25;
  uint64_t v26;
  NSObject *v27;
  const OpaqueJSValue *v28;
  uint64_t v29;
  NSObject *v30;
  const OpaqueJSValue *v31;
  uint64_t v32;
  NSObject *v33;
  JSValueRef v34;
  JSObjectRef FunctionWithCallback;
  uint8_t buf[8];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*(_DWORD *)(v8 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v11, buf);
  v12 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v13 = *(_QWORD *)(*(_QWORD *)buf + 24);
    if (v13
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD *)(v14 + 24)) != 0
      && (v16 = *(_QWORD *)(v15 + 8)) != 0
      && (v17 = *(_QWORD **)(*(_QWORD *)(v16 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v17 + 1368))(v17) & 1) == 0))
    {
      v18 = *(CFTypeRef **)(v17[2] + 8);
      if (v18)
      {
        CFRetain(*(v18 - 1));
        v18 -= 2;
      }
    }
    else
    {
      v18 = 0;
    }
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned __int8 *)(v9 + 8);
  if (JSStringIsEqualToUTF8CString(a3, "QUOTA_BYTES_PER_ITEM"))
  {
    *(_QWORD *)buf = "QUOTA_BYTES_PER_ITEM";
    v38 = 21;
    if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
    {
      v21 = WebKit::toWebExtensionAPIStorageArea(this, a2, v20);
      v22 = v21;
      if (v21)
      {
        ++*(_DWORD *)(v21 + 48);
        v23 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          __asm { BR              X10 }

        Number = JSValueMakeNumber(this, 8192.0);
        goto LABEL_33;
      }
      goto LABEL_40;
    }
  }
  if (!JSStringIsEqualToUTF8CString(a3, "MAX_ITEMS")
    || (*(_QWORD *)buf = "MAX_ITEMS",
        v38 = 10,
        !WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18)))
  {
    if (JSStringIsEqualToUTF8CString(a3, "MAX_WRITE_OPERATIONS_PER_HOUR")
      && (*(_QWORD *)buf = "MAX_WRITE_OPERATIONS_PER_HOUR",
          v38 = 30,
          WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18)))
    {
      v29 = WebKit::toWebExtensionAPIStorageArea(this, a2, v28);
      v22 = v29;
      if (!v29)
        goto LABEL_40;
      ++*(_DWORD *)(v29 + 48);
      v30 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }

      Number = JSValueMakeNumber(this, 1800.0);
    }
    else
    {
      if (!JSStringIsEqualToUTF8CString(a3, "MAX_WRITE_OPERATIONS_PER_MINUTE")
        || (*(_QWORD *)buf = "MAX_WRITE_OPERATIONS_PER_MINUTE",
            v38 = 32,
            !WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18)))
      {
        if (!v19 && JSStringIsEqualToUTF8CString(a3, "setAccessLevel"))
        {
          *(_QWORD *)buf = "setAccessLevel";
          v38 = 15;
          if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)buf, (WebKit::WebPage *)v18))
          {
            FunctionWithCallback = JSObjectMakeFunctionWithCallback(this, a3, (JSObjectCallAsFunctionCallback)WebKit::JSWebExtensionAPIStorageArea::setAccessLevel);
            goto LABEL_41;
          }
        }
        goto LABEL_40;
      }
      v32 = WebKit::toWebExtensionAPIStorageArea(this, a2, v31);
      v22 = v32;
      if (!v32)
        goto LABEL_40;
      ++*(_DWORD *)(v32 + 48);
      v33 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }

      Number = JSValueMakeNumber(this, 120.0);
    }
LABEL_33:
    v34 = Number;
    if (*(_DWORD *)(v22 + 48) == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v22 + 40) + 8))(v22 + 40);
      if (!v18)
        goto LABEL_43;
    }
    else
    {
      --*(_DWORD *)(v22 + 48);
      if (!v18)
        goto LABEL_43;
    }
    goto LABEL_42;
  }
  v26 = WebKit::toWebExtensionAPIStorageArea(this, a2, v25);
  v22 = v26;
  if (v26)
  {
    ++*(_DWORD *)(v26 + 48);
    v27 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    Number = JSValueMakeNumber(this, 512.0);
    goto LABEL_33;
  }
LABEL_40:
  FunctionWithCallback = JSValueMakeUndefined(this);
LABEL_41:
  v34 = FunctionWithCallback;
  if (v18)
LABEL_42:
    CFRelease(v18[1]);
LABEL_43:
  if (*(_DWORD *)(v9 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
  else
    --*(_DWORD *)(v9 + 48);
  return v34;
}

void sub_196F449C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;

  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::get(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIStorageArea *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  objc_class *v15;
  NSString *v16;
  void *v17;
  const OpaqueJSContext *v18;
  const OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  objc_class *v21;
  OpaqueJSValue *v22;
  const OpaqueJSContext *v23;
  const OpaqueJSValue *v24;
  WebKit::WebExtensionCallbackHandler *v25;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  NSString *v36;
  NSString *v37;
  WebKit::WebExtensionCallbackHandler *v38;
  NSObject *v39;
  NSString *v40;
  id v42;
  WebKit::WebExtensionCallbackHandler *v43;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v46;
  JSObjectRef v47;
  uint8_t buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 != (OpaqueJSValue *)2)
    {
      v17 = 0;
      goto LABEL_22;
    }
    if (JSValueIsObject(this, a5[1]) && (v14 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v14))
      || JSValueIsNull(this, a5[1])
      || JSValueIsUndefined(this, a5[1]))
    {
      WebKit::toNSObject(this, *a5, 0, v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = a5[1];
      v19 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      WebKit::toJSCallbackHandler((uint64_t)this, v18, v19, buf);
      goto LABEL_19;
    }
LABEL_53:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.get()"), CFSTR("callback"), CFSTR("a function is expected"), v16);
    Undefined = JSValueMakeUndefined(this);
    v17 = 0;
    goto LABEL_43;
  }
  if (!JSValueIsObject(this, *a5) || (v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSObject(this, *a5, 0, v21);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_22;
    }
  }
  if (!JSValueIsObject(this, *a5) || (v22 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v22)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      goto LABEL_53;
  }
  v23 = *a5;
  v24 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v23, v24, buf);
  v17 = 0;
LABEL_19:
  v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
    goto LABEL_23;
  }
LABEL_22:
  reject = 0;
  resolve = 0;
  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v47 = resolve;
  *(_QWORD *)buf = this;
  v46 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v47, &v46, &v43);
  v25 = v43;
LABEL_23:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v28, buf);
  v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_37;
  v30 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v30
    || (v31 = *(_QWORD *)(v30 + 8)) == 0
    || (v32 = *(_QWORD *)(v31 + 24)) == 0
    || (v33 = *(_QWORD *)(v32 + 8)) == 0
    || (v34 = *(_QWORD **)(*(_QWORD *)(v33 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v34 + 1368))(v34) & 1) != 0)
    || (v35 = *(_QWORD *)(v34[2] + 8)) == 0)
  {
    CFRelease(*((CFTypeRef *)v29 + 1));
LABEL_37:
    v39 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v39, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_39:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("storageArea.get()"), 0, CFSTR("an unknown error occurred"), v40);
        if (Undefined)
          goto LABEL_41;
      }
    }
    else if (Undefined)
    {
      goto LABEL_39;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_41:
    if (v25)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
    goto LABEL_43;
  }
  CFRetain(*(CFTypeRef *)(v35 - 8));
  CFRelease(*((CFTypeRef *)v29 + 1));
  *(_QWORD *)buf = v25;
  v42 = 0;
  WebKit::WebExtensionAPIStorageArea::get(v12, v35 - 16, v17, (WebKit::WebExtensionCallbackHandler **)buf, &v42);
  v37 = (NSString *)v42;
  v38 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v38)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v38);
  if (v37)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.get()"), 0, v37, v36);
    goto LABEL_34;
  }
  if (!Undefined)
LABEL_34:
    Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v35 - 8));
LABEL_43:

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F45150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;

  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::getBytesInUse(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIStorageArea *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  objc_class *v15;
  NSString *v16;
  void *v17;
  const OpaqueJSContext *v18;
  const OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  objc_class *v21;
  OpaqueJSValue *v22;
  const OpaqueJSContext *v23;
  const OpaqueJSValue *v24;
  WebKit::WebExtensionCallbackHandler *v25;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  NSString *v36;
  NSString *v37;
  WebKit::WebExtensionCallbackHandler *v38;
  NSObject *v39;
  NSString *v40;
  id v42;
  WebKit::WebExtensionCallbackHandler *v43;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v46;
  JSObjectRef v47;
  uint8_t buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 != (OpaqueJSValue *)2)
    {
      v17 = 0;
      goto LABEL_22;
    }
    if (JSValueIsObject(this, a5[1]) && (v14 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v14))
      || JSValueIsNull(this, a5[1])
      || JSValueIsUndefined(this, a5[1]))
    {
      WebKit::toNSObject(this, *a5, 0, v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = a5[1];
      v19 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      WebKit::toJSCallbackHandler((uint64_t)this, v18, v19, buf);
      goto LABEL_19;
    }
LABEL_53:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.getBytesInUse()"), CFSTR("callback"), CFSTR("a function is expected"), v16);
    Undefined = JSValueMakeUndefined(this);
    v17 = 0;
    goto LABEL_43;
  }
  if (!JSValueIsObject(this, *a5) || (v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSObject(this, *a5, 0, v21);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_22;
    }
  }
  if (!JSValueIsObject(this, *a5) || (v22 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v22)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      goto LABEL_53;
  }
  v23 = *a5;
  v24 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v23, v24, buf);
  v17 = 0;
LABEL_19:
  v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
    goto LABEL_23;
  }
LABEL_22:
  reject = 0;
  resolve = 0;
  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v47 = resolve;
  *(_QWORD *)buf = this;
  v46 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v47, &v46, &v43);
  v25 = v43;
LABEL_23:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v28, buf);
  v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_37;
  v30 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v30
    || (v31 = *(_QWORD *)(v30 + 8)) == 0
    || (v32 = *(_QWORD *)(v31 + 24)) == 0
    || (v33 = *(_QWORD *)(v32 + 8)) == 0
    || (v34 = *(_QWORD **)(*(_QWORD *)(v33 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v34 + 1368))(v34) & 1) != 0)
    || (v35 = *(_QWORD *)(v34[2] + 8)) == 0)
  {
    CFRelease(*((CFTypeRef *)v29 + 1));
LABEL_37:
    v39 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v39, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_39:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("storageArea.getBytesInUse()"), 0, CFSTR("an unknown error occurred"), v40);
        if (Undefined)
          goto LABEL_41;
      }
    }
    else if (Undefined)
    {
      goto LABEL_39;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_41:
    if (v25)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
    goto LABEL_43;
  }
  CFRetain(*(CFTypeRef *)(v35 - 8));
  CFRelease(*((CFTypeRef *)v29 + 1));
  *(_QWORD *)buf = v25;
  v42 = 0;
  WebKit::WebExtensionAPIStorageArea::getBytesInUse(v12, v35 - 16, v17, (uint64_t *)buf, &v42);
  v37 = (NSString *)v42;
  v38 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v38)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v38);
  if (v37)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.getBytesInUse()"), 0, v37, v36);
    goto LABEL_34;
  }
  if (!Undefined)
LABEL_34:
    Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v35 - 8));
LABEL_43:

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;

  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::set(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIStorageArea *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  void *v17;
  const OpaqueJSValue *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const OpaqueJSValue *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char v28;
  NSString *v29;
  char v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  NSString *v43;
  NSString *v44;
  WebKit::WebExtensionCallbackHandler *v45;
  NSObject *v46;
  NSString *v47;
  void *v48;
  __CFString *v50;
  __CFString *v51;
  id v52;
  WebKit::WebExtensionCallbackHandler *v53;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v56;
  JSObjectRef v57;
  uint8_t buf[8];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v18 = *a5;
    if (*a5)
    {
      v19 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "valueWithJSValueRef:inContext:", v18, v20);
      v21 = objc_claimAutoreleasedReturnValue();

      v22 = (void *)v21;
    }
    else
    {
      v22 = 0;
    }
    v28 = objc_msgSend(v22, "_isDictionary");

    if ((v28 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 1, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v17)
      {
LABEL_6:
        v15 = 0;
LABEL_7:
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.set()"), CFSTR("items"), CFSTR("an object is expected"), v14);
        Undefined = JSValueMakeUndefined(this);
        v17 = 0;
        goto LABEL_44;
      }
      goto LABEL_25;
    }
    goto LABEL_57;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (!a4)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.set()"), 0, CFSTR("a required argument is missing"), v14);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_48;
    }
    goto LABEL_6;
  }
  v23 = *a5;
  if (*a5)
  {
    v24 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "valueWithJSValueRef:inContext:", v23, v25);
    v26 = objc_claimAutoreleasedReturnValue();

    v27 = (void *)v26;
  }
  else
  {
    v27 = 0;
  }
  v30 = objc_msgSend(v27, "_isDictionary");

  if ((v30 & 1) == 0)
  {
LABEL_57:
    v50 = CFSTR("an object is expected");
    v51 = CFSTR("items");
LABEL_58:
    v48 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.set()"), &v51->isa, &v50->isa, v29);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, a5[1]) || (v31 = JSValueToObject(this, a5[1], 0), !JSObjectIsFunction(this, v31)))
  {
    if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
    {
      v50 = CFSTR("a function is expected");
      v51 = CFSTR("callback");
      goto LABEL_58;
    }
  }
  WebKit::toNSDictionary(this, *a5, 1, 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = a5[1];
  v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
  v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!v17)
    goto LABEL_7;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
    goto LABEL_26;
  }
LABEL_25:
  reject = 0;
  resolve = 0;
  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v57 = resolve;
  *(_QWORD *)buf = this;
  v56 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v57, &v56, &v53);
  v15 = v53;
LABEL_26:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
  v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_40;
  v37 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v37
    || (v38 = *(_QWORD *)(v37 + 8)) == 0
    || (v39 = *(_QWORD *)(v38 + 24)) == 0
    || (v40 = *(_QWORD *)(v39 + 8)) == 0
    || (v41 = *(_QWORD **)(*(_QWORD *)(v40 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v41 + 1368))(v41) & 1) != 0)
    || (v42 = *(_QWORD *)(v41[2] + 8)) == 0)
  {
    CFRelease(*((CFTypeRef *)v36 + 1));
LABEL_40:
    v46 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v46, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_42:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("storageArea.set()"), 0, CFSTR("an unknown error occurred"), v47);
        if (Undefined)
          goto LABEL_44;
      }
    }
    else if (Undefined)
    {
      goto LABEL_42;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_44:
    if (v15)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
    goto LABEL_46;
  }
  CFRetain(*(CFTypeRef *)(v42 - 8));
  CFRelease(*((CFTypeRef *)v36 + 1));
  *(_QWORD *)buf = v15;
  v52 = 0;
  WebKit::WebExtensionAPIStorageArea::set(v12, v42 - 16, v17, (JSObjectRef **)buf, &v52);
  v44 = (NSString *)v52;
  v45 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v45)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v45);
  if (v44)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.set()"), 0, v44, v43);
    goto LABEL_37;
  }
  if (!Undefined)
LABEL_37:
    Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v42 - 8));
LABEL_46:
  v48 = v17;
LABEL_47:

LABEL_48:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F45FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::remove(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIStorageArea *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  JSValueRef Undefined;
  void *v18;
  OpaqueJSValue *v19;
  objc_class *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v25;
  WebKit::WebExtensionCallbackHandler *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  NSString *v33;
  NSString *v34;
  WebKit::WebExtensionCallbackHandler *v35;
  NSObject *v36;
  NSString *v37;
  void *v38;
  id v40;
  WebKit::WebExtensionCallbackHandler *v41;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v44;
  JSObjectRef v45;
  uint8_t buf[8];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    WebKit::toNSObject(this, *a5, 0, v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v18)
    {
LABEL_6:
      v16 = 0;
LABEL_7:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.remove()"), CFSTR("keys"), CFSTR("an object is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      v18 = 0;
      goto LABEL_36;
    }
  }
  else
  {
    if (a4 != (OpaqueJSValue *)2)
    {
      if (!a4)
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.remove()"), 0, CFSTR("a required argument is missing"), v15);
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_40;
      }
      goto LABEL_6;
    }
    if (!JSValueIsObject(this, a5[1]) || (v19 = JSValueToObject(this, a5[1], 0), !JSObjectIsFunction(this, v19)))
    {
      if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
      {
        v38 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.remove()"), CFSTR("callback"), CFSTR("a function is expected"), v21);
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_39;
      }
    }
    WebKit::toNSObject(this, *a5, 0, v20);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = a5[1];
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v18)
      goto LABEL_7;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_18;
    }
  }
  reject = 0;
  resolve = 0;
  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v45 = resolve;
  *(_QWORD *)buf = this;
  v44 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v45, &v44, &v41);
  v16 = v41;
LABEL_18:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v25, buf);
  v26 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_32;
  v27 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v27
    || (v28 = *(_QWORD *)(v27 + 8)) == 0
    || (v29 = *(_QWORD *)(v28 + 24)) == 0
    || (v30 = *(_QWORD *)(v29 + 8)) == 0
    || (v31 = *(_QWORD **)(*(_QWORD *)(v30 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v31 + 1368))(v31) & 1) != 0)
    || (v32 = *(_QWORD *)(v31[2] + 8)) == 0)
  {
    CFRelease(*((CFTypeRef *)v26 + 1));
LABEL_32:
    v36 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v36, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_34:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("storageArea.remove()"), 0, CFSTR("an unknown error occurred"), v37);
        if (Undefined)
          goto LABEL_36;
      }
    }
    else if (Undefined)
    {
      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_36:
    if (v16)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
    goto LABEL_38;
  }
  CFRetain(*(CFTypeRef *)(v32 - 8));
  CFRelease(*((CFTypeRef *)v26 + 1));
  *(_QWORD *)buf = v16;
  v40 = 0;
  WebKit::WebExtensionAPIStorageArea::remove(v12, v32 - 16, v18, (uint64_t *)buf, &v40);
  v34 = (NSString *)v40;
  v35 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v35)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v35);
  if (v34)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.remove()"), 0, v34, v33);
    goto LABEL_29;
  }
  if (!Undefined)
LABEL_29:
    Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v32 - 8));
LABEL_38:
  v38 = v18;
LABEL_39:

LABEL_40:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F466B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::clear(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIStorageArea *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSObjectRef DeferredPromise;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v21;
  WebKit::WebExtensionCallbackHandler *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WebKit::WebExtensionCallbackHandler *v29;
  NSObject *v30;
  NSString *v31;
  WebKit::WebExtensionCallbackHandler *v33;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v36;
  JSObjectRef v37;
  uint8_t buf[8];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_10;
  if (JSValueIsObject(this, *a5) && (v14 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v14))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v16 = *a5;
    v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
    v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      DeferredPromise = 0;
      goto LABEL_11;
    }
LABEL_10:
    reject = 0;
    resolve = 0;
    DeferredPromise = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v37 = resolve;
    *(_QWORD *)buf = this;
    v36 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v37, &v36, &v33);
    v18 = v33;
LABEL_11:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v21, buf);
    v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      v23 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 24);
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 8);
            if (v26)
            {
              v27 = *(_QWORD **)(*(_QWORD *)(v26 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v27 + 1368))(v27) & 1) == 0)
              {
                v28 = *(_QWORD *)(v27[2] + 8);
                if (v28)
                {
                  CFRetain(*(CFTypeRef *)(v28 - 8));
                  CFRelease(*((CFTypeRef *)v22 + 1));
                  *(_QWORD *)buf = v18;
                  WebKit::WebExtensionAPIStorageArea::clear(v12, v28 - 16, buf);
                  v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(_QWORD *)buf = 0;
                  if (v29)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
                  if (!DeferredPromise)
                    DeferredPromise = JSValueMakeUndefined(this);
                  CFRelease(*(CFTypeRef *)(v28 - 8));
                  goto LABEL_30;
                }
              }
            }
          }
        }
      }
      CFRelease(*((CFTypeRef *)v22 + 1));
    }
    v30 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v30, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (DeferredPromise)
      {
LABEL_26:
        DeferredPromise = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("storageArea.clear()"), 0, CFSTR("an unknown error occurred"), v31);
        if (DeferredPromise)
          goto LABEL_28;
      }
    }
    else if (DeferredPromise)
    {
      goto LABEL_26;
    }
    DeferredPromise = JSValueMakeUndefined(this);
LABEL_28:
    if (v18)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
    goto LABEL_30;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.clear()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
  DeferredPromise = JSValueMakeUndefined(this);
LABEL_30:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return DeferredPromise;
}

void sub_196F46C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  CFRelease(*(CFTypeRef *)(v16 - 8));
  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::onChanged(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIStorageArea *v6;
  WebKit::JSWebExtensionAPIStorageArea *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = WebKit::WebExtensionAPIStorageArea::onChanged(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F46F20(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::quotaBytes(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIStorageArea *v6;
  WebKit::JSWebExtensionAPIStorageArea *v7;
  NSObject *v8;
  double v9;
  JSValueRef Number;

  v6 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = 0.0;
  if ((*((_BYTE *)v7 + 52) - 1) <= 3u)
    v9 = dbl_1978CE830[(char)(*((_BYTE *)v7 + 52) - 1)];
  Number = JSValueMakeNumber(this, v9);
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Number;
}

void sub_196F471CC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::setAccessLevel(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  void *v17;
  const OpaqueJSValue *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const OpaqueJSValue *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char v28;
  NSString *v29;
  char v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  NSString *v43;
  NSString *v44;
  WebKit::WebExtensionCallbackHandler *v45;
  NSObject *v46;
  NSString *v47;
  void *v48;
  __CFString *v50;
  __CFString *v51;
  id v52;
  WebKit::WebExtensionCallbackHandler *v53;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v56;
  JSObjectRef v57;
  uint8_t buf[8];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*(_DWORD *)(v11 + 48);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v18 = *a5;
    if (*a5)
    {
      v19 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "valueWithJSValueRef:inContext:", v18, v20);
      v21 = objc_claimAutoreleasedReturnValue();

      v22 = (void *)v21;
    }
    else
    {
      v22 = 0;
    }
    v28 = objc_msgSend(v22, "_isDictionary");

    if ((v28 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v17)
      {
LABEL_6:
        v15 = 0;
LABEL_7:
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.setAccessLevel()"), CFSTR("accessOptions"), CFSTR("an object is expected"), v14);
        Undefined = JSValueMakeUndefined(this);
        v17 = 0;
        goto LABEL_44;
      }
      goto LABEL_25;
    }
    goto LABEL_57;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (!a4)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.setAccessLevel()"), 0, CFSTR("a required argument is missing"), v14);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_48;
    }
    goto LABEL_6;
  }
  v23 = *a5;
  if (*a5)
  {
    v24 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "valueWithJSValueRef:inContext:", v23, v25);
    v26 = objc_claimAutoreleasedReturnValue();

    v27 = (void *)v26;
  }
  else
  {
    v27 = 0;
  }
  v30 = objc_msgSend(v27, "_isDictionary");

  if ((v30 & 1) == 0)
  {
LABEL_57:
    v50 = CFSTR("an object is expected");
    v51 = CFSTR("accessOptions");
LABEL_58:
    v48 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.setAccessLevel()"), &v51->isa, &v50->isa, v29);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, a5[1]) || (v31 = JSValueToObject(this, a5[1], 0), !JSObjectIsFunction(this, v31)))
  {
    if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
    {
      v50 = CFSTR("a function is expected");
      v51 = CFSTR("callback");
      goto LABEL_58;
    }
  }
  WebKit::toNSDictionary(this, *a5, 0, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = a5[1];
  v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
  v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!v17)
    goto LABEL_7;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
    goto LABEL_26;
  }
LABEL_25:
  reject = 0;
  resolve = 0;
  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v57 = resolve;
  *(_QWORD *)buf = this;
  v56 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v57, &v56, &v53);
  v15 = v53;
LABEL_26:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
  v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_40;
  v37 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v37
    || (v38 = *(_QWORD *)(v37 + 8)) == 0
    || (v39 = *(_QWORD *)(v38 + 24)) == 0
    || (v40 = *(_QWORD *)(v39 + 8)) == 0
    || (v41 = *(_QWORD **)(*(_QWORD *)(v40 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v41 + 1368))(v41) & 1) != 0)
    || (v42 = *(_QWORD *)(v41[2] + 8)) == 0)
  {
    CFRelease(*((CFTypeRef *)v36 + 1));
LABEL_40:
    v46 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v46, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_42:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("storageArea.setAccessLevel()"), 0, CFSTR("an unknown error occurred"), v47);
        if (Undefined)
          goto LABEL_44;
      }
    }
    else if (Undefined)
    {
      goto LABEL_42;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_44:
    if (v15)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
    goto LABEL_46;
  }
  CFRetain(*(CFTypeRef *)(v42 - 8));
  CFRelease(*((CFTypeRef *)v36 + 1));
  *(_QWORD *)buf = v15;
  v52 = 0;
  WebKit::WebExtensionAPIStorageArea::setAccessLevel(v12, v42 - 16, v17, (uint64_t *)buf, &v52);
  v44 = (NSString *)v52;
  v45 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v45)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v45);
  if (v44)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("storageArea.setAccessLevel()"), 0, v44, v43);
    goto LABEL_37;
  }
  if (!Undefined)
LABEL_37:
    Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v42 - 8));
LABEL_46:
  v48 = v17;
LABEL_47:

LABEL_48:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F47914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPITabs *WebKit::toWebExtensionAPITabs(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPITabs *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPITabs::tabsClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPITabs::tabsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPITabs *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPITabs::tabsClass(WebKit::JSWebExtensionAPITabs *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPITabs::tabsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPITabs::tabsClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "Tabs";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPITabs::staticValues(void)::values;
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPITabs::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPITabs::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPITabs::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPITabs::getProperty;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPITabs::tabsClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPITabs::getPropertyNames(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  OpaqueJSString *v17;
  OpaqueJSString *v18;
  OpaqueJSString *v19;
  OpaqueJSString *v20;
  const char *v21;
  uint64_t v22;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v21);
    v10 = v21;
    if (v21)
    {
      v11 = *((_QWORD *)v21 + 3);
      if (v11
        && (v12 = *(_QWORD *)(v11 + 8)) != 0
        && (v13 = *(_QWORD *)(v12 + 24)) != 0
        && (v14 = *(_QWORD *)(v13 + 8)) != 0
        && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
      {
        v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      v16 = 0;
    }
    v21 = "getSelected";
    v22 = 12;
    if (WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16))
    {
      v17 = JSStringCreateWithUTF8CString("getSelected");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17)
        JSStringRelease(v17);
    }
    v21 = "executeScript";
    v22 = 14;
    if (WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16))
    {
      v18 = JSStringCreateWithUTF8CString("executeScript");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18)
        JSStringRelease(v18);
    }
    v21 = "insertCSS";
    v22 = 10;
    if (WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16))
    {
      v19 = JSStringCreateWithUTF8CString("insertCSS");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19)
        JSStringRelease(v19);
    }
    v21 = "removeCSS";
    v22 = 10;
    if (WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16))
    {
      v20 = JSStringCreateWithUTF8CString("removeCSS");
      JSPropertyNameAccumulatorAddName(a3, v20);
      if (v20)
        JSStringRelease(v20);
    }
    if (v16)
      CFRelease(v16[1]);
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
}

void sub_196F47D70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

void sub_196F47DF4()
{
  JUMPOUT(0x196F47DC8);
}

BOOL WebKit::JSWebExtensionAPITabs::hasProperty(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  _BOOL8 isPropertyAllowed;
  _BOOL8 v18;
  const char *v20;
  uint64_t v21;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v20);
  v10 = v20;
  if (v20)
  {
    v11 = *((_QWORD *)v20 + 3);
    if (v11
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
    {
      v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    v16 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "getSelected"))
  {
    v20 = "getSelected";
    v21 = 12;
    isPropertyAllowed = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_21;
  }
  if (JSStringIsEqualToUTF8CString(a3, "executeScript"))
  {
    v20 = "executeScript";
    v21 = 14;
    isPropertyAllowed = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_21;
  }
  if (JSStringIsEqualToUTF8CString(a3, "insertCSS"))
  {
    v20 = "insertCSS";
    v21 = 10;
    isPropertyAllowed = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_21;
  }
  if (JSStringIsEqualToUTF8CString(a3, "removeCSS"))
  {
    v20 = "removeCSS";
    v21 = 10;
    isPropertyAllowed = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
LABEL_21:
    v18 = isPropertyAllowed;
    if (!v16)
      goto LABEL_23;
    goto LABEL_22;
  }
  v18 = 0;
  if (v16)
LABEL_22:
    CFRelease(v16[1]);
LABEL_23:
  if (*(_DWORD *)(v7 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
  else
    --*(_DWORD *)(v7 + 48);
  return v18;
}

void sub_196F47FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::getProperty(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v7;
  uint64_t v8;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  CFTypeRef *v17;
  JSValueRef (__cdecl *v18)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *);
  JSValueRef Undefined;
  JSValueRef v20;
  const char *v22;
  uint64_t v23;

  v7 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  if (!v7)
    return JSValueMakeUndefined(this);
  v8 = v7;
  ++*(_DWORD *)(v7 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v10, &v22);
  v11 = v22;
  if (v22)
  {
    v12 = *((_QWORD *)v22 + 3);
    if (v12
      && (v13 = *(_QWORD *)(v12 + 8)) != 0
      && (v14 = *(_QWORD *)(v13 + 24)) != 0
      && (v15 = *(_QWORD *)(v14 + 8)) != 0
      && (v16 = *(_QWORD **)(*(_QWORD *)(v15 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v16 + 1368))(v16) & 1) == 0))
    {
      v17 = *(CFTypeRef **)(v16[2] + 8);
      if (v17)
      {
        CFRetain(*(v17 - 1));
        v17 -= 2;
      }
    }
    else
    {
      v17 = 0;
    }
    CFRelease(*((CFTypeRef *)v11 + 1));
  }
  else
  {
    v17 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "getSelected")
    && (v22 = "getSelected",
        v23 = 12,
        WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v17)))
  {
    v18 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPITabs::getSelected;
  }
  else if (JSStringIsEqualToUTF8CString(a3, "executeScript")
         && (v22 = "executeScript",
             v23 = 14,
             WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v17)))
  {
    v18 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPITabs::executeScript;
  }
  else if (JSStringIsEqualToUTF8CString(a3, "insertCSS")
         && (v22 = "insertCSS",
             v23 = 10,
             WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v17)))
  {
    v18 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPITabs::insertCSS;
  }
  else
  {
    if (!JSStringIsEqualToUTF8CString(a3, "removeCSS")
      || (v22 = "removeCSS",
          v23 = 10,
          !WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v17)))
    {
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_27;
    }
    v18 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPITabs::removeCSS;
  }
  Undefined = JSObjectMakeFunctionWithCallback(this, a3, v18);
LABEL_27:
  v20 = Undefined;
  if (v17)
    CFRelease(v17[1]);
  if (*(_DWORD *)(v8 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 8))(v8 + 40);
  else
    --*(_DWORD *)(v8 + 48);
  return v20;
}

void sub_196F4827C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::create(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  void *v17;
  const OpaqueJSValue *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const OpaqueJSValue *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char v28;
  NSString *v29;
  char v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  NSString *v43;
  NSString *v44;
  WebKit::WebExtensionCallbackHandler *v45;
  NSObject *v46;
  NSString *v47;
  void *v48;
  __CFString *v50;
  __CFString *v51;
  id v52;
  WebKit::WebExtensionCallbackHandler *v53;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v56;
  JSObjectRef v57;
  uint8_t buf[8];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_49;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v18 = *a5;
    if (*a5)
    {
      v19 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "valueWithJSValueRef:inContext:", v18, v20);
      v21 = objc_claimAutoreleasedReturnValue();

      v22 = (void *)v21;
    }
    else
    {
      v22 = 0;
    }
    v28 = objc_msgSend(v22, "_isDictionary");

    if ((v28 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v17)
        goto LABEL_7;
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    v23 = *a5;
    if (*a5)
    {
      v24 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "valueWithJSValueRef:inContext:", v23, v25);
      v26 = objc_claimAutoreleasedReturnValue();

      v27 = (void *)v26;
    }
    else
    {
      v27 = 0;
    }
    v30 = objc_msgSend(v27, "_isDictionary");

    if ((v30 & 1) != 0)
    {
      if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        WebKit::toNSDictionary(this, *a5, 0, 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = a5[1];
        v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
        v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (!v17)
          goto LABEL_8;
        if (*(_QWORD *)buf)
        {
          Undefined = 0;
          goto LABEL_27;
        }
LABEL_26:
        reject = 0;
        resolve = 0;
        Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        v57 = resolve;
        *(_QWORD *)buf = this;
        v56 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v57, &v56, &v53);
        v15 = v53;
LABEL_27:
        GlobalContext = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
        v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(_QWORD *)buf)
        {
          v37 = *(_QWORD *)(*(_QWORD *)buf + 24);
          if (v37)
          {
            v38 = *(_QWORD *)(v37 + 8);
            if (v38)
            {
              v39 = *(_QWORD *)(v38 + 24);
              if (v39)
              {
                v40 = *(_QWORD *)(v39 + 8);
                if (v40)
                {
                  v41 = *(_QWORD **)(*(_QWORD *)(v40 + 48) + 16);
                  if (((*(uint64_t (**)(_QWORD *))(*v41 + 1368))(v41) & 1) == 0)
                  {
                    v42 = *(_QWORD *)(v41[2] + 8);
                    if (v42)
                    {
                      CFRetain(*(CFTypeRef *)(v42 - 8));
                      CFRelease(*((CFTypeRef *)v36 + 1));
                      *(_QWORD *)buf = v15;
                      v52 = 0;
                      WebKit::WebExtensionAPITabs::createTab(v12, v42 - 16, v17, (uint64_t *)buf, &v52);
                      v44 = (NSString *)v52;
                      v45 = *(WebKit::WebExtensionCallbackHandler **)buf;
                      *(_QWORD *)buf = 0;
                      if (v45)
                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v45);
                      if (v44)
                      {
                        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.create()"), 0, v44, v43);
                      }
                      else if (Undefined)
                      {
LABEL_39:

                        CFRelease(*(CFTypeRef *)(v42 - 8));
LABEL_47:
                        v48 = v17;
LABEL_48:

                        goto LABEL_49;
                      }
                      Undefined = JSValueMakeUndefined(this);
                      goto LABEL_39;
                    }
                  }
                }
              }
            }
          }
          CFRelease(*((CFTypeRef *)v36 + 1));
        }
        v46 = qword_1ECE710C8;
        if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_196BCC000, v46, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          if (Undefined)
          {
LABEL_43:
            Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.create()"), 0, CFSTR("an unknown error occurred"), v47);
            if (Undefined)
              goto LABEL_45;
          }
        }
        else if (Undefined)
        {
          goto LABEL_43;
        }
        Undefined = JSValueMakeUndefined(this);
LABEL_45:
        if (v15)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
        goto LABEL_47;
      }
      v50 = CFSTR("a function is expected");
      v51 = CFSTR("callback");
LABEL_60:
      v48 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.create()"), &v51->isa, &v50->isa, v29);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_48;
    }
LABEL_59:
    v50 = CFSTR("an object is expected");
    v51 = CFSTR("properties");
    goto LABEL_60;
  }
  if (a4)
  {
LABEL_7:
    v15 = 0;
LABEL_8:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.create()"), CFSTR("properties"), CFSTR("an object is expected"), v14);
    Undefined = JSValueMakeUndefined(this);
    v17 = 0;
    goto LABEL_45;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.create()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_49:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F48994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::query(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  void *v17;
  const OpaqueJSValue *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const OpaqueJSValue *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char v28;
  NSString *v29;
  char v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  NSString *v43;
  NSString *v44;
  WebKit::WebExtensionCallbackHandler *v45;
  NSObject *v46;
  NSString *v47;
  void *v48;
  __CFString *v50;
  __CFString *v51;
  id v52;
  WebKit::WebExtensionCallbackHandler *v53;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v56;
  JSObjectRef v57;
  uint8_t buf[8];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_49;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v18 = *a5;
    if (*a5)
    {
      v19 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "valueWithJSValueRef:inContext:", v18, v20);
      v21 = objc_claimAutoreleasedReturnValue();

      v22 = (void *)v21;
    }
    else
    {
      v22 = 0;
    }
    v28 = objc_msgSend(v22, "_isDictionary");

    if ((v28 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v17)
        goto LABEL_7;
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    v23 = *a5;
    if (*a5)
    {
      v24 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "valueWithJSValueRef:inContext:", v23, v25);
      v26 = objc_claimAutoreleasedReturnValue();

      v27 = (void *)v26;
    }
    else
    {
      v27 = 0;
    }
    v30 = objc_msgSend(v27, "_isDictionary");

    if ((v30 & 1) != 0)
    {
      if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        WebKit::toNSDictionary(this, *a5, 0, 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = a5[1];
        v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
        v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (!v17)
          goto LABEL_8;
        if (*(_QWORD *)buf)
        {
          Undefined = 0;
          goto LABEL_27;
        }
LABEL_26:
        reject = 0;
        resolve = 0;
        Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        v57 = resolve;
        *(_QWORD *)buf = this;
        v56 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v57, &v56, &v53);
        v15 = v53;
LABEL_27:
        GlobalContext = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
        v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(_QWORD *)buf)
        {
          v37 = *(_QWORD *)(*(_QWORD *)buf + 24);
          if (v37)
          {
            v38 = *(_QWORD *)(v37 + 8);
            if (v38)
            {
              v39 = *(_QWORD *)(v38 + 24);
              if (v39)
              {
                v40 = *(_QWORD *)(v39 + 8);
                if (v40)
                {
                  v41 = *(_QWORD **)(*(_QWORD *)(v40 + 48) + 16);
                  if (((*(uint64_t (**)(_QWORD *))(*v41 + 1368))(v41) & 1) == 0)
                  {
                    v42 = *(_QWORD *)(v41[2] + 8);
                    if (v42)
                    {
                      CFRetain(*(CFTypeRef *)(v42 - 8));
                      CFRelease(*((CFTypeRef *)v36 + 1));
                      *(_QWORD *)buf = v15;
                      v52 = 0;
                      WebKit::WebExtensionAPITabs::query(v12, v42 - 16, v17, (uint64_t *)buf, &v52);
                      v44 = (NSString *)v52;
                      v45 = *(WebKit::WebExtensionCallbackHandler **)buf;
                      *(_QWORD *)buf = 0;
                      if (v45)
                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v45);
                      if (v44)
                      {
                        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.query()"), 0, v44, v43);
                      }
                      else if (Undefined)
                      {
LABEL_39:

                        CFRelease(*(CFTypeRef *)(v42 - 8));
LABEL_47:
                        v48 = v17;
LABEL_48:

                        goto LABEL_49;
                      }
                      Undefined = JSValueMakeUndefined(this);
                      goto LABEL_39;
                    }
                  }
                }
              }
            }
          }
          CFRelease(*((CFTypeRef *)v36 + 1));
        }
        v46 = qword_1ECE710C8;
        if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_196BCC000, v46, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          if (Undefined)
          {
LABEL_43:
            Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.query()"), 0, CFSTR("an unknown error occurred"), v47);
            if (Undefined)
              goto LABEL_45;
          }
        }
        else if (Undefined)
        {
          goto LABEL_43;
        }
        Undefined = JSValueMakeUndefined(this);
LABEL_45:
        if (v15)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
        goto LABEL_47;
      }
      v50 = CFSTR("a function is expected");
      v51 = CFSTR("callback");
LABEL_60:
      v48 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.query()"), &v51->isa, &v50->isa, v29);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_48;
    }
LABEL_59:
    v50 = CFSTR("an object is expected");
    v51 = CFSTR("info");
    goto LABEL_60;
  }
  if (a4)
  {
LABEL_7:
    v15 = 0;
LABEL_8:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.query()"), CFSTR("info"), CFSTR("an object is expected"), v14);
    Undefined = JSValueMakeUndefined(this);
    v17 = 0;
    goto LABEL_45;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.query()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_49:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F49160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::get(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  double v17;
  NSString *v18;
  OpaqueJSValue *v19;
  const OpaqueJSContext *v20;
  const OpaqueJSValue *v21;
  JSValueRef Undefined;
  NSString *v23;
  NSString *v24;
  WebKit::WebExtensionCallbackHandler *v25;
  JSValueRef v27;
  __CFString *v28;
  __CFString *v29;
  id v30;
  WebKit::WebExtensionCallbackHandler *v31;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v34;
  JSObjectRef v35;
  uint8_t buf[8];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_26;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsNumber(this, *a5))
    {
      v17 = JSValueToNumber(this, *a5, 0);
      v16 = 0;
      goto LABEL_16;
    }
    goto LABEL_37;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsNumber(this, *a5))
    {
      if (JSValueIsObject(this, a5[1]) && (v19 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v19))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        v17 = JSValueToNumber(this, *a5, 0);
        v20 = a5[1];
        v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
        v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
LABEL_16:
        if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.get()"), CFSTR("tabID"), CFSTR("a number is expected"), v15);
          Undefined = JSValueMakeUndefined(this);
          if (v16)
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
          goto LABEL_26;
        }
        if (v16)
        {
          Undefined = 0;
        }
        else
        {
          reject = 0;
          resolve = 0;
          Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
          v35 = resolve;
          *(_QWORD *)buf = this;
          v34 = reject;
          WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v35, &v34, &v31);
          v16 = v31;
        }
        *(_QWORD *)buf = v16;
        v30 = 0;
        WebKit::WebExtensionAPITabs::get(v12, (uint64_t *)buf, &v30, v14, v17);
        v24 = (NSString *)v30;
        v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
        *(_QWORD *)buf = 0;
        if (v25)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
        if (v24)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.get()"), 0, v24, v23);
        }
        else if (Undefined)
        {
LABEL_25:

          goto LABEL_26;
        }
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_25;
      }
      v28 = CFSTR("a function is expected");
      v29 = CFSTR("callback");
LABEL_38:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.get()"), &v29->isa, &v28->isa, v18);
      v27 = JSValueMakeUndefined(this);
      goto LABEL_39;
    }
LABEL_37:
    v28 = CFSTR("a number is expected");
    v29 = CFSTR("tabID");
    goto LABEL_38;
  }
  if (a4)
  {
    v16 = 0;
    v17 = NAN;
    goto LABEL_16;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.get()"), 0, CFSTR("a required argument is missing"), v15);
  v27 = JSValueMakeUndefined(this);
LABEL_39:
  Undefined = v27;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F49730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  WebKit::WebExtensionCallbackHandler *v16;

  if (v16)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::getCurrent(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  OpaqueJSValue *v14;
  NSString *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v21;
  WebKit::WebExtensionCallbackHandler *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WebKit::WebExtensionCallbackHandler *v29;
  NSObject *v30;
  NSString *v31;
  WebKit::WebExtensionCallbackHandler *v33;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v36;
  JSObjectRef v37;
  uint8_t buf[8];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_31;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
    goto LABEL_11;
  if (JSValueIsObject(this, *a5) && (v14 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v14))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v16 = *a5;
    v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
    v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_12;
    }
LABEL_11:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v37 = resolve;
    *(_QWORD *)buf = this;
    v36 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v37, &v36, &v33);
    v18 = v33;
LABEL_12:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v21, buf);
    v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      v23 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 24);
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 8);
            if (v26)
            {
              v27 = *(_QWORD **)(*(_QWORD *)(v26 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v27 + 1368))(v27) & 1) == 0)
              {
                v28 = *(_QWORD *)(v27[2] + 8);
                if (v28)
                {
                  CFRetain(*(CFTypeRef *)(v28 - 8));
                  CFRelease(*((CFTypeRef *)v22 + 1));
                  *(_QWORD *)buf = v18;
                  WebKit::WebExtensionAPITabs::getCurrent(v12, v28 - 16, buf);
                  v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(_QWORD *)buf = 0;
                  if (v29)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
                  if (!Undefined)
                    Undefined = JSValueMakeUndefined(this);
                  CFRelease(*(CFTypeRef *)(v28 - 8));
                  goto LABEL_31;
                }
              }
            }
          }
        }
      }
      CFRelease(*((CFTypeRef *)v22 + 1));
    }
    v30 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v30, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_27:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.getCurrent()"), 0, CFSTR("an unknown error occurred"), v31);
        if (Undefined)
          goto LABEL_29;
      }
    }
    else if (Undefined)
    {
      goto LABEL_27;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_29:
    if (v18)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
    goto LABEL_31;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.getCurrent()"), CFSTR("callback"), CFSTR("a function is expected"), v15);
  Undefined = JSValueMakeUndefined(this);
LABEL_31:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F49C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::duplicate(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  unint64_t v15;
  const OpaqueJSContext *v16;
  OpaqueJSValue *v17;
  const OpaqueJSValue *v18;
  WebKit::WebExtensionCallbackHandler *v19;
  unint64_t v20;
  unint64_t v21;
  NSString *v22;
  JSValueRef v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  double v29;
  char v30;
  OpaqueJSValue *v31;
  void *v32;
  const OpaqueJSContext *v33;
  const OpaqueJSValue *v34;
  JSValueRef Undefined;
  const OpaqueJSValue *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  const OpaqueJSValue *v41;
  NSString *v42;
  NSString *v43;
  WebKit::WebExtensionCallbackHandler *v44;
  void *v45;
  JSValueRef v47;
  __CFString *v48;
  __CFString *v49;
  id v50;
  WebKit::WebExtensionCallbackHandler *v51;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v54;
  JSObjectRef v55;
  uint8_t buf[8];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_54;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5))
    {
      v23 = a5[1];
      if (v23)
      {
        v24 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "valueWithJSValueRef:inContext:", v23, v25);
        v26 = objc_claimAutoreleasedReturnValue();

        v27 = (void *)v26;
      }
      else
      {
        v27 = 0;
      }
      v30 = objc_msgSend(v27, "_isDictionary");

      if ((v30 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          v29 = JSValueToNumber(this, *a5, 0);
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = a5[2];
          v34 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v33, v34, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v28 = v32;
          if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            if (!*(_QWORD *)buf)
            {
LABEL_46:
              reject = 0;
              resolve = 0;
              Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              v55 = resolve;
              *(_QWORD *)buf = this;
              v54 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v55, &v54, &v51);
              v19 = v51;
LABEL_47:
              *(_QWORD *)buf = v19;
              v50 = 0;
              WebKit::WebExtensionAPITabs::duplicate(v12, v32, (uint64_t *)buf, (char *)&v50, v29);
              v43 = (NSString *)v50;
              v44 = *(WebKit::WebExtensionCallbackHandler **)buf;
              *(_QWORD *)buf = 0;
              if (v44)
                WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v44);
              if (v43)
              {
                *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.duplicate()"), 0, v43, v42);
              }
              else if (Undefined)
              {
LABEL_52:

                v45 = v32;
LABEL_53:

                goto LABEL_54;
              }
              Undefined = JSValueMakeUndefined(this);
              goto LABEL_52;
            }
LABEL_28:
            Undefined = 0;
            goto LABEL_47;
          }
          goto LABEL_60;
        }
        v48 = CFSTR("a function is expected");
        v49 = CFSTR("callback");
      }
      else
      {
        v48 = CFSTR("an object is expected");
        v49 = CFSTR("properties");
      }
    }
    else
    {
      v48 = CFSTR("a number is expected");
      v49 = CFSTR("tabID");
    }
    v45 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.duplicate()"), &v49->isa, &v48->isa, v22);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_53;
  }
  if (a4)
  {
    v15 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      v28 = 0;
      v19 = 0;
      v29 = NAN;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
      }
      else
      {
        v16 = a5[v15];
        if (v16
          && (JSValueIsObject(this, a5[v15]) && (v17 = JSValueToObject(this, v16, 0), JSObjectIsFunction(this, v17))
           || JSValueIsNull(this, v16)
           || JSValueIsUndefined(this, v16)))
        {
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v16, v18, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v20 = (unint64_t)a4 - 2;
          v21 = 1;
        }
        else
        {
          v19 = 0;
          v21 = 0;
          v20 = (unint64_t)a4 - 1;
        }
      }
      if (v21 >= v15)
        goto LABEL_38;
      v36 = a5[v20];
      if (!v36)
        goto LABEL_38;
      v37 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v38 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "valueWithJSValueRef:inContext:", v36, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      LOBYTE(v38) = objc_msgSend(v39, "_isDictionary");
      if ((v38 & 1) != 0 || JSValueIsNull(this, v36) || JSValueIsUndefined(this, v36))
      {
        WebKit::toNSDictionary(this, v36, 0, 0);
        v40 = objc_claimAutoreleasedReturnValue();
        if (!v20)
        {
          v28 = (void *)v40;
          goto LABEL_60;
        }
        --v20;
        v28 = (void *)v40;
      }
      else
      {
LABEL_38:
        v28 = 0;
      }
      v41 = a5[v20];
      if (v41)
      {
        if (!JSValueIsNumber(this, v41))
          goto LABEL_60;
        v29 = JSValueToNumber(this, v41, 0);
        v15 = v20 - 1;
      }
      else
      {
        v29 = NAN;
        v15 = v20;
      }
    }
    if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if ((v15 & 0x8000000000000000) != 0)
      {
        v32 = v28;
        if (!v19)
          goto LABEL_46;
        goto LABEL_28;
      }
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.duplicate()"), 0, CFSTR("an unknown argument was provided"), v14);
      v47 = JSValueMakeUndefined(this);
LABEL_61:
      Undefined = v47;
      if (v19)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
      v45 = v28;
      goto LABEL_53;
    }
LABEL_60:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.duplicate()"), CFSTR("tabID"), CFSTR("a number is expected"), v14);
    v47 = JSValueMakeUndefined(this);
    goto LABEL_61;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.duplicate()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_54:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4A590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::update(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  unint64_t v14;
  const OpaqueJSContext *v15;
  OpaqueJSValue *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  unint64_t v19;
  unint64_t v20;
  NSString *v21;
  JSValueRef v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  JSValueRef v28;
  JSValueRef Undefined;
  int v30;
  OpaqueJSValue *v31;
  double v32;
  void *v33;
  const OpaqueJSContext *v34;
  const OpaqueJSValue *v35;
  const OpaqueJSValue *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  const OpaqueJSValue *v40;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v42;
  WebKit::WebExtensionCallbackHandler *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSString *v50;
  NSString *v51;
  WebKit::WebExtensionCallbackHandler *v52;
  void *v53;
  NSObject *v54;
  NSString *v55;
  __CFString *v57;
  __CFString *v58;
  unint64_t v59;
  id v61;
  WebKit::WebExtensionCallbackHandler *v62;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v65;
  JSObjectRef v66;
  uint8_t buf[8];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((_BYTE *)v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_73;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      v22 = a5[1];
      if (v22)
      {
        v23 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
        v25 = objc_claimAutoreleasedReturnValue();

        v26 = (void *)v25;
      }
      else
      {
        v26 = 0;
      }
      v30 = objc_msgSend(v26, "_isDictionary");

      if (v30)
      {
        if (JSValueIsObject(this, a5[2]) && (v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          v32 = JSValueToNumber(this, *a5, 0);
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = a5[2];
          v35 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v34, v35, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (v33)
          {
            if (!*(_QWORD *)buf)
            {
LABEL_49:
              reject = 0;
              resolve = 0;
              Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              v66 = resolve;
              *(_QWORD *)buf = this;
              v65 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v66, &v65, &v62);
              v18 = v62;
LABEL_50:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v42, buf);
              v43 = *(WebKit::WebExtensionCallbackHandler **)buf;
              if (*(_QWORD *)buf)
              {
                v44 = *(_QWORD *)(*(_QWORD *)buf + 24);
                if (v44)
                {
                  v45 = *(_QWORD *)(v44 + 8);
                  if (v45)
                  {
                    v46 = *(_QWORD *)(v45 + 24);
                    if (v46)
                    {
                      v47 = *(_QWORD *)(v46 + 8);
                      if (v47)
                      {
                        v48 = *(_QWORD **)(*(_QWORD *)(v47 + 48) + 16);
                        if (((*(uint64_t (**)(_QWORD *))(*v48 + 1368))(v48) & 1) == 0)
                        {
                          v49 = *(_QWORD *)(v48[2] + 8);
                          if (v49)
                          {
                            CFRetain(*(CFTypeRef *)(v49 - 8));
                            CFRelease(*((CFTypeRef *)v43 + 1));
                            *(_QWORD *)buf = v18;
                            v61 = 0;
                            WebKit::WebExtensionAPITabs::update(v11, v49 - 16, v33, (uint64_t *)buf, &v61, v32);
                            v51 = (NSString *)v61;
                            v52 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(_QWORD *)buf = 0;
                            if (v52)
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v52);
                            if (v51)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.update()"), 0, v51, v50);
                            }
                            else if (Undefined)
                            {
LABEL_62:

                              CFRelease(*(CFTypeRef *)(v49 - 8));
                              v53 = v33;
LABEL_72:

                              goto LABEL_73;
                            }
                            Undefined = JSValueMakeUndefined(this);
                            goto LABEL_62;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*((CFTypeRef *)v43 + 1));
              }
              v54 = qword_1ECE710C8;
              if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_196BCC000, v54, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined)
                  goto LABEL_67;
              }
              else if (!Undefined)
              {
                goto LABEL_67;
              }
              Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.update()"), 0, CFSTR("an unknown error occurred"), v55);
              if (Undefined)
              {
LABEL_68:
                v27 = (uint64_t)v33;
                goto LABEL_69;
              }
LABEL_67:
              Undefined = JSValueMakeUndefined(this);
              goto LABEL_68;
            }
LABEL_30:
            Undefined = 0;
            goto LABEL_50;
          }
          goto LABEL_20;
        }
        v57 = CFSTR("a function is expected");
        v58 = CFSTR("callback");
      }
      else
      {
        v57 = CFSTR("an object is expected");
        v58 = CFSTR("properties");
      }
    }
    else
    {
      v57 = CFSTR("a number is expected");
      v58 = CFSTR("tabID");
    }
    v53 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.update()"), &v58->isa, &v57->isa, v21);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_72;
  }
  if (a4)
  {
    v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      v18 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v19 = (unint64_t)a4 - 2;
          v20 = 1;
        }
        else
        {
          v18 = 0;
          v20 = 0;
          v19 = (unint64_t)a4 - 1;
        }
      }
      v36 = a5[v19];
      if (v36)
      {
        v59 = v20;
        v37 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v38 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "valueWithJSValueRef:inContext:", v36, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        LOBYTE(v38) = objc_msgSend(v39, "_isDictionary");
        if ((v38 & 1) == 0)
          goto LABEL_20;
        WebKit::toNSDictionary(this, v36, 0, 0);
        --v19;
        v27 = objc_claimAutoreleasedReturnValue();
        v20 = v59;
      }
      else
      {
        v27 = 0;
      }
      v32 = NAN;
      if (v20 < v14 && (v19 & 0x8000000000000000) == 0)
      {
        v40 = a5[v19];
        if (v40 && (JSValueIsNumber(this, v40) || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40)))
        {
          v32 = JSValueToNumber(this, v40, 0);
          --v19;
        }
        else
        {
          v32 = NAN;
        }
      }
      if (v27)
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          v33 = (void *)v27;
          if (!v18)
            goto LABEL_49;
          goto LABEL_30;
        }
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.update()"), 0, CFSTR("an unknown argument was provided"), v13);
        v28 = JSValueMakeUndefined(this);
LABEL_21:
        Undefined = v28;
LABEL_69:
        if (v18)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        v53 = (void *)v27;
        goto LABEL_72;
      }
    }
LABEL_20:
    v27 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.update()"), CFSTR("properties"), CFSTR("an object is expected"), v13);
    v28 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.update()"), 0, CFSTR("a required argument is missing"), v13);
  Undefined = JSValueMakeUndefined(this);
LABEL_73:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F4AFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (*(_DWORD *)(v17 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
  else
    --*(_DWORD *)(v17 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::remove(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  objc_class *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  JSValueRef Undefined;
  void *v18;
  OpaqueJSValue *v19;
  objc_class *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  NSString *v24;
  NSString *v25;
  WebKit::WebExtensionCallbackHandler *v26;
  JSValueRef v28;
  id v29;
  WebKit::WebExtensionCallbackHandler *v30;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v33;
  JSObjectRef v34;
  uint8_t buf[8];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_26;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    WebKit::toNSObject(this, *a5, 0, v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v18)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v16 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.remove()"), 0, CFSTR("a required argument is missing"), v15);
    v28 = JSValueMakeUndefined(this);
    goto LABEL_34;
  }
  if (JSValueIsObject(this, a5[1]) && (v19 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v19))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSObject(this, *a5, 0, v20);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = a5[1];
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v18)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.remove()"), CFSTR("tabIDs"), CFSTR("an object is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      if (v16)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
      goto LABEL_26;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_20;
    }
LABEL_19:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v34 = resolve;
    *(_QWORD *)buf = this;
    v33 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v34, &v33, &v30);
    v16 = v30;
LABEL_20:
    *(_QWORD *)buf = v16;
    v29 = 0;
    WebKit::WebExtensionAPITabs::remove(v12, v18, (uint64_t *)buf, &v29);
    v25 = (NSString *)v29;
    v26 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v26)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v26);
    if (v25)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.remove()"), 0, v25, v24);
    }
    else if (Undefined)
    {
LABEL_25:

      goto LABEL_26;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_25;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.remove()"), CFSTR("callback"), CFSTR("a function is expected"), v21);
  v28 = JSValueMakeUndefined(this);
LABEL_34:
  Undefined = v28;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4B574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::reload(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  NSString *v14;
  JSValueRef v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  const OpaqueJSContext *v21;
  OpaqueJSValue *v22;
  const OpaqueJSValue *v23;
  WebKit::WebExtensionCallbackHandler *v24;
  void *v25;
  double v26;
  char v27;
  OpaqueJSValue *v28;
  const OpaqueJSContext *v29;
  const OpaqueJSValue *v30;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v33;
  WebKit::WebExtensionCallbackHandler *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSString *v41;
  NSString *v42;
  WebKit::WebExtensionCallbackHandler *v43;
  void *v44;
  NSObject *v45;
  NSString *v46;
  void *v47;
  const OpaqueJSValue *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  const OpaqueJSValue *v54;
  double v55;
  __CFString *v56;
  __CFString *v57;
  id v59;
  WebKit::WebExtensionCallbackHandler *v60;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v63;
  JSObjectRef v64;
  uint8_t buf[8];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((_BYTE *)v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_53;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      v15 = a5[1];
      if (v15)
      {
        v16 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "valueWithJSValueRef:inContext:", v15, v17);
        v18 = objc_claimAutoreleasedReturnValue();

        v19 = (void *)v18;
      }
      else
      {
        v19 = 0;
      }
      v27 = objc_msgSend(v19, "_isDictionary");

      if ((v27 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (v28 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v28))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          v26 = JSValueToNumber(this, *a5, 0);
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = a5[2];
          v30 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v29, v30, buf);
          v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
          goto LABEL_28;
        }
        v56 = CFSTR("a function is expected");
        v57 = CFSTR("callback");
      }
      else
      {
        v56 = CFSTR("an object is expected");
        v57 = CFSTR("properties");
      }
    }
    else
    {
      v56 = CFSTR("a number is expected");
      v57 = CFSTR("tabID");
    }
    v44 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.reload()"), &v57->isa, &v56->isa, v14);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_52;
  }
  v20 = (char *)a4 - 1;
  if ((uint64_t)a4 - 1 < 0)
  {
    v25 = 0;
    v26 = NAN;
    goto LABEL_30;
  }
  v21 = a5[(_QWORD)v20];
  if (v21
    && (JSValueIsObject(this, a5[(_QWORD)v20]) && (v22 = JSValueToObject(this, v21, 0), JSObjectIsFunction(this, v22))
     || JSValueIsNull(this, v21)
     || JSValueIsUndefined(this, v21)))
  {
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    WebKit::toJSCallbackHandler((uint64_t)this, v21, v23, buf);
    v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v20 = (char *)a4 - 2;
    if ((uint64_t)a4 - 2 < 0)
    {
      v25 = 0;
LABEL_71:
      v26 = NAN;
      goto LABEL_28;
    }
  }
  else
  {
    v24 = 0;
  }
  v49 = a5[(_QWORD)v20];
  if (!v49)
    goto LABEL_64;
  v50 = (void *)MEMORY[0x1E0CBE108];
  objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
  v51 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "valueWithJSValueRef:inContext:", v49, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();

  LOBYTE(v51) = objc_msgSend(v52, "_isDictionary");
  if ((v51 & 1) != 0 || JSValueIsNull(this, v49) || JSValueIsUndefined(this, v49))
  {
    WebKit::toNSDictionary(this, v49, 0, 0);
    v53 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)v53;
    if (!v20)
      goto LABEL_71;
    --v20;
    v47 = (void *)v53;
  }
  else
  {
LABEL_64:
    v47 = 0;
  }
  v54 = a5[(_QWORD)v20];
  if (!v54
    || !JSValueIsNumber(this, v54) && !JSValueIsNull(this, v54) && !JSValueIsUndefined(this, v54)
    || (v55 = JSValueToNumber(this, v54, 0), v20))
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.reload()"), 0, CFSTR("an unknown argument was provided"), v13);
    Undefined = JSValueMakeUndefined(this);
    if (!v24)
      goto LABEL_51;
    goto LABEL_50;
  }
  v26 = v55;
  v25 = v47;
LABEL_28:
  if (v24)
  {
    Undefined = 0;
    goto LABEL_31;
  }
LABEL_30:
  reject = 0;
  resolve = 0;
  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v64 = resolve;
  *(_QWORD *)buf = this;
  v63 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v64, &v63, &v60);
  v24 = v60;
LABEL_31:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v33, buf);
  v34 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_45;
  v35 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v35
    || (v36 = *(_QWORD *)(v35 + 8)) == 0
    || (v37 = *(_QWORD *)(v36 + 24)) == 0
    || (v38 = *(_QWORD *)(v37 + 8)) == 0
    || (v39 = *(_QWORD **)(*(_QWORD *)(v38 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v39 + 1368))(v39) & 1) != 0)
    || (v40 = *(_QWORD *)(v39[2] + 8)) == 0)
  {
    CFRelease(*((CFTypeRef *)v34 + 1));
LABEL_45:
    v45 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v45, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_47:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.reload()"), 0, CFSTR("an unknown error occurred"), v46);
        if (Undefined)
          goto LABEL_49;
      }
    }
    else if (Undefined)
    {
      goto LABEL_47;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_49:
    v47 = v25;
    if (!v24)
    {
LABEL_51:
      v44 = v47;
      goto LABEL_52;
    }
LABEL_50:
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
    goto LABEL_51;
  }
  CFRetain(*(CFTypeRef *)(v40 - 8));
  CFRelease(*((CFTypeRef *)v34 + 1));
  *(_QWORD *)buf = v24;
  v59 = 0;
  WebKit::WebExtensionAPITabs::reload(v11, v40 - 16, v25, (uint64_t *)buf, &v59, v26);
  v42 = (NSString *)v59;
  v43 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v43)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v43);
  if (v42)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.reload()"), 0, v42, v41);
    goto LABEL_42;
  }
  if (!Undefined)
LABEL_42:
    Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v40 - 8));
  v44 = v25;
LABEL_52:

LABEL_53:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F4BF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
    else
      --*(_DWORD *)(v17 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::goBack(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  double v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  WebKit::WebExtensionCallbackHandler *v19;
  OpaqueJSValue *v20;
  OpaqueJSValue *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v26;
  WebKit::WebExtensionCallbackHandler *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  NSObject *v37;
  NSString *v38;
  __CFString *v40;
  __CFString *v41;
  NSString v42;
  WebKit::WebExtensionCallbackHandler *v43;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v46;
  JSObjectRef v47;
  uint8_t buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_47;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          v16 = JSValueToNumber(this, *a5, 0);
          v17 = a5[1];
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_26;
LABEL_24:
          Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_61;
      }
LABEL_62:
      v40 = CFSTR("a number is expected");
      v41 = CFSTR("tabID");
      goto LABEL_63;
    }
    v16 = NAN;
LABEL_26:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v47 = resolve;
    *(_QWORD *)buf = this;
    v46 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v47, &v46, &v43);
    v19 = v43;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    v27 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      v28 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 24);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              v32 = *(_QWORD **)(*(_QWORD *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v32 + 1368))(v32) & 1) == 0)
              {
                v33 = *(_QWORD *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*((CFTypeRef *)v27 + 1));
                  *(_QWORD *)buf = v19;
                  v42 = 0;
                  WebKit::WebExtensionAPITabs::goBack(v12, v33 - 16, (uint64_t *)buf, &v42, v16);
                  v35 = v42;
                  v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(_QWORD *)buf = 0;
                  if (v36)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.goBack()"), 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*((CFTypeRef *)v27 + 1));
    }
    v37 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.goBack()"), 0, CFSTR("an unknown error occurred"), v38);
        if (Undefined)
          goto LABEL_45;
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
        goto LABEL_62;
      v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v22 = *a5;
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v16 = NAN;
    if (*(_QWORD *)buf)
      goto LABEL_24;
    goto LABEL_26;
  }
LABEL_61:
  v40 = CFSTR("a function is expected");
  v41 = CFSTR("callback");
LABEL_63:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.goBack()"), &v41->isa, &v40->isa, v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4C688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::goForward(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  double v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  WebKit::WebExtensionCallbackHandler *v19;
  OpaqueJSValue *v20;
  OpaqueJSValue *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v26;
  WebKit::WebExtensionCallbackHandler *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  NSObject *v37;
  NSString *v38;
  __CFString *v40;
  __CFString *v41;
  NSString v42;
  WebKit::WebExtensionCallbackHandler *v43;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v46;
  JSObjectRef v47;
  uint8_t buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_47;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          v16 = JSValueToNumber(this, *a5, 0);
          v17 = a5[1];
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_26;
LABEL_24:
          Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_61;
      }
LABEL_62:
      v40 = CFSTR("a number is expected");
      v41 = CFSTR("tabID");
      goto LABEL_63;
    }
    v16 = NAN;
LABEL_26:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v47 = resolve;
    *(_QWORD *)buf = this;
    v46 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v47, &v46, &v43);
    v19 = v43;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    v27 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      v28 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 24);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              v32 = *(_QWORD **)(*(_QWORD *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v32 + 1368))(v32) & 1) == 0)
              {
                v33 = *(_QWORD *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*((CFTypeRef *)v27 + 1));
                  *(_QWORD *)buf = v19;
                  v42 = 0;
                  WebKit::WebExtensionAPITabs::goForward(v12, v33 - 16, (uint64_t *)buf, &v42, v16);
                  v35 = v42;
                  v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(_QWORD *)buf = 0;
                  if (v36)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.goForward()"), 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*((CFTypeRef *)v27 + 1));
    }
    v37 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.goForward()"), 0, CFSTR("an unknown error occurred"), v38);
        if (Undefined)
          goto LABEL_45;
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
        goto LABEL_62;
      v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v22 = *a5;
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v16 = NAN;
    if (*(_QWORD *)buf)
      goto LABEL_24;
    goto LABEL_26;
  }
LABEL_61:
  v40 = CFSTR("a function is expected");
  v41 = CFSTR("callback");
LABEL_63:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.goForward()"), &v41->isa, &v40->isa, v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4CDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::getZoom(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  double v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  WebKit::WebExtensionCallbackHandler *v19;
  OpaqueJSValue *v20;
  OpaqueJSValue *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v26;
  WebKit::WebExtensionCallbackHandler *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  NSObject *v37;
  NSString *v38;
  __CFString *v40;
  __CFString *v41;
  NSString v42;
  WebKit::WebExtensionCallbackHandler *v43;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v46;
  JSObjectRef v47;
  uint8_t buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_47;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          v16 = JSValueToNumber(this, *a5, 0);
          v17 = a5[1];
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_26;
LABEL_24:
          Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_61;
      }
LABEL_62:
      v40 = CFSTR("a number is expected");
      v41 = CFSTR("tabID");
      goto LABEL_63;
    }
    v16 = NAN;
LABEL_26:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v47 = resolve;
    *(_QWORD *)buf = this;
    v46 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v47, &v46, &v43);
    v19 = v43;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    v27 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      v28 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 24);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              v32 = *(_QWORD **)(*(_QWORD *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v32 + 1368))(v32) & 1) == 0)
              {
                v33 = *(_QWORD *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*((CFTypeRef *)v27 + 1));
                  *(_QWORD *)buf = v19;
                  v42 = 0;
                  WebKit::WebExtensionAPITabs::getZoom(v12, v33 - 16, (uint64_t *)buf, &v42, v16);
                  v35 = v42;
                  v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(_QWORD *)buf = 0;
                  if (v36)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.getZoom()"), 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*((CFTypeRef *)v27 + 1));
    }
    v37 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.getZoom()"), 0, CFSTR("an unknown error occurred"), v38);
        if (Undefined)
          goto LABEL_45;
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
        goto LABEL_62;
      v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v22 = *a5;
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v16 = NAN;
    if (*(_QWORD *)buf)
      goto LABEL_24;
    goto LABEL_26;
  }
LABEL_61:
  v40 = CFSTR("a function is expected");
  v41 = CFSTR("callback");
LABEL_63:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.getZoom()"), &v41->isa, &v40->isa, v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4D508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::setZoom(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  unint64_t v15;
  const OpaqueJSContext *v16;
  OpaqueJSValue *v17;
  const OpaqueJSValue *v18;
  WebKit::WebExtensionCallbackHandler *v19;
  unint64_t v20;
  unint64_t v21;
  NSString *v22;
  OpaqueJSValue *v23;
  double v24;
  double v25;
  const OpaqueJSContext *v26;
  const OpaqueJSValue *v27;
  const OpaqueJSValue *v28;
  const OpaqueJSValue *v29;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v32;
  WebKit::WebExtensionCallbackHandler *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  NSString *v40;
  NSString *v41;
  WebKit::WebExtensionCallbackHandler *v42;
  NSObject *v43;
  NSString *v44;
  JSValueRef v45;
  JSValueRef v47;
  __CFString *v48;
  __CFString *v49;
  NSString v50;
  WebKit::WebExtensionCallbackHandler *v51;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v54;
  JSObjectRef v55;
  uint8_t buf[8];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_67;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsNumber(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (v23 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v23))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          v24 = JSValueToNumber(this, *a5, 0);
          v25 = JSValueToNumber(this, a5[1], 0);
          v26 = a5[2];
          v27 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v26, v27, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            goto LABEL_43;
          goto LABEL_80;
        }
        v48 = CFSTR("a function is expected");
        v49 = CFSTR("callback");
      }
      else
      {
        v48 = CFSTR("a number is expected");
        v49 = CFSTR("zoomFactor");
      }
    }
    else
    {
      v48 = CFSTR("a number is expected");
      v49 = CFSTR("tabID");
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.setZoom()"), &v49->isa, &v48->isa, v22);
    v47 = JSValueMakeUndefined(this);
  }
  else
  {
    if (a4)
    {
      v15 = (unint64_t)a4 - 1;
      if ((uint64_t)a4 - 1 < 0)
      {
        v19 = 0;
        v24 = NAN;
        v25 = NAN;
        goto LABEL_41;
      }
      if (a4 == (OpaqueJSValue *)1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
      }
      else
      {
        v16 = a5[v15];
        if (v16
          && (JSValueIsObject(this, a5[v15]) && (v17 = JSValueToObject(this, v16, 0), JSObjectIsFunction(this, v17))
           || JSValueIsNull(this, v16)
           || JSValueIsUndefined(this, v16)))
        {
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v16, v18, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v20 = (unint64_t)a4 - 2;
          v21 = 1;
        }
        else
        {
          v19 = 0;
          v21 = 0;
          v20 = (unint64_t)a4 - 1;
        }
      }
      v28 = a5[v20];
      if (v28)
      {
        if (!JSValueIsNumber(this, a5[v20]))
          goto LABEL_80;
        v25 = JSValueToNumber(this, v28, 0);
        --v20;
      }
      else
      {
        v25 = NAN;
      }
      v24 = NAN;
      if (v21 < v15 && (v20 & 0x8000000000000000) == 0)
      {
        v29 = a5[v20];
        if (v29 && (JSValueIsNumber(this, v29) || JSValueIsNull(this, v29) || JSValueIsUndefined(this, v29)))
        {
          v24 = JSValueToNumber(this, v29, 0);
          v15 = v20 - 1;
          goto LABEL_41;
        }
        v24 = NAN;
      }
      v15 = v20;
LABEL_41:
      if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        if ((v15 & 0x8000000000000000) == 0)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.setZoom()"), 0, CFSTR("an unknown argument was provided"), v14);
          v45 = JSValueMakeUndefined(this);
          goto LABEL_64;
        }
LABEL_43:
        if (v19)
        {
          Undefined = 0;
        }
        else
        {
          reject = 0;
          resolve = 0;
          Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
          v55 = resolve;
          *(_QWORD *)buf = this;
          v54 = reject;
          WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v55, &v54, &v51);
          v19 = v51;
        }
        GlobalContext = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v32, buf);
        v33 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(_QWORD *)buf)
        {
          v34 = *(_QWORD *)(*(_QWORD *)buf + 24);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 8);
            if (v35)
            {
              v36 = *(_QWORD *)(v35 + 24);
              if (v36)
              {
                v37 = *(_QWORD *)(v36 + 8);
                if (v37)
                {
                  v38 = *(_QWORD **)(*(_QWORD *)(v37 + 48) + 16);
                  if (((*(uint64_t (**)(_QWORD *))(*v38 + 1368))(v38) & 1) == 0)
                  {
                    v39 = *(_QWORD *)(v38[2] + 8);
                    if (v39)
                    {
                      CFRetain(*(CFTypeRef *)(v39 - 8));
                      CFRelease(*((CFTypeRef *)v33 + 1));
                      *(_QWORD *)buf = v19;
                      v50 = 0;
                      WebKit::WebExtensionAPITabs::setZoom(v12, v39 - 16, (uint64_t *)buf, &v50, v24, v25);
                      v41 = v50;
                      v42 = *(WebKit::WebExtensionCallbackHandler **)buf;
                      *(_QWORD *)buf = 0;
                      if (v42)
                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v42);
                      if (v41)
                      {
                        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.setZoom()"), 0, v41, v40);
                      }
                      else if (Undefined)
                      {
LABEL_58:

                        CFRelease(*(CFTypeRef *)(v39 - 8));
                        goto LABEL_67;
                      }
                      Undefined = JSValueMakeUndefined(this);
                      goto LABEL_58;
                    }
                  }
                }
              }
            }
          }
          CFRelease(*((CFTypeRef *)v33 + 1));
        }
        v43 = qword_1ECE710C8;
        if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_196BCC000, v43, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          if (Undefined)
          {
LABEL_62:
            Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.setZoom()"), 0, CFSTR("an unknown error occurred"), v44);
            if (Undefined)
              goto LABEL_65;
          }
        }
        else if (Undefined)
        {
          goto LABEL_62;
        }
        v45 = JSValueMakeUndefined(this);
LABEL_64:
        Undefined = v45;
LABEL_65:
        if (v19)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
        goto LABEL_67;
      }
LABEL_80:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.setZoom()"), CFSTR("zoomFactor"), CFSTR("a number is expected"), v14);
      v45 = JSValueMakeUndefined(this);
      goto LABEL_64;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.setZoom()"), 0, CFSTR("a required argument is missing"), v14);
    v47 = JSValueMakeUndefined(this);
  }
  Undefined = v47;
LABEL_67:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4DDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::detectLanguage(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  double v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  WebKit::WebExtensionCallbackHandler *v19;
  OpaqueJSValue *v20;
  OpaqueJSValue *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v26;
  WebKit::WebExtensionCallbackHandler *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  NSObject *v37;
  NSString *v38;
  __CFString *v40;
  __CFString *v41;
  NSString v42;
  WebKit::WebExtensionCallbackHandler *v43;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v46;
  JSObjectRef v47;
  uint8_t buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_47;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          v16 = JSValueToNumber(this, *a5, 0);
          v17 = a5[1];
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_26;
LABEL_24:
          Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_61;
      }
LABEL_62:
      v40 = CFSTR("a number is expected");
      v41 = CFSTR("tabID");
      goto LABEL_63;
    }
    v16 = NAN;
LABEL_26:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v47 = resolve;
    *(_QWORD *)buf = this;
    v46 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v47, &v46, &v43);
    v19 = v43;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    v27 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      v28 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 24);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              v32 = *(_QWORD **)(*(_QWORD *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v32 + 1368))(v32) & 1) == 0)
              {
                v33 = *(_QWORD *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*((CFTypeRef *)v27 + 1));
                  *(_QWORD *)buf = v19;
                  v42 = 0;
                  WebKit::WebExtensionAPITabs::detectLanguage(v12, v33 - 16, (uint64_t *)buf, &v42, v16);
                  v35 = v42;
                  v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(_QWORD *)buf = 0;
                  if (v36)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.detectLanguage()"), 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*((CFTypeRef *)v27 + 1));
    }
    v37 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.detectLanguage()"), 0, CFSTR("an unknown error occurred"), v38);
        if (Undefined)
          goto LABEL_45;
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
        goto LABEL_62;
      v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v22 = *a5;
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v16 = NAN;
    if (*(_QWORD *)buf)
      goto LABEL_24;
    goto LABEL_26;
  }
LABEL_61:
  v40 = CFSTR("a function is expected");
  v41 = CFSTR("callback");
LABEL_63:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.detectLanguage()"), &v41->isa, &v40->isa, v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4E544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::toggleReaderMode(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  double v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  WebKit::WebExtensionCallbackHandler *v19;
  OpaqueJSValue *v20;
  OpaqueJSValue *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v26;
  WebKit::WebExtensionCallbackHandler *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  NSObject *v37;
  NSString *v38;
  __CFString *v40;
  __CFString *v41;
  NSString v42;
  WebKit::WebExtensionCallbackHandler *v43;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v46;
  JSObjectRef v47;
  uint8_t buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_47;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          v16 = JSValueToNumber(this, *a5, 0);
          v17 = a5[1];
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_26;
LABEL_24:
          Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_61;
      }
LABEL_62:
      v40 = CFSTR("a number is expected");
      v41 = CFSTR("tabID");
      goto LABEL_63;
    }
    v16 = NAN;
LABEL_26:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v47 = resolve;
    *(_QWORD *)buf = this;
    v46 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v47, &v46, &v43);
    v19 = v43;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    v27 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      v28 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 24);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              v32 = *(_QWORD **)(*(_QWORD *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v32 + 1368))(v32) & 1) == 0)
              {
                v33 = *(_QWORD *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*((CFTypeRef *)v27 + 1));
                  *(_QWORD *)buf = v19;
                  v42 = 0;
                  WebKit::WebExtensionAPITabs::toggleReaderMode(v12, v33 - 16, (uint64_t *)buf, &v42, v16);
                  v35 = v42;
                  v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(_QWORD *)buf = 0;
                  if (v36)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.toggleReaderMode()"), 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*((CFTypeRef *)v27 + 1));
    }
    v37 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.toggleReaderMode()"), 0, CFSTR("an unknown error occurred"), v38);
        if (Undefined)
          goto LABEL_45;
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
        goto LABEL_62;
      v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v22 = *a5;
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v16 = NAN;
    if (*(_QWORD *)buf)
      goto LABEL_24;
    goto LABEL_26;
  }
LABEL_61:
  v40 = CFSTR("a function is expected");
  v41 = CFSTR("callback");
LABEL_63:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.toggleReaderMode()"), &v41->isa, &v40->isa, v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F4EC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::captureVisibleTab(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  NSString *v14;
  JSValueRef v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  const OpaqueJSContext *v21;
  OpaqueJSValue *v22;
  const OpaqueJSValue *v23;
  WebKit::WebExtensionCallbackHandler *v24;
  void *v25;
  double v26;
  char v27;
  OpaqueJSValue *v28;
  const OpaqueJSContext *v29;
  const OpaqueJSValue *v30;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v33;
  WebKit::WebExtensionCallbackHandler *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSString *v41;
  NSString *v42;
  WebKit::WebExtensionCallbackHandler *v43;
  void *v44;
  NSObject *v45;
  NSString *v46;
  void *v47;
  const OpaqueJSValue *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  const OpaqueJSValue *v54;
  double v55;
  __CFString *v56;
  __CFString *v57;
  id v59;
  WebKit::WebExtensionCallbackHandler *v60;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v63;
  JSObjectRef v64;
  uint8_t buf[8];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((_BYTE *)v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_53;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      v15 = a5[1];
      if (v15)
      {
        v16 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "valueWithJSValueRef:inContext:", v15, v17);
        v18 = objc_claimAutoreleasedReturnValue();

        v19 = (void *)v18;
      }
      else
      {
        v19 = 0;
      }
      v27 = objc_msgSend(v19, "_isDictionary");

      if ((v27 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (v28 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v28))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          v26 = JSValueToNumber(this, *a5, 0);
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = a5[2];
          v30 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v29, v30, buf);
          v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
          goto LABEL_28;
        }
        v56 = CFSTR("a function is expected");
        v57 = CFSTR("callback");
      }
      else
      {
        v56 = CFSTR("an object is expected");
        v57 = CFSTR("options");
      }
    }
    else
    {
      v56 = CFSTR("a number is expected");
      v57 = CFSTR("windowID");
    }
    v44 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.captureVisibleTab()"), &v57->isa, &v56->isa, v14);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_52;
  }
  v20 = (char *)a4 - 1;
  if ((uint64_t)a4 - 1 < 0)
  {
    v25 = 0;
    v26 = NAN;
    goto LABEL_30;
  }
  v21 = a5[(_QWORD)v20];
  if (v21
    && (JSValueIsObject(this, a5[(_QWORD)v20]) && (v22 = JSValueToObject(this, v21, 0), JSObjectIsFunction(this, v22))
     || JSValueIsNull(this, v21)
     || JSValueIsUndefined(this, v21)))
  {
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    WebKit::toJSCallbackHandler((uint64_t)this, v21, v23, buf);
    v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v20 = (char *)a4 - 2;
    if ((uint64_t)a4 - 2 < 0)
    {
      v25 = 0;
LABEL_71:
      v26 = NAN;
      goto LABEL_28;
    }
  }
  else
  {
    v24 = 0;
  }
  v49 = a5[(_QWORD)v20];
  if (!v49)
    goto LABEL_64;
  v50 = (void *)MEMORY[0x1E0CBE108];
  objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
  v51 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "valueWithJSValueRef:inContext:", v49, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();

  LOBYTE(v51) = objc_msgSend(v52, "_isDictionary");
  if ((v51 & 1) != 0 || JSValueIsNull(this, v49) || JSValueIsUndefined(this, v49))
  {
    WebKit::toNSDictionary(this, v49, 0, 0);
    v53 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)v53;
    if (!v20)
      goto LABEL_71;
    --v20;
    v47 = (void *)v53;
  }
  else
  {
LABEL_64:
    v47 = 0;
  }
  v54 = a5[(_QWORD)v20];
  if (!v54
    || !JSValueIsNumber(this, v54) && !JSValueIsNull(this, v54) && !JSValueIsUndefined(this, v54)
    || (v55 = JSValueToNumber(this, v54, 0), v20))
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.captureVisibleTab()"), 0, CFSTR("an unknown argument was provided"), v13);
    Undefined = JSValueMakeUndefined(this);
    if (!v24)
      goto LABEL_51;
    goto LABEL_50;
  }
  v26 = v55;
  v25 = v47;
LABEL_28:
  if (v24)
  {
    Undefined = 0;
    goto LABEL_31;
  }
LABEL_30:
  reject = 0;
  resolve = 0;
  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v64 = resolve;
  *(_QWORD *)buf = this;
  v63 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v64, &v63, &v60);
  v24 = v60;
LABEL_31:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v33, buf);
  v34 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_45;
  v35 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v35
    || (v36 = *(_QWORD *)(v35 + 8)) == 0
    || (v37 = *(_QWORD *)(v36 + 24)) == 0
    || (v38 = *(_QWORD *)(v37 + 8)) == 0
    || (v39 = *(_QWORD **)(*(_QWORD *)(v38 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v39 + 1368))(v39) & 1) != 0)
    || (v40 = *(_QWORD *)(v39[2] + 8)) == 0)
  {
    CFRelease(*((CFTypeRef *)v34 + 1));
LABEL_45:
    v45 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v45, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_47:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.captureVisibleTab()"), 0, CFSTR("an unknown error occurred"), v46);
        if (Undefined)
          goto LABEL_49;
      }
    }
    else if (Undefined)
    {
      goto LABEL_47;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_49:
    v47 = v25;
    if (!v24)
    {
LABEL_51:
      v44 = v47;
      goto LABEL_52;
    }
LABEL_50:
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
    goto LABEL_51;
  }
  CFRetain(*(CFTypeRef *)(v40 - 8));
  CFRelease(*((CFTypeRef *)v34 + 1));
  *(_QWORD *)buf = v24;
  v59 = 0;
  WebKit::WebExtensionAPITabs::captureVisibleTab(v11, v40 - 16, v25, (uint64_t *)buf, &v59, v26);
  v42 = (NSString *)v59;
  v43 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v43)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v43);
  if (v42)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.captureVisibleTab()"), 0, v42, v41);
    goto LABEL_42;
  }
  if (!Undefined)
LABEL_42:
    Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v40 - 8));
  v44 = v25;
LABEL_52:

LABEL_53:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F4F624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
    else
      --*(_DWORD *)(v17 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::sendMessage(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, unint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  unint64_t v14;
  NSString *v15;
  OpaqueJSValue *v16;
  JSValueRef v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  WebKit::WebExtensionCallbackHandler *v22;
  uint64_t v23;
  const OpaqueJSContext *v24;
  OpaqueJSValue *v25;
  const OpaqueJSValue *v26;
  const OpaqueJSValue *v27;
  NSString *v28;
  double v29;
  const OpaqueJSValue *v30;
  OpaqueJSValue *v31;
  const OpaqueJSValue **v32;
  unint64_t v33;
  void *v34;
  void *v35;
  const OpaqueJSValue *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  char v40;
  OpaqueJSValue *v41;
  const OpaqueJSValue **v42;
  uint64_t v43;
  uint64_t v44;
  const OpaqueJSContext *v45;
  const OpaqueJSValue *v46;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v49;
  NSString *v50;
  NSString *v51;
  WebKit::WebExtensionCallbackHandler *v52;
  void *v53;
  __CFString *v55;
  __CFString *v56;
  JSObjectRef v57;
  JSValueRef v58;
  NSObject *v59;
  NSString *v60;
  __CFString *v61;
  __CFString *v62;
  const OpaqueJSValue **exception;
  id v64;
  WebKit::WebExtensionCallbackHandler *v65;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v68;
  uint8_t v69[8];
  uint8_t buf[8];
  uint64_t v71;

  exception = a6;
  v71 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((_BYTE *)v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_67;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v14 = a4 - 1;
  if (a4 > 1)
  {
    if (a4 == 2)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      if (a4 == 4)
      {
        if (JSValueIsNumber(this, *a5))
        {
          if (JSValueIsNull(this, a5[1])
            || JSValueIsUndefined(this, a5[1])
            || (v16 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v16)))
          {
            v55 = CFSTR("an object is expected");
            v56 = CFSTR("message");
          }
          else
          {
            v17 = a5[2];
            if (v17)
            {
              v18 = (void *)MEMORY[0x1E0CBE108];
              objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
              v20 = objc_claimAutoreleasedReturnValue();

              v21 = (void *)v20;
            }
            else
            {
              v21 = 0;
            }
            v40 = objc_msgSend(v21, "_isDictionary", exception);

            if ((v40 & 1) != 0 || JSValueIsNull(this, a5[2]) || JSValueIsUndefined(this, a5[2]))
            {
              if (JSValueIsObject(this, a5[3])
                && (v41 = JSValueToObject(this, a5[3], 0), JSObjectIsFunction(this, v41))
                || JSValueIsNull(this, a5[3])
                || JSValueIsUndefined(this, a5[3]))
              {
                v29 = JSValueToNumber(this, *a5, 0);
                WebKit::serializeJSObject(this, a5[1], exception, v42);
                v43 = objc_claimAutoreleasedReturnValue();
                WebKit::toNSDictionary(this, a5[2], 0, 0);
                v44 = objc_claimAutoreleasedReturnValue();
                v45 = a5[3];
                v46 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
                WebKit::toJSCallbackHandler((uint64_t)this, v45, v46, buf);
                v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
                v33 = 4;
                a4 = 4;
                v34 = (void *)v43;
                v35 = (void *)v44;
                goto LABEL_47;
              }
              v55 = CFSTR("a function is expected");
              v56 = CFSTR("callback");
            }
            else
            {
              v55 = CFSTR("an object is expected");
              v56 = CFSTR("options");
            }
          }
        }
        else
        {
          v55 = CFSTR("a number is expected");
          v56 = CFSTR("tabID");
        }
        v53 = 0;
        *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.sendMessage()"), &v56->isa, &v55->isa, v15);
        Undefined = JSValueMakeUndefined(this);
        v34 = 0;
LABEL_66:

        goto LABEL_67;
      }
      v24 = a5[v14];
      if (v24
        && (JSValueIsObject(this, a5[v14]) && (v25 = JSValueToObject(this, v24, 0), JSObjectIsFunction(this, v25))
         || JSValueIsNull(this, v24)
         || JSValueIsUndefined(this, v24)))
      {
        v26 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        WebKit::toJSCallbackHandler((uint64_t)this, v24, v26, buf);
        v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
        v23 = a4 - 3;
        --a4;
      }
      else
      {
        v22 = 0;
        v23 = 1;
      }
    }
    v27 = *a5;
    if (*a5)
    {
      if (JSValueIsNumber(this, *a5))
      {
        v29 = JSValueToNumber(this, v27, 0);
        v30 = a5[1];
        if (!v30)
        {
          v34 = 0;
          v33 = 1;
          goto LABEL_30;
        }
        if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, v30))
        {
          v31 = JSValueToObject(this, v30, 0);
          if (!JSObjectIsFunction(this, v31))
          {
            WebKit::serializeJSObject(this, v30, exception, v32);
            v33 = 2;
            v34 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_30:
            v35 = 0;
            if (v23 && v33 < a4)
            {
              v36 = a5[v33];
              if (!v36)
                goto LABEL_37;
              v37 = (void *)MEMORY[0x1E0CBE108];
              objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
              v38 = objc_claimAutoreleasedReturnValue();
              objc_msgSend(v37, "valueWithJSValueRef:inContext:", v36, v38);
              v39 = (void *)objc_claimAutoreleasedReturnValue();

              LOBYTE(v38) = objc_msgSend(v39, "_isDictionary");
              if ((v38 & 1) != 0 || JSValueIsNull(this, v36) || JSValueIsUndefined(this, v36))
              {
                WebKit::toNSDictionary(this, v36, 0, 0);
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                ++v33;
              }
              else
              {
LABEL_37:
                v35 = 0;
              }
            }
LABEL_47:
            if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              v57 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.sendMessage()"), CFSTR("tabID"), CFSTR("a number is expected"), v13);
            }
            else
            {
              if (*exception)
              {
LABEL_80:
                v58 = JSValueMakeUndefined(this);
                goto LABEL_81;
              }
              if (!v34)
              {
                v34 = 0;
                *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.sendMessage()"), CFSTR("message"), CFSTR("a JSON serializable value is expected"), v13);
                v58 = JSValueMakeUndefined(this);
LABEL_81:
                Undefined = v58;
LABEL_63:
                if (v22)
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v22);
                v53 = v35;
                goto LABEL_66;
              }
              if (v33 >= a4)
              {
                if (v22)
                {
                  Undefined = 0;
                }
                else
                {
                  reject = 0;
                  resolve = 0;
                  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
                  *(_QWORD *)buf = this;
                  v68 = reject;
                  *(_QWORD *)v69 = resolve;
                  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v69, &v68, &v65);
                  v22 = v65;
                }
                GlobalContext = JSContextGetGlobalContext(this);
                WebKit::WebFrame::frameForContext(GlobalContext, v49, buf);
                if (*(_QWORD *)buf)
                {
                  *(_QWORD *)v69 = v22;
                  v64 = 0;
                  WebKit::WebExtensionAPITabs::sendMessage(v11, *(WebKit::WebFrame **)buf, v34, v35, (uint64_t *)v69, &v64, v29);
                  v51 = (NSString *)v64;
                  v52 = *(WebKit::WebExtensionCallbackHandler **)v69;
                  *(_QWORD *)v69 = 0;
                  if (v52)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v52);
                  if (v51)
                  {
                    *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.sendMessage()"), 0, v51, v50);
                  }
                  else if (Undefined)
                  {
LABEL_60:

                    if (*(_QWORD *)buf)
                      CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
                    v22 = 0;
                    goto LABEL_63;
                  }
                  Undefined = JSValueMakeUndefined(this);
                  goto LABEL_60;
                }
                v59 = qword_1ECE710C8;
                if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v69 = 0;
                  _os_log_error_impl(&dword_196BCC000, v59, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v69, 2u);
                  if (Undefined)
                  {
LABEL_84:
                    Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.sendMessage()"), 0, CFSTR("an unknown error occurred"), v60);
                    if (Undefined)
                      goto LABEL_63;
                  }
                }
                else if (Undefined)
                {
                  goto LABEL_84;
                }
                v58 = JSValueMakeUndefined(this);
                goto LABEL_81;
              }
              v57 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.sendMessage()"), 0, CFSTR("an unknown argument was provided"), v13);
            }
            *exception = v57;
            goto LABEL_80;
          }
        }
        v61 = CFSTR("an object is expected");
        v62 = CFSTR("message");
      }
      else
      {
        v61 = CFSTR("a number is expected");
        v62 = CFSTR("tabID");
      }
      v34 = 0;
      *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.sendMessage()"), &v62->isa, &v61->isa, v28);
      Undefined = JSValueMakeUndefined(this);
      v35 = 0;
      goto LABEL_63;
    }
    v33 = 0;
    v34 = 0;
    v29 = NAN;
    goto LABEL_30;
  }
  *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.sendMessage()"), 0, CFSTR("a required argument is missing"), v13);
  Undefined = JSValueMakeUndefined(this);
LABEL_67:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F501DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  WebKit::WebExtensionCallbackHandler *v18;
  void *v19;
  void *v20;

  if (a17)
    CFRelease(*(CFTypeRef *)(a17 + 8));
  if (v18)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);

  if (*(_DWORD *)(v17 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
  else
    --*(_DWORD *)(v17 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITabs::connect(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITabs *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  void *v15;
  double v16;
  NSString *v17;
  JSValueRef v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v24;
  WebKit::WebFrame *v25;
  NSString *v26;
  void *v27;
  NSString *v28;
  JSValueRef Undefined;
  uint64_t v30;
  JSValueRef v32;
  NSObject *v33;
  __CFString *v34;
  __CFString *v35;
  id v36;
  uint8_t v37[8];
  uint8_t buf[8];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_31;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsNumber(this, *a5))
    {
      v15 = 0;
      v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_18;
    }
    goto LABEL_44;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsNumber(this, *a5))
    {
      v18 = a5[1];
      if (v18)
      {
        v19 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "valueWithJSValueRef:inContext:", v18, v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v21 = 0;
      }
      v22 = objc_msgSend(v21, "_isDictionary");

      if ((v22 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        v16 = JSValueToNumber(this, *a5, 0);
        WebKit::toNSDictionary(this, a5[1], 0, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_18:
        if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.connect()"), CFSTR("tabID"), CFSTR("a number is expected"), v14);
          v32 = JSValueMakeUndefined(this);
        }
        else
        {
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v24, buf);
          v25 = *(WebKit::WebFrame **)buf;
          if (*(_QWORD *)buf)
          {
            v36 = 0;
            WebKit::WebExtensionAPITabs::connect(v12, *(WebKit::WebFrame **)buf, this, v15, &v36, (uint64_t *)v37, v16);
            v26 = (NSString *)v36;
            if (*(_QWORD *)v37)
              v27 = (void *)(*(_QWORD *)v37 + 40);
            else
              v27 = 0;
            Undefined = WebKit::JSWebExtensionWrapper::wrap(this, v27);
            v30 = *(_QWORD *)v37;
            *(_QWORD *)v37 = 0;
            if (v30)
            {
              if (*(_DWORD *)(v30 + 48) == 1)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)(v30 + 40) + 8))(v30 + 40);
                if (v26)
                {
LABEL_43:
                  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.connect()"), 0, v26, v28);
                  Undefined = JSValueMakeUndefined(this);
                }
LABEL_29:

                CFRelease(*((CFTypeRef *)v25 + 1));
LABEL_30:

                goto LABEL_31;
              }
              --*(_DWORD *)(v30 + 48);
            }
            if (v26)
              goto LABEL_43;
            goto LABEL_29;
          }
          v33 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v37 = 0;
            _os_log_error_impl(&dword_196BCC000, v33, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v37, 2u);
          }
          v32 = JSValueMakeUndefined(this);
        }
LABEL_46:
        Undefined = v32;
        goto LABEL_30;
      }
      v34 = CFSTR("an object is expected");
      v35 = CFSTR("options");
LABEL_45:
      v15 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.connect()"), &v35->isa, &v34->isa, v17);
      v32 = JSValueMakeUndefined(this);
      goto LABEL_46;
    }
LABEL_44:
    v34 = CFSTR("a number is expected");
    v35 = CFSTR("tabID");
    goto LABEL_45;
  }
  if (a4)
  {
    v15 = 0;
    v16 = NAN;
    goto LABEL_18;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.connect()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_31:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F50888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v16;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITabs::tabIdentifierNone(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    Undefined = JSValueMakeNumber(this, -1.0);
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F50B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onActivated(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPITabs::onActivated(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F50E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onAttached(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPITabs::onAttached(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F51098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onCreated(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPITabs::onCreated(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F51320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onDetached(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPITabs::onDetached(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F515A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onHighlighted(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPITabs::onHighlighted(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F51830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onMoved(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPITabs::onMoved(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F51AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onRemoved(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPITabs::onRemoved(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F51D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onReplaced(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPITabs::onReplaced(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F51FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onUpdated(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPITabs *v6;
  WebKit::JSWebExtensionAPITabs *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPITabs::onUpdated(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F52250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::getSelected(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  double v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  WebKit::WebExtensionCallbackHandler *v19;
  OpaqueJSValue *v20;
  OpaqueJSValue *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v26;
  WebKit::WebExtensionCallbackHandler *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  NSObject *v37;
  NSString *v38;
  __CFString *v40;
  __CFString *v41;
  NSString v42;
  WebKit::WebExtensionCallbackHandler *v43;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v46;
  JSObjectRef v47;
  uint8_t buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v12 = v11;
  if (!v11 || (++*(_DWORD *)(v11 + 48), *(_BYTE *)(v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_47;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          v16 = JSValueToNumber(this, *a5, 0);
          v17 = a5[1];
          v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_26;
LABEL_24:
          Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_61;
      }
LABEL_62:
      v40 = CFSTR("a number is expected");
      v41 = CFSTR("windowID");
      goto LABEL_63;
    }
    v16 = NAN;
LABEL_26:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v47 = resolve;
    *(_QWORD *)buf = this;
    v46 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v47, &v46, &v43);
    v19 = v43;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    v27 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      v28 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 24);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              v32 = *(_QWORD **)(*(_QWORD *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v32 + 1368))(v32) & 1) == 0)
              {
                v33 = *(_QWORD *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*((CFTypeRef *)v27 + 1));
                  *(_QWORD *)buf = v19;
                  v42 = 0;
                  WebKit::WebExtensionAPITabs::getSelected(v12, v33 - 16, (uint64_t *)buf, &v42, v16);
                  v35 = v42;
                  v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(_QWORD *)buf = 0;
                  if (v36)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.getSelected()"), 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*((CFTypeRef *)v27 + 1));
    }
    v37 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.getSelected()"), 0, CFSTR("an unknown error occurred"), v38);
        if (Undefined)
          goto LABEL_45;
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
        goto LABEL_62;
      v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    v22 = *a5;
    v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    v16 = NAN;
    if (*(_QWORD *)buf)
      goto LABEL_24;
    goto LABEL_26;
  }
LABEL_61:
  v40 = CFSTR("a function is expected");
  v41 = CFSTR("callback");
LABEL_63:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.getSelected()"), &v41->isa, &v40->isa, v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F5292C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::executeScript(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  unint64_t v14;
  const OpaqueJSContext *v15;
  OpaqueJSValue *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  unint64_t v19;
  unint64_t v20;
  NSString *v21;
  JSValueRef v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  JSValueRef v28;
  JSValueRef Undefined;
  int v30;
  OpaqueJSValue *v31;
  double v32;
  void *v33;
  const OpaqueJSContext *v34;
  const OpaqueJSValue *v35;
  const OpaqueJSValue *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  const OpaqueJSValue *v40;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v42;
  WebKit::WebExtensionCallbackHandler *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSString *v50;
  NSString *v51;
  WebKit::WebExtensionCallbackHandler *v52;
  void *v53;
  NSObject *v54;
  NSString *v55;
  __CFString *v57;
  __CFString *v58;
  unint64_t v59;
  id v61;
  WebKit::WebExtensionCallbackHandler *v62;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v65;
  JSObjectRef v66;
  uint8_t buf[8];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v11 = v10;
  if (!v10 || (++*(_DWORD *)(v10 + 48), *(_BYTE *)(v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_73;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      v22 = a5[1];
      if (v22)
      {
        v23 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
        v25 = objc_claimAutoreleasedReturnValue();

        v26 = (void *)v25;
      }
      else
      {
        v26 = 0;
      }
      v30 = objc_msgSend(v26, "_isDictionary");

      if (v30)
      {
        if (JSValueIsObject(this, a5[2]) && (v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          v32 = JSValueToNumber(this, *a5, 0);
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = a5[2];
          v35 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v34, v35, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (v33)
          {
            if (!*(_QWORD *)buf)
            {
LABEL_49:
              reject = 0;
              resolve = 0;
              Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              v66 = resolve;
              *(_QWORD *)buf = this;
              v65 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v66, &v65, &v62);
              v18 = v62;
LABEL_50:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v42, buf);
              v43 = *(WebKit::WebExtensionCallbackHandler **)buf;
              if (*(_QWORD *)buf)
              {
                v44 = *(_QWORD *)(*(_QWORD *)buf + 24);
                if (v44)
                {
                  v45 = *(_QWORD *)(v44 + 8);
                  if (v45)
                  {
                    v46 = *(_QWORD *)(v45 + 24);
                    if (v46)
                    {
                      v47 = *(_QWORD *)(v46 + 8);
                      if (v47)
                      {
                        v48 = *(_QWORD **)(*(_QWORD *)(v47 + 48) + 16);
                        if (((*(uint64_t (**)(_QWORD *))(*v48 + 1368))(v48) & 1) == 0)
                        {
                          v49 = *(_QWORD *)(v48[2] + 8);
                          if (v49)
                          {
                            CFRetain(*(CFTypeRef *)(v49 - 8));
                            CFRelease(*((CFTypeRef *)v43 + 1));
                            *(_QWORD *)buf = v18;
                            v61 = 0;
                            WebKit::WebExtensionAPITabs::executeScript(v11, v49 - 16, v33, (uint64_t *)buf, &v61, v32);
                            v51 = (NSString *)v61;
                            v52 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(_QWORD *)buf = 0;
                            if (v52)
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v52);
                            if (v51)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.executeScript()"), 0, v51, v50);
                            }
                            else if (Undefined)
                            {
LABEL_62:

                              CFRelease(*(CFTypeRef *)(v49 - 8));
                              v53 = v33;
LABEL_72:

                              goto LABEL_73;
                            }
                            Undefined = JSValueMakeUndefined(this);
                            goto LABEL_62;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*((CFTypeRef *)v43 + 1));
              }
              v54 = qword_1ECE710C8;
              if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_196BCC000, v54, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined)
                  goto LABEL_67;
              }
              else if (!Undefined)
              {
                goto LABEL_67;
              }
              Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.executeScript()"), 0, CFSTR("an unknown error occurred"), v55);
              if (Undefined)
              {
LABEL_68:
                v27 = (uint64_t)v33;
                goto LABEL_69;
              }
LABEL_67:
              Undefined = JSValueMakeUndefined(this);
              goto LABEL_68;
            }
LABEL_30:
            Undefined = 0;
            goto LABEL_50;
          }
          goto LABEL_20;
        }
        v57 = CFSTR("a function is expected");
        v58 = CFSTR("callback");
      }
      else
      {
        v57 = CFSTR("an object is expected");
        v58 = CFSTR("details");
      }
    }
    else
    {
      v57 = CFSTR("a number is expected");
      v58 = CFSTR("tabID");
    }
    v53 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.executeScript()"), &v58->isa, &v57->isa, v21);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_72;
  }
  if (a4)
  {
    v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      v18 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v19 = (unint64_t)a4 - 2;
          v20 = 1;
        }
        else
        {
          v18 = 0;
          v20 = 0;
          v19 = (unint64_t)a4 - 1;
        }
      }
      v36 = a5[v19];
      if (v36)
      {
        v59 = v20;
        v37 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v38 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "valueWithJSValueRef:inContext:", v36, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        LOBYTE(v38) = objc_msgSend(v39, "_isDictionary");
        if ((v38 & 1) == 0)
          goto LABEL_20;
        WebKit::toNSDictionary(this, v36, 0, 0);
        --v19;
        v27 = objc_claimAutoreleasedReturnValue();
        v20 = v59;
      }
      else
      {
        v27 = 0;
      }
      v32 = NAN;
      if (v20 < v14 && (v19 & 0x8000000000000000) == 0)
      {
        v40 = a5[v19];
        if (v40 && (JSValueIsNumber(this, v40) || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40)))
        {
          v32 = JSValueToNumber(this, v40, 0);
          --v19;
        }
        else
        {
          v32 = NAN;
        }
      }
      if (v27)
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          v33 = (void *)v27;
          if (!v18)
            goto LABEL_49;
          goto LABEL_30;
        }
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.executeScript()"), 0, CFSTR("an unknown argument was provided"), v13);
        v28 = JSValueMakeUndefined(this);
LABEL_21:
        Undefined = v28;
LABEL_69:
        if (v18)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        v53 = (void *)v27;
        goto LABEL_72;
      }
    }
LABEL_20:
    v27 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.executeScript()"), CFSTR("details"), CFSTR("an object is expected"), v13);
    v28 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.executeScript()"), 0, CFSTR("a required argument is missing"), v13);
  Undefined = JSValueMakeUndefined(this);
LABEL_73:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F53350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (*(_DWORD *)(v17 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
  else
    --*(_DWORD *)(v17 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::insertCSS(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  unint64_t v14;
  const OpaqueJSContext *v15;
  OpaqueJSValue *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  unint64_t v19;
  unint64_t v20;
  NSString *v21;
  JSValueRef v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  JSValueRef v28;
  JSValueRef Undefined;
  int v30;
  OpaqueJSValue *v31;
  double v32;
  void *v33;
  const OpaqueJSContext *v34;
  const OpaqueJSValue *v35;
  const OpaqueJSValue *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  const OpaqueJSValue *v40;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v42;
  WebKit::WebExtensionCallbackHandler *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSString *v50;
  NSString *v51;
  WebKit::WebExtensionCallbackHandler *v52;
  void *v53;
  NSObject *v54;
  NSString *v55;
  __CFString *v57;
  __CFString *v58;
  unint64_t v59;
  id v61;
  WebKit::WebExtensionCallbackHandler *v62;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v65;
  JSObjectRef v66;
  uint8_t buf[8];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v11 = v10;
  if (!v10 || (++*(_DWORD *)(v10 + 48), *(_BYTE *)(v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_73;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      v22 = a5[1];
      if (v22)
      {
        v23 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
        v25 = objc_claimAutoreleasedReturnValue();

        v26 = (void *)v25;
      }
      else
      {
        v26 = 0;
      }
      v30 = objc_msgSend(v26, "_isDictionary");

      if (v30)
      {
        if (JSValueIsObject(this, a5[2]) && (v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          v32 = JSValueToNumber(this, *a5, 0);
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = a5[2];
          v35 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v34, v35, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (v33)
          {
            if (!*(_QWORD *)buf)
            {
LABEL_49:
              reject = 0;
              resolve = 0;
              Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              v66 = resolve;
              *(_QWORD *)buf = this;
              v65 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v66, &v65, &v62);
              v18 = v62;
LABEL_50:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v42, buf);
              v43 = *(WebKit::WebExtensionCallbackHandler **)buf;
              if (*(_QWORD *)buf)
              {
                v44 = *(_QWORD *)(*(_QWORD *)buf + 24);
                if (v44)
                {
                  v45 = *(_QWORD *)(v44 + 8);
                  if (v45)
                  {
                    v46 = *(_QWORD *)(v45 + 24);
                    if (v46)
                    {
                      v47 = *(_QWORD *)(v46 + 8);
                      if (v47)
                      {
                        v48 = *(_QWORD **)(*(_QWORD *)(v47 + 48) + 16);
                        if (((*(uint64_t (**)(_QWORD *))(*v48 + 1368))(v48) & 1) == 0)
                        {
                          v49 = *(_QWORD *)(v48[2] + 8);
                          if (v49)
                          {
                            CFRetain(*(CFTypeRef *)(v49 - 8));
                            CFRelease(*((CFTypeRef *)v43 + 1));
                            *(_QWORD *)buf = v18;
                            v61 = 0;
                            WebKit::WebExtensionAPITabs::insertCSS(v11, v49 - 16, v33, (uint64_t *)buf, &v61, v32);
                            v51 = (NSString *)v61;
                            v52 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(_QWORD *)buf = 0;
                            if (v52)
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v52);
                            if (v51)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.insertCSS()"), 0, v51, v50);
                            }
                            else if (Undefined)
                            {
LABEL_62:

                              CFRelease(*(CFTypeRef *)(v49 - 8));
                              v53 = v33;
LABEL_72:

                              goto LABEL_73;
                            }
                            Undefined = JSValueMakeUndefined(this);
                            goto LABEL_62;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*((CFTypeRef *)v43 + 1));
              }
              v54 = qword_1ECE710C8;
              if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_196BCC000, v54, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined)
                  goto LABEL_67;
              }
              else if (!Undefined)
              {
                goto LABEL_67;
              }
              Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.insertCSS()"), 0, CFSTR("an unknown error occurred"), v55);
              if (Undefined)
              {
LABEL_68:
                v27 = (uint64_t)v33;
                goto LABEL_69;
              }
LABEL_67:
              Undefined = JSValueMakeUndefined(this);
              goto LABEL_68;
            }
LABEL_30:
            Undefined = 0;
            goto LABEL_50;
          }
          goto LABEL_20;
        }
        v57 = CFSTR("a function is expected");
        v58 = CFSTR("callback");
      }
      else
      {
        v57 = CFSTR("an object is expected");
        v58 = CFSTR("details");
      }
    }
    else
    {
      v57 = CFSTR("a number is expected");
      v58 = CFSTR("tabID");
    }
    v53 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.insertCSS()"), &v58->isa, &v57->isa, v21);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_72;
  }
  if (a4)
  {
    v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      v18 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v19 = (unint64_t)a4 - 2;
          v20 = 1;
        }
        else
        {
          v18 = 0;
          v20 = 0;
          v19 = (unint64_t)a4 - 1;
        }
      }
      v36 = a5[v19];
      if (v36)
      {
        v59 = v20;
        v37 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v38 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "valueWithJSValueRef:inContext:", v36, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        LOBYTE(v38) = objc_msgSend(v39, "_isDictionary");
        if ((v38 & 1) == 0)
          goto LABEL_20;
        WebKit::toNSDictionary(this, v36, 0, 0);
        --v19;
        v27 = objc_claimAutoreleasedReturnValue();
        v20 = v59;
      }
      else
      {
        v27 = 0;
      }
      v32 = NAN;
      if (v20 < v14 && (v19 & 0x8000000000000000) == 0)
      {
        v40 = a5[v19];
        if (v40 && (JSValueIsNumber(this, v40) || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40)))
        {
          v32 = JSValueToNumber(this, v40, 0);
          --v19;
        }
        else
        {
          v32 = NAN;
        }
      }
      if (v27)
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          v33 = (void *)v27;
          if (!v18)
            goto LABEL_49;
          goto LABEL_30;
        }
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.insertCSS()"), 0, CFSTR("an unknown argument was provided"), v13);
        v28 = JSValueMakeUndefined(this);
LABEL_21:
        Undefined = v28;
LABEL_69:
        if (v18)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        v53 = (void *)v27;
        goto LABEL_72;
      }
    }
LABEL_20:
    v27 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.insertCSS()"), CFSTR("details"), CFSTR("an object is expected"), v13);
    v28 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.insertCSS()"), 0, CFSTR("a required argument is missing"), v13);
  Undefined = JSValueMakeUndefined(this);
LABEL_73:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F53DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (*(_DWORD *)(v17 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
  else
    --*(_DWORD *)(v17 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::removeCSS(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  unint64_t v14;
  const OpaqueJSContext *v15;
  OpaqueJSValue *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  unint64_t v19;
  unint64_t v20;
  NSString *v21;
  JSValueRef v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  JSValueRef v28;
  JSValueRef Undefined;
  int v30;
  OpaqueJSValue *v31;
  double v32;
  void *v33;
  const OpaqueJSContext *v34;
  const OpaqueJSValue *v35;
  const OpaqueJSValue *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  const OpaqueJSValue *v40;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v42;
  WebKit::WebExtensionCallbackHandler *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSString *v50;
  NSString *v51;
  WebKit::WebExtensionCallbackHandler *v52;
  void *v53;
  NSObject *v54;
  NSString *v55;
  __CFString *v57;
  __CFString *v58;
  unint64_t v59;
  id v61;
  WebKit::WebExtensionCallbackHandler *v62;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v65;
  JSObjectRef v66;
  uint8_t buf[8];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  v11 = v10;
  if (!v10 || (++*(_DWORD *)(v10 + 48), *(_BYTE *)(v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_73;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      v22 = a5[1];
      if (v22)
      {
        v23 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
        v25 = objc_claimAutoreleasedReturnValue();

        v26 = (void *)v25;
      }
      else
      {
        v26 = 0;
      }
      v30 = objc_msgSend(v26, "_isDictionary");

      if (v30)
      {
        if (JSValueIsObject(this, a5[2]) && (v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          v32 = JSValueToNumber(this, *a5, 0);
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = a5[2];
          v35 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v34, v35, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (v33)
          {
            if (!*(_QWORD *)buf)
            {
LABEL_49:
              reject = 0;
              resolve = 0;
              Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              v66 = resolve;
              *(_QWORD *)buf = this;
              v65 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v66, &v65, &v62);
              v18 = v62;
LABEL_50:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v42, buf);
              v43 = *(WebKit::WebExtensionCallbackHandler **)buf;
              if (*(_QWORD *)buf)
              {
                v44 = *(_QWORD *)(*(_QWORD *)buf + 24);
                if (v44)
                {
                  v45 = *(_QWORD *)(v44 + 8);
                  if (v45)
                  {
                    v46 = *(_QWORD *)(v45 + 24);
                    if (v46)
                    {
                      v47 = *(_QWORD *)(v46 + 8);
                      if (v47)
                      {
                        v48 = *(_QWORD **)(*(_QWORD *)(v47 + 48) + 16);
                        if (((*(uint64_t (**)(_QWORD *))(*v48 + 1368))(v48) & 1) == 0)
                        {
                          v49 = *(_QWORD *)(v48[2] + 8);
                          if (v49)
                          {
                            CFRetain(*(CFTypeRef *)(v49 - 8));
                            CFRelease(*((CFTypeRef *)v43 + 1));
                            *(_QWORD *)buf = v18;
                            v61 = 0;
                            WebKit::WebExtensionAPITabs::removeCSS(v11, v49 - 16, v33, (uint64_t *)buf, &v61, v32);
                            v51 = (NSString *)v61;
                            v52 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(_QWORD *)buf = 0;
                            if (v52)
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v52);
                            if (v51)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.removeCSS()"), 0, v51, v50);
                            }
                            else if (Undefined)
                            {
LABEL_62:

                              CFRelease(*(CFTypeRef *)(v49 - 8));
                              v53 = v33;
LABEL_72:

                              goto LABEL_73;
                            }
                            Undefined = JSValueMakeUndefined(this);
                            goto LABEL_62;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*((CFTypeRef *)v43 + 1));
              }
              v54 = qword_1ECE710C8;
              if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_196BCC000, v54, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined)
                  goto LABEL_67;
              }
              else if (!Undefined)
              {
                goto LABEL_67;
              }
              Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("tabs.removeCSS()"), 0, CFSTR("an unknown error occurred"), v55);
              if (Undefined)
              {
LABEL_68:
                v27 = (uint64_t)v33;
                goto LABEL_69;
              }
LABEL_67:
              Undefined = JSValueMakeUndefined(this);
              goto LABEL_68;
            }
LABEL_30:
            Undefined = 0;
            goto LABEL_50;
          }
          goto LABEL_20;
        }
        v57 = CFSTR("a function is expected");
        v58 = CFSTR("callback");
      }
      else
      {
        v57 = CFSTR("an object is expected");
        v58 = CFSTR("details");
      }
    }
    else
    {
      v57 = CFSTR("a number is expected");
      v58 = CFSTR("tabID");
    }
    v53 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.removeCSS()"), &v58->isa, &v57->isa, v21);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_72;
  }
  if (a4)
  {
    v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      v18 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v19 = (unint64_t)a4 - 2;
          v20 = 1;
        }
        else
        {
          v18 = 0;
          v20 = 0;
          v19 = (unint64_t)a4 - 1;
        }
      }
      v36 = a5[v19];
      if (v36)
      {
        v59 = v20;
        v37 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v38 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "valueWithJSValueRef:inContext:", v36, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        LOBYTE(v38) = objc_msgSend(v39, "_isDictionary");
        if ((v38 & 1) == 0)
          goto LABEL_20;
        WebKit::toNSDictionary(this, v36, 0, 0);
        --v19;
        v27 = objc_claimAutoreleasedReturnValue();
        v20 = v59;
      }
      else
      {
        v27 = 0;
      }
      v32 = NAN;
      if (v20 < v14 && (v19 & 0x8000000000000000) == 0)
      {
        v40 = a5[v19];
        if (v40 && (JSValueIsNumber(this, v40) || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40)))
        {
          v32 = JSValueToNumber(this, v40, 0);
          --v19;
        }
        else
        {
          v32 = NAN;
        }
      }
      if (v27)
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          v33 = (void *)v27;
          if (!v18)
            goto LABEL_49;
          goto LABEL_30;
        }
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.removeCSS()"), 0, CFSTR("an unknown argument was provided"), v13);
        v28 = JSValueMakeUndefined(this);
LABEL_21:
        Undefined = v28;
LABEL_69:
        if (v18)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        v53 = (void *)v27;
        goto LABEL_72;
      }
    }
LABEL_20:
    v27 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.removeCSS()"), CFSTR("details"), CFSTR("an object is expected"), v13);
    v28 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("tabs.removeCSS()"), 0, CFSTR("a required argument is missing"), v13);
  Undefined = JSValueMakeUndefined(this);
LABEL_73:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F54830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (*(_DWORD *)(v17 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
  else
    --*(_DWORD *)(v17 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPITest *WebKit::toWebExtensionAPITest(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPITest *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPITest::testClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPITest::testClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPITest *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPITest::testClass(WebKit::JSWebExtensionAPITest *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  JSClassDefinition v5;

  result = (JSClassRef)WebKit::JSWebExtensionAPITest::testClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPITest::testClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v5.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E0CC1100] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "Test";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPITest::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPITest::testClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPITest::notifyFail(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  JSValueRef Undefined;
  JSValueRef v17;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      v15 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.notifyFail()"), CFSTR("message"), CFSTR("a string is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_10;
    }
    WebKit::toNSString(this, *a5, 2);
    v15 = (NSString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = 0;
  }
  WebKit::WebExtensionAPITest::notifyFail(v12, this, v15);
  Undefined = JSValueMakeUndefined(this);
LABEL_10:
  v17 = Undefined;

  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return v17;
}

void sub_196F54D7C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::notifyPass(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  JSValueRef Undefined;
  JSValueRef v17;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      v15 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.notifyPass()"), CFSTR("message"), CFSTR("a string is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_10;
    }
    WebKit::toNSString(this, *a5, 2);
    v15 = (NSString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = 0;
  }
  WebKit::WebExtensionAPITest::notifyPass(v12, this, v15);
  Undefined = JSValueMakeUndefined(this);
LABEL_10:
  v17 = Undefined;

  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return v17;
}

void sub_196F55104(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::yield(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  JSValueRef Undefined;
  JSValueRef v17;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      v15 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.yield()"), CFSTR("message"), CFSTR("a string is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_10;
    }
    WebKit::toNSString(this, *a5, 2);
    v15 = (NSString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = 0;
  }
  WebKit::WebExtensionAPITest::yield(v12, this, v15);
  Undefined = JSValueMakeUndefined(this);
LABEL_10:
  v17 = Undefined;

  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return v17;
}

void sub_196F5548C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::log(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  JSValue *v15;
  void *v16;
  void *v17;
  JSValueRef Undefined;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4)
  {
    v15 = *a5;
    if (*a5)
    {
      v16 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "valueWithJSValueRef:inContext:", v15, v17);
      v15 = (JSValue *)objc_claimAutoreleasedReturnValue();

    }
    WebKit::WebExtensionAPITest::log(v12, this, v15);
    Undefined = JSValueMakeUndefined(this);

  }
  else
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.log()"), 0, CFSTR("a required argument is missing"), v14);
    Undefined = JSValueMakeUndefined(this);
  }
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return Undefined;
}

void sub_196F557F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::fail(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  WebKit::WebExtensionAPITest *v14;
  NSString *v15;
  NSString *v16;
  JSValueRef Undefined;
  JSValueRef v18;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      v16 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.fail()"), CFSTR("message"), CFSTR("a string is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_10;
    }
    WebKit::toNSString(this, *a5, 2);
    v14 = (WebKit::WebExtensionAPITest *)objc_claimAutoreleasedReturnValue();
    v16 = (NSString *)v14;
  }
  else
  {
    v16 = 0;
  }
  WebKit::WebExtensionAPITest::assertTrue(v14, this, 0, v16);
  Undefined = JSValueMakeUndefined(this);
LABEL_10:
  v18 = Undefined;

  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return v18;
}

void sub_196F55BA0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::succeed(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  WebKit::WebExtensionAPITest *v14;
  NSString *v15;
  NSString *v16;
  JSValueRef Undefined;
  JSValueRef v18;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      v16 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.succeed()"), CFSTR("message"), CFSTR("a string is expected"), v15);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_10;
    }
    WebKit::toNSString(this, *a5, 2);
    v14 = (WebKit::WebExtensionAPITest *)objc_claimAutoreleasedReturnValue();
    v16 = (NSString *)v14;
  }
  else
  {
    v16 = 0;
  }
  WebKit::WebExtensionAPITest::assertTrue(v14, this, 1, v16);
  Undefined = JSValueMakeUndefined(this);
LABEL_10:
  v18 = Undefined;

  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return v18;
}

void sub_196F55F28(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertTrue(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  char v15;
  NSString *v16;
  NSString *v17;
  JSValueRef v18;
  JSValueRef Undefined;
  __CFString *v21;
  __CFString *v22;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4 != (OpaqueJSValue *)1)
    {
      if (!a4)
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertTrue()"), 0, CFSTR("a required argument is missing"), v14);
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_16;
      }
      v15 = 0;
      v16 = 0;
      goto LABEL_14;
    }
    if (JSValueIsBoolean(this, *a5))
    {
      v16 = 0;
      v15 = JSValueToBoolean(this, *a5);
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  if (!JSValueIsBoolean(this, *a5))
  {
LABEL_23:
    v21 = CFSTR("a BOOLean is expected");
    v22 = CFSTR("actualValue");
LABEL_24:
    v16 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertTrue()"), &v22->isa, &v21->isa, v17);
    v18 = JSValueMakeUndefined(this);
    goto LABEL_15;
  }
  if (!JSValueIsString(this, a5[1]) && !JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
  {
    v21 = CFSTR("a string is expected");
    v22 = CFSTR("message");
    goto LABEL_24;
  }
  v15 = JSValueToBoolean(this, *a5);
  WebKit::toNSString(this, a5[1], 2);
  v16 = (NSString *)objc_claimAutoreleasedReturnValue();
LABEL_14:
  WebKit::WebExtensionAPITest::assertTrue(v12, this, v15, v16);
  v18 = JSValueMakeUndefined(this);
LABEL_15:
  Undefined = v18;

LABEL_16:
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return Undefined;
}

void sub_196F5635C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertFalse(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  uint64_t v14;
  NSString *v15;
  BOOL v16;
  NSString *v17;
  NSString *v18;
  JSValueRef v19;
  JSValueRef Undefined;
  __CFString *v22;
  __CFString *v23;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4 != (OpaqueJSValue *)1)
    {
      if (!a4)
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertFalse()"), 0, CFSTR("a required argument is missing"), v15);
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_16;
      }
      v16 = 0;
      v17 = 0;
      goto LABEL_14;
    }
    if (JSValueIsBoolean(this, *a5))
    {
      v17 = 0;
      v14 = JSValueToBoolean(this, *a5);
      v16 = v14;
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  if (!JSValueIsBoolean(this, *a5))
  {
LABEL_23:
    v22 = CFSTR("a BOOLean is expected");
    v23 = CFSTR("actualValue");
LABEL_24:
    v17 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertFalse()"), &v23->isa, &v22->isa, v18);
    v19 = JSValueMakeUndefined(this);
    goto LABEL_15;
  }
  if (!JSValueIsString(this, a5[1]) && !JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
  {
    v22 = CFSTR("a string is expected");
    v23 = CFSTR("message");
    goto LABEL_24;
  }
  v16 = JSValueToBoolean(this, *a5);
  WebKit::toNSString(this, a5[1], 2);
  v14 = objc_claimAutoreleasedReturnValue();
  v17 = (NSString *)v14;
LABEL_14:
  WebKit::WebExtensionAPITest::assertTrue((WebKit::WebExtensionAPITest *)v14, this, !v16, v17);
  v19 = JSValueMakeUndefined(this);
LABEL_15:
  Undefined = v19;

LABEL_16:
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return Undefined;
}

void sub_196F5679C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertDeepEq(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  JSValue *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  JSValue *v27;
  NSString *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  JSValueRef Undefined;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if ((unint64_t)a4 <= 1)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertDeepEq()"), 0, CFSTR("a required argument is missing"), v14);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_26;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    v21 = *a5;
    if (*a5)
    {
      v22 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "valueWithJSValueRef:inContext:", v21, v23);
      v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v20 = 0;
    }
    v24 = a5[1];
    if (v24)
    {
      v25 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "valueWithJSValueRef:inContext:", v24, v26);
      v27 = (JSValue *)objc_claimAutoreleasedReturnValue();

LABEL_18:
      v28 = 0;
      goto LABEL_24;
    }
LABEL_17:
    v27 = 0;
    goto LABEL_18;
  }
  if (a4 != (OpaqueJSValue *)3)
  {
    v20 = 0;
    goto LABEL_17;
  }
  if (!JSValueIsString(this, (JSValueRef)a5[2])
    && !JSValueIsNull(this, (JSValueRef)a5[2])
    && !JSValueIsUndefined(this, (JSValueRef)a5[2]))
  {
    v20 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertDeepEq()"), CFSTR("message"), CFSTR("a string is expected"), v15);
    Undefined = JSValueMakeUndefined(this);
    v27 = 0;
    v28 = 0;
    goto LABEL_25;
  }
  v16 = *a5;
  v17 = 0x1E0CBE000uLL;
  if (*a5)
  {
    v18 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "valueWithJSValueRef:inContext:", v16, v19);
    v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

    v17 = 0x1E0CBE000;
  }
  else
  {
    v20 = 0;
  }
  v29 = a5[1];
  if (v29)
  {
    v30 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(*(id *)(v17 + 240), "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "valueWithJSValueRef:inContext:", v29, v31);
    v27 = (JSValue *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v27 = 0;
  }
  WebKit::toNSString(this, (JSValueRef)a5[2], 2);
  v28 = (NSString *)objc_claimAutoreleasedReturnValue();
LABEL_24:
  WebKit::WebExtensionAPITest::assertDeepEq(v12, this, v20, v27, v28);
  Undefined = JSValueMakeUndefined(this);
LABEL_25:

LABEL_26:
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return Undefined;
}

void sub_196F56D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertEq(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  JSValue *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  JSValue *v27;
  NSString *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  JSValueRef Undefined;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if ((unint64_t)a4 <= 1)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertEq()"), 0, CFSTR("a required argument is missing"), v14);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_26;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    v21 = *a5;
    if (*a5)
    {
      v22 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "valueWithJSValueRef:inContext:", v21, v23);
      v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v20 = 0;
    }
    v24 = a5[1];
    if (v24)
    {
      v25 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "valueWithJSValueRef:inContext:", v24, v26);
      v27 = (JSValue *)objc_claimAutoreleasedReturnValue();

LABEL_18:
      v28 = 0;
      goto LABEL_24;
    }
LABEL_17:
    v27 = 0;
    goto LABEL_18;
  }
  if (a4 != (OpaqueJSValue *)3)
  {
    v20 = 0;
    goto LABEL_17;
  }
  if (!JSValueIsString(this, (JSValueRef)a5[2])
    && !JSValueIsNull(this, (JSValueRef)a5[2])
    && !JSValueIsUndefined(this, (JSValueRef)a5[2]))
  {
    v20 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertEq()"), CFSTR("message"), CFSTR("a string is expected"), v15);
    Undefined = JSValueMakeUndefined(this);
    v27 = 0;
    v28 = 0;
    goto LABEL_25;
  }
  v16 = *a5;
  v17 = 0x1E0CBE000uLL;
  if (*a5)
  {
    v18 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "valueWithJSValueRef:inContext:", v16, v19);
    v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

    v17 = 0x1E0CBE000;
  }
  else
  {
    v20 = 0;
  }
  v29 = a5[1];
  if (v29)
  {
    v30 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(*(id *)(v17 + 240), "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "valueWithJSValueRef:inContext:", v29, v31);
    v27 = (JSValue *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v27 = 0;
  }
  WebKit::toNSString(this, (JSValueRef)a5[2], 2);
  v28 = (NSString *)objc_claimAutoreleasedReturnValue();
LABEL_24:
  WebKit::WebExtensionAPITest::assertEq(v12, this, v20, v27, v28);
  Undefined = JSValueMakeUndefined(this);
LABEL_25:

LABEL_26:
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return Undefined;
}

void sub_196F57384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertRejects(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v10;
  WebKit::JSWebExtensionAPITest *v11;
  NSObject *v12;
  NSString *v13;
  JSValueRef v14;
  NSString *v15;
  void *v16;
  void *v17;
  JSValue *v18;
  unint64_t v19;
  NSString *v20;
  JSValueRef v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  JSValue *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  NSString *v31;
  const OpaqueJSValue *v32;
  objc_object *v33;
  const OpaqueJSContext *v34;
  JSValueRef Null;
  JSValueRef v36;
  const OpaqueJSValue *v38;
  __CFString *v39;
  __CFString *v40;
  JSValueRef Undefined;
  void *v42;

  v10 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v10)
    return JSValueMakeUndefined(this);
  v11 = v10;
  ++*((_DWORD *)v10 + 12);
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsObject(this, *(JSValueRef *)a5))
    {
      if (JSValueIsString(this, *(JSValueRef *)(a5 + 16))
        || JSValueIsNull(this, *(JSValueRef *)(a5 + 16))
        || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 16)))
      {
        v21 = *(JSValueRef *)a5;
        if (*(_QWORD *)a5)
        {
          v22 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "valueWithJSValueRef:inContext:", v21, v23);
          v18 = (JSValue *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v18 = 0;
        }
        v28 = *(_QWORD *)(a5 + 8);
        if (v28)
        {
          v29 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "valueWithJSValueRef:inContext:", v28, v30);
          v26 = (JSValue *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v26 = 0;
        }
        WebKit::toNSString(this, *(JSValueRef *)(a5 + 16), 2);
        v19 = 3;
        v31 = (NSString *)objc_claimAutoreleasedReturnValue();
        if (!v18)
          goto LABEL_36;
        goto LABEL_35;
      }
      v39 = CFSTR("a string is expected");
      v40 = CFSTR("message");
    }
    else
    {
      v39 = CFSTR("an object is expected");
      v40 = CFSTR("promise");
    }
    v18 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertRejects()"), &v40->isa, &v39->isa, v20);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  if (!a4)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertRejects()"), 0, CFSTR("a required argument is missing"), v13);
    v36 = JSValueMakeUndefined(this);
    goto LABEL_42;
  }
  v14 = *(JSValueRef *)a5;
  if (*(_QWORD *)a5)
  {
    if (JSValueIsObject(this, *(JSValueRef *)a5))
    {
      v16 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "valueWithJSValueRef:inContext:", v14, v17);
      v18 = (JSValue *)objc_claimAutoreleasedReturnValue();

      v19 = 1;
      goto LABEL_15;
    }
    v18 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertRejects()"), CFSTR("promise"), CFSTR("an object is expected"), v15);
    Undefined = JSValueMakeUndefined(this);
LABEL_57:
    v36 = Undefined;
    v26 = 0;
    v31 = 0;
    goto LABEL_41;
  }
  v19 = 0;
  v18 = 0;
LABEL_15:
  if (v19 >= (unint64_t)a4)
  {
    v26 = 0;
    v27 = 0;
    v19 = 1;
  }
  else if (a4 == (OpaqueJSValue *)1 || (v24 = *(_QWORD *)(a5 + 8 * v19)) == 0)
  {
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v42 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "valueWithJSValueRef:inContext:", v24, v25);
    v26 = (JSValue *)objc_claimAutoreleasedReturnValue();

    ++v19;
    v27 = 1;
  }
  v31 = 0;
  if (v19 < (unint64_t)a4 && v27 < (unint64_t)a4 - 1)
  {
    v32 = *(const OpaqueJSValue **)(a5 + 8 * v19);
    if (!v32 || !JSValueIsString(this, v32) && !JSValueIsNull(this, v32) && !JSValueIsUndefined(this, v32))
    {
      v31 = 0;
      if (!v18)
        goto LABEL_36;
      goto LABEL_35;
    }
    WebKit::toNSString(this, v32, 2);
    v31 = (NSString *)objc_claimAutoreleasedReturnValue();
    ++v19;
  }
  if (!v18)
  {
LABEL_36:
    if (v19 >= (unint64_t)a4)
    {
      WebKit::WebExtensionAPITest::assertRejects(v11, this, v18, v26, v31);
      v34 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
      if (v34)
        Null = WebKit::toJSValueRef(this, v34, v33);
      else
        Null = JSValueMakeNull(this);
      v36 = Null;

      goto LABEL_41;
    }
    v38 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertRejects()"), 0, CFSTR("an unknown argument was provided"), v13);
    goto LABEL_53;
  }
LABEL_35:
  if (-[JSValue isObject](v18, "isObject"))
    goto LABEL_36;
  v38 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertRejects()"), CFSTR("promise"), CFSTR("an object is expected"), v13);
LABEL_53:
  *a6 = v38;
  v36 = JSValueMakeUndefined(this);
LABEL_41:

LABEL_42:
  if (*((_DWORD *)v11 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v11 + 5) + 8))((uint64_t)v11 + 40);
  else
    --*((_DWORD *)v11 + 12);
  return v36;
}

void sub_196F57B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertResolves(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  JSValueRef Undefined;
  NSString *v16;
  JSValueRef v17;
  void *v18;
  void *v19;
  JSValue *v20;
  JSValueRef v21;
  void *v22;
  void *v23;
  void *v24;
  NSString *v25;
  objc_object *v26;
  const OpaqueJSContext *v27;
  JSValueRef Null;
  __CFString *v30;
  __CFString *v31;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsObject(this, *a5))
    {
      if (JSValueIsString(this, a5[1]) || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        v17 = *a5;
        if (*a5)
        {
          v18 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
          v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v20 = 0;
        }
        WebKit::toNSString(this, a5[1], 2);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v20)
          goto LABEL_21;
LABEL_20:
        if (-[JSValue isObject](v20, "isObject"))
          goto LABEL_21;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertResolves()"), CFSTR("promise"), CFSTR("an object is expected"), v25);
        Undefined = JSValueMakeUndefined(this);
LABEL_25:

        goto LABEL_26;
      }
      v30 = CFSTR("a string is expected");
      v31 = CFSTR("message");
LABEL_33:
      v20 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertResolves()"), &v31->isa, &v30->isa, v16);
      Undefined = JSValueMakeUndefined(this);
      v24 = 0;
      goto LABEL_25;
    }
LABEL_32:
    v30 = CFSTR("an object is expected");
    v31 = CFSTR("promise");
    goto LABEL_33;
  }
  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5))
    {
      v21 = *a5;
      if (!v21)
        goto LABEL_17;
      v22 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "valueWithJSValueRef:inContext:", v21, v23);
      v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

      v24 = 0;
      if (!v20)
        goto LABEL_21;
      goto LABEL_20;
    }
    goto LABEL_32;
  }
  if (a4)
  {
LABEL_17:
    v24 = 0;
    v20 = 0;
LABEL_21:
    WebKit::WebExtensionAPITest::assertResolves(v12, this, v20, (NSString *)v24);
    v27 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
    if (v27)
      Null = WebKit::toJSValueRef(this, v27, v26);
    else
      Null = JSValueMakeNull(this);
    Undefined = Null;

    goto LABEL_25;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertResolves()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_26:
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return Undefined;
}

void sub_196F5812C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertThrows(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v10;
  WebKit::JSWebExtensionAPITest *v11;
  NSObject *v12;
  NSString *v13;
  JSValueRef v14;
  NSString *v15;
  void *v16;
  void *v17;
  JSValue *v18;
  unint64_t v19;
  NSString *v20;
  JSValueRef v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  JSValue *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  NSString *v31;
  const OpaqueJSValue *v32;
  JSValueRef v33;
  const OpaqueJSValue *v35;
  __CFString *v36;
  __CFString *v37;
  JSValueRef Undefined;
  void *v39;

  v10 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v10)
    return JSValueMakeUndefined(this);
  v11 = v10;
  ++*((_DWORD *)v10 + 12);
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsObject(this, *(JSValueRef *)a5))
    {
      if (JSValueIsString(this, *(JSValueRef *)(a5 + 16))
        || JSValueIsNull(this, *(JSValueRef *)(a5 + 16))
        || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 16)))
      {
        v21 = *(JSValueRef *)a5;
        if (*(_QWORD *)a5)
        {
          v22 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "valueWithJSValueRef:inContext:", v21, v23);
          v18 = (JSValue *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v18 = 0;
        }
        v28 = *(_QWORD *)(a5 + 8);
        if (v28)
        {
          v29 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "valueWithJSValueRef:inContext:", v28, v30);
          v26 = (JSValue *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v26 = 0;
        }
        WebKit::toNSString(this, *(JSValueRef *)(a5 + 16), 2);
        v19 = 3;
        v31 = (NSString *)objc_claimAutoreleasedReturnValue();
        if (!v18)
          goto LABEL_36;
        goto LABEL_35;
      }
      v36 = CFSTR("a string is expected");
      v37 = CFSTR("message");
    }
    else
    {
      v36 = CFSTR("an object is expected");
      v37 = CFSTR("function");
    }
    v18 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertThrows()"), &v37->isa, &v36->isa, v20);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_55;
  }
  if (!a4)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertThrows()"), 0, CFSTR("a required argument is missing"), v13);
    v33 = JSValueMakeUndefined(this);
    goto LABEL_40;
  }
  v14 = *(JSValueRef *)a5;
  if (*(_QWORD *)a5)
  {
    if (JSValueIsObject(this, *(JSValueRef *)a5))
    {
      v16 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "valueWithJSValueRef:inContext:", v14, v17);
      v18 = (JSValue *)objc_claimAutoreleasedReturnValue();

      v19 = 1;
      goto LABEL_15;
    }
    v18 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertThrows()"), CFSTR("function"), CFSTR("an object is expected"), v15);
    Undefined = JSValueMakeUndefined(this);
LABEL_55:
    v33 = Undefined;
    v26 = 0;
    v31 = 0;
    goto LABEL_39;
  }
  v19 = 0;
  v18 = 0;
LABEL_15:
  if (v19 >= (unint64_t)a4)
  {
    v26 = 0;
    v27 = 0;
    v19 = 1;
  }
  else if (a4 == (OpaqueJSValue *)1 || (v24 = *(_QWORD *)(a5 + 8 * v19)) == 0)
  {
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v39 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "valueWithJSValueRef:inContext:", v24, v25);
    v26 = (JSValue *)objc_claimAutoreleasedReturnValue();

    ++v19;
    v27 = 1;
  }
  v31 = 0;
  if (v19 < (unint64_t)a4 && v27 < (unint64_t)a4 - 1)
  {
    v32 = *(const OpaqueJSValue **)(a5 + 8 * v19);
    if (!v32 || !JSValueIsString(this, v32) && !JSValueIsNull(this, v32) && !JSValueIsUndefined(this, v32))
    {
      v31 = 0;
      if (!v18)
        goto LABEL_36;
      goto LABEL_35;
    }
    WebKit::toNSString(this, v32, 2);
    v31 = (NSString *)objc_claimAutoreleasedReturnValue();
    ++v19;
  }
  if (!v18)
    goto LABEL_36;
LABEL_35:
  if (!-[JSValue isObject](v18, "isObject"))
  {
    v35 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertThrows()"), CFSTR("function"), CFSTR("an object is expected"), v13);
    goto LABEL_51;
  }
LABEL_36:
  if (v19 < (unint64_t)a4)
  {
    v35 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertThrows()"), 0, CFSTR("an unknown argument was provided"), v13);
LABEL_51:
    *a6 = v35;
    goto LABEL_38;
  }
  WebKit::WebExtensionAPITest::assertThrows(v11, this, v18, v26, v31);
LABEL_38:
  v33 = JSValueMakeUndefined(this);
LABEL_39:

LABEL_40:
  if (*((_DWORD *)v11 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v11 + 5) + 8))((uint64_t)v11 + 40);
  else
    --*((_DWORD *)v11 + 12);
  return v33;
}

void sub_196F588C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertSafe(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  JSValueRef Undefined;
  NSString *v16;
  JSValueRef v17;
  void *v18;
  void *v19;
  JSValue *v20;
  JSValueRef v21;
  void *v22;
  void *v23;
  void *v24;
  NSString *v25;
  objc_object *v26;
  const OpaqueJSContext *v27;
  JSValueRef Null;
  __CFString *v30;
  __CFString *v31;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsObject(this, *a5))
    {
      if (JSValueIsString(this, a5[1]) || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        v17 = *a5;
        if (*a5)
        {
          v18 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
          v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v20 = 0;
        }
        WebKit::toNSString(this, a5[1], 2);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v20)
          goto LABEL_21;
LABEL_20:
        if (-[JSValue isObject](v20, "isObject"))
          goto LABEL_21;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertSafe()"), CFSTR("function"), CFSTR("an object is expected"), v25);
        Undefined = JSValueMakeUndefined(this);
LABEL_25:

        goto LABEL_26;
      }
      v30 = CFSTR("a string is expected");
      v31 = CFSTR("message");
LABEL_33:
      v20 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertSafe()"), &v31->isa, &v30->isa, v16);
      Undefined = JSValueMakeUndefined(this);
      v24 = 0;
      goto LABEL_25;
    }
LABEL_32:
    v30 = CFSTR("an object is expected");
    v31 = CFSTR("function");
    goto LABEL_33;
  }
  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5))
    {
      v21 = *a5;
      if (!v21)
        goto LABEL_17;
      v22 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "valueWithJSValueRef:inContext:", v21, v23);
      v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

      v24 = 0;
      if (!v20)
        goto LABEL_21;
      goto LABEL_20;
    }
    goto LABEL_32;
  }
  if (a4)
  {
LABEL_17:
    v24 = 0;
    v20 = 0;
LABEL_21:
    WebKit::WebExtensionAPITest::assertSafe(v12, this, v20, (NSString *)v24);
    v27 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
    if (v27)
      Null = WebKit::toJSValueRef(this, v27, v26);
    else
      Null = JSValueMakeNull(this);
    Undefined = Null;

    goto LABEL_25;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertSafe()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_26:
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return Undefined;
}

void sub_196F58E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertSafeResolve(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPITest *v11;
  WebKit::JSWebExtensionAPITest *v12;
  NSObject *v13;
  NSString *v14;
  JSValueRef Undefined;
  NSString *v16;
  JSValueRef v17;
  void *v18;
  void *v19;
  JSValue *v20;
  JSValueRef v21;
  void *v22;
  void *v23;
  void *v24;
  NSString *v25;
  objc_object *v26;
  const OpaqueJSContext *v27;
  JSValueRef Null;
  __CFString *v30;
  __CFString *v31;

  v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsObject(this, *a5))
    {
      if (JSValueIsString(this, a5[1]) || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        v17 = *a5;
        if (*a5)
        {
          v18 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
          v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v20 = 0;
        }
        WebKit::toNSString(this, a5[1], 2);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v20)
          goto LABEL_21;
LABEL_20:
        if (-[JSValue isObject](v20, "isObject"))
          goto LABEL_21;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertSafeResolve()"), CFSTR("function"), CFSTR("an object is expected"), v25);
        Undefined = JSValueMakeUndefined(this);
LABEL_25:

        goto LABEL_26;
      }
      v30 = CFSTR("a string is expected");
      v31 = CFSTR("message");
LABEL_33:
      v20 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertSafeResolve()"), &v31->isa, &v30->isa, v16);
      Undefined = JSValueMakeUndefined(this);
      v24 = 0;
      goto LABEL_25;
    }
LABEL_32:
    v30 = CFSTR("an object is expected");
    v31 = CFSTR("function");
    goto LABEL_33;
  }
  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5))
    {
      v21 = *a5;
      if (!v21)
        goto LABEL_17;
      v22 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "valueWithJSValueRef:inContext:", v21, v23);
      v20 = (JSValue *)objc_claimAutoreleasedReturnValue();

      v24 = 0;
      if (!v20)
        goto LABEL_21;
      goto LABEL_20;
    }
    goto LABEL_32;
  }
  if (a4)
  {
LABEL_17:
    v24 = 0;
    v20 = 0;
LABEL_21:
    WebKit::WebExtensionAPITest::assertSafeResolve(v12, this, v20, (NSString *)v24);
    v27 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
    if (v27)
      Null = WebKit::toJSValueRef(this, v27, v26);
    else
      Null = JSValueMakeNull(this);
    Undefined = Null;

    goto LABEL_25;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("test.assertSafeResolve()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_26:
  if (*((_DWORD *)v12 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v12 + 5) + 8))((uint64_t)v12 + 40);
  else
    --*((_DWORD *)v12 + 12);
  return Undefined;
}

void sub_196F59444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWebNavigation *WebKit::toWebExtensionAPIWebNavigation(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIWebNavigation *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIWebNavigation *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(WebKit::JSWebExtensionAPIWebNavigation *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIWebNavigation::staticValues(void)::values;
    v6.className = "WebNavigation";
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWebNavigation::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::getFrame(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebNavigation *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWebNavigation(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webNavigation.getFrame()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webNavigation.getFrame()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIWebNavigation::getFrame(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webNavigation.getFrame()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webNavigation.getFrame()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F59B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::getAllFrames(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebNavigation *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  JSValueRef Undefined;
  const OpaqueJSValue *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  NSString *v28;
  void *v29;
  int v30;
  OpaqueJSValue *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  NSString *v34;
  NSString *v35;
  WebKit::WebExtensionCallbackHandler *v36;
  JSValueRef v38;
  __CFString *v39;
  __CFString *v40;
  id v41;
  WebKit::WebExtensionCallbackHandler *v42;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v45;
  JSObjectRef v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWebNavigation(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_34;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = *a5;
    if (*a5)
    {
      v18 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "valueWithJSValueRef:inContext:", v17, v19);
      v20 = objc_claimAutoreleasedReturnValue();

      v21 = (void *)v20;
    }
    else
    {
      v21 = 0;
    }
    v27 = objc_msgSend(v21, "_isDictionary");

    if ((v27 & 1) != 0)
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
        goto LABEL_7;
      goto LABEL_27;
    }
    goto LABEL_42;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webNavigation.getAllFrames()"), 0, CFSTR("a required argument is missing"), v14);
    v38 = JSValueMakeUndefined(this);
    goto LABEL_44;
  }
  v22 = *a5;
  if (*a5)
  {
    v23 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v26 = (void *)v25;
  }
  else
  {
    v26 = 0;
  }
  v30 = objc_msgSend(v26, "_isDictionary");

  if (!v30)
  {
LABEL_42:
    v39 = CFSTR("an object is expected");
    v40 = CFSTR("details");
    goto LABEL_43;
  }
  if (JSValueIsObject(this, a5[1]) && (v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = a5[1];
    v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webNavigation.getAllFrames()"), CFSTR("details"), CFSTR("an object is expected"), v14);
      Undefined = JSValueMakeUndefined(this);
      if (v15)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      goto LABEL_34;
    }
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v46 = resolve;
    *(_QWORD *)buf = this;
    v45 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v46, &v45, &v42);
    v15 = v42;
LABEL_28:
    *(_QWORD *)buf = v15;
    v41 = 0;
    WebKit::WebExtensionAPIWebNavigation::getAllFrames(v12, v29, (uint64_t *)buf, &v41);
    v35 = (NSString *)v41;
    v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webNavigation.getAllFrames()"), 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  v39 = CFSTR("a function is expected");
  v40 = CFSTR("callback");
LABEL_43:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webNavigation.getAllFrames()"), &v40->isa, &v39->isa, v28);
  v38 = JSValueMakeUndefined(this);
LABEL_44:
  Undefined = v38;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F5A1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onBeforeNavigate(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebNavigation *v6;
  WebKit::JSWebExtensionAPIWebNavigation *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebNavigation::onBeforeNavigate(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5A4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onCommitted(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebNavigation *v6;
  WebKit::JSWebExtensionAPIWebNavigation *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebNavigation::onCommitted(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5A758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onDOMContentLoaded(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebNavigation *v6;
  WebKit::JSWebExtensionAPIWebNavigation *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebNavigation::onDOMContentLoaded(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5A9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onCompleted(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebNavigation *v6;
  WebKit::JSWebExtensionAPIWebNavigation *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebNavigation::onCompleted(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5AC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onErrorOccurred(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebNavigation *v6;
  WebKit::JSWebExtensionAPIWebNavigation *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebNavigation::onErrorOccurred(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5AEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWebNavigationEvent *WebKit::toWebExtensionAPIWebNavigationEvent(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIWebNavigationEvent *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIWebNavigationEvent *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(WebKit::JSWebExtensionAPIWebNavigationEvent *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  JSClassDefinition v5;

  result = (JSClassRef)WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v5.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E0CC1100] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "WebNavigationEvent";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWebNavigationEvent::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigationEvent::addListener(WebKit::JSWebExtensionAPIWebNavigationEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebNavigationEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  void *v15;
  JSValueRef v16;
  JSValueRef Undefined;
  NSString *v18;
  OpaqueJSValue *v19;
  const OpaqueJSContext *v20;
  const OpaqueJSValue *v21;
  WebKit::WebExtensionCallbackHandler *v22;
  OpaqueJSValue *v23;
  JSValueRef v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  char v29;
  const OpaqueJSContext *v30;
  const OpaqueJSValue *v31;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v33;
  WebKit::WebExtensionCallbackHandler *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSString *v41;
  NSString *v42;
  WebKit::WebExtensionCallbackHandler *v43;
  NSObject *v44;
  __CFString *v46;
  __CFString *v47;
  id v48;
  WebKit::WebExtensionCallbackHandler *v49;
  uint8_t buf[12];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWebNavigationEvent(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_40;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5))
    {
      v19 = JSValueToObject(this, *a5, 0);
      if (JSObjectIsFunction(this, v19))
      {
        v20 = *a5;
        v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
        v15 = 0;
        v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
        goto LABEL_22;
      }
    }
    goto LABEL_47;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsObject(this, *a5))
    {
      v23 = JSValueToObject(this, *a5, 0);
      if (JSObjectIsFunction(this, v23))
      {
        v24 = a5[1];
        if (v24)
        {
          v25 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "valueWithJSValueRef:inContext:", v24, v26);
          v27 = objc_claimAutoreleasedReturnValue();

          v28 = (void *)v27;
        }
        else
        {
          v28 = 0;
        }
        v29 = objc_msgSend(v28, "_isDictionary");

        if ((v29 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          v30 = *a5;
          v31 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v30, v31, buf);
          v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_22:
          if (!v22)
            goto LABEL_8;
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v33, buf);
          v34 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (*(_QWORD *)buf)
          {
            v35 = *(_QWORD *)(*(_QWORD *)buf + 24);
            if (v35)
            {
              v36 = *(_QWORD *)(v35 + 8);
              if (v36)
              {
                v37 = *(_QWORD *)(v36 + 24);
                if (v37)
                {
                  v38 = *(_QWORD *)(v37 + 8);
                  if (v38)
                  {
                    v39 = *(_QWORD **)(*(_QWORD *)(v38 + 48) + 16);
                    if (((*(uint64_t (**)(_QWORD *))(*v39 + 1368))(v39) & 1) == 0)
                    {
                      v40 = *(_QWORD *)(v39[2] + 8);
                      if (v40)
                      {
                        CFRetain(*(CFTypeRef *)(v40 - 8));
                        CFRelease(*((CFTypeRef *)v34 + 1));
                        ++*(_DWORD *)v22;
                        v48 = 0;
                        v49 = v22;
                        WebKit::WebExtensionAPIWebNavigationEvent::addListener(v12, v40 - 16, &v49, v15, (uint64_t)&v48);
                        v42 = (NSString *)v48;
                        v43 = v49;
                        v49 = 0;
                        if (v43)
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v43);
                        if (v42)
                          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), 0, v42, v41);
                        Undefined = JSValueMakeUndefined(this);

                        CFRelease(*(CFTypeRef *)(v40 - 8));
LABEL_39:

                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v22);
                        goto LABEL_40;
                      }
                    }
                  }
                }
              }
            }
            CFRelease(*((CFTypeRef *)v34 + 1));
          }
          v44 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_196BCC000, v44, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          }
          Undefined = JSValueMakeUndefined(this);
          goto LABEL_39;
        }
        v46 = CFSTR("an object is expected");
        v47 = CFSTR("filter");
LABEL_48:
        v15 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), &v47->isa, &v46->isa, v18);
        v16 = JSValueMakeUndefined(this);
        goto LABEL_9;
      }
    }
LABEL_47:
    v46 = CFSTR("a function is expected");
    v47 = CFSTR("listener");
    goto LABEL_48;
  }
  if (a4)
  {
    v15 = 0;
LABEL_8:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), CFSTR("listener"), CFSTR("a function is expected"), v14);
    v16 = JSValueMakeUndefined(this);
LABEL_9:
    Undefined = v16;

    goto LABEL_40;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_40:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F5B674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigationEvent::removeListener(WebKit::JSWebExtensionAPIWebNavigationEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebNavigationEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WebKit::WebExtensionCallbackHandler *v30;
  JSValueRef Undefined;
  NSObject *v32;
  const OpaqueJSValue *v34;
  JSValueRef v35;
  WebKit::WebExtensionCallbackHandler *v36;
  WebKit::WebExtensionCallbackHandler *v37;
  uint8_t buf[12];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWebNavigationEvent(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_23;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("removeListener()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_32;
  }
  if (!JSValueIsObject(this, *a5) || (v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("removeListener()"), CFSTR("listener"), CFSTR("a function is expected"), v15);
LABEL_32:
    *a6 = v34;
    v35 = JSValueMakeUndefined(this);
    goto LABEL_34;
  }
  v17 = *a5;
  v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v37);
  v20 = v37;
  if (v37)
  {
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
    v23 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v24 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 24);
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 8);
            if (v27)
            {
              v28 = *(_QWORD **)(*(_QWORD *)(v27 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v28 + 1368))(v28) & 1) == 0)
              {
                v29 = *(_QWORD *)(v28[2] + 8);
                if (v29)
                {
                  CFRetain(*(CFTypeRef *)(v29 - 8));
                  CFRelease(*(CFTypeRef *)(v23 + 8));
                  ++*(_DWORD *)v20;
                  v36 = v20;
                  WebKit::WebExtensionAPIWebNavigationEvent::removeListener(v12, v29 - 16, &v36);
                  v30 = v36;
                  v36 = 0;
                  if (v30)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
                  Undefined = JSValueMakeUndefined(this);
                  CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_22:
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
                  goto LABEL_23;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    v32 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_22;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("removeListener()"), CFSTR("listener"), CFSTR("a function is expected"), v19);
  v35 = JSValueMakeUndefined(this);
LABEL_34:
  Undefined = v35;
LABEL_23:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F5BBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigationEvent::hasListener(WebKit::JSWebExtensionAPIWebNavigationEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebNavigationEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  BOOL hasListener;
  JSValueRef Undefined;
  const OpaqueJSValue *v24;
  JSValueRef v25;
  WebKit::WebExtensionCallbackHandler *v26;
  uint8_t buf[8];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWebNavigationEvent(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_9;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("hasListener()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_18;
  }
  if (!JSValueIsObject(this, *a5) || (v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("hasListener()"), CFSTR("listener"), CFSTR("a function is expected"), v15);
LABEL_18:
    *a6 = v24;
    v25 = JSValueMakeUndefined(this);
    goto LABEL_20;
  }
  v17 = *a5;
  v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    ++**(_DWORD **)buf;
    v26 = v20;
    hasListener = WebKit::WebExtensionAPIWebNavigationEvent::hasListener(v12, &v26);
    Undefined = JSValueMakeBoolean(this, hasListener);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    goto LABEL_9;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("hasListener()"), CFSTR("listener"), CFSTR("a function is expected"), v19);
  v25 = JSValueMakeUndefined(this);
LABEL_20:
  Undefined = v25;
LABEL_9:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F5BFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWebPageNamespace *WebKit::toWebExtensionAPIWebPageNamespace(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIWebPageNamespace *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIWebPageNamespace *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(WebKit::JSWebExtensionAPIWebPageNamespace *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "WebPageNamespace";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIWebPageNamespace::staticValues(void)::values;
    v6.staticFunctions = 0;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIWebPageNamespace::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIWebPageNamespace::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIWebPageNamespace::getProperty;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIWebPageNamespace::getPropertyNames(WebKit::JSWebExtensionAPIWebPageNamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  OpaqueJSString *v17;
  const char *v18[2];

  v6 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, v18);
    v10 = v18[0];
    if (v18[0])
    {
      v11 = *((_QWORD *)v18[0] + 3);
      if (v11
        && (v12 = *(_QWORD *)(v11 + 8)) != 0
        && (v13 = *(_QWORD *)(v12 + 24)) != 0
        && (v14 = *(_QWORD *)(v13 + 8)) != 0
        && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
      {
        v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      v16 = 0;
    }
    v18[0] = "test";
    v18[1] = (const char *)5;
    if (WebKit::WebExtensionAPIWebPageNamespace::isPropertyAllowed((WebKit::WebExtensionAPIWebPageNamespace *)v7, v18, (WebKit::WebPage *)v16))
    {
      v17 = JSStringCreateWithUTF8CString("test");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17)
        JSStringRelease(v17);
    }
    if (v16)
      CFRelease(v16[1]);
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
}

void sub_196F5C2F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

BOOL WebKit::JSWebExtensionAPIWebPageNamespace::hasProperty(WebKit::JSWebExtensionAPIWebPageNamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  _BOOL8 isPropertyAllowed;
  const char *v19[2];

  v6 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, v19);
  v10 = v19[0];
  if (v19[0])
  {
    v11 = *((_QWORD *)v19[0] + 3);
    if (v11
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
    {
      v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    v16 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "test"))
  {
    v19[0] = "test";
    v19[1] = (const char *)5;
    isPropertyAllowed = WebKit::WebExtensionAPIWebPageNamespace::isPropertyAllowed((WebKit::WebExtensionAPIWebPageNamespace *)v7, v19, (WebKit::WebPage *)v16);
  }
  else
  {
    isPropertyAllowed = 0;
  }
  if (v16)
    CFRelease(v16[1]);
  if (*(_DWORD *)(v7 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
  else
    --*(_DWORD *)(v7 + 48);
  return isPropertyAllowed;
}

void sub_196F5C49C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIWebPageNamespace::getProperty(WebKit::JSWebExtensionAPIWebPageNamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v8;
  uint64_t v9;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  CFTypeRef *v18;
  const OpaqueJSValue *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  JSValueRef Undefined;
  uint8_t buf[8];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, a3);
  if (!v8)
    return JSValueMakeUndefined(this);
  v9 = v8;
  ++*(_DWORD *)(v8 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v11, buf);
  v12 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v13 = *(_QWORD *)(*(_QWORD *)buf + 24);
    if (v13
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD *)(v14 + 24)) != 0
      && (v16 = *(_QWORD *)(v15 + 8)) != 0
      && (v17 = *(_QWORD **)(*(_QWORD *)(v16 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v17 + 1368))(v17) & 1) == 0))
    {
      v18 = *(CFTypeRef **)(v17[2] + 8);
      if (v18)
      {
        CFRetain(*(v18 - 1));
        v18 -= 2;
      }
    }
    else
    {
      v18 = 0;
    }
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  else
  {
    v18 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "test"))
  {
    *(_QWORD *)buf = "test";
    v27 = 5;
    if (WebKit::WebExtensionAPIWebPageNamespace::isPropertyAllowed((WebKit::WebExtensionAPIWebPageNamespace *)v9, (const char **)buf, (WebKit::WebPage *)v18))
    {
      v20 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, v19);
      v21 = v20;
      if (v20)
      {
        ++*(_DWORD *)(v20 + 48);
        v22 = (id)qword_1ECE710C8;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          __asm { BR              X10 }

        v23 = WebKit::WebExtensionAPIWebPageNamespace::test((WebKit::WebExtensionAPIWebPageNamespace *)v21);
        Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v23 + 40));
        if (*(_DWORD *)(v21 + 48) == 1)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)(v21 + 40) + 8))(v21 + 40);
          if (!v18)
            goto LABEL_22;
        }
        else
        {
          --*(_DWORD *)(v21 + 48);
          if (!v18)
            goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
  }
  Undefined = JSValueMakeUndefined(this);
  if (v18)
LABEL_21:
    CFRelease(v18[1]);
LABEL_22:
  if (*(_DWORD *)(v9 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
  else
    --*(_DWORD *)(v9 + 48);
  return Undefined;
}

void sub_196F5C840(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIWebPageNamespace::runtime(WebKit::JSWebExtensionAPIWebPageNamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebPageNamespace *v6;
  WebKit::JSWebExtensionAPIWebPageNamespace *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef v10;

  v6 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, a3);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6;
  ++*((_DWORD *)v6 + 12);
  v8 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v9 = (*(uint64_t (**)(WebKit::JSWebExtensionAPIWebPageNamespace *))(*(_QWORD *)v7 + 32))(v7);
  v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return v10;
}

void sub_196F5CB24(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIWebPageRuntime *WebKit::toWebExtensionAPIWebPageRuntime(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIWebPageRuntime *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIWebPageRuntime *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(WebKit::JSWebExtensionAPIWebPageRuntime *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  JSClassDefinition v5;

  result = (JSClassRef)WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v5.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E0CC1100] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "WebPageRuntime";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWebPageRuntime::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebPageRuntime::sendMessage(WebKit::JSWebExtensionAPIWebPageRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, unint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebPageRuntime *v9;
  NSObject *v10;
  NSString *v11;
  unint64_t v12;
  const OpaqueJSContext *v13;
  NSString *v14;
  OpaqueJSValue *v15;
  JSValueRef v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  WebKit::WebExtensionCallbackHandler *v21;
  uint64_t v22;
  const OpaqueJSContext *v23;
  OpaqueJSValue *v24;
  const OpaqueJSValue *v25;
  NSString *v26;
  void *v27;
  const OpaqueJSValue *v28;
  NSString *v29;
  OpaqueJSValue *v30;
  const OpaqueJSValue **v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  const OpaqueJSValue *v35;
  const OpaqueJSContext *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  char v40;
  OpaqueJSValue *v41;
  uint64_t v42;
  const OpaqueJSValue **v43;
  uint64_t v44;
  uint64_t v45;
  JSValueRef Undefined;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v48;
  NSString *v49;
  NSString *v50;
  WebKit::WebExtensionCallbackHandler *v51;
  void *v52;
  __CFString *v54;
  __CFString *v55;
  JSValueRef v56;
  NSObject *v57;
  NSString *v58;
  const OpaqueJSValue **exception;
  uint64_t v60;
  id v62;
  WebKit::WebExtensionCallbackHandler *v63;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v66;
  uint8_t v67[8];
  uint8_t buf[8];
  uint64_t v69;

  exception = a6;
  v69 = *MEMORY[0x1E0C80C00];
  v9 = WebKit::toWebExtensionAPIWebPageRuntime(this, a3, a3);
  if (!v9)
    return JSValueMakeUndefined(this);
  v60 = (uint64_t)v9;
  ++*((_DWORD *)v9 + 12);
  v10 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  v12 = a4 - 1;
  if (a4 <= 1)
  {
    *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webPageRuntime.sendMessage()"), 0, CFSTR("a required argument is missing"), v11);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_67;
  }
  v13 = this;
  if (a4 == 2)
  {
    v21 = 0;
    v22 = 0;
    goto LABEL_20;
  }
  if (a4 != 4)
  {
    v23 = a5[v12];
    if (v23
      && (JSValueIsObject(this, a5[v12]) && (v24 = JSValueToObject(this, v23, 0), JSObjectIsFunction(this, v24))
       || JSValueIsNull(this, v23)
       || JSValueIsUndefined(this, v23)))
    {
      WebKit::toJSCallbackHandler((uint64_t)this, v23, (const OpaqueJSValue *)(v60 + 40), buf);
      v21 = *(WebKit::WebExtensionCallbackHandler **)buf;
      v22 = a4 - 3;
      --a4;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
LABEL_20:
    v25 = *a5;
    if (*a5)
    {
      if (!JSValueIsString(this, *a5))
      {
        v27 = 0;
        *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webPageRuntime.sendMessage()"), CFSTR("extensionId"), CFSTR("a string is expected"), v26);
        Undefined = JSValueMakeUndefined(this);
        v33 = 0;
        v34 = 0;
        goto LABEL_63;
      }
      WebKit::toNSString(this, v25, 2);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = a5[1];
      if (v28)
      {
        if (JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, v28)
          || (v30 = JSValueToObject(this, v28, 0), JSObjectIsFunction(this, v30)))
        {
          v33 = 0;
          *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webPageRuntime.sendMessage()"), CFSTR("message"), CFSTR("an object is expected"), v29);
          Undefined = JSValueMakeUndefined(this);
          v34 = 0;
          goto LABEL_63;
        }
        WebKit::serializeJSObject(this, v28, exception, v31);
        v32 = 2;
        v33 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v33 = 0;
        v32 = 1;
      }
    }
    else
    {
      v27 = 0;
      v32 = 0;
      v33 = 0;
    }
    v34 = 0;
    if (v22 && v32 < a4)
    {
      v35 = a5[v32];
      v36 = v13;
      if (!v35)
        goto LABEL_36;
      v37 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(v13));
      v38 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "valueWithJSValueRef:inContext:", v35, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      v36 = v13;
      LOBYTE(v38) = objc_msgSend(v39, "_isDictionary");

      if ((v38 & 1) == 0)
      {
        v36 = v13;
        if (!JSValueIsNull(v13, v35))
        {
          v36 = v13;
          if (!JSValueIsUndefined(v13, v35))
          {
LABEL_36:
            v34 = 0;
            goto LABEL_47;
          }
        }
      }
      WebKit::toNSDictionary(v36, v35, 0, 0);
      v34 = objc_claimAutoreleasedReturnValue();
      ++v32;
    }
LABEL_46:
    v36 = v13;
LABEL_47:
    if (v27)
    {
      if (*exception)
      {
LABEL_78:
        v56 = JSValueMakeUndefined(v36);
        goto LABEL_83;
      }
      if (v33)
      {
        if (v32 >= a4)
        {
          if (v21)
          {
            Undefined = 0;
          }
          else
          {
            reject = 0;
            resolve = 0;
            Undefined = JSObjectMakeDeferredPromise(v36, &resolve, &reject, 0);
            *(_QWORD *)buf = v36;
            v66 = reject;
            *(_QWORD *)v67 = resolve;
            WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v67, &v66, &v63);
            v21 = v63;
          }
          GlobalContext = JSContextGetGlobalContext(v36);
          WebKit::WebFrame::frameForContext(GlobalContext, v48, buf);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)v67 = v21;
            v62 = 0;
            WebKit::WebExtensionAPIWebPageRuntime::sendMessage(v60, *(WebKit::WebFrame **)buf, v27, v33, v34, (uint64_t *)v67, &v62);
            v50 = (NSString *)v62;
            v51 = *(WebKit::WebExtensionCallbackHandler **)v67;
            *(_QWORD *)v67 = 0;
            if (v51)
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v51);
            if (v50)
            {
              *exception = WebKit::toJSError(v36, (const OpaqueJSContext *)CFSTR("webPageRuntime.sendMessage()"), 0, v50, v49);
            }
            else if (Undefined)
            {
LABEL_60:

              if (*(_QWORD *)buf)
                CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
              v21 = 0;
              goto LABEL_63;
            }
            Undefined = JSValueMakeUndefined(v36);
            goto LABEL_60;
          }
          v57 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v67 = 0;
            _os_log_error_impl(&dword_196BCC000, v57, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v67, 2u);
            if (Undefined)
            {
LABEL_81:
              Undefined = WebKit::toJSRejectedPromise(v36, (const OpaqueJSContext *)CFSTR("webPageRuntime.sendMessage()"), 0, CFSTR("an unknown error occurred"), v58);
              if (Undefined)
              {
LABEL_63:
                if (v21)
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v21);
                v52 = (void *)v34;
                goto LABEL_66;
              }
            }
          }
          else if (Undefined)
          {
            goto LABEL_81;
          }
          v56 = JSValueMakeUndefined(v36);
          goto LABEL_83;
        }
        *exception = WebKit::toJSError(v36, (const OpaqueJSContext *)CFSTR("webPageRuntime.sendMessage()"), 0, CFSTR("an unknown argument was provided"), v11);
        v36 = v13;
        goto LABEL_78;
      }
      v33 = 0;
      *exception = WebKit::toJSError(v36, (const OpaqueJSContext *)CFSTR("webPageRuntime.sendMessage()"), CFSTR("message"), CFSTR("a JSON serializable value is expected"), v11);
      v56 = JSValueMakeUndefined(v13);
    }
    else
    {
      v27 = 0;
      *exception = WebKit::toJSError(v36, (const OpaqueJSContext *)CFSTR("webPageRuntime.sendMessage()"), CFSTR("extensionId"), CFSTR("a string is expected"), v11);
      v56 = JSValueMakeUndefined(v13);
    }
LABEL_83:
    Undefined = v56;
    goto LABEL_63;
  }
  if (JSValueIsString(this, *a5))
  {
    if (JSValueIsNull(this, a5[1])
      || JSValueIsUndefined(this, a5[1])
      || (v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15)))
    {
      v54 = CFSTR("an object is expected");
      v55 = CFSTR("message");
    }
    else
    {
      v16 = a5[2];
      if (v16)
      {
        v17 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "valueWithJSValueRef:inContext:", v16, v18);
        v19 = objc_claimAutoreleasedReturnValue();

        v20 = (void *)v19;
      }
      else
      {
        v20 = 0;
      }
      v40 = objc_msgSend(v20, "_isDictionary", exception);

      if ((v40 & 1) != 0 || JSValueIsNull(this, a5[2]) || JSValueIsUndefined(this, a5[2]))
      {
        if (JSValueIsObject(this, a5[3]) && (v41 = JSValueToObject(this, a5[3], 0), JSObjectIsFunction(this, v41))
          || JSValueIsNull(this, a5[3])
          || JSValueIsUndefined(this, a5[3]))
        {
          WebKit::toNSString(this, *a5, 2);
          v42 = objc_claimAutoreleasedReturnValue();
          WebKit::serializeJSObject(this, a5[1], exception, v43);
          v44 = objc_claimAutoreleasedReturnValue();
          WebKit::toNSDictionary(this, a5[2], 0, 0);
          v45 = objc_claimAutoreleasedReturnValue();
          WebKit::toJSCallbackHandler((uint64_t)this, a5[3], (const OpaqueJSValue *)(v60 + 40), buf);
          v32 = 4;
          v21 = *(WebKit::WebExtensionCallbackHandler **)buf;
          a4 = 4;
          v27 = (void *)v42;
          v33 = (void *)v44;
          v34 = v45;
          goto LABEL_46;
        }
        v54 = CFSTR("a function is expected");
        v55 = CFSTR("callback");
      }
      else
      {
        v54 = CFSTR("an object is expected");
        v55 = CFSTR("options");
      }
    }
  }
  else
  {
    v54 = CFSTR("a string is expected");
    v55 = CFSTR("extensionId");
  }
  v52 = 0;
  *exception = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webPageRuntime.sendMessage()"), &v55->isa, &v54->isa, v14);
  Undefined = JSValueMakeUndefined(this);
  v33 = 0;
  v27 = 0;
LABEL_66:

LABEL_67:
  if (*(_DWORD *)(v60 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v60 + 40) + 8))(v60 + 40);
  else
    --*(_DWORD *)(v60 + 48);
  return Undefined;
}

void sub_196F5D838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  void *v21;
  void *v22;

  if (a19)
    CFRelease(*(CFTypeRef *)(a19 + 8));
  if (v20)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);

  if (*(_DWORD *)(a10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(a10 + 40) + 8))(a10 + 40);
  else
    --*(_DWORD *)(a10 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIWebPageRuntime::connect(WebKit::JSWebExtensionAPIWebPageRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebPageRuntime *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  void *v15;
  JSValueRef Undefined;
  void *v17;
  void *v18;
  NSString *v19;
  JSValueRef v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v26;
  WebKit::WebFrame *v27;
  NSString *v28;
  void *v29;
  NSString *v30;
  uint64_t v31;
  __CFString *v33;
  __CFString *v34;
  NSObject *v35;
  id v36;
  uint8_t v37[8];
  uint8_t buf[8];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWebPageRuntime(this, a3, a3);
  if (!v11)
    return JSValueMakeUndefined(this);
  v12 = (uint64_t)v11;
  ++*((_DWORD *)v11 + 12);
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4 != (OpaqueJSValue *)1)
    {
      if (!a4)
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webPageRuntime.connect()"), 0, CFSTR("a required argument is missing"), v14);
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_31;
      }
      v15 = 0;
      goto LABEL_7;
    }
    if (JSValueIsString(this, *a5))
    {
      v18 = 0;
      WebKit::toNSString(this, *a5, 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    goto LABEL_38;
  }
  if (!JSValueIsString(this, *a5))
  {
LABEL_38:
    v33 = CFSTR("a string is expected");
    v34 = CFSTR("extensionId");
LABEL_39:
    v18 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webPageRuntime.connect()"), &v34->isa, &v33->isa, v19);
    Undefined = JSValueMakeUndefined(this);
    v17 = 0;
    goto LABEL_30;
  }
  v20 = a5[1];
  if (v20)
  {
    v21 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "valueWithJSValueRef:inContext:", v20, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v23 = 0;
  }
  v24 = objc_msgSend(v23, "_isDictionary");

  if ((v24 & 1) == 0 && !JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
  {
    v33 = CFSTR("an object is expected");
    v34 = CFSTR("options");
    goto LABEL_39;
  }
  WebKit::toNSString(this, *a5, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::toNSDictionary(this, a5[1], 0, 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_18:
  if (v17)
  {
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    v27 = *(WebKit::WebFrame **)buf;
    if (!*(_QWORD *)buf)
    {
      v35 = qword_1ECE710C8;
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v37 = 0;
        _os_log_error_impl(&dword_196BCC000, v35, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v37, 2u);
      }
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_30;
    }
    v36 = 0;
    WebKit::WebExtensionAPIWebPageRuntime::connect(v12, *(WebKit::WebFrame **)buf, this, v17, v18, &v36, (uint64_t *)v37);
    v28 = (NSString *)v36;
    if (*(_QWORD *)v37)
      v29 = (void *)(*(_QWORD *)v37 + 40);
    else
      v29 = 0;
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, v29);
    v31 = *(_QWORD *)v37;
    *(_QWORD *)v37 = 0;
    if (v31)
    {
      if (*(_DWORD *)(v31 + 48) == 1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(v31 + 40) + 8))(v31 + 40);
        if (v28)
        {
LABEL_43:
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webPageRuntime.connect()"), 0, v28, v30);
          Undefined = JSValueMakeUndefined(this);
        }
LABEL_29:

        CFRelease(*((CFTypeRef *)v27 + 1));
        goto LABEL_30;
      }
      --*(_DWORD *)(v31 + 48);
    }
    if (v28)
      goto LABEL_43;
    goto LABEL_29;
  }
  v15 = v18;
LABEL_7:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("webPageRuntime.connect()"), CFSTR("extensionId"), CFSTR("a string is expected"), v14);
  Undefined = JSValueMakeUndefined(this);
  v17 = 0;
  v18 = v15;
LABEL_30:

LABEL_31:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F5DF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v16;
  void *v17;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIWebRequest *WebKit::toWebExtensionAPIWebRequest(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIWebRequest *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIWebRequest::webRequestClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIWebRequest::webRequestClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIWebRequest *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebRequest::webRequestClass(WebKit::JSWebExtensionAPIWebRequest *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIWebRequest::webRequestClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebRequest::webRequestClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIWebRequest::staticValues(void)::values;
    v6.className = "WebRequest";
    v6.staticFunctions = 0;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIWebRequest::webRequestClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onBeforeRequest(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebRequest *v6;
  WebKit::JSWebExtensionAPIWebRequest *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebRequest::onBeforeRequest(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5E358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onBeforeSendHeaders(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebRequest *v6;
  WebKit::JSWebExtensionAPIWebRequest *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebRequest::onBeforeSendHeaders(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5E5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onSendHeaders(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebRequest *v6;
  WebKit::JSWebExtensionAPIWebRequest *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebRequest::onSendHeaders(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5E868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onHeadersReceived(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebRequest *v6;
  WebKit::JSWebExtensionAPIWebRequest *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebRequest::onHeadersReceived(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5EAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onAuthRequired(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebRequest *v6;
  WebKit::JSWebExtensionAPIWebRequest *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebRequest::onAuthRequired(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5ED78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onBeforeRedirect(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebRequest *v6;
  WebKit::JSWebExtensionAPIWebRequest *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebRequest::onBeforeRedirect(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5F000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onResponseStarted(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebRequest *v6;
  WebKit::JSWebExtensionAPIWebRequest *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebRequest::onResponseStarted(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5F288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onCompleted(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebRequest *v6;
  WebKit::JSWebExtensionAPIWebRequest *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebRequest::onCompleted(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5F510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onErrorOccurred(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWebRequest *v6;
  WebKit::JSWebExtensionAPIWebRequest *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWebRequest::onErrorOccurred(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F5F798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWebRequestEvent *WebKit::toWebExtensionAPIWebRequestEvent(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIWebRequestEvent *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIWebRequestEvent *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(WebKit::JSWebExtensionAPIWebRequestEvent *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  JSClassDefinition v5;

  result = (JSClassRef)WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v5.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E0CC1100] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "WebRequestEvent";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWebRequestEvent::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebRequestEvent::addListener(WebKit::JSWebExtensionAPIWebRequestEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebRequestEvent *v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  unint64_t v14;
  const OpaqueJSContext *v15;
  const OpaqueJSValue *v16;
  objc_class *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  void *v21;
  NSString *v22;
  OpaqueJSValue *v23;
  const OpaqueJSContext *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  char v30;
  const OpaqueJSContext *v31;
  const OpaqueJSValue *v32;
  WebKit::WebExtensionCallbackHandler *v33;
  const OpaqueJSContext *v34;
  const OpaqueJSValue *v35;
  objc_class *v36;
  const OpaqueJSValue *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  const OpaqueJSValue *v42;
  NSString *v43;
  OpaqueJSValue *v44;
  const OpaqueJSValue *v45;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v47;
  WebKit::WebExtensionCallbackHandler *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  NSString *v55;
  NSString *v56;
  WebKit::WebExtensionCallbackHandler *v57;
  JSValueRef Undefined;
  NSObject *v59;
  JSValueRef v60;
  JSValueRef v61;
  __CFString *v63;
  __CFString *v64;
  const OpaqueJSValue **v65;
  id v66;
  WebKit::WebExtensionCallbackHandler *v67;
  uint8_t buf[12];
  uint64_t v69;

  v65 = a6;
  v69 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPIWebRequestEvent(this, a3, a3);
  v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((_BYTE *)v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_62;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsObject(this, *a5) && (v23 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v23)))
    {
      v24 = a5[1];
      if (v24)
      {
        v25 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "valueWithJSValueRef:inContext:", v24, v26);
        v27 = objc_claimAutoreleasedReturnValue();

        v28 = (void *)v27;
      }
      else
      {
        v28 = 0;
      }
      v30 = objc_msgSend(v28, "_isDictionary", v65);

      if ((v30 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        v31 = *a5;
        v32 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        WebKit::toJSCallbackHandler((uint64_t)this, v31, v32, buf);
        v33 = *(WebKit::WebExtensionCallbackHandler **)buf;
        WebKit::toNSDictionary(this, a5[1], 0, 0);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = a5[2];
        v35 = (const OpaqueJSValue *)objc_opt_class();
        WebKit::toNSObject(this, v34, v35, v36);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (v33)
          goto LABEL_39;
        goto LABEL_59;
      }
      v63 = CFSTR("an object is expected");
      v64 = CFSTR("filter");
    }
    else
    {
      v63 = CFSTR("a function is expected");
      v64 = CFSTR("listener");
    }
    v29 = 0;
    *v65 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), &v64->isa, &v63->isa, v22);
    Undefined = JSValueMakeUndefined(this);
    v21 = 0;
    goto LABEL_61;
  }
  if (a4)
  {
    v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      v21 = 0;
      v29 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        v19 = 0;
        v21 = 0;
        v20 = 0;
      }
      else
      {
        v15 = a5[v14];
        if (v15 && (JSValueIsArray(this, a5[v14]) || JSValueIsNull(this, v15) || JSValueIsUndefined(this, v15)))
        {
          v16 = (const OpaqueJSValue *)objc_opt_class();
          WebKit::toNSObject(this, v15, v16, v17);
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = (char *)a4 - 2;
          v20 = 1;
          v21 = (void *)v18;
        }
        else
        {
          v21 = 0;
          v20 = 0;
          v19 = (char *)a4 - 1;
        }
      }
      if (v20 >= v14)
        goto LABEL_33;
      v37 = a5[(_QWORD)v19];
      if (!v37)
        goto LABEL_33;
      v38 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "valueWithJSValueRef:inContext:", v37, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();

      LOBYTE(v38) = objc_msgSend(v40, "_isDictionary");
      if ((v38 & 1) != 0 || JSValueIsNull(this, v37) || JSValueIsUndefined(this, v37))
      {
        WebKit::toNSDictionary(this, v37, 0, 0);
        v41 = objc_claimAutoreleasedReturnValue();
        if (!v19)
        {
          v29 = (void *)v41;
          goto LABEL_59;
        }
        --v19;
        v29 = (void *)v41;
      }
      else
      {
LABEL_33:
        v29 = 0;
      }
      v42 = a5[(_QWORD)v19];
      if (v42)
      {
        if (!JSValueIsObject(this, v42) || (v44 = JSValueToObject(this, v42, 0), !JSObjectIsFunction(this, v44)))
        {
          *v65 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), CFSTR("listener"), CFSTR("a function is expected"), v43);
          v61 = JSValueMakeUndefined(this);
          goto LABEL_60;
        }
        v45 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        WebKit::toJSCallbackHandler((uint64_t)this, v42, v45, buf);
        v33 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(_QWORD *)buf)
        {
          if (v19)
          {
            *v65 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), 0, CFSTR("an unknown argument was provided"), v13);
            v60 = JSValueMakeUndefined(this);
            goto LABEL_55;
          }
LABEL_39:
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v47, buf);
          v48 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (*(_QWORD *)buf)
          {
            v49 = *(_QWORD *)(*(_QWORD *)buf + 24);
            if (v49)
            {
              v50 = *(_QWORD *)(v49 + 8);
              if (v50)
              {
                v51 = *(_QWORD *)(v50 + 24);
                if (v51)
                {
                  v52 = *(_QWORD *)(v51 + 8);
                  if (v52)
                  {
                    v53 = *(_QWORD **)(*(_QWORD *)(v52 + 48) + 16);
                    if (((*(uint64_t (**)(_QWORD *))(*v53 + 1368))(v53) & 1) == 0)
                    {
                      v54 = *(_QWORD *)(v53[2] + 8);
                      if (v54)
                      {
                        CFRetain(*(CFTypeRef *)(v54 - 8));
                        CFRelease(*((CFTypeRef *)v48 + 1));
                        ++*(_DWORD *)v33;
                        v66 = 0;
                        v67 = v33;
                        WebKit::WebExtensionAPIWebRequestEvent::addListener(v11, v54 - 16, &v67, v29, v21, (uint64_t)&v66);
                        v56 = (NSString *)v66;
                        v57 = v67;
                        v67 = 0;
                        if (v57)
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v57);
                        if (v56)
                          *v65 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), 0, v56, v55);
                        Undefined = JSValueMakeUndefined(this);

                        CFRelease(*(CFTypeRef *)(v54 - 8));
                        goto LABEL_56;
                      }
                    }
                  }
                }
              }
            }
            CFRelease(*((CFTypeRef *)v48 + 1));
          }
          v59 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_196BCC000, v59, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          }
          v60 = JSValueMakeUndefined(this);
LABEL_55:
          Undefined = v60;
LABEL_56:

          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v33);
          goto LABEL_62;
        }
      }
    }
LABEL_59:
    *v65 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), CFSTR("listener"), CFSTR("a function is expected"), v13);
    v61 = JSValueMakeUndefined(this);
LABEL_60:
    Undefined = v61;
LABEL_61:

    goto LABEL_62;
  }
  *v65 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("addListener()"), 0, CFSTR("a required argument is missing"), v13);
  Undefined = JSValueMakeUndefined(this);
LABEL_62:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F60180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  void *v13;
  void *v14;
  WebKit::WebExtensionCallbackHandler *v15;

  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequestEvent::removeListener(WebKit::JSWebExtensionAPIWebRequestEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebRequestEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WebKit::WebExtensionCallbackHandler *v30;
  JSValueRef Undefined;
  NSObject *v32;
  const OpaqueJSValue *v34;
  JSValueRef v35;
  WebKit::WebExtensionCallbackHandler *v36;
  WebKit::WebExtensionCallbackHandler *v37;
  uint8_t buf[12];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWebRequestEvent(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_23;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("removeListener()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_32;
  }
  if (!JSValueIsObject(this, *a5) || (v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("removeListener()"), CFSTR("listener"), CFSTR("a function is expected"), v15);
LABEL_32:
    *a6 = v34;
    v35 = JSValueMakeUndefined(this);
    goto LABEL_34;
  }
  v17 = *a5;
  v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v37);
  v20 = v37;
  if (v37)
  {
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
    v23 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v24 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 24);
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 8);
            if (v27)
            {
              v28 = *(_QWORD **)(*(_QWORD *)(v27 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v28 + 1368))(v28) & 1) == 0)
              {
                v29 = *(_QWORD *)(v28[2] + 8);
                if (v29)
                {
                  CFRetain(*(CFTypeRef *)(v29 - 8));
                  CFRelease(*(CFTypeRef *)(v23 + 8));
                  ++*(_DWORD *)v20;
                  v36 = v20;
                  WebKit::WebExtensionAPIWebRequestEvent::removeListener(v12, v29 - 16, &v36);
                  v30 = v36;
                  v36 = 0;
                  if (v30)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
                  Undefined = JSValueMakeUndefined(this);
                  CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_22:
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
                  goto LABEL_23;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    v32 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_22;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("removeListener()"), CFSTR("listener"), CFSTR("a function is expected"), v19);
  v35 = JSValueMakeUndefined(this);
LABEL_34:
  Undefined = v35;
LABEL_23:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F60704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequestEvent::hasListener(WebKit::JSWebExtensionAPIWebRequestEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWebRequestEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  BOOL hasListener;
  JSValueRef Undefined;
  const OpaqueJSValue *v24;
  JSValueRef v25;
  WebKit::WebExtensionCallbackHandler *v26;
  uint8_t buf[8];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWebRequestEvent(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_9;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("hasListener()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_18;
  }
  if (!JSValueIsObject(this, *a5) || (v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("hasListener()"), CFSTR("listener"), CFSTR("a function is expected"), v15);
LABEL_18:
    *a6 = v24;
    v25 = JSValueMakeUndefined(this);
    goto LABEL_20;
  }
  v17 = *a5;
  v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    ++**(_DWORD **)buf;
    v26 = v20;
    hasListener = WebKit::WebExtensionAPIWebRequestEvent::hasListener(v12, &v26);
    Undefined = JSValueMakeBoolean(this, hasListener);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    goto LABEL_9;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("hasListener()"), CFSTR("listener"), CFSTR("a function is expected"), v19);
  v25 = JSValueMakeUndefined(this);
LABEL_20:
  Undefined = v25;
LABEL_9:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F60B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWindows *WebKit::toWebExtensionAPIWindows(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIWindows *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIWindows::windowsClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIWindows::windowsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIWindows *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWindows::windowsClass(WebKit::JSWebExtensionAPIWindows *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  JSClassDefinition v6;

  result = (JSClassRef)WebKit::JSWebExtensionAPIWindows::windowsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWindows::windowsClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v6.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E0CC1100] + 32);
    *(_OWORD *)&v6.finalize = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    v5 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "Windows";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIWindows::staticValues(void)::values;
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWindows::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIWindows::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIWindows::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIWindows::getProperty;
    result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIWindows::windowsClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIWindows::getPropertyNames(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  OpaqueJSString *v17;
  OpaqueJSString *v18;
  OpaqueJSString *v19;
  const char *v20;
  uint64_t v21;

  v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v20);
    v10 = v20;
    if (v20)
    {
      v11 = *((_QWORD *)v20 + 3);
      if (v11
        && (v12 = *(_QWORD *)(v11 + 8)) != 0
        && (v13 = *(_QWORD *)(v12 + 24)) != 0
        && (v14 = *(_QWORD *)(v13 + 8)) != 0
        && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
            ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
      {
        v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      v16 = 0;
    }
    v20 = "create";
    v21 = 7;
    if (WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16))
    {
      v17 = JSStringCreateWithUTF8CString("create");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17)
        JSStringRelease(v17);
    }
    v20 = "update";
    v21 = 7;
    if (WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16))
    {
      v18 = JSStringCreateWithUTF8CString("update");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18)
        JSStringRelease(v18);
    }
    v20 = "remove";
    v21 = 7;
    if (WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16))
    {
      v19 = JSStringCreateWithUTF8CString("remove");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19)
        JSStringRelease(v19);
    }
    if (v16)
      CFRelease(v16[1]);
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
}

void sub_196F60ED8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

void sub_196F60F50()
{
  JUMPOUT(0x196F60F24);
}

uint64_t WebKit::JSWebExtensionAPIWindows::hasProperty(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef *v16;
  uint64_t isPropertyAllowed;
  uint64_t v18;
  const char *v20;
  uint64_t v21;

  v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v20);
  v10 = v20;
  if (v20)
  {
    v11 = *((_QWORD *)v20 + 3);
    if (v11
      && (v12 = *(_QWORD *)(v11 + 8)) != 0
      && (v13 = *(_QWORD *)(v12 + 24)) != 0
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0))
    {
      v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    v16 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "create"))
  {
    v20 = "create";
    v21 = 7;
    isPropertyAllowed = WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_19;
  }
  if (JSStringIsEqualToUTF8CString(a3, "update"))
  {
    v20 = "update";
    v21 = 7;
    isPropertyAllowed = WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_19;
  }
  if (JSStringIsEqualToUTF8CString(a3, "remove"))
  {
    v20 = "remove";
    v21 = 7;
    isPropertyAllowed = WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
LABEL_19:
    v18 = isPropertyAllowed;
    if (!v16)
      goto LABEL_21;
    goto LABEL_20;
  }
  v18 = 0;
  if (v16)
LABEL_20:
    CFRelease(v16[1]);
LABEL_21:
  if (*(_DWORD *)(v7 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
  else
    --*(_DWORD *)(v7 + 48);
  return v18;
}

void sub_196F61108(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::getProperty(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v7;
  uint64_t v8;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  CFTypeRef *v17;
  JSValueRef (__cdecl *v18)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *);
  JSValueRef Undefined;
  JSValueRef v20;
  const char *v22;
  uint64_t v23;

  v7 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  if (!v7)
    return JSValueMakeUndefined(this);
  v8 = v7;
  ++*(_DWORD *)(v7 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v10, &v22);
  v11 = v22;
  if (v22)
  {
    v12 = *((_QWORD *)v22 + 3);
    if (v12
      && (v13 = *(_QWORD *)(v12 + 8)) != 0
      && (v14 = *(_QWORD *)(v13 + 24)) != 0
      && (v15 = *(_QWORD *)(v14 + 8)) != 0
      && (v16 = *(_QWORD **)(*(_QWORD *)(v15 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v16 + 1368))(v16) & 1) == 0))
    {
      v17 = *(CFTypeRef **)(v16[2] + 8);
      if (v17)
      {
        CFRetain(*(v17 - 1));
        v17 -= 2;
      }
    }
    else
    {
      v17 = 0;
    }
    CFRelease(*((CFTypeRef *)v11 + 1));
  }
  else
  {
    v17 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "create")
    && (v22 = "create",
        v23 = 7,
        (WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v17) & 1) != 0))
  {
    v18 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIWindows::create;
  }
  else if (JSStringIsEqualToUTF8CString(a3, "update")
         && (v22 = "update",
             v23 = 7,
             (WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v17) & 1) != 0))
  {
    v18 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIWindows::update;
  }
  else
  {
    if (!JSStringIsEqualToUTF8CString(a3, "remove")
      || (v22 = "remove",
          v23 = 7,
          !WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v17)))
    {
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_24;
    }
    v18 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIWindows::remove;
  }
  Undefined = JSObjectMakeFunctionWithCallback(this, a3, v18);
LABEL_24:
  v20 = Undefined;
  if (v17)
    CFRelease(v17[1]);
  if (*(_DWORD *)(v8 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 8))(v8 + 40);
  else
    --*(_DWORD *)(v8 + 48);
  return v20;
}

void sub_196F61360(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 40) + 8))(v1 + 40);
  else
    --*(_DWORD *)(v1 + 48);
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::get(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWindows *v10;
  uint64_t v11;
  NSObject *v12;
  NSString *v13;
  unint64_t v14;
  const OpaqueJSContext *v15;
  OpaqueJSValue *v16;
  const OpaqueJSValue *v17;
  WebKit::WebExtensionCallbackHandler *v18;
  unint64_t v19;
  unint64_t v20;
  NSString *v21;
  JSValueRef v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  double v28;
  char v29;
  OpaqueJSValue *v30;
  void *v31;
  const OpaqueJSContext *v32;
  const OpaqueJSValue *v33;
  JSValueRef Undefined;
  const OpaqueJSValue *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  const OpaqueJSValue *v40;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v42;
  WebKit::WebExtensionCallbackHandler *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSString *v50;
  NSString *v51;
  WebKit::WebExtensionCallbackHandler *v52;
  void *v53;
  NSObject *v54;
  NSString *v55;
  JSValueRef v57;
  __CFString *v58;
  __CFString *v59;
  id v61;
  WebKit::WebExtensionCallbackHandler *v62;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v65;
  JSObjectRef v66;
  uint8_t buf[8];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((_BYTE *)v10 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v11)
      return Undefined;
    goto LABEL_69;
  }
  v12 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5))
    {
      v22 = a5[1];
      if (v22)
      {
        v23 = (void *)MEMORY[0x1E0CBE108];
        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "valueWithJSValueRef:inContext:", v22, v24);
        v25 = objc_claimAutoreleasedReturnValue();

        v26 = (void *)v25;
      }
      else
      {
        v26 = 0;
      }
      v29 = objc_msgSend(v26, "_isDictionary");

      if ((v29 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (v30 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v30))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          v28 = JSValueToNumber(this, *a5, 0);
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = a5[2];
          v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v27 = v31;
          if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            if (!*(_QWORD *)buf)
            {
LABEL_46:
              reject = 0;
              resolve = 0;
              Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              v66 = resolve;
              *(_QWORD *)buf = this;
              v65 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v66, &v65, &v62);
              v18 = v62;
LABEL_47:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v42, buf);
              v43 = *(WebKit::WebExtensionCallbackHandler **)buf;
              if (*(_QWORD *)buf)
              {
                v44 = *(_QWORD *)(*(_QWORD *)buf + 24);
                if (v44)
                {
                  v45 = *(_QWORD *)(v44 + 8);
                  if (v45)
                  {
                    v46 = *(_QWORD *)(v45 + 24);
                    if (v46)
                    {
                      v47 = *(_QWORD *)(v46 + 8);
                      if (v47)
                      {
                        v48 = *(_QWORD **)(*(_QWORD *)(v47 + 48) + 16);
                        if (((*(uint64_t (**)(_QWORD *))(*v48 + 1368))(v48) & 1) == 0)
                        {
                          v49 = *(_QWORD *)(v48[2] + 8);
                          if (v49)
                          {
                            CFRetain(*(CFTypeRef *)(v49 - 8));
                            CFRelease(*((CFTypeRef *)v43 + 1));
                            *(_QWORD *)buf = v18;
                            v61 = 0;
                            WebKit::WebExtensionAPIWindows::get(v11, v49 - 16, v31, (uint64_t *)buf, &v61, v28);
                            v51 = (NSString *)v61;
                            v52 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(_QWORD *)buf = 0;
                            if (v52)
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v52);
                            if (v51)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.get()"), 0, v51, v50);
                            }
                            else if (Undefined)
                            {
LABEL_59:

                              CFRelease(*(CFTypeRef *)(v49 - 8));
                              v53 = v31;
LABEL_68:

                              goto LABEL_69;
                            }
                            Undefined = JSValueMakeUndefined(this);
                            goto LABEL_59;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*((CFTypeRef *)v43 + 1));
              }
              v54 = qword_1ECE710C8;
              if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_196BCC000, v54, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (Undefined)
                {
LABEL_63:
                  Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("windows.get()"), 0, CFSTR("an unknown error occurred"), v55);
                  if (Undefined)
                    goto LABEL_65;
                }
              }
              else if (Undefined)
              {
                goto LABEL_63;
              }
              Undefined = JSValueMakeUndefined(this);
LABEL_65:
              v27 = v31;
              if (!v18)
              {
LABEL_67:
                v53 = v27;
                goto LABEL_68;
              }
LABEL_66:
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
              goto LABEL_67;
            }
LABEL_28:
            Undefined = 0;
            goto LABEL_47;
          }
          goto LABEL_77;
        }
        v58 = CFSTR("a function is expected");
        v59 = CFSTR("callback");
      }
      else
      {
        v58 = CFSTR("an object is expected");
        v59 = CFSTR("properties");
      }
    }
    else
    {
      v58 = CFSTR("a number is expected");
      v59 = CFSTR("windowID");
    }
    v53 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.get()"), &v59->isa, &v58->isa, v21);
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_68;
  }
  if (a4)
  {
    v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      v27 = 0;
      v18 = 0;
      v28 = NAN;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          v19 = (unint64_t)a4 - 2;
          v20 = 1;
        }
        else
        {
          v18 = 0;
          v20 = 0;
          v19 = (unint64_t)a4 - 1;
        }
      }
      if (v20 >= v14)
        goto LABEL_38;
      v35 = a5[v19];
      if (!v35)
        goto LABEL_38;
      v36 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v37 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "valueWithJSValueRef:inContext:", v35, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      LOBYTE(v37) = objc_msgSend(v38, "_isDictionary");
      if ((v37 & 1) != 0 || JSValueIsNull(this, v35) || JSValueIsUndefined(this, v35))
      {
        WebKit::toNSDictionary(this, v35, 0, 0);
        v39 = objc_claimAutoreleasedReturnValue();
        if (!v19)
        {
          v27 = (void *)v39;
          goto LABEL_77;
        }
        --v19;
        v27 = (void *)v39;
      }
      else
      {
LABEL_38:
        v27 = 0;
      }
      v40 = a5[v19];
      if (v40)
      {
        if (!JSValueIsNumber(this, v40))
          goto LABEL_77;
        v28 = JSValueToNumber(this, v40, 0);
        v14 = v19 - 1;
      }
      else
      {
        v28 = NAN;
        v14 = v19;
      }
    }
    if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if ((v14 & 0x8000000000000000) != 0)
      {
        v31 = v27;
        if (!v18)
          goto LABEL_46;
        goto LABEL_28;
      }
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.get()"), 0, CFSTR("an unknown argument was provided"), v13);
      v57 = JSValueMakeUndefined(this);
LABEL_78:
      Undefined = v57;
      if (!v18)
        goto LABEL_67;
      goto LABEL_66;
    }
LABEL_77:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.get()"), CFSTR("windowID"), CFSTR("a number is expected"), v13);
    v57 = JSValueMakeUndefined(this);
    goto LABEL_78;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.get()"), 0, CFSTR("a required argument is missing"), v13);
  Undefined = JSValueMakeUndefined(this);
LABEL_69:
  if (*(_DWORD *)(v11 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
  else
    --*(_DWORD *)(v11 + 48);
  return Undefined;
}

void sub_196F61D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (*(_DWORD *)(v17 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
  else
    --*(_DWORD *)(v17 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::getCurrent(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWindows *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSString *v46;
  NSString *v47;
  WebKit::WebExtensionCallbackHandler *v48;
  NSObject *v49;
  NSString *v50;
  __CFString *v52;
  __CFString *v53;
  id v54;
  WebKit::WebExtensionCallbackHandler *v55;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v58;
  JSObjectRef v59;
  uint8_t buf[8];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_59;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_68;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_69:
    v52 = CFSTR("an object is expected");
    v53 = CFSTR("info");
    goto LABEL_70;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_69;
  if (!JSValueIsObject(this, a5[1]) || (v26 = JSValueToObject(this, a5[1], 0), !JSObjectIsFunction(this, v26)))
  {
    if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
    {
LABEL_68:
      v52 = CFSTR("a function is expected");
      v53 = CFSTR("callback");
LABEL_70:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.getCurrent()"), &v53->isa, &v52->isa, v21);
      Undefined = JSValueMakeUndefined(this);
      v24 = 0;
      goto LABEL_58;
    }
  }
  WebKit::toNSDictionary(this, *a5, 0, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = a5[1];
  v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
  v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    Undefined = 0;
    goto LABEL_38;
  }
LABEL_37:
  reject = 0;
  resolve = 0;
  Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v59 = resolve;
  *(_QWORD *)buf = this;
  v58 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v59, &v58, &v55);
  v29 = v55;
LABEL_38:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v38, buf);
  v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_52;
  v40 = *(_QWORD *)(*(_QWORD *)buf + 24);
  if (!v40
    || (v41 = *(_QWORD *)(v40 + 8)) == 0
    || (v42 = *(_QWORD *)(v41 + 24)) == 0
    || (v43 = *(_QWORD *)(v42 + 8)) == 0
    || (v44 = *(_QWORD **)(*(_QWORD *)(v43 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v44 + 1368))(v44) & 1) != 0)
    || (v45 = *(_QWORD *)(v44[2] + 8)) == 0)
  {
    CFRelease(*((CFTypeRef *)v39 + 1));
LABEL_52:
    v49 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v49, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_54:
        Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)CFSTR("windows.getCurrent()"), 0, CFSTR("an unknown error occurred"), v50);
        if (Undefined)
          goto LABEL_56;
      }
    }
    else if (Undefined)
    {
      goto LABEL_54;
    }
    Undefined = JSValueMakeUndefined(this);
LABEL_56:
    if (v29)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
    goto LABEL_58;
  }
  CFRetain(*(CFTypeRef *)(v45 - 8));
  CFRelease(*((CFTypeRef *)v39 + 1));
  *(_QWORD *)buf = v29;
  v54 = 0;
  WebKit::WebExtensionAPIWindows::getCurrent(v12, v45 - 16, v24, (uint64_t *)buf, &v54);
  v47 = (NSString *)v54;
  v48 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(_QWORD *)buf = 0;
  if (v48)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v48);
  if (v47)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.getCurrent()"), 0, v47, v46);
    goto LABEL_49;
  }
  if (!Undefined)
LABEL_49:
    Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v45 - 8));
LABEL_58:

LABEL_59:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F62570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::getLastFocused(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWindows *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("info");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIWindows::getLastFocused(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.getLastFocused()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.getLastFocused()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F62C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::getAll(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWindows *v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("info");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIWindows::getAll(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.getAll()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.getAll()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F63360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::windowIdentifierNone(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWindows *v6;
  WebKit::JSWebExtensionAPIWindows *v7;
  NSObject *v8;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    Undefined = JSValueMakeNumber(this, -1.0);
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F63648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::windowIdentifierCurrent(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWindows *v6;
  WebKit::JSWebExtensionAPIWindows *v7;
  NSObject *v8;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    Undefined = JSValueMakeNumber(this, -2.0);
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F638C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::onCreated(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWindows *v6;
  WebKit::JSWebExtensionAPIWindows *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWindows::onCreated(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F63B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::onRemoved(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWindows *v6;
  WebKit::JSWebExtensionAPIWindows *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWindows::onRemoved(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F63DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::onFocusChanged(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  WebKit::JSWebExtensionAPIWindows *v6;
  WebKit::JSWebExtensionAPIWindows *v7;
  NSObject *v8;
  uint64_t v9;
  JSValueRef Undefined;

  v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((_BYTE *)v6 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v7)
      return Undefined;
  }
  else
  {
    v8 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    v9 = WebKit::WebExtensionAPIWindows::onFocusChanged(v7);
    Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v7 + 5) + 8))((uint64_t)v7 + 40);
  else
    --*((_DWORD *)v7 + 12);
  return Undefined;
}

void sub_196F64060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::create(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  JSValueRef v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  OpaqueJSValue *v19;
  OpaqueJSValue *v20;
  NSString *v21;
  const OpaqueJSContext *v22;
  const OpaqueJSValue *v23;
  void *v24;
  char v25;
  OpaqueJSValue *v26;
  const OpaqueJSContext *v27;
  const OpaqueJSValue *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  JSValueRef Undefined;
  JSValueRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSString *v37;
  NSString *v38;
  WebKit::WebExtensionCallbackHandler *v39;
  __CFString *v41;
  __CFString *v42;
  id v43;
  WebKit::WebExtensionCallbackHandler *v44;
  JSObjectRef reject;
  JSObjectRef resolve;
  JSObjectRef v47;
  JSObjectRef v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  v12 = v11;
  if (!v11 || (++*(_DWORD *)(v11 + 48), *(_BYTE *)(v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_44;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        v22 = *a5;
        v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_51;
    }
    v31 = *a5;
    if (*a5)
    {
      v32 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "valueWithJSValueRef:inContext:", v31, v33);
      v34 = objc_claimAutoreleasedReturnValue();

      v35 = (void *)v34;
    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v35, "_isDictionary");

    if ((v36 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      WebKit::toNSDictionary(this, *a5, 0, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
LABEL_52:
    v41 = CFSTR("an object is expected");
    v42 = CFSTR("info");
    goto LABEL_53;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    v24 = 0;
    goto LABEL_37;
  }
  v14 = *a5;
  if (*a5)
  {
    v15 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "valueWithJSValueRef:inContext:", v14, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v18 = (void *)v17;
  }
  else
  {
    v18 = 0;
  }
  v25 = objc_msgSend(v18, "_isDictionary");

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    goto LABEL_52;
  if (JSValueIsObject(this, a5[1]) && (v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    WebKit::toNSDictionary(this, *a5, 0, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = a5[1];
    v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(_QWORD *)buf)
    {
      Undefined = 0;
      goto LABEL_38;
    }
LABEL_37:
    reject = 0;
    resolve = 0;
    Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v48 = resolve;
    *(_QWORD *)buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    v29 = v44;
LABEL_38:
    *(_QWORD *)buf = v29;
    v43 = 0;
    WebKit::WebExtensionAPIWindows::createWindow(v12, v24, (uint64_t *)buf, &v43);
    v38 = (NSString *)v43;
    v39 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(_QWORD *)buf = 0;
    if (v39)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v39);
    if (v38)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.create()"), 0, v38, v37);
    }
    else if (Undefined)
    {
LABEL_43:

      goto LABEL_44;
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_43;
  }
LABEL_51:
  v41 = CFSTR("a function is expected");
  v42 = CFSTR("callback");
LABEL_53:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.create()"), &v42->isa, &v41->isa, v21);
  Undefined = JSValueMakeUndefined(this);
LABEL_44:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F646E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::update(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  JSValueRef v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  JSValueRef v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  WebKit::WebExtensionCallbackHandler *v27;
  JSValueRef v28;
  JSValueRef Undefined;
  int v30;
  OpaqueJSValue *v31;
  double v32;
  const OpaqueJSContext *v33;
  const OpaqueJSValue *v34;
  char v35;
  NSString *v36;
  NSString *v37;
  WebKit::WebExtensionCallbackHandler *v38;
  __CFString *v40;
  __CFString *v41;
  id v42;
  WebKit::WebExtensionCallbackHandler *v43;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v46;
  JSObjectRef v47;
  uint8_t buf[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  v12 = v11;
  if (!v11 || (++*(_DWORD *)(v11 + 48), *(_BYTE *)(v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_39;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if ((unint64_t)a4 > 1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5))
      {
        v21 = a5[1];
        if (v21)
        {
          v22 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "valueWithJSValueRef:inContext:", v21, v23);
          v24 = objc_claimAutoreleasedReturnValue();

          v25 = (void *)v24;
        }
        else
        {
          v25 = 0;
        }
        v35 = objc_msgSend(v25, "_isDictionary");

        if ((v35 & 1) != 0)
        {
          v32 = JSValueToNumber(this, *a5, 0);
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = 0;
LABEL_27:
          if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            if (v26)
            {
              if (v27)
              {
                Undefined = 0;
              }
              else
              {
                reject = 0;
                resolve = 0;
                Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
                v47 = resolve;
                *(_QWORD *)buf = this;
                v46 = reject;
                WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v47, &v46, &v43);
                v27 = v43;
              }
              *(_QWORD *)buf = v27;
              v42 = 0;
              WebKit::WebExtensionAPIWindows::update(v12, v26, (uint64_t *)buf, &v42, v32);
              v37 = (NSString *)v42;
              v38 = *(WebKit::WebExtensionCallbackHandler **)buf;
              *(_QWORD *)buf = 0;
              if (v38)
                WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v38);
              if (v37)
              {
                *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.update()"), 0, v37, v36);
              }
              else if (Undefined)
              {
LABEL_37:

LABEL_38:
                goto LABEL_39;
              }
              Undefined = JSValueMakeUndefined(this);
              goto LABEL_37;
            }
            v26 = 0;
            *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.update()"), CFSTR("properties"), CFSTR("an object is expected"), v14);
            v28 = JSValueMakeUndefined(this);
LABEL_15:
            Undefined = v28;
            if (v27)
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v27);
            goto LABEL_38;
          }
LABEL_14:
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.update()"), CFSTR("windowID"), CFSTR("a number is expected"), v14);
          v28 = JSValueMakeUndefined(this);
          goto LABEL_15;
        }
        goto LABEL_48;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)3)
      {
        v26 = 0;
        v27 = 0;
        goto LABEL_14;
      }
      if (JSValueIsNumber(this, *a5))
      {
        v16 = a5[1];
        if (v16)
        {
          v17 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "valueWithJSValueRef:inContext:", v16, v18);
          v19 = objc_claimAutoreleasedReturnValue();

          v20 = (void *)v19;
        }
        else
        {
          v20 = 0;
        }
        v30 = objc_msgSend(v20, "_isDictionary");

        if (v30)
        {
          if (JSValueIsObject(this, a5[2]) && (v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
            || JSValueIsNull(this, a5[2])
            || JSValueIsUndefined(this, a5[2]))
          {
            v32 = JSValueToNumber(this, *a5, 0);
            WebKit::toNSDictionary(this, a5[1], 0, 0);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = a5[2];
            v34 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
            WebKit::toJSCallbackHandler((uint64_t)this, v33, v34, buf);
            v27 = *(WebKit::WebExtensionCallbackHandler **)buf;
            goto LABEL_27;
          }
          v40 = CFSTR("a function is expected");
          v41 = CFSTR("callback");
LABEL_49:
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.update()"), &v41->isa, &v40->isa, v15);
          Undefined = JSValueMakeUndefined(this);
          v26 = 0;
          goto LABEL_38;
        }
LABEL_48:
        v40 = CFSTR("an object is expected");
        v41 = CFSTR("properties");
        goto LABEL_49;
      }
    }
    v40 = CFSTR("a number is expected");
    v41 = CFSTR("windowID");
    goto LABEL_49;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.update()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_39:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F64DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::remove(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  double v17;
  NSString *v18;
  OpaqueJSValue *v19;
  const OpaqueJSContext *v20;
  const OpaqueJSValue *v21;
  JSValueRef Undefined;
  NSString *v23;
  NSString *v24;
  WebKit::WebExtensionCallbackHandler *v25;
  JSValueRef v27;
  __CFString *v28;
  __CFString *v29;
  id v30;
  WebKit::WebExtensionCallbackHandler *v31;
  JSObjectRef reject;
  JSObjectRef resolve;
  WTF *v34;
  JSObjectRef v35;
  uint8_t buf[8];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  v12 = v11;
  if (!v11 || (++*(_DWORD *)(v11 + 48), *(_BYTE *)(v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_26;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsNumber(this, *a5))
    {
      v17 = JSValueToNumber(this, *a5, 0);
      v16 = 0;
      goto LABEL_16;
    }
    goto LABEL_37;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsNumber(this, *a5))
    {
      if (JSValueIsObject(this, a5[1]) && (v19 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v19))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        v17 = JSValueToNumber(this, *a5, 0);
        v20 = a5[1];
        v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
        v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
LABEL_16:
        if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.remove()"), CFSTR("windowID"), CFSTR("a number is expected"), v15);
          Undefined = JSValueMakeUndefined(this);
          if (v16)
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
          goto LABEL_26;
        }
        if (v16)
        {
          Undefined = 0;
        }
        else
        {
          reject = 0;
          resolve = 0;
          Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
          v35 = resolve;
          *(_QWORD *)buf = this;
          v34 = reject;
          WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v35, &v34, &v31);
          v16 = v31;
        }
        *(_QWORD *)buf = v16;
        v30 = 0;
        WebKit::WebExtensionAPIWindows::remove(v12, (uint64_t *)buf, &v30, v14, v17);
        v24 = (NSString *)v30;
        v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
        *(_QWORD *)buf = 0;
        if (v25)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
        if (v24)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.remove()"), 0, v24, v23);
        }
        else if (Undefined)
        {
LABEL_25:

          goto LABEL_26;
        }
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_25;
      }
      v28 = CFSTR("a function is expected");
      v29 = CFSTR("callback");
LABEL_38:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.remove()"), &v29->isa, &v28->isa, v18);
      v27 = JSValueMakeUndefined(this);
      goto LABEL_39;
    }
LABEL_37:
    v28 = CFSTR("a number is expected");
    v29 = CFSTR("windowID");
    goto LABEL_38;
  }
  if (a4)
  {
    v16 = 0;
    v17 = NAN;
    goto LABEL_16;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windows.remove()"), 0, CFSTR("a required argument is missing"), v15);
  v27 = JSValueMakeUndefined(this);
LABEL_39:
  Undefined = v27;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F6539C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  WebKit::WebExtensionCallbackHandler *v16;

  if (v16)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWindowsEvent *WebKit::toWebExtensionAPIWindowsEvent(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  WebKit::JSWebExtensionAPIWindowsEvent *result;
  OpaqueJSClass *v6;
  OpaqueJSValue *v7;
  char *Private;

  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private)
            return (WebKit::JSWebExtensionAPIWindowsEvent *)(Private - 40);
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(WebKit::JSWebExtensionAPIWindowsEvent *this)
{
  JSClassRef result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  JSClassDefinition v5;

  result = (JSClassRef)WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(void)::jsClass)
  {
    v2 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E0CC1100];
    *(_OWORD *)&v5.parentClass = v2;
    v3 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E0CC1100] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    v4 = *(_OWORD *)(MEMORY[0x1E0CC1100] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E0CC1100] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E0CC1100] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "WindowsEvent";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWindowsEvent::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWindowsEvent::addListener(WebKit::JSWebExtensionAPIWindowsEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWindowsEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  void *v15;
  JSValueRef v16;
  JSValueRef Undefined;
  NSString *v18;
  OpaqueJSValue *v19;
  const OpaqueJSContext *v20;
  const OpaqueJSValue *v21;
  WebKit::WebExtensionCallbackHandler *v22;
  OpaqueJSValue *v23;
  JSValueRef v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  char v29;
  const OpaqueJSContext *v30;
  const OpaqueJSValue *v31;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v33;
  WebKit::WebExtensionCallbackHandler *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSString *v41;
  NSString *v42;
  WebKit::WebExtensionCallbackHandler *v43;
  NSObject *v44;
  __CFString *v46;
  __CFString *v47;
  id v48;
  WebKit::WebExtensionCallbackHandler *v49;
  uint8_t buf[12];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWindowsEvent(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_40;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5))
    {
      v19 = JSValueToObject(this, *a5, 0);
      if (JSObjectIsFunction(this, v19))
      {
        v20 = *a5;
        v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
        v15 = 0;
        v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
        goto LABEL_22;
      }
    }
    goto LABEL_47;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsObject(this, *a5))
    {
      v23 = JSValueToObject(this, *a5, 0);
      if (JSObjectIsFunction(this, v23))
      {
        v24 = a5[1];
        if (v24)
        {
          v25 = (void *)MEMORY[0x1E0CBE108];
          objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "valueWithJSValueRef:inContext:", v24, v26);
          v27 = objc_claimAutoreleasedReturnValue();

          v28 = (void *)v27;
        }
        else
        {
          v28 = 0;
        }
        v29 = objc_msgSend(v28, "_isDictionary");

        if ((v29 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          v30 = *a5;
          v31 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v30, v31, buf);
          v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
          WebKit::toNSDictionary(this, a5[1], 0, 0);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_22:
          if (!v22)
            goto LABEL_8;
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v33, buf);
          v34 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (*(_QWORD *)buf)
          {
            v35 = *(_QWORD *)(*(_QWORD *)buf + 24);
            if (v35)
            {
              v36 = *(_QWORD *)(v35 + 8);
              if (v36)
              {
                v37 = *(_QWORD *)(v36 + 24);
                if (v37)
                {
                  v38 = *(_QWORD *)(v37 + 8);
                  if (v38)
                  {
                    v39 = *(_QWORD **)(*(_QWORD *)(v38 + 48) + 16);
                    if (((*(uint64_t (**)(_QWORD *))(*v39 + 1368))(v39) & 1) == 0)
                    {
                      v40 = *(_QWORD *)(v39[2] + 8);
                      if (v40)
                      {
                        CFRetain(*(CFTypeRef *)(v40 - 8));
                        CFRelease(*((CFTypeRef *)v34 + 1));
                        ++*(_DWORD *)v22;
                        v48 = 0;
                        v49 = v22;
                        WebKit::WebExtensionAPIWindowsEvent::addListener(v12, v40 - 16, &v49, v15, &v48);
                        v42 = (NSString *)v48;
                        v43 = v49;
                        v49 = 0;
                        if (v43)
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v43);
                        if (v42)
                          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.addListener()"), 0, v42, v41);
                        Undefined = JSValueMakeUndefined(this);

                        CFRelease(*(CFTypeRef *)(v40 - 8));
LABEL_39:

                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v22);
                        goto LABEL_40;
                      }
                    }
                  }
                }
              }
            }
            CFRelease(*((CFTypeRef *)v34 + 1));
          }
          v44 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_196BCC000, v44, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          }
          Undefined = JSValueMakeUndefined(this);
          goto LABEL_39;
        }
        v46 = CFSTR("an object is expected");
        v47 = CFSTR("filter");
LABEL_48:
        v15 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.addListener()"), &v47->isa, &v46->isa, v18);
        v16 = JSValueMakeUndefined(this);
        goto LABEL_9;
      }
    }
LABEL_47:
    v46 = CFSTR("a function is expected");
    v47 = CFSTR("listener");
    goto LABEL_48;
  }
  if (a4)
  {
    v15 = 0;
LABEL_8:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.addListener()"), CFSTR("listener"), CFSTR("a function is expected"), v14);
    v16 = JSValueMakeUndefined(this);
LABEL_9:
    Undefined = v16;

    goto LABEL_40;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.addListener()"), 0, CFSTR("a required argument is missing"), v14);
  Undefined = JSValueMakeUndefined(this);
LABEL_40:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F65B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;

  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindowsEvent::removeListener(WebKit::JSWebExtensionAPIWindowsEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWindowsEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  WebKit::WebFrame *GlobalContext;
  const OpaqueJSContext *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WebKit::WebExtensionCallbackHandler *v30;
  JSValueRef Undefined;
  NSObject *v32;
  const OpaqueJSValue *v34;
  JSValueRef v35;
  WebKit::WebExtensionCallbackHandler *v36;
  WebKit::WebExtensionCallbackHandler *v37;
  uint8_t buf[12];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWindowsEvent(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_23;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.removeListener()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_32;
  }
  if (!JSValueIsObject(this, *a5) || (v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    v34 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.removeListener()"), CFSTR("listener"), CFSTR("a function is expected"), v15);
LABEL_32:
    *a6 = v34;
    v35 = JSValueMakeUndefined(this);
    goto LABEL_34;
  }
  v17 = *a5;
  v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v37);
  v20 = v37;
  if (v37)
  {
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
    v23 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v24 = *(_QWORD *)(*(_QWORD *)buf + 24);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 24);
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 8);
            if (v27)
            {
              v28 = *(_QWORD **)(*(_QWORD *)(v27 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v28 + 1368))(v28) & 1) == 0)
              {
                v29 = *(_QWORD *)(v28[2] + 8);
                if (v29)
                {
                  CFRetain(*(CFTypeRef *)(v29 - 8));
                  CFRelease(*(CFTypeRef *)(v23 + 8));
                  ++*(_DWORD *)v20;
                  v36 = v20;
                  WebKit::WebExtensionAPIWindowsEvent::removeListener(v12, v29 - 16, &v36);
                  v30 = v36;
                  v36 = 0;
                  if (v30)
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
                  Undefined = JSValueMakeUndefined(this);
                  CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_22:
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
                  goto LABEL_23;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    v32 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    Undefined = JSValueMakeUndefined(this);
    goto LABEL_22;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.removeListener()"), CFSTR("listener"), CFSTR("a function is expected"), v19);
  v35 = JSValueMakeUndefined(this);
LABEL_34:
  Undefined = v35;
LABEL_23:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F660A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindowsEvent::hasListener(WebKit::JSWebExtensionAPIWindowsEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  WebKit::JSWebExtensionAPIWindowsEvent *v11;
  uint64_t v12;
  NSObject *v13;
  NSString *v14;
  NSString *v15;
  OpaqueJSValue *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSValue *v18;
  NSString *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  BOOL hasListener;
  JSValueRef Undefined;
  const OpaqueJSValue *v24;
  JSValueRef v25;
  WebKit::WebExtensionCallbackHandler *v26;
  uint8_t buf[8];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::toWebExtensionAPIWindowsEvent(this, a3, a3);
  v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((_BYTE *)v11 + 8)))
  {
    Undefined = JSValueMakeUndefined(this);
    if (!v12)
      return Undefined;
    goto LABEL_9;
  }
  v13 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

  if (!a4)
  {
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.hasListener()"), 0, CFSTR("a required argument is missing"), v14);
    goto LABEL_18;
  }
  if (!JSValueIsObject(this, *a5) || (v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    v24 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.hasListener()"), CFSTR("listener"), CFSTR("a function is expected"), v15);
LABEL_18:
    *a6 = v24;
    v25 = JSValueMakeUndefined(this);
    goto LABEL_20;
  }
  v17 = *a5;
  v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
  v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(_QWORD *)buf)
  {
    ++**(_DWORD **)buf;
    v26 = v20;
    hasListener = WebKit::WebExtensionAPIWindowsEvent::hasListener(v12, &v26);
    Undefined = JSValueMakeBoolean(this, hasListener);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    goto LABEL_9;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)CFSTR("windowsEvent.hasListener()"), CFSTR("listener"), CFSTR("a function is expected"), v19);
  v25 = JSValueMakeUndefined(this);
LABEL_20:
  Undefined = v25;
LABEL_9:
  if (*(_DWORD *)(v12 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
  else
    --*(_DWORD *)(v12 + 48);
  return Undefined;
}

void sub_196F664D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
  else
    --*(_DWORD *)(v10 + 48);
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionCallbackHandler *WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(WebKit::WebExtensionCallbackHandler *this, JSValue *a2)
{
  JSValue *v3;
  void *v4;
  JSObjectRef v5;
  void *v6;
  OpaqueJSContext *v7;

  v3 = a2;
  *(_DWORD *)this = 1;
  -[JSValue context](v3, "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = JSValueToObject((JSContextRef)objc_msgSend(v4, "JSGlobalContextRef"), -[JSValue JSValueRef](v3, "JSValueRef"), 0);

  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 2) = 0;
  -[JSValue context](v3, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (OpaqueJSContext *)objc_msgSend(v6, "JSGlobalContextRef");
  *((_QWORD *)this + 3) = v7;
  if (v7)
    JSGlobalContextRetain(v7);

  *((_QWORD *)this + 4) = 0;
  JSValueProtect(*((JSContextRef *)this + 3), *((JSValueRef *)this + 1));

  return this;
}

void sub_196F66614(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  _DWORD *v4;
  OpaqueJSContext *v5;

  v4 = *(_DWORD **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *(OpaqueJSContext **)(v2 + 24);
  if (v5)
    JSGlobalContextRelease(v5);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(uint64_t a1, JSContextRef ctx, uint64_t a3, uint64_t a4)
{
  OpaqueJSContext *GlobalContext;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  GlobalContext = JSContextGetGlobalContext(ctx);
  *(_QWORD *)(a1 + 24) = GlobalContext;
  if (GlobalContext)
  {
    JSGlobalContextRetain(GlobalContext);
    GlobalContext = *(OpaqueJSContext **)(a1 + 24);
  }
  ++*(_DWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 32) = a4;
  JSValueProtect(GlobalContext, *(JSValueRef *)(a1 + 8));
  return a1;
}

void sub_196F666D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v3;
  OpaqueJSContext *v4;

  v3 = *(_DWORD **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *(OpaqueJSContext **)(v1 + 24);
  if (v4)
    JSGlobalContextRelease(v4);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(uint64_t a1, JSContextRef ctx, uint64_t a3)
{
  OpaqueJSContext *GlobalContext;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  GlobalContext = JSContextGetGlobalContext(ctx);
  *(_QWORD *)(a1 + 24) = GlobalContext;
  if (GlobalContext)
    JSGlobalContextRetain(GlobalContext);
  ++*(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 32) = a3;
  return a1;
}

WebKit::WebExtensionCallbackHandler *WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(WebKit::WebExtensionCallbackHandler *this, JSContextRef ctx, OpaqueJSValue *a3, OpaqueJSValue *a4)
{
  OpaqueJSContext *GlobalContext;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  GlobalContext = JSContextGetGlobalContext(ctx);
  *((_QWORD *)this + 3) = GlobalContext;
  if (GlobalContext)
  {
    JSGlobalContextRetain(GlobalContext);
    GlobalContext = (OpaqueJSContext *)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = 0;
  JSValueProtect(GlobalContext, *((JSValueRef *)this + 1));
  JSValueProtect(*((JSContextRef *)this + 3), *((JSValueRef *)this + 2));
  return this;
}

void sub_196F667C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v3;
  OpaqueJSContext *v4;

  v3 = *(_DWORD **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *(OpaqueJSContext **)(v1 + 24);
  if (v4)
    JSGlobalContextRelease(v4);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionCallbackHandler::~WebExtensionCallbackHandler(WebKit::WebExtensionCallbackHandler *this)
{
  const OpaqueJSValue *v2;
  const OpaqueJSValue *v3;
  _DWORD *v4;
  OpaqueJSContext *v5;

  v2 = (const OpaqueJSValue *)*((_QWORD *)this + 1);
  if (v2)
    JSValueUnprotect(*((JSContextRef *)this + 3), v2);
  v3 = (const OpaqueJSValue *)*((_QWORD *)this + 2);
  if (v3)
    JSValueUnprotect(*((JSContextRef *)this + 3), v3);
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (OpaqueJSContext *)*((_QWORD *)this + 3);
  if (v5)
    JSGlobalContextRelease(v5);
}

void sub_196F66884(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v3;
  OpaqueJSContext *v4;

  v3 = *(_DWORD **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *(OpaqueJSContext **)(v1 + 24);
  if (v4)
    JSGlobalContextRelease(v4);
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionCallbackHandler::callbackFunction(WebKit::WebExtensionCallbackHandler *this)
{
  void *v1;
  void *v2;
  void *v3;

  if (*((_QWORD *)this + 3))
  {
    v1 = (void *)*((_QWORD *)this + 1);
    if (v1)
    {
      v2 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "valueWithJSValueRef:inContext:", v1, v3);
      v1 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v1 = 0;
  }
  return v1;
}

void sub_196F6693C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionCallbackHandler::reportError(WebKit::WebExtensionCallbackHandler *this, NSString *a2)
{
  NSString *v3;
  uint64_t v4;
  WebKit::WebExtensionAPIRuntimeBase *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  const OpaqueJSContext *v10;
  OpaqueJSValue *v11;
  objc_object *v12;
  id v13;
  _BYTE v14[24];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = (WebKit::WebExtensionAPIRuntimeBase *)*((_QWORD *)this + 4);
    if (v5)
    {
      v6 = WebKit::WebExtensionAPIRuntimeBase::reportError(v5, v3, this);
    }
    else if (*((_QWORD *)this + 2))
    {
      v7 = qword_1ECE710C8;
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v14 = 138543362;
        *(_QWORD *)&v14[4] = v3;
        _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Promise rejected: %{public}@", v14, 0xCu);
        v4 = *((_QWORD *)this + 3);
      }
      v8 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "valueWithNewErrorFromMessage:inContext:", v3, v9);
      v10 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();

      v11 = (OpaqueJSValue *)*((_QWORD *)this + 2);
      *(_QWORD *)v14 = WebKit::toJSValueRef(*((WebKit **)this + 3), v10, v12);
      v13 = WebKit::callWithArguments<1ul>(v11, (JSContextRef *)this + 3, (JSValueRef *)v14);

    }
  }

}

void sub_196F66AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::callWithArguments<1ul>(JSObjectRef object, JSContextRef *a2, JSValueRef *arguments)
{
  void *v4;
  WebKit *v5;
  const OpaqueJSContext *v6;
  objc_class *v7;

  v4 = 0;
  if (object)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = JSObjectCallAsFunction(*a2, object, 0, 1uLL, arguments, 0);
      WebKit::toNSObject(v5, v6, 0, v7);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v4;
}

id WebKit::WebExtensionCallbackHandler::call(JSObjectRef *this)
{
  WebKit::callWithArguments<0ul>(this[1], this + 3);
  return (id)objc_claimAutoreleasedReturnValue();
}

id WebKit::callWithArguments<0ul>(JSObjectRef object, JSContextRef *a2)
{
  void *v3;
  WebKit *v4;
  const OpaqueJSContext *v5;
  objc_class *v6;

  v3 = 0;
  if (object)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = JSObjectCallAsFunction(*a2, object, 0, 0, 0, 0);
      WebKit::toNSObject(v4, v5, 0, v6);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v3;
}

id WebKit::WebExtensionCallbackHandler::call(WebKit::WebExtensionCallbackHandler *this, objc_object *a2)
{
  objc_object *v3;
  OpaqueJSValue *v4;
  objc_object *v5;
  void *v6;
  JSValueRef arguments;

  v3 = a2;
  v4 = (OpaqueJSValue *)*((_QWORD *)this + 1);
  arguments = WebKit::toJSValueRef(*((WebKit **)this + 3), (const OpaqueJSContext *)v3, v5);
  WebKit::callWithArguments<1ul>(v4, (JSContextRef *)this + 3, &arguments);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_196F66C2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionCallbackHandler::call(WebKit::WebExtensionCallbackHandler *this, objc_object *a2, objc_object *a3)
{
  objc_object *v5;
  objc_object *v6;
  OpaqueJSValue *v7;
  WebKit *v8;
  objc_object *v9;
  objc_object *v10;
  void *v11;
  JSValueRef v13[2];

  v5 = a2;
  v6 = a3;
  v7 = (OpaqueJSValue *)*((_QWORD *)this + 1);
  v8 = (WebKit *)*((_QWORD *)this + 3);
  this = (WebKit::WebExtensionCallbackHandler *)((char *)this + 24);
  v13[0] = WebKit::toJSValueRef(v8, (const OpaqueJSContext *)v5, v9);
  v13[1] = WebKit::toJSValueRef(*(WebKit **)this, (const OpaqueJSContext *)v6, v10);
  WebKit::callWithArguments<2ul>(v7, (JSContextRef *)this, v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_196F66CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::callWithArguments<2ul>(JSObjectRef object, JSContextRef *a2, JSValueRef *arguments)
{
  void *v4;
  WebKit *v5;
  const OpaqueJSContext *v6;
  objc_class *v7;

  v4 = 0;
  if (object)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = JSObjectCallAsFunction(*a2, object, 0, 2uLL, arguments, 0);
      WebKit::toNSObject(v5, v6, 0, v7);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v4;
}

id WebKit::WebExtensionCallbackHandler::call(WebKit::WebExtensionCallbackHandler *this, objc_object *a2, objc_object *a3, objc_object *a4)
{
  objc_object *v7;
  objc_object *v8;
  objc_object *v9;
  OpaqueJSValue *v10;
  WebKit *v11;
  objc_object *v12;
  objc_object *v13;
  objc_object *v14;
  void *v15;
  JSValueRef arguments[3];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (OpaqueJSValue *)*((_QWORD *)this + 1);
  v11 = (WebKit *)*((_QWORD *)this + 3);
  this = (WebKit::WebExtensionCallbackHandler *)((char *)this + 24);
  arguments[0] = WebKit::toJSValueRef(v11, (const OpaqueJSContext *)v7, v12);
  arguments[1] = WebKit::toJSValueRef(*(WebKit **)this, (const OpaqueJSContext *)v8, v13);
  arguments[2] = WebKit::toJSValueRef(*(WebKit **)this, (const OpaqueJSContext *)v9, v14);
  WebKit::callWithArguments<3ul>(v10, (JSContextRef *)this, arguments);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_196F66DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebKit::callWithArguments<3ul>(JSObjectRef object, JSContextRef *a2, JSValueRef *arguments)
{
  void *v4;
  WebKit *v5;
  const OpaqueJSContext *v6;
  objc_class *v7;

  v4 = 0;
  if (object)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = JSObjectCallAsFunction(*a2, object, 0, 3uLL, arguments, 0);
      WebKit::toNSObject(v5, v6, 0, v7);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v4;
}

id WebKit::toNSObject(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3, objc_class *a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  const OpaqueJSContext *v16;
  objc_class *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[5];

  if (!a2)
    return 0;
  v7 = (void *)MEMORY[0x1E0CBE108];
  objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "valueWithJSValueRef:inContext:", a2, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v9, "isArray"))
  {
    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("length"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "toUInt32");
    v12 = v11;

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v14 = 0;
      do
      {
        objc_msgSend(v9, "valueAtIndex:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = (const OpaqueJSContext *)objc_msgSend(v15, "JSValueRef");
        WebKit::toNSObject(this, v16, 0, v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend(v13, "addObject:", v18);

        ++v14;
      }
      while (v12 != v14);
    }
    v19 = (void *)objc_msgSend(v13, "copy");
    if (a3)
    {
      if ((const OpaqueJSValue *)objc_opt_class() != a3)
      {
        v23[0] = MEMORY[0x1E0C809B0];
        v23[1] = 3221225472;
        v23[2] = ___ZN6WebKit10toNSObjectEPK15OpaqueJSContextPK13OpaqueJSValueP10objc_class_block_invoke;
        v23[3] = &__block_descriptor_40_e11_B24__0_8_16lu32l8;
        v23[4] = a3;
        WebKit::filterObjects<NSArray>(v19, v23);
        v20 = objc_claimAutoreleasedReturnValue();

        v19 = (void *)v20;
      }
    }

  }
  else
  {
    if (objc_msgSend(v9, "_isDictionary"))
    {
      WebKit::toNSDictionary(this, a2, 0, 0);
      v22 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (objc_msgSend(v9, "isObject")
        && (objc_msgSend(v9, "isDate") & 1) == 0
        && !objc_msgSend(v9, "isNull"))
      {
        return v9;
      }
      objc_msgSend(v9, "toObject");
      v22 = objc_claimAutoreleasedReturnValue();
    }
    v19 = (void *)v22;
  }

  v9 = v19;
  return v9;
}

void sub_196F67074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit10toNSObjectEPK15OpaqueJSContextPK13OpaqueJSValueP10objc_class_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

id WebKit::toNSDictionary(const OpaqueJSContext *a1, const OpaqueJSValue *a2, uint64_t a3, char a4)
{
  void *v7;
  void *v8;
  void *v9;
  OpaqueJSPropertyNameArray *v10;
  size_t Count;
  void *v12;
  size_t i;
  OpaqueJSPropertyNameArray *v14;
  OpaqueJSString *NameAtIndex;
  OpaqueJSString *v16;
  OpaqueJSString *v17;
  const OpaqueJSValue *Property;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  objc_class *v23;
  void *v24;
  void *v25;
  void *v27;
  void *v29;
  OpaqueJSValue *object;

  if (JSValueIsObject(a1, a2) && (object = JSValueToObject(a1, a2, 0)) != 0)
  {
    v7 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(a1));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "valueWithJSValueRef:inContext:", a2, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = v9;
    if ((objc_msgSend(v9, "_isDictionary") & 1) != 0)
    {
      v10 = JSObjectCopyPropertyNames(a1, object);
      Count = JSPropertyNameArrayGetCount(v10);
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", Count);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v12;
      if (Count)
      {
        for (i = 0; Count != i; ++i)
        {
          v14 = v10;
          NameAtIndex = JSPropertyNameArrayGetNameAtIndex(v10, i);
          v16 = NameAtIndex;
          if (NameAtIndex)
            JSStringRetain(NameAtIndex);
          Property = JSObjectGetProperty(a1, object, v16, 0);
          if ((a3 & 1) == 0 && JSValueIsNull(a1, Property))
            goto LABEL_24;
          WebKit::toNSString(v16, v17);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (Property)
          {
            v20 = (void *)MEMORY[0x1E0CBE108];
            objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(a1));
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "valueWithJSValueRef:inContext:", Property, v21);
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            if ((a4 & 1) != 0)
            {
              v9 = v27;
              if (v22)
                objc_msgSend(v29, "setObject:forKeyedSubscript:", v22, v19);
              goto LABEL_23;
            }
            v9 = v27;
          }
          else
          {
            v22 = 0;
            if ((a4 & 1) != 0)
              goto LABEL_23;
          }
          if (objc_msgSend(v22, "_isDictionary"))
          {
            WebKit::toNSDictionary(a1, Property, a3, 0);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            if (v24)
              goto LABEL_21;
          }
          else
          {
            WebKit::toNSObject(a1, Property, 0, v23);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            if (v24)
LABEL_21:
              objc_msgSend(v29, "setObject:forKeyedSubscript:", v24, v19);
          }

LABEL_23:
          v12 = v29;
LABEL_24:
          if (v16)
            JSStringRelease(v16);
          v10 = v14;
        }
      }
      JSPropertyNameArrayRelease(v10);
      v25 = (void *)objc_msgSend(v12, "copy");

    }
    else
    {
      v25 = 0;
    }

  }
  else
  {
    v25 = 0;
  }
  return v25;
}

void sub_196F6739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

__CFString *WebKit::toNSString(JSContextRef ctx, JSValueRef value, int a3)
{
  __CFString *v3;
  OpaqueJSString *v6;

  if (a3)
  {
    if (a3 != 1)
    {
      if (a3 != 2)
        return v3;
      if (JSValueIsUndefined(ctx, value))
        goto LABEL_9;
    }
    if (JSValueIsNull(ctx, value))
      goto LABEL_9;
  }
  if (!JSValueIsString(ctx, value))
  {
LABEL_9:
    v3 = 0;
    return v3;
  }
  v6 = JSValueToStringCopy(ctx, value, 0);
  v3 = (__CFString *)JSStringCopyCFString(0, v6);
  if (v6)
    JSStringRelease(v6);
  return v3;
}

void sub_196F674D8(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

JSStringRef WebKit::toNSString(JSStringRef string, OpaqueJSString *a2)
{
  if (string)
    string = (JSStringRef)JSStringCopyCFString(0, string);
  return string;
}

JSValueRef WebKit::toJSValueRef(const OpaqueJSContext *a1, void *a2, char a3)
{
  const __CFString *v5;
  __CFString *v6;
  JSValueRef String;
  OpaqueJSString *v8;

  v5 = a2;
  v6 = (__CFString *)v5;
  if (v5 || (a3 & 1) != 0)
  {
    if (!v5)
      v5 = &stru_1E351F1B8;
    v8 = JSStringCreateWithCFString(v5);
    String = JSValueMakeString(a1, v8);
    if (v8)
      JSStringRelease(v8);
  }
  else
  {
    String = JSValueMakeNull(a1);
  }

  return String;
}

{
  void *v5;
  void *v6;
  JSValueRef v7;

  objc_msgSend(a2, "absoluteURL");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "absoluteString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = WebKit::toJSValueRef(a1, v6, a3);

  return v7;
}

void sub_196F67594(_Unwind_Exception *a1)
{
  void *v1;
  OpaqueJSString *v2;

  if (v2)
    JSStringRelease(v2);

  _Unwind_Resume(a1);
}

void sub_196F67620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::toJSCallbackHandler@<X0>(uint64_t this@<X0>, const OpaqueJSContext *a2@<X1>, const OpaqueJSValue *a3@<X2>, _QWORD *a4@<X8>)
{
  const OpaqueJSContext *v7;
  uint64_t v8;
  uint64_t v9;
  JSContextRef v10;

  v10 = (JSContextRef)this;
  if (a2
    && (v7 = (const OpaqueJSContext *)this,
        this = (uint64_t)JSValueToObject((JSContextRef)this, a2, 0),
        (v9 = this) != 0)
    && (this = JSObjectIsFunction(v7, (JSObjectRef)this), (this & 1) != 0))
  {
    this = WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,WebKit::WebExtensionAPIRuntimeBase &>(&v10, &v9, (uint64_t)a3, &v8);
    *a4 = v8;
  }
  else
  {
    *a4 = 0;
  }
  return this;
}

uint64_t WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,WebKit::WebExtensionAPIRuntimeBase &>@<X0>(JSContextRef *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x28);
  result = WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(v8, *a1, *a2, a3);
  *a4 = v8;
  return result;
}

void sub_196F67714(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

id WebKit::serializeJSObject(WebKit *this, const OpaqueJSContext *a2, JSValueRef *exception, const OpaqueJSValue **a4)
{
  OpaqueJSString *JSONString;
  OpaqueJSString *v5;
  void *v6;

  if (a2)
  {
    JSONString = JSValueCreateJSONString(this, a2, 0, exception);
    WebKit::toNSString(JSONString, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (JSONString)
      JSStringRelease(JSONString);
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void sub_196F67778(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196F677F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196F678D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196F67988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196F67A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196F67B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196F67BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196F67D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void WebKit::LaunchServicesDatabaseManager::~LaunchServicesDatabaseManager(WebKit::LaunchServicesDatabaseManager *this)
{
  void *v1;

  *(_QWORD *)this = off_1E34B0180;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = off_1E34B0180;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x19AEB936CLL);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::LaunchServicesDatabaseManager::singleton(void)::$_0 &&>>()
{
  qword_1ECE72088 = 0;
  unk_1ECE72090 = 0;
  qword_1ECE72078 = (uint64_t)&off_1E34B0150;
  unk_1ECE72080 = 0;
}

void WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver(WebKit::LaunchServicesDatabaseObserver *this, void *a2)
{
  uint64_t v3;
  id *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = off_1E34B01B0;
  *((_QWORD *)this + 3) = &unk_1E34B01F8;
  v3 = *((unsigned int *)this + 15);
  v4 = (id *)*((_QWORD *)this + 6);
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    do
    {
      if (*v4)

      ++v4;
      v5 -= 8;
    }
    while (v5);
    v4 = (id *)*((_QWORD *)this + 6);
  }
  if (v4)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  v6 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    CFRelease(v6);
  *(_QWORD *)this = off_1E34B0248;
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)

  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)

}

{
  WTF *v2;
  void *v3;

  WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver(WebKit::LaunchServicesDatabaseObserver *this, void *a2)
{
  WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver((WebKit::LaunchServicesDatabaseObserver *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver((WebKit::LaunchServicesDatabaseObserver *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

char *WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *result;

  v3 = *a1;
  v4 = *a1 + 8 * a2;
  if (*(_QWORD *)v4)
  {

    v3 = *a1;
  }
  result = WTF::VectorMover<false,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>>::moveOverlapping((char *)(v4 + 8), (char *)(v3 + 8 * *((unsigned int *)a1 + 3)), (char *)v4);
  --*((_DWORD *)a1 + 3);
  return result;
}

void WebKit::LaunchServicesDatabaseObserver::initializeConnection(xpc_object_t *this, _xpc_connection_s **a2)
{
  WebKit::XPCEndpoint::sendEndpointToConnection(this, a2[44]);
}

char *WTF::VectorMover<false,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>>::moveOverlapping(char *result, char *a2, char *a3)
{
  char *v3;
  uint64_t v4;

  if (result <= a3)
  {
    if (a2 != result)
    {
      v3 = &a3[((a2 - result) & 0xFFFFFFFFFFFFFFF8) - 8];
      do
      {
        v4 = *((_QWORD *)a2 - 1);
        a2 -= 8;
        *(_QWORD *)v3 = v4;
        v3 -= 8;
        *(_QWORD *)a2 = 0;
      }
      while (a2 != result);
    }
  }
  else
  {
    while (result != a2)
    {
      *(_QWORD *)a3 = *(_QWORD *)result;
      a3 += 8;
      *(_QWORD *)result = 0;
      result += 8;
    }
  }
  return result;
}

void WebKit::LegacyCustomProtocolManager::didReceiveMessage(WebKit::LegacyCustomProtocolManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v5;
  char v6;
  WTF::ASCIICaseInsensitiveHash *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  const void *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  WTF::ASCIICaseInsensitiveHash *v19;
  WTF::StringImpl *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  char v30;
  WTF::ASCIICaseInsensitiveHash *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  CFTypeRef v41;
  CFTypeRef v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  CFTypeRef v53;
  WTF::ASCIICaseInsensitiveHash *v54;
  WTF::StringImpl *v55[2];
  __int128 v56;
  __int128 v57;
  WTF::StringImpl *v58;
  int v59;
  __int16 v60;
  CFTypeRef v61;
  char v62;
  char v63;
  CFTypeRef v64;
  _BYTE v65[40];
  CFTypeRef v66;
  char v67;
  char v68;
  CFTypeRef cf;
  char v70;
  _BYTE v71[200];
  unsigned __int8 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  WTF::StringImpl *v76;
  int v77;
  __int16 v78;
  const void *v79;
  char v80;
  char v81;
  char v82;

  switch(*((_WORD *)a3 + 25))
  {
    case 'd':
      v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v6)
        goto LABEL_34;
      v7 = (WTF::ASCIICaseInsensitiveHash *)v5;
      IPC::Decoder::decode<WebCore::ResourceError>((uint64_t *)a3, (uint64_t)&v73);
      if (!v81)
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v73, v8);
        goto LABEL_34;
      }
      v54 = v7;
      v9 = v73;
      v73 = 0uLL;
      *(_OWORD *)v55 = v9;
      v56 = v74;
      v57 = v75;
      LODWORD(v74) = v74 & 0xFFFFFFFE;
      v58 = v76;
      v59 = v77;
      v60 = v78;
      v10 = v79;
      v76 = 0;
      v79 = 0;
      v61 = v10;
      v62 = v80;
      v63 = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v73, v8);
      WebKit::LegacyCustomProtocolManager::didFailWithError((uint64_t)this, (uint64_t)v7, (WebCore::ResourceError *)v55);
      if (v63)
      {
        v12 = v61;
        v61 = 0;
        if (v12)
          CFRelease(v12);
        v13 = v58;
        v58 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v11);
          else
            *(_DWORD *)v13 -= 2;
        }
        v43 = v55[1];
        v55[1] = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v11);
          else
            *(_DWORD *)v43 -= 2;
        }
        v28 = v55[0];
        v55[0] = 0;
        if (v28)
          goto LABEL_53;
      }
      return;
    case 'e':
      v26 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v27)
        WebKit::LegacyCustomProtocolManager::didFinishLoading((uint64_t)this, v26);
      return;
    case 'f':
      v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v15
        && (v16 = v14,
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)&v54),
            LOBYTE(v55[1])))
      {
        WebKit::LegacyCustomProtocolManager::didLoadData((uint64_t)this, v16, (uint64_t)v54, (uint64_t)v55[0]);
      }
      else
      {
LABEL_34:
        v37 = *(_QWORD *)a3;
        v38 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v39 = *((_QWORD *)a3 + 3);
        if (v39 && v38)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
      }
      return;
    case 'g':
      v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v18)
      {
        LOBYTE(v54) = 0;
        v68 = 0;
        goto LABEL_57;
      }
      v19 = (WTF::ASCIICaseInsensitiveHash *)v17;
      IPC::Decoder::decode<WebCore::ResourceResponse>((uint64_t *)a3, &v73);
      v21 = v82;
      if (!v82)
        goto LABEL_70;
      v22 = *((_QWORD *)a3 + 1);
      v20 = *(WTF::StringImpl **)a3;
      v23 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v22 <= v23)
      {
        v36 = 0;
        v34 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v50 = *((_QWORD *)a3 + 3);
        if (v50)
        {
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
            v34 = *(_QWORD *)a3;
            v36 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v36 = 0;
            v34 = 0;
          }
        }
      }
      else
      {
        v24 = (unsigned __int8 *)v20 + v23;
        *((_QWORD *)a3 + 2) = v24 + 1;
        if (v20)
        {
          v25 = *v24;
          if (v25 >= 3)
            goto LABEL_68;
          v54 = v19;
          std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v55, (uint64_t)&v73);
          v67 = v25;
          v21 = 1;
          goto LABEL_71;
        }
        v36 = v22;
        v34 = 0;
      }
      v22 = 0;
      v20 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v32 = *((_QWORD *)a3 + 3);
      if (v32)
        goto LABEL_80;
      goto LABEL_68;
    case 'h':
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v54);
      if (!LOBYTE(v55[0]))
        return;
      WebKit::LegacyCustomProtocolManager::registerScheme(this, &v54);
      goto LABEL_25;
    case 'i':
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v54);
      if (!LOBYTE(v55[0]))
        return;
      WebKit::LegacyCustomProtocolManager::unregisterScheme(this, &v54);
LABEL_25:
      if (LOBYTE(v55[0]))
      {
        v28 = v54;
        v54 = 0;
        if (v28)
        {
LABEL_53:
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v11);
          else
            *(_DWORD *)v28 -= 2;
        }
      }
      return;
    case 'j':
      v29 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v30)
      {
        LOBYTE(v54) = 0;
        v70 = 0;
        goto LABEL_62;
      }
      v31 = (WTF::ASCIICaseInsensitiveHash *)v29;
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)a3, (uint64_t)v71);
      if (!v72)
      {
        LOBYTE(v54) = 0;
        v70 = 0;
        goto LABEL_40;
      }
      IPC::Decoder::decode<WebCore::ResourceResponse>((uint64_t *)a3, &v73);
      v35 = v82;
      if (!v82)
      {
        LOBYTE(v54) = 0;
        goto LABEL_39;
      }
      v36 = v72;
      if (v72)
      {
        v54 = v31;
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v55, (uint64_t)v71);
        std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v65, (uint64_t)&v73);
        v35 = 1;
LABEL_39:
        v70 = v35;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v73, v33);
LABEL_40:
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v71);
        if (v70)
        {
LABEL_41:
          WebKit::LegacyCustomProtocolManager::wasRedirectedToRequest((uint64_t)this, (uint64_t)v54, (uint64_t)v55, (WebCore::ResourceResponse *)v65);
          if (v70)
          {
            v41 = cf;
            cf = 0;
            if (v41)
              CFRelease(v41);
            WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v65, v40);
            v42 = v64;
            v64 = 0;
            if (v42)
              CFRelease(v42);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v55);
          }
          return;
        }
LABEL_62:
        v47 = *(_QWORD *)a3;
        v48 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v49 = *((_QWORD *)a3 + 3);
        if (!v49)
          return;
        if (!v48)
          return;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47);
        if (!v70)
          return;
        goto LABEL_41;
      }
      __break(1u);
LABEL_80:
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v34, v36);
        v20 = *(WTF::StringImpl **)a3;
        v22 = *((_QWORD *)a3 + 1);
      }
      else
      {
        v22 = 0;
        v20 = 0;
      }
LABEL_68:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v51 = *((_QWORD *)a3 + 3);
      if (v51 && v22)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v51 + 16))(v51, v20);
      v21 = 0;
LABEL_70:
      LOBYTE(v54) = 0;
LABEL_71:
      v68 = v21;
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v73, v20);
      if (!v68)
      {
LABEL_57:
        v44 = *(_QWORD *)a3;
        v45 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v46 = *((_QWORD *)a3 + 3);
        if (!v46)
          return;
        if (!v45)
          return;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44);
        if (!v68)
          return;
      }
      WebKit::LegacyCustomProtocolManager::didReceiveResponse((uint64_t)this, (uint64_t)v54, (WebCore::ResourceResponse *)v55, v67);
      if (v68)
      {
        v53 = v66;
        v66 = 0;
        if (v53)
          CFRelease(v53);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v55, v52);
      }
      return;
    default:
      return;
  }
}

void `non-virtual thunk to'WebKit::LegacyCustomProtocolManager::didReceiveMessage(WebKit::LegacyCustomProtocolManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::LegacyCustomProtocolManager::didReceiveMessage((WebKit::LegacyCustomProtocolManager *)((char *)this - 8), a2, a3);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1)
{
  unint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

void WebKit::LegacyCustomProtocolManagerProxy::didReceiveMessage(WebKit::LegacyCustomProtocolManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  CFTypeRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[192];
  CFTypeRef cf;
  char v25;
  _BYTE v26[200];
  char v27;

  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 != 99)
  {
    if (v5 != 98)
      return;
    v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (v7)
    {
      v8 = v6;
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)a3, (uint64_t)v26);
      v9 = v27;
      if (v27)
      {
        v22 = v8;
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v23, (uint64_t)v26);
        v9 = 1;
      }
      else
      {
        LOBYTE(v22) = 0;
      }
      v25 = v9;
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v26);
      if (v25)
      {
LABEL_12:
        v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
        v16 = (unsigned int *)(v15 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        (*(void (**)(_QWORD, WebKit::LegacyCustomProtocolManagerProxy *, unint64_t, _BYTE *))(**(_QWORD **)(v15 + 424) + 16))(*(_QWORD *)(v15 + 424), this, v22, v23);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v16);
        if (v25)
        {
          v18 = cf;
          cf = 0;
          if (v18)
            CFRelease(v18);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v23);
        }
        return;
      }
    }
    else
    {
      LOBYTE(v22) = 0;
      v25 = 0;
    }
    v19 = *(_QWORD *)a3;
    v20 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v21 = *((_QWORD *)a3 + 3);
    if (!v21)
      return;
    if (!v20)
      return;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
    if (!v25)
      return;
    goto LABEL_12;
  }
  v10 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
  if (v11)
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v13 = (unsigned int *)(v12 + 16);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    (*(void (**)(_QWORD, WebKit::LegacyCustomProtocolManagerProxy *, unint64_t))(**(_QWORD **)(v12 + 424)
                                                                                                 + 24))(*(_QWORD *)(v12 + 424), this, v10);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
  }
}

void WebKit::LibWebRTCCodecsProxy::~LibWebRTCCodecsProxy(WebKit::LibWebRTCCodecsProxy *this)
{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v4 = (WTF *)*((_QWORD *)this + 10);
  v2 = (_QWORD *)((char *)this + 80);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v2, v3);
  v5 = *((_QWORD *)this + 8);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, v3);
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, v3);
  WTF::MachSendRight::~MachSendRight((WebKit::LibWebRTCCodecsProxy *)((char *)this + 48));
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v8 + 16), v7);
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v10);
}

{
  WTF *v1;
  void *v2;

  WebKit::LibWebRTCCodecsProxy::~LibWebRTCCodecsProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  IPC::Connection::removeWorkQueueMessageReceiver(*(_QWORD *)(a1 + 24), 0x14u, 0);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E34B0418;
  v6[1] = a1;
  v6[2] = v5;
  v8 = v6;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 32))(v4, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196F688A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t **WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v6;

  v3 = *a2;
  v4 = **a2;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *a1 = v3;
  return a1;
}

void WebKit::LibWebRTCCodecsProxy::createDecoder(uint64_t a1, WTF *a2, int a3, uint64_t *a4, int a5, int a6, uint64_t *a7)
{
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned __int8 **v17;
  uint64_t v18;
  _QWORD *v19;
  WTF *v20;
  WTF *v21;
  __int128 v22;
  char *v23;
  WTF *v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  uint64_t *v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  WTF *v47;
  WebCore::WebRTCVideoDecoder *LocalH264Decoder;
  int v49;
  void *v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  WebCore::WebRTCVideoDecoder *LocalVP9Decoder;
  void *v56;
  WebCore::WebRTCVideoDecoder *LocalH265Decoder;
  void *v58;
  WTF *v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  WTF *v85;
  WTF *v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  __int128 v96;
  char v97;
  WTF *v98;
  WTF *v99;
  uint64_t v100;
  WTF *v101[2];
  WTF *v102;

  if (!*a4)
    goto LABEL_11;
  switch(a3)
  {
    case 3:
      if (!WTF::StringImpl::startsWith())
        goto LABEL_102;
      v52 = *a4;
      if (!*a4 || *(_DWORD *)(v52 + 4) < 7u)
        goto LABEL_102;
      v53 = *(_QWORD *)(v52 + 8);
      if ((*(_BYTE *)(v52 + 16) & 4) != 0)
      {
        if (*(unsigned __int8 *)(v53 + 5) - 48 > 2)
          goto LABEL_102;
        v54 = *(unsigned __int8 *)(v53 + 6);
      }
      else
      {
        if (*(unsigned __int16 *)(v53 + 10) - 48 >= 3)
          goto LABEL_102;
        v54 = *(unsigned __int16 *)(v53 + 12);
      }
      if (v54 == 46)
        break;
LABEL_102:
      v89 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 16))(v89, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
      return;
    case 1:
      WebCore::parseHEVCCodecParameters();
      if (v97)
      {
        v15 = WebCore::validateHEVCParameters();
        std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v93, v16);
        if (HIBYTE(v15))
          break;
      }
      else
      {
        std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v93, v14);
      }
      goto LABEL_102;
    case 0:
      v13 = WebCore::parseAVCCodecParameters();
      if (!HIBYTE(v13) || v13 > 0x64u || BYTE2(v13) >= 0x35u)
        goto LABEL_102;
      break;
  }
LABEL_11:
  if (a5)
  {
    v17 = *(unsigned __int8 ***)(a1 + 40);
    if (v17)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v17 + 2);
  }
  else
  {
    v17 = 0;
  }
  v102 = 0;
  if (a6)
  {
    v18 = WTF::fastMalloc((WTF *)0x3F8);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E34B02F8;
    v19[1] = a2;
    *(_QWORD *)v18 = v19;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_QWORD *)(v18 + 24) = v18 + 40;
    *(_QWORD *)(v18 + 32) = 120;
    *(_OWORD *)(v18 + 1000) = 0u;
    v20 = v102;
    v102 = (WTF *)v18;
    if (v20)
      std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)&v102, v20);
  }
  v98 = a2;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)(a1 + 24));
  v92 = a6;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v100, (const WTF::MachSendRight *)(a1 + 48));
  v101[0] = (WTF *)v17;
  v101[1] = v102;
  v21 = v99;
  v99 = 0;
  v93 = v98;
  v94 = v21;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v95, (const WTF::MachSendRight *)&v100);
  v22 = *(_OWORD *)v101;
  v101[0] = 0;
  v101[1] = 0;
  v96 = v22;
  v23 = (char *)malloc_type_malloc(0x48uLL, 0x10E0040546E8A43uLL);
  *(_QWORD *)v23 = MEMORY[0x1E0C809A0];
  *((_QWORD *)v23 + 1) = 50331650;
  *((_QWORD *)v23 + 2) = WTF::BlockPtr<void ()(__CVBuffer *,long long,long long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1>(WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1)::{lambda(void *,__CVBuffer *,long long,long long)#1}::__invoke;
  *((_QWORD *)v23 + 3) = &WTF::BlockPtr<void ()(__CVBuffer *,long long,long long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1>(WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1)::descriptor;
  v24 = v94;
  *((_QWORD *)v23 + 4) = v93;
  *((_QWORD *)v23 + 5) = v24;
  v94 = 0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v23 + 48), (const WTF::MachSendRight *)&v95);
  *(_OWORD *)(v23 + 56) = v96;
  v96 = 0uLL;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v95);
  v25 = (unsigned __int8 **)v94;
  v94 = 0;
  if (v25)
  {
    v26 = *v25;
    if (__ldaxr(*v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEABB3C](v26);
LABEL_23:
    v28 = *((_QWORD *)v26 + 1);
    v29 = v28 - 1;
    *((_QWORD *)v26 + 1) = v28 - 1;
    if (v28 == 1)
    {
      v90 = *((_QWORD *)v26 + 2);
      v30 = *((_QWORD *)v26 + 3);
      *((_QWORD *)v26 + 3) = 0;
      v31 = v90 == 0;
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
    v32 = __ldxr(v26);
    if (v32 == 1)
    {
      if (!__stlxr(0, v26))
      {
        if (v29)
          goto LABEL_33;
LABEL_31:
        v33 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v33 = off_1E34ACA48;
        *(_QWORD *)(v33 + 8) = v26;
        *(_QWORD *)(v33 + 16) = v30;
        *(_BYTE *)(v33 + 24) = v31;
        v102 = (WTF *)v33;
        WTF::ensureOnMainRunLoop();
        v34 = v102;
        v102 = 0;
        if (v34)
          (*(void (**)(WTF *))(*(_QWORD *)v34 + 8))(v34);
        goto LABEL_33;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
    if (v29)
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_33:
  v35 = v101[1];
  v101[1] = 0;
  if (v35)
    std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)&v101[1], v35);
  v36 = v101[0];
  v101[0] = 0;
  v37 = a7;
  if (v36)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*((unsigned __int8 **)v36 + 2), v35);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v100);
  v38 = (unsigned __int8 **)v99;
  v99 = 0;
  if (!v38)
    goto LABEL_52;
  v39 = *v38;
  if (__ldaxr(*v38))
  {
    __clrex();
  }
  else if (!__stxr(1u, v39))
  {
    goto LABEL_42;
  }
  MEMORY[0x19AEABB3C](v39);
LABEL_42:
  v41 = *((_QWORD *)v39 + 1);
  v42 = v41 - 1;
  *((_QWORD *)v39 + 1) = v41 - 1;
  if (v41 == 1)
  {
    v91 = *((_QWORD *)v39 + 2);
    v43 = *((_QWORD *)v39 + 3);
    *((_QWORD *)v39 + 3) = 0;
    v44 = v91 == 0;
  }
  else
  {
    v43 = 0;
    v44 = 0;
  }
  v45 = __ldxr(v39);
  if (v45 != 1)
  {
    __clrex();
LABEL_49:
    WTF::Lock::unlockSlow((WTF::Lock *)v39);
    if (!v42)
      goto LABEL_50;
    goto LABEL_52;
  }
  if (__stlxr(0, v39))
    goto LABEL_49;
  if (!v42)
  {
LABEL_50:
    v46 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v46 = off_1E34ACA48;
    *(_QWORD *)(v46 + 8) = v39;
    *(_QWORD *)(v46 + 16) = v43;
    *(_BYTE *)(v46 + 24) = v44;
    v93 = (WTF *)v46;
    WTF::ensureOnMainRunLoop();
    v47 = v93;
    v93 = 0;
    if (v47)
      (*(void (**)(WTF *))(*(_QWORD *)v47 + 8))(v47);
  }
LABEL_52:
  switch(a3)
  {
    case 0:
      LocalH264Decoder = (WebCore::WebRTCVideoDecoder *)webrtc::createLocalH264Decoder();
      v49 = v92;
      WebCore::WebRTCVideoDecoder::createFromLocalDecoder(LocalH264Decoder, v50);
      goto LABEL_65;
    case 1:
      LocalH265Decoder = (WebCore::WebRTCVideoDecoder *)webrtc::createLocalH265Decoder();
      v49 = v92;
      WebCore::WebRTCVideoDecoder::createFromLocalDecoder(LocalH265Decoder, v58);
      goto LABEL_65;
    case 2:
      LocalVP9Decoder = (WebCore::WebRTCVideoDecoder *)webrtc::createLocalVP9Decoder();
      v49 = v92;
      WebCore::WebRTCVideoDecoder::createFromLocalDecoder(LocalVP9Decoder, v56);
      goto LABEL_65;
    case 3:
      WebCore::createAV1VTBDecoder();
      v49 = v92;
LABEL_65:
      v59 = v93;
      _Block_release(v23);
      if (!v59)
        goto LABEL_87;
      v60 = 0;
      v98 = 0;
      if (v49)
      {
        v60 = WTF::fastMalloc((WTF *)0x3F8);
        v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v61 = off_1E34B0368;
        v61[1] = a2;
        *(_QWORD *)v60 = v61;
        *(_OWORD *)(v60 + 8) = 0u;
        *(_QWORD *)(v60 + 24) = v60 + 40;
        *(_QWORD *)(v60 + 32) = 120;
        *(_OWORD *)(v60 + 1000) = 0u;
        v62 = v98;
        v98 = (WTF *)v60;
        if (v62)
        {
          std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)&v98, v62);
          v60 = (uint64_t)v98;
        }
      }
      v64 = (uint64_t *)(a1 + 56);
      v63 = *(_QWORD *)(a1 + 56);
      v98 = 0;
      v93 = v59;
      v94 = (WTF *)v60;
      if (v63
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 56), 0), (v63 = *v64) != 0))
      {
        v65 = *(_DWORD *)(v63 - 8);
      }
      else
      {
        v65 = 0;
      }
      v66 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
      v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
      v69 = v65 & ((v68 >> 31) ^ v68);
      v70 = (uint64_t *)(v63 + 24 * v69);
      v71 = *v70;
      if (!*v70)
        goto LABEL_80;
      v72 = 0;
      v73 = 1;
      break;
    default:
      _Block_release(v23);
LABEL_87:
      v80 = *v37;
      *v37 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 16))(v80, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
      return;
  }
  do
  {
    if ((WTF *)v71 == a2)
      goto LABEL_95;
    if (v71 == -1)
      v72 = v70;
    v69 = (v69 + v73) & v65;
    v70 = (uint64_t *)(v63 + 24 * v69);
    v71 = *v70;
    ++v73;
  }
  while (*v70);
  if (v72)
  {
    *v72 = 0;
    v72[1] = 0;
    v72[2] = 0;
    --*(_DWORD *)(*v64 - 16);
    v70 = v72;
  }
LABEL_80:
  *v70 = (uint64_t)a2;
  v74 = v93;
  v93 = 0;
  v75 = v70[1];
  v70[1] = (uint64_t)v74;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (WTF *)v70[2];
  v77 = v94;
  v94 = 0;
  v70[2] = (uint64_t)v77;
  if (v76)
    std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((_DWORD)v70 + 16, v76);
  v78 = *v64;
  if (*v64)
    v79 = *(_DWORD *)(v78 - 12) + 1;
  else
    v79 = 1;
  *(_DWORD *)(v78 - 12) = v79;
  v81 = *v64;
  if (*v64)
    v82 = *(_DWORD *)(v81 - 12);
  else
    v82 = 0;
  v83 = (*(_DWORD *)(v81 - 16) + v82);
  v84 = *(unsigned int *)(v81 - 4);
  if (v84 <= 0x400)
  {
    if (3 * v84 > 4 * v83)
      goto LABEL_95;
    goto LABEL_94;
  }
  if (v84 <= 2 * v83)
LABEL_94:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 56), v70);
LABEL_95:
  v85 = v94;
  v94 = 0;
  if (v85)
    std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)&v94, v85);
  v86 = v93;
  v93 = 0;
  if (v86)
    (*(void (**)(WTF *))(*(_QWORD *)v86 + 8))(v86);
  atomic_store(1u, (unsigned __int8 *)(a1 + 72));
  v87 = *v37;
  *v37 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = v98;
  v98 = 0;
  if (v88)
    std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)&v98, v88);
}

void sub_196F6916C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, WTF *a13, uint64_t a14, uint64_t a15, WTF *a16, uint64_t a17, uint64_t a18, WTF *a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23)
{
  std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::LibWebRTCCodecsProxy::releaseDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v3 = (uint64_t *)(a1 + 56);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 56), &v9);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  v7 = *(_QWORD *)(a1 + 64);
  if (v7 && *(_DWORD *)(v7 - 12))
  {
    LOBYTE(v8) = 1;
  }
  else
  {
    v8 = *v3;
    if (*v3)
      LOBYTE(v8) = *(_DWORD *)(v8 - 12) != 0;
  }
  atomic_store(v8, (unsigned __int8 *)(a1 + 72));
  return result;
}

uint64_t WebKit::LibWebRTCCodecsProxy::flushDecoder(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v7 = a2;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34B0440;
  v4[1] = a1;
  v4[2] = &v7;
  v6 = v4;
  WebKit::LibWebRTCCodecsProxy::doDecoderTask(a1, a2, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

void sub_196F6975C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::LibWebRTCCodecsProxy::doDecoderTask(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 56), &v7);
  v6 = *(uint64_t **)(a1 + 56);
  if (v6)
    v6 += 3 * *((unsigned int *)v6 - 1);
  if (v6 != result)
    return (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*a3 + 16))(*a3, result + 1);
  return result;
}

uint64_t WebKit::LibWebRTCCodecsProxy::setDecoderFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6)
{
  _QWORD *v8;
  _QWORD *v10;
  __int16 v11;
  __int16 v12;
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  v12 = a5;
  v11 = a6;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34B0468;
  v8[1] = v13;
  v8[2] = &v12;
  v8[3] = &v11;
  v10 = v8;
  WebKit::LibWebRTCCodecsProxy::doDecoderTask(a1, a2, &v10);
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
}

void sub_196F69868(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LibWebRTCCodecsProxy::decodeFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;

  v11[1] = a5;
  v12 = a2;
  v10 = a3;
  v11[0] = a4;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = off_1E34B0490;
  v7[1] = &v10;
  v7[2] = v11;
  v7[3] = a1;
  v7[4] = &v12;
  v9 = v7;
  WebKit::LibWebRTCCodecsProxy::doDecoderTask(a1, a2, &v9);
  return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
}

void sub_196F6990C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LibWebRTCCodecsProxy::setFrameSize(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  _QWORD *v6;
  _QWORD *v8;
  __int16 v9;
  __int16 v10;

  v10 = a3;
  v9 = a4;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34B04B8;
  v6[1] = &v10;
  v6[2] = &v9;
  v8 = v6;
  WebKit::LibWebRTCCodecsProxy::doDecoderTask(a1, a2, &v8);
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
}

void sub_196F699A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::LibWebRTCCodecsProxy::createEncoder(_QWORD *a1, WTF::ThreadSafeWeakPtrControlBlock *a2, unsigned int a3, _QWORD *a4, uint64_t *a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  WTF::ThreadSafeWeakPtrControlBlock *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  _QWORD *v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  uint64_t **v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  void *v31;
  WTF::ThreadSafeWeakPtrControlBlock *v32;
  WTF::ThreadSafeWeakPtrControlBlock *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  WTF::ThreadSafeWeakPtrControlBlock *v37;
  uint64_t *v38;
  uint64_t **v39;
  __int128 v40;
  void *v41;
  _QWORD *v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  WTF::ThreadSafeWeakPtrControlBlock *v55;
  _QWORD *v56;
  unsigned __int8 **v57;
  unsigned __int8 *v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  _QWORD *v65;
  void *v66;
  const void *v67;
  char *v68;
  webrtc *LocalEncoder;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  WTF::ThreadSafeWeakPtrControlBlock *v81;
  uint64_t v82;
  int v83;
  void *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  _QWORD *v108;
  void *__p;
  char v114;
  WTF *v115;
  uint64_t **v116;
  uint64_t *v117;
  uint64_t v118;
  WTF::ThreadSafeWeakPtrControlBlock *v119[2];
  __int128 v120;
  WTF::ThreadSafeWeakPtrControlBlock *v121;
  char v122;
  uint64_t v123;

  v9 = a2;
  v123 = *MEMORY[0x1E0C80C00];
  v117 = 0;
  v118 = 0;
  v116 = &v117;
  v10 = *((unsigned int *)a5 + 3);
  if ((_DWORD)v10)
  {
    v12 = *a5;
    v13 = *a5 + 16 * v10;
    do
    {
      WTF::String::utf8();
      if (__p)
        v14 = (char *)__p + 16;
      else
        v14 = 0;
      WTF::String::utf8();
      if (v115)
        v15 = (char *)v115 + 16;
      else
        v15 = 0;
      v16 = (char **)operator new(0x50uLL);
      v119[0] = (WTF::ThreadSafeWeakPtrControlBlock *)v16;
      v119[1] = (WTF::ThreadSafeWeakPtrControlBlock *)&v117;
      LOBYTE(v120) = 0;
      std::string::basic_string[abi:sn180100]<0>(v16 + 4, v14);
      std::string::basic_string[abi:sn180100]<0>(v16 + 7, v15);
      LOBYTE(v120) = 1;
      v17 = (uint64_t *)v119[0];
      v18 = &v117;
      v19 = &v117;
      v20 = v117;
      if (!v117)
        goto LABEL_18;
      v18 = &v117;
      while (1)
      {
        while (1)
        {
          v19 = (uint64_t **)v20;
          v21 = v20 + 4;
          if ((std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(v17 + 4, (void **)v20 + 4) & 0x80) == 0)break;
          v20 = *v19;
          v18 = v19;
          if (!*v19)
            goto LABEL_18;
        }
        if ((std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(v21, (void **)v17 + 4) & 0x80) == 0)break;
        v18 = v19 + 1;
        v20 = v19[1];
        if (!v20)
          goto LABEL_18;
      }
      if (!*v18)
      {
LABEL_18:
        *v17 = 0;
        v17[1] = 0;
        v17[2] = (uint64_t)v19;
        *v18 = v17;
        if (*v116)
        {
          v116 = (uint64_t **)*v116;
          v17 = *v18;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v117, v17);
        ++v118;
        v119[0] = 0;
      }
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:sn180100]((uint64_t)v119, 0);
      v23 = v115;
      v115 = 0;
      v9 = a2;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
          WTF::fastFree(v23, v22);
        else
          --*(_DWORD *)v23;
      }
      v24 = (WTF *)__p;
      __p = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
          WTF::fastFree(v24, v22);
        else
          --*(_DWORD *)v24;
      }
      v12 += 16;
    }
    while (v12 != v13);
  }
  if (a3 > 1)
    goto LABEL_42;
  if (a3 != 1)
  {
    v25 = (uint64_t **)a1;
    v26 = a6;
    if (a8 != 1)
      v26 = 1;
    if (a8 > 1)
      goto LABEL_42;
    if (!v26)
      goto LABEL_42;
    if (*a4)
    {
      v27 = WebCore::parseAVCCodecParameters();
      if (!HIBYTE(v27) || v27 > 0x64u || BYTE2(v27) >= 0x35u)
        goto LABEL_42;
    }
LABEL_46:
    v32 = (WTF::ThreadSafeWeakPtrControlBlock *)v25[2];
    if (v32)
      v33 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v32);
    else
      v33 = 0;
    v34 = v25[4];
    (*(void (**)(uint64_t *))(*v34 + 48))(v34);
    v35 = malloc_type_malloc(0x40uLL, 0x10E00402CAA57BAuLL);
    v36 = MEMORY[0x1E0C809A0];
    *v35 = MEMORY[0x1E0C809A0];
    v35[1] = 50331650;
    v35[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v35[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v35[4] = v33;
    v35[5] = v25;
    v35[6] = v34;
    v35[7] = v9;
    v37 = (WTF::ThreadSafeWeakPtrControlBlock *)v25[2];
    v108 = v35;
    if (v37)
      v37 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v37);
    v119[0] = v37;
    v119[1] = (WTF::ThreadSafeWeakPtrControlBlock *)v25;
    v38 = v25[4];
    (*(void (**)(uint64_t *))(*v38 + 48))(v38);
    *(_QWORD *)&v120 = v38;
    v39 = v25 + 3;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v120 + 1, v25 + 3);
    v121 = v9;
    v106 = *(_OWORD *)v119;
    v40 = v120;
    *(_OWORD *)v119 = 0u;
    v120 = 0u;
    v42 = malloc_type_malloc(0x48uLL, 0x10E004011C5451DuLL);
    *v42 = v36;
    v42[1] = 50331650;
    v42[2] = WTF::BlockPtr<void ()(unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)#1}::__invoke;
    v42[3] = &WTF::BlockPtr<void ()(unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::descriptor;
    *((_OWORD *)v42 + 2) = v106;
    *((_OWORD *)v42 + 3) = v40;
    v42[8] = v9;
    v43 = (unsigned __int8 **)*((_QWORD *)&v120 + 1);
    *((_QWORD *)&v120 + 1) = 0;
    if (!v43)
    {
LABEL_65:
      v53 = v120;
      *(_QWORD *)&v120 = 0;
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 56))(v53);
      v54 = (unsigned __int8 *)v119[0];
      v119[0] = 0;
      if (v54)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v54, v41);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v119, v39);
      v55 = v119[0];
      v119[0] = 0;
      v119[1] = a2;
      v56 = malloc_type_malloc(0x30uLL, 0x10E00408A6C46E4uLL);
      *v56 = v36;
      v56[1] = 50331650;
      v56[2] = WTF::BlockPtr<void ()(unsigned char const*,unsigned long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2)::{lambda(void *,unsigned char const*,unsigned long)#1}::__invoke;
      v56[3] = &WTF::BlockPtr<void ()(unsigned char const*,unsigned long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2)::descriptor;
      v56[4] = v55;
      v56[5] = a2;
      v57 = (unsigned __int8 **)v119[0];
      v119[0] = 0;
      if (!v57)
      {
LABEL_84:
        v67 = v108;
        if (a3)
          v68 = "H265";
        else
          v68 = "H264";
        std::string::basic_string[abi:sn180100]<0>((char **)&__p, v68);
        webrtc::SdpVideoFormat::SdpVideoFormat();
        LocalEncoder = (webrtc *)webrtc::createLocalEncoder();
        webrtc::SdpVideoFormat::~SdpVideoFormat((webrtc::SdpVideoFormat *)v119);
        if (v114 < 0)
        {
          operator delete(__p);
          if (LocalEncoder)
            goto LABEL_89;
        }
        else if (LocalEncoder)
        {
LABEL_89:
          webrtc::setLocalEncoderLowLatency(LocalEncoder, (void *)a6);
          v70 = a1[5];
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v70 + 16));
          v71 = WTF::fastMalloc((WTF *)0x50);
          v72 = a1 + 8;
          *(_QWORD *)v71 = v70;
          v73 = (unsigned __int8 *)a1;
          WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v71 + 8), (const WTF::MachSendRight *)(a1 + 6));
          *(_BYTE *)(v71 + 12) = 1;
          *(_BYTE *)(v71 + 16) = 0;
          *(_BYTE *)(v71 + 24) = 0;
          *(_QWORD *)(v71 + 72) = 0;
          *(_OWORD *)(v71 + 32) = 0u;
          *(_OWORD *)(v71 + 48) = 0u;
          *(_DWORD *)(v71 + 64) = 0;
          v74 = a1[8];
          if (v74
            || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v72, 0), (v74 = *v72) != 0))
          {
            v75 = *(_DWORD *)(v74 - 8);
          }
          else
          {
            v75 = 0;
          }
          v76 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
          v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
          v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
          v79 = v75 & ((v78 >> 31) ^ v78);
          v80 = v74 + 56 * v79;
          v81 = *(WTF::ThreadSafeWeakPtrControlBlock **)v80;
          if (*(_QWORD *)v80)
          {
            v82 = 0;
            v83 = 1;
            do
            {
              if (v81 == a2)
              {
                WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::SharedVideoFrameReader *)v71);
                goto LABEL_130;
              }
              if (v81 == (WTF::ThreadSafeWeakPtrControlBlock *)-1)
                v82 = v80;
              v79 = (v79 + v83) & v75;
              v80 = v74 + 56 * v79;
              v81 = *(WTF::ThreadSafeWeakPtrControlBlock **)v80;
              ++v83;
            }
            while (*(_QWORD *)v80);
            if (v82)
            {
              *(_QWORD *)(v82 + 48) = 0;
              *(_OWORD *)(v82 + 16) = 0u;
              *(_OWORD *)(v82 + 32) = 0u;
              *(_OWORD *)v82 = 0u;
              --*(_DWORD *)(*v72 - 16);
              v80 = v82;
            }
          }
          *(_QWORD *)v80 = a2;
          *(_QWORD *)(v80 + 8) = LocalEncoder;
          std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100]((WebKit::SharedVideoFrameReader **)(v80 + 16), (WebKit::SharedVideoFrameReader *)v71);
          v85 = *(_QWORD *)(v80 + 24);
          v86 = *(_QWORD *)(v80 + 32);
          *(_QWORD *)(v80 + 24) = 0;
          *(_QWORD *)(v80 + 32) = 0;
          v71 = *(_QWORD *)(v80 + 40);
          *(_QWORD *)(v80 + 40) = 0;
          v87 = *(unsigned int *)(v80 + 48);
          *(_DWORD *)(v80 + 48) = 0;
          v88 = *v72;
          if (*v72)
            v89 = *(_DWORD *)(v88 - 12) + 1;
          else
            v89 = 1;
          *(_DWORD *)(v88 - 12) = v89;
          v91 = *v72;
          if (*v72)
            v92 = *(_DWORD *)(v91 - 12);
          else
            v92 = 0;
          v93 = (*(_DWORD *)(v91 - 16) + v92);
          v94 = *(unsigned int *)(v91 - 4);
          if (v94 > 0x400)
          {
            if (v94 > 2 * v93)
              goto LABEL_112;
          }
          else if (3 * v94 > 4 * v93)
          {
LABEL_112:
            if (v85 <= v86)
            {
              if (v85 != v86)
              {
                v101 = (uint64_t *)(v71 + 8 * v85);
                v102 = 8 * v86 - 8 * v85;
                do
                {
                  v103 = *v101;
                  *v101 = 0;
                  if (v103)
                    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
                  ++v101;
                  v102 -= 8;
                }
                while (v102);
              }
            }
            else
            {
              if (v86)
              {
                v95 = 8 * v86;
                v96 = (uint64_t *)v71;
                do
                {
                  v97 = *v96;
                  *v96 = 0;
                  if (v97)
                    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
                  ++v96;
                  v95 -= 8;
                }
                while (v95);
              }
              if (v85 != v87)
              {
                v98 = (uint64_t *)(v71 + 8 * v85);
                v99 = 8 * v87 - 8 * v85;
                do
                {
                  v100 = *v98;
                  *v98 = 0;
                  if (v100)
                    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
                  ++v98;
                  v99 -= 8;
                }
                while (v99);
              }
            }
            v73 = (unsigned __int8 *)a1;
            v67 = v108;
            if (v71)
LABEL_130:
              WTF::fastFree((WTF *)v71, v84);
            atomic_store(1u, v73 + 72);
            v90 = *a9;
            *a9 = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 16))(v90, 1);
            goto LABEL_132;
          }
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v72, (_QWORD *)v80);
          goto LABEL_112;
        }
        v90 = *a9;
        *a9 = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 16))(v90, 0);
LABEL_132:
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
        _Block_release(v56);
        _Block_release(v42);
        _Block_release(v67);
        goto LABEL_133;
      }
      v58 = *v57;
      if (__ldaxr(*v57))
      {
        __clrex();
      }
      else if (!__stxr(1u, v58))
      {
        goto LABEL_74;
      }
      MEMORY[0x19AEABB3C](v58);
LABEL_74:
      v60 = *((_QWORD *)v58 + 1);
      v61 = v60 - 1;
      *((_QWORD *)v58 + 1) = v60 - 1;
      if (v60 == 1)
      {
        v105 = *((_QWORD *)v58 + 2);
        v62 = *((_QWORD *)v58 + 3);
        *((_QWORD *)v58 + 3) = 0;
        v63 = v105 == 0;
      }
      else
      {
        v62 = 0;
        v63 = 0;
      }
      v64 = __ldxr(v58);
      if (v64 == 1)
      {
        if (!__stlxr(0, v58))
        {
          if (v61)
            goto LABEL_84;
LABEL_82:
          v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v65 = off_1E34ACA48;
          v65[1] = v58;
          v65[2] = v62;
          *((_BYTE *)v65 + 24) = v63;
          __p = v65;
          WTF::ensureOnMainRunLoop();
          v66 = __p;
          __p = 0;
          if (v66)
            (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
          goto LABEL_84;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v58);
      if (v61)
        goto LABEL_84;
      goto LABEL_82;
    }
    v44 = *v43;
    if (__ldaxr(*v43))
    {
      __clrex();
    }
    else if (!__stxr(1u, v44))
    {
      goto LABEL_55;
    }
    MEMORY[0x19AEABB3C](v44);
LABEL_55:
    v46 = *((_QWORD *)v44 + 1);
    v47 = v46 - 1;
    *((_QWORD *)v44 + 1) = v46 - 1;
    if (v46 == 1)
    {
      v104 = *((_QWORD *)v44 + 2);
      v48 = *((_QWORD *)v44 + 3);
      *((_QWORD *)v44 + 3) = 0;
      v49 = v104 == 0;
    }
    else
    {
      v48 = 0;
      v49 = 0;
    }
    v50 = __ldxr(v44);
    if (v50 == 1)
    {
      if (!__stlxr(0, v44))
      {
        if (v47)
          goto LABEL_65;
LABEL_63:
        v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v51 = off_1E34ACA48;
        v51[1] = v44;
        v51[2] = v48;
        *((_BYTE *)v51 + 24) = v49;
        __p = v51;
        WTF::ensureOnMainRunLoop();
        v52 = __p;
        __p = 0;
        if (v52)
          (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
        goto LABEL_65;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
    if (v47)
      goto LABEL_65;
    goto LABEL_63;
  }
  v25 = (uint64_t **)a1;
  if (!a8)
  {
    if (!*a4)
      goto LABEL_46;
    WebCore::parseHEVCCodecParameters();
    if (v122)
    {
      v30 = WebCore::validateHEVCParameters();
      std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119, v31);
      if (HIBYTE(v30))
        goto LABEL_46;
    }
    else
    {
      std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119, v29);
    }
  }
LABEL_42:
  v28 = *a9;
  *a9 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_133:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v116, v117);
}

void sub_196F6A424(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, void *aBlock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,WTF *a21,char a22,_QWORD *a23,uint64_t a24,WTF::ThreadSafeWeakPtrControlBlock *a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a25, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void WebKit::LibWebRTCCodecsProxy::releaseEncoder(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  WebKit::SharedVideoFrameReader *v7;
  webrtc *v8;
  unint64_t v9;
  unint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;

  v36 = a2;
  v3 = (uint64_t *)(a1 + 64);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v36);
  v6 = *(uint64_t **)(a1 + 64);
  if (v6)
    v6 += 7 * *((unsigned int *)v6 - 1);
  if (v6 != v4)
  {
    v7 = (WebKit::SharedVideoFrameReader *)v4[2];
    v8 = (webrtc *)v4[1];
    v9 = v4[3];
    v10 = v4[4];
    v4[2] = 0;
    v4[3] = 0;
    v11 = (WTF *)v4[5];
    v4[4] = 0;
    v4[5] = 0;
    v12 = *((unsigned int *)v4 + 12);
    *((_DWORD *)v4 + 12) = 0;
    if (*v3)
    {
      v13 = *v3 + 56 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v13 != v4)
        goto LABEL_7;
    }
    else if (v4)
    {
      v13 = 0;
LABEL_7:
      if ((uint64_t *)v13 != v4)
      {
        *v4 = -1;
        std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100]((WebKit::SharedVideoFrameReader **)v4 + 2, 0);
        ++*(_DWORD *)(*v3 - 16);
        v14 = *v3;
        v15 = *v3 ? *(_DWORD *)(v14 - 12) - 1 : -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *v3;
        if (*v3)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v18 >> 1, 0);
        }
      }
    }
    if (v8)
    {
      webrtc::releaseLocalEncoder(v8, v5);
      v20 = *(_QWORD *)(a1 + 32);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      v21[3] = v11;
      v21[4] = 0;
      *v21 = &off_1E34B04E0;
      v21[1] = v9;
      v21[2] = v10;
      *((_DWORD *)v21 + 8) = v12;
      v35 = v21;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v20 + 32))(v20, &v35);
      v22 = v35;
      v35 = 0;
      if (v22)
        (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      if (*v3 && *(_DWORD *)(*v3 - 12))
      {
        LOBYTE(v23) = 1;
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 56);
        if (v23)
          LOBYTE(v23) = *(_DWORD *)(v23 - 12) != 0;
      }
      atomic_store(v23, (unsigned __int8 *)(a1 + 72));
    }
    else
    {
      if (v9 <= v10)
      {
        if (v9 != v10)
        {
          v30 = (uint64_t *)((char *)v11 + 8 * v9);
          v31 = 8 * v10 - 8 * v9;
          do
          {
            v32 = *v30;
            *v30 = 0;
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            ++v30;
            v31 -= 8;
          }
          while (v31);
        }
      }
      else
      {
        if (v10)
        {
          v24 = 8 * v10;
          v25 = v11;
          do
          {
            v26 = *(_QWORD *)v25;
            *(_QWORD *)v25 = 0;
            if (v26)
              (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v25 = (WTF *)((char *)v25 + 8);
            v24 -= 8;
          }
          while (v24);
        }
        if (v9 != v12)
        {
          v27 = (uint64_t *)((char *)v11 + 8 * v9);
          v28 = 8 * v12 - 8 * v9;
          do
          {
            v29 = *v27;
            *v27 = 0;
            if (v29)
              (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            ++v27;
            v28 -= 8;
          }
          while (v28);
        }
      }
      if (v11)
        WTF::fastFree(v11, v5);
    }
    if (v7)
    {
      WebKit::SharedVideoFrameReader::~SharedVideoFrameReader(v7);
      WTF::fastFree(v33, v34);
    }
  }
}

uint64_t *WebKit::LibWebRTCCodecsProxy::initializeEncoder(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v7);
  v6 = *(uint64_t **)(a1 + 64);
  if (v6)
    v6 += 7 * *((unsigned int *)v6 - 1);
  if (v6 != result)
    return (uint64_t *)webrtc::initializeLocalEncoder((webrtc *)result[1], a3);
  return result;
}

void WebKit::LibWebRTCCodecsProxy::encodeFrame(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  WebCore *v15;
  WTF **v16;
  WebCore::PixelBufferConformerCV *v17;
  WebCore::PixelBufferConformerCV *v18;
  const __CFDictionary *v19;
  WTF *v20;
  CFTypeRef v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  WTF *v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CFTypeRef v64;
  WTF *v65;
  _QWORD *v66;
  WTF *v67;
  CFTypeRef v68;
  unsigned int *v69;
  CFTypeRef cf;
  uint64_t CoreVideo_kCVPixelBufferPixelFormatTypeKey;
  _QWORD v72[2];

  v72[1] = *MEMORY[0x1E0C80C00];
  cf = a2;
  v11 = (uint64_t **)(a1 + 8);
  v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 8, &cf);
  v13 = v12;
  v14 = *v11;
  if (*v11)
    v14 += 7 * *((unsigned int *)v14 - 1);
  if (v14 != v12)
  {
    WebKit::SharedVideoFrameReader::readBuffer(v12[2], a3 + 24);
    if (cf)
    {
      v15 = (WebCore *)((uint64_t (*)(void))*MEMORY[0x1E0DD4928])();
      if ((_DWORD)v15 != 1111970369)
        goto LABEL_11;
      v18 = (WebCore::PixelBufferConformerCV *)a1[10];
      v16 = (WTF **)(a1 + 10);
      v17 = v18;
      if (!v18)
      {
        CoreVideo_kCVPixelBufferPixelFormatTypeKey = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(v15);
        v72[0] = &unk_1E356FCB8;
        v19 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v72, &CoreVideo_kCVPixelBufferPixelFormatTypeKey, 1);
        v17 = (WebCore::PixelBufferConformerCV *)WTF::fastMalloc((WTF *)8);
        WebCore::PixelBufferConformerCV::PixelBufferConformerCV(v17, v19);
        v20 = *v16;
        *v16 = v17;
        if (v20)
        {
          std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v16, v20);
          v17 = *v16;
        }
      }
      WebCore::PixelBufferConformerCV::convert(v17, (__CVBuffer *)cf);
      v21 = cf;
      cf = v68;
      if (v21)
      {
        CFRelease(v21);
        if (cf)
        {
LABEL_11:
          v23 = v13[3];
          v22 = v13[4];
          if (v23)
          {
            if (v22 + 1 == v23)
            {
              LODWORD(v24) = *((_DWORD *)v13 + 12);
LABEL_29:
              v33 = v24;
              v34 = ((unint64_t)v24 >> 2) + v24;
              if (v34 <= 0xF)
                v34 = 15;
              if (v34 >= 0x1FFFFFFF)
              {
                __break(0xC471u);
                return;
              }
              v35 = (WTF *)v13[5];
              v36 = v34 + 1;
              v37 = WTF::fastMalloc((WTF *)(8 * (v34 + 1)));
              v39 = v35;
              v40 = (_QWORD *)v37;
              *((_DWORD *)v13 + 12) = v36;
              v13[5] = v37;
              v41 = v13[3];
              v42 = v13[4];
              if (v41 <= v42)
              {
                if (v41 != v42)
                {
                  v56 = (_QWORD *)(v37 + 8 * v41);
                  v57 = (uint64_t *)((char *)v39 + 8 * v41);
                  v58 = 8 * v42 - 8 * v41;
                  do
                  {
                    v59 = *v57;
                    *v57 = 0;
                    *v56 = v59;
                    v60 = *v57;
                    *v57 = 0;
                    if (v60)
                    {
                      v67 = v39;
                      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
                      v39 = v67;
                    }
                    ++v56;
                    ++v57;
                    v58 -= 8;
                  }
                  while (v58);
                }
              }
              else
              {
                if (v42)
                {
                  v43 = 8 * v42;
                  v44 = v39;
                  do
                  {
                    v45 = *(_QWORD *)v44;
                    *(_QWORD *)v44 = 0;
                    *v40 = v45;
                    v46 = *(_QWORD *)v44;
                    *(_QWORD *)v44 = 0;
                    if (v46)
                    {
                      v65 = v39;
                      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
                      v39 = v65;
                    }
                    ++v40;
                    v44 = (WTF *)((char *)v44 + 8);
                    v43 -= 8;
                  }
                  while (v43);
                  v36 = *((_DWORD *)v13 + 12);
                  v41 = v13[3];
                  v40 = (_QWORD *)v13[5];
                }
                v47 = v41 - v33 + v36;
                if (v41 != v33)
                {
                  v48 = v36;
                  v49 = (uint64_t *)((char *)v39 + 8 * v41);
                  v50 = &v40[v48];
                  v51 = 8 * v41 - 8 * v33;
                  do
                  {
                    v52 = *v49;
                    *v49 = 0;
                    *(_QWORD *)((char *)v50 + v51) = v52;
                    v53 = *v49;
                    *v49 = 0;
                    if (v53)
                    {
                      v54 = v39;
                      v55 = v47;
                      v66 = v50;
                      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
                      v50 = v66;
                      v47 = v55;
                      v39 = v54;
                    }
                    ++v49;
                    v51 += 8;
                  }
                  while (v51);
                }
                v13[3] = v47;
              }
              if (v39)
              {
                if ((WTF *)v13[5] == v39)
                {
                  v13[5] = 0;
                  *((_DWORD *)v13 + 12) = 0;
                }
                WTF::fastFree(v39, v38);
              }
              v22 = v13[4];
            }
          }
          else
          {
            v24 = *((unsigned int *)v13 + 12);
            if (v22)
            {
              if (v22 == v24 - 1)
                goto LABEL_29;
            }
            else
            {
              if (!(_DWORD)v24)
                goto LABEL_29;
              v22 = 0;
            }
          }
          v61 = v13[5];
          v62 = *a8;
          *a8 = 0;
          *(_QWORD *)(v61 + 8 * v22) = v62;
          if (v22 == *((unsigned int *)v13 + 12) - 1)
            v63 = 0;
          else
            v63 = v22 + 1;
          v13[4] = v63;
          WTF::MediaTime::toDouble((WTF::MediaTime *)a3);
          webrtc::encodeLocalEncoderFrame();
          goto LABEL_59;
        }
      }
      else if (v68)
      {
        goto LABEL_11;
      }
    }
    v32 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 16))(v32, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
LABEL_59:
    v64 = cf;
    cf = 0;
    if (v64)
      CFRelease(v64);
    return;
  }
  if (*(_DWORD *)(a3 + 40) == 1)
  {
    v25 = a1[5];
    WTF::ApproximateTime::now((WTF::ApproximateTime *)v12);
    IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read(v25 + 32, (__int128 *)(a3 + 24), &v69, v26 + 0.0);
    v27 = v69;
    v69 = 0;
    if (v27)
    {
      v28 = v27 + 2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v27 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
      }
    }
  }
  v31 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
}

void sub_196F6B4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  WTF::ThreadSafeWeakPtrControlBlock *v7;
  WTF::ThreadSafeWeakPtrControlBlock *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 16);
  if (v7)
    v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v7);
  else
    v8 = 0;
  v9 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v9 = &off_1E34B0508;
  *(_QWORD *)(v9 + 8) = a1;
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = a1;
  *(_QWORD *)(v9 + 32) = a2;
  *(_BYTE *)(v9 + 40) = a3;
  v11 = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196F6B5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LibWebRTCCodecsProxy::flushEncoder(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v9 = a2;
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v9);
  v6 = *(uint64_t **)(a1 + 64);
  if (v6)
    v6 += 7 * *((unsigned int *)v6 - 1);
  if (v6 != v5)
    MEMORY[0x19AEAC394](v5[1]);
  v7 = *(_QWORD *)(a1 + 32);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v9, a3);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196F6B6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::LibWebRTCCodecsProxy::setEncodeRates(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v7);
  v6 = *(uint64_t **)(a1 + 64);
  if (v6)
    v6 += 7 * *((unsigned int *)v6 - 1);
  if (v6 != result)
    return (uint64_t *)webrtc::setLocalEncoderRates((webrtc *)result[1], a3);
  return result;
}

uint64_t *WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameSemaphore(uint64_t a1, uint64_t a2, IPC::Semaphore *a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v7);
  v6 = *(uint64_t **)(a1 + 64);
  if (v6)
    v6 += 7 * *((unsigned int *)v6 - 1);
  if (v6 != result)
    return (uint64_t *)std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(result[2] + 16), a3);
  return result;
}

uint64_t *WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameMemory(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t v5;

  v5 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v5);
  v4 = *(uint64_t **)(a1 + 64);
  if (v4)
    v4 += 7 * *((unsigned int *)v4 - 1);
  if (v4 != result)
    return (uint64_t *)WebKit::SharedVideoFrameReader::setSharedMemory(result[2]);
  return result;
}

uint64_t IPC::MessageReceiver::didReceiveSyncMessage()
{
  return 0;
}

void IPC::WorkQueueMessageReceiver::~WorkQueueMessageReceiver(unsigned int **this, void *a2)
{
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;

  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  WTF::fastFree((WTF *)this, v3);
}

void IPC::MessageReceiver::~MessageReceiver(unsigned int **this, void *a2)
{
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, WTF *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)(a1 + 16);
    do
    {
      if (*(v4 - 2) != (WTF *)-1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
          std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)v4, a2);
        v5 = (uint64_t)*(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100](int a1, WTF *this)
{
  const void *v3;

  if (this)
  {
    v3 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v3)
      CFRelease(v3);
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF **v7;
  WTF *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = 0;
    while (*(_QWORD *)(a1 + 56 * v4) == -1)
    {
LABEL_26:
      if (++v4 == v3)
        return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
    v5 = a1 + 56 * v4;
    v8 = *(WTF **)(v5 + 40);
    v7 = (WTF **)(v5 + 40);
    v6 = v8;
    v9 = (unint64_t)*(v7 - 2);
    v10 = (unint64_t)*(v7 - 1);
    if (v9 <= v10)
    {
      if (v9 == v10)
      {
LABEL_23:
        if (v6)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 56 * v4 + 48) = 0;
          WTF::fastFree(v6, a2);
        }
        std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100]((WebKit::SharedVideoFrameReader **)(a1 + 56 * v4 + 16), 0);
        goto LABEL_26;
      }
      v17 = (uint64_t *)((char *)v6 + 8 * v9);
      v18 = 8 * v10 - 8 * v9;
      do
      {
        v19 = *v17;
        *v17 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    else
    {
      if (v10)
      {
        v11 = 8 * v10;
        do
        {
          v12 = *(_QWORD *)v6;
          *(_QWORD *)v6 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          v6 = (WTF *)((char *)v6 + 8);
          v11 -= 8;
        }
        while (v11);
        v6 = *v7;
        v9 = (unint64_t)*(v7 - 2);
      }
      v13 = *(unsigned int *)(a1 + 56 * v4 + 48);
      if (v9 != v13)
      {
        v14 = (uint64_t *)((char *)v6 + 8 * v9);
        v15 = 8 * v13 - 8 * v9;
        do
        {
          v16 = *v14;
          *v14 = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
    }
    v6 = *v7;
    goto LABEL_23;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_0,void,WebCore::FrameRateMonitor::LateFrameInfo>::call(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v3 = off_1E34B0320;
  *(_QWORD *)(v3 + 8) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v6;
  v7 = v3;
  WTF::callOnMainRunLoop();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_196F6BB90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

double _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20LibWebRTCCodecsProxy21createDecoderCallbackENS_23ObjectIdentifierGenericINS2_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEbbENK3__0clIN7WebCore16FrameRateMonitor13LateFrameInfoEEEDaT_EUlvE_vJEE4callEv(uint64_t a1)
{
  NSObject *v2;
  double result;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  double v12;
  __int16 v13;
  double v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(double *)(a1 + 16);
    v4 = *(double *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 134219264;
    v10 = v6;
    v11 = 2048;
    v12 = v5;
    v13 = 2048;
    v14 = v4;
    v15 = 2048;
    v16 = v7;
    v17 = 2048;
    v18 = (v5 - v4) * 1000.0;
    v19 = 2048;
    v20 = v8;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "LibWebRTCCodecsProxy decoder %llu generated a video frame at %f, previous frame was at %f, observed frame rate is %f, delay since last frame is %f ms, frame count is %lu", (uint8_t *)&v9, 0x3Eu);
  }
  return result;
}

void std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF *v3;
  uint64_t v5;

  if (this)
  {
    v3 = (WTF *)*((_QWORD *)this + 3);
    if ((WTF *)((char *)this + 40) != v3 && v3 != 0)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v3, this);
    }
    v5 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    WTF::fastFree(this, this);
  }
}

unsigned __int8 ***WTF::BlockPtr<void ()(__CVBuffer *,long long,long long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1>(WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;

  v4 = *(WTF **)(a1 + 64);
  v2 = (_QWORD *)(a1 + 64);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)v2, v3);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v3);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 48));
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 40));
}

unsigned int *WTF::BlockPtr<void ()(__CVBuffer *,long long,long long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1>(WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL)::$_1)::{lambda(void *,__CVBuffer *,long long,long long)#1}::__invoke(_QWORD *a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  IPC::Encoder *v5;
  WebCore::FrameRateMonitor *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  unsigned int *result;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  size_t v60;
  char *v61;
  void *v62;
  unint64_t v63;
  size_t v64;
  char *v65;
  void *v66;
  unint64_t v67;
  size_t v68;
  char *v69;
  void *v70;
  unint64_t v71;
  size_t v72;
  char *v73;
  void *v74;
  IPC::Encoder *v75;
  char v76;
  unsigned int *v77;
  CFTypeRef cfa;

  v5 = (IPC::Encoder *)(a1 + 4);
  if (!cf)
  {
    v35 = a1[5];
    v75 = v5;
    return (unsigned int *)IPC::Connection::send<Messages::LibWebRTCCodecs::FailedDecoding>(v35, (uint64_t **)&v75);
  }
  v9 = (WebCore::FrameRateMonitor *)a1[8];
  if (v9)
    WebCore::FrameRateMonitor::update(v9);
  CFRetain(cf);
  LOBYTE(v75) = 0;
  v76 = 0;
  WebCore::VideoFrameCV::create();
  cfa = 0;
  CFRelease(cf);
  if (WebCore::ProcessIdentity::operator BOOL())
    WebCore::VideoFrameCV::setOwnershipIdentity();
  v10 = a1[7];
  if (!v10)
  {
    v37 = a1[5];
    CFRetain(cf);
    v38 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v38 = 123;
    *(_QWORD *)(v38 + 8) = 0;
    v39 = (void *)(v38 + 16);
    *(_QWORD *)(v38 + 528) = v38 + 16;
    *(_QWORD *)(v38 + 536) = v38 + 16;
    *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v38 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
    v75 = (IPC::Encoder *)v38;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v38, (uint64_t *)v5);
    v40 = *(_QWORD *)(v38 + 544);
    v41 = (v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = v41 + 8;
    v43 = *(_QWORD *)(v38 + 552);
    if (v43 < v41 + 8)
    {
      v67 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v68 = v67;
        v67 *= 2;
      }
      while (v68 < v42);
      v69 = (char *)mmap(0, v68, 3, 4098, -1, 0);
      if (v69 == (char *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x196F6C2DCLL);
      }
      v44 = v69;
      memcpy(v69, *(const void **)(v38 + 528), *(_QWORD *)(v38 + 544));
      v70 = *(void **)(v38 + 528);
      if (v70 != v39)
        munmap(v70, *(_QWORD *)(v38 + 552));
      *(_QWORD *)(v38 + 528) = v44;
      *(_QWORD *)(v38 + 552) = v68;
      v40 = *(_QWORD *)(v38 + 544);
    }
    else
    {
      v44 = *(char **)(v38 + 528);
    }
    bzero(&v44[v40], v41 - v40);
    *(_QWORD *)(v38 + 544) = v42;
    v45 = (_QWORD *)(*(_QWORD *)(v38 + 528) + v41);
    *(_QWORD *)(v38 + 536) = v45 + 1;
    *v45 = a3;
    v46 = *(_QWORD *)(v38 + 544);
    v47 = (v46 + 7) & 0xFFFFFFFFFFFFFFF8;
    v48 = v47 + 8;
    v49 = *(_QWORD *)(v38 + 552);
    if (v49 < v47 + 8)
    {
      v71 = (2 * v49 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v72 = v71;
        v71 *= 2;
      }
      while (v72 < v48);
      v73 = (char *)mmap(0, v72, 3, 4098, -1, 0);
      if (v73 == (char *)-1)
      {
        __break(0xC471u);
        goto LABEL_60;
      }
      v50 = v73;
      memcpy(v73, *(const void **)(v38 + 528), *(_QWORD *)(v38 + 544));
      v74 = *(void **)(v38 + 528);
      if (v74 != v39)
        munmap(v74, *(_QWORD *)(v38 + 552));
      *(_QWORD *)(v38 + 528) = v50;
      *(_QWORD *)(v38 + 552) = v72;
      v46 = *(_QWORD *)(v38 + 544);
    }
    else
    {
      v50 = *(char **)(v38 + 528);
    }
    bzero(&v50[v46], v47 - v46);
    *(_QWORD *)(v38 + 544) = v48;
    v51 = (_QWORD *)(*(_QWORD *)(v38 + 528) + v47);
    *(_QWORD *)(v38 + 536) = v51 + 1;
    *v51 = a4;
    IPC::ArgumentCoder<__CVBuffer *,void>::encode(v38, cf);
    IPC::Connection::sendMessageImpl(v37, (uint64_t *)&v75, 0, 0);
    v53 = v75;
    v75 = 0;
    if (v53)
    {
      IPC::Encoder::~Encoder(v53, v52);
      WTF::fastFree(v54, v55);
    }
    CFRelease(cf);
    goto LABEL_26;
  }
  v11 = v77;
  v77 = 0;
  cfa = v11;
  WebKit::RemoteVideoFrameObjectHeap::add(v10, (uint64_t *)&cfa, (uint64_t)&v75);
  v12 = (unsigned int *)cfa;
  cfa = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  v16 = a1[5];
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 122;
  *(_QWORD *)(v17 + 8) = 0;
  v18 = (void *)(v17 + 16);
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  cfa = (CFTypeRef)v17;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v17, (uint64_t *)v5);
  v19 = *(_QWORD *)(v17 + 544);
  v20 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 + 8;
  v22 = *(_QWORD *)(v17 + 552);
  if (v22 < v20 + 8)
  {
    v59 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v60 = v59;
      v59 *= 2;
    }
    while (v60 < v21);
    v61 = (char *)mmap(0, v60, 3, 4098, -1, 0);
    if (v61 != (char *)-1)
    {
      v23 = v61;
      memcpy(v61, *(const void **)(v17 + 528), *(_QWORD *)(v17 + 544));
      v62 = *(void **)(v17 + 528);
      if (v62 != v18)
        munmap(v62, *(_QWORD *)(v17 + 552));
      *(_QWORD *)(v17 + 528) = v23;
      *(_QWORD *)(v17 + 552) = v60;
      v19 = *(_QWORD *)(v17 + 544);
      goto LABEL_14;
    }
    __break(0xC471u);
LABEL_60:
    JUMPOUT(0x196F6C2CCLL);
  }
  v23 = *(char **)(v17 + 528);
LABEL_14:
  bzero(&v23[v19], v20 - v19);
  *(_QWORD *)(v17 + 544) = v21;
  v24 = (_QWORD *)(*(_QWORD *)(v17 + 528) + v20);
  *(_QWORD *)(v17 + 536) = v24 + 1;
  *v24 = a3;
  v25 = *(_QWORD *)(v17 + 544);
  v26 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = v26 + 8;
  v28 = *(_QWORD *)(v17 + 552);
  if (v28 < v26 + 8)
  {
    v63 = (2 * v28 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v64 = v63;
      v63 *= 2;
    }
    while (v64 < v27);
    v65 = (char *)mmap(0, v64, 3, 4098, -1, 0);
    if (v65 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x196F6C2D4);
    }
    v29 = v65;
    memcpy(v65, *(const void **)(v17 + 528), *(_QWORD *)(v17 + 544));
    v66 = *(void **)(v17 + 528);
    if (v66 != v18)
      munmap(v66, *(_QWORD *)(v17 + 552));
    *(_QWORD *)(v17 + 528) = v29;
    *(_QWORD *)(v17 + 552) = v64;
    v25 = *(_QWORD *)(v17 + 544);
  }
  else
  {
    v29 = *(char **)(v17 + 528);
  }
  bzero(&v29[v25], v26 - v25);
  *(_QWORD *)(v17 + 544) = v27;
  v30 = (_QWORD *)(*(_QWORD *)(v17 + 528) + v26);
  *(_QWORD *)(v17 + 536) = v30 + 1;
  *v30 = a4;
  IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode((IPC::Encoder *)v17, (uint64_t *)&v75);
  IPC::Connection::sendMessageImpl(v16, (uint64_t *)&cfa, 0, 0);
  v32 = (IPC::Encoder *)cfa;
  cfa = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v33, v34);
  }
LABEL_26:
  result = v77;
  v77 = 0;
  if (result)
  {
    v56 = result + 2;
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_196F6C2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17, CFTypeRef cf)
{
  const void *v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  CFRelease(v18);
  if (a17)
  {
    v20 = a17 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, a17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a17 + 8))(a17);
    }
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::Connection::send<Messages::LibWebRTCCodecs::FailedDecoding>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 125;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void sub_196F6C42C(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF **)(a1 + 16);
    if ((WTF *)(a1 + 32) != v3 && v3 != 0)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::createDecoder(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,BOOL,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::FrameRateMonitor::LateFrameInfo>::call(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v3 = off_1E34B0390;
  *(_QWORD *)(v3 + 8) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v6;
  v7 = v3;
  WTF::callOnMainRunLoop();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_196F6C500(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

double _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20LibWebRTCCodecsProxy13createDecoderENS_23ObjectIdentifierGenericINS2_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS2_14VideoCodecTypeERKNS_6StringEbbONS_17CompletionHandlerIFvbEEEENK3__0clIN7WebCore16FrameRateMonitor13LateFrameInfoEEEDaT_EUlvE_vJEE4callEv(uint64_t a1)
{
  NSObject *v2;
  double result;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  double v12;
  __int16 v13;
  double v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(double *)(a1 + 16);
    v4 = *(double *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 134219264;
    v10 = v6;
    v11 = 2048;
    v12 = v5;
    v13 = 2048;
    v14 = v4;
    v15 = 2048;
    v16 = v7;
    v17 = 2048;
    v18 = (v5 - v4) * 1000.0;
    v19 = 2048;
    v20 = v8;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "LibWebRTCCodecsProxy decoder %llu received a compressed frame at %f, previous frame was at %f, observed frame rate is %f, delay since last frame is %f ms, frame count is %lu", (uint8_t *)&v9, 0x3Eu);
  }
  return result;
}

unsigned __int8 *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *result;

  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  result = *(unsigned __int8 **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  return result;
}

unsigned __int8 *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(unsigned __int8 *result, char a2)
{
  WTF::Lock *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = (WTF::Lock *)*((_QWORD *)result + 4);
  if (v3)
  {
    v4 = result;
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v7, v3, *((_QWORD *)result + 5));
    v5 = v7;
    if (v7)
    {
      WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(v7, *((_QWORD *)v4 + 7), a2);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v6);
    }
  }
  return result;
}

void sub_196F6C6D0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), a2);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::BlockPtr<void ()(unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned __int8 *result;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  result = *(unsigned __int8 **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v2);
  return result;
}

unsigned __int8 *WTF::BlockPtr<void ()(unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)#1}::__invoke(_QWORD *a1, const void *a2, size_t a3, int *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  unsigned __int8 *result;
  WTF *v13;
  void *v14;
  WTF::Lock *v15;
  IPC::Encoder *v16;
  void *v17;
  IPC::Encoder *v18;

  v8 = a1[7];
  v9 = a1 + 8;
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 124;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, v9);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v10, a2, a3);
  IPC::ArgumentCoder<webrtc::WebKitEncodedFrameInfo,void>::encode((IPC::Encoder *)v10, a4);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v18, 0, 0);
  result = (unsigned __int8 *)v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
    result = (unsigned __int8 *)WTF::fastFree(v13, v14);
  }
  v15 = (WTF::Lock *)a1[4];
  if (v15)
  {
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v18, v15, a1[5]);
    v16 = v18;
    if (v18)
    {
      WebKit::LibWebRTCCodecsProxy::notifyEncoderResult((uint64_t)v18, *v9, 1);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*((unsigned __int8 **)v16 + 2), v17);
    }
  }
  return result;
}

void sub_196F6C848(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), a2);
  _Unwind_Resume(a1);
}

unsigned __int8 ***WTF::BlockPtr<void ()(unsigned char const*,unsigned long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 32));
}

char *WTF::BlockPtr<void ()(unsigned char const*,unsigned long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2)::{lambda(void *,unsigned char const*,unsigned long)#1}::__invoke(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = (uint64_t *)(a1 + 40);
  v21 = 0x101010101020100;
  v22 = 1;
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 127;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v23 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, v6);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, a2, a3);
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = 1;
  IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode((IPC::Encoder *)v7, (char *)&v21);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
  result = (char *)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

void sub_196F6CA28(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

char **std::string::basic_string[abi:sn180100]<0>(char **a1, char *__s)
{
  size_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (!__s)
    goto LABEL_15;
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_16;
  v5 = v4;
  if (v4 > 0x16)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (char *)operator new(v7 + 1);
    a1[1] = (char *)v5;
    a1[2] = (char *)(v8 | 0x8000000000000000);
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = (char *)a1;
  }
  v9 = &v6[v5];
  if (v6 <= __s && v9 > __s)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    abort();
  }
  if (v5)
    memmove(v6, __s, v5);
  *v9 = 0;
  return a1;
}

WebKit::SharedVideoFrameReader *std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100](WebKit::SharedVideoFrameReader **a1, WebKit::SharedVideoFrameReader *a2)
{
  WebKit::SharedVideoFrameReader *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SharedVideoFrameReader::~SharedVideoFrameReader(result);
    return (WebKit::SharedVideoFrameReader *)WTF::fastFree(v4, v5);
  }
  return result;
}

IPC::Semaphore *std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>(IPC::Semaphore *a1, IPC::Semaphore *a2)
{
  IPC::Semaphore *result;
  int v4;

  if (*((_BYTE *)a1 + 8))
    return IPC::Semaphore::operator=(a1, a2);
  result = (IPC::Semaphore *)WTF::MachSendRight::MachSendRight();
  v4 = *((_DWORD *)a2 + 1);
  *((_DWORD *)a2 + 1) = 0;
  *((_DWORD *)result + 1) = v4;
  *((_BYTE *)result + 8) = 1;
  return result;
}

void sub_196F6CC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:sn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:sn180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (a1)
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  else
  {
    __break(1u);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(WTF::Ref<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34B0418;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(WTF::Ref<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B0418;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(WTF::Ref<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>> &&)::$_0,void>::call(uint64_t a1, WTF *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = *(_QWORD **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(v4);
  v7 = result;
  v8 = v6;
  v9 = 0;
  if (v4)
    v9 = &v4[7 * *((unsigned int *)v4 - 1)];
  if (v9 != (_QWORD *)result)
  {
    do
    {
      for (result = webrtc::releaseLocalEncoder(*(webrtc **)(v7 + 8), v6);
            ;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12))
      {
        v10 = *(_QWORD *)(v7 + 24);
        if (v10 == *(_QWORD *)(v7 + 32))
          break;
        v11 = *(_QWORD *)(v7 + 40);
        v12 = *(_QWORD *)(v11 + 8 * v10);
        *(_QWORD *)(v11 + 8 * v10) = 0;
        v13 = *(_QWORD *)(v7 + 40);
        v14 = *(_QWORD *)(v13 + 8 * v10);
        *(_QWORD *)(v13 + 8 * v10) = 0;
        if (v14)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          v10 = *(_QWORD *)(v7 + 24);
        }
        if (v10 == *(unsigned int *)(v7 + 48) - 1)
          v15 = 0;
        else
          v15 = v10 + 1;
        *(_QWORD *)(v7 + 24) = v15;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
      }
      while (1)
      {
        v7 += 56;
        if ((void *)v7 == v8)
          break;
        if ((unint64_t)(*(_QWORD *)v7 + 1) > 1)
          goto LABEL_18;
      }
      v7 = (uint64_t)v8;
LABEL_18:
      ;
    }
    while ((_QWORD *)v7 != v9);
  }
  if (v4)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)v4, v6);
  return result;
}

void sub_196F6CEE0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (v2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v2, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[7 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[7 * v2];
  if ((_DWORD)v2)
  {
    v4 = 56 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 7;
      v4 -= 56;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  WTF *v30;
  _QWORD *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  WTF **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = (uint64_t *)(v20 + 24 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (*v28);
          v29 = v20 + 24 * v27;
          v32 = *(WTF **)(v29 + 16);
          v31 = (_QWORD *)(v29 + 16);
          v30 = v32;
          *v31 = 0;
          if (v32)
            std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)v31, v30);
          v33 = *(v31 - 1);
          *(v31 - 1) = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          *v28 = *v14;
          v34 = v4 + 24 * v11;
          v36 = *(_QWORD *)(v34 + 8);
          v35 = (uint64_t *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          *(v31 - 1) = v36;
          v38 = *(_QWORD *)(v34 + 16);
          v37 = (WTF **)(v34 + 16);
          *v37 = 0;
          *v31 = v38;
          v8 = *v37;
          *v37 = 0;
          if (v8)
            std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)v37, v8);
          v39 = *v35;
          *v35 = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          if (v14 == a3)
            v12 = v28;
        }
        else
        {
          v16 = v4 + 24 * v11;
          v18 = *(WTF **)(v16 + 16);
          v17 = (_QWORD *)(v16 + 16);
          v8 = v18;
          *v17 = 0;
          if (v18)
            std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)v17, v8);
          v19 = *(v17 - 1);
          *(v17 - 1) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  result = (uint64_t *)(v2 + 24 * v7);
  v9 = *result;
  if (*result != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v3;
      result = (uint64_t *)(v2 + 24 * v7);
      v9 = *result;
      ++v10;
      if (*result == *a2)
        return result;
    }
    return (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>>::customDeleteBucket(_QWORD *a1)
{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;
  uint64_t result;

  *a1 = -1;
  v4 = (WTF *)a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100]((int)v2, v3);
  result = a1[1];
  a1[1] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::flushDecoder(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v3 = *(_QWORD *)(a1 + 8);
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(uint64_t **)(a1 + 16);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 126;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, v5);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_196F6D440(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::setDecoderFormatDescription(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,unsigned short,unsigned short)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::call(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), **(unsigned __int16 **)(a1 + 16), **(unsigned __int16 **)(a1 + 24));
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::decodeFrame(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WebCore::FrameRateMonitor *v5;
  IPC::Encoder *result;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = (WebCore::FrameRateMonitor *)a2[1];
  if (v5)
    WebCore::FrameRateMonitor::update(v5);
  result = (IPC::Encoder *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(v4 + 24);
    v8 = *(uint64_t **)(a1 + 32);
    return IPC::Connection::send<Messages::LibWebRTCCodecs::FailedDecoding>(v7, &v8);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::setFrameSize(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned short,unsigned short)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::call(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, **(unsigned __int16 **)(a1 + 8), **(unsigned __int16 **)(a1 + 16));
}

_QWORD *std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *result, void **__s2)
{
  size_t v3;
  size_t v5;

  if (*((char *)result + 23) < 0)
  {
    v3 = result[1];
    if ((v3 & 0x8000000000000000) != 0)
      goto LABEL_15;
    result = (_QWORD *)*result;
    if (v3 && result == 0)
      goto LABEL_15;
  }
  else
  {
    v3 = *((unsigned __int8 *)result + 23);
  }
  if ((*((char *)__s2 + 23) & 0x80000000) == 0)
  {
    v5 = *((unsigned __int8 *)__s2 + 23);
    return (_QWORD *)std::operator<=>[abi:sn180100]<char,std::char_traits<char>>(result, v3, __s2, v5);
  }
  v5 = (size_t)__s2[1];
  if ((v5 & 0x8000000000000000) == 0)
  {
    __s2 = (void **)*__s2;
    if (!v5 || __s2)
      return (_QWORD *)std::operator<=>[abi:sn180100]<char,std::char_traits<char>>(result, v3, __s2, v5);
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t std::operator<=>[abi:sn180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:sn180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v4, a2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  WTF *v17;
  WTF *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  WTF **v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  WTF **v45;
  WTF *v46;
  WTF **v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  WebKit::SharedVideoFrameReader **v61;
  _QWORD *v62;
  WTF *v63;
  WTF *v64;
  _DWORD *v65;
  WTF *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 56 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v82 = v4;
    v78 = v5;
    while (1)
    {
      v14 = *(_QWORD *)(v4 + 56 * v11);
      if (v14 != -1)
        break;
LABEL_80:
      if (++v11 == v13)
        goto LABEL_83;
    }
    if (v14)
    {
      v27 = *a1;
      if (*a1)
        v28 = *(_DWORD *)(v27 - 8);
      else
        v28 = 0;
      v81 = v12;
      v32 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
      v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
      v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
      v35 = v28 & ((v34 >> 31) ^ v34);
      v36 = 1;
      do
      {
        v37 = v35;
        v38 = (_QWORD *)(v27 + 56 * v35);
        v35 = (v35 + v36++) & v28;
      }
      while (*v38);
      v39 = v37;
      v40 = v27 + 56 * v37;
      v43 = *(WTF **)(v40 + 40);
      v41 = (WTF **)(v40 + 40);
      v42 = v43;
      v45 = v41 - 2;
      v44 = *(v41 - 2);
      v47 = v41 - 1;
      v46 = *(v41 - 1);
      v83 = (_QWORD *)(v4 + 56 * v11);
      if (v44 > v46)
      {
        if (v46)
        {
          v48 = 8 * (_QWORD)v46;
          do
          {
            v49 = *(_QWORD *)v42;
            *(_QWORD *)v42 = 0;
            if (v49)
              (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
            v42 = (WTF *)((char *)v42 + 8);
            v48 -= 8;
          }
          while (v48);
          v42 = *v41;
          v44 = *v45;
        }
        v50 = (WTF *)*(unsigned int *)(v27 + 56 * v39 + 48);
        if (v44 != v50)
        {
          v51 = (uint64_t *)((char *)v42 + 8 * (_QWORD)v44);
          v52 = 8 * (_QWORD)v50 - 8 * (_QWORD)v44;
          do
          {
            v53 = *v51;
            *v51 = 0;
            if (v53)
              (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
            ++v51;
            v52 -= 8;
          }
          while (v52);
        }
        goto LABEL_54;
      }
      if (v44 != v46)
      {
        v54 = (uint64_t *)((char *)v42 + 8 * (_QWORD)v44);
        v55 = 8 * (_QWORD)v46 - 8 * (_QWORD)v44;
        do
        {
          v56 = *v54;
          *v54 = 0;
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          ++v54;
          v55 -= 8;
        }
        while (v55);
LABEL_54:
        v42 = *v41;
      }
      if (v42)
      {
        *v41 = 0;
        *(_DWORD *)(v27 + 56 * v39 + 48) = 0;
        WTF::fastFree(v42, v8);
      }
      v57 = v27 + 56 * v39;
      std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100]((WebKit::SharedVideoFrameReader **)(v57 + 16), 0);
      *v38 = *v83;
      v59 = (_QWORD *)(v82 + 56 * v11);
      *(_QWORD *)(v57 + 8) = v59[1];
      v61 = (WebKit::SharedVideoFrameReader **)(v59 + 2);
      v60 = v59[2];
      v59[2] = 0;
      *(_QWORD *)(v57 + 16) = v60;
      *(_OWORD *)v45 = 0u;
      *(_OWORD *)v41 = 0u;
      v63 = (WTF *)v59[5];
      v62 = v59 + 5;
      *v45 = (WTF *)*(v62 - 2);
      *(v62 - 2) = 0;
      v64 = *v47;
      *v47 = (WTF *)*(v62 - 1);
      *(v62 - 1) = v64;
      *v41 = v63;
      *v62 = 0;
      v65 = v62 + 1;
      *(_DWORD *)(v57 + 48) = *((_DWORD *)v62 + 2);
      *((_DWORD *)v62 + 2) = 0;
      v66 = (WTF *)*(v62 - 2);
      if (v66 > v64)
      {
        if (v64)
        {
          v67 = 0;
          v68 = 8 * (_QWORD)v64;
          v4 = v82;
          do
          {
            v69 = *v67;
            *v67 = 0;
            if (v69)
              (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
            ++v67;
            v68 -= 8;
          }
          while (v68);
          v70 = *v62;
          v66 = (WTF *)*(v62 - 2);
          v64 = (WTF *)*v65;
        }
        else
        {
          v70 = 0;
          v4 = v82;
        }
        v12 = v81;
        if (v66 != v64)
        {
          v74 = (uint64_t *)(v70 + 8 * (_QWORD)v66);
          v75 = 8 * (_QWORD)v64 - 8 * (_QWORD)v66;
          do
          {
            v76 = *v74;
            *v74 = 0;
            if (v76)
              (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
            ++v74;
            v75 -= 8;
          }
          while (v75);
        }
        goto LABEL_76;
      }
      v12 = v81;
      v4 = v82;
      if (v66 != v64)
      {
        v71 = (uint64_t *)(8 * (_QWORD)v66);
        v72 = 8 * (_QWORD)v64 - 8 * (_QWORD)v66;
        do
        {
          v73 = *v71;
          *v71 = 0;
          if (v73)
            (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
          ++v71;
          v72 -= 8;
        }
        while (v72);
LABEL_76:
        v77 = (WTF *)*v62;
        if (*v62)
        {
          *v62 = 0;
          *v65 = 0;
          WTF::fastFree(v77, v58);
        }
      }
      std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100](v61, 0);
      v13 = v78;
      if (v83 == a3)
        v12 = v38;
      goto LABEL_80;
    }
    v15 = v4 + 56 * v11;
    v18 = *(WTF **)(v15 + 40);
    v16 = (WTF **)(v15 + 40);
    v17 = v18;
    v19 = (unint64_t)*(v16 - 2);
    v20 = (unint64_t)*(v16 - 1);
    if (v19 <= v20)
    {
      if (v19 == v20)
      {
LABEL_30:
        if (v17)
        {
          *v16 = 0;
          *(_DWORD *)(v4 + 56 * v11 + 48) = 0;
          WTF::fastFree(v17, v8);
        }
        std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100]((WebKit::SharedVideoFrameReader **)(v4 + 56 * v11 + 16), 0);
        goto LABEL_80;
      }
      v29 = (uint64_t *)((char *)v17 + 8 * v19);
      v30 = 8 * v20 - 8 * v19;
      do
      {
        v31 = *v29;
        *v29 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
    else
    {
      if (v20)
      {
        v21 = 8 * v20;
        do
        {
          v22 = *(_QWORD *)v17;
          *(_QWORD *)v17 = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v17 = (WTF *)((char *)v17 + 8);
          v21 -= 8;
        }
        while (v21);
        v17 = *v16;
        v19 = (unint64_t)*(v16 - 2);
      }
      v23 = *(unsigned int *)(v4 + 56 * v11 + 48);
      if (v19 != v23)
      {
        v24 = (uint64_t *)((char *)v17 + 8 * v19);
        v25 = 8 * v23 - 8 * v19;
        do
        {
          v26 = *v24;
          *v24 = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
    }
    v17 = *v16;
    goto LABEL_30;
  }
  if (v4)
LABEL_83:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::releaseEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = &off_1E34B04E0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(WTF **)(a1 + 24);
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_20;
    v12 = (uint64_t *)((char *)v5 + 8 * v3);
    v13 = 8 * v4 - 8 * v3;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    if (v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      v5 = *(WTF **)(a1 + 24);
      v3 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(unsigned int *)(a1 + 32);
    if (v3 != v8)
    {
      v9 = (uint64_t *)((char *)v5 + 8 * v3);
      v10 = 8 * v8 - 8 * v3;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  v5 = *(WTF **)(a1 + 24);
LABEL_20:
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::releaseEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E34B04E0;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_20;
    v12 = (uint64_t *)((char *)v5 + 8 * v3);
    v13 = 8 * v4 - 8 * v3;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    if (v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      v5 = (WTF *)*((_QWORD *)this + 3);
      v3 = *((_QWORD *)this + 1);
    }
    v8 = *((unsigned int *)this + 8);
    if (v3 != v8)
    {
      v9 = (uint64_t *)((char *)v5 + 8 * v3);
      v10 = 8 * v8 - 8 * v3;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 3);
LABEL_20:
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::releaseEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 8);
  if (v1 != *(_QWORD *)(result + 16))
  {
    v2 = result;
    do
    {
      v3 = *(_QWORD *)(v2 + 24);
      v4 = *(_QWORD *)(v3 + 8 * v1);
      *(_QWORD *)(v3 + 8 * v1) = 0;
      v5 = *(_QWORD *)(v2 + 24);
      v6 = *(_QWORD *)(v5 + 8 * v1);
      *(_QWORD *)(v5 + 8 * v1) = 0;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v1 = *(_QWORD *)(v2 + 8);
      }
      if (v1 == *(unsigned int *)(v2 + 32) - 1)
        v7 = 0;
      else
        v7 = v1 + 1;
      *(_QWORD *)(v2 + 8) = v7;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v1 = *(_QWORD *)(v2 + 8);
    }
    while (v1 != *(_QWORD *)(v2 + 16));
  }
  return result;
}

void sub_196F6DF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  result = (uint64_t *)(v2 + 56 * v7);
  v9 = *result;
  if (*result != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v3;
      result = (uint64_t *)(v2 + 56 * v7);
      v9 = *result;
      ++v10;
      if (*result == *a2)
        return result;
    }
    return (uint64_t *)(v2 + 56 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  *a1 = &off_1E34B0508;
  v3 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  *(_QWORD *)this = &off_1E34B0508;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL)::$_0,void>::call(uint64_t result)
{
  WTF::Lock *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(WTF::Lock **)(result + 16);
  if (v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 8);
    result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v16, v1, *(_QWORD *)(result + 24));
    v4 = v16;
    if (v16)
    {
      v17 = *(_QWORD *)(v2 + 32);
      v5 = (uint64_t **)(v3 + 64);
      v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v3 + 64), &v17);
      v8 = v6;
      v9 = *v5;
      if (*v5)
        v9 += 7 * *((unsigned int *)v9 - 1);
      if (v9 != v6)
      {
        v10 = v6[3];
        if (v10 == v6[4])
        {
          result = 80;
          __break(0xC471u);
          return result;
        }
        v11 = v6[5];
        v12 = *(_QWORD *)(v11 + 8 * v10);
        *(_QWORD *)(v11 + 8 * v10) = 0;
        v13 = v6[5];
        v14 = *(_QWORD *)(v13 + 8 * v10);
        *(_QWORD *)(v13 + 8 * v10) = 0;
        if (v14)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          v10 = v8[3];
        }
        if (v10 == *((unsigned int *)v8 + 12) - 1)
          v15 = 0;
        else
          v15 = v10 + 1;
        v8[3] = v15;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, *(unsigned __int8 *)(v2 + 40));
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), v7);
    }
  }
  return result;
}

void sub_196F6E1F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), v4);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(void)>,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B0530;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void WebKit::LibWebRTCNetwork::didReceiveMessage(WebKit::LibWebRTCNetwork *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  void *v4;
  WTF *v5;
  unint64_t v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  int v13;
  char v14;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x80:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress>>((uint64_t *)a3, &v10);
      if (v14)
      {
        WebKit::LibWebRTCNetwork::signalAddressReady((uint64_t)this, v10, (WebKit::RTC::Network::SocketAddress *)&v11);
        if (v14)
        {
          v5 = v12;
          if (v12)
          {
            v12 = 0;
            v13 = 0;
            WTF::fastFree(v5, v4);
          }
        }
      }
      break;
    case 0x81:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>>((uint64_t *)a3, &v10);
      if ((_BYTE)v12)
        WebKit::LibWebRTCNetwork::signalClose((uint64_t)this, (uint64_t)v10, (int)v11);
      break;
    case 0x82:
      v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v7)
        WebKit::LibWebRTCNetwork::signalConnect((uint64_t)this, v6);
      break;
    case 0x83:
      IPC::handleMessage<Messages::LibWebRTCNetwork::SignalReadPacket,WebKit::LibWebRTCNetwork,WebKit::LibWebRTCNetwork,void ()(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress const&,unsigned short,long long)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))WebKit::LibWebRTCNetwork::signalReadPacket, 0);
      break;
    case 0x84:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long>>((uint64_t *)a3, &v10);
      if ((_BYTE)v13)
        WebKit::LibWebRTCNetwork::signalSentPacket((uint64_t)this, (uint64_t)v10);
      break;
    case 0x85:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>((uint64_t *)a3, &v10);
      if ((_BYTE)v12)
      {
        WebKit::LibWebRTCNetwork::signalUsedInterface((uint64_t)this, (uint64_t)v10);
        if ((_BYTE)v12)
        {
          v9 = v11;
          v11 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v8);
            else
              *(_DWORD *)v9 -= 2;
          }
        }
      }
      break;
    default:
      return;
  }
}

uint64_t *IPC::handleMessage<Messages::LibWebRTCNetwork::SignalReadPacket,WebKit::LibWebRTCNetwork,WebKit::LibWebRTCNetwork,void ()(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress const&,unsigned short,long long)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD), uint64_t a5)
{
  uint64_t *result;
  _BYTE v9[64];

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>>(a2, v9);
  if (v9[56])
    return (uint64_t *)IPC::callMemberFunction<WebKit::LibWebRTCNetwork,WebKit::LibWebRTCNetwork,void ()(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress const&,unsigned short,long long),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>>(a3, a4, a5, (uint64_t)v9);
  return result;
}

void `non-virtual thunk to'WebKit::LibWebRTCNetwork::didReceiveMessage(WebKit::LibWebRTCNetwork *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::LibWebRTCNetwork::didReceiveMessage((WebKit::LibWebRTCNetwork *)((char *)this - 8), a2, a3);
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[56])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::LibWebRTCNetwork,WebKit::LibWebRTCNetwork,void ()(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress const&,unsigned short,long long),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD);
  _QWORD *v5;

  v4 = a2;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*v5 + a2);
  return v4(v5, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), a4 + 24, *(unsigned __int16 *)(a4 + 44), *(_QWORD *)(a4 + 48));
}

uint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, a2);
  *a2 = 0;
  a2[56] = 0;
  return result;
}

uint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *result;
  _BYTE v7[24];

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v7);
  if (v7[16])
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>(a1, a2, (uint64_t)v7, a3);
  *a3 = 0;
  a3[56] = 0;
  return result;
}

uint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t *result;
  _BYTE v9[24];

  result = IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>(a1, (uint64_t)v9);
  if (v9[20])
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress>(a1, a2, a3, (uint64_t)v9, (uint64_t)a4);
  *a4 = 0;
  a4[56] = 0;
  return result;
}

uint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress,unsigned short,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WebKit::RTC::Network::IPAddress>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int16 *v10;
  __int16 v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v6 = result[1];
  v7 = *result;
  v8 = ((result[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *result;
  if (v6 < v8 || v6 - v8 <= 1)
  {
LABEL_13:
    v17 = 0;
    v18 = 0;
    *result = 0;
    result[1] = 0;
    v19 = result[3];
    if (v19)
    {
      v20 = result;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(result[3], v7, v6);
        result = v20;
        v18 = *v20;
        v17 = v20[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_14;
  }
  v10 = (__int16 *)(v7 + v8);
  result[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    v17 = v6;
    v18 = 0;
LABEL_14:
    *result = 0;
    result[1] = 0;
    result = (uint64_t *)result[3];
    if (result && v17)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v18);
    goto LABEL_15;
  }
  v14 = *v10;
  result = (uint64_t *)IPC::Decoder::decode<long long>(result);
  if (!v15)
  {
LABEL_15:
    v16 = 0;
    *(_BYTE *)a5 = 0;
    goto LABEL_16;
  }
  v7 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a2 + 8)
    || (v7 = *(unsigned __int8 *)(a3 + 16), !*(_BYTE *)(a3 + 16))
    || (v7 = *(unsigned __int8 *)(a4 + 20), !*(_BYTE *)(a4 + 20)))
  {
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)a5 = *(_QWORD *)a2;
  *(_OWORD *)(a5 + 8) = *(_OWORD *)a3;
  *(_OWORD *)(a5 + 24) = *(_OWORD *)a4;
  *(_DWORD *)(a5 + 40) = *(_DWORD *)(a4 + 16);
  *(_WORD *)(a5 + 44) = v14;
  *(_QWORD *)(a5 + 48) = result;
  v16 = 1;
LABEL_16:
  *(_BYTE *)(a5 + 56) = v16;
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, a2);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8[2];

  result = IPC::Decoder::decode<long long>(a1);
  v8[0] = result;
  v8[1] = v7;
  if ((_BYTE)v7)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long>(a1, a2, v8, (uint64_t)a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long,long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<long long>(a1);
  if (!v8)
  {
    v10 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a2 + 8) && *((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    *(_QWORD *)a4 = *(_QWORD *)a2;
    *(_QWORD *)(a4 + 8) = v9;
    *(_QWORD *)(a4 + 16) = result;
    v10 = 1;
LABEL_6:
    *(_BYTE *)(a4 + 24) = v10;
    return result;
  }
  __break(1u);
  return result;
}

WTF *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[56])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, (uint64_t)a2);
  *a2 = 0;
  a2[56] = 0;
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTC::Network::SocketAddress>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  __int128 v10;
  uint64_t v11;
  char v12;

  result = IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>(a1, (uint64_t)v9);
  v6 = v12;
  if (!v12)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v7 = v9[0];
    v8 = v9[1];
    *(_QWORD *)a3 = *(_QWORD *)a2;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 24) = v9[2];
    *(_OWORD *)(a3 + 32) = v10;
    v6 = 1;
    *(_QWORD *)(a3 + 48) = v11;
LABEL_5:
    *(_BYTE *)(a3 + 56) = v6;
    return result;
  }
  __break(1u);
  return result;
}

WTF *IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    a3 = 0;
    a2 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v12 = result;
      v14 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v4);
        result = v12;
        a4 = v14;
        a2 = *v12;
        a3 = v12[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_12:
      v10 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      v13 = a4;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, a2);
      a4 = v13;
    }
    goto LABEL_12;
  }
  v8 = (int *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_14;
  }
  v9 = *v8;
  *(_QWORD *)a4 = *(_QWORD *)a2;
  *(_DWORD *)(a4 + 8) = v9;
  v10 = 1;
LABEL_9:
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, (uint64_t)a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::String>(a1, &v8);
  v6 = v9;
  if (!v9)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v7 = v8;
    *(_QWORD *)a3 = *(_QWORD *)a2;
    *(_QWORD *)(a3 + 8) = v7;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t ___ZN6WebKit26LocalAuthenticationLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication", 2);
  WebKit::LocalAuthenticationLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 30;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initLAContext(WebKit *this)
{
  if (qword_1ECE720A0 != -1)
    dispatch_once(&qword_1ECE720A0, &__block_literal_global_7);
  return qword_1ECE720A8;
}

uint64_t ___ZN6WebKitL13initLAContextEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit26LocalAuthenticationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_49 != -1)
    dispatch_once(&_MergedGlobals_49, block);
  result = (uint64_t)objc_getClass("LAContext");
  qword_1ECE720A8 = result;
  if (result)
  {
    WebKit::getLAContextClass = WebKit::LAContextFunction;
  }
  else
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::LAContextFunction(WebKit *this)
{
  return qword_1ECE720A8;
}

void WebKit::MediaPlayerPrivateRemote::didReceiveMessage(WebKit::MediaPlayerPrivateRemote *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  void *v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v15;
  int v16;
  double v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  __int128 v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unsigned __int16 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unsigned __int16 v53;
  unint64_t v54;
  double *v56;
  double v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  void *v67;
  unint64_t v68;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  unint64_t *v76;
  unint64_t v77;
  WTF::StringImpl *v78;
  __int128 v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  __int128 v88;
  uint64_t v89;
  unsigned __int16 v90;
  unint64_t v91;
  char v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  void *v98;
  __int128 v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  __int128 v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  unint64_t *v115;
  unint64_t v116;
  __int128 v117;
  uint64_t v118;
  unsigned __int16 ready;
  int v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  _BYTE *v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  __int128 v130;
  WTF::StringImpl *v131;
  WTF *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(void);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const void *v171;
  _BYTE v172[96];
  WTF::StringImpl *v173[2];
  _BYTE v174[40];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _BYTE cf[26];
  _OWORD v179[2];
  char v180;
  __int128 v181;
  char v182;
  WTF::StringImpl *v183;
  unsigned __int8 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  char v189;
  _BYTE v190[96];
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  char v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD v199[2];
  char v200;
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x86:
      WebKit::MediaPlayerPrivateRemote::activeSourceBuffersChanged(this);
      return;
    case 0x87:
      v21 = *((_QWORD *)a3 + 1);
      v22 = *(_QWORD *)a3;
      v68 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v21 < v68 || v21 - v68 <= 7)
        goto LABEL_260;
      v70 = (unint64_t *)(v22 + v68);
      *((_QWORD *)a3 + 2) = v70 + 1;
      if (!v22)
        goto LABEL_326;
      v71 = *v70;
      IPC::Decoder::decode<WTF::MediaTime>((uint64_t *)a3, (uint64_t)&v181);
      if (!v182)
        goto LABEL_231;
      IPC::Decoder::decode<WTF::MediaTime>(v3, (uint64_t)&v185);
      if (!(_BYTE)v186)
        goto LABEL_231;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v3, (uint64_t)v190);
      if (!v190[16])
        goto LABEL_231;
      if (!v182 || !(_BYTE)v186)
        goto LABEL_264;
      *(_QWORD *)v172 = v71;
      *(_OWORD *)&v172[8] = v181;
      *(_OWORD *)&v172[24] = v185;
      *(_OWORD *)&v172[40] = *(_OWORD *)v190;
      v172[56] = 1;
      WebKit::MediaPlayerPrivateRemote::addDataCue((uint64_t)this, v71, (uint64_t)&v172[8], (uint64_t)&v172[24], *(uint64_t *)v190, *(uint64_t *)&v190[8]);
      return;
    case 0x88:
      v58 = *((_QWORD *)a3 + 1);
      v59 = *(_QWORD *)a3;
      v60 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v58 < v60 || v58 - v60 <= 7)
      {
        v150 = 0;
        v151 = 0;
        *v3 = 0;
        v3[1] = 0;
        v152 = v3[3];
        if (v152)
        {
          if (v58)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v152 + 16))(v152, v59, v58);
            v151 = *v3;
            v150 = v3[1];
          }
          else
          {
            v150 = 0;
            v151 = 0;
          }
        }
        goto LABEL_282;
      }
      v62 = (uint64_t *)(v59 + v60);
      *((_QWORD *)a3 + 2) = v62 + 1;
      if (!v59)
      {
        v150 = v58;
        v151 = 0;
LABEL_282:
        *v3 = 0;
        v3[1] = 0;
        v153 = v3[3];
        if (v153 && v150)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v151);
        goto LABEL_283;
      }
      v63 = *v62;
      IPC::Decoder::decode<WTF::MediaTime>((uint64_t *)a3, (uint64_t)&v181);
      if (!v182
        || (IPC::Decoder::decode<WTF::MediaTime>(v3, (uint64_t)&v185), !(_BYTE)v186)
        || (IPC::Decoder::decode<WebCore::SerializedPlatformDataCueValue>(v190, v3), !v190[56]))
      {
LABEL_283:
        v172[0] = 0;
        LOBYTE(v173[1]) = 0;
        goto LABEL_284;
      }
      IPC::Decoder::decode<WTF::String>(v3, &v183);
      v65 = v184;
      if (v184)
      {
        if (!v182 || !(_BYTE)v186 || !v190[56])
          goto LABEL_264;
        *(_QWORD *)v172 = v63;
        *(_OWORD *)&v172[8] = v181;
        *(_OWORD *)&v172[24] = v185;
        v172[40] = 0;
        v172[88] = 0;
        if (v190[48])
        {
          std::construct_at[abi:sn180100]<WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data*>((uint64_t)&v172[40], (uint64_t *)v190);
          v65 = 1;
          v172[88] = 1;
          v173[0] = v183;
        }
        else
        {
          v173[0] = v183;
          v65 = 1;
        }
      }
      else
      {
        v172[0] = 0;
      }
      LOBYTE(v173[1]) = v65;
      if (v190[56])
      {
        std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v190, v64);
        v65 = LOBYTE(v173[1]);
      }
      if (v65)
        goto LABEL_255;
LABEL_284:
      v154 = *v3;
      v155 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      v156 = v3[3];
      if (!v156)
        return;
      if (!v155)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 16))(v156, v154);
      if (!LOBYTE(v173[1]))
        return;
LABEL_255:
      WebKit::MediaPlayerPrivateRemote::addDataCueWithType((uint64_t)this, *(unint64_t *)v172, (uint64_t)&v172[8], (uint64_t)&v172[24], (uint64_t)&v172[40], (uint64_t)v173);
      if (LOBYTE(v173[1]))
      {
        v134 = v173[0];
        v173[0] = 0;
        if (v134)
        {
          if (*(_DWORD *)v134 == 2)
            WTF::StringImpl::destroy(v134, v38);
          else
            *(_DWORD *)v134 -= 2;
        }
        goto LABEL_152;
      }
      return;
    case 0x89:
      IPC::Decoder::decode<std::tuple<unsigned long long,WebCore::GenericCueData>>((uint64_t)v172, (uint64_t *)a3);
      if (v174[32])
      {
        WebKit::MediaPlayerPrivateRemote::addGenericCue((uint64_t)this, *(unint64_t *)v172, (__int128 *)&v172[8]);
        goto LABEL_157;
      }
      return;
    case 0x8A:
      IPC::Decoder::decode<WebKit::AudioTrackPrivateRemoteConfiguration>((uint64_t)v172, (uint64_t *)a3);
      if (!v172[72])
      {
        v123 = v172;
        goto LABEL_226;
      }
      *(_QWORD *)v190 = *(_QWORD *)v172;
      v45 = *(_OWORD *)&v172[8];
      *(_QWORD *)&v172[8] = 0;
      *(_QWORD *)&v172[16] = 0;
      *(_OWORD *)&v190[8] = v45;
      *(_OWORD *)&v190[24] = *(_OWORD *)&v172[24];
      *(_DWORD *)&v190[40] = *(_DWORD *)&v172[40];
      *(_WORD *)&v190[44] = *(_WORD *)&v172[44];
      v46 = *(_QWORD *)&v172[48];
      *(_QWORD *)&v172[48] = 0;
      *(_QWORD *)&v190[48] = v46;
      *(_OWORD *)&v190[56] = *(_OWORD *)&v172[56];
      v190[72] = 1;
      std::__optional_destruct_base<WebKit::AudioTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v172, v27);
      WebKit::MediaPlayerPrivateRemote::addRemoteAudioTrack((uint64_t)this, (unint64_t *)v190);
      if (v190[72])
        goto LABEL_139;
      return;
    case 0x8B:
      IPC::Decoder::decode<WebKit::TextTrackPrivateRemoteConfiguration>((uint64_t)v172, (uint64_t *)a3);
      if (!v172[64])
      {
        v124 = v172;
        goto LABEL_228;
      }
      v79 = *(_OWORD *)&v172[8];
      memset(&v172[8], 0, 24);
      *(_OWORD *)&v190[8] = v79;
      *(_QWORD *)v190 = *(_QWORD *)v172;
      *(_QWORD *)&v190[24] = *(_QWORD *)&v172[24];
      *(_OWORD *)&v190[32] = *(_OWORD *)&v172[32];
      *(_OWORD *)&v190[44] = *(_OWORD *)&v172[44];
      v190[64] = 1;
      std::__optional_destruct_base<WebKit::TextTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v172, v78);
      WebKit::MediaPlayerPrivateRemote::addRemoteTextTrack((uint64_t)this, (unint64_t *)v190);
      if (v190[64])
      {
        v80 = *(WTF::StringImpl **)&v190[24];
        *(_QWORD *)&v190[24] = 0;
        if (v80)
          goto LABEL_140;
        goto LABEL_209;
      }
      return;
    case 0x8C:
      IPC::Decoder::decode<WebKit::VideoTrackPrivateRemoteConfiguration>((uint64_t)v172, (uint64_t *)a3);
      if (!v172[88])
      {
        v125 = v172;
        goto LABEL_230;
      }
      *(_QWORD *)v190 = *(_QWORD *)v172;
      v88 = *(_OWORD *)&v172[8];
      *(_QWORD *)&v172[8] = 0;
      *(_QWORD *)&v172[16] = 0;
      *(_OWORD *)&v190[8] = v88;
      *(_OWORD *)&v190[24] = *(_OWORD *)&v172[24];
      *(_DWORD *)&v190[40] = *(_DWORD *)&v172[40];
      *(_WORD *)&v190[44] = *(_WORD *)&v172[44];
      v89 = *(_QWORD *)&v172[48];
      *(_QWORD *)&v172[48] = 0;
      *(_QWORD *)&v190[48] = v89;
      *(_OWORD *)&v190[72] = *(_OWORD *)&v172[72];
      *(_OWORD *)&v190[56] = *(_OWORD *)&v172[56];
      v190[88] = 1;
      std::__optional_destruct_base<WebKit::VideoTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v172, v87);
      WebKit::MediaPlayerPrivateRemote::addRemoteVideoTrack((uint64_t)this, (unint64_t *)v190);
      if (v190[88])
      {
LABEL_139:
        v80 = *(WTF::StringImpl **)&v190[48];
        *(_QWORD *)&v190[48] = 0;
        if (v80)
        {
LABEL_140:
          if (*(_DWORD *)v80 == 2)
            WTF::StringImpl::destroy(v80, v30);
          else
            *(_DWORD *)v80 -= 2;
        }
LABEL_209:
        v121 = *(WTF::StringImpl **)&v190[16];
        *(_QWORD *)&v190[16] = 0;
        if (v121)
        {
          if (*(_DWORD *)v121 == 2)
            WTF::StringImpl::destroy(v121, v30);
          else
            *(_DWORD *)v121 -= 2;
        }
        v66 = *(WTF::StringImpl **)&v190[8];
        *(_QWORD *)&v190[8] = 0;
        if (v66)
          goto LABEL_247;
      }
      return;
    case 0x8D:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>((uint64_t)v172, (uint64_t *)a3);
      if (LOBYTE(v179[0]))
        WebKit::MediaPlayerPrivateRemote::characteristicChanged((uint64_t)this, (uint64_t *)v172);
      goto LABEL_167;
    case 0x8E:
      v91 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v92)
      {
        *(_QWORD *)v172 = v91;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v172[8], a2);
        v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v93 = off_1E34B0600;
        v93[1] = *(_QWORD *)v172;
        v94 = *(_QWORD *)&v172[8];
        *(_QWORD *)&v172[8] = 0;
        v93[2] = v94;
        *(_QWORD *)v190 = v93;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v172[8]);
        WebKit::MediaPlayerPrivateRemote::commitAllTransactions((uint64_t)this, (uint64_t *)v190);
        v95 = *(_QWORD *)v190;
        *(_QWORD *)v190 = 0;
        if (v95)
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
      }
      return;
    case 0x8F:
      v53 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v53 >= 0x100u)
        WebKit::MediaPlayerPrivateRemote::currentPlaybackTargetIsWirelessChanged(this, v53 != 0);
      return;
    case 0x90:
      IPC::Decoder::decode<std::tuple<WebKit::MediaTimeUpdateData>>((uint64_t)v172, (uint64_t *)a3);
      if (v172[32])
        WebKit::MediaPlayerPrivateRemote::currentTimeChanged((unsigned __int8 *)this, (WTF::MediaTime *)v172);
      return;
    case 0x91:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>((uint64_t)v172, (uint64_t *)a3);
      if (LOBYTE(v179[0]))
        WebKit::MediaPlayerPrivateRemote::durationChanged((uint64_t)this, (uint64_t *)v172);
      goto LABEL_167;
    case 0x92:
      v51 = IPC::Decoder::decode<std::tuple<long long>>((uint64_t *)a3);
      if (v52)
        WebKit::MediaPlayerPrivateRemote::engineFailedToLoad(this, v51);
      return;
    case 0x93:
      WebKit::MediaPlayerPrivateRemote::firstVideoFrameAvailable(this);
      return;
    case 0x94:
      IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)a3, v172);
      if (!v172[40])
        return;
      v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v30)
        goto LABEL_54;
      *(_QWORD *)v190 = v39;
      v3 = (uint64_t *)&v190[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v190[8], a2);
      v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v40 = off_1E34B05D8;
      v40[1] = *(_QWORD *)v190;
      v41 = *(_QWORD *)&v190[8];
      *(_QWORD *)&v190[8] = 0;
      v40[2] = v41;
      *(_QWORD *)&v185 = v40;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v190[8]);
      if (!v172[40])
        goto LABEL_264;
      WebKit::MediaPlayerPrivateRemote::getRawCookies((uint64_t)this);
      goto LABEL_52;
    case 0x95:
      IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, v172);
      if (v172[24])
      {
        WebKit::MediaPlayerPrivateRemote::initializationDataEncountered((uint64_t)this);
        if (v172[24])
          goto LABEL_89;
      }
      return;
    case 0x96:
      v33 = IPC::Decoder::decode<std::optional<unsigned int>>((uint64_t *)a3);
      if (!v34)
        goto LABEL_231;
      v35 = v33;
      v36 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v3);
      if (!v37)
        goto LABEL_310;
      *(_QWORD *)v172 = v35;
      *(_QWORD *)&v172[8] = v36;
      v172[16] = 1;
      WebKit::MediaPlayerPrivateRemote::layerHostingContextIdChanged((uint64_t)this, (unsigned int *)v172, (const FloatSize *)&v172[8]);
      return;
    case 0x97:
      IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)v172);
      if (v172[16])
        WebKit::MediaPlayerPrivateRemote::mediaPlayerKeyNeeded((uint64_t)this, *(uint64_t *)v172, *(uint64_t *)&v172[8]);
      return;
    case 0x98:
      v90 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v90 >= 0x100u)
        WebKit::MediaPlayerPrivateRemote::muteChanged(this, v90 != 0);
      return;
    case 0x99:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>((uint64_t)v172, (uint64_t *)a3);
      if (LOBYTE(v179[0]))
        WebKit::MediaPlayerPrivateRemote::networkStateChanged((uint64_t)this, (uint64_t *)v172);
      goto LABEL_167;
    case 0x9A:
      v21 = *((_QWORD *)a3 + 1);
      v22 = *(_QWORD *)a3;
      v74 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v21 < v74 || v21 - v74 <= 7)
        goto LABEL_260;
      v76 = (unint64_t *)(v22 + v74);
      *((_QWORD *)a3 + 2) = v76 + 1;
      if (!v22)
        goto LABEL_326;
      v77 = *v76;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)v172);
      if (!v172[16])
        goto LABEL_231;
      WebKit::MediaPlayerPrivateRemote::parseWebVTTCueData((uint64_t)this, v77, *(uint64_t *)v172, *(uint64_t *)&v172[8]);
      return;
    case 0x9B:
      v81 = *((_QWORD *)a3 + 1);
      v82 = *(_QWORD *)a3;
      v83 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v81 < v83 || v81 - v83 <= 7)
      {
        v157 = 0;
        v158 = 0;
        *v3 = 0;
        v3[1] = 0;
        v159 = v3[3];
        if (v159)
        {
          if (v81)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v159 + 16))(v159, v82, v81);
            v158 = *v3;
            v157 = v3[1];
          }
          else
          {
            v157 = 0;
            v158 = 0;
          }
        }
        goto LABEL_289;
      }
      v85 = (uint64_t *)(v82 + v83);
      *((_QWORD *)a3 + 2) = v85 + 1;
      if (!v82)
      {
        v157 = v81;
        v158 = 0;
LABEL_289:
        *v3 = 0;
        v3[1] = 0;
        v160 = v3[3];
        if (v160 && v157)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v160 + 16))(v160, v158);
        goto LABEL_293;
      }
      v86 = *v85;
      IPC::ArgumentCoder<WebCore::ISOWebVTTCue,void>::decode((uint64_t *)a3, v190);
      if (v193
        || (v161 = *v3, v162 = v3[1], *v3 = 0, v3[1] = 0, (v163 = v3[3]) != 0)
        && v162
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 16))(v163, v161), v193))
      {
        *(_QWORD *)v172 = v86;
        WebCore::ISOWebVTTCue::ISOWebVTTCue();
        v174[8] = 1;
        if (v193)
          MEMORY[0x19AEAD570](v190);
        goto LABEL_134;
      }
LABEL_293:
      v172[0] = 0;
      v174[8] = 0;
      v164 = *v3;
      v165 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      v166 = v3[3];
      if (!v166)
        return;
      if (!v165)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v166 + 16))(v166, v164);
      if (!v174[8])
        return;
LABEL_134:
      WebKit::MediaPlayerPrivateRemote::parseWebVTTCueDataStruct((uint64_t)this, *(unint64_t *)v172, (uint64_t)&v172[8]);
      if (v174[8])
        MEMORY[0x19AEAD570](&v172[8]);
      return;
    case 0x9C:
      IPC::Decoder::decode<std::tuple<unsigned long long,WTF::String>>((uint64_t *)a3, v172);
      if (!v172[16])
        return;
      WebKit::MediaPlayerPrivateRemote::parseWebVTTFileHeader((uint64_t)this, *(unint64_t *)v172, (uint64_t)&v172[8]);
      if (!v172[16])
        return;
      v66 = *(WTF::StringImpl **)&v172[8];
      *(_QWORD *)&v172[8] = 0;
      if (!v66)
        return;
      goto LABEL_247;
    case 0x9D:
      v101 = *((_QWORD *)a3 + 1);
      v102 = *v3;
      v103 = v3[2] - *v3;
      if (v101 <= v103)
      {
        v146 = 0;
        *v3 = 0;
        v3[1] = 0;
        v147 = v3[3];
        if (v147)
        {
          if (v101)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v147 + 16))(v147);
            v146 = v3[1];
          }
          else
          {
            v146 = 0;
          }
        }
      }
      else
      {
        v104 = (unsigned __int8 *)(v102 + v103);
        v3[2] = (uint64_t)(v104 + 1);
        if (v102)
        {
          v105 = *v104;
          if (v105 >= 2)
            goto LABEL_261;
          IPC::Decoder::decode<WebKit::MediaTimeUpdateData>((uint64_t)v190, v3);
          if (v190[32])
          {
            *(_OWORD *)&v172[8] = *(_OWORD *)v190;
            *(_OWORD *)&v172[24] = *(_OWORD *)&v190[16];
            v172[0] = v105 != 0;
            v172[40] = 1;
            WebKit::MediaPlayerPrivateRemote::playbackStateChanged((uint64_t)this, v105 != 0, (WTF::MediaTime *)&v172[8]);
            return;
          }
          goto LABEL_231;
        }
        v146 = v101;
      }
      v101 = 0;
      v102 = 0;
      *v3 = 0;
      v3[1] = 0;
      v148 = v3[3];
      if (!v148)
        goto LABEL_261;
      if (v146)
      {
        v149 = *(void (**)(void))(*(_QWORD *)v148 + 16);
        goto LABEL_309;
      }
      goto LABEL_331;
    case 0x9E:
      IPC::ArgumentCoder<WebCore::VideoFrameMetadata,void>::decode((uint64_t *)a3, (uint64_t)v190);
      if (!(_BYTE)v191)
      {
        v143 = *v3;
        v144 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v145 = v3[3];
        if (!v145)
          goto LABEL_231;
        if (!v144)
          goto LABEL_231;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, v143);
        if (!(_BYTE)v191)
          goto LABEL_231;
      }
      IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>(v3, (uint64_t)&v185);
      if (!v189)
        goto LABEL_231;
      if (!(_BYTE)v191)
        goto LABEL_264;
      *(_OWORD *)&v172[32] = *(_OWORD *)&v190[32];
      *(_OWORD *)&v172[48] = *(_OWORD *)&v190[48];
      *(_OWORD *)&v172[64] = *(_OWORD *)&v190[64];
      *(_OWORD *)&v172[80] = *(_OWORD *)&v190[80];
      *(_OWORD *)v172 = *(_OWORD *)v190;
      *(_OWORD *)&v172[16] = *(_OWORD *)&v190[16];
      *(_QWORD *)&v174[32] = v188;
      *(_OWORD *)v174 = v186;
      *(_OWORD *)&v174[16] = v187;
      *(_OWORD *)v173 = v185;
      LOBYTE(v175) = 1;
      WebKit::MediaPlayerPrivateRemote::pushVideoFrameMetadata((uint64_t)this, v172, (uint64_t)v173);
      return;
    case 0x9F:
      v21 = *((_QWORD *)a3 + 1);
      v22 = *(_QWORD *)a3;
      v54 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v21 < v54 || v21 - v54 <= 7)
        goto LABEL_260;
      v56 = (double *)(v22 + v54);
      *((_QWORD *)a3 + 2) = v56 + 1;
      if (!v22)
        goto LABEL_326;
      v57 = *v56;
      IPC::Decoder::decode<WebKit::MediaTimeUpdateData>((uint64_t)v190, (uint64_t *)a3);
      if (!v190[32])
        goto LABEL_231;
      *(double *)v172 = v57;
      *(_OWORD *)&v172[8] = *(_OWORD *)v190;
      *(_OWORD *)&v172[24] = *(_OWORD *)&v190[16];
      v172[40] = 1;
      WebKit::MediaPlayerPrivateRemote::rateChanged((uint64_t)this, (WTF::MediaTime *)&v172[8], v57);
      return;
    case 0xA0:
      IPC::Decoder::decode<WebKit::RemoteMediaPlayerState>((uint64_t)v190, (uint64_t *)a3);
      if (!v200)
        goto LABEL_204;
      ready = IPC::Decoder::decode<WebCore::MediaPlayerReadyState>(v3);
      if (ready < 0x100u)
        goto LABEL_204;
      if (!v200)
        goto LABEL_264;
      v129 = ready;
      *(_OWORD *)&v172[32] = *(_OWORD *)&v190[32];
      *(_OWORD *)&v172[48] = *(_OWORD *)&v190[48];
      *(_OWORD *)&v172[61] = *(_OWORD *)&v190[61];
      *(_OWORD *)v172 = *(_OWORD *)v190;
      *(_OWORD *)&v172[16] = *(_OWORD *)&v190[16];
      v130 = *(_OWORD *)&v190[80];
      *(_OWORD *)&v190[80] = 0uLL;
      *(_OWORD *)&v172[80] = v130;
      LOBYTE(v173[0]) = 0;
      v174[0] = 0;
      if (v193)
      {
        v173[0] = v191;
        v131 = v192;
        v191 = 0;
        v192 = 0;
        v173[1] = v131;
        v174[0] = 1;
      }
      v176 = v197;
      v177 = v198;
      *(_OWORD *)cf = v199[0];
      *(_OWORD *)&cf[10] = *(_OWORD *)((char *)v199 + 10);
      *(_OWORD *)&v174[8] = v194;
      *(_OWORD *)&v174[24] = v195;
      v175 = v196;
      LOBYTE(v179[0]) = ready;
      BYTE8(v179[0]) = 1;
      std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v190, v98);
      WebKit::MediaPlayerPrivateRemote::readyStateChanged((uint64_t)this, (uint64_t *)v172, v129);
      if (BYTE8(v179[0]))
        goto LABEL_238;
      return;
    case 0xA1:
      v21 = *((_QWORD *)a3 + 1);
      v22 = *(_QWORD *)a3;
      v23 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v21 < v23 || v21 - v23 <= 7)
        goto LABEL_260;
      v25 = (unint64_t *)(v22 + v23);
      *((_QWORD *)a3 + 2) = v25 + 1;
      if (!v22)
        goto LABEL_326;
      v26 = *v25;
      IPC::Decoder::decode<WebKit::AudioTrackPrivateRemoteConfiguration>((uint64_t)v190, (uint64_t *)a3);
      if (!v190[72])
      {
        v123 = v190;
LABEL_226:
        std::__optional_destruct_base<WebKit::AudioTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v123, v27);
        goto LABEL_231;
      }
      *(_QWORD *)v172 = v26;
      *(_QWORD *)&v172[8] = *(_QWORD *)v190;
      v28 = *(_OWORD *)&v190[8];
      *(_QWORD *)&v190[8] = 0;
      *(_QWORD *)&v190[16] = 0;
      *(_OWORD *)&v172[16] = v28;
      *(_OWORD *)&v172[32] = *(_OWORD *)&v190[24];
      *(_DWORD *)&v172[48] = *(_DWORD *)&v190[40];
      *(_WORD *)&v172[52] = *(_WORD *)&v190[44];
      v29 = *(_QWORD *)&v190[48];
      *(_QWORD *)&v190[48] = 0;
      *(_QWORD *)&v172[56] = v29;
      *(_OWORD *)&v172[64] = *(_OWORD *)&v190[56];
      v172[80] = 1;
      std::__optional_destruct_base<WebKit::AudioTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v190, v27);
      WebKit::MediaPlayerPrivateRemote::remoteAudioTrackConfigurationChanged((uint64_t)this, v26, (uint64_t *)&v172[8]);
      if (v172[80])
        goto LABEL_198;
      return;
    case 0xA2:
      v21 = *((_QWORD *)a3 + 1);
      v22 = *(_QWORD *)a3;
      v106 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v21 < v106 || v21 - v106 <= 7)
        goto LABEL_260;
      v108 = (unint64_t *)(v22 + v106);
      *((_QWORD *)a3 + 2) = v108 + 1;
      if (!v22)
        goto LABEL_326;
      v109 = *v108;
      IPC::Decoder::decode<WebKit::TextTrackPrivateRemoteConfiguration>((uint64_t)v190, (uint64_t *)a3);
      if (!v190[64])
      {
        v124 = v190;
LABEL_228:
        std::__optional_destruct_base<WebKit::TextTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v124, v78);
        goto LABEL_231;
      }
      v110 = *(_QWORD *)&v190[24];
      *(_QWORD *)v172 = v109;
      *(_QWORD *)&v172[8] = *(_QWORD *)v190;
      v111 = *(_OWORD *)&v190[8];
      memset(&v190[8], 0, 24);
      *(_OWORD *)&v172[16] = v111;
      *(_QWORD *)&v172[32] = v110;
      *(_OWORD *)&v172[40] = *(_OWORD *)&v190[32];
      *(_OWORD *)&v172[52] = *(_OWORD *)&v190[44];
      v172[72] = 1;
      std::__optional_destruct_base<WebKit::TextTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v190, v78);
      WebKit::MediaPlayerPrivateRemote::remoteTextTrackConfigurationChanged((uint64_t)this, v109, (uint64_t *)&v172[8]);
      if (!v172[72])
        return;
      v112 = *(WTF::StringImpl **)&v172[32];
      *(_QWORD *)&v172[32] = 0;
      if (!v112)
        goto LABEL_216;
      goto LABEL_199;
    case 0xA3:
      v21 = *((_QWORD *)a3 + 1);
      v22 = *(_QWORD *)a3;
      v113 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v21 < v113 || v21 - v113 <= 7)
      {
LABEL_260:
        v101 = 0;
        v102 = 0;
        *v3 = 0;
        v3[1] = 0;
        v135 = v3[3];
        if (v135)
        {
          if (v21)
          {
            v149 = *(void (**)(void))(*(_QWORD *)v135 + 16);
LABEL_309:
            v149();
LABEL_310:
            v102 = *v3;
            v101 = v3[1];
          }
          else
          {
LABEL_331:
            v101 = 0;
            v102 = 0;
          }
        }
        goto LABEL_261;
      }
      v115 = (unint64_t *)(v22 + v113);
      *((_QWORD *)a3 + 2) = v115 + 1;
      if (!v22)
      {
LABEL_326:
        v101 = v21;
        v102 = v22;
LABEL_261:
        *v3 = 0;
        v3[1] = 0;
        v136 = v3[3];
        if (v136 && v101)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(v136, v102);
        goto LABEL_231;
      }
      v116 = *v115;
      IPC::Decoder::decode<WebKit::VideoTrackPrivateRemoteConfiguration>((uint64_t)v190, (uint64_t *)a3);
      if (v190[88])
      {
        *(_QWORD *)v172 = v116;
        *(_QWORD *)&v172[8] = *(_QWORD *)v190;
        v117 = *(_OWORD *)&v190[8];
        *(_QWORD *)&v190[8] = 0;
        *(_QWORD *)&v190[16] = 0;
        *(_OWORD *)&v172[16] = v117;
        *(_OWORD *)&v172[32] = *(_OWORD *)&v190[24];
        *(_DWORD *)&v172[48] = *(_DWORD *)&v190[40];
        *(_WORD *)&v172[52] = *(_WORD *)&v190[44];
        v118 = *(_QWORD *)&v190[48];
        *(_QWORD *)&v190[48] = 0;
        *(_QWORD *)&v172[56] = v118;
        *(_OWORD *)&v172[64] = *(_OWORD *)&v190[56];
        *(_OWORD *)&v172[80] = *(_OWORD *)&v190[72];
        LOBYTE(v173[0]) = 1;
        std::__optional_destruct_base<WebKit::VideoTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v190, v87);
        WebKit::MediaPlayerPrivateRemote::remoteVideoTrackConfigurationChanged((uint64_t)this, v116, (uint64_t *)&v172[8]);
        if (!LOBYTE(v173[0]))
          return;
LABEL_198:
        v112 = *(WTF::StringImpl **)&v172[56];
        *(_QWORD *)&v172[56] = 0;
        if (v112)
        {
LABEL_199:
          if (*(_DWORD *)v112 == 2)
            WTF::StringImpl::destroy(v112, v30);
          else
            *(_DWORD *)v112 -= 2;
        }
LABEL_216:
        v122 = *(WTF::StringImpl **)&v172[24];
        *(_QWORD *)&v172[24] = 0;
        if (v122)
        {
          if (*(_DWORD *)v122 == 2)
            WTF::StringImpl::destroy(v122, v30);
          else
            *(_DWORD *)v122 -= 2;
        }
        v66 = *(WTF::StringImpl **)&v172[16];
        *(_QWORD *)&v172[16] = 0;
        if (v66)
        {
LABEL_247:
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v30);
          else
            *(_DWORD *)v66 -= 2;
        }
      }
      else
      {
        v125 = v190;
LABEL_230:
        std::__optional_destruct_base<WebKit::VideoTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v125, v87);
LABEL_231:
        v126 = *v3;
        v127 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v128 = v3[3];
        if (v128)
        {
          if (v127)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v128 + 16))(v128, v126);
        }
      }
      return;
    case 0xA4:
      IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime,WTF::MediaTime,WebCore::SerializedPlatformDataCueValue>>((uint64_t)v172, (uint64_t *)a3);
      if (!LOBYTE(v173[0]))
        return;
      WebKit::MediaPlayerPrivateRemote::removeDataCue((uint64_t)this, *(unint64_t *)v172, (uint64_t)&v172[8], (uint64_t)&v172[24], (uint64_t)&v172[40]);
      goto LABEL_151;
    case 0xA5:
      IPC::Decoder::decode<std::tuple<unsigned long long,WebCore::GenericCueData>>((uint64_t)v172, (uint64_t *)a3);
      if (!v174[32])
        return;
      WebKit::MediaPlayerPrivateRemote::removeGenericCue((uint64_t)this, *(unint64_t *)v172, (__int128 *)&v172[8]);
      goto LABEL_157;
    case 0xA6:
      v96 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v97)
        WebKit::MediaPlayerPrivateRemote::removeRemoteAudioTrack(this, v96);
      return;
    case 0xA7:
      v42 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v43)
        WebKit::MediaPlayerPrivateRemote::removeRemoteTextTrack(this, v42);
      return;
    case 0xA8:
      v31 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v32)
        WebKit::MediaPlayerPrivateRemote::removeRemoteVideoTrack(this, v31);
      return;
    case 0xA9:
      v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v20)
      {
        WebKit::MediaPlayerPrivateRemote::removeResource((uint64_t)this, v19);
      }
      else
      {
        v140 = *v3;
        v141 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v142 = v3[3];
        if (v142 && v141)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v142 + 16))(v142, v140);
      }
      return;
    case 0xAA:
      WebKit::MediaPlayerPrivateRemote::renderingModeChanged(this);
      return;
    case 0xAB:
      v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v8)
        goto LABEL_265;
      v9 = v7;
      IPC::Decoder::decode<WebCore::ResourceRequest>(v3, (uint64_t)v190);
      v10 = v199[0];
      if (!LOBYTE(v199[0]))
        goto LABEL_300;
      v11 = v3[1];
      v12 = *v3;
      v13 = ((v3[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v3;
      if (v11 >= v13 && v11 - v13 > 3)
      {
        v15 = (int *)(v12 + v13);
        v3[2] = (uint64_t)(v15 + 1);
        if (v12)
        {
          v16 = *v15;
          *(_QWORD *)v172 = v9;
          std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v172[8], (uint64_t)v190);
          *(_DWORD *)&cf[8] = v16;
          v10 = 1;
          goto LABEL_301;
        }
        v167 = v11;
        v168 = 0;
      }
      else
      {
        v167 = 0;
        v168 = 0;
        *v3 = 0;
        v3[1] = 0;
        v169 = v3[3];
        if (v169)
        {
          if (v11)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v169 + 16))(v169, v12, v11);
            v168 = *v3;
            v167 = v3[1];
          }
          else
          {
            v167 = 0;
            v168 = 0;
          }
        }
      }
      *v3 = 0;
      v3[1] = 0;
      v170 = v3[3];
      if (v170 && v167)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v168);
      v10 = 0;
LABEL_300:
      v172[0] = 0;
LABEL_301:
      cf[16] = v10;
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v190);
      if (cf[16])
        goto LABEL_302;
      goto LABEL_266;
    case 0xAC:
      WebKit::MediaPlayerPrivateRemote::resourceNotSupported(this);
      return;
    case 0xAD:
      IPC::Decoder::decode<std::tuple<WebKit::MediaTimeUpdateData>>((uint64_t)v172, (uint64_t *)a3);
      if (v172[32])
        WebKit::MediaPlayerPrivateRemote::seeked((uint64_t)this, (WTF::MediaTime *)v172);
      return;
    case 0xAE:
      IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)a3, v172);
      if (!v172[40])
        return;
      v47 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v30)
        goto LABEL_54;
      *(_QWORD *)v190 = v47;
      v3 = (uint64_t *)&v190[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v190[8], a2);
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v48 = off_1E34B05B0;
      v48[1] = *(_QWORD *)v190;
      v49 = *(_QWORD *)&v190[8];
      *(_QWORD *)&v190[8] = 0;
      v48[2] = v49;
      *(_QWORD *)&v185 = v48;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v190[8]);
      if (!v172[40])
        goto LABEL_264;
      WebKit::MediaPlayerPrivateRemote::sendH2Ping((uint64_t)this);
LABEL_52:
      v50 = v185;
      *(_QWORD *)&v185 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
LABEL_54:
      if (!v172[40])
        return;
LABEL_89:
      v66 = *(WTF::StringImpl **)v172;
      *(_QWORD *)v172 = 0;
      if (!v66)
        return;
      goto LABEL_247;
    case 0xAF:
      v72 = IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>((unint64_t *)a3);
      if (v73)
        WebKit::MediaPlayerPrivateRemote::sizeChanged((uint64_t)this, *(float *)&v72, *((float *)&v72 + 1));
      return;
    case 0xB0:
      IPC::Decoder::decode<WebKit::RemoteMediaPlayerState>((uint64_t)v190, (uint64_t *)a3);
      if (!v200 || (IPC::Decoder::decode<WebKit::MediaTimeUpdateData>((uint64_t)&v185, v3), !(_BYTE)v187))
      {
LABEL_204:
        std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v190, v98);
        goto LABEL_231;
      }
      if (!v200)
      {
LABEL_264:
        __break(1u);
LABEL_265:
        v172[0] = 0;
        cf[16] = 0;
LABEL_266:
        v137 = *v3;
        v138 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v139 = v3[3];
        if (v139)
        {
          if (v138)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v139 + 16))(v139, v137);
            if (cf[16])
            {
LABEL_302:
              WebKit::MediaPlayerPrivateRemote::requestResource((uint64_t)this, *(uint64_t *)v172, (uint64_t)&v172[8], *(unsigned int *)&cf[8]);
              if (cf[16])
              {
                v171 = *(const void **)cf;
                *(_QWORD *)cf = 0;
                if (v171)
                  CFRelease(v171);
                WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v172[8]);
              }
            }
          }
        }
        return;
      }
      *(_OWORD *)&v172[32] = *(_OWORD *)&v190[32];
      *(_OWORD *)&v172[48] = *(_OWORD *)&v190[48];
      *(_OWORD *)&v172[61] = *(_OWORD *)&v190[61];
      *(_OWORD *)v172 = *(_OWORD *)v190;
      *(_OWORD *)&v172[16] = *(_OWORD *)&v190[16];
      v99 = *(_OWORD *)&v190[80];
      *(_OWORD *)&v190[80] = 0uLL;
      *(_OWORD *)&v172[80] = v99;
      LOBYTE(v173[0]) = 0;
      v174[0] = 0;
      if (v193)
      {
        v173[0] = v191;
        v100 = v192;
        v191 = 0;
        v192 = 0;
        v173[1] = v100;
        v174[0] = 1;
      }
      v176 = v197;
      v177 = v198;
      *(_OWORD *)cf = v199[0];
      *(_OWORD *)&cf[10] = *(_OWORD *)((char *)v199 + 10);
      *(_OWORD *)&v174[8] = v194;
      *(_OWORD *)&v174[24] = v195;
      v175 = v196;
      v179[0] = v185;
      v179[1] = v186;
      v180 = 1;
      std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v190, v98);
      WebKit::MediaPlayerPrivateRemote::timeChanged((uint64_t)this, (uint64_t *)v172, (WTF::MediaTime *)v179);
      if (!v180)
        return;
LABEL_238:
      if (v174[0])
      {
        v132 = v173[0];
        if (v173[0])
        {
          v173[0] = 0;
          LODWORD(v173[1]) = 0;
          WTF::fastFree(v132, v30);
        }
      }
      v133 = *(WTF::StringImpl **)&v172[88];
      *(_QWORD *)&v172[88] = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2)
          WTF::StringImpl::destroy(v133, v30);
        else
          *(_DWORD *)v133 -= 2;
      }
      v66 = *(WTF::StringImpl **)&v172[80];
      *(_QWORD *)&v172[80] = 0;
      if (!v66)
        return;
      goto LABEL_247;
    case 0xB1:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>((uint64_t)v172, (uint64_t *)a3);
      if (LOBYTE(v179[0]))
        WebKit::MediaPlayerPrivateRemote::updateCachedState((uint64_t)this, (uint64_t *)v172);
LABEL_167:
      std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v172, v6);
      return;
    case 0xB2:
      IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime,WTF::MediaTime,WebCore::SerializedPlatformDataCueValue>>((uint64_t)v172, (uint64_t *)a3);
      if (!LOBYTE(v173[0]))
        return;
      WebKit::MediaPlayerPrivateRemote::updateDataCue((uint64_t)this, *(unint64_t *)v172, (uint64_t)&v172[8], (uint64_t)&v172[24], (uint64_t)&v172[40]);
LABEL_151:
      if (LOBYTE(v173[0]))
LABEL_152:
        std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v172[40], v38);
      return;
    case 0xB3:
      IPC::Decoder::decode<std::tuple<unsigned long long,WebCore::GenericCueData>>((uint64_t)v172, (uint64_t *)a3);
      if (!v174[32])
        return;
      WebKit::MediaPlayerPrivateRemote::updateGenericCue((uint64_t)this, *(unint64_t *)v172, (__int128 *)&v172[8]);
LABEL_157:
      if (v174[32])
        WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)&v172[8], v67);
      return;
    case 0xB4:
      IPC::Decoder::decode<WebCore::VideoPlaybackQualityMetrics>((uint64_t *)a3, (uint64_t)v172);
      if (!v172[32])
        goto LABEL_231;
      *(_OWORD *)v190 = *(_OWORD *)&v172[1];
      *(_OWORD *)&v190[15] = *(_OWORD *)&v172[16];
      v120 = *((unsigned __int8 *)this + 424);
      *((_BYTE *)this + 392) = v172[0];
      *(_OWORD *)((char *)this + 393) = *(_OWORD *)v190;
      if (v120)
      {
        *(_OWORD *)((char *)this + 404) = *(_OWORD *)&v190[11];
      }
      else
      {
        *(_OWORD *)((char *)this + 408) = *(_OWORD *)&v190[15];
        *((_BYTE *)this + 424) = 1;
      }
      return;
    case 0xB5:
      v17 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3));
      if (v18)
        WebKit::MediaPlayerPrivateRemote::volumeChanged(this, v17);
      return;
    case 0xB6:
      v44 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v44 >= 0x100u)
        WebKit::MediaPlayerPrivateRemote::waitingForKeyChanged(this, v44 != 0);
      return;
    default:
      return;
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _OWORD v13[3];
  _OWORD v14[2];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  char v25;

  IPC::Decoder::decode<WebKit::RemoteMediaPlayerState>((uint64_t)v13, a2);
  if (v25)
  {
    v5 = v14[0];
    *(_OWORD *)(a1 + 32) = v13[2];
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 61) = *(_OWORD *)((char *)v14 + 13);
    v6 = v13[1];
    *(_OWORD *)a1 = v13[0];
    *(_OWORD *)(a1 + 16) = v6;
    v7 = v15;
    v15 = 0uLL;
    *(_OWORD *)(a1 + 80) = v7;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v18)
    {
      *(_QWORD *)(a1 + 96) = v16;
      v8 = v17;
      v16 = 0;
      v17 = 0;
      *(_QWORD *)(a1 + 104) = v8;
      *(_BYTE *)(a1 + 112) = 1;
    }
    *(_OWORD *)(a1 + 168) = v22;
    *(_OWORD *)(a1 + 184) = v23;
    *(_OWORD *)(a1 + 200) = v24[0];
    *(_OWORD *)(a1 + 210) = *(_OWORD *)((char *)v24 + 10);
    *(_OWORD *)(a1 + 120) = v19;
    *(_OWORD *)(a1 + 136) = v20;
    *(_OWORD *)(a1 + 152) = v21;
    *(_BYTE *)(a1 + 232) = 1;
    return std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 232) = 0;
    std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
    v10 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v10);
  }
  return result;
}

WTF *IPC::Decoder::decode<WebKit::RemoteMediaPlayerState>(uint64_t a1, uint64_t *a2)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 232))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 232))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      v3 = *(WTF **)(a1 + 96);
      if (v3)
      {
        *(_QWORD *)(a1 + 96) = 0;
        *(_DWORD *)(a1 + 104) = 0;
        WTF::fastFree(v3, a2);
      }
    }
    v4 = *(WTF::StringImpl **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::MediaPlayerReadyState>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::MediaPlayerReadyState,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::MediaPlayerReadyState,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 5)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

unint64_t IPC::ArgumentCoder<std::tuple<double>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = (uint64_t *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      v6 = *v5;
      v7 = *v5 & 0xFFFFFFFFFFFFFF00;
      v8 = v6;
      return v7 | v8;
    }
    v10 = v1;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  v8 = 0;
  v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13)
  {
    if (v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
    v8 = 0;
    v7 = 0;
  }
  return v7 | v8;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::MediaTimeUpdateData>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _OWORD v9[2];
  char v10;

  result = IPC::Decoder::decode<WebKit::MediaTimeUpdateData>((uint64_t)v9, a2);
  if (v10)
  {
    v5 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::MediaTimeUpdateData>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<long long>>(uint64_t *a1)
{
  unint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  result = IPC::Decoder::decode<long long>(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::AudioTrackPrivateRemoteConfiguration>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 72))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::AudioTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::VideoTrackPrivateRemoteConfiguration>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 88))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::VideoTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebKit::TextTrackPrivateRemoteConfiguration>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 64))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::TextTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

_QWORD *IPC::Decoder::decode<std::tuple<unsigned long long,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _BYTE *v12;
  _BYTE *v13;
  _QWORD v14[2];

  v2 = a1[1];
  v3 = *a1;
  v4 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    v6 = (_QWORD *)(v3 + v4);
    a1[2] = (uint64_t)(v6 + 1);
    if (v3)
    {
      v14[0] = *v6;
      v14[1] = 1;
      return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v14, (uint64_t)a2);
    }
    v8 = v2;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        v9 = *v11;
        v8 = v11[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = (_QWORD *)a1[3];
  if (result)
  {
    if (v8)
    {
      v12 = a2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SerializedPlatformDataCueValue>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::SerializedPlatformDataCueValue,void>::decode(a2, a1);
  if (!a1[56])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data*>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = result;
    v3 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v3;
    *(_QWORD *)(result + 8) = 0;
    v4 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 8) = v4;
    v5 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v5;
    v6 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v6;
    *(_BYTE *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>,(std::__variant_detail::_Trait)1>>(result + 32, (uint64_t)(a2 + 4));
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime,WTF::MediaTime,WebCore::SerializedPlatformDataCueValue>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  __int128 v20;
  char v21;
  uint64_t v22[6];
  char v23;
  unsigned __int8 v24;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v12 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v5, v4);
        v11 = (WTF::StringImpl *)*a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
    }
LABEL_19:
    *a2 = 0;
    a2[1] = 0;
    v10 = a2[3];
    if (!v10)
    {
LABEL_20:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
LABEL_21:
      v16 = *a2;
      v17 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (result)
      {
        if (v17)
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
      }
      return result;
    }
LABEL_26:
    if (v12)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10, v11);
    goto LABEL_20;
  }
  v8 = (uint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v4;
    v11 = 0;
    goto LABEL_19;
  }
  v9 = *v8;
  IPC::Decoder::decode<WTF::MediaTime>(a2, (uint64_t)&v18);
  if (!v19)
    goto LABEL_20;
  IPC::Decoder::decode<WTF::MediaTime>(a2, (uint64_t)&v20);
  if (!v21)
    goto LABEL_20;
  v10 = IPC::Decoder::decode<WebCore::SerializedPlatformDataCueValue>(v22, a2);
  if (!v24)
    goto LABEL_20;
  if (!v19 || !v21)
  {
    __break(1u);
    goto LABEL_26;
  }
  *(_QWORD *)a1 = v9;
  *(_OWORD *)(a1 + 8) = v18;
  *(_OWORD *)(a1 + 24) = v20;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (v23)
  {
    result = std::construct_at[abi:sn180100]<WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data*>(a1 + 40, v22);
    *(_BYTE *)(a1 + 88) = 1;
    v14 = v24;
    *(_BYTE *)(a1 + 96) = 1;
    if (!v14)
      return result;
  }
  else
  {
    *(_BYTE *)(a1 + 96) = 1;
  }
  result = std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
  if (!*(_BYTE *)(a1 + 96))
    goto LABEL_21;
  return result;
}

void IPC::Decoder::decode<std::tuple<unsigned long long,WebCore::GenericCueData>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _BYTE v25[21];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = (uint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v14 = v4;
    v15 = 0;
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    goto LABEL_16;
  }
  v9 = *v8;
  IPC::ArgumentCoder<WebCore::GenericCueData,void>::decode(a2, (uint64_t)&v24);
  if (v33
    || (v18 = *a2, v19 = a2[1], *a2 = 0, a2[1] = 0, (v20 = a2[3]) != 0)
    && v19
    && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18), v33))
  {
    v10 = *(_OWORD *)v25;
    *(_OWORD *)(a1 + 8) = v24;
    *(_OWORD *)(a1 + 24) = v10;
    *(_OWORD *)(a1 + 48) = v26;
    v11 = v28;
    *(_OWORD *)(a1 + 88) = v29;
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 37) = *(_QWORD *)&v25[13];
    v26 = 0uLL;
    v12 = v27;
    v27 = 0;
    *(_QWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 104) = v30;
    *(_OWORD *)(a1 + 72) = v11;
    WebCore::Color::Color();
    WebCore::Color::Color();
    WebCore::Color::Color();
    *(_WORD *)(a1 + 136) = v31;
    *(_BYTE *)(a1 + 138) = v32;
    *(_BYTE *)(a1 + 144) = 1;
    if (!v33)
      return;
    WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)&v24, v13);
    if (*(_BYTE *)(a1 + 144))
      return;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 144) = 0;
LABEL_17:
  v21 = *a2;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v23 = a2[3];
  if (v23)
  {
    if (v22)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote10SendH2PingEN6WebKit24MediaPlayerPrivateRemoteES8_FvRKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B05B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote10SendH2PingEN6WebKit24MediaPlayerPrivateRemoteES8_FvRKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B05B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote10SendH2PingEN6WebKit24MediaPlayerPrivateRemoteES8_FvRKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2848;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(uint64_t a1, WebCore::ResourceError *a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  v4 = *((_DWORD *)a2 + 20);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_23;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (v4)
  {
    *v10 = 0;
    if (*((_DWORD *)a2 + 20) == 1)
    {
      IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)a1, a2);
      return;
    }
    goto LABEL_22;
  }
  *v10 = 1;
  if (*((_DWORD *)a2 + 20))
  {
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_23;
  }
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a1 + 544);
  v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 8;
  v15 = *(_QWORD *)(a1 + 552);
  if (v15 < v13 + 8)
  {
    v22 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v14);
    v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (v24 != (char *)-1)
    {
      v16 = v24;
      memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v25 = *(void **)(a1 + 528);
      if (v25 != (void *)(a1 + 16))
        munmap(v25, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v16;
      *(_QWORD *)(a1 + 552) = v23;
      v12 = *(_QWORD *)(a1 + 544);
      goto LABEL_9;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x196F7196CLL);
  }
  v16 = *(char **)(a1 + 528);
LABEL_9:
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(a1 + 544) = v14;
  v17 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v13);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  *v17 = v11;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote13GetRawCookiesEN6WebKit24MediaPlayerPrivateRemoteES8_KFvRKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B05D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote13GetRawCookiesEN6WebKit24MediaPlayerPrivateRemoteES8_KFvRKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B05D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote13GetRawCookiesEN6WebKit24MediaPlayerPrivateRemoteES8_KFvRKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2847;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  void *v17;

  v4 = *(unsigned int *)(a2 + 12);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 8;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 < v6 + 8)
  {
    v14 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v15 = v14;
      v14 *= 2;
    }
    while (v15 < v7);
    v16 = (char *)mmap(0, v15, 3, 4098, -1, 0);
    if (v16 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v9 = v16;
    memcpy(v16, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v17 = *(void **)(a1 + 528);
    if (v17 != (void *)(a1 + 16))
      munmap(v17, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v15;
    v5 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v9 = *(char **)(a1 + 528);
  }
  bzero(&v9[v5], v6 - v5);
  *(_QWORD *)(a1 + 544) = v7;
  v10 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v6);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)a2;
    v13 = 136 * v11;
    do
    {
      IPC::ArgumentCoder<WebCore::Cookie,void>::encode((IPC::Encoder *)a1, v12);
      v12 += 17;
      v13 -= 136;
    }
    while (v13);
  }
}

unint64_t IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote21CommitAllTransactionsEN6WebKit24MediaPlayerPrivateRemoteES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0600;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote21CommitAllTransactionsEN6WebKit24MediaPlayerPrivateRemoteES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0600;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote21CommitAllTransactionsEN6WebKit24MediaPlayerPrivateRemoteES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2846;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WebKit::MediaSourcePrivateRemote *WebKit::MediaSourcePrivateRemote::MessageReceiver::didReceiveMessage(WebKit::MediaSourcePrivateRemote *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::MediaSourcePrivateRemote *v5;
  int v6;
  char v7;
  WebKit::MediaSourcePrivateRemote *v8;
  unsigned __int8 **v9;
  char v10;
  WebKit::MediaSourcePrivateRemote *v11;
  unsigned __int8 **v12;
  char v13;
  WebKit::MediaSourcePrivateRemote *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 **v17;
  char v18;
  char v19;
  WebKit::MediaSourcePrivateRemote *v20;
  unsigned __int8 **v21;
  WebKit::MediaSourcePrivateRemote *v22;

  v5 = this;
  v6 = *((unsigned __int16 *)a3 + 25);
  switch(v6)
  {
    case 183:
      this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v10)
      {
        v16 = (uint64_t)this;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, a2);
        v11 = (WebKit::MediaSourcePrivateRemote *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v11 = off_1E34B06B0;
        *((_QWORD *)v11 + 1) = v16;
        v12 = v17;
        v17 = 0;
        *((_QWORD *)v11 + 2) = v12;
        v20 = v11;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v17);
        WebKit::MediaSourcePrivateRemote::MessageReceiver::mediaSourcePrivateShuttingDown(v5, (uint64_t *)&v20);
        this = v20;
        v20 = 0;
        if (this)
          return (WebKit::MediaSourcePrivateRemote *)(*(uint64_t (**)(WebKit::MediaSourcePrivateRemote *))(*(_QWORD *)this + 8))(this);
      }
      break;
    case 184:
      this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)&v16);
      if (v18)
      {
        this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v13)
        {
          v20 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a2);
          v14 = (WebKit::MediaSourcePrivateRemote *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v14 = off_1E34B0688;
          *((_QWORD *)v14 + 1) = v20;
          v15 = v21;
          v21 = 0;
          *((_QWORD *)v14 + 2) = v15;
          v22 = v14;
          this = (WebKit::MediaSourcePrivateRemote *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
          if (v18)
          {
            WebKit::MediaSourcePrivateRemote::MessageReceiver::proxySeekToTime(v5, (uint64_t)&v16, (uint64_t *)&v22);
LABEL_15:
            this = v22;
            v22 = 0;
            if (!this)
              return this;
            return (WebKit::MediaSourcePrivateRemote *)(*(uint64_t (**)(WebKit::MediaSourcePrivateRemote *))(*(_QWORD *)this + 8))(this);
          }
LABEL_18:
          __break(1u);
        }
      }
      break;
    case 185:
      this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<std::tuple<WebCore::SeekTarget>>((uint64_t *)a3, (uint64_t)&v16);
      if (v19)
      {
        this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v7)
        {
          v20 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a2);
          v8 = (WebKit::MediaSourcePrivateRemote *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v8 = off_1E34B0660;
          *((_QWORD *)v8 + 1) = v20;
          v9 = v21;
          v21 = 0;
          *((_QWORD *)v8 + 2) = v9;
          v22 = v8;
          this = (WebKit::MediaSourcePrivateRemote *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
          if (v19)
          {
            WebKit::MediaSourcePrivateRemote::MessageReceiver::proxyWaitForTarget(v5, (uint64_t)&v16, (uint64_t *)&v22);
            goto LABEL_15;
          }
          goto LABEL_18;
        }
      }
      break;
  }
  return this;
}

void WebKit::MediaSourcePrivateRemote::MessageReceiver::~MessageReceiver(WebKit::MediaSourcePrivateRemote::MessageReceiver *this, void *a2)
{
  unsigned __int8 *v3;

  *(_QWORD *)this = off_1E34B0628;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned __int8 *v3;
  void *v4;

  *(_QWORD *)this = off_1E34B0628;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v4);
}

int64_t IPC::Decoder::decode<std::tuple<WebCore::SeekTarget>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _OWORD v9[3];
  char v10;

  result = IPC::Decoder::decode<WebCore::SeekTarget>(a1, (uint64_t)v9);
  if (v10)
  {
    v5 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_BYTE *)(a2 + 48) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

int64_t IPC::Decoder::decode<WebCore::SeekTarget>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::SeekTarget,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver18ProxyWaitForTargetEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENSA_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0660;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver18ProxyWaitForTargetEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENSA_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0660;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver18ProxyWaitForTargetEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENSA_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2851;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(uint64_t a1, char *a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  v4 = *((_DWORD *)a2 + 4);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_23;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (v4)
  {
    *v10 = 0;
    if (*((_DWORD *)a2 + 4) == 1)
    {
      v11 = *a2;
      v12 = *(_QWORD *)(a1 + 544);
      v13 = v12 + 1;
      v14 = *(_QWORD *)(a1 + 552);
      if (v14 >= v12 + 1)
      {
        v15 = *(char **)(a1 + 528);
        v16 = *(_QWORD *)(a1 + 544);
LABEL_7:
        bzero(&v15[v16], v12 - v16);
        *(_QWORD *)(a1 + 544) = v13;
        v17 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v12);
        *(_QWORD *)(a1 + 536) = v17 + 1;
        *v17 = v11;
        return;
      }
      v22 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v23 = v22;
        v22 *= 2;
      }
      while (v23 < v13);
      v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
      if (v24 != (char *)-1)
      {
        v15 = v24;
        memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
        v25 = *(void **)(a1 + 528);
        if (v25 != (void *)(a1 + 16))
          munmap(v25, *(_QWORD *)(a1 + 552));
        *(_QWORD *)(a1 + 528) = v15;
        *(_QWORD *)(a1 + 552) = v23;
        v16 = *(_QWORD *)(a1 + 544);
        goto LABEL_7;
      }
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x196F72374);
    }
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_23;
  }
  *v10 = 1;
  if (*((_DWORD *)a2 + 4))
    goto LABEL_22;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)a1, a2);
}

int64_t IPC::Decoder::decode<std::tuple<WTF::MediaTime>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver15ProxySeekToTimeEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0688;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver15ProxySeekToTimeEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0688;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver15ProxySeekToTimeEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2850;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(uint64_t a1, char *a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
    {
      __break(0xC471u);
      goto LABEL_22;
    }
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 1;
    return;
  }
  *v10 = 0;
  if (a2[1])
  {
    v11 = *a2;
    v12 = *(_QWORD *)(a1 + 544);
    v13 = v12 + 1;
    v14 = *(_QWORD *)(a1 + 552);
    if (v14 >= v12 + 1)
    {
      v15 = *(char **)(a1 + 528);
      v16 = *(_QWORD *)(a1 + 544);
LABEL_7:
      bzero(&v15[v16], v12 - v16);
      *(_QWORD *)(a1 + 544) = v13;
      v17 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v12);
      *(_QWORD *)(a1 + 536) = v17 + 1;
      *v17 = v11;
      return;
    }
    v22 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v13);
    v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (v24 != (char *)-1)
    {
      v15 = v24;
      memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v25 = *(void **)(a1 + 528);
      if (v25 != (void *)(a1 + 16))
        munmap(v25, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v15;
      *(_QWORD *)(a1 + 552) = v23;
      v16 = *(_QWORD *)(a1 + 544);
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(0xC471u);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver30MediaSourcePrivateShuttingDownEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B06B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver30MediaSourcePrivateShuttingDownEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B06B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver30MediaSourcePrivateShuttingDownEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2849;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WebPushD::MockPushServiceConnection *WebPushD::MockPushServiceConnection::MockPushServiceConnection(WebPushD::MockPushServiceConnection *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF *v6;
  _BYTE v8[3];
  WTF *v9;
  uint64_t v10;

  *((_QWORD *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = off_1E34B06D8;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  qmemcpy(v8, "abc", sizeof(v8));
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v9, v8, (WTF *)3);
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v9);
    v5 = v9;
    if (v9)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      WTF::fastFree(v5, v4);
    }
  }
  else
  {
    v6 = (WTF *)*((_QWORD *)this + 3);
    if (v6)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v6, v2);
    }
    *((_QWORD *)this + 3) = v9;
    *((_QWORD *)this + 4) = v10;
  }
  return this;
}

void sub_196F728B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  WebPushD::PushServiceConnection *v12;
  uint64_t v13;
  void *v15;
  void *v16;
  void *v17;

  if (a11)
    WTF::fastFree(a11, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12 + 128, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12 + 112, v15);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12 + 96, v16);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13, v17);
  WebPushD::PushServiceConnection::~PushServiceConnection(v12);
  _Unwind_Resume(a1);
}

void WebPushD::MockPushServiceConnection::~MockPushServiceConnection(WebPushD::MockPushServiceConnection *this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 112, v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, v4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v5);
  WebPushD::PushServiceConnection::~PushServiceConnection(this);
}

{
  WTF *v2;
  void *v3;

  WebPushD::MockPushServiceConnection::~MockPushServiceConnection(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebPushD::MockPushServiceConnection::generateClientKeys@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  WTF::base64Decode();
  if (v6)
  {
    WTF::base64Decode();
    result = WTF::base64Decode();
    *a1 = v4;
    a1[1] = v5;
    a1[2] = v4;
    a1[3] = v5;
    a1[4] = v4;
    a1[5] = v5;
  }
  else
  {
    result = (uint64_t)std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_196F72A4C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  WTF *v13;
  WTF *v14;

  if (a13 && a10)
    WTF::fastFree(a10, a2);
  if (v14)
    WTF::fastFree(v14, a2);
  if (v13)
    WTF::fastFree(v13, a2);
  _Unwind_Resume(exception_object);
}

void sub_196F72ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
  {
    if (a10)
      JUMPOUT(0x196F72AB0);
  }
  JUMPOUT(0x196F72AB4);
}

id WebPushD::MockPushServiceConnection::subscribe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  id result;
  void *v8;
  uint64_t v9;
  void *__s2;
  unsigned int __n;
  char __n_4;

  WTF::base64Decode();
  if (__n_4)
  {
    if (*(_DWORD *)(a3 + 12) == __n && !memcmp(*(const void **)a3, __s2, __n))
    {
      v9 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("WebPush"), -1, 0);
      v6 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 16))(v6, 0, v9);
    }
    else
    {
      v6 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)v6 + 16))(v6, CFSTR("https://webkit.org/push"), 0);
    }
    result = (id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (__s2)
      return (id)WTF::fastFree((WTF *)__s2, v8);
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_196F72BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  WTF *v13;
  uint64_t v14;
  void *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v13)
    WTF::fastFree(v13, v16);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::MockPushServiceConnection::unsubscribe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_196F72C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebPushD::MockPushServiceConnection::setTopicLists(unsigned int *a1, uint64_t a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 20, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 24, a2 + 16);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 28, a2 + 32);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 32, a2 + 48);
}

unsigned int *WebPushD::MockPushServiceConnection::setEnabledTopics(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 80), a2);
}

unsigned int *WebPushD::MockPushServiceConnection::setIgnoredTopics(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 96), a2);
}

unsigned int *WebPushD::MockPushServiceConnection::setOpportunisticTopics(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 112), a2);
}

unsigned int *WebPushD::MockPushServiceConnection::setNonWakingTopics(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 128), a2);
}

uint64_t WebPushD::MockPushServiceConnection::setPublicTokenForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  else
    return WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 24, a2);
}

uint64_t WebPushD::MockPushServiceConnection::enabledTopics@<X0>(WebPushD::MockPushServiceConnection *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 80);
}

uint64_t WebPushD::MockPushServiceConnection::ignoredTopics@<X0>(WebPushD::MockPushServiceConnection *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 96);
}

uint64_t WebPushD::MockPushServiceConnection::opportunisticTopics@<X0>(WebPushD::MockPushServiceConnection *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 112);
}

uint64_t WebPushD::MockPushServiceConnection::nonWakingTopics@<X0>(WebPushD::MockPushServiceConnection *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 128);
}

void WebKit::NearFieldLibrary(WebKit *this)
{
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit16NearFieldLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (WebKit::NearFieldLibrary(BOOL)::once != -1)
    dispatch_once(&WebKit::NearFieldLibrary(BOOL)::once, block);
}

uint64_t ___ZN6WebKit16NearFieldLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NearField.framework/NearField", 2);
  WebKit::NearFieldLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initNFReaderSession(WebKit *this)
{
  if (_MergedGlobals_50 != -1)
    dispatch_once(&_MergedGlobals_50, &__block_literal_global_6_1);
  return qword_1ECE720B8;
}

uint64_t WebKit::initNFHardwareManager(WebKit *this)
{
  if (qword_1ECE720C0 != -1)
    dispatch_once(&qword_1ECE720C0, &__block_literal_global_8_1);
  return qword_1ECE720C8;
}

uint64_t ___ZN6WebKitL19initNFReaderSessionEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::NearFieldLibrary(a1);
  result = (uint64_t)objc_getClass("NFReaderSession");
  qword_1ECE720B8 = result;
  if (result)
  {
    WebKit::getNFReaderSessionClass[0] = WebKit::NFReaderSessionFunction;
  }
  else
  {
    result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NFReaderSessionFunction(WebKit *this)
{
  return qword_1ECE720B8;
}

uint64_t ___ZN6WebKitL21initNFHardwareManagerEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::NearFieldLibrary(a1);
  result = (uint64_t)objc_getClass("NFHardwareManager");
  qword_1ECE720C8 = result;
  if (result)
  {
    WebKit::getNFHardwareManagerClass = WebKit::NFHardwareManagerFunction;
  }
  else
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NFHardwareManagerFunction(WebKit *this)
{
  return qword_1ECE720C8;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  _BYTE v22[3776];
  unsigned __int8 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebKit::NetworkResourceLoadParameters>>(v22, a2, (uint64_t)a3);
  v11 = v23;
  if (v23)
  {
    v12 = *a3;
    *a3 = 0;
    v19 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34B0B30;
    v13[1] = v19;
    v14 = v20[0];
    v20[0] = 0;
    v13[2] = v14;
    v21 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    if (!v23)
      __break(1u);
    v15 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v15 + a5);
    a5(v15, v22, &v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    if (v23)
      WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v22, v16);
  }
  return v11 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t, _QWORD **), uint64_t a6)
{
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  IPC::Encoder *v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;

  v11 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  v13 = v12;
  if (v12)
  {
    v14 = v11;
    v15 = *a3;
    *a3 = 0;
    v21 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34B0B58;
    v16[1] = v21;
    v17 = v22[0];
    v22[0] = 0;
    v16[2] = v17;
    v23 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v18 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v18 + a5);
    a5(v18, v14, &v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v13 != 0;
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookiesForDOM,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IncludeSecureCookies,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::String,BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _QWORD, _QWORD, unint64_t, BOOL, __int16, WTF::StringImpl **), uint64_t a6)
{
  unsigned int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int16 v16;
  unsigned __int8 v17;
  unsigned __int16 v18;
  int v19;
  uint64_t result;
  int v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  _QWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int16 v42;
  unint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  __int128 v46;
  __int16 v47;
  char v48;
  WTF::StringImpl *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;
  char v61;
  WTF::StringImpl *v62;
  _OWORD v63[2];
  char v64;
  __int128 v65;
  char v66;

  IPC::Decoder::decode<WTF::URL>(a2, &v58);
  if (!v61)
    goto LABEL_20;
  v12 = IPC::Decoder::decode<WebCore::SameSiteInfo>(a2);
  if (HIBYTE(v12) && (v14 = v12, IPC::Decoder::decode<WTF::URL>(a2, &v62), v64))
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v65);
    if (v66
      && (v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2),
          (_BYTE)v13)
      && (v43 = v15, v16 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a2), v16 > 0xFFu)
      && (v17 = v16, v18 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a2), v18 > 0xFFu)
      && (LOBYTE(v19) = v18,
          result = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a2),
          (unsigned __int16)result > 0xFFu))
    {
      if (!v61 || !v64 || !v66)
      {
        __break(1u);
        return result;
      }
      v39 = v58;
      v22 = v17;
      v19 = v19;
      v58 = 0;
      v21 = result;
      v44 = v39;
      v45 = v59;
      v46 = v60;
      LODWORD(v59) = v59 & 0xFFFFFFFE;
      v47 = v14;
      v48 = BYTE2(v14);
      v40 = v62;
      v62 = 0;
      v49 = v40;
      v50 = v63[0];
      v51 = v63[1];
      LODWORD(v63[0]) &= ~1u;
      v52 = v65;
      v53 = v43;
      v54 = v22;
      v55 = v19;
      v23 = 1;
      v56 = result;
    }
    else
    {
      v21 = 0;
      v19 = 0;
      v22 = 0;
      v23 = 0;
      LOBYTE(v44) = 0;
    }
    v57 = v23;
    if (v64)
    {
      v24 = v62;
      v62 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v13);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
  }
  else
  {
    v21 = 0;
    v19 = 0;
    v22 = 0;
    v23 = 0;
    LOBYTE(v44) = 0;
    v57 = 0;
  }
  if (v61)
  {
    v25 = v58;
    v58 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 != 2)
      {
        *(_DWORD *)v25 -= 2;
        goto LABEL_19;
      }
      WTF::StringImpl::destroy(v25, v13);
      if (v23)
        goto LABEL_23;
LABEL_20:
      v26 = *a2;
      v27 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (result)
      {
        if (v27)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
        return 0;
      }
      return result;
    }
  }
LABEL_19:
  if (!v23)
    goto LABEL_20;
LABEL_23:
  v28 = *a3;
  *a3 = 0;
  v62 = v28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v63, a1);
  v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v29 = off_1E34B0B80;
  *((_QWORD *)v29 + 1) = v62;
  v30 = *(_QWORD *)&v63[0];
  v62 = 0;
  *(_QWORD *)&v63[0] = 0;
  *((_QWORD *)v29 + 2) = v30;
  v58 = v29;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v63);
  v32 = v62;
  v62 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v33, v34);
  }
  v35 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _QWORD, _QWORD, unint64_t, BOOL, __int16, WTF::StringImpl **))(*v35 + a5);
  HIBYTE(v42) = v21 != 0;
  LOBYTE(v42) = v19 != 0;
  a5(v35, &v44, &v47, &v49, v52, *((_QWORD *)&v52 + 1), v43, v22 != 0, v42, &v58);
  v37 = v58;
  v58 = 0;
  if (v37)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v37 + 8))(v37);
  if (v57)
  {
    v38 = v49;
    v49 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v36);
      else
        *(_DWORD *)v38 -= 2;
    }
    v41 = v44;
    v44 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v36);
      else
        *(_DWORD *)v41 -= 2;
    }
  }
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookiesEnabledSync,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, uint64_t (*a5)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, uint64_t), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _BOOL8 result;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _BYTE v21[128];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>>((uint64_t)v21, a2);
  v12 = v22;
  if (!v22)
    goto LABEL_5;
  v13 = *a3;
  *a3 = 0;
  v18 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E34B0BA8;
  v14[1] = v18;
  v15 = v19;
  v19 = 0;
  v14[2] = v15;
  v20 = v14;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v22)
  {
    IPC::callMemberFunction<WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(BOOL)> &&),std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>,void ()(BOOL)>(a4, a5, a6, (uint64_t)v21, (uint64_t)&v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
LABEL_5:
    std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21, v11);
    return v12 != 0;
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookieRequestHeaderFieldValue,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IncludeSecureCookies,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::String,BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _BYTE *, _QWORD, _QWORD, BOOL, __int16, WTF::StringImpl **), uint64_t a6)
{
  unsigned int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned __int16 v15;
  unsigned __int8 v16;
  unsigned __int16 v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  void *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  _QWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  __int16 v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  __int16 v45;
  char v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  char v54;
  char v55;
  char v56;
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;
  char v60;
  _BYTE v61[24];
  __int128 v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  char v68;

  IPC::Decoder::decode<WTF::URL>(a2, &v57);
  if (!v60)
    goto LABEL_17;
  v12 = IPC::Decoder::decode<WebCore::SameSiteInfo>(a2);
  if (HIBYTE(v12) && (v14 = v12, IPC::Decoder::decode<WTF::URL>(a2, v61), v63))
  {
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)&v64);
    if (v66)
    {
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v67);
      if (v68
        && (v15 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a2), v15 > 0xFFu)
        && (v16 = v15, v17 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a2), v17 > 0xFFu)
        && (LOBYTE(v18) = v17,
            result = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a2),
            (unsigned __int16)result > 0xFFu))
      {
        if (!v60 || !v63 || !v66 || !v68)
        {
          __break(1u);
          return result;
        }
        v38 = v57;
        v21 = v16;
        v18 = v18;
        v57 = 0;
        v20 = result;
        v42 = v38;
        v43 = v58;
        v44 = v59;
        LODWORD(v58) = v58 & 0xFFFFFFFE;
        v45 = v14;
        v46 = BYTE2(v14);
        v39 = *(WTF::StringImpl **)v61;
        *(_QWORD *)v61 = 0;
        v47 = v39;
        v48 = *(_OWORD *)&v61[8];
        v49 = v62;
        *(_DWORD *)&v61[8] &= ~1u;
        v51 = v65;
        v50 = v64;
        v52 = v67;
        v53 = v21;
        v54 = v18;
        v22 = 1;
        v55 = result;
      }
      else
      {
        v20 = 0;
        v18 = 0;
        v21 = 0;
        v22 = 0;
        LOBYTE(v42) = 0;
      }
      v56 = v22;
    }
    else
    {
      v20 = 0;
      v18 = 0;
      v21 = 0;
      v22 = 0;
      LOBYTE(v42) = 0;
      v56 = 0;
    }
    if (v63)
    {
      v37 = *(WTF::StringImpl **)v61;
      *(_QWORD *)v61 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v13);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
  }
  else
  {
    v20 = 0;
    v18 = 0;
    v21 = 0;
    v22 = 0;
    LOBYTE(v42) = 0;
    v56 = 0;
  }
  if (v60)
  {
    v23 = v57;
    v57 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 != 2)
      {
        *(_DWORD *)v23 -= 2;
        goto LABEL_16;
      }
      WTF::StringImpl::destroy(v23, v13);
      if (v22)
        goto LABEL_20;
LABEL_17:
      v24 = *a2;
      v25 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (result)
      {
        if (v25)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v24);
        return 0;
      }
      return result;
    }
  }
LABEL_16:
  if (!v22)
    goto LABEL_17;
LABEL_20:
  v26 = *a3;
  *a3 = 0;
  *(_QWORD *)v61 = v26;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v61[8], a1);
  v27 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v27 = off_1E34B0BD0;
  *((_QWORD *)v27 + 1) = *(_QWORD *)v61;
  v28 = *(_QWORD *)&v61[8];
  *(_QWORD *)v61 = 0;
  *(_QWORD *)&v61[8] = 0;
  *((_QWORD *)v27 + 2) = v28;
  v57 = v27;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v61[8]);
  v30 = *(IPC::Encoder **)v61;
  *(_QWORD *)v61 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
  v33 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _BYTE *, _QWORD, _QWORD, BOOL, __int16, WTF::StringImpl **))(*v33 + a5);
  *(_OWORD *)v61 = v50;
  *(_QWORD *)&v61[16] = v51;
  HIBYTE(v41) = v20 != 0;
  LOBYTE(v41) = v18 != 0;
  a5(v33, &v42, &v45, &v47, v61, v52, *((_QWORD *)&v52 + 1), v21 != 0, v41, &v57);
  v35 = v57;
  v57 = 0;
  if (v35)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v35 + 8))(v35);
  if (v56)
  {
    v36 = v47;
    v47 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v34);
      else
        *(_DWORD *)v36 -= 2;
    }
    v40 = v42;
    v42 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v34);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetRawCookies,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _BYTE *, _QWORD, _QWORD, BOOL, BOOL, WTF::StringImpl **), uint64_t a6)
{
  unsigned int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned __int16 v15;
  unsigned __int8 v16;
  uint64_t result;
  int v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  void *v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  _QWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  char v43;
  WTF::StringImpl *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  char v51;
  char v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  char v56;
  _BYTE v57[24];
  __int128 v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  char v64;

  IPC::Decoder::decode<WTF::URL>(a2, &v53);
  if (!v56)
    goto LABEL_16;
  v12 = IPC::Decoder::decode<WebCore::SameSiteInfo>(a2);
  if (HIBYTE(v12) && (v14 = v12, IPC::Decoder::decode<WTF::URL>(a2, v57), v59))
  {
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)&v60);
    if (v62)
    {
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v63);
      if (v64
        && (v15 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a2), v15 > 0xFFu)
        && (v16 = v15,
            result = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a2),
            (unsigned __int16)result > 0xFFu))
      {
        if (!v56 || !v59 || !v62 || !v64)
        {
          __break(1u);
          return result;
        }
        v36 = v53;
        v19 = v16;
        v18 = result;
        v53 = 0;
        v39 = v36;
        v40 = v54;
        v41 = v55;
        LODWORD(v54) = v54 & 0xFFFFFFFE;
        v42 = v14;
        v43 = BYTE2(v14);
        v37 = *(WTF::StringImpl **)v57;
        *(_QWORD *)v57 = 0;
        v44 = v37;
        v45 = *(_OWORD *)&v57[8];
        v46 = v58;
        *(_DWORD *)&v57[8] &= ~1u;
        v48 = v61;
        v47 = v60;
        v49 = v63;
        v50 = v19;
        v20 = 1;
        v51 = result;
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        LOBYTE(v39) = 0;
      }
      v52 = v20;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      LOBYTE(v39) = 0;
      v52 = 0;
    }
    if (v59)
    {
      v35 = *(WTF::StringImpl **)v57;
      *(_QWORD *)v57 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v13);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    LOBYTE(v39) = 0;
    v52 = 0;
  }
  if (v56)
  {
    v21 = v53;
    v53 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 != 2)
      {
        *(_DWORD *)v21 -= 2;
        goto LABEL_15;
      }
      WTF::StringImpl::destroy(v21, v13);
      if (v20)
        goto LABEL_19;
LABEL_16:
      v22 = *a2;
      v23 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (result)
      {
        if (v23)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
        return 0;
      }
      return result;
    }
  }
LABEL_15:
  if (!v20)
    goto LABEL_16;
LABEL_19:
  v24 = *a3;
  *a3 = 0;
  *(_QWORD *)v57 = v24;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v57[8], a1);
  v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v25 = off_1E34B0BF8;
  *((_QWORD *)v25 + 1) = *(_QWORD *)v57;
  v26 = *(_QWORD *)&v57[8];
  *(_OWORD *)v57 = 0uLL;
  *((_QWORD *)v25 + 2) = v26;
  v53 = v25;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v57[8]);
  v28 = *(IPC::Encoder **)v57;
  *(_QWORD *)v57 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  v31 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _BYTE *, _QWORD, _QWORD, BOOL, BOOL, WTF::StringImpl **))(*v31 + a5);
  *(_OWORD *)v57 = v47;
  *(_QWORD *)&v57[16] = v48;
  a5(v31, &v39, &v42, &v44, v57, v49, *((_QWORD *)&v49 + 1), v19 != 0, v18 != 0, &v53);
  v33 = v53;
  v53 = 0;
  if (v33)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 8))(v33);
  if (v52)
  {
    v34 = v44;
    v44 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v32);
      else
        *(_DWORD *)v34 -= 2;
    }
    v38 = v39;
    v39 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v32);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::BlobType,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::String)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23[5];
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::URL>>(a2, v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B0C48;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23[0];
      v23[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::BlobSize,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(unsigned long long)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23[5];
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::URL>>(a2, v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B0C70;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23[0];
      v23[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetNetworkLoadInformationResponse,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ResourceResponse const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t, _QWORD **), uint64_t a6)
{
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  IPC::Encoder *v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;

  v11 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  v13 = v12;
  if (v12)
  {
    v14 = v11;
    v15 = *a3;
    *a3 = 0;
    v21 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34B0C98;
    v16[1] = v21;
    v17 = v22[0];
    v22[0] = 0;
    v16[2] = v17;
    v23 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v18 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v18 + a5);
    a5(v18, v14, &v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v13 != 0;
}

void WebKit::NetworkConnectionToWebProcess::getNetworkLoadInformationResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  _BYTE v9[138];
  char v10;
  CFTypeRef cf;
  char v12;

  v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 144), a2);
  if (v4)
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4 + 200);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v9);
    cf = 0;
    v12 = 0;
    v10 = v10 & 0xF1 | 4;
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v9, v7);
  }
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetNetworkLoadIntermediateInformation,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t, _QWORD **), uint64_t a6)
{
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  IPC::Encoder *v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;

  v11 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  v13 = v12;
  if (v12)
  {
    v14 = v11;
    v15 = *a3;
    *a3 = 0;
    v21 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34B0CC0;
    v16[1] = v21;
    v17 = v22[0];
    v22[0] = 0;
    v16[2] = v17;
    v23 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v18 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v18 + a5);
    a5(v18, v14, &v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v13 != 0;
}

uint64_t WebKit::NetworkConnectionToWebProcess::getNetworkLoadIntermediateInformation(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  _QWORD v9[2];

  v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 144), a2);
  if (v4)
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4 + 584);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v8);
  }
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::TakeNetworkLoadInformationMetrics,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::NetworkLoadMetrics const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t, _QWORD **), uint64_t a6)
{
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  IPC::Encoder *v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;

  v11 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  v13 = v12;
  if (v12)
  {
    v14 = v11;
    v15 = *a3;
    *a3 = 0;
    v21 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34B0CE8;
    v16[1] = v21;
    v17 = v22[0];
    v22[0] = 0;
    v16[2] = v17;
    v23 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v18 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v18 + a5);
    a5(v18, v14, &v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v13 != 0;
}

void WebKit::NetworkConnectionToWebProcess::takeNetworkLoadInformationMetrics(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v13;
  WTF::StringImpl *v14;
  _QWORD v15[11];
  WTF::StringImpl *v16;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v17;
  uint64_t v18;

  v18 = a2;
  v5 = (uint64_t *)(a1 + 144);
  v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 144), &v18);
  v7 = *(_QWORD **)(a1 + 144);
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  if (v7 == v6)
    goto LABEL_13;
  v8 = (_QWORD *)v6[1];
  v6[1] = 0;
  if (*v5)
  {
    v9 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
    if ((_QWORD *)v9 == v6)
      goto LABEL_11;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v9 = 0;
  }
  if ((_QWORD *)v9 != v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v5, v6);
LABEL_11:
  if (v8)
  {
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v8 + 57);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v15[0] = 0;
    std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v15, v8);
    return;
  }
LABEL_13:
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v15);
  v11 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v13 = v17;
  v17 = 0;
  if (v13)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v13);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
}

void WTF::VectorDestructor<true,WebCore::NetworkTransactionInformation>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v4;
  WTF::StringImpl *v5;
  const void *v6;
  const void *v7;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)v3 + 73);
      *((_QWORD *)v3 + 73) = 0;
      if (v4)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
      v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 69);
      *((_QWORD *)v3 + 69) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = (const void *)*((_QWORD *)v3 + 56);
      *((_QWORD *)v3 + 56) = 0;
      if (v6)
        CFRelease(v6);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WTF::StringImpl *)((char *)v3 + 208), a2);
      v7 = (const void *)*((_QWORD *)v3 + 25);
      *((_QWORD *)v3 + 25) = 0;
      if (v7)
        CFRelease(v7);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WTF::StringImpl *)((char *)v3 + 8));
      v3 = (WTF::StringImpl *)((char *)v3 + 592);
    }
    while (v3 != a2);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *a2 = -1;
  v5 = (_QWORD *)a2[1];
  v3 = a2 + 1;
  v4 = v5;
  *v3 = 0;
  if (v5)
    std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v3, v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (_QWORD *)(v6 + 8);
    do
    {
      v14 = *(v13 - 1);
      if (v14 != -1)
      {
        if (v14)
        {
          v15 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(a1, v13 - 1);
          v16 = (_QWORD *)v15[1];
          v15[1] = 0;
          if (v16)
            std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)(v15 + 1), v16);
          *v15 = *(v13 - 1);
          v17 = (_QWORD *)*v13;
          *v13 = 0;
          v15[1] = v17;
          v10 = (_QWORD *)*v13;
          *v13 = 0;
          if (v10)
            std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v13, v10);
          if (v13 - 1 == a3)
            v11 = v15;
        }
        else
        {
          v10 = (_QWORD *)*v13;
          *v13 = 0;
          if (v10)
            std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v13, v10);
        }
      }
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 16 * v9;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == *a2)
    return v2 + 16 * v7;
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v9;
    if (v8 == *a2)
      return v2 + 16 * v7;
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

void std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100](uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v4;
  WTF::StringImpl *v5;
  const void *v6;
  const void *v7;
  WTF *v8;
  void *v9;

  if (a2)
  {
    WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 73), a2);
    v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a2[72];
    a2[72] = 0;
    if (v4)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
    v5 = (WTF::StringImpl *)a2[68];
    a2[68] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (const void *)a2[55];
    a2[55] = 0;
    if (v6)
      CFRelease(v6);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a2 + 25), v3);
    v7 = (const void *)a2[24];
    a2[24] = 0;
    if (v7)
      CFRelease(v7);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)a2);
    WTF::fastFree(v8, v9);
  }
}

uint64_t std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_DWORD *)(a1 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(_QWORD *)(a1 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = 0;
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 40) = v5;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (result)
  {
    v3 = result;
    *(_BYTE *)result = *(_BYTE *)a2;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v4;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v5;
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 33);
    *(_BYTE *)(result + 56) = 0;
    v8 = result + 56;
    *(_OWORD *)(v8 - 23) = v7;
    *(_OWORD *)(v8 - 32) = v6;
    *(_BYTE *)(v8 + 128) = 0;
    if (*(_BYTE *)(a2 + 184))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v8, a2 + 56);
      *(_BYTE *)(v3 + 184) = 1;
    }
    v9 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v3 + 208) = v9;
    *(_BYTE *)(v3 + 224) = 0;
    *(_BYTE *)(v3 + 232) = 0;
    if (*(_BYTE *)(a2 + 232))
    {
      v10 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a2 + 224) = 0;
      *(_QWORD *)(v3 + 224) = v10;
      *(_BYTE *)(v3 + 232) = 1;
    }
    v11 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(v3 + 240) = v11;
    v12 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(v3 + 248) = v12;
    v13 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(v3 + 256) = v13;
    v14 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(v3 + 264) = v14;
    *(_BYTE *)(v3 + 272) = 0;
    *(_BYTE *)(v3 + 296) = 0;
    if (*(_BYTE *)(a2 + 296))
    {
      v15 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a2 + 272) = 0;
      *(_QWORD *)(v3 + 272) = v15;
      v16 = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a2 + 280) = 0;
      *(_QWORD *)(v3 + 280) = v16;
      v17 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a2 + 288) = 0;
      *(_QWORD *)(v3 + 288) = v17;
      *(_BYTE *)(v3 + 296) = 1;
    }
    v18 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(v3 + 304) = v18;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v3 = result;
    v4 = *(_BYTE *)(a2 + 2);
    *(_WORD *)result = *(_WORD *)a2;
    *(_BYTE *)(result + 2) = v4;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      v5 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(result + 8) = v5;
      *(_BYTE *)(result + 16) = 1;
    }
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(result + 24) = v6;
      *(_BYTE *)(result + 32) = 1;
    }
    *(_BYTE *)(result + 40) = 0;
    *(_BYTE *)(result + 48) = 0;
    if (*(_BYTE *)(a2 + 48))
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(result + 40) = v7;
      *(_BYTE *)(result + 48) = 1;
    }
    std::__optional_move_base<WebCore::ApplePayPaymentOrderDetails,false>::__optional_move_base[abi:sn180100](result + 56, (uint64_t *)(a2 + 56));
    *(_BYTE *)(v3 + 96) = 0;
    *(_BYTE *)(v3 + 120) = 0;
    if (*(_BYTE *)(a2 + 120))
    {
      v8 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(v3 + 96) = v8;
      v9 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(v3 + 104) = v9;
      v10 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(v3 + 112) = v10;
      *(_BYTE *)(v3 + 120) = 1;
    }
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::NetworkResourceLoadParameters>>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  IPC::ArgumentCoder<std::tuple<WebKit::NetworkResourceLoadParameters>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!a1[3776])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v7 = a2[3];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::NetworkResourceLoadParameters>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  int v5;
  _BYTE v6[3776];
  unsigned __int8 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::NetworkResourceLoadParameters>((uint64_t)v6, a2, a3);
  if (v7)
  {
    WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)a1, (uint64_t)v6);
    v5 = v7;
    a1[3776] = 1;
    if (v5)
      WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v6, v4);
  }
  else
  {
    *a1 = 0;
    a1[3776] = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess10SendH2PingEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B07B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess10SendH2PingEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B07B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess10SendH2PingEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2873;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *std::unique_ptr<IPC::Encoder>::reset[abi:sn180100](IPC::Encoder **a1, IPC::Encoder *a2)
{
  IPC::Encoder *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IPC::Encoder::~Encoder(result, a2);
    return (IPC::Encoder *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22IsResourceLoadFinishedEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B07D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22IsResourceLoadFinishedEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B07D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22IsResourceLoadFinishedEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2865;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  char v5;
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13[5];
  char v14;
  WTF::StringImpl *v15[5];
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  char v21;

  IPC::Decoder::decode<WTF::URL>(a2, v13);
  if (!v14)
    goto LABEL_25;
  IPC::Decoder::decode<WTF::URL>(a2, v15);
  if (v16)
  {
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)&v17);
    if (!v19)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 128) = 0;
      goto LABEL_12;
    }
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v20);
    v5 = v21;
    if (v21)
    {
      ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a2);
      if (ShouldRelaxThirdPartyCookie > 0xFFu)
      {
        if (v14 && v16 && v19 && v21)
        {
          v7 = ShouldRelaxThirdPartyCookie;
          WTF::URL::URL(a1, (uint64_t *)v13);
          WTF::URL::URL(a1 + 40, (uint64_t *)v15);
          *(_OWORD *)(a1 + 80) = v17;
          *(_QWORD *)(a1 + 96) = v18;
          *(_OWORD *)(a1 + 104) = v20;
          *(_BYTE *)(a1 + 120) = v7;
          v5 = 1;
LABEL_11:
          *(_BYTE *)(a1 + 128) = v5;
LABEL_12:
          if (v16)
          {
            v8 = v15[0];
            v15[0] = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
                WTF::StringImpl::destroy(v8, v4);
              else
                *(_DWORD *)v8 -= 2;
            }
          }
          goto LABEL_16;
        }
        __break(1u);
LABEL_25:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 128) = 0;
        goto LABEL_20;
      }
      v5 = 0;
    }
    *(_BYTE *)a1 = 0;
    goto LABEL_11;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 128) = 0;
LABEL_16:
  if (v14)
  {
    v9 = v13[0];
    v13[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v4);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
LABEL_20:
  if (!*(_BYTE *)(a1 + 128))
  {
    v10 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v11)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
    }
  }
}

uint64_t IPC::callMemberFunction<WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(BOOL)> &&),std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>,void ()(BOOL)>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  v6 = a2;
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, uint64_t))(*v7 + a2);
  v10 = *(_OWORD *)(a4 + 80);
  v8 = *(_QWORD *)(a4 + 104);
  v11 = *(_QWORD *)(a4 + 96);
  return v6(v7, a4, a4 + 40, &v10, v8, *(_QWORD *)(a4 + 112), *(unsigned __int8 *)(a4 + 120), a5);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess14CookiesEnabledEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess14CookiesEnabledEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess14CookiesEnabledEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2857;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WTF::URL,WTF::String>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::String>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];
  char v7;

  IPC::Decoder::decode<WTF::URL>(a1, v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::String>,void>::decode<IPC::Decoder,WTF::URL>(a1, (uint64_t)v6, (uint64_t)a2);
    if (v7)
    {
      v5 = v6[0];
      v6[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::String>,void>::decode<IPC::Decoder,WTF::URL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  char v7;

  IPC::Decoder::decode<WTF::String>(a1, &v6);
  v5 = v7;
  if (!v7)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 40))
  {
    WTF::URL::URL(a3, (uint64_t *)a2);
    *(_QWORD *)(a3 + 40) = v6;
    v5 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 48) = v5;
    return;
  }
  __break(1u);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess12DeleteCookieEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess12DeleteCookieEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess12DeleteCookieEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2860;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess18CookiesForDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONSC_21CookieStoreGetOptionsEONS_17CompletionHandlerIFvONSH_INS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS15_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess18CookiesForDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONSC_21CookieStoreGetOptionsEONS_17CompletionHandlerIFvONSH_INS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS15_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess18CookiesForDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONSC_21CookieStoreGetOptionsEONS_17CompletionHandlerIFvONSH_INS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS15_EE4callES15_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2858;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v20 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(_QWORD *)(v5 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_17;
    v10 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v19 = *(void **)(v5 + 528);
    if (v19 != (void *)(v5 + 16))
      munmap(v19, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v18;
    v11 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v10 = *(char **)(v5 + 528);
    v11 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v5 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  if (v6)
  {
    *v12 = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
      goto LABEL_7;
    }
    result = (char *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_17:
    __break(0xC471u);
    return result;
  }
  *v12 = 0;
LABEL_7:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess21SetCookieFromDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_23ApplyTrackingPreventionEONSC_6CookieENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess21SetCookieFromDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_23ApplyTrackingPreventionEONSC_6CookieENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess21SetCookieFromDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_23ApplyTrackingPreventionEONSC_6CookieENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2874;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

void IPC::Decoder::decode<WebCore::BlobPart>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::BlobPart,void>::decode(a2, a1);
  if (!a1[48])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 40) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(v4, v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x196F75DF0);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_QWORD *)result + 48 * *(unsigned int *)(result + 12);
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::BlobPart>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::BlobPart>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (result != a2)
  {
    v10 = v3;
    v11 = v4;
    v7 = result;
    do
    {
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 40) = -1;
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(a3, v7);
      v8 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v8 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E34B0890[v8])(&v9, v7);
      *(_DWORD *)(v7 + 40) = -1;
      v7 += 48;
      a3 += 48;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(unsigned int **)a1;
  if ((_DWORD)v3)
  {
    v6 = 48 * v3;
    do
    {
      v7 = v4[10];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E34B0890[v7])(&v8, v4);
      v4[10] = -1;
      v4 += 12;
      v6 -= 48;
    }
    while (v6);
    v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10[5];
  char v11;
  char v12;
  _BYTE v13[24];
  int v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WTF::URL>(a2, v10);
  if (v11)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(a2, (uint64_t)v13);
    if (v16)
    {
      if (!v11)
        __break(1u);
      WTF::URL::URL(a1, (uint64_t *)v10);
      *(_BYTE *)(v6 + 40) = 0;
      result = (WTF::StringImpl *)(v6 + 40);
      *((_BYTE *)result + 32) = 0;
      if (v15)
      {
        *(_DWORD *)(a1 + 64) = -1;
        result = (WTF::StringImpl *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)result, (uint64_t)v13);
        *(_BYTE *)(a1 + 72) = 1;
        v7 = v15;
        *(_BYTE *)(a1 + 80) = 1;
        if (v16 && v7 && v14 != -1)
          result = (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E34B0790[v14])(&v12, v13);
      }
      else
      {
        *(_BYTE *)(a1 + 80) = 1;
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 80) = 0;
    }
    if (v11)
    {
      result = v10[0];
      v10[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 80) = 0;
  }
  if (!*(_BYTE *)(a1 + 80))
  {
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v9)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v3 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E34B0790[v3])(&v6, a1 + 40);
      *(_DWORD *)(a1 + 64) = -1;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38WriteBlobsToTemporaryFilesForIndexedDBEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvOSD_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B08B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38WriteBlobsToTemporaryFilesForIndexedDBEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvOSD_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B08B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38WriteBlobsToTemporaryFilesForIndexedDBEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvOSD_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2877;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<WebCore::ResourceLoadStatistics>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::ResourceLoadStatistics,void>::decode(a2, a1);
  if (!a1[200])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ResourceLoadStatistics>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::ResourceLoadStatistics::ResourceLoadStatistics(*(_QWORD *)a1 + 200 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 200 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x147AE15)
    {
      __break(0xC471u);
      JUMPOUT(0x196F76448);
    }
    v3 = *(uint64_t **)a1;
    v4 = (uint64_t *)(*(_QWORD *)a1 + 200 * *(unsigned int *)(a1 + 12));
    v5 = 200 * a2;
    v6 = WTF::fastMalloc((WTF *)(200 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0xC8;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::ResourceLoadStatistics>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebCore::ResourceLoadStatistics>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WebCore::ResourceLoadStatistics::ResourceLoadStatistics(a3, v5);
      WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v5, v6);
      a3 += 200;
      v5 += 25;
    }
    while (v5 != a2);
  }
}

void WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  WebCore::ResourceLoadStatistics *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      v5 = (WebCore::ResourceLoadStatistics *)(*(_QWORD *)a1 + 200 * a2);
      v6 = 200 * v4 - 200 * a2;
      do
      {
        WebCore::ResourceLoadStatistics::~ResourceLoadStatistics(v5, (WTF::StringImpl *)a2);
        v5 = (WebCore::ResourceLoadStatistics *)(v7 + 200);
        v6 -= 200;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v8 = *(uint64_t **)a1;
    if (a2)
    {
      if (a2 >= 0x147AE15)
      {
        __break(0xC471u);
        return;
      }
      v9 = (WTF *)(200 * a2);
      v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0xC8;
      *(_QWORD *)a1 = v10;
      if ((uint64_t *)v10 != v8)
        WTF::VectorMover<false,WebCore::ResourceLoadStatistics>::move(v8, &v8[25 * v4], v10);
    }
    if (v8)
    {
      if (*(uint64_t **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v8, (void *)a2);
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29ResourceLoadStatisticsUpdatedEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_6VectorIN7WebCore22ResourceLoadStatisticsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B08D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess16HasStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSD_INS9_18PageIdentifierTypeESG_yEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0900;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess16HasStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSD_INS9_18PageIdentifierTypeESG_yEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0900;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess16HasStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSD_INS9_18PageIdentifierTypeESG_yEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2863;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20RequestStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSD_INS9_18PageIdentifierTypeESG_yEENSD_INS7_26WebPageProxyIdentifierTypeESG_yEENS9_18StorageAccessScopeEONS_17CompletionHandlerIFvNS9_26RequestStorageAccessResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0928;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20RequestStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSD_INS9_18PageIdentifierTypeESG_yEENSD_INS7_26WebPageProxyIdentifierTypeESG_yEENS9_18StorageAccessScopeEONS_17CompletionHandlerIFvNS9_26RequestStorageAccessResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0928;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20RequestStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSD_INS9_18PageIdentifierTypeESG_yEENSD_INS7_26WebPageProxyIdentifierTypeESG_yEENS9_18StorageAccessScopeEONS_17CompletionHandlerIFvNS9_26RequestStorageAccessResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2871;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::RequestStorageAccessResult,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35StorageAccessQuirkForTopFrameDomainEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0950;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35StorageAccessQuirkForTopFrameDomainEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0950;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35StorageAccessQuirkForTopFrameDomainEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2875;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  unsigned __int8 v27;

  IPC::Decoder::decode<WTF::String>(a2, &v22);
  if (!v23)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    goto LABEL_11;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v24);
  if (v25)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v26);
    if (!v27)
    {
      v13 = 0;
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 32) = 0;
      goto LABEL_18;
    }
    v6 = a2[1];
    v5 = (WTF::StringImpl *)*a2;
    v7 = a2[2] - *a2;
    if (v6 > v7)
    {
      v8 = (unsigned __int8 *)v5 + v7;
      a2[2] = (uint64_t)(v8 + 1);
      if (!v5)
      {
        v17 = v6;
        v18 = 0;
LABEL_33:
        v6 = 0;
        v5 = 0;
        *a2 = 0;
        a2[1] = 0;
        v20 = a2[3];
        if (v20)
        {
          if (v17)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
            v5 = (WTF::StringImpl *)*a2;
            v6 = a2[1];
          }
          else
          {
            v6 = 0;
            v5 = 0;
          }
        }
LABEL_34:
        *a2 = 0;
        a2[1] = 0;
        result = (WTF::StringImpl *)a2[3];
        if (result && v6)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v5);
        *(_BYTE *)a1 = 0;
        v21 = v27;
        *(_BYTE *)(a1 + 32) = 0;
        if (v21)
        {
          result = v26;
          v26 = 0;
          if (result)
          {
            if (*(_DWORD *)result != 2)
            {
              v13 = 0;
              *(_DWORD *)result -= 2;
              goto LABEL_18;
            }
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
        }
        v13 = 0;
        goto LABEL_18;
      }
      v9 = *v8;
      if (v9 >= 2)
        goto LABEL_34;
      v10 = v9 != 0;
      if (v23 && v25)
      {
        v11 = v22;
        v22 = 0;
        v12 = v24;
        v24 = 0;
        *(_QWORD *)a1 = v11;
        *(_QWORD *)(a1 + 8) = v12;
        *(_QWORD *)(a1 + 16) = v26;
        *(_BYTE *)(a1 + 24) = v10;
        v13 = 1;
        *(_BYTE *)(a1 + 32) = 1;
LABEL_18:
        if (v25)
        {
          result = v24;
          v24 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            else
              *(_DWORD *)result -= 2;
          }
        }
        goto LABEL_23;
      }
      __break(1u);
    }
    v17 = 0;
    v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = *a2;
        v17 = a2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_33;
  }
  v13 = 0;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
LABEL_23:
  if (v23)
  {
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v13)
          return result;
        goto LABEL_11;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v13)
    return result;
LABEL_11:
  v14 = *a2;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v14);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28EstablishSWContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore17RegistrableDomainENSt3__18optionalINSE_16ProcessQualifiedINS_4UUIDEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0978;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28EstablishSWContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore17RegistrableDomainENSt3__18optionalINSE_16ProcessQualifiedINS_4UUIDEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0978;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28EstablishSWContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore17RegistrableDomainENSt3__18optionalINSE_16ProcessQualifiedINS_4UUIDEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2861;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38EstablishSharedWorkerContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B09A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38EstablishSharedWorkerContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B09A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38EstablishSharedWorkerContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2862;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess17CreateRTCProviderEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B09C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess17CreateRTCProviderEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B09C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess17CreateRTCProviderEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2859;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>,void>::decode<IPC::Decoder,WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)v5, (uint64_t)a2);
  *a2 = 0;
  a2[32] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>,void>::decode<IPC::Decoder,WebCore::RTCDataChannelIdentifier>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  char v6;
  __int128 v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)&v8);
  v6 = v9;
  if (!v9)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v7 = v8;
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v7;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 32) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35ConnectToRTCDataChannelRemoteSourceEN6WebKit29NetworkConnectionToWebProcessES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B09F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35ConnectToRTCDataChannelRemoteSourceEN6WebKit29NetworkConnectionToWebProcessES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B09F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35ConnectToRTCDataChannelRemoteSourceEN6WebKit29NetworkConnectionToWebProcessES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  __int16 v9;
  IPC::Encoder *v10;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2856;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>((IPC::Encoder *)v4, (char *)&v9);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22TakeAllMessagesForPortEN6WebKit29NetworkConnectionToWebProcessES8_FvRKN7WebCore21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS9_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_yEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0A18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t)a1, a2, (uint64_t)v6);
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v9);
  if (v11)
  {
    if (*(_BYTE *)(a3 + 8))
    {
      v7 = v9;
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = v10;
      v9 = 0;
      v10 = 0;
      *(_QWORD *)(a1 + 16) = v8;
      *(_BYTE *)(a1 + 24) = 1;
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::LoadSchedulingMode>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::LoadSchedulingMode>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::LoadSchedulingMode>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  char v7;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = result, result = IPC::Decoder::decode<WebCore::LoadSchedulingMode>(a2), (unsigned __int16)result > 0xFFu))
  {
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = result;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v7;
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[56])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];
  char v7;

  IPC::Decoder::decode<WTF::URL>(a1, v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::URL>(a1, (uint64_t)v6, (uint64_t)a2);
    if (v7)
    {
      v5 = v6[0];
      v6[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[56] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::URL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  _QWORD v6[2];
  char v7;

  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6);
  v5 = v7;
  if (!v7)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 40))
  {
    WTF::URL::URL(a3, (uint64_t *)a2);
    *(_QWORD *)(a3 + 40) = v6[0];
    *(_QWORD *)(a3 + 48) = v6[1];
    v5 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 56) = v5;
    return;
  }
  __break(1u);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorSubscribeToPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0A40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorSubscribeToPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0A40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorSubscribeToPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2869;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a2 + 80);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*(_DWORD *)(a2 + 80) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)a2);
      return;
    }
  }
  else
  {
    *v5 = 1;
    if (!*(_DWORD *)(a2 + 80))
    {
      IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode(a1, (uint64_t *)a2);
      return;
    }
  }
  v6 = std::__throw_bad_variant_access[abi:sn180100]();
  std::__optional_destruct_base<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](v6);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(WTF **)(a1 + 40);
    if (v3)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35NavigatorUnsubscribeFromPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLERKNS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSC_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0A68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35NavigatorUnsubscribeFromPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLERKNS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSC_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0A68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35NavigatorUnsubscribeFromPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLERKNS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSC_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2870;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  char v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)a2);
      return;
    }
  }
  else
  {
    *v5 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      v6 = *(_BYTE *)a2;
      *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
      return;
    }
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28NavigatorGetPushSubscriptionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(v7);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28NavigatorGetPushSubscriptionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0A90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28NavigatorGetPushSubscriptionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0A90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28NavigatorGetPushSubscriptionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2868;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  IPC::Encoder *v7;

  v4 = *(_DWORD *)(a2 + 96);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*(_DWORD *)(a2 + 96) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)(a2 + 8));
      return;
    }
    goto LABEL_7;
  }
  *v5 = 1;
  if (*(_DWORD *)(a2 + 96))
  {
LABEL_7:
    v7 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_6;
  }
  v6 = a2 + 8;
  v7 = a1;
LABEL_6:
  IPC::ArgumentCoder<std::optional<WebCore::PushSubscriptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::PushSubscriptionData>>(v7, v6);
}

void IPC::ArgumentCoder<std::optional<WebCore::PushSubscriptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::PushSubscriptionData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 80);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 80))
    {
      IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorGetPushPermissionStateEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(v6);
    }
  }
  else
  {
    *v5 = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorGetPushPermissionStateEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0AB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorGetPushPermissionStateEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0AB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorGetPushPermissionStateEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2867;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29InitializeWebTransportSessionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_33WebTransportSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0AE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29InitializeWebTransportSessionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_33WebTransportSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0AE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29InitializeWebTransportSessionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_33WebTransportSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2864;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  v8 = IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1);
  if (a3)
  {
    *v8 = 1;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  }
  else
  {
    *v8 = 0;
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20LoadImageForDecodingEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore15ResourceRequestENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEmONS_17CompletionHandlerIFvONSt3__17variantIJNS9_13ResourceErrorENS_3RefINS9_22FragmentedSharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0B08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20LoadImageForDecodingEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore15ResourceRequestENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEmONS_17CompletionHandlerIFvONSt3__17variantIJNS9_13ResourceErrorENS_3RefINS9_22FragmentedSharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0B08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20LoadImageForDecodingEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore15ResourceRequestENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEmONS_17CompletionHandlerIFvONSt3__17variantIJNS9_13ResourceErrorENS_3RefINS9_22FragmentedSharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2866;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 80);
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v6;
  if ((_BYTE)v6)
  {
    if (v6 != 1)
      goto LABEL_7;
    if (*(_DWORD *)(a2 + 80) == 1)
    {
      IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::encode((IPC::Encoder *)v5, *(WebCore::FragmentedSharedBuffer **)a2);
      goto LABEL_7;
    }
LABEL_10:
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess22PerformSynchronousLoadEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvRKN7WebCore13ResourceErrorENSC_16ResourceResponseEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SG_SL_EED1Ev(v11);
  }
  if (*(_DWORD *)(a2 + 80))
    goto LABEL_10;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v5, (WebCore::ResourceError *)a2);
LABEL_7:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess22PerformSynchronousLoadEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvRKN7WebCore13ResourceErrorENSC_16ResourceResponseEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SG_SL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0B30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess22PerformSynchronousLoadEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvRKN7WebCore13ResourceErrorENSC_16ResourceResponseEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SG_SL_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0B30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess22PerformSynchronousLoadEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvRKN7WebCore13ResourceErrorENSC_16ResourceResponseEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SG_SL_EE4callESF_SG_SL_(uint64_t a1, WebCore::ResourceError *a2, WebCore::ResourceResponseBase *a3, uint64_t a4)
{
  return IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkResourceLoadParameters &&::UniqueRef<IPC::Encoder> &,WebKit::NetworkConnectionToWebProcess *,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&) WebKit::NetworkConnectionToWebProcess::*)::{lambda(Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad &&)#1}::operator()<WebCore::ResourceError const,WebCore::ResourceError const&,WebKit::NetworkResourceLoadParameters &&::FastMalloc>(a1 + 8, a2, a3, a4);
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkResourceLoadParameters &&::UniqueRef<IPC::Encoder> &,WebKit::NetworkConnectionToWebProcess *,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&) WebKit::NetworkConnectionToWebProcess::*)::{lambda(Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad &&)#1}::operator()<WebCore::ResourceError const,WebCore::ResourceError const&,WebKit::NetworkResourceLoadParameters &&::FastMalloc>(uint64_t a1, WebCore::ResourceError *a2, WebCore::ResourceResponseBase *a3, uint64_t a4)
{
  IPC::Encoder *v7;

  v7 = *(IPC::Encoder **)a1;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(*(IPC::Encoder **)a1, a2);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v7, a3);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)v7, *(const void **)a4, *(unsigned int *)(a4 + 12));
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 8), (uint64_t *)a1, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0B58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0B58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13CookiesForDOMEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSH_INSC_18PageIdentifierTypeESK_yEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_bEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0B80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13CookiesForDOMEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSH_INSC_18PageIdentifierTypeESK_yEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_bEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0B80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13CookiesForDOMEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSH_INSC_18PageIdentifierTypeESK_yEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJST_bEE4callEST_b(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v5, a2);
  *IPC::Encoder::grow(v5, 1uLL, 1) = a3;
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess18CookiesEnabledSyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0BA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess18CookiesEnabledSyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0BA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess18CookiesEnabledSyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess29CookieRequestHeaderFieldValueEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSX_bEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0BD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess29CookieRequestHeaderFieldValueEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSX_bEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0BD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess29CookieRequestHeaderFieldValueEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSX_bEE4callESX_b(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v5, a2);
  *IPC::Encoder::grow(v5, 1uLL, 1) = a3;
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13GetRawCookiesEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvONS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJS11_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13GetRawCookiesEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvONS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJS11_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13GetRawCookiesEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yEEEENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvONS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJS11_EE4callES11_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess17DomCookiesForHostEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobTypeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0C48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobTypeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0C48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobTypeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobSizeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobSizeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobSizeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33GetNetworkLoadInformationResponseEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNSA_16ResourceResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33GetNetworkLoadInformationResponseEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNSA_16ResourceResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33GetNetworkLoadInformationResponseEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNSA_16ResourceResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, WebCore::ResourceResponseBase *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess37GetNetworkLoadIntermediateInformationEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNS_6VectorINSA_29NetworkTransactionInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0CC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess37GetNetworkLoadIntermediateInformationEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNS_6VectorINSA_29NetworkTransactionInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0CC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess37GetNetworkLoadIntermediateInformationEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNS_6VectorINSA_29NetworkTransactionInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  IPC::Encoder *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(v5, 8uLL, 8) = v6;
  v7 = *(_DWORD *)(a2 + 12);
  if (v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 592 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::NetworkTransactionInformation,void>::encode(v5, v8);
      v8 += 592;
      v9 -= 592;
    }
    while (v9);
  }
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33TakeNetworkLoadInformationMetricsEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNSA_18NetworkLoadMetricsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0CE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33TakeNetworkLoadInformationMetricsEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNSA_18NetworkLoadMetricsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0CE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33TakeNetworkLoadInformationMetricsEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNSA_18NetworkLoadMetricsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

WTF::StringImpl *WebKit::NetworkContentRuleListManager::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t *v4;
  unint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  char v24;

  v4 = (uint64_t *)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x119:
      v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v6)
        goto LABEL_16;
      v7 = (WTF::StringImpl *)v5;
      IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, (uint64_t)&v22);
      if (!v24)
        goto LABEL_16;
      v19 = v22;
      v9 = v23;
      v22 = 0;
      v23 = 0;
      v20 = v9;
      WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v8);
      v21 = 1;
      this = (WTF::StringImpl *)WebKit::NetworkContentRuleListManager::addContentRuleLists(v4, v7, (uint64_t)&v19);
      if (v21)
        this = (WTF::StringImpl *)WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v10);
      break;
    case 0x11A:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v11)
        this = (WTF::StringImpl *)WebKit::NetworkContentRuleListManager::remove(v4, (uint64_t)this);
      break;
    case 0x11B:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v12)
        this = (WTF::StringImpl *)WebKit::NetworkContentRuleListManager::removeAllContentRuleLists(v4, (uint64_t)this);
      break;
    case 0x11C:
      v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v14 && (v15 = v13, IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v22), (_BYTE)v23))
      {
        v19 = v22;
        LOBYTE(v20) = 1;
        this = (WTF::StringImpl *)WebKit::NetworkContentRuleListManager::removeContentRuleList(v4, v15, (const WTF::String *)&v19);
        if ((_BYTE)v20)
        {
          this = v19;
          v19 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v16);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      else
      {
LABEL_16:
        v17 = *(_QWORD *)a3;
        v18 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        this = (WTF::StringImpl *)*((_QWORD *)a3 + 3);
        if (this && v18)
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
      }
      break;
    default:
      return this;
  }
  return this;
}

WTF::StringImpl *WebKit::NetworkMDNSRegister::didReceiveMessage(WTF::StringImpl *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  int v4;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  uint64_t v8;

  v3 = (uint64_t *)this;
  v8 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 285)
    return IPC::handleMessageAsync<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::NetworkMDNSRegister,WebKit::NetworkMDNSRegister,void ()(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, __int128 *, WTF::StringImpl **, WTF::StringImpl **))WebKit::NetworkMDNSRegister::registerMDNSName, 0);
  if (v4 == 286)
  {
    this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>((uint64_t *)a3, (uint64_t)v5);
    if (v6)
    {
      v7[0] = v5[0];
      v7[1] = v5[1];
      return (WTF::StringImpl *)WebKit::NetworkMDNSRegister::unregisterMDNSNames(v3, (uint64_t *)v7);
    }
  }
  return this;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::NetworkMDNSRegister,WebKit::NetworkMDNSRegister,void ()(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, __int128 *, WTF::StringImpl **, WTF::StringImpl **), uint64_t a5)
{
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *result;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  WTF::StringImpl *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  char v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a2, (uint64_t)&v25);
  if (v27 && (IPC::Decoder::decode<WTF::String>(a2, &v19), v20))
  {
    if (!v27)
      __break(1u);
    v21 = v25;
    v22 = v26;
    v23 = v19;
    v24 = 1;
    v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v11)
      goto LABEL_10;
    *(_QWORD *)&v25 = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v25 + 1, a1);
    v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v12 = off_1E34B0D10;
    *((_QWORD *)v12 + 1) = v25;
    v13 = *((_QWORD *)&v25 + 1);
    *((_QWORD *)&v25 + 1) = 0;
    *((_QWORD *)v12 + 2) = v13;
    v19 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v25 + 1);
    v14 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, __int128 *, WTF::StringImpl **, WTF::StringImpl **))(*v14 + a4);
    v25 = v21;
    v26 = v22;
    a4(v14, &v25, &v23, &v19);
    result = v19;
    v19 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v24)
    {
LABEL_10:
      result = v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v18 = v17 == 0;
    else
      v18 = 1;
    if (!v18)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)v8);
  if (v9)
  {
    v5 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v7)
        return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkMDNSRegister16RegisterMDNSNameEN6WebKit19NetworkMDNSRegisterES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_6StringEONS_17CompletionHandlerIFvSF_NSt3__18optionalINS9_17MDNSRegisterErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0D10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkMDNSRegister16RegisterMDNSNameEN6WebKit19NetworkMDNSRegisterES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_6StringEONS_17CompletionHandlerIFvSF_NSt3__18optionalINS9_17MDNSRegisterErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0D10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkMDNSRegister16RegisterMDNSNameEN6WebKit19NetworkMDNSRegisterES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_6StringEONS_17CompletionHandlerIFvSF_NSt3__18optionalINS9_17MDNSRegisterErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SK_EE4callESF_SK_(uint64_t a1, uint64_t *a2, __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  IPC::Encoder *v33;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2878;
  *(_QWORD *)(v7 + 8) = v6;
  v8 = (void *)(v7 + 16);
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v33 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a2);
  v9 = *(_QWORD *)(v7 + 544);
  v10 = v9 + 1;
  v11 = *(_QWORD *)(v7 + 552);
  if (v11 < v9 + 1)
  {
    v25 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v10);
    v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
    if (v27 == (char *)-1)
      goto LABEL_23;
    v12 = v27;
    memcpy(v27, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v28 = *(void **)(v7 + 528);
    if (v28 != v8)
      munmap(v28, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v12;
    *(_QWORD *)(v7 + 552) = v26;
    v13 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v12 = *(char **)(v7 + 528);
    v13 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v12[v13], v9 - v13);
  *(_QWORD *)(v7 + 544) = v10;
  v14 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v9);
  *(_QWORD *)(v7 + 536) = v14 + 1;
  if ((a3 & 0xFF00) != 0)
  {
    *v14 = 1;
    v15 = *(_QWORD *)(v7 + 544);
    v16 = v15 + 1;
    v17 = *(_QWORD *)(v7 + 552);
    if (v17 >= v15 + 1)
    {
      v18 = *(char **)(v7 + 528);
      v19 = *(_QWORD *)(v7 + 544);
LABEL_6:
      bzero(&v18[v19], v15 - v19);
      *(_QWORD *)(v7 + 544) = v16;
      v20 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v15);
      *(_QWORD *)(v7 + 536) = v20 + 1;
      *v20 = a3;
      goto LABEL_8;
    }
    v29 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v30 = v29;
      v29 *= 2;
    }
    while (v30 < v16);
    v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
    if (v31 != (char *)-1)
    {
      v18 = v31;
      memcpy(v31, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
      v32 = *(void **)(v7 + 528);
      if (v32 != v8)
        munmap(v32, *(_QWORD *)(v7 + 552));
      *(_QWORD *)(v7 + 528) = v18;
      *(_QWORD *)(v7 + 552) = v30;
      v19 = *(_QWORD *)(v7 + 544);
      goto LABEL_6;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x196F78EB0);
  }
  *v14 = 0;
LABEL_8:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v33, 0, 0);
  result = v33;
  v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::HTTPCookieAcceptPolicy>>(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = (unsigned __int16)IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a1);
  v3 = 256;
  if (v2 <= 0xFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
        v3 = 0;
        v2 = v8;
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (v2 <= 0x100)
    LOBYTE(v2) = 0;
  return v3 | v2;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  WTF::StringImpl *result;
  void *v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  WTF::StringImpl *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  IPC::Decoder::decode<WTF::String>(a2, &v14);
  if (v15)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v4, (uint64_t)&v16);
    v7 = v18;
    if (v18)
    {
      if (!v15)
      {
        __break(1u);
        return result;
      }
      v8 = v14;
      v14 = 0;
      v9 = v16;
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v9;
      v10 = v17;
      v16 = 0;
      v17 = 0;
      *(_QWORD *)(a1 + 16) = v10;
      *(_BYTE *)(a1 + 24) = 1;
      result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v6);
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
    }
    if (v15)
    {
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
          if (v7)
            return result;
          goto LABEL_6;
        }
        *(_DWORD *)result -= 2;
      }
    }
    if (v7)
      return result;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
LABEL_6:
  v11 = *a2;
  v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
  return result;
}

uint64_t WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Cookie>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 136 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  v7 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v7;
  v8 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v4 + 24) = v8;
  v9 = *(_OWORD *)(v3 + 43);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 43) = v9;
  v10 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v4 + 64) = v10;
  WTF::URL::URL(v4 + 72, (uint64_t *)(v3 + 72));
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  v11 = *(_QWORD *)(v3 + 112);
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v4 + 112) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 120);
  *(_DWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v4 + 120) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 124);
  *(_DWORD *)(v3 + 124) = 0;
  *(_DWORD *)(v4 + 124) = v11;
  *(_BYTE *)(v4 + 128) = *(_BYTE *)(v3 + 128);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 136 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      JUMPOUT(0x196F79284);
    }
    v3 = *(uint64_t **)a1;
    v4 = (uint64_t *)(*(_QWORD *)a1 + 136 * *(unsigned int *)(a1 + 12));
    v5 = 136 * a2;
    v6 = WTF::fastMalloc((WTF *)(136 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x88;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::Cookie>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::Cookie>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a3 + 72;
    do
    {
      v6 = *v4;
      *v4 = 0;
      *(_QWORD *)(v5 - 72) = v6;
      v7 = v4[1];
      v4[1] = 0;
      *(_QWORD *)(v5 - 64) = v7;
      v8 = v4[2];
      v4[2] = 0;
      *(_QWORD *)(v5 - 56) = v8;
      v9 = v4[3];
      v4[3] = 0;
      *(_QWORD *)(v5 - 48) = v9;
      v10 = *((_OWORD *)v4 + 2);
      *(_OWORD *)(v5 - 29) = *(_OWORD *)((char *)v4 + 43);
      *(_OWORD *)(v5 - 40) = v10;
      v11 = v4[8];
      v4[8] = 0;
      *(_QWORD *)(v5 - 8) = v11;
      WTF::URL::URL(v5, v4 + 9);
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      v12 = v4[14];
      v4[14] = 0;
      *(_QWORD *)(v5 + 40) = v12;
      LODWORD(v12) = *((_DWORD *)v4 + 30);
      *((_DWORD *)v4 + 30) = 0;
      *(_DWORD *)(v5 + 48) = v12;
      LODWORD(v12) = *((_DWORD *)v4 + 31);
      *((_DWORD *)v4 + 31) = 0;
      *(_DWORD *)(v5 + 52) = v12;
      *(_BYTE *)(v5 + 56) = *((_BYTE *)v4 + 128);
      WebCore::Cookie::~Cookie((WebCore::Cookie *)v4, v13);
      v5 += 136;
      v4 += 17;
    }
    while (v4 != a2);
  }
}

void WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t this)
{
  unint64_t v4;
  WebCore::Cookie *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(a1 + 8) > this)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (v4 > this)
    {
      v5 = (WebCore::Cookie *)(*(_QWORD *)a1 + 136 * this);
      v6 = 136 * v4 - 136 * this;
      do
      {
        WebCore::Cookie::~Cookie(v5, (void *)this);
        v5 = (WebCore::Cookie *)(v7 + 136);
        v6 -= 136;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = this;
      LODWORD(v4) = this;
    }
    v8 = *(uint64_t **)a1;
    if (this)
    {
      if (this >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return;
      }
      v9 = (WTF *)(136 * this);
      v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0x88;
      *(_QWORD *)a1 = v10;
      if ((uint64_t *)v10 != v8)
        WTF::VectorMover<false,WebCore::Cookie>::move(v8, &v8[17 * v4], v10);
    }
    if (v8)
    {
      if (*(uint64_t **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v8, (void *)this);
    }
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24NetworkProcessConnection35ConnectToRTCDataChannelRemoteSourceEN6WebKit24NetworkProcessConnectionES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0D38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24NetworkProcessConnection35ConnectToRTCDataChannelRemoteSourceEN6WebKit24NetworkProcessConnectionES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0D38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24NetworkProcessConnection35ConnectToRTCDataChannelRemoteSourceEN6WebKit24NetworkProcessConnectionES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  __int16 v9;
  IPC::Encoder *v10;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2879;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>((IPC::Encoder *)v4, (char *)&v9);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t result;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  unint64_t v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  uint64_t v13[2];
  _BYTE v14[16];

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>>(v13, a2);
  if (v14[8])
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B0D88;
      v8[1] = v10;
      v9 = v11;
      v11 = 0;
      v12 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::NetworkProcess::createNetworkConnectionToWebProcess(a3, v13[0], v13[1], (uint64_t)v14, (uint64_t *)&v12);
      result = (unint64_t)v12;
      v12 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  unsigned __int8 ***result;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::ASCIICaseInsensitiveHash *v16;
  char v17;
  char v18;

  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>>(&v15, a2);
  if (!v18)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v6);
  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v6)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v6);
  v12 = v7;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34B0DB0;
  v8[1] = v12;
  v9 = v13;
  v13 = 0;
  v14 = v8;
  v8[2] = v9;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
  if (v18)
  {
    WebKit::NetworkProcess::addAllowedFirstPartyForCookies(a3, v15, &v16, v17 != 0, (uint64_t *)&v14);
    v11 = (uint64_t)v14;
    v14 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v6);
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkProcess::PreconnectTo,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)>(uint64_t *a1)
{
  _BYTE v2[240];

  IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>>(v2, a1);
  if (v2[232])
    IPC::callMemberFunction<WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>),WebCore::StoredCredentialsPolicy::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceRequest &&,WebKit::NavigatingToAppBoundDomain>>();
  return std::__optional_destruct_base<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v2);
}

uint64_t IPC::handleMessage<Messages::NetworkProcess::RegisterURLSchemeAsSecure,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::String const&)const>(uint64_t *a1, WebKit::NetworkProcess *a2)
{
  WTF::StringImpl *v3;
  _BYTE v5[16];

  IPC::Decoder::decode<std::tuple<WTF::String>>(a1, (uint64_t)v5);
  if (v5[8])
    WebKit::NetworkProcess::registerURLSchemeAsSecure(a2, (const WTF::String *)v5);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t IPC::handleMessage<Messages::NetworkProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::String const&)const>(uint64_t *a1, WebKit::NetworkProcess *a2)
{
  WTF::StringImpl *v3;
  _BYTE v5[16];

  IPC::Decoder::decode<std::tuple<WTF::String>>(a1, (uint64_t)v5);
  if (v5[8])
    WebKit::NetworkProcess::registerURLSchemeAsBypassingContentSecurityPolicy(a2, (const WTF::String *)v5);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t WebKit::NetworkProcess::didReceiveSyncNetworkProcessMessage(unsigned int *a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v5 = a1 + 30;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  switch(*(_WORD *)(a3 + 50))
  {
    case 0xDC9:
      v7 = IPC::handleMessageSynchronous<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, a4, (uint64_t)a1, (void (*)(_QWORD *, _QWORD **))WebKit::NetworkProcess::processWillSuspendImminentlyForTestingSync, 0);
      goto LABEL_10;
    case 0xDCA:
      v7 = IPC::handleMessageSynchronous<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, a4, (uint64_t)a1, (void (*)(_QWORD *, _QWORD **))WebKit::NetworkProcess::resetServiceWorkerFetchTimeoutForTesting, 0);
      goto LABEL_10;
    case 0xDCB:
      v7 = IPC::handleMessageSynchronous<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::CacheModel,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, _QWORD, _QWORD **))WebKit::NetworkProcess::setCacheModelSynchronouslyForTesting, 0);
      goto LABEL_10;
    case 0xDCC:
      v7 = IPC::handleMessageSynchronous<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, _QWORD **, double))WebKit::NetworkProcess::setServiceWorkerFetchTimeoutForTesting, 0);
LABEL_10:
      v8 = v7;
      if (a1)
        goto LABEL_11;
      return v8;
    default:
      v8 = 0;
      if (!a1)
        return v8;
      do
      {
LABEL_11:
        v9 = __ldaxr(v5);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v5));
      if (!v10)
      {
        atomic_store(1u, a1 + 30);
        (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
      }
      return v8;
  }
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::CacheModel,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _QWORD **), uint64_t a6)
{
  unsigned __int16 v11;
  unsigned int v12;
  unsigned __int8 v13;
  IPC::Encoder *v14;
  _QWORD *v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD *v18;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;

  v11 = IPC::Decoder::decode<std::tuple<WebKit::CacheModel>>(a2);
  v12 = v11;
  if (v11 >= 0x100u)
  {
    v13 = v11;
    v14 = *a3;
    *a3 = 0;
    v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = off_1E34B1F90;
    v15[1] = v20;
    v16 = v21[0];
    v21[0] = 0;
    v15[2] = v16;
    v22 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
    v17 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD, _QWORD **))(*v17 + a5);
    a5(v17, v13, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v12 > 0xFF;
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34B1FB8;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkProcess::SetServiceWorkerFetchTimeoutForTesting,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **, double), uint64_t a6)
{
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  double v14;
  IPC::Encoder *v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;

  v11 = IPC::Decoder::decode<std::tuple<WTF::Seconds>>(a2);
  v13 = v12;
  if (v12)
  {
    v14 = *(double *)&v11;
    v15 = *a3;
    *a3 = 0;
    v21 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34B1FE0;
    v16[1] = v21;
    v17 = v22[0];
    v22[0] = 0;
    v16[2] = v17;
    v23 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v18 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD **, double))(*v18 + a5);
    a5(v18, &v23, v14);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v13 != 0;
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkProcess::ResetServiceWorkerFetchTimeoutForTesting,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34B2008;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24InitializeNetworkProcessEN6WebKit14NetworkProcessES8_FvONS7_32NetworkProcessCreationParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, (uint64_t)v6);
  *a1 = 0;
  a1[24] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v7;
  uint64_t v8[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v8[0] = result;
  v8[1] = v7;
  if ((_BYTE)v7)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID>((uint64_t)a1, a2, a3, v8);
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  unsigned int v8;
  uint64_t v9;

  result = IPC::Decoder::decode<WebKit::NetworkProcessConnectionParameters>(a2);
  v8 = BYTE3(result);
  if (!BYTE3(result))
  {
    *(_BYTE *)a1 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a3 + 8) && *((_BYTE *)a4 + 8))
  {
    v9 = *a4;
    *(_QWORD *)a1 = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = v9;
    *(_WORD *)(a1 + 16) = result;
    *(_BYTE *)(a1 + 18) = BYTE2(result);
    LOBYTE(v8) = 1;
LABEL_5:
    *(_BYTE *)(a1 + 24) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess35CreateNetworkConnectionToWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEONS7_34NetworkProcessConnectionParametersEONS_17CompletionHandlerIFvONSt3__18optionalINS2_16ConnectionHandleEEENSA_22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0D88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess35CreateNetworkConnectionToWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEONS7_34NetworkProcessConnectionParametersEONS_17CompletionHandlerIFvONSt3__18optionalINS2_16ConnectionHandleEEENSA_22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0D88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess35CreateNetworkConnectionToWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEONS7_34NetworkProcessConnectionParametersEONS_17CompletionHandlerIFvONSt3__18optionalINS2_16ConnectionHandleEEENSA_22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SP_EE4callESO_SP_(uint64_t a1, uint64_t a2, char a3)
{
  char v4;

  v4 = a3;
  return IPC::handleMessageAsync<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::CreateNetworkConnectionToWebProcess &&)#1}::operator()<IPC::ConnectionHandle,std::optional<IPC::ConnectionHandle> &>((uint64_t *)(a1 + 8), a2, &v4);
}

IPC::Encoder *IPC::handleMessageAsync<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::CreateNetworkConnectionToWebProcess &&)#1}::operator()<IPC::ConnectionHandle,std::optional<IPC::ConnectionHandle> &>(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *a1;
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2911;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<IPC::ConnectionHandle>,void>::encode<IPC::Encoder,std::optional<IPC::ConnectionHandle>>((IPC::Encoder *)v7, a2);
  LOBYTE(a3) = *a3;
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = (char)a3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<IPC::ConnectionHandle>,void>::encode<IPC::Encoder,std::optional<IPC::ConnectionHandle>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  _BYTE *v6;
  uint64_t *v7;

  v4 = *(unsigned __int8 *)(a2 + 4);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 4))
    {
      return (char *)IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>>(v6, v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, v6);
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, uint64_t *a2, uint64_t *a3)
{
  WTF::StringImpl *v6;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>((uint64_t)a1, a2, a3, &v8);
  }
  else
  {
    *a1 = 0;
    a1[24] = 0;
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8, v6);
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v10 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_5;
  }
  if (*((_BYTE *)a3 + 8) && *((_BYTE *)a4 + 8))
  {
    v8 = *a3;
    v9 = *a4;
    *a4 = 0;
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = result;
    v10 = 1;
LABEL_5:
    *(_BYTE *)(a1 + 24) = v10;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30AddAllowedFirstPartyForCookiesEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSA_17RegistrableDomainENS7_16LoadedWebArchiveEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30AddAllowedFirstPartyForCookiesEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSA_17RegistrableDomainENS7_16LoadedWebArchiveEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30AddAllowedFirstPartyForCookiesEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSA_17RegistrableDomainENS7_16LoadedWebArchiveEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::AddAllowedFirstPartyForCookies &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

IPC::Encoder *IPC::handleMessageAsync<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::AddAllowedFirstPartyForCookies &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *a1;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2896;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14DestroySessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14DestroySessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14DestroySessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2916;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataFetchOption>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataFetchOption>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataFetchOption>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  else
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      v5 = *v4;
      v6 = v5 < 4;
      if (v5 >= 4)
        v5 = 0;
      return v5 | (v6 << 8);
    }
    v8 = v1;
    v9 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (v11 && v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
  v5 = 0;
  v6 = 0;
  return v5 | (v6 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16FetchWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16FetchWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16FetchWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2920;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::WebsiteData,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess17DeleteWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess17DeleteWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess17DeleteWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2915;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[24];
  int v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v6, v5);
        v15 = *a1;
        v14 = a1[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_23;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v20 = 0;
    v21 = 0;
    if (v10 >= 0x8000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v23);
        if (!v25)
          break;
        if (HIDWORD(v21) == (_DWORD)v21)
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData>((uint64_t)&v20, (unint64_t)v23);
        }
        else
        {
          v18 = v20 + 32 * HIDWORD(v21);
          *(_BYTE *)v18 = 0;
          *(_DWORD *)(v18 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v18, (uint64_t)v23);
          ++HIDWORD(v21);
        }
        if (v25 && v24 != -1)
          ((void (*)(char *, _BYTE *))off_1E34B0E40[v24])(&v22, v23);
        if (!--v10)
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v20, HIDWORD(v21));
          *(_QWORD *)a3 = v20;
          v19 = v21;
          v20 = 0;
          v21 = 0;
          *(_QWORD *)(a3 + 8) = v19;
          goto LABEL_21;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v12 = 0;
        v13 = 0;
LABEL_20:
        v20 = 0;
        v21 = 0;
        *(_QWORD *)a3 = v12;
        *(_QWORD *)(a3 + 8) = v13;
LABEL_21:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, a2);
      }
      LODWORD(v21) = v10;
      v20 = WTF::fastMalloc((WTF *)(32 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v23);
        if (!v25)
          break;
        if (HIDWORD(v21) == (_DWORD)v21)
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData>((uint64_t)&v20, (unint64_t)v23);
        }
        else
        {
          v11 = v20 + 32 * HIDWORD(v21);
          *(_BYTE *)v11 = 0;
          *(_DWORD *)(v11 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v11, (uint64_t)v23);
          ++HIDWORD(v21);
        }
        if (v25 && v24 != -1)
          ((void (*)(char *, _BYTE *))off_1E34B0E40[v24])(&v22, v23);
        if (!--v10)
        {
          v12 = v20;
          v13 = v21;
          goto LABEL_20;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, a2);
  }
  v14 = v5;
  v15 = 0;
LABEL_23:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v14)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v4, v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x196F7AC3CLL);
    }
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::SecurityOriginData>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::SecurityOriginData>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (result != a2)
  {
    v10 = v3;
    v11 = v4;
    v7 = result;
    do
    {
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 24) = -1;
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a3, v7);
      v8 = *(unsigned int *)(v7 + 24);
      if ((_DWORD)v8 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E34B0E40[v8])(&v9, v7);
      *(_DWORD *)(v7 + 24) = -1;
      v7 += 32;
      a3 += 32;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    v5 = *(WTF **)result;
    if (v4 > a2)
    {
      v6 = (char *)v5 + 32 * a2;
      v7 = 32 * v4 - 32 * a2;
      do
      {
        v8 = *((unsigned int *)v6 + 6);
        if ((_DWORD)v8 != -1)
          result = ((uint64_t (*)(char *, char *))off_1E34B0E40[v8])(&v9, v6);
        *((_DWORD *)v6 + 6) = -1;
        v6 += 32;
        v7 -= 32;
      }
      while (v7);
      *(_DWORD *)(v3 + 12) = a2;
      v5 = *(WTF **)v3;
      LODWORD(v4) = a2;
    }
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((WTF *)result != v5)
        result = WTF::VectorMover<false,WebCore::SecurityOriginData>::move((uint64_t)v5, (uint64_t)v5 + 32 * v4, result);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DeleteWebsiteDataForOriginsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSE_INS_6StringELm0ESH_Lm16ESI_EESP_RKNSE_INSF_17RegistrableDomainELm0ESH_Lm16ESI_EEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0E60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DeleteWebsiteDataForOriginsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSE_INS_6StringELm0ESH_Lm16ESI_EESP_RKNSE_INSF_17RegistrableDomainELm0ESH_Lm16ESI_EEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0E60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DeleteWebsiteDataForOriginsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSE_INS_6StringELm0ESH_Lm16ESI_EESP_RKNSE_INSF_17RegistrableDomainELm0ESH_Lm16ESI_EEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2914;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess25RenameOriginInWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore18SecurityOriginDataESD_NS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0E88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess25RenameOriginInWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore18SecurityOriginDataESD_NS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0E88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess25RenameOriginInWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore18SecurityOriginDataESD_NS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2952;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36WebsiteDataOriginDirectoryForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore12ClientOriginENS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0EB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36WebsiteDataOriginDirectoryForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore12ClientOriginENS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0EB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36WebsiteDataOriginDirectoryForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore12ClientOriginENS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3010;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDownloadEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DownloadIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0ED8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDownloadEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DownloadIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0ED8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDownloadEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DownloadIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2899;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, a2, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19DataTaskWithRequestEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEON7WebCore15ResourceRequestERKNSt3__18optionalINSG_18SecurityOriginDataEEEONS2_17FormDataReferenceEONS_17CompletionHandlerIFvNS9_INS7_22DataTaskIdentifierTypeESC_yEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0F00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19DataTaskWithRequestEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEON7WebCore15ResourceRequestERKNSt3__18optionalINSG_18SecurityOriginDataEEEONS2_17FormDataReferenceEONS_17CompletionHandlerIFvNS9_INS7_22DataTaskIdentifierTypeESC_yEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0F00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19DataTaskWithRequestEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEON7WebCore15ResourceRequestERKNSt3__18optionalINSG_18SecurityOriginDataEEEONS2_17FormDataReferenceEONS_17CompletionHandlerIFvNS9_INS7_22DataTaskIdentifierTypeESC_yEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2912;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDataTaskEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0F28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDataTaskEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0F28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDataTaskEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2898;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess12FlushCookiesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0F50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess12FlushCookiesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0F50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess12FlushCookiesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2921;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::CacheModel>>(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = (unsigned __int16)IPC::Decoder::decode<WebKit::CacheModel>(a1);
  v3 = 256;
  if (v2 <= 0xFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
        v3 = 0;
        v2 = v8;
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (v2 <= 0x100)
    LOBYTE(v2) = 0;
  return v3 | v2;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16PrepareToSuspendEN6WebKit14NetworkProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0F78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>>(_BYTE *a1, uint64_t *a2)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[232])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WebCore::ResourceRequestBase *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>),WebCore::StoredCredentialsPolicy::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceRequest &&,WebKit::NavigatingToAppBoundDomain>>()
{
  return WebKit::NetworkProcess::preconnectTo();
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID>(a1, a2, (uint64_t)v6);
  *a1 = 0;
  a1[232] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v7;
  _QWORD v8[2];

  result = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v8[0] = result;
  v8[1] = v7;
  if ((_BYTE)v7)
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, a3, (uint64_t)v8);
  *a1 = 0;
  a1[232] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v9;
  _QWORD v10[2];

  result = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v10[0] = result;
  v10[1] = v9;
  if ((_BYTE)v9)
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, a3, a4, (uint64_t)v10);
  *a1 = 0;
  a1[232] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v11[208];

  IPC::Decoder::decode<WebCore::ResourceRequest>(a2, (uint64_t)v11);
  if (v11[200])
  {
    IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest>(a1, a2, a3, a4, a5, (uint64_t)v11);
  }
  else
  {
    *a1 = 0;
    a1[232] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v11);
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest>(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  __int16 v13;

  result = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>(a2);
  v13 = result;
  if ((unsigned __int16)result > 0xFFu)
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy>((uint64_t)a1, a2, a3, a4, a5, a6, &v13);
  *a1 = 0;
  a1[232] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t result;
  int v14;

  result = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(a2);
  v14 = result;
  if ((result & 0xFF0000) != 0)
    return (uint64_t)IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>((_QWORD *)a1, *(_QWORD *)a3, *(_BYTE *)(a3 + 8), *(_QWORD *)a4, *(_BYTE *)(a4 + 8), *(_QWORD *)a5, *(_BYTE *)(a5 + 8), a6, a7, (uint64_t)&v14);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 232) = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>(_QWORD *result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, _BYTE *a9, uint64_t a10)
{
  _QWORD *v10;

  if (a3 && a5 && a7 && *(_BYTE *)(a8 + 200) && a9[1] && *(_BYTE *)(a10 + 2))
  {
    v10 = result;
    *result = a2;
    result[1] = a4;
    result[2] = a6;
    result = (_QWORD *)std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)(result + 3), a8);
    *((_BYTE *)v10 + 224) = *a9;
    *(_WORD *)((char *)v10 + 225) = *(_WORD *)a10;
    *((_BYTE *)v10 + 232) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 232))
  {
    v2 = *(const void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (v2)
      CFRelease(v2);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5 && (v6 = v4, result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v12), v13))
  {
    v8 = v12;
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22ClearPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0FA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22ClearPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0FA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22ClearPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2903;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0FC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0FC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2906;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26DumpResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B0FF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26DumpResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0FF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26DumpResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2919;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v7);
  v5 = v9;
  if (v9)
  {
    *(_QWORD *)a1 = v7;
    v6 = v8;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(a1 + 8) = v6;
    result = WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39UpdatePrevalentDomainsToBlockCookiesForEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1018;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39UpdatePrevalentDomainsToBlockCookiesForEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1018;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39UpdatePrevalentDomainsToBlockCookiesForEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3009;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15IsGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1040;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15IsGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1040;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15IsGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2935;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19IsPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1068;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19IsPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1068;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19IsPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2936;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23IsVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1090;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23IsVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1090;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23IsVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2942;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess11SetLastSeenEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B10B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess11SetLastSeenEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B10B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess11SetLastSeenEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2971;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24MergeStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_SD_NS_7SecondsEbSE_bbbyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B10E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24MergeStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_SD_NS_7SecondsEbSE_bbbyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B10E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24MergeStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_SD_NS_7SecondsEbSE_bbbyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2946;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32InsertExpiredStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEybbbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32InsertExpiredStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEybbbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32InsertExpiredStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEybbbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2934;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20SetPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20SetPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20SetPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2979;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetPrevalentResourceForDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetPrevalentResourceForDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetPrevalentResourceForDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2978;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33IsResourceLoadStatisticsEphemeralEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33IsResourceLoadStatisticsEphemeralEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33IsResourceLoadStatisticsEphemeralEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2941;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HadUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B11A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HadUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B11A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HadUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2928;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5 && (v6 = v4, IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v15), v16))
  {
    result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v17);
    if (v18)
    {
      if (v16)
      {
        v9 = v15;
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a1 + 16) = v17;
        *(_BYTE *)(a1 + 24) = 1;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    *(_BYTE *)a1 = 0;
    v13 = v16;
    *(_BYTE *)(a1 + 24) = 0;
    if (v13)
    {
      v14 = v15;
      v15 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v8);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (!v12)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v10);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32IsRelationshipOnlyInDatabaseOnceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B11D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32IsRelationshipOnlyInDatabaseOnceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B11D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32IsRelationshipOnlyInDatabaseOnceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2940;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15HasLocalStorageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B11F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15HasLocalStorageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B11F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15HasLocalStorageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2931;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26GetAllStorageAccessEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26GetAllStorageAccessEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26GetAllStorageAccessEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2923;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsRedirectingToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsRedirectingToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsRedirectingToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2937;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsSubFrameUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsSubFrameUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsSubFrameUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2938;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30IsRegisteredAsSubresourceUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30IsRegisteredAsSubresourceUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30IsRegisteredAsSubresourceUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2939;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24DomainIDExistsInDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEiONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B12C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24DomainIDExistsInDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEiONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B12C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24DomainIDExistsInDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEiONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2917;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18LogUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B12E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18LogUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B12E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18LogUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2943;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30ResetParametersToDefaultValuesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1310;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30ResetParametersToDefaultValuesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1310;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30ResetParametersToDefaultValuesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2955;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34ScheduleClearInMemoryAndPersistentEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENSt3__18optionalINS_8WallTimeEEENS7_27ShouldGrandfatherStatisticsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34ScheduleClearInMemoryAndPersistentEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENSt3__18optionalINS_8WallTimeEEENS7_27ShouldGrandfatherStatisticsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34ScheduleClearInMemoryAndPersistentEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENSt3__18optionalINS_8WallTimeEEENS7_27ShouldGrandfatherStatisticsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2959;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ScheduleCookieBlockingUpdateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ScheduleCookieBlockingUpdateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ScheduleCookieBlockingUpdateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2960;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42ScheduleStatisticsAndDataRecordsProcessingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1388;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42ScheduleStatisticsAndDataRecordsProcessingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1388;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42ScheduleStatisticsAndDataRecordsProcessingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2961;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30StatisticsDatabaseHasAllTablesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B13B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30StatisticsDatabaseHasAllTablesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B13B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30StatisticsDatabaseHasAllTablesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3005;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5 && (v6 = v4, result = IPC::Decoder::decode<WTF::MonotonicTime>(a2), v8))
  {
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = result;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B13D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B13D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2964;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,BOOL>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  WTF::StringImpl *result;
  unint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned __int8 v26;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5)
  {
    v6 = v4;
    result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v25);
    if (v26)
    {
      v8 = a2[1];
      v9 = (WTF::StringImpl *)*a2;
      v10 = a2[2] - *a2;
      if (v8 <= v10)
      {
        v18 = 0;
        v19 = 0;
        *a2 = 0;
        a2[1] = 0;
        v20 = a2[3];
        if (v20)
        {
          if (v8)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
            v19 = *a2;
            v18 = a2[1];
          }
          else
          {
            v18 = 0;
            v19 = 0;
          }
        }
      }
      else
      {
        v11 = (unsigned __int8 *)v9 + v10;
        a2[2] = (uint64_t)(v11 + 1);
        if (v9)
        {
          v12 = *v11;
          if (v12 < 2)
          {
            v17 = v12 == 0;
            v13 = v25;
            v14 = !v17;
            *(_QWORD *)a1 = v6;
            *(_QWORD *)(a1 + 8) = v13;
            *(_BYTE *)(a1 + 16) = v14;
            *(_BYTE *)(a1 + 24) = 1;
            return result;
          }
          goto LABEL_19;
        }
        v18 = v8;
        v19 = 0;
      }
      v8 = 0;
      v9 = 0;
      *a2 = 0;
      a2[1] = 0;
      v21 = a2[3];
      if (v21)
      {
        if (v18)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
          v9 = (WTF::StringImpl *)*a2;
          v8 = a2[1];
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
      }
LABEL_19:
      *a2 = 0;
      a2[1] = 0;
      v22 = a2[3];
      if (v22 && v8)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v22 + 16))(v22, v9);
      *(_BYTE *)a1 = 0;
      v23 = v26;
      *(_BYTE *)(a1 + 24) = 0;
      if (v23)
      {
        v24 = v25;
        v25 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v9);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_11;
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_11:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v17 = v16 == 0;
  else
    v17 = 1;
  if (!v17)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SetGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1400;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SetGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1400;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SetGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2968;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36GetResourceLoadStatisticsDataSummaryEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS7_17ITPThirdPartyDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1428;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetGrandfatheringTimeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1450;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetGrandfatheringTimeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1450;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetGrandfatheringTimeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2969;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5)
  {
    v6 = a2[1];
    v7 = *a2;
    v8 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v6 >= v8 && v6 - v8 > 7)
    {
      v10 = (uint64_t *)(v7 + v8);
      a2[2] = (uint64_t)(v10 + 1);
      if (v7)
      {
        v11 = *v10;
        *(_QWORD *)a1 = result;
        *(_QWORD *)(a1 + 8) = v11;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      v12 = v6;
      v13 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      *a2 = 0;
      a2[1] = 0;
      v14 = a2[3];
      if (v14)
      {
        if (v6)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v7, v6);
          v13 = *a2;
          v12 = a2[1];
        }
        else
        {
          v12 = 0;
          v13 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23SetMaxStatisticsEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1478;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23SetMaxStatisticsEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1478;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23SetMaxStatisticsEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2973;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetMinimumTimeBetweenDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B14A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetMinimumTimeBetweenDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B14A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetMinimumTimeBetweenDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2974;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetPruneEntriesDownToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B14C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetPruneEntriesDownToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B14C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetPruneEntriesDownToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2986;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess50SetShouldClassifyResourcesBeforeDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B14F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess50SetShouldClassifyResourcesBeforeDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B14F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess50SetShouldClassifyResourcesBeforeDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2990;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess40SetNotifyPagesWhenDataRecordsWereScannedEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1518;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess40SetNotifyPagesWhenDataRecordsWereScannedEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1518;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess40SetNotifyPagesWhenDataRecordsWereScannedEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2975;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess46SetResourceLoadStatisticsTimeAdvanceForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1540;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess46SetResourceLoadStatisticsTimeAdvanceForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1540;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess46SetResourceLoadStatisticsTimeAdvanceForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2989;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetIsRunningResourceLoadStatisticsTestEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1568;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetIsRunningResourceLoadStatisticsTestEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1568;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetIsRunningResourceLoadStatisticsTestEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2970;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetResourceLoadStatisticsDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1590;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetResourceLoadStatisticsDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1590;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetResourceLoadStatisticsDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2988;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24SetVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B15B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24SetVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B15B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24SetVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3003;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubframeUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B15E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubframeUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B15E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubframeUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2993;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33SetSubresourceUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1608;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33SetSubresourceUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1608;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33SetSubresourceUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2994;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubresourceUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1630;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubresourceUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1630;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubresourceUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2996;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetSubresourceUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1658;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetSubresourceUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1658;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetSubresourceUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2995;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28SetTimeToLiveUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1680;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28SetTimeToLiveUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1680;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28SetTimeToLiveUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2999;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27SetTopFrameUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B16A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27SetTopFrameUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B16A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27SetTopFrameUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3002;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29SetTopFrameUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B16D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29SetTopFrameUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B16D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29SetTopFrameUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3001;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess40ResetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B16F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess40ResetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B16F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess40ResetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2953;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess44SetCrossSiteLoadWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_NS7_28DidFilterKnownLinkDecorationEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1720;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess44SetCrossSiteLoadWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_NS7_28DidFilterKnownLinkDecorationEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1720;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess44SetCrossSiteLoadWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_NS7_28DidFilterKnownLinkDecorationEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2965;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47ResetCrossSiteLoadsWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1748;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47ResetCrossSiteLoadsWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1748;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47ResetCrossSiteLoadsWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2954;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28GrantStorageAccessForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEOSD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1770;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28GrantStorageAccessForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEOSD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1770;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28GrantStorageAccessForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEOSD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2927;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23DeleteCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1798;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23DeleteCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1798;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23DeleteCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2913;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasIsolatedSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B17C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasIsolatedSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B17C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasIsolatedSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2930;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16CloseITPDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B17E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16CloseITPDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B17E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16CloseITPDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2908;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4,
        result = IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a2, &v12), v13))
  {
    v8 = v12;
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess43SetAppBoundDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1810;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess43SetAppBoundDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1810;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess43SetAppBoundDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2962;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42SetManagedDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1838;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42SetManagedDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1838;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42SetManagedDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2972;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetShouldDowngradeReferrerForTestingEN6WebKit14NetworkProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1860;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetShouldDowngradeReferrerForTestingEN6WebKit14NetworkProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1860;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetShouldDowngradeReferrerForTestingEN6WebKit14NetworkProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2991;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31SetThirdPartyCookieBlockingModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1888;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31SetThirdPartyCookieBlockingModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1888;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31SetThirdPartyCookieBlockingModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2998;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetShouldEnbleSameSiteStrictEnforcementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32SameSiteStrictEnforcementEnabledEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B18B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetShouldEnbleSameSiteStrictEnforcementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32SameSiteStrictEnforcementEnabledEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B18B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetShouldEnbleSameSiteStrictEnforcementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32SameSiteStrictEnforcementEnabledEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2992;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SetFirstPartyWebsiteDataRemovalModeForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32FirstPartyWebsiteDataRemovalModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B18D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SetFirstPartyWebsiteDataRemovalModeForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32FirstPartyWebsiteDataRemovalModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B18D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SetFirstPartyWebsiteDataRemovalModeForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32FirstPartyWebsiteDataRemovalModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2967;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetToSameSiteStrictCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1900;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetToSameSiteStrictCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1900;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetToSameSiteStrictCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3000;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetFirstPartyHostCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1928;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetFirstPartyHostCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1928;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetFirstPartyHostCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2966;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetThirdPartyCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1950;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetThirdPartyCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1950;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetThirdPartyCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2997;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SyncLocalStorageEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1978;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SyncLocalStorageEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1978;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SyncLocalStorageEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3007;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31StoreServiceWorkerRegistrationsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B19A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31StoreServiceWorkerRegistrationsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B19A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31StoreServiceWorkerRegistrationsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3006;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DumpPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B19C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DumpPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B19C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DumpPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2918;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ClearPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B19F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ClearPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B19F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ClearPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2904;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetPrivateClickMeasurementOverrideTimerForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1A18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetPrivateClickMeasurementOverrideTimerForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1A18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetPrivateClickMeasurementOverrideTimerForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2983;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57MarkAttributedPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1A40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57MarkAttributedPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1A40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57MarkAttributedPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2944;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess56SetPrivateClickMeasurementEphemeralMeasurementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1A68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess56SetPrivateClickMeasurementEphemeralMeasurementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1A68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess56SetPrivateClickMeasurementEphemeralMeasurementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2982;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SimulatePrivateClickMeasurementSessionRestartEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1A90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SimulatePrivateClickMeasurementSessionRestartEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1A90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SimulatePrivateClickMeasurementSessionRestartEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3004;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::URL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::URL>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::URL>,void>::decode<IPC::Decoder,PAL::SessionID>(a1, (uint64_t)v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::URL>,void>::decode<IPC::Decoder,PAL::SessionID>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7[5];
  char v8;

  IPC::Decoder::decode<WTF::URL>(a1, v7);
  if (v8)
  {
    if (*(_BYTE *)(a2 + 8))
    {
      *(_QWORD *)a3 = *(_QWORD *)a2;
      WTF::URL::URL(a3 + 8, (uint64_t *)v7);
      *(_BYTE *)(a3 + 48) = 1;
      if (v8)
      {
        v6 = v7[0];
        v7[0] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v5);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenPublicKeyURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1AB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenPublicKeyURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1AB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenPublicKeyURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2984;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenSignatureURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1AE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenSignatureURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1AE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenSignatureURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2985;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57SetPrivateClickMeasurementAttributionReportURLsForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLESC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1B08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57SetPrivateClickMeasurementAttributionReportURLsForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLESC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1B08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57SetPrivateClickMeasurementAttributionReportURLsForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLESC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2981;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47MarkPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1B30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47MarkPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1B30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47MarkPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2945;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37SetPCMFraudPreventionValuesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringESC_SC_SC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1B58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37SetPCMFraudPreventionValuesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringESC_SC_SC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1B58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37SetPCMFraudPreventionValuesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringESC_SC_SC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2977;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, (uint64_t)a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47SetPrivateClickMeasurementAppBundleIDForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1B80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47SetPrivateClickMeasurementAppBundleIDForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1B80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47SetPrivateClickMeasurementAppBundleIDForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2980;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16ClosePCMDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1BA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16ClosePCMDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1BA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16ClosePCMDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2909;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess10ResetQuotaEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1BD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess10ResetQuotaEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1BD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess10ResetQuotaEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2956;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetOriginQuotaRatioEnabledForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetOriginQuotaRatioEnabledForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetOriginQuotaRatioEnabledForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2976;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetBackupExclusionPeriodForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetBackupExclusionPeriodForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetBackupExclusionPeriodForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2963;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26ResetStoragePersistedStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1C48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26ResetStoragePersistedStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1C48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26ResetStoragePersistedStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2957;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasAppBoundSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasAppBoundSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasAppBoundSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2929;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearAppBoundSessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearAppBoundSessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearAppBoundSessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2900;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37ClearServiceWorkerEntitlementOverrideEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1CC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37ClearServiceWorkerEntitlementOverrideEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1CC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37ClearServiceWorkerEntitlementOverrideEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2905;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22UpdateBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1CE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22UpdateBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1CE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22UpdateBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3008;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ClearBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1D10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ClearBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1D10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ClearBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2902;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27AppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS7_27AppPrivacyReportTestingDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1D38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27AppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS7_27AppPrivacyReportTestingDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1D38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27AppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS7_27AppPrivacyReportTestingDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2897;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32ClearAppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32ClearAppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32ClearAppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2901;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26CountNonDefaultSessionSetsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJmEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1D88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26CountNonDefaultSessionSetsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJmEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1D88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26CountNonDefaultSessionSetsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJmEE4callEm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2910;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::RemoteWorkerType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::RemoteWorkerType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::RemoteWorkerType,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if ((v5 - 1) >= 2)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22GetPendingPushMessagesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS_6VectorINS7_14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22GetPendingPushMessagesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS_6VectorINS7_14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22GetPendingPushMessagesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS_6VectorINS7_14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2925;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_DWORD *)(a2 + 12);
  if (v5)
  {
    v6 = *(_QWORD *)a2;
    v7 = 216 * v5;
    do
    {
      IPC::ArgumentCoder<WebKit::WebPushMessage,void>::encode(a1, v6);
      v6 += 216;
      v7 -= 216;
    }
    while (v7);
  }
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebPushMessage>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebPushMessage,void>::decode(a1, a2);
  if (!a2[216])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    WTF::URL::URL(a1, (uint64_t *)a2);
    v4 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](a1 + 64, a2 + 64);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = 1;
  }
  return a1;
}

uint64_t std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_BYTE *)result = *(_BYTE *)a2;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v2;
    v3 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(result + 32) = v5;
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(result + 40) = v6;
    *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
    *(_BYTE *)(result + 56) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (*(_BYTE *)(a1 + 216))
  {
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a1 + 72, a2);
    v4 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*(_BYTE *)(a1 + 16))
    {
      v6 = *(WTF **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v6, v3);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 136))
  {
    if (*(_BYTE *)(a1 + 120))
      WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem((WebCore::ApplePayInstallmentItem *)(a1 + 64), a2);
    v3 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18ProcessPushMessageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS7_14WebPushMessageEN7WebCore19PushPermissionStateEONS_17CompletionHandlerIFvbONSt3__18optionalINSD_19NotificationPayloadEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18ProcessPushMessageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS7_14WebPushMessageEN7WebCore19PushPermissionStateEONS_17CompletionHandlerIFvbONSt3__18optionalINSD_19NotificationPayloadEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18ProcessPushMessageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS7_14WebPushMessageEN7WebCore19PushPermissionStateEONS_17CompletionHandlerIFvbONSt3__18optionalINSD_19NotificationPayloadEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EE4callEbSK_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2950;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t *v6;
  _BYTE *v7;

  v4 = *(unsigned __int8 *)(a2 + 136);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 136))
    {
      IPC::ArgumentCoder<WebCore::NotificationPayload,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::Decoder::decode<WebCore::NotificationData>(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::Decoder::decode<WebCore::NotificationData>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::NotificationData,void>::decode(a1, a2);
  if (!a2[240])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t std::__tuple_leaf<0ul,WebCore::NotificationData,false>::__tuple_leaf[abi:sn180100]<WebCore::NotificationData,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v5 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v5 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v5 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v5 + 72) = v9;
  *(_BYTE *)(v5 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(v5 + 88) = v10;
  WTF::URL::URL(v5 + 96, (uint64_t *)(a2 + 96));
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 160);
  v13 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v14 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 208) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a2 + 216) = 0;
  *(_DWORD *)(a1 + 216) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a2 + 220) = 0;
  *(_DWORD *)(a1 + 220) = v14;
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24ProcessNotificationEventEN6WebKit14NetworkProcessES8_FvON7WebCore16NotificationDataENS9_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24ProcessNotificationEventEN6WebKit14NetworkProcessES8_FvON7WebCore16NotificationDataENS9_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24ProcessNotificationEventEN6WebKit14NetworkProcessES8_FvON7WebCore16NotificationDataENS9_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2949;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32GetAllBackgroundFetchIdentifiersEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32GetAllBackgroundFetchIdentifiersEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32GetAllBackgroundFetchIdentifiersEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2922;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23GetBackgroundFetchStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_20BackgroundFetchStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1E50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23GetBackgroundFetchStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_20BackgroundFetchStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1E50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23GetBackgroundFetchStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_20BackgroundFetchStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  id v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2924;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 152);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 152))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20AbortBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(v12);
    }
    IPC::ArgumentCoder<WebKit::BackgroundFetchState,void>::encode((IPC::Encoder *)v5, a2);
  }
  else
  {
    *v7 = 0;
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20AbortBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1E78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20AbortBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1E78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20AbortBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2895;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20PauseBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1EA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20PauseBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1EA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20PauseBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2947;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ResumeBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ResumeBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ResumeBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2958;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClickBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClickBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClickBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2907;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetPushAndNotificationsEnabledForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetPushAndNotificationsEnabledForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetPushAndNotificationsEnabledForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2987;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32RemovePushSubscriptionsForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32RemovePushSubscriptionsForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32RemovePushSubscriptionsForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2951;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29HasPushSubscriptionForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29HasPushSubscriptionForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29HasPushSubscriptionForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2932;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEN6WebKit14NetworkProcessES8_FvNS7_10CacheModelEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEN6WebKit14NetworkProcessES8_FvNS7_10CacheModelEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B1F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEN6WebKit14NetworkProcessES8_FvNS7_10CacheModelEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B1FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Seconds>>(uint64_t *a1)
{
  uint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  result = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvNS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B1FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvNS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B1FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvNS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B2008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

BOOL WebKit::NetworkProcessProxy::didReceiveSyncNetworkProcessProxyMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  unsigned int *v5;
  unsigned int v6;
  _BOOL8 v7;

  v5 = (unsigned int *)(a1 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (*(_WORD *)(a3 + 50) == 3528)
  {
    v7 = IPC::handleMessageSynchronous<Messages::NetworkProcessProxy::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply,WebKit::NetworkProcessProxy,WebKit::NetworkProcessProxy,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::NetworkProcessProxy::testProcessIncomingSyncMessagesWhenWaitingForSyncReply, 0);
    if (!a1)
      return v7;
    goto LABEL_7;
  }
  v7 = 0;
  if (a1)
LABEL_7:
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
  return v7;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkProcessProxy::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply,WebKit::NetworkProcessProxy,WebKit::NetworkProcessProxy,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t, _QWORD **), uint64_t a6)
{
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  IPC::Encoder *v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;

  v11 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  v13 = v12;
  if (v12)
  {
    v14 = v11;
    v15 = *a3;
    *a3 = 0;
    v21 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34B2298;
    v16[1] = v21;
    v17 = v22[0];
    v22[0] = 0;
    v16[2] = v17;
    v23 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v18 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v18 + a5);
    a5(v18, v14, &v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v13 != 0;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  WTF::StringImpl *v13[5];
  char v14;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v5 || (v6 = v4, IPC::Decoder::decode<WTF::URL>(a2, v13), !v14))
  {
    *a1 = 0;
    a1[48] = 0;
LABEL_8:
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    return;
  }
  *(_QWORD *)a1 = v6;
  WTF::URL::URL((uint64_t)(a1 + 8), (uint64_t *)v13);
  a1[48] = 1;
  if (v14)
  {
    v8 = v13[0];
    v13[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 != 2)
      {
        *(_DWORD *)v8 -= 2;
        return;
      }
      WTF::StringImpl::destroy(v8, v7);
      if (!a1[48])
        goto LABEL_8;
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27RequestStorageAccessConfirmEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN7WebCore16ProcessQualifiedINS9_INSE_19FrameIdentifierTypeESC_yEEEERKNSE_17RegistrableDomainESL_ONSt3__18optionalINSE_36OrganizationStorageAccessPromptQuirkEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2040;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27RequestStorageAccessConfirmEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN7WebCore16ProcessQualifiedINS9_INSE_19FrameIdentifierTypeESC_yEEEERKNSE_17RegistrableDomainESL_ONSt3__18optionalINSE_36OrganizationStorageAccessPromptQuirkEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2040;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27RequestStorageAccessConfirmEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN7WebCore16ProcessQualifiedINS9_INSE_19FrameIdentifierTypeESC_yEEEERKNSE_17RegistrableDomainESL_ONSt3__18optionalINSE_36OrganizationStorageAccessPromptQuirkEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2892;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy49DeleteWebsiteDataInUIProcessForRegistrableDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetISI_NS_11DefaultHashISI_EENS_10HashTraitsISI_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2068;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy49DeleteWebsiteDataInUIProcessForRegistrableDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetISI_NS_11DefaultHashISI_EENS_10HashTraitsISI_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2068;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy49DeleteWebsiteDataInUIProcessForRegistrableDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetISI_NS_11DefaultHashISI_EENS_10HashTraitsISI_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2883;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(a1, &v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy36SetDomainsWithCrossPageStorageAccessEN6WebKit19NetworkProcessProxyES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2090;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy36SetDomainsWithCrossPageStorageAccessEN6WebKit19NetworkProcessProxyES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2090;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy36SetDomainsWithCrossPageStorageAccessEN6WebKit19NetworkProcessProxyES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2893;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32RequestBackgroundFetchPermissionEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B20B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32RequestBackgroundFetchPermissionEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B20B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32RequestBackgroundFetchPermissionEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2891;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit19NetworkProcessProxyES8_FvNS7_16RemoteWorkerTypeEON7WebCore17RegistrableDomainENSt3__18optionalINS_23ObjectIdentifierGenericINSA_21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSE_INSA_16ProcessQualifiedINS_4UUIDEEEEEN3PAL9SessionIDEONS_17CompletionHandlerIFvSJ_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B20E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit19NetworkProcessProxyES8_FvNS7_16RemoteWorkerTypeEON7WebCore17RegistrableDomainENSt3__18optionalINS_23ObjectIdentifierGenericINSA_21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSE_INSA_16ProcessQualifiedINS_4UUIDEEEEEN3PAL9SessionIDEONS_17CompletionHandlerIFvSJ_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B20E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit19NetworkProcessProxyES8_FvNS7_16RemoteWorkerTypeEON7WebCore17RegistrableDomainENSt3__18optionalINS_23ObjectIdentifierGenericINSA_21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSE_INSA_16ProcessQualifiedINS_4UUIDEEEEEN3PAL9SessionIDEONS_17CompletionHandlerIFvSJ_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2885;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v9);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4;
  char v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v4 = IPC::Decoder::decode<WebKit::RemoteWorkerType>(a2);
  if (v4 >= 0x100u
    && (v5 = v4,
        v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v7)
    && (v8 = v6,
        result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v10))
  {
    *(_BYTE *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = result;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (!v13)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy18GetAppBoundDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy18GetAppBoundDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy18GetAppBoundDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2886;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::ResourceLoadInfo>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 120))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 120))
  {
    v3 = *(WTF::StringImpl **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy46TriggerBrowsingContextGroupSwitchForNavigationEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEyN7WebCore34BrowsingContextGroupSwitchDecisionERKNSE_17RegistrableDomainENS9_INS7_33NetworkResourceLoadIdentifierTypeESC_yEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy46TriggerBrowsingContextGroupSwitchForNavigationEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEyN7WebCore34BrowsingContextGroupSwitchDecisionERKNSE_17RegistrableDomainENS9_INS7_33NetworkResourceLoadIdentifierTypeESC_yEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy46TriggerBrowsingContextGroupSwitchForNavigationEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEyN7WebCore34BrowsingContextGroupSwitchDecisionERKNSE_17RegistrableDomainENS9_INS7_33NetworkResourceLoadIdentifierTypeESC_yEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2894;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy39GetPaymentCoordinatorEmbeddingUserAgentEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy39GetPaymentCoordinatorEmbeddingUserAgentEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy39GetPaymentCoordinatorEmbeddingUserAgentEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2887;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy25DataTaskReceivedChallengeEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore23AuthenticationChallengeEONS_17CompletionHandlerIFvNS7_34AuthenticationChallengeDispositionEONSE_10CredentialEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_SK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy25DataTaskReceivedChallengeEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore23AuthenticationChallengeEONS_17CompletionHandlerIFvNS7_34AuthenticationChallengeDispositionEONSE_10CredentialEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_SK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy25DataTaskReceivedChallengeEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore23AuthenticationChallengeEONS_17CompletionHandlerIFvNS7_34AuthenticationChallengeDispositionEONSE_10CredentialEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_SK_EE4callESI_SK_(uint64_t a1, char a2, WebCore::Credential *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2881;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  IPC::ArgumentCoder<WebCore::Credential,void>::encode((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy34DataTaskWillPerformHTTPRedirectionEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore16ResourceResponseEONSE_15ResourceRequestEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B21A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy34DataTaskWillPerformHTTPRedirectionEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore16ResourceResponseEONSE_15ResourceRequestEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B21A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy34DataTaskWillPerformHTTPRedirectionEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore16ResourceResponseEONSE_15ResourceRequestEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2882;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy26DataTaskDidReceiveResponseEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore16ResourceResponseEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B21D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy26DataTaskDidReceiveResponseEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore16ResourceResponseEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B21D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy26DataTaskDidReceiveResponseEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore16ResourceResponseEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2880;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27OpenWindowFromServiceWorkerEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKNS_6StringERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B21F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27OpenWindowFromServiceWorkerEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKNS_6StringERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B21F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27OpenWindowFromServiceWorkerEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKNS_6StringERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2889;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27NavigateServiceWorkerClientEN6WebKit19NetworkProcessProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINSB_INS9_18PageIdentifierTypeESE_yEEEENSO_ISG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27NavigateServiceWorkerClientEN6WebKit19NetworkProcessProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINSB_INS9_18PageIdentifierTypeESE_yEEEENSO_ISG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27NavigateServiceWorkerClientEN6WebKit19NetworkProcessProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSA_INS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINSB_INS9_18PageIdentifierTypeESE_yEEEENSO_ISG_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_SS_EE4callESR_SS_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12[2];
  IPC::Encoder *v13;

  v12[0] = a2;
  v12[1] = a3;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2888;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v7, v12);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((IPC::Encoder *)v7, a4);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy40DeleteWebsiteDataInWebProcessesForOriginEN6WebKit19NetworkProcessProxyES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEN3PAL9SessionIDENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy40DeleteWebsiteDataInWebProcessesForOriginEN6WebKit19NetworkProcessProxyES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEN3PAL9SessionIDENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy40DeleteWebsiteDataInWebProcessesForOriginEN6WebKit19NetworkProcessProxyES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEN3PAL9SessionIDENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2884;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32ReloadExecutionContextsForOriginEN6WebKit19NetworkProcessProxyES8_FvRKN7WebCore12ClientOriginEN3PAL9SessionIDENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32ReloadExecutionContextsForOriginEN6WebKit19NetworkProcessProxyES8_FvRKN7WebCore12ClientOriginEN3PAL9SessionIDENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32ReloadExecutionContextsForOriginEN6WebKit19NetworkProcessProxyES8_FvRKN7WebCore12ClientOriginEN3PAL9SessionIDENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2890;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages19NetworkProcessProxy54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages19NetworkProcessProxy54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B2298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages19NetworkProcessProxy54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

_DWORD *WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(_DWORD *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*result == 1)
  {
    WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)(result - 2), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

unsigned int *WebKit::NetworkRTCMonitor::didReceiveMessage(unsigned int *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v3;

  v3 = *((unsigned __int16 *)a3 + 25);
  if (v3 == 503)
    return (unsigned int *)WebKit::NetworkRTCMonitor::stopUpdating((WebKit::NetworkRTCMonitor *)this);
  if (v3 == 502)
    return WebKit::NetworkRTCMonitor::startUpdatingIfNeeded((WebKit::NetworkRTCMonitor *)this);
  return this;
}

void WebKit::NetworkRTCProvider::didReceiveMessage(WebKit::NetworkRTCProvider *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  BOOL v6;
  BOOL v7;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WebCore *v25;
  char v26;
  unint64_t v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  unint64_t v32;
  char v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  unsigned __int16 *v39;
  unint64_t v40;
  IPC::Connection *v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  unsigned __int16 v49;
  unint64_t v50;
  char v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int *v56;
  IPC::Connection *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  unint64_t v67;
  char v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  void *v71;
  WTF *v72;
  unsigned __int16 v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int *v84;
  unint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  WTF::StringImpl *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF *v146;
  WTF *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF *v160[2];
  _BYTE v161[24];
  WTF::StringImpl *v162[2];
  WTF *v163;
  uint64_t v164;
  WTF::StringImpl *v165[2];
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  unsigned int v168;
  IPC::Connection *v169;
  char v170;
  BOOL v171;
  WTF::StringImpl *v172;
  char v173;
  char v174;
  WTF::StringImpl *v175;
  char v176;
  __int128 v177;
  char v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  WTF::StringImpl *v182;
  char v183;
  WTF::StringImpl *v184;
  __int128 v185;
  __int128 v186;
  WTF::StringImpl *v187;
  char v188;
  char v189;

  v11 = (unsigned int *)((char *)this + 24);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  switch(*((_WORD *)a3 + 25))
  {
    case 0x1F8:
      v13 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v14)
        WebKit::NetworkRTCProvider::closeSocket((uint64_t)this, v13);
      goto LABEL_119;
    case 0x1F9:
      v50 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v51)
        goto LABEL_118;
      v52 = (WTF::StringImpl *)v50;
      IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>((uint64_t *)a3, (uint64_t)&v179);
      if (!v183)
        goto LABEL_118;
      IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>((uint64_t *)a3, (uint64_t)&v184);
      if (!v188)
      {
        v66 = 0;
        LOBYTE(v159) = 0;
        v173 = 0;
        goto LABEL_196;
      }
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v175);
      if (!v176)
      {
        v66 = 0;
        LOBYTE(v159) = 0;
        v173 = 0;
        goto LABEL_193;
      }
      v54 = *((_QWORD *)a3 + 1);
      v53 = *(WTF::StringImpl **)a3;
      v55 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v54 < v55 || v54 - v55 <= 3)
      {
        v132 = 0;
        v133 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v134 = *((_QWORD *)a3 + 3);
        if (v134)
        {
          if (v54)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v134 + 16))(v134);
            v133 = *(_QWORD *)a3;
            v132 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v132 = 0;
            v133 = 0;
          }
        }
      }
      else
      {
        v56 = (unsigned int *)((char *)v53 + v55);
        *((_QWORD *)a3 + 2) = v56 + 1;
        if (v53)
        {
          v3 = *v56;
          v57 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if (!(_BYTE)v53)
            goto LABEL_187;
          v58 = *((_QWORD *)a3 + 1);
          v53 = *(WTF::StringImpl **)a3;
          v59 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
          if (v58 <= v59)
          {
            v136 = 0;
            v137 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v138 = *((_QWORD *)a3 + 3);
            if (v138)
            {
              if (v58)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v138 + 16))(v138);
                v137 = *(_QWORD *)a3;
                v136 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v136 = 0;
                v137 = 0;
              }
            }
          }
          else
          {
            v60 = (unsigned __int8 *)v53 + v59;
            *((_QWORD *)a3 + 2) = v60 + 1;
            if (v53)
            {
              v61 = *v60;
              if (v61 < 2)
              {
                LOBYTE(v5) = v61 != 0;
                if (v58 <= v60 + 1 - (unsigned __int8 *)v53)
                {
                  v141 = 0;
                  v142 = 0;
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  v143 = *((_QWORD *)a3 + 3);
                  if (v143)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 16))(v143);
                    v141 = 0;
                    v53 = *(WTF::StringImpl **)a3;
                    v157 = *((_QWORD *)a3 + 1);
                    v158 = *((_QWORD *)a3 + 3);
                    *(_QWORD *)a3 = 0;
                    *((_QWORD *)a3 + 1) = 0;
                    v142 = 0;
                    if (v158)
                    {
                      if (v157)
                      {
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v158 + 16))(v158, v53);
                        v142 = *(_QWORD *)a3;
                        v141 = *((_QWORD *)a3 + 1);
                      }
                    }
                  }
                }
                else
                {
                  *((_QWORD *)a3 + 2) = v60 + 2;
                  v62 = v60[1];
                  if (v62 < 2)
                  {
                    a2 = v57;
                    v6 = v62 != 0;
                    IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)a3, (uint64_t)&v177);
                    if (BYTE8(v177))
                    {
                      if (!v183 || !v188 || !v176)
                        goto LABEL_112;
                      v159 = v52;
                      *(_OWORD *)v160 = v179;
                      v162[0] = v182;
                      v162[1] = v184;
                      *((_QWORD *)&v179 + 1) = 0;
                      v63 = v180;
                      v180 = 0;
                      *(_QWORD *)v161 = v63;
                      *(_OWORD *)&v161[8] = v181;
                      v64 = *((_QWORD *)&v185 + 1);
                      v163 = (WTF *)v185;
                      v185 = 0uLL;
                      v164 = v64;
                      *(_OWORD *)v165 = v186;
                      v65 = v175;
                      v175 = 0;
                      v166 = v187;
                      v167 = v65;
                      v168 = v3;
                      v169 = a2;
                      v170 = v5;
                      v171 = v6;
                      v66 = 1;
                      v172 = (WTF::StringImpl *)v177;
                    }
                    else
                    {
                      v66 = 0;
                      LOBYTE(v159) = 0;
                    }
                    v173 = v66;
LABEL_188:
                    if (v176)
                    {
                      v145 = v175;
                      v175 = 0;
                      if (v145)
                      {
                        if (*(_DWORD *)v145 == 2)
                          WTF::StringImpl::destroy(v145, v53);
                        else
                          *(_DWORD *)v145 -= 2;
                      }
                    }
LABEL_193:
                    if (v188)
                    {
                      v146 = (WTF *)v185;
                      if ((_QWORD)v185)
                      {
                        *(_QWORD *)&v185 = 0;
                        DWORD2(v185) = 0;
                        WTF::fastFree(v146, v53);
                      }
                    }
LABEL_196:
                    if (v183)
                    {
                      v147 = (WTF *)*((_QWORD *)&v179 + 1);
                      if (*((_QWORD *)&v179 + 1))
                      {
                        *((_QWORD *)&v179 + 1) = 0;
                        LODWORD(v180) = 0;
                        WTF::fastFree(v147, v53);
                      }
                    }
                    if (v66)
                    {
                      WebKit::NetworkRTCProvider::createClientTCPSocket((std::string::size_type)this, (unsigned __int8 **)v159, (uint64_t *)v160, (WebKit::RTC::Network::SocketAddress *)&v162[1], (int)&v167, v3, (uint64_t)a2, v5 != 0, v6, (WebCore::RegistrableDomain *)&v172);
                      if (!v173)
                        goto LABEL_119;
                      v148 = v172;
                      v172 = 0;
                      if (v148)
                      {
                        if (*(_DWORD *)v148 == 2)
                          WTF::StringImpl::destroy(v148, v92);
                        else
                          *(_DWORD *)v148 -= 2;
                      }
                      v149 = v167;
                      v167 = 0;
                      if (v149)
                      {
                        if (*(_DWORD *)v149 == 2)
                          WTF::StringImpl::destroy(v149, v92);
                        else
                          *(_DWORD *)v149 -= 2;
                      }
                      v150 = v163;
                      if (v163)
                      {
                        v163 = 0;
                        LODWORD(v164) = 0;
                        WTF::fastFree(v150, v92);
                      }
LABEL_211:
                      v93 = v160[1];
                      if (v160[1])
                      {
                        v160[1] = 0;
                        *(_DWORD *)v161 = 0;
LABEL_213:
                        WTF::fastFree(v93, v92);
                      }
                      goto LABEL_119;
                    }
                    goto LABEL_118;
                  }
                  v141 = v58;
                  v142 = (uint64_t)v53;
                }
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v144 = *((_QWORD *)a3 + 3);
                if (v144 && v141)
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v144 + 16))(v144, v142, v141);
LABEL_187:
                v66 = 0;
                LOBYTE(v159) = 0;
                v173 = 0;
                goto LABEL_188;
              }
LABEL_182:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v140 = *((_QWORD *)a3 + 3);
              if (v140 && v58)
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v140 + 16))(v140, v53);
              goto LABEL_187;
            }
            v136 = v58;
            v137 = 0;
          }
          v58 = 0;
          v53 = 0;
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v139 = *((_QWORD *)a3 + 3);
          if (v139)
          {
            if (v136)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v139 + 16))(v139, v137, v136);
              v53 = *(WTF::StringImpl **)a3;
              v58 = *((_QWORD *)a3 + 1);
            }
            else
            {
              v58 = 0;
              v53 = 0;
            }
          }
          goto LABEL_182;
        }
        v132 = v54;
        v133 = 0;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v135 = *((_QWORD *)a3 + 3);
      if (v135 && v132)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v135 + 16))(v135, v133);
      goto LABEL_187;
    case 0x1FA:
      v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v28)
        goto LABEL_118;
      v29 = (WTF::StringImpl *)v27;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v184);
      if (!(_BYTE)v185)
        goto LABEL_118;
      v159 = v29;
      v160[0] = v184;
      LOBYTE(v160[1]) = 1;
      WebKit::NetworkRTCProvider::createResolver((unsigned int *)this, (uint64_t)v29, v160);
      if (!LOBYTE(v160[1]))
        goto LABEL_119;
      v31 = v160[0];
      v160[0] = 0;
      if (!v31)
        goto LABEL_119;
      goto LABEL_150;
    case 0x1FB:
      v32 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v33)
        goto LABEL_118;
      v34 = (WTF::StringImpl *)v32;
      IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>((uint64_t *)a3, (uint64_t)&v184);
      if (!v188)
        goto LABEL_118;
      v35 = *((_QWORD *)a3 + 1);
      v36 = *(_BYTE **)a3;
      v37 = ((*((_QWORD *)a3 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(_QWORD *)a3;
      if (v35 < v37 || v35 - v37 <= 1)
      {
        v107 = 0;
        v108 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v109 = *((_QWORD *)a3 + 3);
        if (v109)
        {
          if (!v35)
          {
            v107 = 0;
            v108 = 0;
            goto LABEL_165;
          }
LABEL_240:
          (*(void (**)(uint64_t))(*(_QWORD *)v109 + 16))(v109);
          v108 = *(_QWORD *)a3;
          v107 = *((_QWORD *)a3 + 1);
        }
LABEL_165:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v129 = *((_QWORD *)a3 + 3);
        if (v129 && v107)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v129 + 16))(v129, v108, v107);
        goto LABEL_166;
      }
      v39 = (unsigned __int16 *)&v36[v37];
      *((_QWORD *)a3 + 2) = v39 + 1;
      if (!v36)
        goto LABEL_252;
      v40 = (((unint64_t)v39 + 3) & 0xFFFFFFFFFFFFFFFELL) - (_QWORD)v36;
      if (v35 < v40 || v35 - v40 <= 1)
      {
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v120 = *((_QWORD *)a3 + 3);
        if (!v120)
          goto LABEL_166;
        if (!v35)
          goto LABEL_166;
        (*(void (**)(uint64_t))(*(_QWORD *)v120 + 16))(v120);
        v36 = *(_BYTE **)a3;
        v35 = *((_QWORD *)a3 + 1);
        v121 = *((_QWORD *)a3 + 3);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        if (!v121)
          goto LABEL_166;
LABEL_162:
        if (v35)
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v121 + 16))(v121, v36);
        goto LABEL_166;
      }
      v5 = *v39;
      v4 = *(_WORD *)(((unint64_t)v39 + 3) & 0xFFFFFFFFFFFFFFFELL);
      *((_QWORD *)a3 + 2) = (((unint64_t)v39 + 3) & 0xFFFFFFFFFFFFFFFELL) + 2;
      v42 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v36)
        goto LABEL_166;
      v35 = *((_QWORD *)a3 + 1);
      v36 = *(_BYTE **)a3;
      v43 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v35 <= v43)
      {
        v124 = 0;
        v125 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v126 = *((_QWORD *)a3 + 3);
        if (v126)
        {
          if (v35)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v126 + 16))(v126);
            v125 = *(_QWORD *)a3;
            v124 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v124 = 0;
            v125 = 0;
          }
        }
      }
      else
      {
        v44 = &v36[v43];
        *((_QWORD *)a3 + 2) = v44 + 1;
        if (v36)
        {
          v45 = *v44;
          if (v45 < 2)
          {
            v6 = v45 != 0;
            if (v35 <= v44 + 1 - v36)
            {
              v107 = 0;
              v108 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v128 = *((_QWORD *)a3 + 3);
              if (v128)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v128 + 16))(v128);
                v107 = 0;
                v36 = *(_BYTE **)a3;
                v156 = *((_QWORD *)a3 + 1);
                v109 = *((_QWORD *)a3 + 3);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v108 = 0;
                if (v109)
                {
                  if (v156)
                    goto LABEL_240;
                }
              }
              goto LABEL_165;
            }
            *((_QWORD *)a3 + 2) = v44 + 2;
            v46 = v44[1];
            if (v46 < 2)
            {
              a2 = v42;
              v7 = v46 != 0;
              IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)a3, (uint64_t)&v179);
              if (BYTE8(v179))
              {
                if (!v188)
                  goto LABEL_112;
                v159 = v34;
                v160[0] = v184;
                v47 = *((_QWORD *)&v185 + 1);
                v160[1] = (WTF *)v185;
                v185 = 0uLL;
                *(_QWORD *)v161 = v47;
                *(_OWORD *)&v161[8] = v186;
                v162[0] = v187;
                LOWORD(v162[1]) = v5;
                WORD1(v162[1]) = v4;
                v163 = a2;
                LOBYTE(v164) = v6;
                BYTE1(v164) = v7;
                v48 = 1;
                v165[0] = (WTF::StringImpl *)v179;
              }
              else
              {
                v48 = 0;
                LOBYTE(v159) = 0;
              }
              LOBYTE(v165[1]) = v48;
LABEL_167:
              if (v188)
              {
                v130 = (WTF *)v185;
                if ((_QWORD)v185)
                {
                  *(_QWORD *)&v185 = 0;
                  DWORD2(v185) = 0;
                  WTF::fastFree(v130, v36);
                }
              }
              if (v48)
              {
                WebKit::NetworkRTCProvider::createUDPSocket((uint64_t)this, (unint64_t)v159, (WebKit::RTC::Network::SocketAddress *)v160, v5, v4, (uint64_t)a2, v6, v7, (WebKit *)v165);
                if (!LOBYTE(v165[1]))
                  goto LABEL_119;
                v131 = v165[0];
                v165[0] = 0;
                if (v131)
                {
                  if (*(_DWORD *)v131 == 2)
                    WTF::StringImpl::destroy(v131, v92);
                  else
                    *(_DWORD *)v131 -= 2;
                }
                goto LABEL_211;
              }
LABEL_118:
              v99 = *(_QWORD *)a3;
              v100 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v101 = *((_QWORD *)a3 + 3);
              if (v101 && v100)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v101, v99);
              goto LABEL_119;
            }
LABEL_252:
            v107 = v35;
            v108 = (uint64_t)v36;
            goto LABEL_165;
          }
LABEL_161:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v121 = *((_QWORD *)a3 + 3);
          if (v121)
            goto LABEL_162;
LABEL_166:
          v48 = 0;
          LOBYTE(v159) = 0;
          LOBYTE(v165[1]) = 0;
          goto LABEL_167;
        }
        v124 = v35;
        v125 = 0;
      }
      v35 = 0;
      v36 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v127 = *((_QWORD *)a3 + 3);
      if (v127)
      {
        if (v124)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v127 + 16))(v127, v125, v124);
          v36 = *(_BYTE **)a3;
          v35 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
      }
      goto LABEL_161;
    case 0x1FC:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)a3, &v184);
      if (!(_BYTE)v187)
        goto LABEL_118;
      v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v15)
        goto LABEL_134;
      v17 = *((_QWORD *)a3 + 1);
      v15 = *(WTF::StringImpl **)a3;
      v18 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v17 <= v18)
      {
        v102 = 0;
        v103 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v104 = *((_QWORD *)a3 + 3);
        if (v104)
        {
          if (v17)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v104 + 16))(v104);
            v103 = *(_QWORD *)a3;
            v102 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v102 = 0;
            v103 = 0;
          }
        }
      }
      else
      {
        v19 = (unsigned __int8 *)v15 + v18;
        *((_QWORD *)a3 + 2) = v19 + 1;
        if (v15)
        {
          v20 = *v19;
          if (v20 < 2)
          {
            LOBYTE(v4) = v20 != 0;
            if (v17 <= v19 + 1 - (unsigned __int8 *)v15)
            {
              v110 = 0;
              v111 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v112 = *((_QWORD *)a3 + 3);
              if (v112)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112);
                v110 = 0;
                v15 = *(WTF::StringImpl **)a3;
                v154 = *((_QWORD *)a3 + 1);
                v155 = *((_QWORD *)a3 + 3);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v111 = 0;
                if (v155)
                {
                  if (v154)
                  {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v155 + 16))(v155, v15);
                    v111 = *(_QWORD *)a3;
                    v110 = *((_QWORD *)a3 + 1);
                  }
                }
              }
            }
            else
            {
              *((_QWORD *)a3 + 2) = v19 + 2;
              v21 = v19[1];
              if (v21 < 2)
              {
                LOBYTE(v5) = v21 != 0;
                IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)a3, (uint64_t)&v179);
                if (BYTE8(v179))
                {
                  if (!(_BYTE)v187)
                    goto LABEL_112;
                  v23 = v184;
                  v184 = 0;
                  v159 = v23;
                  *(_OWORD *)v160 = v185;
                  *(_OWORD *)v161 = v186;
                  LODWORD(v185) = v185 & 0xFFFFFFFE;
                  *(_QWORD *)&v161[16] = v16;
                  LOBYTE(v162[0]) = v4;
                  BYTE1(v162[0]) = v5;
                  v162[1] = (WTF::StringImpl *)v179;
                  v24 = 1;
                }
                else
                {
                  v24 = 0;
                  LOBYTE(v159) = 0;
                }
                LOBYTE(v163) = v24;
LABEL_135:
                if ((_BYTE)v187)
                {
                  v114 = v184;
                  v184 = 0;
                  if (v114)
                  {
                    if (*(_DWORD *)v114 == 2)
                      WTF::StringImpl::destroy(v114, v15);
                    else
                      *(_DWORD *)v114 -= 2;
                  }
                }
                if (v24)
                {
                  v115 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                  if (!(_BYTE)v30)
                    goto LABEL_270;
                  v184 = (WTF::StringImpl *)v115;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v185, (unsigned __int8 **)a2);
                  v116 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v116 = off_1E34B22E8;
                  v116[1] = v184;
                  v117 = v185;
                  *(_QWORD *)&v185 = 0;
                  v116[2] = v117;
                  *(_QWORD *)&v179 = v116;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v185);
                  WebKit::NetworkRTCProvider::getInterfaceName(this, (WTF::URL *)&v159, v16, v4 != 0, v5 != 0, (const WebCore::RegistrableDomain *)&v162[1], (uint64_t *)&v179);
                  v118 = v179;
                  *(_QWORD *)&v179 = 0;
                  if (v118)
                    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
                  if ((_BYTE)v163)
                  {
LABEL_270:
                    v119 = v162[1];
                    v162[1] = 0;
                    if (v119)
                    {
                      if (*(_DWORD *)v119 == 2)
                        WTF::StringImpl::destroy(v119, v30);
                      else
                        *(_DWORD *)v119 -= 2;
                    }
                    v31 = v159;
                    v159 = 0;
                    if (v31)
                    {
LABEL_150:
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, v30);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                  }
                  goto LABEL_119;
                }
                goto LABEL_118;
              }
              v110 = v17;
              v111 = (uint64_t)v15;
            }
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v113 = *((_QWORD *)a3 + 3);
            if (v113 && v110)
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v113 + 16))(v113, v111, v110);
LABEL_134:
            v24 = 0;
            LOBYTE(v159) = 0;
            LOBYTE(v163) = 0;
            goto LABEL_135;
          }
LABEL_126:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v106 = *((_QWORD *)a3 + 3);
          if (v106 && v17)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v106 + 16))(v106, v15);
          goto LABEL_134;
        }
        v102 = v17;
        v103 = 0;
      }
      v17 = 0;
      v15 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v105 = *((_QWORD *)a3 + 3);
      if (v105)
      {
        if (v102)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v105 + 16))(v105, v103, v102);
          v15 = *(WTF::StringImpl **)a3;
          v17 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v17 = 0;
          v15 = 0;
        }
      }
      goto LABEL_126;
    case 0x1FD:
      v67 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v68
        || (v69 = (WTF::StringImpl *)v67,
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)&v177),
            !v178))
      {
        LOBYTE(v159) = 0;
        v174 = 0;
LABEL_95:
        v89 = *(_QWORD *)a3;
        v90 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v91 = *((_QWORD *)a3 + 3);
        if (!v91)
          goto LABEL_119;
        if (!v90)
          goto LABEL_119;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v89);
        if (!v174)
          goto LABEL_119;
        goto LABEL_102;
      }
      IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>((uint64_t *)a3, (uint64_t)&v179);
      if (v183)
      {
        IPC::ArgumentCoder<WebKit::RTCPacketOptions,void>::decode((uint64_t *)a3, &v184);
        if (v189
          || (v71 = *(void **)a3,
              v122 = *((_QWORD *)a3 + 1),
              *(_QWORD *)a3 = 0,
              *((_QWORD *)a3 + 1) = 0,
              (v123 = *((_QWORD *)a3 + 3)) != 0)
          && v122
          && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v123 + 16))(v123, v71), v189))
        {
          if (!v178 || !v183)
          {
LABEL_112:
            __break(1u);
LABEL_113:
            v94 = 0;
            v95 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v96 = *((_QWORD *)a3 + 3);
            if (v96)
            {
              if (v22)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
                v95 = *(_QWORD *)a3;
                v94 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v94 = 0;
                v95 = 0;
              }
            }
            goto LABEL_114;
          }
          v159 = v69;
          *(_OWORD *)v160 = v177;
          *(_OWORD *)v161 = v179;
          v70 = v180;
          *((_QWORD *)&v179 + 1) = 0;
          v180 = 0;
          *(_QWORD *)&v161[16] = v70;
          *(_OWORD *)v162 = v181;
          v163 = v182;
          rtc::PacketOptions::PacketOptions();
          v174 = 1;
          if (v189)
            rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&v184);
        }
        else
        {
          LOBYTE(v159) = 0;
          v174 = 0;
        }
        if (v183)
        {
          v72 = (WTF *)*((_QWORD *)&v179 + 1);
          if (*((_QWORD *)&v179 + 1))
          {
            *((_QWORD *)&v179 + 1) = 0;
            LODWORD(v180) = 0;
            WTF::fastFree(v72, v71);
          }
        }
      }
      else
      {
        LOBYTE(v159) = 0;
        v174 = 0;
      }
      if (!v174)
        goto LABEL_95;
LABEL_102:
      WebKit::NetworkRTCProvider::sendToSocket((uint64_t)this, (unint64_t)v159, (uint64_t)v160[0], (uint64_t)v160[1], (WebKit::RTC::Network::SocketAddress *)v161, (uint64_t)&v164);
      if (v174)
      {
        rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&v164);
        v93 = *(WTF **)&v161[8];
        if (*(_QWORD *)&v161[8])
        {
          *(_QWORD *)&v161[8] = 0;
          *(_DWORD *)&v161[16] = 0;
          goto LABEL_213;
        }
      }
LABEL_119:
      if (this)
LABEL_120:
        WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(v11);
      return;
    case 0x1FE:
      v73 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v73 < 0x100u)
        goto LABEL_119;
      *((_BYTE *)this + 137) = v73 != 0;
      goto LABEL_120;
    case 0x1FF:
      v49 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v49 < 0x100u)
        goto LABEL_119;
      *((_BYTE *)this + 138) = v49 != 0;
      goto LABEL_120;
    case 0x200:
      v79 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v80)
        goto LABEL_118;
      v22 = *((_QWORD *)a3 + 1);
      v81 = *(_QWORD *)a3;
      v82 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v22 < v82 || v22 - v82 <= 3)
        goto LABEL_113;
      v84 = (unsigned int *)(v81 + v82);
      *((_QWORD *)a3 + 2) = v84 + 1;
      if (v81)
      {
        v85 = (((unint64_t)v84 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v81;
        if (v22 >= v85 && v22 - v85 > 3)
        {
          v87 = *v84;
          v88 = *(unsigned int *)(((unint64_t)v84 + 7) & 0xFFFFFFFFFFFFFFFCLL);
          *((_QWORD *)a3 + 2) = (((unint64_t)v84 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
          WebKit::NetworkRTCProvider::setSocketOption((uint64_t)this, v79, v87, v88);
          goto LABEL_119;
        }
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v98 = *((_QWORD *)a3 + 3);
        if (v98)
        {
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 16))(v98);
            v151 = *(_QWORD *)a3;
            v152 = *((_QWORD *)a3 + 1);
            v153 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v153)
            {
              if (v152)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v151);
            }
          }
        }
      }
      else
      {
        v94 = v22;
        v95 = 0;
LABEL_114:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v97 = *((_QWORD *)a3 + 3);
        if (v97 && v94)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v97 + 16))(v97, v95, v94);
      }
      goto LABEL_118;
    case 0x201:
      v25 = (WebCore *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v26)
        goto LABEL_118;
      WebKit::NetworkRTCProvider::stopResolver(this, v25);
      goto LABEL_119;
    case 0x202:
      v74 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v75)
        goto LABEL_118;
      v76 = v74;
      v77 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v78)
        goto LABEL_118;
      WebKit::NetworkRTCProvider::wrapNewTCPConnection((uint64_t)this, v76, v77);
      goto LABEL_119;
    default:
      goto LABEL_119;
  }
}

void `non-virtual thunk to'WebKit::NetworkRTCProvider::didReceiveMessage(WebKit::NetworkRTCProvider *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::NetworkRTCProvider::didReceiveMessage((WebKit::NetworkRTCProvider *)((char *)this - 8), a2, a3);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34B2310;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainRunLoop();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 24) + 8))(*(_QWORD *)(a1 + 8) - 24);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18NetworkRTCProvider16GetInterfaceNameEN6WebKit18NetworkRTCProviderES8_FvONS_3URLENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbbON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B22E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18NetworkRTCProvider16GetInterfaceNameEN6WebKit18NetworkRTCProviderES8_FvONS_3URLENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbbON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B22E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18NetworkRTCProvider16GetInterfaceNameEN6WebKit18NetworkRTCProviderES8_FvONS_3URLENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbbON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3011;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::setNWParametersApplicationIdentifiers(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, char *);
  char *v7;
  void *v8;
  WTF *v9;

  v5 = result;
  if (a2 && *a2)
  {
    result = nw_parameters_set_source_application_by_bundle_id();
  }
  else if (*(_BYTE *)(a3 + 32))
  {
    result = nw_parameters_set_source_application();
  }
  if (*(_QWORD *)a4)
  {
    if (*(_DWORD *)(*(_QWORD *)a4 + 4))
    {
      result = (uint64_t)nw_parameters_set_attributed_bundle_identifierPtr();
      if (result)
      {
        v6 = (void (*)(uint64_t, char *))nw_parameters_set_attributed_bundle_identifierPtr();
        WTF::String::utf8();
        if (v9)
          v7 = (char *)v9 + 16;
        else
          v7 = 0;
        v6(v5, v7);
        result = (uint64_t)v9;
        if (v9)
        {
          if (*(_DWORD *)v9 == 1)
            return WTF::fastFree(v9, v8);
          else
            --*(_DWORD *)v9;
        }
      }
    }
  }
  return result;
}

void sub_196F85690(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
      WTF::fastFree(a10, a2);
    else
      --*(_DWORD *)a10;
  }
  _Unwind_Resume(exception_object);
}

void *nw_parameters_set_attributed_bundle_identifierPtr(void)
{
  void *result;
  void *v1;

    return (void *)nw_parameters_set_attributed_bundle_identifierPtr(void)::ptr;
  {
    v1 = (void *)libnetworkLibrary(void)::dylib;
  }
  else
  {
    v1 = dlopen("/usr/lib/libnetwork.dylib", 2);
    libnetworkLibrary(void)::dylib = (uint64_t)v1;
  }
  result = dlsym(v1, "nw_parameters_set_attributed_bundle_identifier");
  nw_parameters_set_attributed_bundle_identifierPtr(void)::ptr = (uint64_t)result;
  return result;
}

uint64_t WebKit::setNWParametersTrackerOptions(uint64_t a1, int a2)
{
  if (a2)
    nw_parameters_set_account_id();
  nw_parameters_set_is_third_party_web_content();
  return nw_parameters_set_is_known_tracker();
}

BOOL WebKit::isKnownTracker(WebKit *this, const WebCore::RegistrableDomain *a2)
{
  const __CFString *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)this)
    v2 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v2 = &stru_1E351F1B8;
  v6[0] = v2;
  v3 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v5 = 0;
  return softLinkNEHelperTrackerGetDisposition(0, v3, 0, (uint64_t)&v5) != 0;
}

uint64_t initNEHelperTrackerGetDisposition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t (*v9)();

  if (_MergedGlobals_51 == 1)
  {
    v8 = (void *)qword_1ECE720D8;
  }
  else
  {
    v8 = dlopen("/usr/lib/libnetworkextension.dylib", 2);
    if (!v8)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x196F858D0);
    }
    qword_1ECE720D8 = (uint64_t)v8;
    _MergedGlobals_51 = 1;
  }
  v9 = (uint64_t (*)())dlsym(v8, "NEHelperTrackerGetDisposition");
  softLinkNEHelperTrackerGetDisposition = v9;
  if (!v9)
    goto LABEL_8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(a1, a2, a3, a4);
}

WTF::StringImpl *WebKit::NetworkSocketChannel::didReceiveMessage(WTF::StringImpl *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  char v8;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 516:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<int,WTF::String>>((uint64_t *)a3, &v6);
      if (v8)
      {
        WebKit::WebSocketTask::close(*((WebKit::WebSocketTask **)v3 + 6), v6, (const WTF::String *)&v7);
        this = (WTF::StringImpl *)WebKit::NetworkSocketChannel::finishClosingIfPossible((uint64_t *)v3);
        if (v8)
        {
          this = v7;
          v7 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      break;
    case 517:
      return (WTF::StringImpl *)IPC::handleMessageAsync<Messages::NetworkSocketChannel::SendData,WebKit::NetworkSocketChannel,WebKit::NetworkSocketChannel,void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD **))WebKit::NetworkSocketChannel::sendData, 0);
    case 518:
      return (WTF::StringImpl *)IPC::handleMessageAsync<Messages::NetworkSocketChannel::SendString,WebKit::NetworkSocketChannel,WebKit::NetworkSocketChannel,void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD **))WebKit::NetworkSocketChannel::sendString, 0);
  }
  return this;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkSocketChannel::SendString,WebKit::NetworkSocketChannel,WebKit::NetworkSocketChannel,void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, _QWORD, _QWORD **), uint64_t a5)
{
  uint64_t result;
  char v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD v18[2];
  char v19;

  result = (uint64_t)IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>(a2, (uint64_t)v18);
  if (v19)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v11)
    {
      v15 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E34B2338;
      v12[1] = v15;
      v13 = v16;
      v16 = 0;
      v17 = v12;
      v12[2] = v13;
      result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
      if (v19)
      {
        v14 = (_QWORD *)(a3 + (a5 >> 1));
        if ((a5 & 1) != 0)
          a4 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD **))(*v14 + a4);
        a4(v14, v18[0], v18[1], &v17);
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkSocketChannel::SendData,WebKit::NetworkSocketChannel,WebKit::NetworkSocketChannel,void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, _QWORD, _QWORD **), uint64_t a5)
{
  uint64_t result;
  char v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD v18[2];
  char v19;

  result = (uint64_t)IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>(a2, (uint64_t)v18);
  if (v19)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v11)
    {
      v15 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E34B2360;
      v12[1] = v15;
      v13 = v16;
      v16 = 0;
      v17 = v12;
      v12[2] = v13;
      result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
      if (v19)
      {
        v14 = (_QWORD *)(a3 + (a5 >> 1));
        if ((a5 & 1) != 0)
          a4 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD **))(*v14 + a4);
        a4(v14, v18[0], v18[1], &v17);
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::NetworkSocketChannel::didReceiveMessage(WebKit::NetworkSocketChannel *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  return WebKit::NetworkSocketChannel::didReceiveMessage((WebKit::NetworkSocketChannel *)((char *)this - 8), a2, a3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel10SendStringEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel10SendStringEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel10SendStringEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3013;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel8SendDataEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel8SendDataEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel8SendDataEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3012;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<int,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<int,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<int,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;

  v2 = a1[1];
  v3 = *a1;
  v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (unsigned int *)(v3 + v4);
    a1[2] = (uint64_t)(v6 + 1);
    if (v3)
    {
      v14 = *v6 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<int,WTF::String>,void>::decode<IPC::Decoder,int>(a1, (uint64_t)&v14, (uint64_t)a2);
    }
    v8 = v2;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        v9 = *v11;
        v8 = v11[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = (_QWORD *)a1[3];
  if (result)
  {
    if (v8)
    {
      v12 = a2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<int,WTF::String>,void>::decode<IPC::Decoder,int>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  char v6;
  uint64_t v7;
  char v8;

  result = IPC::Decoder::decode<WTF::String>(a1, &v7);
  v6 = v8;
  if (!v8)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 4))
  {
    *(_DWORD *)a3 = *(_DWORD *)a2;
    *(_QWORD *)(a3 + 8) = v7;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::Persisted,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, WebKit::NetworkStorageManager *a3)
{
  unint64_t v6;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _BYTE v15[64];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B2398;
      v8[1] = v12;
      v9 = v13;
      v13 = 0;
      v14 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16)
        __break(1u);
      WebKit::NetworkStorageManager::persisted(a3, (const WebCore::ClientOrigin *)v15, (uint64_t *)&v14);
      v10 = (uint64_t)v14;
      v14 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::Persist,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  WTF::RunLoop *v8;
  unsigned __int8 **v9;
  WTF::RunLoop *v10;
  unint64_t v12;
  unsigned __int8 **v13;
  WTF::RunLoop *v14;
  _BYTE v15[64];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v8 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v8 = off_1E34B23C0;
      *((_QWORD *)v8 + 1) = v12;
      v9 = v13;
      v13 = 0;
      v14 = v8;
      *((_QWORD *)v8 + 2) = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16)
        __break(1u);
      WebKit::NetworkStorageManager::persist(a3, (WebCore::SecurityOriginData *)v15, &v14);
      v10 = v14;
      v14 = 0;
      if (v10)
        (*(void (**)(WTF::RunLoop *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::Estimate,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(std::optional<WebCore::StorageEstimate>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _BYTE v15[64];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B23E8;
      v8[1] = v12;
      v9 = v13;
      v13 = 0;
      v14 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16)
        __break(1u);
      WebKit::NetworkStorageManager::estimate(a3, (const WebCore::ClientOrigin *)v15, (uint64_t *)&v14);
      v10 = (uint64_t)v14;
      v14 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ClientOrigin &&::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _BYTE v15[64];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B2410;
      v8[1] = v12;
      v9 = v13;
      v13 = 0;
      v14 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16)
        __break(1u);
      WebKit::NetworkStorageManager::fileSystemGetDirectory(a3, (uint64_t)a1, (const WebCore::ClientOrigin *)v15, (uint64_t *)&v14);
      v10 = (uint64_t)v14;
      v14 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::IsSameEntry,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  unint64_t v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  uint64_t v13[2];
  char v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v13, a2);
  if (v14)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B2438;
      v8[1] = v10;
      v9 = v11;
      v11 = 0;
      v12 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::NetworkStorageManager::isSameEntry(a3, v13[0], v13[1], (uint64_t *)&v12);
      result = (unint64_t)v12;
      v12 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::GetFileHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *result;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 **v10;
  unint64_t v11;
  unsigned __int8 **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v16;
  char v17;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>>((uint64_t)&v14, a2);
  if (v17)
  {
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v8)
      goto LABEL_6;
    v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v9 = off_1E34B2460;
    *((_QWORD *)v9 + 1) = v11;
    v10 = v12;
    v12 = 0;
    v13 = v9;
    *((_QWORD *)v9 + 2) = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    WebKit::NetworkStorageManager::getFileHandle(a3, (uint64_t)a1, v14, (WTF::String *)&v15, v16, (uint64_t *)&v13);
    result = v13;
    v13 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v17)
    {
LABEL_6:
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *result;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 **v10;
  unint64_t v11;
  unsigned __int8 **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v16;
  char v17;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>>((uint64_t)&v14, a2);
  if (v17)
  {
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v8)
      goto LABEL_6;
    v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v9 = off_1E34B2488;
    *((_QWORD *)v9 + 1) = v11;
    v10 = v12;
    v12 = 0;
    v13 = v9;
    *((_QWORD *)v9 + 2) = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    WebKit::NetworkStorageManager::getDirectoryHandle(a3, (uint64_t)a1, v14, (WTF::String *)&v15, v16, (uint64_t *)&v13);
    result = v13;
    v13 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v17)
    {
LABEL_6:
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::RemoveEntry,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *result;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 **v10;
  unint64_t v11;
  unsigned __int8 **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned __int8 v16;
  char v17;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>>((uint64_t)&v14, a2);
  if (v17)
  {
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v8)
      goto LABEL_6;
    v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v9 = off_1E34B24B0;
    *((_QWORD *)v9 + 1) = v11;
    v10 = v12;
    v12 = 0;
    v13 = v9;
    *((_QWORD *)v9 + 2) = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    WebKit::NetworkStorageManager::removeEntry(a3, v14, (const WTF::String *)&v15, (const WTF::String *)v16, (uint64_t *)&v13);
    result = v13;
    v13 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v17)
    {
LABEL_6:
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::Resolve,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  unint64_t v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  uint64_t v13[2];
  char v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v13, a2);
  if (v14)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B24D8;
      v8[1] = v10;
      v9 = v11;
      v11 = 0;
      v12 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::NetworkStorageManager::resolve(a3, v13[0], v13[1], (uint64_t *)&v12);
      result = (unint64_t)v12;
      v12 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::Move,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int8 **v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;
  unsigned __int8 **v26;

  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v7
    && (v8 = v6,
        v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v10)
    && (v11 = v9, IPC::Decoder::decode<WTF::String>(a2, &v25), (_BYTE)v26))
  {
    v21 = v8;
    v22 = v11;
    v23 = v25;
    v24 = 1;
    v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v13)
      goto LABEL_8;
    v25 = (WTF::StringImpl *)v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v26, a1);
    v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v14 = off_1E34B2500;
    *((_QWORD *)v14 + 1) = v25;
    v15 = v26;
    v26 = 0;
    *((_QWORD *)v14 + 2) = v15;
    v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v26);
    WebKit::NetworkStorageManager::move(a3, v21, v11, (WTF::StringImpl *)&v23, (uint64_t *)&v20);
    result = v20;
    v20 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v24)
    {
LABEL_8:
      result = v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (!v19)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::GetFile,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E34B2528;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::NetworkStorageManager::getFile(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E34B2550;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::NetworkStorageManager::createSyncAccessHandle(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CloseSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unsigned __int8 **v20;
  _QWORD *v21;

  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v7
    && (v8 = v6,
        v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v10))
  {
    v11 = v9;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v13)
    {
      v19 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, a1);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = off_1E34B2578;
      v14[1] = v19;
      v15 = v20;
      v20 = 0;
      v21 = v14;
      v14[2] = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
      WebKit::NetworkStorageManager::closeSyncAccessHandle(a3, v8, v11, (uint64_t *)&v21);
      result = (unint64_t)v21;
      v21 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v18 = v17 == 0;
    else
      v18 = 1;
    if (!v18)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t result;
  char v19;
  _QWORD *v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unsigned __int8 **v30;
  _QWORD *v31;

  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v7
    || (v8 = v6,
        v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        !v10))
  {
LABEL_14:
    v26 = *a2;
    v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v28 = v27 == 0;
    else
      v28 = 1;
    if (!v28)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
    return result;
  }
  v11 = a2[1];
  v12 = *a2;
  v13 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v11 < v13 || v11 - v13 <= 7)
  {
    v22 = 0;
    v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v12, v11);
        v23 = *a2;
        v22 = a2[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
    goto LABEL_13;
  }
  v15 = (unint64_t *)(v12 + v13);
  a2[2] = (uint64_t)(v15 + 1);
  if (!v12)
  {
    v22 = v11;
    v23 = 0;
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25 && v22)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
    goto LABEL_14;
  }
  v16 = v9;
  v17 = *v15;
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v19)
  {
    v29 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v30, a1);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v20 = off_1E34B25A0;
    v20[1] = v29;
    v21 = v30;
    v30 = 0;
    v31 = v20;
    v20[2] = v21;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v30);
    WebKit::NetworkStorageManager::requestNewCapacityForSyncAccessHandle(a3, v8, v16, v17, (uint64_t *)&v31);
    result = (unint64_t)v31;
    v31 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::GetHandleNames,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E34B25C8;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::NetworkStorageManager::getHandleNames(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::GetHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>,WebKit::FileSystemStorageError>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned __int8 **v12;
  WTF::StringImpl *result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  unsigned __int8 **v22;

  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v7 && (v8 = v6, IPC::Decoder::decode<WTF::String>(a2, &v21), (_BYTE)v22))
  {
    v18 = v8;
    v19 = v21;
    v20 = 1;
    v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v10)
      goto LABEL_7;
    v21 = (WTF::StringImpl *)v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a1);
    v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v11 = off_1E34B25F0;
    *((_QWORD *)v11 + 1) = v21;
    v12 = v22;
    v22 = 0;
    *((_QWORD *)v11 + 2) = v12;
    v17 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v22);
    WebKit::NetworkStorageManager::getHandle(a3, (uint64_t)a1, v18, (WTF::String *)&v19, (uint64_t *)&v17);
    result = v17;
    v17 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v20)
    {
LABEL_7:
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v16 = v15 == 0;
    else
      v16 = 1;
    if (!v16)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v14);
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18[2];
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>>(&v15, a2);
  if (v20)
  {
    v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B2618;
      v8[1] = v12;
      v9 = v13;
      v13 = 0;
      v14 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v20)
        __break(1u);
      WebKit::NetworkStorageManager::connectToStorageArea(a3, (uint64_t)a1, v15, v16, v17, v18[0], (WebCore::SecurityOriginData *)&v19, (uint64_t *)&v14);
      v10 = (uint64_t)v14;
      v14 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15);
}

void IPC::handleMessage<Messages::NetworkStorageManager::CancelConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin const&)>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int16 v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  char v14;
  int v15;
  __int128 v16;
  _BYTE v17[24];
  int v18;
  _BYTE v19[24];
  int v20;
  char v21;
  _BYTE v22[32];
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = IPC::Decoder::decode<WebCore::StorageType>(a2);
  if (v6 <= 0xFFu
    || (v7 = v6,
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)&v13, a2), !v14))
  {
    LOBYTE(v15) = 0;
    v21 = 0;
    goto LABEL_6;
  }
  IPC::Decoder::decode<WebCore::ClientOrigin>(a2, v22);
  v8 = v24;
  if (v24)
  {
    LOBYTE(v15) = v7;
    v16 = v13;
    v17[0] = 0;
    v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v22);
    v19[0] = 0;
    v20 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v19, (uint64_t)&v23);
    v8 = 1;
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  v21 = v8;
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22);
  if (!v21)
  {
LABEL_6:
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (v12)
      return;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    if (!v21)
      return;
  }
  WebKit::NetworkStorageManager::cancelConnectToStorageArea(a3, a1, v15, v16, SBYTE8(v16), (WebCore::SecurityOriginData *)v17);
  if (v21)
  {
    if (v20 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v20])(v22, v19);
    v20 = -1;
    if (v18 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v18])(v22, v17);
  }
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::SetItem,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits,WTF::HashTableTraits> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned __int8 **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  unsigned __int8 **v36;

  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v8
    || (v9 = v7,
        v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        !v11)
    || (v3 = v10, IPC::Decoder::decode<WTF::String>(a2, &v31), !v32))
  {
    v16 = 0;
    LOBYTE(v26) = 0;
    v30 = 0;
    goto LABEL_10;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v33);
  if (!v34)
  {
    v16 = 0;
    LOBYTE(v26) = 0;
    v30 = 0;
LABEL_22:
    v14 = 1;
    goto LABEL_23;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v35);
  if (!(_BYTE)v36)
  {
    LOBYTE(v26) = 0;
    v30 = 0;
    if (v34)
    {
      result = v33;
      v33 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          v16 = 0;
          *(_DWORD *)result -= 2;
          goto LABEL_22;
        }
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
    }
    v16 = 0;
    goto LABEL_22;
  }
  if (!v32 || !v34)
  {
    __break(1u);
    return result;
  }
  v14 = 0;
  v26 = v9;
  v15 = v31;
  v31 = 0;
  v27 = v15;
  v28 = v33;
  v29 = v35;
  v16 = 1;
  v30 = 1;
LABEL_23:
  if (v32)
  {
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        if (!v14)
          goto LABEL_28;
LABEL_10:
        v17 = *a2;
        v18 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        result = (WTF::StringImpl *)a2[3];
        if (result)
          v19 = v18 == 0;
        else
          v19 = 1;
        if (!v19)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v17);
        goto LABEL_28;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v14)
    goto LABEL_10;
LABEL_28:
  if (v16)
  {
    v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v21)
      goto LABEL_33;
    v35 = (WTF::StringImpl *)v20;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v36, a1);
    v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v22 = off_1E34B2640;
    *((_QWORD *)v22 + 1) = v35;
    v23 = v36;
    v36 = 0;
    *((_QWORD *)v22 + 2) = v23;
    v33 = v22;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v36);
    WebKit::NetworkStorageManager::setItem(a3, (uint64_t)a1, v26, v3, (uint64_t)&v27, (uint64_t)&v28, (uint64_t)&v29, (uint64_t *)&v33);
    result = v33;
    v33 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v30)
    {
LABEL_33:
      v24 = v29;
      v29 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v21);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = v28;
      v28 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v21);
        else
          *(_DWORD *)v25 -= 2;
      }
      result = v27;
      v27 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::RemoveItem,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits,WTF::HashTableTraits> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned __int8 **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  unsigned __int8 **v29;

  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v7)
  {
    v8 = v6;
    v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v10)
    {
      v11 = v9;
      IPC::Decoder::decode<WTF::String>(a2, &v26);
      if (v27)
      {
        result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v28);
        if ((_BYTE)v29)
        {
          if (v27)
          {
            v23 = v26;
            v24 = v28;
            v25 = 1;
            v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
            if (!(_BYTE)v15)
              goto LABEL_10;
            v28 = (WTF::StringImpl *)v14;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, a1);
            v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v16 = off_1E34B2668;
            *((_QWORD *)v16 + 1) = v28;
            v17 = v29;
            v29 = 0;
            *((_QWORD *)v16 + 2) = v17;
            v26 = v16;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v29);
            WebKit::NetworkStorageManager::removeItem(a3, (uint64_t)a1, v8, v11, (uint64_t)&v23, (uint64_t)&v24, (uint64_t *)&v26);
            result = v26;
            v26 = 0;
            if (result)
              result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
            if (v25)
            {
LABEL_10:
              v18 = v24;
              v24 = 0;
              if (v18)
              {
                if (*(_DWORD *)v18 == 2)
                  WTF::StringImpl::destroy(v18, v15);
                else
                  *(_DWORD *)v18 -= 2;
              }
              result = v23;
              v23 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
                else
                  *(_DWORD *)result -= 2;
              }
            }
          }
          else
          {
            __break(1u);
          }
          return result;
        }
        if (v27)
        {
          v19 = v26;
          v26 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v13);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
      }
    }
  }
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v22 = v21 == 0;
  else
    v22 = 1;
  if (!v22)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v20);
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::Clear,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int8 **v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;
  unsigned __int8 **v26;

  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v7
    && (v8 = v6,
        v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v10)
    && (v11 = v9, IPC::Decoder::decode<WTF::String>(a2, &v25), (_BYTE)v26))
  {
    v21 = v8;
    v22 = v11;
    v23 = v25;
    v24 = 1;
    v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v13)
      goto LABEL_8;
    v25 = (WTF::StringImpl *)v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v26, a1);
    v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v14 = off_1E34B2690;
    *((_QWORD *)v14 + 1) = v25;
    v15 = v26;
    v26 = 0;
    *((_QWORD *)v14 + 2) = v15;
    v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v26);
    WebKit::NetworkStorageManager::clear(a3, (uint64_t)a1, v21, v11, (uint64_t)&v23, (uint64_t *)&v20);
    result = v20;
    v20 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v24)
    {
LABEL_8:
      result = v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (!v19)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::OpenDatabase,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBOpenRequestData const&)>(void **a1, uint64_t *a2, uint64_t **a3)
{
  WTF::StringImpl *v5;
  _BYTE v7[128];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::IDBOpenRequestData>>(v7, a2);
  if (v7[120])
    WebKit::NetworkStorageManager::openDatabase(a3, a1, (const WebCore::IDBOpenRequestData *)v7);
  return std::__optional_destruct_base<std::tuple<WebCore::IDBOpenRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::OpenDBRequestCancelled,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBOpenRequestData const&)>(uint64_t *a1, WebKit::NetworkStorageManager *a2)
{
  WTF::StringImpl *v3;
  _BYTE v5[128];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::IDBOpenRequestData>>(v5, a1);
  if (v5[120])
    WebKit::NetworkStorageManager::openDBRequestCancelled(a2, (const WebCore::IDBOpenRequestData *)v5);
  return std::__optional_destruct_base<std::tuple<WebCore::IDBOpenRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::DeleteDatabase,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBOpenRequestData const&)>(void **a1, uint64_t *a2, uint64_t **a3)
{
  WTF::StringImpl *v5;
  _BYTE v7[128];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::IDBOpenRequestData>>(v7, a2);
  if (v7[120])
    WebKit::NetworkStorageManager::deleteDatabase(a3, a1, (const WebCore::IDBOpenRequestData *)v7);
  return std::__optional_destruct_base<std::tuple<WebCore::IDBOpenRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::EstablishTransaction,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBTransactionInfo const&)>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  bmalloc::api *v8;
  bmalloc::api *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD v14[2];
  bmalloc::api *v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  bmalloc::api *v20;
  char v21;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (v5)
  {
    v6 = (void *)v4;
    IPC::Decoder::decode<WebCore::IDBTransactionInfo>(a1, (uint64_t)&v17);
    if (v21)
    {
      v14[0] = v18;
      v7 = v19;
      v18 = 0;
      v19 = 0;
      v14[1] = v7;
      v8 = v20;
      v20 = 0;
      v15 = v8;
      v16 = 1;
      std::__optional_destruct_base<WebCore::IDBTransactionInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17);
      WebKit::NetworkStorageManager::establishTransaction(a2, v6);
      v9 = v15;
      v15 = 0;
      if (v9)
        std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&v15, v9);
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v9);
    }
    std::__optional_destruct_base<WebCore::IDBTransactionInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17);
  }
  v11 = *a1;
  v12 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v11);
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::NetworkStorageManager::CreateObjectStore,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)>(uint64_t *a1, WebKit::NetworkStorageManager *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _OWORD v13[6];
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _BYTE v17[16];
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  _OWORD v23[6];
  uint64_t v24;
  char v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _BYTE v28[40];
  uint64_t v29;
  char v30;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v23, a1);
  if (!v25)
  {
    LOBYTE(v13[0]) = 0;
    v22 = 0;
    goto LABEL_22;
  }
  result = IPC::Decoder::decode<WebCore::IDBObjectStoreInfo>(a1, (uint64_t)&v26);
  v6 = v30;
  if (v30)
  {
    if (!v25)
    {
      __break(1u);
      return result;
    }
    v13[4] = v23[4];
    v13[5] = v23[5];
    v13[0] = v23[0];
    v13[1] = v23[1];
    v13[2] = v23[2];
    v13[3] = v23[3];
    v7 = v27;
    v14 = v24;
    v15 = v26;
    v27 = 0;
    v16 = v7;
    v17[0] = 0;
    v19 = 0;
    if (v28[24])
    {
      v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v28);
      v19 = 1;
    }
    v20 = v28[32];
    v8 = v29;
    v29 = 0;
    v21 = v8;
    v6 = 1;
  }
  else
  {
    LOBYTE(v13[0]) = 0;
  }
  v22 = v6;
  std::__optional_destruct_base<WebCore::IDBObjectStoreInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v5);
  if (!v22)
  {
LABEL_22:
    v10 = *a1;
    v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (v12)
      return result;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v10);
    if (!v22)
      return result;
  }
  result = WebKit::NetworkStorageManager::createObjectStore(a2, (const WebCore::IDBRequestData *)v13, (const WebCore::IDBObjectStoreInfo *)&v15);
  if (v22)
  {
    if (v21)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v21, v9);
    if (v19)
    {
      if (v18 != -1)
        ((void (*)(_OWORD *, _BYTE *))off_1E34B26A8[v18])(v23, v17);
      v18 = -1;
    }
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::NetworkStorageManager::CreateIndex,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)>(uint64_t *a1, WebKit::NetworkStorageManager *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _OWORD v12[6];
  uint64_t v13;
  __int128 v14;
  WTF::StringImpl *v15;
  _BYTE v16[16];
  int v17;
  __int16 v18;
  char v19;
  _OWORD v20[6];
  uint64_t v21;
  char v22;
  __int128 v23;
  WTF::StringImpl *v24;
  _WORD v25[16];
  char v26;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v20, a1);
  if (!v22)
  {
    LOBYTE(v12[0]) = 0;
    v19 = 0;
    goto LABEL_16;
  }
  result = IPC::Decoder::decode<WebCore::IDBIndexInfo>(a1, (uint64_t)&v23);
  v6 = v26;
  if (v26)
  {
    if (!v22)
    {
      __break(1u);
      return result;
    }
    v12[4] = v20[4];
    v12[5] = v20[5];
    v13 = v21;
    v12[0] = v20[0];
    v12[1] = v20[1];
    v12[2] = v20[2];
    v12[3] = v20[3];
    v14 = v23;
    v7 = v24;
    v24 = 0;
    v15 = v7;
    v16[0] = 0;
    v17 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>((uint64_t)v16, (uint64_t)v25);
    v18 = v25[12];
    v6 = 1;
  }
  else
  {
    LOBYTE(v12[0]) = 0;
  }
  v19 = v6;
  std::__optional_destruct_base<WebCore::IDBIndexInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v5);
  if (!v19)
  {
LABEL_16:
    v9 = *a1;
    v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (v11)
      return result;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
    if (!v19)
      return result;
  }
  result = (WTF::StringImpl *)WebKit::NetworkStorageManager::createIndex(a2, (const WebCore::IDBRequestData *)v12, (const WebCore::IDBIndexInfo *)&v14);
  if (v19)
  {
    if (v17 != -1)
      ((void (*)(_OWORD *, _BYTE *))off_1E34B26A8[v17])(v20, v16);
    v17 = -1;
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void IPC::handleMessage<Messages::NetworkStorageManager::PutOrAdd,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  WTF *v27;
  _OWORD v28[6];
  uint64_t v29;
  char v30[8];
  _BYTE v31[16];
  int v32;
  WTF *v33[2];
  uint64_t v34;
  _QWORD v35[2];
  char v36;
  char v37;
  _OWORD v38[6];
  uint64_t v39;
  unsigned __int8 v40;
  char v41[8];
  _BYTE v42[16];
  int v43;
  unsigned __int8 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v38, a2);
  if (!v40)
  {
    LOBYTE(v28[0]) = 0;
    v37 = 0;
    goto LABEL_12;
  }
  IPC::Decoder::decode<WebCore::IDBKeyData>(a2, v41);
  if (!v44)
  {
    LOBYTE(v28[0]) = 0;
    v37 = 0;
    goto LABEL_26;
  }
  v6 = IPC::Decoder::decode<WebCore::IDBValue>(a2, (uint64_t)&v45);
  v8 = v49;
  if (!v49)
    goto LABEL_22;
  v9 = a2[1];
  v7 = (char *)*a2;
  v10 = a2[2] - *a2;
  if (v9 <= v10)
  {
    v14 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v12 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v12 = 0;
      }
    }
LABEL_19:
    v9 = 0;
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      goto LABEL_36;
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22 && v9)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v7);
    v8 = 0;
LABEL_22:
    LOBYTE(v28[0]) = 0;
    goto LABEL_23;
  }
  v11 = &v7[v10];
  v12 = (uint64_t)(v11 + 1);
  a2[2] = (uint64_t)(v11 + 1);
  if (!v7)
  {
    v14 = v9;
    v12 = 0;
    goto LABEL_19;
  }
  v13 = *v11;
  if (v13 >= 3)
    goto LABEL_20;
  v14 = v40;
  if (!v40 || (v14 = v44) == 0)
  {
    __break(1u);
LABEL_36:
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v12, v14);
      v7 = (char *)*a2;
      v9 = a2[1];
    }
    else
    {
      v9 = 0;
      v7 = 0;
    }
    goto LABEL_20;
  }
  v28[4] = v38[4];
  v28[5] = v38[5];
  v29 = v39;
  v28[0] = v38[0];
  v28[1] = v38[1];
  v28[2] = v38[2];
  v28[3] = v38[3];
  v30[0] = v41[0];
  v31[0] = 0;
  v32 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v31, (uint64_t)v42);
  v15 = v45;
  v45 = 0uLL;
  *(_OWORD *)v33 = v15;
  *(_QWORD *)&v15 = v46;
  v46 = 0;
  v34 = v15;
  v16 = v47;
  v47 = 0;
  v35[0] = v16;
  *(_QWORD *)&v15 = v48;
  v48 = 0;
  v35[1] = v15;
  v8 = 1;
  v36 = v13;
LABEL_23:
  v37 = v8;
  v23 = std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v7);
  if (v44 && v43 != -1)
    ((void (*)(uint64_t, _BYTE *))off_1E34B26B8[v43])(v23, v42);
LABEL_26:
  if (!v37)
  {
LABEL_12:
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
      v20 = v18 == 0;
    else
      v20 = 1;
    if (v20)
      return;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
    if (!v37)
      return;
  }
  WebKit::NetworkStorageManager::putOrAdd(a3, a1, (WebCore::IDBRequestData *)v28, (uint64_t)v30, (uint64_t)v33);
  if (v37)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v24);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33[1], v25);
    v27 = v33[0];
    v33[0] = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref((uint64_t)v27, v26);
    if (v32 != -1)
      ((void (*)(_OWORD *, _BYTE *))off_1E34B26B8[v32])(v38, v31);
  }
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::GetRecord,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _OWORD v11[6];
  uint64_t v12;
  char v13;
  _BYTE v14[16];
  int v15;
  char v16;
  _BYTE v17[16];
  int v18;
  __int16 v19;
  char v20;
  char v21;
  _OWORD v22[6];
  uint64_t v23;
  char v24;
  _BYTE v25[8];
  _BYTE v26[16];
  int v27;
  char v28;
  _BYTE v29[16];
  int v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v22, a1);
  if (!v24)
  {
    LOBYTE(v11[0]) = 0;
    v21 = 0;
    goto LABEL_17;
  }
  v4 = IPC::ArgumentCoder<WebCore::IDBGetRecordData,void>::decode(a1, (uint64_t)v25);
  if (v33)
  {
    while (!v24)
    {
      __break(1u);
LABEL_26:
      if (v6)
      {
        v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
        if (v33)
          continue;
      }
      goto LABEL_24;
    }
    v11[4] = v22[4];
    v11[5] = v22[5];
    v12 = v23;
    v11[0] = v22[0];
    v11[1] = v22[1];
    v11[2] = v22[2];
    v11[3] = v22[3];
    v13 = v25[0];
    v14[0] = 0;
    v15 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v26);
    v16 = v28;
    v17[0] = 0;
    v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v29);
    v19 = v31;
    v20 = v32;
    v21 = 1;
    if (v33)
    {
      if (v30 != -1)
        ((void (*)(char *, _BYTE *))off_1E34B26B8[v30])(&v34, v29);
      v30 = -1;
      if (v27 != -1)
        ((void (*)(char *, _BYTE *))off_1E34B26B8[v27])(&v34, v26);
    }
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v4 = a1[3];
    if (v4)
      goto LABEL_26;
LABEL_24:
    LOBYTE(v11[0]) = 0;
    v21 = 0;
  }
  if (!v21)
  {
LABEL_17:
    v8 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
      return result;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    if (!v21)
      return result;
  }
  result = WebKit::NetworkStorageManager::getRecord(a2, (WebCore::IDBRequestData *)v11);
  if (v21)
  {
    if (v18 != -1)
      result = ((uint64_t (*)(_OWORD *, _BYTE *))off_1E34B26B8[v18])(v22, v17);
    v18 = -1;
    if (v15 != -1)
      return ((uint64_t (*)(_OWORD *, _BYTE *))off_1E34B26B8[v15])(v22, v14);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::GetAllRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _OWORD v11[6];
  uint64_t v12;
  char v13;
  _BYTE v14[16];
  int v15;
  char v16;
  _BYTE v17[16];
  int v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _OWORD v23[6];
  uint64_t v24;
  char v25;
  _BYTE v26[8];
  _BYTE v27[16];
  int v28;
  char v29;
  _BYTE v30[16];
  int v31;
  __int16 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v23, a1);
  if (!v25)
  {
    LOBYTE(v11[0]) = 0;
    v22 = 0;
    goto LABEL_17;
  }
  v4 = IPC::ArgumentCoder<WebCore::IDBGetAllRecordsData,void>::decode(a1, (uint64_t)v26);
  if (v35)
  {
    while (!v25)
    {
      __break(1u);
LABEL_26:
      if (v6)
      {
        v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
        if (v35)
          continue;
      }
      goto LABEL_24;
    }
    v11[4] = v23[4];
    v11[5] = v23[5];
    v12 = v24;
    v11[0] = v23[0];
    v11[1] = v23[1];
    v11[2] = v23[2];
    v11[3] = v23[3];
    v13 = v26[0];
    v14[0] = 0;
    v15 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v27);
    v16 = v29;
    v17[0] = 0;
    v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v30);
    v19 = v32;
    v20 = v33;
    v21 = v34;
    v22 = 1;
    if (v35)
    {
      if (v31 != -1)
        ((void (*)(char *, _BYTE *))off_1E34B26B8[v31])(&v36, v30);
      v31 = -1;
      if (v28 != -1)
        ((void (*)(char *, _BYTE *))off_1E34B26B8[v28])(&v36, v27);
    }
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v4 = a1[3];
    if (v4)
      goto LABEL_26;
LABEL_24:
    LOBYTE(v11[0]) = 0;
    v22 = 0;
  }
  if (!v22)
  {
LABEL_17:
    v8 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
      return result;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    if (!v22)
      return result;
  }
  result = WebKit::NetworkStorageManager::getAllRecords(a2, (WebCore::IDBRequestData *)v11);
  if (v22)
  {
    if (v18 != -1)
      result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34B26B8[v18])(v26, v17);
    v18 = -1;
    if (v15 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34B26B8[v15])(v26, v14);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::GetCount,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)>(uint64_t *a1, uint64_t a2)
{
  _BYTE v4[184];

  IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>>((uint64_t)v4, a1);
  if (v4[176])
    WebKit::NetworkStorageManager::getCount(a2, (WebCore::IDBRequestData *)v4);
  return std::__optional_destruct_base<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::DeleteRecord,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)>(uint64_t *a1, uint64_t a2)
{
  _BYTE v4[184];

  IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>>((uint64_t)v4, a1);
  if (v4[176])
    WebKit::NetworkStorageManager::deleteRecord(a2, (WebCore::IDBRequestData *)v4);
  return std::__optional_destruct_base<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::OpenCursor,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _OWORD v11[6];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _BYTE v17[16];
  int v18;
  char v19;
  _BYTE v20[16];
  int v21;
  __int16 v22;
  __int16 v23;
  char v24;
  char v25;
  _OWORD v26[6];
  uint64_t v27;
  char v28;
  _OWORD v29[3];
  char v30;
  _BYTE v31[16];
  int v32;
  char v33;
  _BYTE v34[16];
  int v35;
  __int16 v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v26, a1);
  if (!v28)
  {
    LOBYTE(v11[0]) = 0;
    v25 = 0;
    goto LABEL_17;
  }
  v4 = IPC::ArgumentCoder<WebCore::IDBCursorInfo,void>::decode(a1, (uint64_t)v29);
  if (v39)
  {
    while (!v28)
    {
      __break(1u);
LABEL_26:
      if (v6)
      {
        v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
        if (v39)
          continue;
      }
      goto LABEL_24;
    }
    v11[4] = v26[4];
    v11[5] = v26[5];
    v12 = v27;
    v11[0] = v26[0];
    v11[1] = v26[1];
    v11[2] = v26[2];
    v11[3] = v26[3];
    v15 = v29[2];
    v14 = v29[1];
    v13 = v29[0];
    v16 = v30;
    v17[0] = 0;
    v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v31);
    v19 = v33;
    v20[0] = 0;
    v21 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v20, (uint64_t)v34);
    v22 = v36;
    v23 = v37;
    v24 = v38;
    v25 = 1;
    if (v39)
    {
      if (v35 != -1)
        ((void (*)(char *, _BYTE *))off_1E34B26B8[v35])(&v40, v34);
      v35 = -1;
      if (v32 != -1)
        ((void (*)(char *, _BYTE *))off_1E34B26B8[v32])(&v40, v31);
    }
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v4 = a1[3];
    if (v4)
      goto LABEL_26;
LABEL_24:
    LOBYTE(v11[0]) = 0;
    v25 = 0;
  }
  if (!v25)
  {
LABEL_17:
    v8 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
      return result;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    if (!v25)
      return result;
  }
  result = WebKit::NetworkStorageManager::openCursor(a2, (WebCore::IDBRequestData *)v11);
  if (v25)
  {
    if (v21 != -1)
      result = ((uint64_t (*)(_OWORD *, _BYTE *))off_1E34B26B8[v21])(v29, v20);
    v21 = -1;
    if (v18 != -1)
      return ((uint64_t (*)(_OWORD *, _BYTE *))off_1E34B26B8[v18])(v29, v17);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::IterateCursor,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _OWORD v11[6];
  uint64_t v12;
  char v13;
  _BYTE v14[16];
  int v15;
  char v16;
  _BYTE v17[16];
  int v18;
  int v19;
  char v20;
  char v21;
  _OWORD v22[6];
  uint64_t v23;
  char v24;
  _BYTE v25[8];
  _BYTE v26[16];
  int v27;
  char v28;
  _BYTE v29[16];
  int v30;
  int v31;
  char v32;
  char v33;
  char v34;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v22, a1);
  if (!v24)
  {
    LOBYTE(v11[0]) = 0;
    v21 = 0;
    goto LABEL_17;
  }
  v4 = IPC::ArgumentCoder<WebCore::IDBIterateCursorData,void>::decode(a1, (uint64_t)v25);
  if (v33)
  {
    while (!v24)
    {
      __break(1u);
LABEL_26:
      if (v6)
      {
        v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
        if (v33)
          continue;
      }
      goto LABEL_24;
    }
    v11[4] = v22[4];
    v11[5] = v22[5];
    v12 = v23;
    v11[0] = v22[0];
    v11[1] = v22[1];
    v11[2] = v22[2];
    v11[3] = v22[3];
    v13 = v25[0];
    v14[0] = 0;
    v15 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v26);
    v16 = v28;
    v17[0] = 0;
    v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v29);
    v19 = v31;
    v20 = v32;
    v21 = 1;
    if (v33)
    {
      if (v30 != -1)
        ((void (*)(char *, _BYTE *))off_1E34B26B8[v30])(&v34, v29);
      v30 = -1;
      if (v27 != -1)
        ((void (*)(char *, _BYTE *))off_1E34B26B8[v27])(&v34, v26);
    }
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v4 = a1[3];
    if (v4)
      goto LABEL_26;
LABEL_24:
    LOBYTE(v11[0]) = 0;
    v21 = 0;
  }
  if (!v21)
  {
LABEL_17:
    v8 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
      return result;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    if (!v21)
      return result;
  }
  result = WebKit::NetworkStorageManager::iterateCursor(a2, (WebCore::IDBRequestData *)v11);
  if (v21)
  {
    if (v18 != -1)
      result = ((uint64_t (*)(_OWORD *, _BYTE *))off_1E34B26B8[v18])(v22, v17);
    v18 = -1;
    if (v15 != -1)
      return ((uint64_t (*)(_OWORD *, _BYTE *))off_1E34B26B8[v15])(v22, v14);
  }
  return result;
}

WTF *IPC::handleMessage<Messages::NetworkStorageManager::GetAllDatabaseNamesAndVersions,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)>(void **a1, uint64_t *a2, uint64_t **a3)
{
  char v6;
  WTF *result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v12;
  _BYTE v13[24];
  int v14;
  _BYTE v15[24];
  int v16;
  char v17;
  _BYTE v18[32];
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v10);
  if (!v11)
  {
    LOBYTE(v12) = 0;
    v17 = 0;
    goto LABEL_14;
  }
  IPC::Decoder::decode<WebCore::ClientOrigin>(a2, v18);
  v6 = v20;
  if (v20)
  {
    if (!v11)
      __break(1u);
    v12 = v10;
    v13[0] = 0;
    v14 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)v18);
    v15[0] = 0;
    v16 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, (uint64_t)&v19);
    v6 = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
  }
  v17 = v6;
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
  if (!v17)
  {
LABEL_14:
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (!result)
      return result;
    if (!v9)
      return result;
    result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    if (!v17)
      return result;
  }
  result = WebKit::NetworkStorageManager::getAllDatabaseNamesAndVersions(a3, a1, (const WebCore::IDBResourceIdentifier *)&v12, (const WebCore::ClientOrigin *)v13);
  if (v17)
  {
    if (v16 != -1)
      result = (WTF *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v16])(v18, v15);
    v16 = -1;
    if (v14 != -1)
      return (WTF *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v14])(v18, v13);
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageOpenCache,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  _QWORD *v10;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _BYTE v15[64];
  const WTF::StringImpl *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String>>(a2, v15);
  if (v17)
  {
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v6)
    {
      v12 = v7;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B2710;
      v8[1] = v12;
      v9 = v13;
      v13 = 0;
      v14 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v17)
        __break(1u);
      WebKit::NetworkStorageManager::cacheStorageOpenCache(a3, (const WebCore::ClientOrigin *)v15, &v16, (unsigned int *)&v14);
      v10 = v14;
      v14 = 0;
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v6);
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRemoveCache,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error> const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  unint64_t v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  uint64_t v13[2];
  char v14;

  result = IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v13, a2);
  if (v14)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B2738;
      v8[1] = v10;
      v9 = v11;
      v11 = 0;
      v12 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::NetworkStorageManager::cacheStorageRemoveCache(a3, v13[0], v13[1], (uint64_t *)&v12);
      result = (unint64_t)v12;
      v12 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageAllCaches,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  _QWORD *v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE v24[24];
  int v25;
  _BYTE v26[24];
  int v27;
  void *v28;
  char v29;
  unint64_t v30;
  unsigned __int8 **v31[3];
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a2, &v30);
  v6 = v33;
  if (!v33)
  {
LABEL_12:
    v24[0] = 0;
    goto LABEL_13;
  }
  v7 = a2[1];
  v8 = *a2;
  v9 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v7 < v9 || v7 - v9 <= 7)
  {
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v8, v7);
        v14 = *a2;
        v13 = a2[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_10;
  }
  v11 = (void **)(v8 + v9);
  a2[2] = (uint64_t)(v11 + 1);
  if (!v8)
  {
    v13 = v7;
    v14 = 0;
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
    v6 = 0;
    goto LABEL_12;
  }
  v12 = *v11;
  v24[0] = 0;
  v25 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v24, (uint64_t)&v30);
  v26[0] = 0;
  v27 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v26, (uint64_t)&v32);
  v28 = v12;
  v6 = 1;
LABEL_13:
  v29 = v6;
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30);
  if (v29
    || (v21 = *a2, v22 = a2[1], *a2 = 0, a2[1] = 0, (result = a2[3]) != 0)
    && v22
    && (result = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21), v29))
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v18)
    {
      v30 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v31, a1);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v19 = off_1E34B2760;
      v19[1] = v30;
      v20 = v31[0];
      v31[0] = 0;
      v19[2] = v20;
      v23 = v19;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v31);
      if (!v29)
        __break(1u);
      WebKit::NetworkStorageManager::cacheStorageAllCaches(a3, (const WebCore::ClientOrigin *)v24, v28, (uint64_t *)&v23);
      result = (unint64_t)v23;
      v23 = 0;
      if (result)
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
    if (v29)
    {
      if (v27 != -1)
        result = ((uint64_t (*)(unint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v27])(&v30, v26);
      v27 = -1;
      if (v25 != -1)
        return ((uint64_t (*)(unint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v25])(&v30, v24);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::LockCacheStorage,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin const&)>(IPC::Connection *a1, uint64_t *a2, WebKit::NetworkStorageManager *a3)
{
  _BYTE v6[72];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v6);
  if (v6[64])
    WebKit::NetworkStorageManager::lockCacheStorage(a3, a1, (const WebCore::ClientOrigin *)v6);
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::UnlockCacheStorage,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin const&)>(IPC::Connection *a1, uint64_t *a2, WebKit::NetworkStorageManager *a3)
{
  _BYTE v6[72];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v6);
  if (v6[64])
    WebKit::NetworkStorageManager::unlockCacheStorage(a3, a1, (const WebCore::ClientOrigin *)v6);
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
}

void IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  WTF::StringImpl *v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  const void *v17;
  __int128 v18;
  WTF *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  CFTypeRef v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  CFTypeRef cf;
  __int16 v54;
  WTF::StringImpl *v55[2];
  WTF *v56;
  int v57;
  char v58;
  __int128 v59;
  char v60;
  unint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  const void *v79;
  __int16 v80;
  __int128 v81;
  WTF *v82;
  int v83;
  char v84;

  v4 = a2;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v59);
  if (!v60)
    goto LABEL_27;
  IPC::Decoder::decode<WebCore::RetrieveRecordsOptions>(v4, (uint64_t)&v61);
  v7 = v84;
  if (v84)
  {
    if (!v60)
      goto LABEL_26;
    v33 = v59;
    v8 = v61;
    v9 = v63;
    v61 = 0;
    v34 = v8;
    v35 = v62[0];
    v36 = v62[1];
    LODWORD(v62[0]) &= ~1u;
    v63 = 0;
    v37 = v9;
    v38 = v64;
    v39 = v65;
    LODWORD(v64) = v64 & 0xFFFFFFFE;
    v10 = v68;
    v40 = v66;
    v11 = v67;
    v67 = 0u;
    v41 = v11;
    v68 = 0;
    v42 = v10;
    v12 = v69;
    v69 = 0;
    v43 = v12;
    v13 = v70;
    v70 = 0;
    v44 = v13;
    v14 = v71;
    v71 = 0;
    v45 = v14;
    v15 = v72;
    v72 = 0;
    v46 = v15;
    v48 = v74;
    v47 = v73;
    v16 = v75;
    v75 = 0u;
    v49 = v16;
    v52 = v78;
    v50 = v76;
    v51 = v77;
    v17 = v79;
    v76 = 0;
    v79 = 0;
    cf = v17;
    v54 = v80;
    v18 = v81;
    v81 = 0u;
    *(_OWORD *)v55 = v18;
    v19 = v82;
    v82 = 0;
    v56 = v19;
    v7 = 1;
    v57 = v83;
  }
  else
  {
    LOBYTE(v33) = 0;
  }
  v58 = v7;
  std::__optional_destruct_base<WebCore::RetrieveRecordsOptions,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v61, v6);
  if (!v58)
    goto LABEL_28;
  while (1)
  {
    v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
    if (!(_BYTE)v21)
      break;
    v61 = v20;
    v4 = (uint64_t *)v62;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v62, a1);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v22 = off_1E34B2788;
    v22[1] = v61;
    v23 = *(_QWORD *)&v62[0];
    *(_QWORD *)&v62[0] = 0;
    v22[2] = v23;
    *(_QWORD *)&v59 = v22;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v62);
    if (v58)
    {
      WebKit::NetworkStorageManager::cacheStorageRetrieveRecords(a3, v33, *((uint64_t *)&v33 + 1), (WebCore::ResourceRequestBase *)&v34, (uint64_t *)&v59);
      v24 = v59;
      *(_QWORD *)&v59 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    LOBYTE(v33) = 0;
    v58 = 0;
LABEL_28:
    v29 = *v4;
    v30 = v4[1];
    *v4 = 0;
    v4[1] = 0;
    v31 = v4[3];
    if (v31)
      v32 = v30 == 0;
    else
      v32 = 1;
    if (!v32)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
      if (v58)
        continue;
    }
    return;
  }
  if (v58)
  {
    v25 = v56;
    v56 = 0;
    if (v25)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v25, v21);
    v26 = v55[1];
    v55[1] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v21);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v55[0];
    v55[0] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v21);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = cf;
    cf = 0;
    if (v28)
      CFRelease(v28);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v34);
  }
}

void IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRemoveRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  unsigned __int8 **v18;
  uint64_t v19;
  CFTypeRef v20;
  __int128 v21;
  _BYTE v22[192];
  CFTypeRef cf;
  __int16 v24;
  char v25;
  char v26;
  __int128 v27;
  char v28;
  unint64_t v29;
  unsigned __int8 **v30[24];
  char v31;

  v4 = a2;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v27);
  if (!v28)
  {
    LOBYTE(v21) = 0;
    v26 = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<WebCore::ResourceRequest>(v4, (uint64_t)&v29);
  v6 = v31;
  if (!v31)
    goto LABEL_16;
  v7 = IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::decode(v4);
  if (!BYTE3(v7))
  {
    v8 = *v4;
    v9 = v4[1];
    *v4 = 0;
    v4[1] = 0;
    v7 = v4[3];
    if (v7)
      goto LABEL_28;
    goto LABEL_15;
  }
  if (!v28 || !v31)
    goto LABEL_27;
  v10 = v7;
  v21 = v27;
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v22, (uint64_t)&v29);
  v25 = BYTE2(v10);
  v24 = v10;
  v6 = 1;
  while (1)
  {
    v26 = v6;
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v29);
    if (!v26)
    {
LABEL_8:
      v11 = *v4;
      v12 = v4[1];
      *v4 = 0;
      v4[1] = 0;
      v13 = v4[3];
      if (v13)
        v14 = v12 == 0;
      else
        v14 = 1;
      if (v14)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
      if (!v26)
        return;
    }
    v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
    if (!v16)
      break;
    v29 = v15;
    v4 = (uint64_t *)v30;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v30, a1);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v17 = off_1E34B27B0;
    v17[1] = v29;
    v18 = v30[0];
    v30[0] = 0;
    v17[2] = v18;
    *(_QWORD *)&v27 = v17;
    v7 = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v30);
    if (v26)
    {
      WebKit::NetworkStorageManager::cacheStorageRemoveRecords(a3, v21, *((uint64_t *)&v21 + 1), (WebCore::ResourceRequestBase *)v22, (uint64_t)&v24, (uint64_t *)&v27);
      v19 = v27;
      *(_QWORD *)&v27 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      break;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    if (v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8);
LABEL_15:
    v6 = 0;
LABEL_16:
    LOBYTE(v21) = 0;
  }
  if (v26)
  {
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v22);
  }
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStoragePutRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  void *v6;
  uint64_t result;
  void *v8;
  unsigned __int8 **v9;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  __int128 v17;
  uint64_t v18[2];
  char v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  unsigned __int8 **v23;
  char v24;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v20);
  if (v21
    && (result = IPC::Decoder::decode<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v6, (uint64_t)&v22), v24))
  {
    if (!v21)
      goto LABEL_16;
    v17 = v20;
    v18[0] = v22;
    v9 = v23;
    v22 = 0;
    v23 = 0;
    v18[1] = (uint64_t)v9;
    v19 = 1;
    WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v8);
    v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v11)
      return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v11);
    v22 = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v23, a1);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = off_1E34B27F0;
    v12[1] = v22;
    v13 = v23;
    v23 = 0;
    v12[2] = v13;
    *(_QWORD *)&v20 = v12;
    result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
    if (v19)
    {
      WebKit::NetworkStorageManager::cacheStoragePutRecords(a3, v17, *((uint64_t *)&v17 + 1), v18, (uint64_t *)&v20);
      result = v20;
      *(_QWORD *)&v20 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      if (v19)
        return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v11);
    }
    else
    {
LABEL_16:
      __break(1u);
    }
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v16 = v15 == 0;
    else
      v16 = 1;
    if (!v16)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v14);
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _BYTE v15[64];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B2818;
      v8[1] = v12;
      v9 = v13;
      v13 = 0;
      v14 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16)
        __break(1u);
      WebKit::NetworkStorageManager::cacheStorageClearMemoryRepresentation(a3, (uint64_t)v15, (uint64_t *)&v14);
      v10 = (uint64_t)v14;
      v14 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

unint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRepresentation,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v6;
  _QWORD *v7;
  unsigned __int8 **v8;
  unint64_t v9;
  unsigned __int8 **v10;
  _QWORD *v11;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v6)
  {
    v9 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = off_1E34B2840;
    v7[1] = v9;
    v8 = v10;
    v10 = 0;
    v11 = v7;
    v7[2] = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    WebKit::NetworkStorageManager::cacheStorageRepresentation(a3, &v11);
    result = (unint64_t)v11;
    v11 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::ResetQuotaUpdatedBasedOnUsageForTesting,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin &&)>(uint64_t *a1, uint64_t a2)
{
  _BYTE v4[72];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a1, v4);
  if (v4[64])
    WebKit::NetworkStorageManager::resetQuotaUpdatedBasedOnUsageForTesting(a2, (uint64_t)v4);
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[64])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[72];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v4);
  if (v4[64])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>((uint64_t)v4, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[64] = 0;
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  if (*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a2, a1);
    *(_BYTE *)(a2 + 32) = 0;
    v4 = a2 + 32;
    *(_DWORD *)(v4 + 24) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v4, a1 + 32);
    *(_BYTE *)(v4 + 32) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9PersistedEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2398;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9PersistedEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2398;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9PersistedEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3036;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v2])(&v5, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v3])(&v6, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7PersistEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B23C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7PersistEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B23C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7PersistEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3035;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager8EstimateEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt3__18optionalINS9_15StorageEstimateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B23E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager8EstimateEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt3__18optionalINS9_15StorageEstimateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B23E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager8EstimateEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt3__18optionalINS9_15StorageEstimateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3026;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v20 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(_QWORD *)(v5 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_17;
    v10 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v19 = *(void **)(v5 + 528);
    if (v19 != (void *)(v5 + 16))
      munmap(v19, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v18;
    v11 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v10 = *(char **)(v5 + 528);
    v11 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v5 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  if (v6)
  {
    *v12 = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v5, (uint64_t *)a2);
      goto LABEL_7;
    }
    result = (char *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_17:
    __break(0xC471u);
    return result;
  }
  *v12 = 0;
LABEL_7:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22FileSystemGetDirectoryEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEON7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_23ObjectIdentifierGenericINSB_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2410;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22FileSystemGetDirectoryEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEON7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_23ObjectIdentifierGenericINSB_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2410;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22FileSystemGetDirectoryEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEON7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_23ObjectIdentifierGenericINSB_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3027;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(uint64_t a1, char *a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  v4 = *((_DWORD *)a2 + 2);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_23;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (v4)
  {
    *v10 = 0;
    if (*((_DWORD *)a2 + 2) == 1)
    {
      v11 = *a2;
      v12 = *(_QWORD *)(a1 + 544);
      v13 = v12 + 1;
      v14 = *(_QWORD *)(a1 + 552);
      if (v14 >= v12 + 1)
      {
        v15 = *(char **)(a1 + 528);
        v16 = *(_QWORD *)(a1 + 544);
LABEL_7:
        bzero(&v15[v16], v12 - v16);
        *(_QWORD *)(a1 + 544) = v13;
        v17 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v12);
        *(_QWORD *)(a1 + 536) = v17 + 1;
        *v17 = v11;
        return;
      }
      v22 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v23 = v22;
        v22 *= 2;
      }
      while (v23 < v13);
      v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
      if (v24 != (char *)-1)
      {
        v15 = v24;
        memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
        v25 = *(void **)(a1 + 528);
        if (v25 != (void *)(a1 + 16))
          munmap(v25, *(_QWORD *)(a1 + 552));
        *(_QWORD *)(a1 + 528) = v15;
        *(_QWORD *)(a1 + 552) = v23;
        v16 = *(_QWORD *)(a1 + 544);
        goto LABEL_7;
      }
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x196F8A514);
    }
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_23;
  }
  *v10 = 1;
  if (*((_DWORD *)a2 + 2))
    goto LABEL_22;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, (uint64_t *)a2);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4,
        result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v8))
  {
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = result;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11IsSameEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESE_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2438;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11IsSameEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESE_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2438;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11IsSameEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESE_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3033;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String,BOOL>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  _QWORD *result;
  unint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned __int8 v26;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5)
  {
    v6 = v4;
    result = IPC::Decoder::decode<WTF::String>(a2, &v25);
    if (v26)
    {
      v8 = a2[1];
      v9 = (WTF::StringImpl *)*a2;
      v10 = a2[2] - *a2;
      if (v8 <= v10)
      {
        v18 = 0;
        v19 = 0;
        *a2 = 0;
        a2[1] = 0;
        v20 = a2[3];
        if (v20)
        {
          if (v8)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
            v19 = *a2;
            v18 = a2[1];
          }
          else
          {
            v18 = 0;
            v19 = 0;
          }
        }
      }
      else
      {
        v11 = (unsigned __int8 *)v9 + v10;
        a2[2] = (uint64_t)(v11 + 1);
        if (v9)
        {
          v12 = *v11;
          if (v12 < 2)
          {
            v17 = v12 == 0;
            v13 = v25;
            v14 = !v17;
            *(_QWORD *)a1 = v6;
            *(_QWORD *)(a1 + 8) = v13;
            *(_BYTE *)(a1 + 16) = v14;
            *(_BYTE *)(a1 + 24) = 1;
            return result;
          }
          goto LABEL_19;
        }
        v18 = v8;
        v19 = 0;
      }
      v8 = 0;
      v9 = 0;
      *a2 = 0;
      a2[1] = 0;
      v21 = a2[3];
      if (v21)
      {
        if (v18)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
          v9 = (WTF::StringImpl *)*a2;
          v8 = a2[1];
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
      }
LABEL_19:
      *a2 = 0;
      a2[1] = 0;
      v22 = a2[3];
      if (v22 && v8)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v22 + 16))(v22, v9);
      *(_BYTE *)a1 = 0;
      v23 = v26;
      *(_BYTE *)(a1 + 24) = 0;
      if (v23)
      {
        v24 = v25;
        v25 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v9);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_11;
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_11:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
    v17 = v16 == 0;
  else
    v17 = 1;
  if (!v17)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v15);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager13GetFileHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISG_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2460;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager13GetFileHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISG_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2460;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager13GetFileHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISG_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3029;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager18GetDirectoryHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISG_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2488;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager18GetDirectoryHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISG_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2488;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager18GetDirectoryHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISG_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3028;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11RemoveEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B24B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11RemoveEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B24B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11RemoveEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEbONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  __int16 v9;
  IPC::Encoder *v10;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 3037;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::optional<WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder,std::optional<WebKit::FileSystemStorageError>>(v4, (char *)&v9);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder,std::optional<WebKit::FileSystemStorageError>>(uint64_t a1, char *a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_22;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (v4)
  {
    *v10 = 1;
    if (a2[1])
    {
      v11 = *a2;
      v12 = *(_QWORD *)(a1 + 544);
      v13 = v12 + 1;
      v14 = *(_QWORD *)(a1 + 552);
      if (v14 >= v12 + 1)
      {
        v15 = *(char **)(a1 + 528);
        v16 = *(_QWORD *)(a1 + 544);
LABEL_7:
        bzero(&v15[v16], v12 - v16);
        *(_QWORD *)(a1 + 544) = v13;
        v17 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v12);
        *(_QWORD *)(a1 + 536) = v17 + 1;
        *v17 = v11;
        return;
      }
      v22 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v23 = v22;
        v22 *= 2;
      }
      while (v23 < v13);
      v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
      if (v24 != (char *)-1)
      {
        v15 = v24;
        memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
        v25 = *(void **)(a1 + 528);
        if (v25 != (void *)(a1 + 16))
          munmap(v25, *(_QWORD *)(a1 + 552));
        *(_QWORD *)(a1 + 528) = v15;
        *(_QWORD *)(a1 + 552) = v23;
        v16 = *(_QWORD *)(a1 + 544);
        goto LABEL_7;
      }
    }
    else
    {
      std::__throw_bad_optional_access[abi:sn180100]();
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x196F8AE20);
  }
  *v10 = 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7ResolveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESE_ONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B24D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7ResolveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESE_ONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B24D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7ResolveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESE_ONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3040;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_23;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (v4)
  {
    *v10 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      v11 = *(_BYTE *)a2;
      v12 = *(_QWORD *)(a1 + 544);
      v13 = v12 + 1;
      v14 = *(_QWORD *)(a1 + 552);
      if (v14 >= v12 + 1)
      {
        v15 = *(char **)(a1 + 528);
        v16 = *(_QWORD *)(a1 + 544);
LABEL_7:
        bzero(&v15[v16], v12 - v16);
        *(_QWORD *)(a1 + 544) = v13;
        v17 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v12);
        *(_QWORD *)(a1 + 536) = v17 + 1;
        *v17 = v11;
        return;
      }
      v22 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v23 = v22;
        v22 *= 2;
      }
      while (v23 < v13);
      v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
      if (v24 != (char *)-1)
      {
        v15 = v24;
        memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
        v25 = *(void **)(a1 + 528);
        if (v25 != (void *)(a1 + 16))
          munmap(v25, *(_QWORD *)(a1 + 552));
        *(_QWORD *)(a1 + 528) = v15;
        *(_QWORD *)(a1 + 552) = v23;
        v16 = *(_QWORD *)(a1 + 544);
        goto LABEL_7;
      }
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x196F8B130);
    }
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_23;
  }
  *v10 = 1;
  if (*(_DWORD *)(a2 + 16))
    goto LABEL_22;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)a1, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager4MoveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESE_RKNS_6StringEONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2500;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager4MoveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESE_RKNS_6StringEONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2500;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager4MoveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESE_RKNS_6StringEONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  __int16 v9;
  IPC::Encoder *v10;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 3034;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::optional<WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder,std::optional<WebKit::FileSystemStorageError>>(v4, (char *)&v9);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7GetFileEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6StringENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2528;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7GetFileEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6StringENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2528;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7GetFileEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6StringENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  IPC::Encoder *v33;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3030;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = (void *)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v33 = (IPC::Encoder *)v5;
  v7 = *((_DWORD *)a2 + 2);
  v8 = *(_QWORD *)(v5 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v5 + 552);
  if (v10 < v8 + 1)
  {
    v25 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v9);
    v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
    if (v27 == (char *)-1)
      goto LABEL_26;
    v11 = v27;
    memcpy(v27, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v28 = *(void **)(v5 + 528);
    if (v28 != v6)
      munmap(v28, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v11;
    *(_QWORD *)(v5 + 552) = v26;
    v12 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v11 = *(char **)(v5 + 528);
    v12 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v5 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v13 + 1;
  if (v7)
  {
    *v13 = 0;
    if (*((_DWORD *)a2 + 2) == 1)
    {
      v14 = *a2;
      v15 = *(_QWORD *)(v5 + 544);
      v16 = v15 + 1;
      v17 = *(_QWORD *)(v5 + 552);
      if (v17 >= v15 + 1)
      {
        v18 = *(char **)(v5 + 528);
        v19 = *(_QWORD *)(v5 + 544);
LABEL_7:
        bzero(&v18[v19], v15 - v19);
        *(_QWORD *)(v5 + 544) = v16;
        v20 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v15);
        *(_QWORD *)(v5 + 536) = v20 + 1;
        *v20 = v14;
        goto LABEL_10;
      }
      v29 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v30 = v29;
        v29 *= 2;
      }
      while (v30 < v16);
      v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
      if (v31 != (char *)-1)
      {
        v18 = v31;
        memcpy(v31, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
        v32 = *(void **)(v5 + 528);
        if (v32 != v6)
          munmap(v32, *(_QWORD *)(v5 + 552));
        *(_QWORD *)(v5 + 528) = v18;
        *(_QWORD *)(v5 + 552) = v30;
        v19 = *(_QWORD *)(v5 + 544);
        goto LABEL_7;
      }
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x196F8B500);
    }
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_26;
  }
  *v13 = 1;
  if (*((_DWORD *)a2 + 2))
    goto LABEL_25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v33, 0, 0);
  result = v33;
  v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CreateSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS7_30FileSystemSyncAccessHandleInfoENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2550;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CreateSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS7_30FileSystemSyncAccessHandleInfoENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2550;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CreateSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS7_30FileSystemSyncAccessHandleInfoENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  IPC::Encoder *v33;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3025;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = (void *)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v33 = (IPC::Encoder *)v5;
  v7 = *((_DWORD *)a2 + 10);
  v8 = *(_QWORD *)(v5 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v5 + 552);
  if (v10 < v8 + 1)
  {
    v25 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v9);
    v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
    if (v27 == (char *)-1)
      goto LABEL_26;
    v11 = v27;
    memcpy(v27, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v28 = *(void **)(v5 + 528);
    if (v28 != v6)
      munmap(v28, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v11;
    *(_QWORD *)(v5 + 552) = v26;
    v12 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v11 = *(char **)(v5 + 528);
    v12 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v5 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v13 + 1;
  if (v7)
  {
    *v13 = 0;
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v14 = *a2;
      v15 = *(_QWORD *)(v5 + 544);
      v16 = v15 + 1;
      v17 = *(_QWORD *)(v5 + 552);
      if (v17 >= v15 + 1)
      {
        v18 = *(char **)(v5 + 528);
        v19 = *(_QWORD *)(v5 + 544);
LABEL_7:
        bzero(&v18[v19], v15 - v19);
        *(_QWORD *)(v5 + 544) = v16;
        v20 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v15);
        *(_QWORD *)(v5 + 536) = v20 + 1;
        *v20 = v14;
        goto LABEL_10;
      }
      v29 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v30 = v29;
        v29 *= 2;
      }
      while (v30 < v16);
      v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
      if (v31 != (char *)-1)
      {
        v18 = v31;
        memcpy(v31, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
        v32 = *(void **)(v5 + 528);
        if (v32 != v6)
          munmap(v32, *(_QWORD *)(v5 + 552));
        *(_QWORD *)(v5 + 528) = v18;
        *(_QWORD *)(v5 + 552) = v30;
        v19 = *(_QWORD *)(v5 + 544);
        goto LABEL_7;
      }
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x196F8B7CCLL);
    }
LABEL_25:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_26;
  }
  *v13 = 1;
  if (*((_DWORD *)a2 + 10))
    goto LABEL_25;
  IPC::ArgumentCoder<WebKit::FileSystemSyncAccessHandleInfo,void>::encode((IPC::Encoder *)v5, (uint64_t *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v33, 0, 0);
  result = v33;
  v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CloseSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2578;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CloseSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2578;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CloseSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3023;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37RequestNewCapacityForSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yEEyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B25A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37RequestNewCapacityForSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yEEyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B25A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37RequestNewCapacityForSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yEEyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t v10[2];
  IPC::Encoder *v11;

  v10[0] = a2;
  v10[1] = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3039;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v5, v10);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager14GetHandleNamesEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B25C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager14GetHandleNamesEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B25C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager14GetHandleNamesEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3031;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9GetHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINSt3__14pairISG_bEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B25F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9GetHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINSt3__14pairISG_bEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B25F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9GetHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINSt3__14pairISG_bEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  IPC::Encoder *result;
  WTF *v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  IPC::Encoder *v33;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3032;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = (void *)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v33 = (IPC::Encoder *)v5;
  v7 = *((_DWORD *)a2 + 4);
  v8 = *(_QWORD *)(v5 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v5 + 552);
  if (v10 < v8 + 1)
  {
    v25 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v9);
    v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
    if (v27 == (char *)-1)
      goto LABEL_26;
    v11 = v27;
    memcpy(v27, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v28 = *(void **)(v5 + 528);
    if (v28 != v6)
      munmap(v28, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v11;
    *(_QWORD *)(v5 + 552) = v26;
    v12 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v11 = *(char **)(v5 + 528);
    v12 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v5 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v13 + 1;
  if (v7)
  {
    *v13 = 0;
    if (*((_DWORD *)a2 + 4) != 1)
      goto LABEL_25;
  }
  else
  {
    *v13 = 1;
    if (*((_DWORD *)a2 + 4))
    {
LABEL_25:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_26;
    }
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, (uint64_t *)a2);
    a2 += 8;
  }
  v14 = *a2;
  v15 = *(_QWORD *)(v5 + 544);
  v16 = v15 + 1;
  v17 = *(_QWORD *)(v5 + 552);
  if (v17 >= v15 + 1)
  {
    v18 = *(char **)(v5 + 528);
    v19 = *(_QWORD *)(v5 + 544);
    goto LABEL_10;
  }
  v29 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v30 = v29;
    v29 *= 2;
  }
  while (v30 < v16);
  v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
  if (v31 == (char *)-1)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x196F8BD98);
  }
  v18 = v31;
  memcpy(v31, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
  v32 = *(void **)(v5 + 528);
  if (v32 != v6)
    munmap(v32, *(_QWORD *)(v5 + 552));
  *(_QWORD *)(v5 + 528) = v18;
  *(_QWORD *)(v5 + 552) = v30;
  v19 = *(_QWORD *)(v5 + 544);
LABEL_10:
  bzero(&v18[v19], v15 - v19);
  *(_QWORD *)(v5 + 544) = v16;
  v20 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v15);
  *(_QWORD *)(v5 + 536) = v20 + 1;
  *v20 = v14;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v33, 0, 0);
  result = v33;
  v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[96])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  __int16 v5;

  result = IPC::Decoder::decode<WebCore::StorageType>(a2);
  v5 = result;
  if ((unsigned __int16)result > 0xFFu)
    return IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType>(a1, a2, (char *)&v5);
  *a1 = 0;
  a1[96] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType>(_BYTE *a1, uint64_t *a2, char *a3)
{
  unint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v8[0] = result;
  v8[1] = v7;
  if ((_BYTE)v7)
    return IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, a3, (uint64_t)v8);
  *a1 = 0;
  a1[96] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, uint64_t *a2, char *a3, uint64_t a4)
{
  unint64_t result;
  _BYTE v9[24];

  result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v9, a2);
  if (v9[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2, a3, a4, (uint64_t)v9);
  *a1 = 0;
  a1[96] = 0;
  return result;
}

unint64_t IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(_BYTE *a1, uint64_t *a2, char *a3, uint64_t a4, uint64_t a5)
{
  _BYTE v10[72];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a2, v10);
  if (v10[64])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>((uint64_t)a1, *a3, a3[1], a4, a5, (uint64_t)v10);
  }
  else
  {
    *a1 = 0;
    a1[96] = 0;
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
}

unint64_t IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  char v6;

  result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
    goto LABEL_7;
  if ((_BYTE)result)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v6)
    {
      *(_QWORD *)a1 = result;
      v5 = 1;
      *(_BYTE *)(a1 + 8) = 1;
      goto LABEL_4;
    }
LABEL_7:
    v5 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_4;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v5 = 1;
LABEL_4:
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>(uint64_t result, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 && *(_BYTE *)(a4 + 8) && *(_BYTE *)(a5 + 16) && *(_BYTE *)(a6 + 64))
    return std::__optional_destruct_base<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,false>::__optional_destruct_base[abi:sn180100]<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>(result, a2, (_QWORD *)a4, (_OWORD *)a5, a6);
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,false>::__optional_destruct_base[abi:sn180100]<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>(uint64_t a1, char a2, _QWORD *a3, _OWORD *a4, uint64_t a5)
{
  *(_BYTE *)a1 = a2;
  *(_QWORD *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + 16) = *a4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a5);
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 64, a5 + 32);
  *(_BYTE *)(a1 + 96) = 1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager20ConnectToStorageAreaEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_7HashMapINS_6StringESW_NS_11DefaultHashISW_EENS_10HashTraitsISW_EES10_NS_15HashTableTraitsEEEyEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_S12_yEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2618;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager20ConnectToStorageAreaEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_7HashMapINS_6StringESW_NS_11DefaultHashISW_EENS_10HashTraitsISW_EES10_NS_15HashTableTraitsEEEyEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_S12_yEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2618;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager20ConnectToStorageAreaEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_7HashMapINS_6StringESW_NS_11DefaultHashISW_EENS_10HashTraitsISW_EES10_NS_15HashTableTraitsEEEyEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_S12_yEE4callESU_S12_y(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a4;
  v6 = a2;
  return IPC::handleMessageAsync<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkStorageManager *,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&) WebKit::NetworkStorageManager::*)::{lambda(Messages::NetworkStorageManager::ConnectToStorageArea &&)#1}::operator()<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>((uint64_t *)(a1 + 8), &v6, a3, &v5);
}

IPC::Encoder *IPC::handleMessageAsync<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkStorageManager *,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&) WebKit::NetworkStorageManager::*)::{lambda(Messages::NetworkStorageManager::ConnectToStorageArea &&)#1}::operator()<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>(uint64_t *a1, uint64_t *a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v8 = *a1;
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3024;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v10 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v10;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((IPC::Encoder *)v9, a3);
  v11 = *a4;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v11;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v16, 0, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v2])(&v5, a1 + 64);
    *(_DWORD *)(a1 + 88) = -1;
    v3 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v3])(&v6, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1)
{
  uint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7SetItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_6StringESL_SL_ONS_17CompletionHandlerIFvbONS_7HashMapISK_SK_NS_11DefaultHashISK_EENS_10HashTraitsISK_EESR_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSU_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2640;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7SetItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_6StringESL_SL_ONS_17CompletionHandlerIFvbONS_7HashMapISK_SK_NS_11DefaultHashISK_EENS_10HashTraitsISK_EESR_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSU_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2640;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7SetItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_6StringESL_SL_ONS_17CompletionHandlerIFvbONS_7HashMapISK_SK_NS_11DefaultHashISK_EENS_10HashTraitsISK_EESR_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSU_EE4callEbSU_(uint64_t a1, char a2, _QWORD **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3041;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager10RemoveItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_6StringESL_ONS_17CompletionHandlerIFvbONS_7HashMapISK_SK_NS_11DefaultHashISK_EENS_10HashTraitsISK_EESR_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSU_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2668;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager10RemoveItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_6StringESL_ONS_17CompletionHandlerIFvbONS_7HashMapISK_SK_NS_11DefaultHashISK_EENS_10HashTraitsISK_EESR_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSU_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2668;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager10RemoveItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_6StringESL_ONS_17CompletionHandlerIFvbONS_7HashMapISK_SK_NS_11DefaultHashISK_EENS_10HashTraitsISK_EESR_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSU_EE4callEbSU_(uint64_t a1, char a2, _QWORD **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3038;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager5ClearEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2690;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager5ClearEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2690;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager5ClearEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3022;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::IDBOpenRequestData>>(_BYTE *a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::decode(a2, &v13);
  if (v19
    || ((v7 = *a2, v8 = a2[1], *a2 = 0, a2[1] = 0, (result = (WTF::StringImpl *)a2[3]) != 0)
      ? (v9 = v8 == 0)
      : (v9 = 1),
        !v9
     && (result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v7), v19)))
  {
    result = (WTF::StringImpl *)WebCore::IDBOpenRequestData::IDBOpenRequestData((uint64_t)a1, &v13);
    v6 = v19;
    a1[120] = 1;
    if (v6)
    {
      if (v18 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v18])(&v12, &v17);
      v18 = -1;
      if (v16 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v16])(&v12, &v15);
      v16 = -1;
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[120] = 0;
  }
  if (!a1[120])
  {
    v10 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v11)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v10);
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::IDBOpenRequestData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;
  char v8;

  if (*(_BYTE *)(a1 + 120))
  {
    v3 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v3])(&v7, a1 + 64);
    *(_DWORD *)(a1 + 88) = -1;
    v4 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v4])(&v8, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v5 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::IDBResourceIdentifier>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4, result = IPC::Decoder::decode<std::optional<WebCore::IDBResourceIdentifier>>(a2, (uint64_t)&v11), v13))
  {
    *(_QWORD *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (uint64_t *)a2[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v8);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5)
  {
    v6 = v4;
    result = IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v24);
    if (v25)
    {
      v8 = a2[1];
      v9 = *a2;
      v10 = a2[2] - *a2;
      if (v8 <= v10)
      {
        v13 = 0;
        v14 = 0;
        *a2 = 0;
        a2[1] = 0;
        v15 = a2[3];
        if (v15)
        {
          if (v8)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
            v14 = *a2;
            v13 = a2[1];
          }
          else
          {
            v13 = 0;
            v14 = 0;
          }
        }
      }
      else
      {
        v11 = (unsigned __int8 *)(v9 + v10);
        a2[2] = (uint64_t)(v11 + 1);
        if (v9)
        {
          v12 = *v11;
          if (v12 < 2)
          {
            *(_QWORD *)a1 = v6;
            *(_OWORD *)(a1 + 8) = v24;
            *(_BYTE *)(a1 + 24) = v12 != 0;
            *(_BYTE *)(a1 + 32) = 1;
            return result;
          }
          goto LABEL_9;
        }
        v13 = v8;
        v14 = 0;
      }
      v8 = 0;
      v9 = 0;
      *a2 = 0;
      a2[1] = 0;
      v16 = a2[3];
      if (v16)
      {
        if (v13)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
          v9 = *a2;
          v8 = a2[1];
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
      }
LABEL_9:
      *a2 = 0;
      a2[1] = 0;
      v17 = a2[3];
      if (v17)
      {
        if (v8)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v9);
          v21 = a2[3];
          v22 = *a2;
          v23 = a2[1];
          *a2 = 0;
          a2[1] = 0;
          if (v21)
          {
            if (v23)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v22);
          }
        }
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v20 = v19 == 0;
  else
    v20 = 1;
  if (!v20)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::IDBResourceIdentifier>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int128 v11;
  char v12;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5 && (v6 = v4, result = IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v11), v12))
  {
    *(_QWORD *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 v18;
  char v19;

  result = IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v18);
  if (v19)
  {
    v5 = a2[1];
    v6 = *a2;
    v7 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v5 >= v7 && v5 - v7 > 7)
    {
      v9 = (uint64_t *)(v6 + v7);
      a2[2] = (uint64_t)(v9 + 1);
      if (v6)
      {
        v10 = *v9;
        *(_OWORD *)a1 = v18;
        *(_QWORD *)(a1 + 16) = v10;
        *(_BYTE *)(a1 + 24) = 1;
        return result;
      }
      v11 = v5;
      v12 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      v13 = a2[3];
      if (v13)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v6, v5);
          v12 = *a2;
          v11 = a2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v17 = v16 == 0;
  else
    v17 = 1;
  if (!v17)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  return result;
}

void IPC::Decoder::decode<WebCore::IDBRequestData>(uint64_t a1, uint64_t *a2)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = IPC::ArgumentCoder<WebCore::IDBRequestData,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 104))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v7 = a2[3];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v7 + 16))(v7, v5, v4);
  }
}

_QWORD *IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _OWORD v13[6];
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v13, a2);
  if (v15 && (result = IPC::Decoder::decode<WTF::String>(a2, &v16), v17))
  {
    if (v15)
    {
      v5 = v13[5];
      *(_OWORD *)(a1 + 64) = v13[4];
      *(_OWORD *)(a1 + 80) = v5;
      v6 = v14;
      v7 = v13[1];
      *(_OWORD *)a1 = v13[0];
      *(_OWORD *)(a1 + 16) = v7;
      v8 = v13[3];
      *(_OWORD *)(a1 + 32) = v13[2];
      *(_OWORD *)(a1 + 48) = v8;
      v9 = v16;
      *(_QWORD *)(a1 + 96) = v6;
      *(_QWORD *)(a1 + 104) = v9;
      *(_BYTE *)(a1 + 112) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 112) = 0;
    v10 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v10);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,unsigned long long,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD v21[6];
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v21, a2);
  if (v23)
  {
    v4 = a2[1];
    v5 = *a2;
    v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v4 < v6 || v4 - v6 <= 7)
    {
      v12 = 0;
      v11 = 0;
      *a2 = 0;
      a2[1] = 0;
      v17 = a2[3];
      if (v17)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v5, v4);
          v11 = *a2;
          v12 = a2[1];
        }
        else
        {
          v12 = 0;
          v11 = 0;
        }
      }
LABEL_12:
      *a2 = 0;
      a2[1] = 0;
      result = (_QWORD *)a2[3];
      if (!result)
        goto LABEL_13;
LABEL_20:
      if (v12)
        (*(void (**)(_QWORD *, uint64_t))(*result + 16))(result, v11);
      goto LABEL_13;
    }
    v8 = (uint64_t *)(v5 + v6);
    a2[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v12 = v4;
      v11 = 0;
      goto LABEL_12;
    }
    v9 = *v8;
    result = IPC::Decoder::decode<WTF::String>(a2, &v24);
    if (v25)
    {
      if (v23)
      {
        v13 = v21[5];
        *(_OWORD *)(a1 + 64) = v21[4];
        *(_OWORD *)(a1 + 80) = v13;
        v14 = v22;
        v15 = v21[1];
        *(_OWORD *)a1 = v21[0];
        *(_OWORD *)(a1 + 16) = v15;
        v16 = v21[3];
        *(_OWORD *)(a1 + 32) = v21[2];
        *(_OWORD *)(a1 + 48) = v16;
        *(_QWORD *)(a1 + 96) = v14;
        *(_QWORD *)(a1 + 104) = v9;
        *(_QWORD *)(a1 + 112) = v24;
        *(_BYTE *)(a1 + 120) = 1;
        return result;
      }
      __break(1u);
      goto LABEL_20;
    }
  }
LABEL_13:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
    v20 = v19 == 0;
  else
    v20 = 1;
  if (!v20)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v18);
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _OWORD v22[6];
  uint64_t v23;
  char v24;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v22, a2);
  if (v24)
  {
    v4 = a2[1];
    v5 = *a2;
    v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v4 >= v6 && v4 - v6 > 7)
    {
      v8 = (uint64_t *)(v5 + v6);
      a2[2] = (uint64_t)(v8 + 1);
      if (v5)
      {
        v9 = *v8;
        v10 = v22[5];
        *(_OWORD *)(a1 + 64) = v22[4];
        *(_OWORD *)(a1 + 80) = v10;
        v11 = v23;
        v12 = v22[1];
        *(_OWORD *)a1 = v22[0];
        *(_OWORD *)(a1 + 16) = v12;
        v13 = v22[3];
        *(_OWORD *)(a1 + 32) = v22[2];
        *(_OWORD *)(a1 + 48) = v13;
        *(_QWORD *)(a1 + 96) = v11;
        *(_QWORD *)(a1 + 104) = v9;
        *(_BYTE *)(a1 + 112) = 1;
        return;
      }
      v14 = v4;
      v15 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      *a2 = 0;
      a2[1] = 0;
      v16 = a2[3];
      if (v16)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
          v15 = *a2;
          v14 = a2[1];
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 112) = 0;
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20)
    v21 = v19 == 0;
  else
    v21 = 1;
  if (!v21)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
}

_QWORD *IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,unsigned long long,unsigned long long,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v29, a2);
  if (v31)
  {
    v4 = a2[1];
    v5 = *a2;
    v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v4 < v6 || v4 - v6 <= 7)
    {
      v19 = 0;
      v20 = 0;
      *a2 = 0;
      a2[1] = 0;
      result = (_QWORD *)a2[3];
      if (!result)
        goto LABEL_17;
      goto LABEL_28;
    }
    v8 = (uint64_t *)(v5 + v6);
    a2[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v19 = v4;
      v20 = 0;
      goto LABEL_17;
    }
    v9 = (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 < v9 || v4 - v9 <= 7)
    {
      *a2 = 0;
      a2[1] = 0;
      v22 = a2[3];
      if (v22)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          v26 = *a2;
          v27 = a2[1];
          v28 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v28)
          {
            if (v27)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
          }
        }
      }
      goto LABEL_21;
    }
    v11 = *v8;
    v12 = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    result = IPC::Decoder::decode<WTF::String>(a2, &v32);
    if (v33)
    {
      if (v31)
      {
        v14 = v29[5];
        *(_OWORD *)(a1 + 64) = v29[4];
        *(_OWORD *)(a1 + 80) = v14;
        v15 = v30;
        v16 = v29[1];
        *(_OWORD *)a1 = v29[0];
        *(_OWORD *)(a1 + 16) = v16;
        v17 = v29[3];
        *(_OWORD *)(a1 + 32) = v29[2];
        *(_OWORD *)(a1 + 48) = v17;
        *(_QWORD *)(a1 + 96) = v15;
        *(_QWORD *)(a1 + 104) = v11;
        v18 = v32;
        *(_QWORD *)(a1 + 112) = v12;
        *(_QWORD *)(a1 + 120) = v18;
        *(_BYTE *)(a1 + 128) = 1;
        return result;
      }
      __break(1u);
LABEL_28:
      if (v4)
      {
        (*(void (**)(_QWORD *))(*result + 16))(result);
        v20 = *a2;
        v19 = a2[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
LABEL_17:
      *a2 = 0;
      a2[1] = 0;
      v21 = a2[3];
      if (v21 && v19)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v20, v19);
    }
  }
LABEL_21:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 128) = 0;
  v23 = *a2;
  v24 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
    v25 = v24 == 0;
  else
    v25 = 1;
  if (!v25)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v23);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _OWORD v13[6];
  uint64_t v14;
  char v15;
  _BYTE v16[8];
  _BYTE v17[32];
  _WORD v18[16];
  char v19;

  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v13, a2);
  if (!v15)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 176) = 0;
LABEL_9:
    v10 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v10);
    return result;
  }
  result = IPC::Decoder::decode<WebCore::IDBKeyRangeData>(a2, (uint64_t)v16);
  v5 = v19;
  if (v19)
  {
    if (!v15)
    {
      __break(1u);
      return result;
    }
    v6 = v13[5];
    *(_OWORD *)(a1 + 64) = v13[4];
    *(_OWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 96) = v14;
    v7 = v13[1];
    *(_OWORD *)a1 = v13[0];
    *(_OWORD *)(a1 + 16) = v7;
    v8 = v13[3];
    *(_OWORD *)(a1 + 32) = v13[2];
    *(_OWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 104) = v16[0];
    *(_BYTE *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 128) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>(a1 + 112, (uint64_t)v17);
    v9 = v17[24];
    *(_BYTE *)(a1 + 144) = 0;
    *(_BYTE *)(a1 + 136) = v9;
    *(_DWORD *)(a1 + 160) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>(a1 + 144, (uint64_t)v18);
    *(_WORD *)(a1 + 168) = v18[12];
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 176) = v5;
  result = std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16);
  if (!*(_BYTE *)(a1 + 176))
    goto LABEL_9;
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 176))
  {
    v2 = *(unsigned int *)(a1 + 160);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E34B26B8[v2])(&v5, a1 + 144);
    *(_DWORD *)(a1 + 160) = -1;
    v3 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E34B26B8[v3])(&v6, a1 + 112);
    *(_DWORD *)(a1 + 128) = -1;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v5[72];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v5);
  if (v5[64])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>(a1, (uint64_t)v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[72] = 0;
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v6;
  uint64_t v7;
  char v8;

  result = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, &v7);
  v6 = v8;
  if (!v8)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 64))
  {
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a3, a2);
    *(_BYTE *)(a3 + 32) = 0;
    *(_DWORD *)(a3 + 56) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a3 + 32, a2 + 32);
    *(_QWORD *)(a3 + 64) = v7;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 72) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageOpenCacheEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine30CacheIdentifierOperationResultENSK_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageOpenCacheEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine30CacheIdentifierOperationResultENSK_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageOpenCacheEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine30CacheIdentifierOperationResultENSK_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  IPC::Encoder *v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3016;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v15 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 24);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 24) == 1)
    {
      v8 = *(_BYTE *)a2;
      *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v8;
      goto LABEL_6;
    }
LABEL_9:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v13, v14);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 24))
    goto LABEL_9;
  IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,void>::encode((IPC::Encoder *)v5, (_QWORD *)a2);
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v15, 0, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v4])(&v7, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v5 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v5])(&v8, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager23CacheStorageRemoveCacheEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager23CacheStorageRemoveCacheEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager23CacheStorageRemoveCacheEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3018;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 4);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 4) == 1)
      goto LABEL_3;
LABEL_7:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageAllCachesEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine10CacheInfosENSH_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(v13);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 4))
    goto LABEL_7;
LABEL_3:
  v8 = *(_BYTE *)a2;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v8;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageAllCachesEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine10CacheInfosENSH_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageAllCachesEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine10CacheInfosENSH_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

WebCore::ResourceRequestBase *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageAllCachesEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine10CacheInfosENSH_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  uint64_t v9;
  void *v10;
  WebCore::ResourceRequestBase *result;
  WTF *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  IPC::Encoder *v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3014;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v16 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 24);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 24) == 1)
    {
      v8 = *(_BYTE *)a2;
      *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v8;
      goto LABEL_6;
    }
LABEL_9:
    v14 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::decode<WebCore::RetrieveRecordsOptions>(v14, v15);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 24))
    goto LABEL_9;
  IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, a2);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v9;
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (WebCore::ResourceRequestBase *)WTF::fastFree(v12, v13);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::RetrieveRecordsOptions>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 240))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::ResourceRequestBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WebCore::ResourceRequestBase *std::__optional_destruct_base<WebCore::RetrieveRecordsOptions,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceRequestBase *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const void *v6;

  if (*((_BYTE *)this + 240))
  {
    v3 = *((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v3, a2);
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
    *((_QWORD *)this + 27) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (const void *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v6)
      CFRelease(v6);
    WebCore::ResourceRequestBase::~ResourceRequestBase(this);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager27CacheStorageRetrieveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS9_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSO_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager27CacheStorageRetrieveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS9_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSO_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager27CacheStorageRetrieveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS9_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSO_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3021;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v18 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (!v6)
  {
    *v7 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      v9 = *(unsigned int *)(a2 + 12);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v9;
      v10 = *(_DWORD *)(a2 + 12);
      if (v10)
      {
        v11 = *(uint64_t **)a2;
        v12 = 592 * v10;
        do
        {
          IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::encode((IPC::Encoder *)v5, v11);
          v11 += 74;
          v12 -= 592;
        }
        while (v12);
      }
      goto LABEL_8;
    }
LABEL_11:
    v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager25CacheStorageRemoveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS9_15ResourceRequestEONS9_17CacheQueryOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED1Ev(v17);
  }
  *v7 = 0;
  if (*(_DWORD *)(a2 + 16) != 1)
    goto LABEL_11;
  v8 = *(_BYTE *)a2;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v8;
LABEL_8:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v18, 0, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager25CacheStorageRemoveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS9_15ResourceRequestEONS9_17CacheQueryOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B27B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager25CacheStorageRemoveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS9_15ResourceRequestEONS9_17CacheQueryOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B27B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager25CacheStorageRemoveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS9_15ResourceRequestEONS9_17CacheQueryOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EE4callESW_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3019;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

char *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  char v6;
  char *result;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      v6 = *(_BYTE *)a2;
      result = IPC::Encoder::grow(a1, 1uLL, 1);
      *result = v6;
      return result;
    }
LABEL_8:
    v12 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (char *)IPC::Decoder::decode<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v12, v13, v14);
  }
  *v5 = 1;
  if (*(_DWORD *)(a2 + 16))
    goto LABEL_8;
  v8 = *(const void **)a2;
  v9 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v9;
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = IPC::Encoder::grow(a1, 8uLL, v10);
    return (char *)memcpy(v11, v8, v10);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23[37];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v15 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v6, v5);
        v16 = *a1;
        v15 = a1[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_20;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v21 = 0;
    v22 = 0;
    if (v10 >= 0x6EB)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, v23);
        if (!v24)
          break;
        if (HIDWORD(v22) == (_DWORD)v22)
        {
          WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMCacheEngine::CrossThreadRecord>((uint64_t)&v21, (unint64_t)v23);
        }
        else
        {
          WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(v21 + 592 * HIDWORD(v22), v23);
          ++HIDWORD(v22);
        }
        std::__optional_destruct_base<WebCore::DOMCacheEngine::CrossThreadRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v19);
        if (!--v10)
        {
          WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v21, HIDWORD(v22));
          *(_QWORD *)a3 = v21;
          v20 = v22;
          v21 = 0;
          v22 = 0;
          *(_QWORD *)(a3 + 8) = v20;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v13 = 0;
        v14 = 0;
LABEL_17:
        v21 = 0;
        v22 = 0;
        *(_QWORD *)a3 = v13;
        *(_QWORD *)(a3 + 8) = v14;
LABEL_18:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, a2);
      }
      LODWORD(v22) = 592 * (int)v10 / 0x250u;
      v21 = WTF::fastMalloc((WTF *)(592 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, v23);
        if (!v24)
          break;
        if (HIDWORD(v22) == (_DWORD)v22)
        {
          WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMCacheEngine::CrossThreadRecord>((uint64_t)&v21, (unint64_t)v23);
        }
        else
        {
          WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(v21 + 592 * HIDWORD(v22), v23);
          ++HIDWORD(v22);
        }
        std::__optional_destruct_base<WebCore::DOMCacheEngine::CrossThreadRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v12);
        if (!--v10)
        {
          v13 = v21;
          v14 = v22;
          goto LABEL_17;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebCore::DOMCacheEngine::CrossThreadRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v11);
    return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, a2);
  }
  v15 = v5;
  v16 = 0;
LABEL_20:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v15)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::DOMCacheEngine::CrossThreadRecord>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::decode(a1, a2);
  if (!a2[592])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::ResourceRequestBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMCacheEngine::CrossThreadRecord>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;

  v3 = (__int128 *)WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(*(_QWORD *)a1 + 592 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 592 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6EB3E5)
    {
      __break(0xC471u);
      JUMPOUT(0x196F8E6A8);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 592 * *(unsigned int *)(a1 + 12);
    v5 = 592 * a2;
    v6 = WTF::fastMalloc((WTF *)(592 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x250;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::DOMCacheEngine::CrossThreadRecord>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::DOMCacheEngine::CrossThreadRecord>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  const void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v8 = 0;
    do
    {
      v9 = a1 + v8;
      WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(a3 + v8, (__int128 *)(a1 + v8));
      v11 = *(unsigned int *)(a1 + v8 + 576);
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, uint64_t))off_1E34B27C8[v11])(&v17, v9 + 568);
      *(_DWORD *)(v9 + 576) = -1;
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)(v9 + 288), v10);
      v13 = *(WTF::StringImpl **)(v9 + 272);
      *(_QWORD *)(v9 + 272) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = a1 + v8;
      v15 = *(WTF::StringImpl **)(a1 + v8 + 232);
      *(_QWORD *)(a1 + v8 + 232) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = *(const void **)(v14 + 216);
      *(_QWORD *)(v14 + 216) = 0;
      if (v16)
        CFRelease(v16);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + v8 + 24));
      v8 += 592;
    }
    while (a1 + v8 != a2);
  }
}

uint64_t std::__optional_destruct_base<WebCore::DOMCacheEngine::CrossThreadRecord,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  char v9;

  if (*(_BYTE *)(a1 + 592))
  {
    v3 = *(unsigned int *)(a1 + 576);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E34B27C8[v3])(&v9, a1 + 568);
    *(_DWORD *)(a1 + 576) = -1;
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)(a1 + 288), a2);
    v5 = *(WTF::StringImpl **)(a1 + 272);
    *(_QWORD *)(a1 + 272) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 232);
    *(_QWORD *)(a1 + 232) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(const void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (v7)
      CFRelease(v7);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  }
  return a1;
}

void WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CrossThreadRecord>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 592 * a2), (WTF::StringImpl *)(*(_QWORD *)a1 + 592 * v4));
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >= 0x6EB3E5)
      {
        __break(0xC471u);
        JUMPOUT(0x196F8E974);
      }
      v6 = (WTF *)(592 * a2);
      v7 = WTF::fastMalloc(v6);
      *(_DWORD *)(a1 + 8) = v6 / 0x250;
      *(_QWORD *)a1 = v7;
      if ((WTF *)v7 != v5)
        WTF::VectorMover<false,WebCore::DOMCacheEngine::CrossThreadRecord>::move((uint64_t)v5, (uint64_t)v5 + 592 * v4, v7);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, (void *)a2);
    }
  }
}

void WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CrossThreadRecord>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v12 = v2;
    v13 = v3;
    v5 = a1;
    do
    {
      v6 = *((unsigned int *)v5 + 144);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_1E34B27C8[v6])(&v11, (char *)v5 + 568);
      *((_DWORD *)v5 + 144) = -1;
      WebCore::ResourceResponseData::~ResourceResponseData((WTF::StringImpl *)((char *)v5 + 288), a2);
      v8 = (WTF::StringImpl *)*((_QWORD *)v5 + 34);
      *((_QWORD *)v5 + 34) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 29);
      *((_QWORD *)v5 + 29) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (const void *)*((_QWORD *)v5 + 27);
      *((_QWORD *)v5 + 27) = 0;
      if (v10)
        CFRelease(v10);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WTF::StringImpl *)((char *)v5 + 24));
      v5 = (WTF::StringImpl *)((char *)v5 + 592);
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CrossThreadRecord>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 592 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CacheStoragePutRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS_6VectorINS9_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSH_IyLm0ESK_Lm16ESL_EENSI_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B27F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CacheStoragePutRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS_6VectorINS9_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSH_IyLm0ESK_Lm16ESL_EENSI_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B27F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CacheStoragePutRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS_6VectorINS9_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSH_IyLm0ESK_Lm16ESL_EENSI_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3017;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37CacheStorageClearMemoryRepresentationEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2818;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37CacheStorageClearMemoryRepresentationEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2818;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37CacheStorageClearMemoryRepresentationEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3015;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager26CacheStorageRepresentationEN6WebKit21NetworkStorageManagerES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2840;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager26CacheStorageRepresentationEN6WebKit21NetworkStorageManagerES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2840;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager26CacheStorageRepresentationEN6WebKit21NetworkStorageManagerES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3020;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21NetworkStorageManager24ConnectToStorageAreaSyncEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_7HashMapINS_6StringESW_NS_11DefaultHashISW_EENS_10HashTraitsISW_EES10_NS_15HashTableTraitsEEEyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSU_S12_yEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2868;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21NetworkStorageManager24ConnectToStorageAreaSyncEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_7HashMapINS_6StringESW_NS_11DefaultHashISW_EENS_10HashTraitsISW_EES10_NS_15HashTableTraitsEEEyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSU_S12_yEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B2868;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21NetworkStorageManager24ConnectToStorageAreaSyncEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_7HashMapINS_6StringESW_NS_11DefaultHashISW_EENS_10HashTraitsISW_EES10_NS_15HashTableTraitsEEEyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSU_S12_yEE4callESU_S12_y(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t *v6;
  IPC::Encoder *v7;

  v6 = (uint64_t *)(a1 + 8);
  v7 = *(IPC::Encoder **)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(v7, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(v7, a3);
  *(_QWORD *)IPC::Encoder::grow(v7, 8uLL, 8) = a4;
  return IPC::Connection::sendMessageImpl(v6[1], v6, 0, 0);
}

void WebKit::NotificationManagerMessageHandler::didReceiveMessage(WebKit::NotificationManagerMessageHandler *this, IPC::Connection *a2, unsigned __int8 ***a3)
{
  unsigned __int8 ***v3;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  unsigned __int8 **v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  int i;
  unsigned __int8 **v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  unsigned __int8 **v25;
  unint64_t v26;
  void *v27;
  _QWORD *v28;
  unsigned __int8 **v29;
  _QWORD *v30;
  WTF *v31;
  _QWORD *v32;
  WTF *v33;
  int v34;
  char v35;
  WTF *v36;
  unsigned __int8 v37;
  unint64_t v38;
  unsigned __int8 **v39[29];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x24D:
      IPC::Decoder::decode<std::tuple<WTF::UUID>>((uint64_t *)a3, (uint64_t)&v33);
      if (v35)
        (*(void (**)(WebKit::NotificationManagerMessageHandler *, WTF **))(*(_QWORD *)this + 48))(this, &v33);
      return;
    case 0x24E:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)&v33);
      if (v35)
      {
        (*(void (**)(WebKit::NotificationManagerMessageHandler *, WTF **))(*(_QWORD *)this + 56))(this, &v33);
        if (v35)
        {
          v16 = v33;
          if (v33)
          {
            v33 = 0;
            v34 = 0;
            WTF::fastFree(v16, v15);
          }
        }
      }
      return;
    case 0x24F:
      IPC::Decoder::decode<std::tuple<WTF::UUID>>((uint64_t *)a3, (uint64_t)&v33);
      if (v35)
        (*(void (**)(WebKit::NotificationManagerMessageHandler *, WTF **))(*(_QWORD *)this + 64))(this, &v33);
      return;
    case 0x250:
      (*(void (**)(WebKit::NotificationManagerMessageHandler *))(*(_QWORD *)this + 72))(this);
      return;
    case 0x251:
      IPC::Decoder::decode<WebCore::NotificationData>((uint64_t *)a3, &v38);
      if (!v40)
      {
        LOBYTE(v33) = 0;
        v37 = 0;
        goto LABEL_21;
      }
      v6 = v3[1];
      v7 = *v3;
      v8 = (char *)v3[2] - (char *)*v3;
      if ((unint64_t)v6 <= v8)
      {
        v21 = 0;
        v22 = 0;
        *v3 = 0;
        v3[1] = 0;
        v23 = v3[3];
        if (v23)
        {
          if (v6)
          {
            (*((void (**)(unsigned __int8 **))*v23 + 2))(v23);
            v22 = *v3;
            v21 = v3[1];
          }
          else
          {
            v21 = 0;
            v22 = 0;
          }
        }
        goto LABEL_28;
      }
      v9 = (unsigned __int8 *)v7 + v8;
      v3[2] = (unsigned __int8 **)(v9 + 1);
      if (!v7)
      {
        v21 = v6;
        v22 = 0;
LABEL_28:
        v6 = 0;
        v7 = 0;
        *v3 = 0;
        v3[1] = 0;
        v24 = v3[3];
        if (v24)
        {
          if (v21)
          {
            (*((void (**)(unsigned __int8 **, unsigned __int8 **, unsigned __int8 **))*v24 + 2))(v24, v22, v21);
            v7 = *v3;
            v6 = v3[1];
          }
          else
          {
            v6 = 0;
            v7 = 0;
          }
        }
        goto LABEL_29;
      }
      v10 = *v9;
      if (v10 >= 2)
      {
LABEL_29:
        *v3 = 0;
        v3[1] = 0;
        v25 = v3[3];
        if (v25 && v6)
          (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v25 + 2))(v25, v7);
        goto LABEL_30;
      }
      if (v10)
      {
        v11 = (unsigned __int8 **)IPC::ArgumentCoder<WebCore::NotificationResources,void>::decode((IPC::Decoder *)v3, (uint64_t)&v33);
        if ((_BYTE)v34)
        {
          if (!v40)
            goto LABEL_43;
          v14 = v33;
          goto LABEL_26;
        }
LABEL_30:
        v12 = *v3;
        v13 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v11 = v3[3];
        if (v11)
          goto LABEL_44;
        goto LABEL_31;
      }
      v14 = 0;
LABEL_26:
      std::__tuple_leaf<0ul,WebCore::NotificationData,false>::__tuple_leaf[abi:sn180100]<WebCore::NotificationData,void>((uint64_t)&v33, (uint64_t)&v38);
      v36 = v14;
      for (i = 1; ; i = 0)
      {
        v37 = i;
        if (v40)
        {
          WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v38, v12);
          i = v37;
        }
        if (!i)
        {
LABEL_21:
          v17 = *v3;
          v18 = v3[1];
          *v3 = 0;
          v3[1] = 0;
          v19 = v3[3];
          if (!v19)
            return;
          if (!v18)
            return;
          (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v19 + 2))(v19, v17);
          if (!v37)
            return;
        }
        v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v3);
        if (!(_BYTE)v27)
          break;
        v38 = v26;
        v3 = v39;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v39, (unsigned __int8 **)a2);
        v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v28 = off_1E34B2890;
        v28[1] = v38;
        v29 = v39[0];
        v39[0] = 0;
        v28[2] = v29;
        v32 = v28;
        v11 = (unsigned __int8 **)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v39);
        if (v37)
        {
          (*(void (**)(WebKit::NotificationManagerMessageHandler *, IPC::Connection *, WTF **, WTF **, _QWORD **))(*(_QWORD *)this + 40))(this, a2, &v33, &v36, &v32);
          v30 = v32;
          v32 = 0;
          if (v30)
            (*(void (**)(_QWORD *))(*v30 + 8))(v30);
          break;
        }
LABEL_43:
        __break(1u);
LABEL_44:
        if (v13)
          (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v11 + 2))(v11, v12);
LABEL_31:
        LOBYTE(v33) = 0;
      }
      if (v37)
      {
        v31 = v36;
        v36 = 0;
        if (v31)
          WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v31, v27);
        WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v33, v27);
      }
      return;
    default:
      return;
  }
}

WTF *WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(WTF *this, void *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  _DWORD *v5;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      if (v5[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler16ShowNotificationEN6WebKit33NotificationManagerMessageHandlerES8_FvRNS2_10ConnectionERKN7WebCore16NotificationDataEONS_6RefPtrINSB_21NotificationResourcesENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B2890;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler16ShowNotificationEN6WebKit33NotificationManagerMessageHandlerES8_FvRNS2_10ConnectionERKN7WebCore16NotificationDataEONS_6RefPtrINSB_21NotificationResourcesENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B2890;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler16ShowNotificationEN6WebKit33NotificationManagerMessageHandlerES8_FvRNS2_10ConnectionERKN7WebCore16NotificationDataEONS_6RefPtrINSB_21NotificationResourcesENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3047;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::UUID>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v7);
  if (v8)
  {
    *(_OWORD *)a2 = v7;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
    {
      if (v6)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  char v5;
  _QWORD v6[2];
  char v7;

  result = IPC::Decoder::decode<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  v5 = v7;
  if (v7)
  {
    *(_QWORD *)a3 = v6[0];
    *(_QWORD *)(a3 + 8) = v6[1];
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v5;
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WTF::UUID,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

WTF *IPC::VectorArgumentCoder<false,WTF::UUID,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  WTF *v13;
  __int128 v14;
  int v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  WTF *v20;
  __int128 v21;
  unint64_t v22;
  WTF *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v24 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v6, v5);
        v25 = *a1;
        v24 = a1[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_29;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v24 = v5;
    v25 = 0;
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
    {
      if (v24)
        result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v25);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v28 = 0;
  v29 = 0;
  if (v10 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v30);
      if (!v31)
        break;
      v18 = HIDWORD(v29);
      if (HIDWORD(v29) == (_DWORD)v29)
      {
        v19 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v30);
        v18 = HIDWORD(v29);
        v20 = v28;
        v21 = *v19;
      }
      else
      {
        v20 = v28;
        v21 = v30;
      }
      *((_OWORD *)v20 + v18) = v21;
      v22 = ++HIDWORD(v29);
      if (!--v10)
      {
        WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v28, v22);
        *(_QWORD *)a3 = v28;
        v27 = v29;
        v28 = 0;
        v29 = 0;
        *(_QWORD *)(a3 + 8) = v27;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      v15 = 0;
      v17 = 0;
      v16 = 0;
LABEL_17:
      v28 = 0;
      *(_QWORD *)a3 = v16;
      HIDWORD(v29) = 0;
      *(_DWORD *)(a3 + 8) = v17;
      *(_DWORD *)(a3 + 12) = v15;
LABEL_18:
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_25;
    }
    LODWORD(v29) = v10;
    v28 = (WTF *)WTF::fastMalloc((WTF *)(16 * v10));
    while (1)
    {
      IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v30);
      if (!v31)
        break;
      v11 = HIDWORD(v29);
      if (HIDWORD(v29) == (_DWORD)v29)
      {
        v12 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v30);
        v11 = HIDWORD(v29);
        v13 = v28;
        v14 = *v12;
      }
      else
      {
        v13 = v28;
        v14 = v30;
      }
      *((_OWORD *)v13 + v11) = v14;
      v15 = ++HIDWORD(v29);
      if (!--v10)
      {
        v16 = v28;
        v17 = v29;
        goto LABEL_17;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_25:
  result = v28;
  if (v28)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_DWORD *WebKit::PlaybackSessionManager::didReceiveMessage(_DWORD *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _DWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unsigned __int16 v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  IPC::Connection *v13;
  unint64_t v14;
  double *v16;
  unint64_t v17;
  BOOL v18;
  double v19;
  double *v20;
  unint64_t v21;
  BOOL v22;
  double v23;
  double v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;

  v3 = this;
  ++this[4];
  v4 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x270:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::beginScanningBackward((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x271:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::beginScanningForward((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x272:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::beginScrubbing((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x273:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::endScanning((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x274:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::endScrubbing((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x275:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::enterFullscreen((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x276:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::exitFullscreen((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x277:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>>((uint64_t *)a3, &v37);
      if ((_BYTE)v39)
        this = (_DWORD *)WebKit::PlaybackSessionManager::fastSeek((uint64_t)v3, v37, v38);
      goto LABEL_74;
    case 0x278:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::handleControlledElementIDRequest((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x279:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::pause((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x27A:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::play((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x27B:
      v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v11)
        goto LABEL_68;
      v12 = v4[1];
      v13 = (IPC::Connection *)*v4;
      v14 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v12 < v14 || v12 - v14 <= 7)
      {
        v33 = 0;
        v34 = 0;
        *v4 = 0;
        v4[1] = 0;
        v35 = v4[3];
        if (v35)
        {
          if (v12)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
            v34 = *v4;
            v33 = v4[1];
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
        }
        goto LABEL_84;
      }
      v16 = (double *)((char *)v13 + v14);
      v4[2] = (uint64_t)(v16 + 1);
      if (!v13)
      {
        v33 = v12;
        v34 = 0;
LABEL_84:
        *v4 = 0;
        v4[1] = 0;
        v36 = v4[3];
        if (v36 && v33)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34, v33);
        goto LABEL_68;
      }
      v17 = (((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v13;
      v18 = v12 >= v17 && v12 - v17 > 7;
      if (v18
        && ((v19 = *v16,
             v20 = (double *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8),
             v4[2] = (uint64_t)v13 + v17 + 8,
             v21 = (((unint64_t)v13 + v17 + 15) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v13,
             v12 >= v21)
          ? (v22 = v12 - v21 > 7)
          : (v22 = 0),
            v22))
      {
        v23 = *v20;
        v24 = *(double *)((char *)v13 + v21);
        v4[2] = (uint64_t)v13 + v21 + 8;
        this = (_DWORD *)WebKit::PlaybackSessionManager::seekToTime((uint64_t)v3, v10, v19, v23, v24);
      }
      else
      {
        *v4 = 0;
        v4[1] = 0;
        v29 = v4[3];
        if (v29)
        {
          if (v12)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
            v30 = *v4;
            v31 = v4[1];
            v32 = v4[3];
            *v4 = 0;
            v4[1] = 0;
            if (v32)
            {
              if (v31)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
            }
          }
        }
LABEL_68:
        a2 = (IPC::Connection *)*v4;
        a3 = (IPC::Decoder *)v4[1];
        *v4 = 0;
        v4[1] = 0;
        this = (_DWORD *)v4[3];
        if (this && a3)
          this = (_DWORD *)(*(uint64_t (**)(_DWORD *, IPC::Connection *))(*(_QWORD *)this + 16))(this, a2);
      }
LABEL_74:
      if (v3[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *, IPC::Connection *, IPC::Decoder *))(*(_QWORD *)v3 + 8))(v3, a2, a3);
      --v3[4];
      return this;
    case 0x27C:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, &v37);
      if ((_BYTE)v39)
        this = (_DWORD *)WebKit::PlaybackSessionManager::selectAudioMediaOption((uint64_t)v3, v37);
      goto LABEL_74;
    case 0x27D:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, &v37);
      if ((_BYTE)v39)
        this = (_DWORD *)WebKit::PlaybackSessionManager::selectLegibleMediaOption((uint64_t)v3, v37);
      goto LABEL_74;
    case 0x27E:
      v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v6)
        goto LABEL_68;
      v7 = v5;
      v8 = IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>(v4);
      if (v8 < 0x100u)
        goto LABEL_68;
      v9 = v8;
      IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteCommandArgument>(v4, (uint64_t)&v42);
      if (!v44)
        goto LABEL_68;
      v37 = v7;
      LOBYTE(v38) = v9;
      v39 = v42;
      v40 = v43;
      v41 = 1;
      this = (_DWORD *)WebKit::PlaybackSessionManager::sendRemoteCommand((uint64_t)v3, v7);
      goto LABEL_74;
    case 0x27F:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,float>>((uint64_t *)a3, &v37);
      if ((_BYTE)v39)
        this = (_DWORD *)WebKit::PlaybackSessionManager::setDefaultPlaybackRate((uint64_t)v3, v37, *(float *)&v38);
      goto LABEL_74;
    case 0x280:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v37);
      if ((_BYTE)v39)
        this = (_DWORD *)WebKit::PlaybackSessionManager::setMuted((uint64_t)v3, v37);
      goto LABEL_74;
    case 0x281:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,float>>((uint64_t *)a3, &v37);
      if ((_BYTE)v39)
        this = (_DWORD *)WebKit::PlaybackSessionManager::setPlaybackRate((uint64_t)v3, v37, *(float *)&v38);
      goto LABEL_74;
    case 0x282:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, &v37);
      if ((_BYTE)v39)
        this = (_DWORD *)WebKit::PlaybackSessionManager::setPlayingOnSecondScreen((uint64_t)v3, v37);
      goto LABEL_74;
    case 0x283:
      v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v26)
        goto LABEL_68;
      v27 = v25;
      v28 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(v4);
      if (v28 <= 0xFFu)
        goto LABEL_68;
      this = (_DWORD *)WebKit::PlaybackSessionManager::setSoundStageSize((uint64_t)v3, v27, v28);
      goto LABEL_74;
    case 0x284:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>>((uint64_t *)a3, &v37);
      if ((_BYTE)v39)
        this = (_DWORD *)WebKit::PlaybackSessionManager::setVolume((uint64_t)v3, v37, v38);
      goto LABEL_74;
    case 0x285:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::toggleInWindow((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x286:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::toggleMuted((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x287:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::togglePictureInPicture((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    case 0x288:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        this = (_DWORD *)WebKit::PlaybackSessionManager::togglePlayState((uint64_t)v3, (uint64_t)this);
      goto LABEL_74;
    default:
      goto LABEL_74;
  }
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    a3 = 0;
    a2 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v12 = result;
      v14 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v4);
        result = v12;
        a4 = v14;
        a2 = *v12;
        a3 = v12[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_12:
      v10 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      v13 = a4;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, a2);
      a4 = v13;
    }
    goto LABEL_12;
  }
  v8 = (uint64_t *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_14;
  }
  v9 = *v8;
  *(_QWORD *)a4 = *(_QWORD *)a2;
  *(_QWORD *)(a4 + 8) = v9;
  v10 = 1;
LABEL_9:
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,float>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,float>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,float>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,float>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,float>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    a3 = 0;
    a2 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v12 = result;
      v14 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v4);
        result = v12;
        a4 = v14;
        a2 = *v12;
        a3 = v12[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_12:
      v10 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      v13 = a4;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, a2);
      a4 = v13;
    }
    goto LABEL_12;
  }
  v8 = (int *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_14;
  }
  v9 = *v8;
  *(_QWORD *)a4 = *(_QWORD *)a2;
  *(_DWORD *)(a4 + 8) = v9;
  v10 = 1;
LABEL_9:
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    a3 = 0;
    a2 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v12 = result;
      v14 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v4);
        result = v12;
        a4 = v14;
        a2 = *v12;
        a3 = v12[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_12:
      v10 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      v13 = a4;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, a2);
      a4 = v13;
    }
    goto LABEL_12;
  }
  v8 = (uint64_t *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_14;
  }
  v9 = *v8;
  *(_QWORD *)a4 = *(_QWORD *)a2;
  *(_QWORD *)(a4 + 8) = v9;
  v10 = 1;
LABEL_9:
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;

  v4 = result[1];
  v5 = *result;
  v6 = result[2] - *result;
  if (v4 <= v6)
  {
    v10 = 0;
    v11 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v15 = result;
      v18 = a3;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        result = v15;
        a3 = v18;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_8;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = v7 + 1;
  if (!v5)
  {
    v10 = v4;
    v11 = 0;
LABEL_8:
    v4 = 0;
    v5 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v14 = result;
      v17 = a3;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        result = v14;
        a3 = v17;
        v5 = *v14;
        v4 = v14[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_9:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_10:
      v9 = 0;
      *a3 = 0;
      goto LABEL_6;
    }
LABEL_12:
    if (v4)
    {
      v16 = a3;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
      a3 = v16;
    }
    goto LABEL_10;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_9;
  if (!*(_BYTE *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_12;
  }
  *(_QWORD *)a3 = *(_QWORD *)a2;
  a3[8] = v8 != 0;
  v9 = 1;
LABEL_6:
  a3[16] = v9;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteControlCommandType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteControlCommandType,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 0x10)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteCommandArgument>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteCommandArgument,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void WebKit::PlaybackSessionManagerProxy::didReceiveMessage(WebKit::PlaybackSessionManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  __int128 *v16;
  WTF *v17;
  __int128 v18;
  unsigned int v19;
  WTF *v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unint64_t v32;
  double *v34;
  unint64_t v35;
  double v37;
  double v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  double *v56;
  unint64_t v57;
  double v59;
  unint64_t v60;
  char v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  double *v67;
  unint64_t v68;
  double v70;
  double v71;
  WTF *v72;
  uint64_t v73;
  __int128 *v74;
  WTF *v75;
  __int128 v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103[2];
  uint64_t v104;
  uint64_t v105;
  char v106;
  WTF *v107;
  uint64_t v108;

  ++*((_DWORD *)this + 4);
  v4 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x25B:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::audioMediaSelectionIndexChanged((uint64_t)this, (uint64_t)v103[0], (uint64_t)v103[1]);
      goto LABEL_145;
    case 0x25C:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long long>>((uint64_t)v103, (uint64_t *)a3);
      if (v106)
      {
        v107 = v103[1];
        v48 = v104;
        v103[1] = 0;
        v104 = 0;
        v108 = v48;
        WebKit::PlaybackSessionManagerProxy::audioMediaSelectionOptionsChanged((uint64_t)this, (uint64_t)v103[0], (unsigned int *)&v107, v105);
        goto LABEL_58;
      }
      goto LABEL_145;
    case 0x25D:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::bufferedTimeChanged((uint64_t)this, (uint64_t)v103[0], *(double *)&v103[1]);
      goto LABEL_145;
    case 0x25E:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::canPlayFastReverseChanged((uint64_t)this, (uint64_t)v103[0], LOBYTE(v103[1]));
      goto LABEL_145;
    case 0x25F:
      WebKit::PlaybackSessionManagerProxy::clearPlaybackControlsManager(this);
      goto LABEL_145;
    case 0x260:
      v50 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v51)
        goto LABEL_144;
      v52 = v4[1];
      v53 = *v4;
      v54 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v52 < v54 || v52 - v54 <= 7)
      {
        v45 = 0;
        v46 = 0;
        *v4 = 0;
        v4[1] = 0;
        v96 = v4[3];
        if (!v96)
          goto LABEL_143;
        if (!v52)
        {
          v45 = 0;
          v46 = 0;
          goto LABEL_143;
        }
        goto LABEL_176;
      }
      v56 = (double *)(v53 + v54);
      v4[2] = (uint64_t)(v56 + 1);
      if (!v53)
      {
        v45 = v52;
        v46 = 0;
        goto LABEL_143;
      }
      v57 = (((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8) - v53;
      if (v52 < v57 || v52 - v57 <= 7)
      {
        *v4 = 0;
        v4[1] = 0;
        v80 = v4[3];
        if (!v80 || !v52)
          goto LABEL_144;
        goto LABEL_154;
      }
      v59 = *v56;
      v4[2] = (((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
      WebKit::PlaybackSessionManagerProxy::currentTimeChanged((uint64_t)this, v50, v59);
      goto LABEL_145;
    case 0x261:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::durationChanged((uint64_t)this, (uint64_t)v103[0], *(double *)&v103[1]);
      goto LABEL_145;
    case 0x262:
      v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v40)
        goto LABEL_144;
      v26 = v4[1];
      v27 = *v4;
      v41 = v4[2] - *v4;
      if (v26 <= v41)
      {
        v91 = 0;
        v92 = 0;
        *v4 = 0;
        v4[1] = 0;
        v95 = v4[3];
        if (v95)
        {
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
            v92 = *v4;
            v91 = v4[1];
          }
          else
          {
            v91 = 0;
            v92 = 0;
          }
        }
        goto LABEL_136;
      }
      v42 = (unsigned __int8 *)(v27 + v41);
      v4[2] = (uint64_t)(v42 + 1);
      if (!v27)
      {
        v91 = v26;
        v92 = 0;
LABEL_136:
        v26 = 0;
        v27 = 0;
        *v4 = 0;
        v4[1] = 0;
        v94 = v4[3];
        if (!v94)
          goto LABEL_115;
        if (!v91)
        {
LABEL_138:
          v26 = 0;
          v27 = 0;
LABEL_115:
          *v4 = 0;
          v4[1] = 0;
          v79 = v4[3];
          if (v79)
          {
LABEL_116:
            if (v26)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v27);
          }
          goto LABEL_144;
        }
LABEL_134:
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v94 + 16))(v94, v92, v91);
LABEL_114:
        v27 = *v4;
        v26 = v4[1];
        goto LABEL_115;
      }
      v43 = *v42;
      if (v43 >= 2)
        goto LABEL_115;
      if (v26 <= (unint64_t)&v42[-v27 + 1])
      {
        v45 = 0;
        v46 = 0;
        *v4 = 0;
        v4[1] = 0;
        v97 = v4[3];
        if (v97)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v97 + 16))(v97);
          v45 = 0;
          v102 = v4[1];
          v96 = v4[3];
          *v4 = 0;
          v4[1] = 0;
          v46 = 0;
          if (v96)
          {
            if (v102)
            {
LABEL_176:
              (*(void (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
              v46 = *v4;
              v45 = v4[1];
            }
          }
        }
        goto LABEL_143;
      }
      v4[2] = (uint64_t)(v42 + 2);
      v44 = v42[1];
      v45 = v26;
      v46 = v27;
      if (v44 >= 3)
      {
LABEL_143:
        *v4 = 0;
        v4[1] = 0;
        v98 = v4[3];
        if (v98 && v45)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v98 + 16))(v98, v46, v45);
        goto LABEL_144;
      }
      v47 = v39;
      IPC::Decoder::decode<WTF::String>(v4, v103);
      if (!LOBYTE(v103[1]))
        goto LABEL_144;
      WebKit::PlaybackSessionManagerProxy::externalPlaybackPropertiesChanged((uint64_t)this, v47, v43 != 0, v44, (WTF::StringImpl *)v103);
LABEL_87:
      v62 = v103[0];
      v103[0] = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, a2);
        else
          *(_DWORD *)v62 -= 2;
      }
LABEL_145:
      if (*((_DWORD *)this + 4) == 1)
        (*(void (**)(WebKit::PlaybackSessionManagerProxy *, IPC::Connection *, IPC::Decoder *))(*(_QWORD *)this + 8))(this, a2, a3);
      else
        --*((_DWORD *)this + 4);
      return;
    case 0x263:
      IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v61)
        goto LABEL_144;
      IPC::Decoder::decode<WTF::String>(v4, v103);
      if (!LOBYTE(v103[1]))
        goto LABEL_144;
      WTF::isIntegralOrPointerType(this);
      goto LABEL_87;
    case 0x264:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::isInWindowFullscreenActiveChanged((uint64_t)this, (uint64_t)v103[0], LOBYTE(v103[1]));
      goto LABEL_145;
    case 0x265:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::legibleMediaSelectionIndexChanged((uint64_t)this, (uint64_t)v103[0], (uint64_t)v103[1]);
      goto LABEL_145;
    case 0x266:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long long>>((uint64_t)v103, (uint64_t *)a3);
      if (v106)
      {
        v107 = v103[1];
        v22 = v104;
        v103[1] = 0;
        v104 = 0;
        v108 = v22;
        WebKit::PlaybackSessionManagerProxy::legibleMediaSelectionOptionsChanged((uint64_t)this, (uint64_t)v103[0], (unsigned int *)&v107, v105);
LABEL_58:
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v107, v23);
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v103[1], v49);
      }
      goto LABEL_145;
    case 0x267:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::mutedChanged((uint64_t)this, (uint64_t)v103[0], LOBYTE(v103[1]));
      goto LABEL_145;
    case 0x268:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::pictureInPictureSupportedChanged((uint64_t)this, (uint64_t)v103[0], LOBYTE(v103[1]));
      goto LABEL_145;
    case 0x269:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::playbackStartedTimeChanged((uint64_t)this, (uint64_t)v103[0], *(double *)&v103[1]);
      goto LABEL_145;
    case 0x26A:
      v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v25)
        goto LABEL_144;
      v26 = v4[1];
      v27 = *v4;
      v28 = v4[2] - *v4;
      if (v26 <= v28)
      {
        v91 = 0;
        v92 = 0;
        *v4 = 0;
        v4[1] = 0;
        v93 = v4[3];
        if (v93)
        {
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
            v92 = *v4;
            v91 = v4[1];
          }
          else
          {
            v91 = 0;
            v92 = 0;
          }
        }
      }
      else
      {
        v29 = (unsigned __int8 *)(v27 + v28);
        v30 = v29 + 1;
        v4[2] = (uint64_t)(v29 + 1);
        if (v27)
        {
          v31 = *v29;
          if (v31 >= 4)
            goto LABEL_115;
          v32 = ((unint64_t)(v30 + 7) & 0xFFFFFFFFFFFFFFF8) - v27;
          if (v26 >= v32 && v26 - v32 > 7)
          {
            v34 = (double *)(v27 + v32);
            v4[2] = (uint64_t)(v34 + 1);
            v35 = (((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8) - v27;
            if (v26 >= v35 && v26 - v35 > 7)
            {
              v37 = *v34;
              v38 = *(double *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
              v4[2] = (((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
              WebKit::PlaybackSessionManagerProxy::rateChanged((uint64_t)this, v24, v31, v37, v38);
              goto LABEL_145;
            }
          }
          *v4 = 0;
          v4[1] = 0;
          v80 = v4[3];
          if (v80)
          {
LABEL_154:
            (*(void (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
            v27 = *v4;
            v26 = v4[1];
            v79 = v4[3];
            *v4 = 0;
            v4[1] = 0;
            if (v79)
              goto LABEL_116;
          }
          goto LABEL_144;
        }
        v91 = v26;
        v92 = 0;
      }
      v26 = 0;
      v27 = 0;
      *v4 = 0;
      v4[1] = 0;
      v94 = v4[3];
      if (!v94)
        goto LABEL_115;
      if (!v91)
        goto LABEL_138;
      goto LABEL_134;
    case 0x26B:
      v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v6)
        goto LABEL_144;
      v7 = v4[1];
      v8 = *v4;
      v9 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v7 < v9 || v7 - v9 <= 7)
      {
        v81 = 0;
        v82 = 0;
        *v4 = 0;
        v4[1] = 0;
        v83 = v4[3];
        if (v83)
        {
          if (v7)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v83 + 16))(v83, v8, v7);
            v82 = *v4;
            v81 = v4[1];
          }
          else
          {
            v81 = 0;
            v82 = 0;
          }
        }
        goto LABEL_121;
      }
      v11 = (unint64_t *)(v8 + v9);
      v4[2] = (uint64_t)(v11 + 1);
      if (!v8)
      {
        v81 = v7;
        v82 = 0;
LABEL_121:
        *v4 = 0;
        v4[1] = 0;
        v84 = v4[3];
        if (v84 && v81)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v82);
        goto LABEL_114;
      }
      v12 = v5;
      v13 = *v11;
      v107 = 0;
      v108 = 0;
      if (v13 >= 0x10000)
      {
        while (1)
        {
          IPC::Decoder::decode<std::pair<double,double>>((uint64_t)v103, v4);
          if (!(_BYTE)v104)
            goto LABEL_112;
          v73 = HIDWORD(v108);
          if (HIDWORD(v108) == (_DWORD)v108)
          {
            v74 = (__int128 *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v107, HIDWORD(v108) + 1, (unint64_t)v103);
            v73 = HIDWORD(v108);
            v75 = v107;
            v76 = *v74;
          }
          else
          {
            v75 = v107;
            v76 = *(_OWORD *)v103;
          }
          *((_OWORD *)v75 + v73) = v76;
          v77 = ++HIDWORD(v108);
          if (!--v13)
          {
            v20 = v107;
            if (v108 > v77)
            {
              if ((_DWORD)v77)
              {
                LODWORD(v108) = v77;
                v20 = (WTF *)WTF::fastRealloc(v107, (void *)(16 * v77));
              }
              else if (v107)
              {
                v107 = 0;
                LODWORD(v108) = 0;
                WTF::fastFree(v20, v14);
                v20 = v107;
              }
            }
            v21 = v108;
            v19 = HIDWORD(v108);
            goto LABEL_93;
          }
        }
      }
      if (v13)
      {
        LODWORD(v108) = v13;
        v107 = (WTF *)WTF::fastMalloc((WTF *)(16 * v13));
        while (1)
        {
          IPC::Decoder::decode<std::pair<double,double>>((uint64_t)v103, v4);
          if (!(_BYTE)v104)
            break;
          v15 = HIDWORD(v108);
          if (HIDWORD(v108) == (_DWORD)v108)
          {
            v16 = (__int128 *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v107, HIDWORD(v108) + 1, (unint64_t)v103);
            v15 = HIDWORD(v108);
            v17 = v107;
            v18 = *v16;
          }
          else
          {
            v17 = v107;
            v18 = *(_OWORD *)v103;
          }
          *((_OWORD *)v17 + v15) = v18;
          v19 = ++HIDWORD(v108);
          if (!--v13)
          {
            v20 = v107;
            v21 = v108;
            goto LABEL_93;
          }
        }
LABEL_112:
        v78 = v107;
        if (v107)
        {
          v107 = 0;
          LODWORD(v108) = 0;
          WTF::fastFree(v78, v14);
        }
        goto LABEL_114;
      }
      v19 = 0;
      v21 = 0;
      v20 = 0;
LABEL_93:
      v63 = v4[1];
      v64 = (char *)*v4;
      v65 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v63 >= v65 && v63 - v65 > 7)
      {
        v67 = (double *)&v64[v65];
        v4[2] = (uint64_t)(v67 + 1);
        if (v64)
        {
          v68 = (((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v64;
          if (v63 >= v68 && v63 - v68 > 7)
          {
            v70 = *v67;
            v71 = *(double *)(((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8);
            v4[2] = (((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
            v103[0] = v20;
            v103[1] = (WTF::StringImpl *)__PAIR64__(v19, v21);
            WebKit::PlaybackSessionManagerProxy::seekableRangesVectorChanged(this, v12, (uint64_t *)v103, v70, v71);
            v72 = v103[0];
            if (v103[0])
            {
              v103[0] = 0;
              LODWORD(v103[1]) = 0;
              WTF::fastFree(v72, a2);
            }
            goto LABEL_145;
          }
          v85 = v20;
          *v4 = 0;
          v4[1] = 0;
          v90 = v4[3];
          if (v90)
          {
            if (v63)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v90 + 16))(v90);
              v64 = (char *)*v4;
              v100 = v4[1];
              v101 = v4[3];
              *v4 = 0;
              v4[1] = 0;
              if (v101)
              {
                if (v100)
                  (*(void (**)(uint64_t, char *))(*(_QWORD *)v101 + 16))(v101, v64);
              }
            }
          }
          goto LABEL_129;
        }
        v85 = v20;
        v86 = v63;
        v87 = 0;
      }
      else
      {
        v85 = v20;
        v86 = 0;
        v87 = 0;
        *v4 = 0;
        v4[1] = 0;
        v88 = v4[3];
        if (v88)
        {
          if (v63)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v88 + 16))(v88);
            v87 = *v4;
            v86 = v4[1];
          }
          else
          {
            v86 = 0;
            v87 = 0;
          }
        }
      }
      *v4 = 0;
      v4[1] = 0;
      v89 = v4[3];
      if (v89 && v86)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v87, v86);
LABEL_129:
      if (v85)
        WTF::fastFree(v85, v64);
LABEL_144:
      a2 = (IPC::Connection *)*v4;
      a3 = (IPC::Decoder *)v4[1];
      *v4 = 0;
      v4[1] = 0;
      v99 = v4[3];
      if (v99 && a3)
        (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v99 + 16))(v99, a2);
      goto LABEL_145;
    case 0x26C:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::setLogIdentifier((uint64_t)this, (uint64_t)v103[0], (uint64_t)v103[1]);
      goto LABEL_145;
    case 0x26D:
      v60 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::PlaybackSessionManagerProxy::setUpPlaybackControlsManagerWithID(this, v60);
      goto LABEL_145;
    case 0x26E:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,double>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::volumeChanged((uint64_t)this, (uint64_t)v103[0], *(double *)&v103[1]);
      goto LABEL_145;
    case 0x26F:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t *)a3, v103);
      if ((_BYTE)v104)
        WebKit::PlaybackSessionManagerProxy::wirelessVideoPlaybackDisabledChanged((uint64_t)this, (uint64_t)v103[0], LOBYTE(v103[1]));
      goto LABEL_145;
    default:
      goto LABEL_145;
  }
}

uint64_t IPC::Decoder::decode<std::pair<double,double>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      v23 = a2;
      v25 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v3);
        a2 = v23;
        result = v25;
        v13 = *v23;
        v12 = v23[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v12)
    {
      v22 = a2;
      v24 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
LABEL_28:
      a2 = v22;
      result = v24;
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  v6 = (uint64_t *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    v12 = v2;
    v13 = 0;
    goto LABEL_15;
  }
  v7 = (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 >= v7 && v2 - v7 > 7)
  {
    v9 = (uint64_t *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
    v10 = *v9;
    v11 = *v6;
    a2[2] = v9 + 1;
    *(_QWORD *)result = v11;
    *(_QWORD *)(result + 8) = v10;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }
  *a2 = 0;
  a2[1] = 0;
  v16 = a2[3];
  if (v16)
  {
    if (v2)
    {
      v22 = a2;
      v24 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
      a2 = v22;
      result = v24;
      v20 = *v22;
      v19 = v22[1];
      v21 = v22[3];
      *v22 = 0;
      v22[1] = 0;
      if (v21)
      {
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v20);
          goto LABEL_28;
        }
      }
    }
  }
LABEL_19:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  v18 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v17)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47[8];
  WTF::StringImpl *v48;
  char v49;
  char v50;
  uint64_t v51;
  WTF *v52;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v5)
  {
LABEL_49:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    goto LABEL_50;
  }
  v6 = a2[1];
  v7 = *a2;
  v8 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v6 < v8 || v6 - v8 <= 7)
  {
    v25 = 0;
    v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v7, v6);
        v26 = *a2;
        v25 = a2[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
LABEL_29:
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28 && v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
LABEL_44:
    v33 = *a2;
    v34 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35)
      v36 = v34 == 0;
    else
      v36 = 1;
    if (!v36)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
    goto LABEL_49;
  }
  v10 = (unint64_t *)(v7 + v8);
  a2[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    v25 = v6;
    v26 = 0;
    goto LABEL_29;
  }
  v11 = v4;
  v12 = *v10;
  v51 = 0;
  v52 = 0;
  if (v12 >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::MediaSelectionOption>((uint64_t)v47, a2);
      if (!v50)
      {
LABEL_43:
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v5);
        goto LABEL_44;
      }
      if (HIDWORD(v52) != (_DWORD)v52)
        break;
      WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSelectionOption>((uint64_t)&v51, (unint64_t)v47);
      if (v50)
        goto LABEL_37;
LABEL_41:
      if (!--v12)
      {
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v51, HIDWORD(v52));
        v17 = v51;
        v44 = v51;
        LODWORD(v12) = (_DWORD)v52;
        v18 = HIDWORD(v52);
        v51 = 0;
        v52 = 0;
        goto LABEL_24;
      }
    }
    v29 = HIDWORD(v52) + 1;
    v30 = v51 + 24 * HIDWORD(v52);
    *(_BYTE *)v30 = v47[0];
    v31 = v48;
    v48 = 0;
    *(_QWORD *)(v30 + 8) = v31;
    *(_BYTE *)(v30 + 16) = v49;
    HIDWORD(v52) = v29;
LABEL_37:
    v32 = v48;
    v48 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v32 -= 2;
    }
    goto LABEL_41;
  }
  if (v12)
  {
    LODWORD(v52) = 24 * (int)v12 / 0x18u;
    v51 = WTF::fastMalloc((WTF *)(24 * v12));
    while (1)
    {
      IPC::Decoder::decode<WebCore::MediaSelectionOption>((uint64_t)v47, a2);
      if (!v50)
        goto LABEL_43;
      if (HIDWORD(v52) != (_DWORD)v52)
        break;
      WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSelectionOption>((uint64_t)&v51, (unint64_t)v47);
      if (v50)
        goto LABEL_16;
LABEL_20:
      if (!--v12)
      {
        v17 = v51;
        LODWORD(v12) = (_DWORD)v52;
        v18 = HIDWORD(v52);
        goto LABEL_23;
      }
    }
    v13 = HIDWORD(v52) + 1;
    v14 = v51 + 24 * HIDWORD(v52);
    *(_BYTE *)v14 = v47[0];
    v15 = v48;
    v48 = 0;
    *(_QWORD *)(v14 + 8) = v15;
    *(_BYTE *)(v14 + 16) = v49;
    HIDWORD(v52) = v13;
LABEL_16:
    v16 = v48;
    v48 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v16 -= 2;
    }
    goto LABEL_20;
  }
  v18 = 0;
  v17 = 0;
LABEL_23:
  v51 = 0;
  v52 = 0;
  v44 = v17;
LABEL_24:
  v45 = __PAIR64__(v18, v12);
  v46 = 1;
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v5);
  v19 = a2[1];
  v20 = (char *)*a2;
  v21 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v19 < v21 || v19 - v21 <= 7)
  {
    v40 = 0;
    v41 = 0;
    *a2 = 0;
    a2[1] = 0;
    v42 = a2[3];
    if (v42)
    {
      if (v19)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
        v41 = *a2;
        v40 = a2[1];
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
    }
  }
  else
  {
    v22 = &v20[v21];
    a2[2] = (uint64_t)(v22 + 8);
    if (v20)
    {
      v23 = *(_QWORD *)v22;
      v44 = 0;
      v45 = 0;
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v17;
      *(_DWORD *)(a1 + 16) = v12;
      *(_DWORD *)(a1 + 20) = v18;
      *(_QWORD *)(a1 + 24) = v23;
      *(_BYTE *)(a1 + 32) = 1;
      return WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v20);
    }
    v40 = v19;
    v41 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v43 = a2[3];
  if (v43 && v40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v41);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v20);
LABEL_50:
  v37 = *a2;
  v38 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v39 = v38 == 0;
  else
    v39 = 1;
  if (!v39)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v37);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::MediaSelectionOption>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::MediaSelectionOption,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 24))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSelectionOption>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 24 * v4;
  *(_BYTE *)v6 = *(_BYTE *)result;
  v7 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v6 + 8) = v7;
  *(_BYTE *)(v6 + 16) = *(_BYTE *)(result + 16);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x196F9187CLL);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::MediaSelectionOption>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MediaSelectionOption>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_BYTE *)a3 = *(_BYTE *)v5;
      v6 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = *((_BYTE *)v5 + 16);
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 24);
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (result[2] > this)
  {
    v3 = (uint64_t)result;
    v4 = result[3];
    if (v4 > this)
    {
      result = (unsigned int *)WTF::VectorDestructor<true,WebCore::TextList>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 24 * this), (WTF::StringImpl *)(*(_QWORD *)result + 24 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (WTF *)(24 * this);
      result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::MediaSelectionOption>::move(v5, (WTF::StringImpl *)((char *)v5 + 24 * v4), (uint64_t)result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::TextList>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_196F91B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_196F91EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14)
{
  unsigned int *v14;
  unsigned int *v15;
  WTF::StringImpl *v17;

  v15 = v14;
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v17);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v17);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v17);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
        CFRelease(*(CFTypeRef *)(v8 + 8));
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebPushD::PushClientConnection::create@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x90);
  result = WebPushD::PushClientConnection::PushClientConnection(v4, a1);
  *a2 = v4;
  return result;
}

void sub_196F92050(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushClientConnection::PushClientConnection(uint64_t a1, void *a2)
{
  uint64_t IdentifierInternal;
  id v5;

  *(_DWORD *)(a1 + 16) = 1;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E34B4658;
  *(_QWORD *)(a1 + 24) = IdentifierInternal;
  *(_QWORD *)(a1 + 32) = a2;
  if (a2)
    v5 = a2;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 128) = 0;
  return a1;
}

void sub_196F920DC(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;

  *v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebPushD::PushClientConnection::updateConnectionConfiguration(uint64_t a1, uint64_t a2, __n128 a3)
{
  WTF::StringImpl **result;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 24))
    WebPushD::PushClientConnection::setHostAppAuditTokenData(a1, (__n128 **)(a2 + 8), a3);
  result = WTF::String::operator=((WTF::StringImpl **)(a1 + 104), (WTF::StringImpl *)(a2 + 32));
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_BYTE *)(a2 + 64))
    v7 = *(_QWORD *)(a2 + 56);
  else
    v7 = 0;
  if (!*(_BYTE *)(a2 + 64))
    v6 = 0;
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_BYTE *)(a1 + 129) = *(_BYTE *)a2;
  return result;
}

__n128 WebPushD::PushClientConnection::setHostAppAuditTokenData(uint64_t a1, __n128 **a2, __n128 result)
{
  __n128 *v3;
  __n128 *v4;
  __n128 v8;
  __n128 v9;

  if (*((_DWORD *)a2 + 3) == 32)
  {
    v3 = *a2;
    result = **a2;
    v9 = (*a2)[1];
    v4 = (__n128 *)(a1 + 40);
    if (*(_BYTE *)(a1 + 72))
    {
      if (v4->n128_u64[0] != result.n128_u64[0]
        || *(_QWORD *)(a1 + 48) != result.n128_u64[1]
        || *(_QWORD *)(a1 + 56) != v9.n128_u64[0]
        || *(_QWORD *)(a1 + 64) != v9.n128_u64[1])
      {
        __break(0xC471u);
        JUMPOUT(0x196F921C4);
      }
    }
    else
    {
      result = *v3;
      v8 = v3[1];
      *v4 = *v3;
      *(__n128 *)(a1 + 56) = v8;
      *(_BYTE *)(a1 + 72) = 1;
    }
  }
  return result;
}

uint64_t WebPushD::PushClientConnection::getPushTopicsForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v6;

  v3 = a1;
  {
    v6 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    v3 = a1;
    a2 = v6;
  }
  return WebPushD::WebPushDaemon::getPushTopicsForTesting((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v3, a2);
}

WTF::StringImpl **WebPushD::PushClientConnection::subscriptionSetIdentifier@<X0>(WebPushD::PushClientConnection *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl **result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  result = WebPushD::PushClientConnection::hostAppCodeSigningIdentifier(this);
  v5 = *result;
  if (*result)
    *(_DWORD *)v5 += 2;
  *a2 = v5;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  if (v6)
    *(_DWORD *)v6 += 2;
  a2[1] = v6;
  v7 = *((_QWORD *)this + 14);
  if (*((_OWORD *)this + 7) == 0)
  {
    a2[2] = 0;
    a2[3] = 0;
  }
  else
  {
    *(WTF::StringImpl **)((char *)a2 + 17) = *(WTF::StringImpl **)((char *)this + 113);
    a2[3] = (WTF::StringImpl *)*((_QWORD *)this + 15);
    *((_BYTE *)a2 + 16) = v7;
  }
  return result;
}

WTF::StringImpl **WebPushD::PushClientConnection::hostAppCodeSigningIdentifier(WebPushD::PushClientConnection *this)
{
  WTF::StringImpl **v1;
  __int128 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **result;
  WTF::StringImpl *v7;
  _OWORD v8[2];

  v1 = (WTF::StringImpl **)((char *)this + 80);
  if (*((_BYTE *)this + 88))
    return v1;
  if (!*((_BYTE *)this + 72))
  {
    *((_QWORD *)this + 10) = 0;
LABEL_9:
    *((_BYTE *)this + 88) = 1;
    return v1;
  }
  v3 = *(_OWORD *)((char *)this + 56);
  v8[0] = *(_OWORD *)((char *)this + 40);
  v8[1] = v3;
  WebKit::codeSigningIdentifier((WebKit *)v8, &v7);
  if (!*((_BYTE *)this + 88))
  {
    *((_QWORD *)this + 10) = v7;
    goto LABEL_9;
  }
  v5 = *v1;
  *v1 = v7;
  if (!v5)
    return v1;
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    return v1;
  }
  result = (WTF::StringImpl **)WTF::StringImpl::destroy(v5, v4);
  if (*((_BYTE *)this + 88))
    return v1;
  __break(1u);
  return result;
}

void WebPushD::PushClientConnection::connectionClosed(WebPushD::PushClientConnection *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 4);
  if (v1)
  {

    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebPushD::PushClientConnection::setPushAndNotificationsEnabledForOrigin(WebPushD::PushClientConnection *this, WTF::StringImpl **a2, char a3, uint64_t *a4)
{
  WebPushD::PushClientConnection *v7;
  char v10;
  WTF::StringImpl **v11;
  uint64_t *v12;

  v7 = this;
  {
    v11 = a2;
    v12 = a4;
    v10 = a3;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    v7 = this;
    a2 = v11;
    a4 = v12;
    a3 = v10;
  }
  return WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v7, a2, a3, a4);
}

void WebPushD::PushClientConnection::injectPushMessageForTesting(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF::RefCountedBase *v8;

  v5 = a1;
  {
    v8 = a3;
    v6 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v6;
    v5 = a1;
    a3 = v8;
  }
  WebPushD::WebPushDaemon::injectPushMessageForTesting((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::injectEncryptedPushMessageForTesting(uint64_t a1, _DWORD **a2, uint64_t *a3)
{
  uint64_t v5;
  _DWORD **v7;
  uint64_t *v9;

  v5 = a1;
  {
    v9 = a3;
    v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    v5 = a1;
    a3 = v9;
  }
  return WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

WTF::StringImpl *WebPushD::PushClientConnection::getPendingPushMessage(WebPushD::PushClientConnection *this, uint64_t *a2)
{
  WebPushD::PushClientConnection *v3;
  uint64_t *v6;

  v3 = this;
  {
    v6 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    v3 = this;
    a2 = v6;
  }
  return WebPushD::WebPushDaemon::getPendingPushMessage((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v3, a2);
}

uint64_t WebPushD::PushClientConnection::getPendingPushMessages(WebPushD::PushClientConnection *this, uint64_t *a2)
{
  WebPushD::PushClientConnection *v3;
  uint64_t *v6;

  v3 = this;
  {
    v6 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    v3 = this;
    a2 = v6;
  }
  return WebPushD::WebPushDaemon::getPendingPushMessages(WebPushD::WebPushDaemon::singleton(void)::daemon, v3, a2);
}

uint64_t WebPushD::PushClientConnection::subscribeToPushService(WebPushD::PushClientConnection *this, _DWORD **a2, uint64_t a3, uint64_t *a4)
{
  WebPushD::PushClientConnection *v7;
  uint64_t v10;
  _DWORD **v11;
  uint64_t *v12;

  v7 = this;
  {
    v11 = a2;
    v12 = a4;
    v10 = a3;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    v7 = this;
    a3 = v10;
    a2 = v11;
    a4 = v12;
  }
  return WebPushD::WebPushDaemon::subscribeToPushService((uint64_t)WebPushD::WebPushDaemon::singleton(void)::daemon, v7, a2, a3, a4);
}

uint64_t WebPushD::PushClientConnection::unsubscribeFromPushService(WebPushD::PushClientConnection *this, _DWORD **a2, uint64_t a3, char a4, uint64_t *a5)
{
  WebPushD::PushClientConnection *v9;
  _DWORD **v11;
  char v12;
  uint64_t v14;
  uint64_t *v15;

  v9 = this;
  {
    v15 = a5;
    v11 = a2;
    v12 = a4;
    v14 = a3;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    v9 = this;
    a3 = v14;
    a2 = v11;
    a4 = v12;
    a5 = v15;
  }
  return WebPushD::WebPushDaemon::unsubscribeFromPushService((uint64_t)WebPushD::WebPushDaemon::singleton(void)::daemon, v9, a2, a3, a4, a5);
}

uint64_t WebPushD::PushClientConnection::getPushSubscription(WebPushD::PushClientConnection *this, _DWORD **a2, uint64_t *a3)
{
  WebPushD::PushClientConnection *v5;
  _DWORD **v7;
  uint64_t *v9;

  v5 = this;
  {
    v9 = a3;
    v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    v5 = this;
    a3 = v9;
  }
  return WebPushD::WebPushDaemon::getPushSubscription((uint64_t)WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

WTF::StringImpl *WebPushD::PushClientConnection::incrementSilentPushCount(WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a2, WTF::StringImpl **a3)
{
  WebPushD::PushClientConnection *v5;
  WebCore::SecurityOriginData *v7;
  WTF::StringImpl **v9;

  v5 = this;
  {
    v9 = a3;
    v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    v5 = this;
    a3 = v9;
  }
  return WebPushD::WebPushDaemon::incrementSilentPushCount((uint64_t)WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::removeAllPushSubscriptions(WebPushD::PushClientConnection *this, uint64_t *a2)
{
  WebPushD::PushClientConnection *v3;
  uint64_t *v6;

  v3 = this;
  {
    v6 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    v3 = this;
    a2 = v6;
  }
  return WebPushD::WebPushDaemon::removeAllPushSubscriptions((uint64_t)WebPushD::WebPushDaemon::singleton(void)::daemon, v3, a2);
}

WTF::StringImpl *WebPushD::PushClientConnection::removePushSubscriptionsForOrigin(WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a2, WTF::StringImpl **a3)
{
  WebPushD::PushClientConnection *v5;
  WebCore::SecurityOriginData *v7;
  WTF::StringImpl **v9;

  v5 = this;
  {
    v9 = a3;
    v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    v5 = this;
    a3 = v9;
  }
  return WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin((uint64_t)WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::setPublicTokenForTesting(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v5;
  WTF::StringImpl **v7;
  uint64_t *v9;

  v5 = a1;
  {
    v9 = a3;
    v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    v5 = a1;
    a3 = v9;
  }
  return WebPushD::WebPushDaemon::setPublicTokenForTesting((uint64_t)WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::didShowNotificationForTesting(WebPushD::PushClientConnection *this, _DWORD **a2, uint64_t *a3)
{
  WebPushD::PushClientConnection *v5;
  _DWORD **v7;
  uint64_t *v9;

  v5 = this;
  {
    v9 = a3;
    v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    v5 = this;
    a3 = v9;
  }
  return WebPushD::WebPushDaemon::didShowNotificationForTesting((uint64_t)WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::getPushPermissionState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[16];
  int v6;
  char v7;

  v5[0] = 0;
  v6 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34B2990[v6])(&v7, v5);
  return result;
}

void sub_196F9299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34B2990[a11])(v12 - 17, &a9);
  _Unwind_Resume(a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJhS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebPushD::PushService::create(const WTF::String *a1, WTF::StringImpl **a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  WebPushD::ApplePushServiceConnection *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::RunLoop *v13;
  WTF::RunLoop *v14;
  int v15;
  WTF::RunLoop **v16;
  WTF::RunLoop **v17;
  NSObject *v18;
  const char *v19;
  int v20;
  WTF::RunLoop **v21;
  WTF::RunLoop **v22;
  WTF::RunLoop *v23;
  unsigned int v24;
  NSObject *v25;
  WTF::WorkQueue *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::RunLoop *v30;
  WTF::StringImpl *v31;
  NSObject *v32;
  WTF::WorkQueue *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  WTF::RunLoop *v38;
  uint8_t buf[8];
  uint64_t v40;
  uint64_t (*v41)(int, int);
  void *v42;
  uint8_t v43[16];

  v8 = os_transaction_create();
  v9 = (WebPushD::ApplePushServiceConnection *)WTF::fastMalloc((WTF *)0x78);
  WebPushD::ApplePushServiceConnection::ApplePushServiceConnection(v9, a1);
  v10 = *a2;
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = *a3;
  *a3 = 0;
  v12 = *a4;
  *a4 = 0;
  v13 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v13 = off_1E34B2BB8;
  if (v10)
    *(_DWORD *)v10 += 2;
  *((_QWORD *)v13 + 1) = v10;
  *((_QWORD *)v13 + 2) = v8;
  *((_QWORD *)v13 + 3) = v9;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  v38 = v13;
  if ((_MergedGlobals_52 & 1) == 0)
  {
    qword_1ECE720E8 = 0;
    *(_QWORD *)&dword_1ECE720F0 = 0;
    _MergedGlobals_52 = 1;
  }
  v14 = (WTF::RunLoop *)WTF::RunLoop::main(v13);
  if ((WTF::RunLoop::isCurrent(v14) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196F92DE0);
  }
  if (MKBDeviceUnlockedSinceBoot() == 1)
  {
    v15 = dword_1ECE720F4;
    if (dword_1ECE720F4 == dword_1ECE720F0)
    {
      v16 = (WTF::RunLoop **)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&qword_1ECE720E8, dword_1ECE720F4 + 1, (unint64_t)&v38);
      v15 = dword_1ECE720F4;
      v17 = (WTF::RunLoop **)(qword_1ECE720E8 + 8 * dword_1ECE720F4);
    }
    else
    {
      v17 = (WTF::RunLoop **)(qword_1ECE720E8 + 8 * dword_1ECE720F4);
      v16 = &v38;
    }
    v23 = *v16;
    *v16 = 0;
    *v17 = v23;
    v24 = v15 + 1;
    dword_1ECE720F4 = v15 + 1;
    v25 = qword_1ECE716B8;
    v26 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v26)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "Device has unlocked. Running initialization.", buf, 2u);
      v24 = dword_1ECE720F4;
    }
    if (v24)
    {
      v27 = qword_1ECE720E8;
      v28 = 8 * v24;
      do
      {
        v29 = WTF::WorkQueue::main(v26);
        v26 = (WTF::WorkQueue *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 32))(v29, v27);
        v27 += 8;
        v28 -= 8;
      }
      while (v28);
    }
LABEL_31:
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1ECE720E8, 0);
    if (WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken != -1)
    {
      notify_cancel(WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken);
      WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken = -1;
    }
    goto LABEL_33;
  }
  v18 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "Device is locked. Delaying init until it unlocks for the first time.", buf, 2u);
  }
  if (WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken == -1)
  {
    v19 = (const char *)*MEMORY[0x1E0D4E600];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v40 = 3221225472;
    v41 = ___ZN8WebPushDL23performAfterFirstUnlockEON3WTF8FunctionIFvvEEE_block_invoke;
    v42 = &__block_descriptor_33_e8_v12__0i8l;
    notify_register_dispatch(v19, &WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken, MEMORY[0x1E0C80D38], buf);
  }
  v20 = dword_1ECE720F4;
  if (dword_1ECE720F4 == dword_1ECE720F0)
  {
    v21 = (WTF::RunLoop **)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&qword_1ECE720E8, dword_1ECE720F4 + 1, (unint64_t)&v38);
    v20 = dword_1ECE720F4;
    v22 = (WTF::RunLoop **)(qword_1ECE720E8 + 8 * dword_1ECE720F4);
  }
  else
  {
    v22 = (WTF::RunLoop **)(qword_1ECE720E8 + 8 * dword_1ECE720F4);
    v21 = &v38;
  }
  v30 = *v21;
  *v21 = 0;
  *v22 = v30;
  dword_1ECE720F4 = v20 + 1;
  if (MKBDeviceUnlockedSinceBoot() == 1)
  {
    v32 = qword_1ECE716B8;
    v33 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v33)
    {
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_196BCC000, v32, OS_LOG_TYPE_DEFAULT, "Device has unlocked. Running initialization.", v43, 2u);
    }
    if (dword_1ECE720F4)
    {
      v34 = qword_1ECE720E8;
      v35 = 8 * dword_1ECE720F4;
      do
      {
        v36 = WTF::WorkQueue::main(v33);
        v33 = (WTF::WorkQueue *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 32))(v36, v34);
        v34 += 8;
        v35 -= 8;
      }
      while (v35);
    }
    goto LABEL_31;
  }
LABEL_33:
  result = (uint64_t)v38;
  v38 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return WTF::StringImpl::destroy(v10, v31);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

void sub_196F92DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF::StringImpl *v10;
  void *v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebPushD::ApplePushServiceConnection::~ApplePushServiceConnection(v12);
  WTF::fastFree(v16, v17);
  if (v11)

  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v18);
    else
      *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushService::createMockService(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t result;
  _QWORD *v9;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = *a1;
  *a1 = 0;
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E34B2C58;
  v6[1] = v4;
  v6[2] = v5;
  v9 = v6;
  WebCore::PushDatabase::create();
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  result = (uint64_t)v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

void sub_196F92F64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::PushService(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;

  v4 = *a2;
  *a2 = 0;
  *a1 = v4;
  v5 = *a3;
  *a3 = 0;
  a1[1] = v5;
  v6 = *a4;
  *a4 = 0;
  a1[3] = 0;
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = 0;
  if (v6)
  {
    v8 = *a1;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E34B2C80;
    v9[1] = a1;
    v13 = v9;
    WebPushD::PushServiceConnection::startListeningForPublicToken(v8, (uint64_t *)&v13);
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v10 = *a1;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E34B2CA8;
    v11[1] = a1;
    v13 = v11;
    WebPushD::PushServiceConnection::startListeningForPushMessages(v10, (uint64_t *)&v13);
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    return (uint64_t)a1;
  }
  else
  {
    result = 186;
    __break(0xC471u);
  }
  return result;
}

void sub_196F930CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t *v11;
  _QWORD **v12;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v14 = (_QWORD *)v10[5];
  if (v14)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v14, a2);
  v15 = (_QWORD *)v10[4];
  if (v15)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, a2);
  if (*v12)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  v16 = v10[2];
  v10[2] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  std::unique_ptr<WebCore::PushDatabase>::reset[abi:sn180100](v11, 0);
  v17 = *v10;
  *v10 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void WebPushD::PushService::~PushService(WebPushD::PushService *this, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if (v5)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::unique_ptr<WebCore::PushDatabase>::reset[abi:sn180100]((uint64_t *)this + 1, 0);
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebPushD::GetSubscriptionRequest::startInternal(WebPushD::GetSubscriptionRequest *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B2CF8;
  v2[1] = this;
  v4 = (uint64_t)v2;
  WebCore::PushDatabase::getRecordBySubscriptionSetAndScope();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void sub_196F93248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::~PushServiceRequestImpl(WebPushD::PushServiceRequest *this, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34B2A90;
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)

  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebPushD::PushServiceRequest::~PushServiceRequest(this, a2);
}

uint64_t WebPushD::SubscribeRequest::startImpl(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E34B2D20;
  *(_QWORD *)(v4 + 8) = a1;
  *(_BYTE *)(v4 + 16) = a2;
  v6 = v4;
  WebCore::PushDatabase::getRecordBySubscriptionSetAndScope();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_196F93338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::UnsubscribeRequest::startInternal(WebPushD::UnsubscribeRequest *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B2E10;
  v2[1] = this;
  v4 = (uint64_t)v2;
  WebCore::PushDatabase::getRecordBySubscriptionSetAndScope();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void sub_196F933C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebPushD::PushService::enqueuePushServiceRequest(uint64_t *a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  NSObject *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  int v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[12];
  __int16 v59;
  unint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  WebCore::makePushTopic();
  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)(*(_QWORD *)v58 + 16);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v58);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = v6 + 40 * (v9 & v7);
    v14 = *(WTF **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      v10 = v6 + 40 * v12;
      goto LABEL_13;
    }
    if (!v14)
      break;
    if ((WTF::equal(v14, *(const WTF::StringImpl **)v58, v5) & 1) != 0)
    {
      v17 = 1;
      goto LABEL_49;
    }
LABEL_13:
    v9 = i + v12;
  }
  if (v10)
  {
    *(_QWORD *)(v10 + 32) = 0;
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    --*(_DWORD *)(*a1 - 16);
    v13 = v10;
  }
  v15 = *(_QWORD *)v58;
  *(_QWORD *)v58 = 0;
  v16 = *(WTF::StringImpl **)v13;
  *(_QWORD *)v13 = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v4);
    else
      *(_DWORD *)v16 -= 2;
  }
  v19 = *(_QWORD *)(v13 + 8);
  v18 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  v20 = *(WTF **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  v21 = *(unsigned int *)(v13 + 32);
  *(_DWORD *)(v13 + 32) = 0;
  if (v19 <= v18)
  {
    if (v19 != v18)
    {
      v28 = (uint64_t *)((char *)v20 + 8 * v19);
      v29 = 8 * v18 - 8 * v19;
      do
      {
        v30 = *v28;
        *v28 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
  }
  else
  {
    if (v18)
    {
      v22 = 8 * v18;
      v23 = v20;
      do
      {
        v24 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v23 = (WTF *)((char *)v23 + 8);
        v22 -= 8;
      }
      while (v22);
    }
    if (v19 != v21)
    {
      v25 = (uint64_t *)((char *)v20 + 8 * v19);
      v26 = 8 * v21 - 8 * v19;
      do
      {
        v27 = *v25;
        *v25 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
  }
  if (v20)
    WTF::fastFree(v20, v4);
  v31 = *a1;
  if (*a1)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v33 = *a1;
  if (*a1)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35)
LABEL_47:
      v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v13);
  }
  else if (3 * v36 <= 4 * v35)
  {
    goto LABEL_47;
  }
  v17 = 0;
LABEL_49:
  v37 = *(WTF::StringImpl **)v58;
  *(_QWORD *)v58 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v4);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = *a2;
  v39 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    v40 = *(_QWORD *)(v13 + 8);
    v41 = *(_QWORD *)(v13 + 16);
    if (v40 > v41)
      v41 += *(unsigned int *)(v13 + 32);
    *(_DWORD *)v58 = 134218240;
    *(_QWORD *)&v58[4] = v38;
    v59 = 2048;
    v60 = v41 - v40;
    _os_log_impl(&dword_196BCC000, v39, OS_LOG_TYPE_DEFAULT, "Enqueuing PushServiceRequest %p (current queue size: %zu)", v58, 0x16u);
  }
  v43 = *(_QWORD *)(v13 + 8);
  v42 = *(_QWORD *)(v13 + 16);
  if (!v43)
  {
    v44 = *(unsigned int *)(v13 + 32);
    if (v42)
    {
      if (v42 != v44 - 1)
        goto LABEL_77;
    }
    else if ((_DWORD)v44)
    {
      v42 = 0;
      goto LABEL_77;
    }
LABEL_66:
    v45 = v44;
    v46 = ((unint64_t)v44 >> 2) + v44;
    if (v46 <= 0xF)
      v46 = 15;
    if (v46 >= 0x1FFFFFFF)
    {
      __break(0xC471u);
      return;
    }
    v47 = *(char **)(v13 + 24);
    v48 = v46 + 1;
    v49 = (char *)WTF::fastMalloc((WTF *)(8 * (v46 + 1)));
    *(_DWORD *)(v13 + 32) = v48;
    *(_QWORD *)(v13 + 24) = v49;
    v50 = *(_QWORD *)(v13 + 8);
    v51 = *(_QWORD *)(v13 + 16);
    if (v50 <= v51)
    {
      memcpy(&v49[8 * v50], &v47[8 * v50], 8 * v51 - 8 * v50);
      if (!v47)
      {
LABEL_76:
        v42 = *(_QWORD *)(v13 + 16);
        goto LABEL_77;
      }
    }
    else
    {
      memcpy(v49, v47, 8 * v51);
      v52 = *(_QWORD *)(v13 + 8);
      v53 = v52 - v45 + *(unsigned int *)(v13 + 32);
      memcpy((void *)(*(_QWORD *)(v13 + 24) + 8 * v53), &v47[8 * v52], 8 * v45 - 8 * v52);
      *(_QWORD *)(v13 + 8) = v53;
      if (!v47)
        goto LABEL_76;
    }
    if (*(char **)(v13 + 24) == v47)
    {
      *(_QWORD *)(v13 + 24) = 0;
      *(_DWORD *)(v13 + 32) = 0;
    }
    WTF::fastFree((WTF *)v47, v54);
    goto LABEL_76;
  }
  if (v42 + 1 == v43)
  {
    LODWORD(v44) = *(_DWORD *)(v13 + 32);
    goto LABEL_66;
  }
LABEL_77:
  v55 = *(_QWORD *)(v13 + 24);
  v56 = *a2;
  *a2 = 0;
  *(_QWORD *)(v55 + 8 * v42) = v56;
  if (v42 == *(unsigned int *)(v13 + 32) - 1)
    v57 = 0;
  else
    v57 = v42 + 1;
  *(_QWORD *)(v13 + 16) = v57;
  if ((v17 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
}

void sub_196F93868(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::PushService::finishedPushServiceRequest(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::WorkQueue *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::WorkQueue **v34;
  uint64_t v35;
  WTF::WorkQueue **v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *result;
  WTF::StringImpl *v47;

  WebCore::makePushTopic();
  v6 = *a1;
  if (!*a1)
    goto LABEL_12;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = *((_DWORD *)v47 + 4);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(v47);
  for (i = 0; ; v9 = i + v11)
  {
    v11 = v9 & v7;
    v12 = v6 + 40 * (v9 & v7);
    v13 = *(WTF **)v12;
    if (*(_QWORD *)v12 == -1)
      goto LABEL_9;
    if (!v13)
      break;
    if ((WTF::equal(v13, v47, v5) & 1) != 0)
      goto LABEL_13;
LABEL_9:
    ++i;
  }
  if (*a1)
  {
    v12 = *a1 + 40 * *(unsigned int *)(*a1 - 4);
    goto LABEL_13;
  }
LABEL_12:
  v12 = 0;
LABEL_13:
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v4);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *a1;
  if (*a1)
    v15 += 40 * *(unsigned int *)(v15 - 4);
  if (v15 == v12)
  {
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x196F93C2CLL);
  }
  v16 = *(_QWORD *)(v12 + 8);
  v17 = *(_QWORD *)(v12 + 16);
  v18 = v17;
  if (v16 > v17)
    v18 = v17 + *(unsigned int *)(v12 + 32);
  if (v18 == v16)
  {
    __break(0xC471u);
    JUMPOUT(0x196F93C4CLL);
  }
  if (v16 == v17)
  {
    __break(0xC471u);
    JUMPOUT(0x196F93C6CLL);
  }
  v19 = *(_QWORD *)(v12 + 24);
  v20 = *(_QWORD *)(v19 + 8 * v16);
  *(_QWORD *)(v19 + 8 * v16) = 0;
  v21 = *(_QWORD *)(v12 + 24);
  v22 = *(WTF::WorkQueue **)(v21 + 8 * v16);
  *(_QWORD *)(v21 + 8 * v16) = 0;
  if (v22)
  {
    v22 = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(_QWORD *)v22 + 8))(v22);
    v16 = *(_QWORD *)(v12 + 8);
  }
  v23 = *(unsigned int *)(v12 + 32);
  if (v16 == v23 - 1)
    v24 = 0;
  else
    v24 = v16 + 1;
  *(_QWORD *)(v12 + 8) = v24;
  if (v20 != a2)
  {
    __break(0xC471u);
    JUMPOUT(0x196F93C8CLL);
  }
  v25 = *(_QWORD *)(v12 + 16);
  if (v24 <= v25)
    v23 = 0;
  if (v23 + v25 != v24)
  {
    if (v24 != v25)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v24);
      goto LABEL_70;
    }
    goto LABEL_78;
  }
  v26 = *a1;
  if (*a1)
  {
    v26 += 40 * *(unsigned int *)(v26 - 4);
    if (v26 == v12)
      goto LABEL_69;
LABEL_39:
    if (v26 == v12)
      goto LABEL_69;
    v22 = WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, v4);
    v29 = *(_QWORD *)(v12 + 8);
    v30 = *(_QWORD *)(v12 + 16);
    v31 = *(WTF **)(v12 + 24);
    if (v29 > v30)
    {
      if (v30)
      {
        v32 = 8 * v30;
        do
        {
          v22 = *(WTF::WorkQueue **)v31;
          *(_QWORD *)v31 = 0;
          if (v22)
            v22 = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(_QWORD *)v22 + 8))(v22);
          v31 = (WTF *)((char *)v31 + 8);
          v32 -= 8;
        }
        while (v32);
        v31 = *(WTF **)(v12 + 24);
        v29 = *(_QWORD *)(v12 + 8);
      }
      v33 = *(unsigned int *)(v12 + 32);
      if (v29 != v33)
      {
        v34 = (WTF::WorkQueue **)((char *)v31 + 8 * v29);
        v35 = 8 * v33 - 8 * v29;
        do
        {
          v22 = *v34;
          *v34 = 0;
          if (v22)
            v22 = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(_QWORD *)v22 + 8))(v22);
          ++v34;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_58;
    }
    if (v29 != v30)
    {
      v36 = (WTF::WorkQueue **)((char *)v31 + 8 * v29);
      v37 = 8 * v30 - 8 * v29;
      do
      {
        v22 = *v36;
        *v36 = 0;
        if (v22)
          v22 = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(_QWORD *)v22 + 8))(v22);
        ++v36;
        v37 -= 8;
      }
      while (v37);
LABEL_58:
      v31 = *(WTF **)(v12 + 24);
    }
    if (v31)
    {
      *(_QWORD *)(v12 + 24) = 0;
      *(_DWORD *)(v12 + 32) = 0;
      v22 = (WTF::WorkQueue *)WTF::fastFree(v31, v28);
    }
    ++*(_DWORD *)(*a1 - 16);
    v38 = *a1;
    if (*a1)
      v39 = *(_DWORD *)(v38 - 12) - 1;
    else
      v39 = -1;
    *(_DWORD *)(v38 - 12) = v39;
    v40 = *a1;
    if (*a1
      && ((v41 = 6 * *(_DWORD *)(v40 - 12), v42 = *(_DWORD *)(v40 - 4), v41 < v42) ? (v43 = v42 >= 9) : (v43 = 0), v43))
    {
      v22 = (WTF::WorkQueue *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v42 >> 1, 0);
      v27 = 0;
    }
    else
    {
LABEL_69:
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    if (v12)
      goto LABEL_39;
  }
LABEL_70:
  v44 = WTF::WorkQueue::main(v22);
  v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v45 = &off_1E34B2EB0;
  *((_QWORD *)v45 + 1) = a2;
  *((_QWORD *)v45 + 2) = v27;
  v47 = v45;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v44 + 32))(v44, &v47);
  result = v47;
  v47 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196F93CB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::getSubscription(_QWORD *a1, uint64_t a2, _DWORD **a3, uint64_t *a4)
{
  int v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  NSObject *v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  char v17;
  uint8_t buf[8];
  __int16 v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2)
  {
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 4);
    if (v6 && *a3 && (*a3)[1])
    {
      v9 = WTF::fastMalloc((WTF *)0x60);
      v10 = (_QWORD *)WebPushD::PushServiceRequest::PushServiceRequest(v9, a1, a2, a3);
      v11 = *a4;
      *a4 = 0;
      v10[10] = v11;
      v10[11] = 0;
      *v10 = off_1E34B29B0;
      *(_QWORD *)buf = v10;
      WebPushD::PushService::enqueuePushServiceRequest(a1 + 3, (uint64_t *)buf);
      result = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
      return result;
    }
    v13 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v14 = v6 == 0;
LABEL_14:
      if (*a3)
        v16 = (*a3)[1] == 0;
      else
        v16 = 1;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v14;
      v19 = 1024;
      v20 = v16;
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "Ignoring getSubscription request with bundleIdentifier (empty = %d) and scope (empty = %d)", buf, 0xEu);
    }
  }
  else
  {
    v13 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v14 = 1;
      goto LABEL_14;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v19) = 16;
  v21 = 1;
  v15 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v15 + 16))(v15, buf);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v21 != -1)
    return ((uint64_t (*)(char *, __int16 *))off_1E34B2AF8[v21])(&v17, &v19);
  return result;
}

void sub_196F93F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::subscribe(_QWORD *a1, uint64_t a2, _DWORD **a3, uint64_t a4, uint64_t *a5)
{
  int v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t result;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  _BOOL4 v20;
  char v21;
  uint8_t buf[8];
  __int16 v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a2)
  {
    v17 = qword_1ECE716B8;
    if (!os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v18 = 1;
    goto LABEL_16;
  }
  v7 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  if (v7 && *a3 && (*a3)[1])
  {
    v11 = WTF::fastMalloc((WTF *)0x70);
    v12 = WebPushD::PushServiceRequest::PushServiceRequest(v11, a1, a2, a3);
    v13 = *a5;
    *a5 = 0;
    *(_QWORD *)(v12 + 80) = v13;
    *(_QWORD *)(v12 + 88) = 0;
    *(_QWORD *)v12 = off_1E34B29F0;
    v14 = (WTF *)*(unsigned int *)(a4 + 12);
    *(_QWORD *)(v12 + 96) = 0;
    *(_QWORD *)(v12 + 104) = 0;
    *(_DWORD *)(v12 + 108) = (_DWORD)v14;
    if ((_DWORD)v14)
    {
      v15 = (void *)WTF::fastMalloc(v14);
      *(_DWORD *)(v11 + 104) = (_DWORD)v14;
      *(_QWORD *)(v11 + 96) = v15;
      memcpy(v15, *(const void **)a4, *(unsigned int *)(a4 + 12));
    }
    *(_QWORD *)buf = v11;
    WebPushD::PushService::enqueuePushServiceRequest(a1 + 4, (uint64_t *)buf);
    result = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    return result;
  }
  v17 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
  {
    v18 = v7 == 0;
LABEL_16:
    if (*a3)
      v20 = (*a3)[1] == 0;
    else
      v20 = 1;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v18;
    v23 = 1024;
    v24 = v20;
    _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "Ignoring subscribe request with bundleIdentifier (empty = %d) and scope (empty = %d)", buf, 0xEu);
  }
LABEL_12:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  buf[0] = 16;
  v25 = 1;
  v19 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 16))(v19, buf);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v25 != -1)
    return ((uint64_t (*)(char *, uint8_t *))off_1E34B2B08[v25])(&v21, buf);
  return result;
}

void sub_196F941AC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  WebPushD::PushServiceRequest *v24;
  WTF *v26;
  void *v27;

  WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::~PushServiceRequestImpl(v24, a2);
  WTF::fastFree(v26, v27);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushService::unsubscribe(_QWORD *a1, uint64_t a2, _DWORD **a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  int v8;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  _BOOL4 v20;
  char v21;
  uint8_t buf[8];
  __int16 v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2)
  {
    v8 = *(_DWORD *)(*(_QWORD *)a2 + 4);
    if (v8 && *a3 && (*a3)[1])
    {
      v13 = WTF::fastMalloc((WTF *)0x70);
      v14 = (_QWORD *)WebPushD::PushServiceRequest::PushServiceRequest(v13, a1, a2, a3);
      v15 = *a6;
      *a6 = 0;
      v14[10] = v15;
      v14[11] = 0;
      *v14 = off_1E34B2A30;
      v14[12] = a4;
      v14[13] = a5;
      *(_QWORD *)buf = v14;
      WebPushD::PushService::enqueuePushServiceRequest(a1 + 5, (uint64_t *)buf);
      result = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
      return result;
    }
    v17 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v18 = v8 == 0;
LABEL_14:
      if (*a3)
        v20 = (*a3)[1] == 0;
      else
        v20 = 1;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v18;
      v23 = 1024;
      v24 = v20;
      _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "Ignoring unsubscribe request with bundleIdentifier (empty = %d) and scope (empty = %d)", buf, 0xEu);
    }
  }
  else
  {
    v17 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v18 = 1;
      goto LABEL_14;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  buf[0] = 16;
  v25 = 1;
  v19 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 16))(v19, buf);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v25 != -1)
    return ((uint64_t (*)(char *, uint8_t *))off_1E34B2B18[v25])(&v21, buf);
  return result;
}

void sub_196F94438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::incrementSilentPushCount(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t result;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  _BOOL4 v20;
  uint8_t buf[8];
  __int16 v22;
  _BOOL4 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2)
  {
    v17 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v18 = 1;
      goto LABEL_26;
    }
LABEL_17:
    v19 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v7 = *((_DWORD *)v6 + 1);
  if (!v7 || (v8 = *a3) == 0 || !*((_DWORD *)v8 + 1))
  {
    v17 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v18 = v7 == 0;
LABEL_26:
      if (*a3)
        v20 = *((_DWORD *)*a3 + 1) == 0;
      else
        v20 = 1;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v18;
      v22 = 1024;
      v23 = v20;
      _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "Ignoring incrementSilentPushCount request with bundleIdentifier (empty = %d) and securityOrigin (empty = %d)", buf, 0xEu);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  *(_DWORD *)v6 += 2;
  v10 = *(WTF::StringImpl **)(a2 + 8);
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)v8 += 2;
  v13 = *a4;
  *a4 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x50);
  *v14 = &off_1E34B2ED8;
  v14[2] = a1;
  *(_DWORD *)v6 += 2;
  v14[4] = v6;
  if (v10)
    *(_DWORD *)v10 += 2;
  v14[5] = v10;
  v14[6] = v11;
  v14[7] = v12;
  *(_DWORD *)v8 += 2;
  v14[8] = v8;
  v14[9] = v13;
  *(_QWORD *)buf = v14;
  WebCore::PushDatabase::incrementSilentPushCount();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_DWORD *)v8 == 2)
  {
    result = WTF::StringImpl::destroy(v8, v15);
    if (!v10)
      goto LABEL_22;
LABEL_19:
    if (*(_DWORD *)v10 == 2)
      result = WTF::StringImpl::destroy(v10, v15);
    else
      *(_DWORD *)v10 -= 2;
    goto LABEL_22;
  }
  *(_DWORD *)v8 -= 2;
  if (v10)
    goto LABEL_19;
LABEL_22:
  if (*(_DWORD *)v6 == 2)
    return WTF::StringImpl::destroy(v6, v15);
  *(_DWORD *)v6 -= 2;
  return result;
}

void sub_196F94724(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, a2);
  else
    *(_DWORD *)v13 -= 2;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, a2);
  else
    *(_DWORD *)v11 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  _QWORD *v16;
  __int16 v17;
  _BOOL4 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a2)
  {
    v12 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v13 = 1;
      goto LABEL_13;
    }
LABEL_10:
    v14 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v7 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  if (!v7 || !*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v12 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v13 = v7 == 0;
LABEL_13:
      if (*(_QWORD *)a3)
        v15 = *(_DWORD *)(*(_QWORD *)a3 + 4) == 0;
      else
        v15 = 1;
      LODWORD(v16) = 67109376;
      HIDWORD(v16) = v13;
      v17 = 1024;
      v18 = v15;
      _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, "Ignoring setPushesEnabledForBundleIdentifierAndOrigin request with bundleIdentifier (empty = %d) and securityOrigin (empty = %d)", (uint8_t *)&v16, 0xEu);
      goto LABEL_10;
    }
    goto LABEL_10;
  }
  v9 = *a5;
  *a5 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34B2F28;
  v10[1] = a1;
  v10[2] = v9;
  v16 = v10;
  WebCore::PushDatabase::setPushesEnabledForOrigin();
  result = (uint64_t)v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196F94980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::PushService::removeRecordsForSubscriptionSet(uint64_t a1, WebCore::PushSubscriptionSetIdentifier *a2, uint64_t *a3)
{
  NSObject *v6;
  char *v7;
  void *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint8_t buf[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::PushSubscriptionSetIdentifier::debugDescription(a2);
    WTF::String::utf8();
    if (v12)
      v7 = (char *)v12 + 16;
    else
      v7 = 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Removing push subscriptions associated with %{public}s", buf, 0xCu);
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v8);
      else
        --*(_DWORD *)v12;
    }
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  buf[0] = 0;
  buf[8] = 0;
  result = WebPushD::PushService::removeRecordsImpl(a1, (uint64_t)a2, buf, a3);
  if (buf[8])
  {
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196F94B30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::PushService::removeRecordsImpl(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  WTF::StringImpl *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  _BOOL4 v14;
  uint64_t v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint8_t buf[8];
  __int16 v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  WTF::StringImpl *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = *(WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2)
  {
    v13 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v14 = 1;
      goto LABEL_36;
    }
LABEL_15:
    v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v7 = *((_DWORD *)v6 + 1);
  if (!v7 || (v8 = a3[8]) != 0 && (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4)))
  {
    v13 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v14 = v7 == 0;
LABEL_36:
      v20 = a3[8];
      if (a3[8])
      {
        if (*(_QWORD *)a3)
          v20 = *(_DWORD *)(*(_QWORD *)a3 + 4) == 0;
        else
          v20 = 1;
      }
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v14;
      v23 = 1024;
      v24 = v20;
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "Ignoring removeRecordsImpl request with bundleIdentifier (empty = %d) and securityOrigin (empty = %d)", buf, 0xEu);
      goto LABEL_15;
    }
    goto LABEL_15;
  }
  *(_QWORD *)buf = a1;
  *(_DWORD *)v6 += 2;
  v25 = v6;
  v9 = *(WTF::StringImpl **)(a2 + 8);
  if (v9)
    *(_DWORD *)v9 += 2;
  v26 = v9;
  v27 = *(_OWORD *)(a2 + 16);
  LOBYTE(v28) = 0;
  v29 = 0;
  if (v8)
  {
    v10 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v10 += 2;
    v28 = v10;
    v29 = 1;
    v11 = *a4;
    *a4 = 0;
    v30 = v11;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()> &&)::$_0,void>(&v21, (uint64_t)buf);
    WebCore::PushDatabase::removeRecordsBySubscriptionSetAndSecurityOrigin();
  }
  else
  {
    v17 = *a4;
    *a4 = 0;
    v30 = v17;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()> &&)::$_0,void>(&v21, (uint64_t)buf);
    WebCore::PushDatabase::removeRecordsBySubscriptionSet();
  }
  v18 = v21;
  v21 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v30;
  v30 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v29 && v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v12);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v12);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v25;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v25, v12);
    else
      *(_DWORD *)v25 -= 2;
  }
  return result;
}

void sub_196F94E3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, uint64_t a19)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::PushService::removeRecordsForSubscriptionSetAndOrigin(uint64_t a1, WebCore::PushSubscriptionSetIdentifier *a2, _DWORD **a3, uint64_t *a4)
{
  NSObject *v8;
  char *v9;
  char *v10;
  void *v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  _BYTE buf[12];
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::PushSubscriptionSetIdentifier::debugDescription(a2);
    WTF::String::utf8();
    WTF::String::utf8();
    v9 = (char *)v17 + 16;
    if (!v17)
      v9 = 0;
    if (v15)
      v10 = (char *)v15 + 16;
    else
      v10 = 0;
    *(_DWORD *)buf = 136446467;
    *(_QWORD *)&buf[4] = v9;
    v19 = 2085;
    v20 = v10;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "Removing push subscriptions associated with %{public}s %{sensitive}s", buf, 0x16u);
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::fastFree(v15, v11);
      else
        --*(_DWORD *)v15;
    }
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v11);
      else
        --*(_DWORD *)v17;
    }
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v12 = *a3;
  if (*a3)
    *v12 += 2;
  *(_QWORD *)buf = v12;
  buf[8] = 1;
  result = WebPushD::PushService::removeRecordsImpl(a1, (uint64_t)a2, buf, a4);
  if (buf[8])
  {
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196F950E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, WTF::StringImpl *a13, char a14)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v4 = off_1E34B2F50;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)a2;
  v5 = *(_DWORD **)(a2 + 16);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(v4 + 32) = v5;
  v6 = *(_DWORD **)(a2 + 24);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v7 = *(_DWORD **)(a2 + 48);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(v4 + 64) = v7;
    *(_BYTE *)(v4 + 72) = 1;
  }
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v4 + 80) = v8;
  *a1 = v4;
  return a1;
}

void WebPushD::PushService::didReceivePushMessage(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  int v4;
  void *v9;
  WTF::StringImpl *v10;
  void *v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  int v18;
  void *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  NSString *v31;
  uint64_t v32;
  NSString *v33;
  void *v34;
  int v35;
  BOOL v36;
  char v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  char v41;
  NSObject *v42;
  WTF *v43;
  WTF *v44;
  char v45;
  uint64_t v46;
  void *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  WTF::StringImpl *v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  uint8_t v59[16];
  uint8_t v60[8];
  uint64_t v61;
  unsigned __int8 v62;
  __int128 buf;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v52 = (void *)os_transaction_create();
  v9 = (void *)MEMORY[0x19AEB9C30]();
  MEMORY[0x19AEABCC8](&buf, a2);
  v10 = (WTF::StringImpl *)buf;
  v11 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("content_encoding"));
  v12 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("payload"));
  if (!objc_msgSend(v11, "length") || !objc_msgSend(v12, "length"))
  {
    v13 = 0;
    v14 = 0;
    v17 = 0;
    v4 = 0;
    v53 = v10;
    v54 = 0;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v18 = 1;
    v58 = 1;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v10 = 0;
    goto LABEL_9;
  }
  if ((objc_msgSend(v11, "isEqualToString:", CFSTR("aes128gcm")) & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v50 = 0;
    v51 = 0;
    v4 = 2;
    goto LABEL_5;
  }
  if (!objc_msgSend(v11, "isEqualToString:", CFSTR("aesgcm")))
  {
    v38 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v46 = objc_msgSend(v11, "UTF8String");
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v46;
      _os_log_error_impl(&dword_196BCC000, v38, OS_LOG_TYPE_ERROR, "Dropping push with unknown content encoding: %{public}s", (uint8_t *)&buf, 0xCu);
    }
    v13 = 0;
    v14 = 0;
    v17 = 0;
    LOBYTE(v53) = 0;
    v58 = 0;
    v49 = 0;
    v18 = 1;
    goto LABEL_54;
  }
  v31 = (NSString *)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("as_publickey"));
  v32 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("as_salt"));
  if (!v31 || (v33 = (NSString *)v32) == 0)
  {
    v40 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_196BCC000, v40, OS_LOG_TYPE_ERROR, "Dropping aesgcm-encrypted push without required server key and salt", (uint8_t *)&buf, 2u);
    }
    v13 = 0;
    v14 = 0;
    v17 = 0;
    LOBYTE(v53) = 0;
    v58 = 0;
    v49 = 0;
    v4 = 1;
    v18 = 1;
LABEL_54:
    v50 = 0;
    v51 = 0;
    goto LABEL_9;
  }
  WebPushD::base64URLDecode((WebPushD *)&buf, v31);
  WebPushD::base64URLDecode((WebPushD *)v60, v33);
  v35 = v62;
  if (v64)
    v36 = v62 == 0;
  else
    v36 = 1;
  v37 = !v36;
  if (v36)
  {
    v41 = v37;
    v42 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v59 = 0;
      _os_log_error_impl(&dword_196BCC000, v42, OS_LOG_TYPE_ERROR, "Dropping aesgcm-encrypted push with improperly encoded server key and salt", v59, 2u);
      v35 = v62;
    }
    LOBYTE(v53) = 0;
    v58 = 0;
    if (v35)
    {
      v43 = *(WTF **)v60;
      if (*(_QWORD *)v60)
      {
        *(_QWORD *)v60 = 0;
        LODWORD(v61) = 0;
        WTF::fastFree(v43, v34);
      }
    }
    v14 = 0;
    v13 = 0;
    v50 = 0;
    v51 = 0;
    v37 = v41;
  }
  else
  {
    v13 = (WTF *)buf;
    *(_QWORD *)&buf = 0;
    v51 = *((_QWORD *)&buf + 1);
    HIDWORD(buf) = 0;
    v14 = *(WTF **)v60;
    v50 = v61;
  }
  if (v64)
  {
    v44 = (WTF *)buf;
    if ((_QWORD)buf)
    {
      *(_QWORD *)&buf = 0;
      DWORD2(buf) = 0;
      v45 = v37;
      WTF::fastFree(v44, v34);
      v37 = v45;
    }
  }
  v4 = 1;
  if ((v37 & 1) == 0)
    goto LABEL_65;
LABEL_5:
  MEMORY[0x19AEABCC8](v60, v12);
  WTF::base64Decode();
  v16 = *(WTF::StringImpl **)v60;
  *(_QWORD *)v60 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v64)
  {
    v18 = 0;
    v49 = *((_QWORD *)&buf + 1);
    v17 = (WTF *)buf;
    goto LABEL_9;
  }
  v39 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v60 = 0;
    _os_log_error_impl(&dword_196BCC000, v39, OS_LOG_TYPE_ERROR, "Dropping push with improperly encoded payload", v60, 2u);
    LOBYTE(v53) = 0;
    v58 = 0;
    if (v64)
    {
      v48 = (WTF *)buf;
      if ((_QWORD)buf)
      {
        *(_QWORD *)&buf = 0;
        DWORD2(buf) = 0;
        WTF::fastFree(v48, v47);
      }
    }
LABEL_65:
    v17 = 0;
    goto LABEL_66;
  }
  v17 = 0;
  LOBYTE(v53) = 0;
  v58 = 0;
LABEL_66:
  v49 = 0;
  v18 = 1;
LABEL_9:
  objc_autoreleasePoolPop(v9);
  if (v18)
  {
    if (v14)
      WTF::fastFree(v14, v19);
    if (v13)
      WTF::fastFree(v13, v19);
    if (v17)
      WTF::fastFree(v17, v19);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  else
  {
    v53 = v10;
    v54 = v4;
    *(_QWORD *)&v55 = v17;
    *((_QWORD *)&v55 + 1) = v49;
    *(_QWORD *)&v56 = v13;
    *((_QWORD *)&v56 + 1) = v51;
    *(_QWORD *)&v57 = v14;
    *((_QWORD *)&v57 + 1) = v50;
    v58 = 1;
  }
  if (v58)
  {
    MEMORY[0x19AEABCC8](&buf, a2);
    v20 = v53;
    v21 = v54;
    v22 = v55;
    v53 = 0;
    v23 = *((_QWORD *)&v55 + 1);
    v55 = 0uLL;
    v24 = v56;
    v56 = 0uLL;
    v25 = v57;
    v57 = 0uLL;
    v26 = *a4;
    *a4 = 0;
    v27 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v27 = &off_1E34B3018;
    *(_QWORD *)(v27 + 8) = a1;
    *(_QWORD *)(v27 + 16) = v20;
    *(_DWORD *)(v27 + 24) = v21;
    *(_QWORD *)(v27 + 32) = v22;
    *(_QWORD *)(v27 + 40) = v23;
    *(_OWORD *)(v27 + 48) = v24;
    *(_OWORD *)(v27 + 64) = v25;
    *(_QWORD *)(v27 + 80) = v26;
    *(_QWORD *)(v27 + 88) = v52;
    *(_QWORD *)v60 = v27;
    WebCore::PushDatabase::getRecordByTopic();
    v29 = *(WTF **)v60;
    *(_QWORD *)v60 = 0;
    if (v29)
      (*(void (**)(WTF *))(*(_QWORD *)v29 + 8))(v29);
    v30 = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    std::__optional_destruct_base<WebPushD::RawPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v53, v28);
  }
  else
  {
    std::__optional_destruct_base<WebPushD::RawPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v53, v19);
    if (v52)

  }
}

void sub_196F95850(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27)
{
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *v30;

  if (*(_BYTE *)(v28 - 144))
  {
    v30 = *(WTF **)(v28 - 160);
    if (v30)
    {
      *(_QWORD *)(v28 - 160) = 0;
      *(_DWORD *)(v28 - 152) = 0;
      WTF::fastFree(v30, a2);
    }
  }
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (a15)

  _Unwind_Resume(exception_object);
}

void WebPushD::GetSubscriptionRequest::~GetSubscriptionRequest(WebPushD::GetSubscriptionRequest *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::~PushServiceRequestImpl(this, a2);
  WTF::fastFree(v2, v3);
}

const char *WebPushD::GetSubscriptionRequest::description(WebPushD::GetSubscriptionRequest *this)
{
  return "GetSubscriptionRequest";
}

WTF::StringImpl *WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::start(_QWORD *a1)
{
  uint64_t v2;
  WebCore::PushSubscriptionSetIdentifier *v3;
  uint64_t v4;
  int8x16_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  void *v23;
  void *v24;
  WTF *v25;
  NSObject *v26;
  uint64_t v27;
  WTF *v28;
  char *v29;
  char *v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  _BYTE buf[12];
  __int16 v42;
  _BYTE v43[10];
  char *v44;
  __int16 v45;
  char *v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = (WebCore::PushSubscriptionSetIdentifier *)(a1 + 4);
  v2 = a1[4];
  if (v2 && *(_DWORD *)(v2 + 4) && (v4 = a1[8]) != 0 && *(_DWORD *)(v4 + 4))
  {
    v5 = (int8x16_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7 = v6;
    WebCore::PushSubscriptionSetIdentifier::debugDescription(v3);
    v8 = (WTF::StringImpl *)a1[8];
    if (v8)
      *(_DWORD *)v8 += 2;
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String>((uint64_t *)&v36, v5, v7, (uint64_t)v35, v8);
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v9);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v9);
      else
        *(_DWORD *)v35 -= 2;
    }
    WTF::String::utf8();
    v22 = os_transaction_create();
    v24 = (void *)a1[11];
    a1[11] = v22;
    if (v24)

    v25 = *(WTF **)buf;
    *(_QWORD *)buf = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
        WTF::fastFree(v25, v23);
      else
        --*(_DWORD *)v25;
    }
    v26 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
    {
      v27 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      WebCore::PushSubscriptionSetIdentifier::debugDescription(v3);
      WTF::String::utf8();
      v28 = v40;
      WTF::String::utf8();
      v29 = (char *)v28 + 16;
      if (!v28)
        v29 = 0;
      *(_DWORD *)buf = 136446979;
      if (v38)
        v30 = (char *)v38 + 16;
      else
        v30 = 0;
      *(_QWORD *)&buf[4] = v27;
      v42 = 2048;
      *(_QWORD *)v43 = a1;
      *(_WORD *)&v43[8] = 2082;
      v44 = v29;
      v45 = 2085;
      v46 = v30;
      _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "Started pushServiceRequest %{public}s (%p) for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
      v32 = v38;
      v38 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
          WTF::fastFree(v32, v31);
        else
          --*(_DWORD *)v32;
      }
      v33 = v40;
      v40 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
          WTF::fastFree(v33, v31);
        else
          --*(_DWORD *)v33;
      }
      v34 = v39;
      v39 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v31);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    (*(void (**)(_QWORD *))(*a1 + 40))(a1);
    result = v36;
    v36 = 0;
    if (result)
    {
LABEL_62:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    LOBYTE(v36) = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      WebCore::PushSubscriptionSetIdentifier::debugDescription(v3);
      WTF::String::utf8();
      WTF::String::utf8();
      v12 = (char *)v40 + 16;
      if (!v40)
        v12 = 0;
      *(_DWORD *)buf = 136446979;
      if (v38)
        v13 = (char *)v38 + 16;
      else
        v13 = 0;
      *(_QWORD *)&buf[4] = v11;
      v42 = 2048;
      *(_QWORD *)v43 = a1;
      *(_WORD *)&v43[8] = 2082;
      v44 = v12;
      v45 = 2085;
      v46 = v13;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with exception for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
      v15 = v38;
      v38 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, v14);
        else
          --*(_DWORD *)v15;
      }
      v16 = v40;
      v40 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v14);
        else
          --*(_DWORD *)v16;
      }
      v17 = v39;
      v39 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v18 = v37;
    v37 = 0;
    buf[8] = (_BYTE)v36;
    *(_QWORD *)&v43[2] = v18;
    v47 = 1;
    v19 = a1[10];
    a1[10] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 16))(v19, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (v47 != -1)
      ((void (*)(WTF **, _BYTE *))off_1E34B2AF8[v47])(&v40, &buf[8]);
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
    result = v37;
    v37 = 0;
    if (result)
      goto LABEL_62;
  }
  return result;
}

void sub_196F95F00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF *a14, WTF *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 1)
      WTF::fastFree(a14, a2);
    else
      --*(_DWORD *)a14;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::GetSubscriptionRequest::finish(WebPushD::GetSubscriptionRequest *this)
{
  return WebPushD::PushService::finishedPushServiceRequest((uint64_t *)(*((_QWORD *)this + 1) + 24), (uint64_t)this);
}

void WebPushD::UnsubscribeRequest::~UnsubscribeRequest(WebPushD::UnsubscribeRequest *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebPushD::PushServiceRequestImpl<BOOL>::~PushServiceRequestImpl(this, a2);
  WTF::fastFree(v2, v3);
}

const char *WebPushD::UnsubscribeRequest::description(WebPushD::UnsubscribeRequest *this)
{
  return "UnsubscribeRequest";
}

WTF::StringImpl *WebPushD::PushServiceRequestImpl<BOOL>::start(_QWORD *a1)
{
  uint64_t v2;
  WebCore::PushSubscriptionSetIdentifier *v3;
  uint64_t v4;
  int8x16_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  void *v23;
  void *v24;
  WTF *v25;
  NSObject *v26;
  uint64_t v27;
  WTF *v28;
  char *v29;
  char *v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  _BYTE buf[22];
  __int16 v42;
  char *v43;
  __int16 v44;
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = (WebCore::PushSubscriptionSetIdentifier *)(a1 + 4);
  v2 = a1[4];
  if (v2 && *(_DWORD *)(v2 + 4) && (v4 = a1[8]) != 0 && *(_DWORD *)(v4 + 4))
  {
    v5 = (int8x16_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v7 = v6;
    WebCore::PushSubscriptionSetIdentifier::debugDescription(v3);
    v8 = (WTF::StringImpl *)a1[8];
    if (v8)
      *(_DWORD *)v8 += 2;
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String>((uint64_t *)&v36, v5, v7, (uint64_t)v35, v8);
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v9);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v9);
      else
        *(_DWORD *)v35 -= 2;
    }
    WTF::String::utf8();
    v22 = os_transaction_create();
    v24 = (void *)a1[11];
    a1[11] = v22;
    if (v24)

    v25 = *(WTF **)buf;
    *(_QWORD *)buf = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
        WTF::fastFree(v25, v23);
      else
        --*(_DWORD *)v25;
    }
    v26 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
    {
      v27 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      WebCore::PushSubscriptionSetIdentifier::debugDescription(v3);
      WTF::String::utf8();
      v28 = v40;
      WTF::String::utf8();
      v29 = (char *)v28 + 16;
      if (!v28)
        v29 = 0;
      *(_DWORD *)buf = 136446979;
      if (v38)
        v30 = (char *)v38 + 16;
      else
        v30 = 0;
      *(_QWORD *)&buf[4] = v27;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a1;
      v42 = 2082;
      v43 = v29;
      v44 = 2085;
      v45 = v30;
      _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "Started pushServiceRequest %{public}s (%p) for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
      v32 = v38;
      v38 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
          WTF::fastFree(v32, v31);
        else
          --*(_DWORD *)v32;
      }
      v33 = v40;
      v40 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
          WTF::fastFree(v33, v31);
        else
          --*(_DWORD *)v33;
      }
      v34 = v39;
      v39 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v31);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    (*(void (**)(_QWORD *))(*a1 + 40))(a1);
    result = v36;
    v36 = 0;
    if (result)
    {
LABEL_62:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    LOBYTE(v36) = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      WebCore::PushSubscriptionSetIdentifier::debugDescription(v3);
      WTF::String::utf8();
      WTF::String::utf8();
      v12 = (char *)v40 + 16;
      if (!v40)
        v12 = 0;
      *(_DWORD *)buf = 136446979;
      if (v38)
        v13 = (char *)v38 + 16;
      else
        v13 = 0;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a1;
      v42 = 2082;
      v43 = v12;
      v44 = 2085;
      v45 = v13;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with exception for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
      v15 = v38;
      v38 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          WTF::fastFree(v15, v14);
        else
          --*(_DWORD *)v15;
      }
      v16 = v40;
      v40 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v14);
        else
          --*(_DWORD *)v16;
      }
      v17 = v39;
      v39 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v18 = v37;
    v37 = 0;
    buf[0] = (_BYTE)v36;
    *(_QWORD *)&buf[8] = v18;
    *(_DWORD *)&buf[16] = 1;
    v19 = a1[10];
    a1[10] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 16))(v19, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (*(_DWORD *)&buf[16] != -1)
      ((void (*)(WTF **, _BYTE *))off_1E34B2B18[*(unsigned int *)&buf[16]])(&v40, buf);
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
    result = v37;
    v37 = 0;
    if (result)
      goto LABEL_62;
  }
  return result;
}

void sub_196F965A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF *a14, WTF *a15, uint64_t a16, int a17)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 1)
      WTF::fastFree(a14, a2);
    else
      --*(_DWORD *)a14;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::UnsubscribeRequest::finish(WebPushD::UnsubscribeRequest *this)
{
  return WebPushD::PushService::finishedPushServiceRequest((uint64_t *)(*((_QWORD *)this + 1) + 40), (uint64_t)this);
}

void WebPushD::SubscribeRequest::~SubscribeRequest(WebPushD::SubscribeRequest *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebPushD::SubscribeRequest::~SubscribeRequest(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34B29F0;
  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::~PushServiceRequestImpl(this, (WTF::StringImpl *)a2);
}

const char *WebPushD::SubscribeRequest::description(WebPushD::SubscribeRequest *this)
{
  return "SubscribeRequest";
}

WTF::StringImpl *WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::start(_QWORD *a1)
{
  uint64_t v2;
  WebCore::PushSubscriptionSetIdentifier *v3;
  uint64_t v4;
  int8x16_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  void *v13;
  void *v14;
  WTF *v15;
  NSObject *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _BYTE buf[22];
  __int16 v27;
  char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (WebCore::PushSubscriptionSetIdentifier *)(a1 + 4);
  v2 = a1[4];
  if (!v2 || !*(_DWORD *)(v2 + 4) || (v4 = a1[8]) == 0 || !*(_DWORD *)(v4 + 4))
  {
    buf[0] = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject(a1, (uint64_t)buf);
    result = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (!result)
      return result;
    goto LABEL_42;
  }
  v5 = (int8x16_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v7 = v6;
  WebCore::PushSubscriptionSetIdentifier::debugDescription(v3);
  v8 = (WTF::StringImpl *)a1[8];
  if (v8)
    *(_DWORD *)v8 += 2;
  WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String>((uint64_t *)&v25, v5, v7, (uint64_t)v24, v8);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v9);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v9);
    else
      *(_DWORD *)v24 -= 2;
  }
  WTF::String::utf8();
  v12 = os_transaction_create();
  v14 = (void *)a1[11];
  a1[11] = v12;
  if (v14)

  v15 = *(WTF **)buf;
  *(_QWORD *)buf = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, v13);
    else
      --*(_DWORD *)v15;
  }
  v16 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription(v3);
    WTF::String::utf8();
    WTF::String::utf8();
    v18 = (char *)v23 + 16;
    if (!v23)
      v18 = 0;
    *(_DWORD *)buf = 136446979;
    if (v21)
      v19 = (char *)v21 + 16;
    else
      v19 = 0;
    *(_QWORD *)&buf[4] = v17;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a1;
    v27 = 2082;
    v28 = v18;
    v29 = 2085;
    v30 = v19;
    _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "Started pushServiceRequest %{public}s (%p) for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v20);
      else
        --*(_DWORD *)v21;
    }
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::fastFree(v23, v20);
      else
        --*(_DWORD *)v23;
    }
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  (*(void (**)(_QWORD *))(*a1 + 40))(a1);
  result = v25;
  v25 = 0;
  if (result)
  {
LABEL_42:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196F96A94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, WTF::StringImpl *a14, WTF *a15, WTF::StringImpl *a16)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::SubscribeRequest::finish(WebPushD::SubscribeRequest *this)
{
  return WebPushD::PushService::finishedPushServiceRequest((uint64_t *)(*((_QWORD *)this + 1) + 32), (uint64_t)this);
}

uint64_t WebPushD::SubscribeRequest::startInternal(WebPushD::SubscribeRequest *this)
{
  return WebPushD::SubscribeRequest::startImpl((uint64_t)this, 0);
}

uint64_t ___ZN8WebPushDL23performAfterFirstUnlockEON3WTF8FunctionIFvvEEE_block_invoke(int a1, int val)
{
  uint64_t result;
  NSObject *v3;
  WTF::WorkQueue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8[16];

  result = notify_is_valid_token(val);
  if ((_DWORD)result)
  {
    result = MKBDeviceUnlockedSinceBoot();
    if ((_DWORD)result == 1)
    {
      v3 = qword_1ECE716B8;
      v4 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v4)
      {
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "Device has unlocked. Running initialization.", v8, 2u);
      }
      if (dword_1ECE720F4)
      {
        v5 = qword_1ECE720E8;
        v6 = 8 * dword_1ECE720F4;
        do
        {
          v7 = WTF::WorkQueue::main(v4);
          v4 = (WTF::WorkQueue *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v5);
          v5 += 8;
          v6 -= 8;
        }
        while (v6);
      }
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1ECE720E8, 0);
      result = WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken;
      if (WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken != -1)
      {
        result = notify_cancel(WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken);
        WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken = -1;
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;

  if (result[2] > a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > a2)
    {
      v5 = (unsigned int **)(*(_QWORD *)result + 8 * a2);
      v6 = 8 * v4 - 8 * a2;
      do
      {
        result = *v5;
        *v5 = 0;
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        ++v5;
        v6 -= 8;
      }
      while (v6);
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    v7 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4)
      {
        v8 = result;
        if (result != (unsigned int *)v7)
        {
          v9 = 8 * v4;
          v10 = (unsigned int **)v7;
          do
          {
            v11 = *v10;
            *v10 = 0;
            *(_QWORD *)v8 = v11;
            result = *v10;
            *v10 = 0;
            if (result)
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            v8 += 2;
            ++v10;
            v9 -= 8;
          }
          while (v9);
        }
      }
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v7, (void *)a2);
    }
  }
  return result;
}

